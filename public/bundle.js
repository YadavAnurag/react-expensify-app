!function(e){var t={};function n(r){if(t[r])return t[r].exports;var a=t[r]={i:r,l:!1,exports:{}};return e[r].call(a.exports,a,a.exports,n),a.l=!0,a.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)n.d(r,a,function(t){return e[t]}.bind(null,a));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=198)}([function(e,t,n){(function(e){e.exports=function(){"use strict";var t;function r(){return t.apply(null,arguments)}function a(e){return e instanceof Array||"[object Array]"===Object.prototype.toString.call(e)}function o(e){return null!=e&&"[object Object]"===Object.prototype.toString.call(e)}function i(e){return void 0===e}function s(e){return"number"==typeof e||"[object Number]"===Object.prototype.toString.call(e)}function u(e){return e instanceof Date||"[object Date]"===Object.prototype.toString.call(e)}function l(e,t){var n,r=[];for(n=0;n<e.length;++n)r.push(t(e[n],n));return r}function d(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function c(e,t){for(var n in t)d(t,n)&&(e[n]=t[n]);return d(t,"toString")&&(e.toString=t.toString),d(t,"valueOf")&&(e.valueOf=t.valueOf),e}function f(e,t,n,r){return gt(e,t,n,r,!0).utc()}function p(e){return null==e._pf&&(e._pf={empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1,parsedDateParts:[],meridiem:null,rfc2822:!1,weekdayMismatch:!1}),e._pf}var h=Array.prototype.some?Array.prototype.some:function(e){for(var t=Object(this),n=t.length>>>0,r=0;r<n;r++)if(r in t&&e.call(this,t[r],r,t))return!0;return!1};function _(e){if(null==e._isValid){var t=p(e),n=h.call(t.parsedDateParts,(function(e){return null!=e})),r=!isNaN(e._d.getTime())&&t.overflow<0&&!t.empty&&!t.invalidMonth&&!t.invalidWeekday&&!t.nullInput&&!t.invalidFormat&&!t.userInvalidated&&(!t.meridiem||t.meridiem&&n);if(e._strict&&(r=r&&0===t.charsLeftOver&&0===t.unusedTokens.length&&void 0===t.bigHour),null!=Object.isFrozen&&Object.isFrozen(e))return r;e._isValid=r}return e._isValid}function m(e){var t=f(NaN);return null!=e?c(p(t),e):p(t).userInvalidated=!0,t}var y=r.momentProperties=[];function v(e,t){var n,r,a;if(i(t._isAMomentObject)||(e._isAMomentObject=t._isAMomentObject),i(t._i)||(e._i=t._i),i(t._f)||(e._f=t._f),i(t._l)||(e._l=t._l),i(t._strict)||(e._strict=t._strict),i(t._tzm)||(e._tzm=t._tzm),i(t._isUTC)||(e._isUTC=t._isUTC),i(t._offset)||(e._offset=t._offset),i(t._pf)||(e._pf=p(t)),i(t._locale)||(e._locale=t._locale),y.length>0)for(n=0;n<y.length;n++)i(a=t[r=y[n]])||(e[r]=a);return e}var M=!1;function b(e){v(this,e),this._d=new Date(null!=e._d?e._d.getTime():NaN),this.isValid()||(this._d=new Date(NaN)),!1===M&&(M=!0,r.updateOffset(this),M=!1)}function g(e){return e instanceof b||null!=e&&null!=e._isAMomentObject}function D(e){return e<0?Math.ceil(e)||0:Math.floor(e)}function k(e){var t=+e,n=0;return 0!==t&&isFinite(t)&&(n=D(t)),n}function L(e,t,n){var r,a=Math.min(e.length,t.length),o=Math.abs(e.length-t.length),i=0;for(r=0;r<a;r++)(n&&e[r]!==t[r]||!n&&k(e[r])!==k(t[r]))&&i++;return i+o}function w(e){!1===r.suppressDeprecationWarnings&&"undefined"!=typeof console&&console.warn&&console.warn("Deprecation warning: "+e)}function Y(e,t){var n=!0;return c((function(){if(null!=r.deprecationHandler&&r.deprecationHandler(null,e),n){for(var a,o=[],i=0;i<arguments.length;i++){if(a="","object"==typeof arguments[i]){for(var s in a+="\n["+i+"] ",arguments[0])a+=s+": "+arguments[0][s]+", ";a=a.slice(0,-2)}else a=arguments[i];o.push(a)}w(e+"\nArguments: "+Array.prototype.slice.call(o).join("")+"\n"+(new Error).stack),n=!1}return t.apply(this,arguments)}),t)}var T={};function S(e,t){null!=r.deprecationHandler&&r.deprecationHandler(e,t),T[e]||(w(t),T[e]=!0)}function O(e){return e instanceof Function||"[object Function]"===Object.prototype.toString.call(e)}function P(e,t){var n,r=c({},e);for(n in t)d(t,n)&&(o(e[n])&&o(t[n])?(r[n]={},c(r[n],e[n]),c(r[n],t[n])):null!=t[n]?r[n]=t[n]:delete r[n]);for(n in e)d(e,n)&&!d(t,n)&&o(e[n])&&(r[n]=c({},r[n]));return r}function x(e){null!=e&&this.set(e)}r.suppressDeprecationWarnings=!1,r.deprecationHandler=null;var E=Object.keys?Object.keys:function(e){var t,n=[];for(t in e)d(e,t)&&n.push(t);return n},j={};function C(e,t){var n=e.toLowerCase();j[n]=j[n+"s"]=j[t]=e}function H(e){return"string"==typeof e?j[e]||j[e.toLowerCase()]:void 0}function A(e){var t,n,r={};for(n in e)d(e,n)&&(t=H(n))&&(r[t]=e[n]);return r}var F={};function R(e,t){F[e]=t}function I(e,t){return function(n){return null!=n?(W(this,e,n),r.updateOffset(this,t),this):N(this,e)}}function N(e,t){return e.isValid()?e._d["get"+(e._isUTC?"UTC":"")+t]():NaN}function W(e,t,n){e.isValid()&&e._d["set"+(e._isUTC?"UTC":"")+t](n)}function z(e,t,n){var r=""+Math.abs(e),a=t-r.length;return(e>=0?n?"+":"":"-")+Math.pow(10,Math.max(0,a)).toString().substr(1)+r}var U=/(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,V=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,B={},K={};function J(e,t,n,r){var a=r;"string"==typeof r&&(a=function(){return this[r]()}),e&&(K[e]=a),t&&(K[t[0]]=function(){return z(a.apply(this,arguments),t[1],t[2])}),n&&(K[n]=function(){return this.localeData().ordinal(a.apply(this,arguments),e)})}function q(e,t){return e.isValid()?(t=G(t,e.localeData()),B[t]=B[t]||function(e){var t,n,r,a=e.match(U);for(t=0,n=a.length;t<n;t++)K[a[t]]?a[t]=K[a[t]]:a[t]=(r=a[t]).match(/\[[\s\S]/)?r.replace(/^\[|\]$/g,""):r.replace(/\\/g,"");return function(t){var r,o="";for(r=0;r<n;r++)o+=O(a[r])?a[r].call(t,e):a[r];return o}}(t),B[t](e)):e.localeData().invalidDate()}function G(e,t){var n=5;function r(e){return t.longDateFormat(e)||e}for(V.lastIndex=0;n>=0&&V.test(e);)e=e.replace(V,r),V.lastIndex=0,n-=1;return e}var $=/\d/,Q=/\d\d/,Z=/\d{3}/,X=/\d{4}/,ee=/[+-]?\d{6}/,te=/\d\d?/,ne=/\d\d\d\d?/,re=/\d\d\d\d\d\d?/,ae=/\d{1,3}/,oe=/\d{1,4}/,ie=/[+-]?\d{1,6}/,se=/\d+/,ue=/[+-]?\d+/,le=/Z|[+-]\d\d:?\d\d/gi,de=/Z|[+-]\d\d(?::?\d\d)?/gi,ce=/[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i,fe={};function pe(e,t,n){fe[e]=O(t)?t:function(e,r){return e&&n?n:t}}function he(e,t){return d(fe,e)?fe[e](t._strict,t._locale):new RegExp(_e(e.replace("\\","").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,(function(e,t,n,r,a){return t||n||r||a}))))}function _e(e){return e.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")}var me={};function ye(e,t){var n,r=t;for("string"==typeof e&&(e=[e]),s(t)&&(r=function(e,n){n[t]=k(e)}),n=0;n<e.length;n++)me[e[n]]=r}function ve(e,t){ye(e,(function(e,n,r,a){r._w=r._w||{},t(e,r._w,r,a)}))}function Me(e,t,n){null!=t&&d(me,e)&&me[e](t,n._a,n,e)}var be=Array.prototype.indexOf?Array.prototype.indexOf:function(e){var t;for(t=0;t<this.length;++t)if(this[t]===e)return t;return-1};function ge(e,t){return new Date(Date.UTC(e,t+1,0)).getUTCDate()}J("M",["MM",2],"Mo",(function(){return this.month()+1})),J("MMM",0,0,(function(e){return this.localeData().monthsShort(this,e)})),J("MMMM",0,0,(function(e){return this.localeData().months(this,e)})),C("month","M"),R("month",8),pe("M",te),pe("MM",te,Q),pe("MMM",(function(e,t){return t.monthsShortRegex(e)})),pe("MMMM",(function(e,t){return t.monthsRegex(e)})),ye(["M","MM"],(function(e,t){t[1]=k(e)-1})),ye(["MMM","MMMM"],(function(e,t,n,r){var a=n._locale.monthsParse(e,r,n._strict);null!=a?t[1]=a:p(n).invalidMonth=e}));var De=/D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,ke="January_February_March_April_May_June_July_August_September_October_November_December".split("_"),Le="Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_");function we(e,t,n){var r,a,o,i=e.toLocaleLowerCase();if(!this._monthsParse)for(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[],r=0;r<12;++r)o=f([2e3,r]),this._shortMonthsParse[r]=this.monthsShort(o,"").toLocaleLowerCase(),this._longMonthsParse[r]=this.months(o,"").toLocaleLowerCase();return n?"MMM"===t?-1!==(a=be.call(this._shortMonthsParse,i))?a:null:-1!==(a=be.call(this._longMonthsParse,i))?a:null:"MMM"===t?-1!==(a=be.call(this._shortMonthsParse,i))?a:-1!==(a=be.call(this._longMonthsParse,i))?a:null:-1!==(a=be.call(this._longMonthsParse,i))?a:-1!==(a=be.call(this._shortMonthsParse,i))?a:null}function Ye(e,t){var n;if(!e.isValid())return e;if("string"==typeof t)if(/^\d+$/.test(t))t=k(t);else if(!s(t=e.localeData().monthsParse(t)))return e;return n=Math.min(e.date(),ge(e.year(),t)),e._d["set"+(e._isUTC?"UTC":"")+"Month"](t,n),e}function Te(e){return null!=e?(Ye(this,e),r.updateOffset(this,!0),this):N(this,"Month")}var Se=ce,Oe=ce;function Pe(){function e(e,t){return t.length-e.length}var t,n,r=[],a=[],o=[];for(t=0;t<12;t++)n=f([2e3,t]),r.push(this.monthsShort(n,"")),a.push(this.months(n,"")),o.push(this.months(n,"")),o.push(this.monthsShort(n,""));for(r.sort(e),a.sort(e),o.sort(e),t=0;t<12;t++)r[t]=_e(r[t]),a[t]=_e(a[t]);for(t=0;t<24;t++)o[t]=_e(o[t]);this._monthsRegex=new RegExp("^("+o.join("|")+")","i"),this._monthsShortRegex=this._monthsRegex,this._monthsStrictRegex=new RegExp("^("+a.join("|")+")","i"),this._monthsShortStrictRegex=new RegExp("^("+r.join("|")+")","i")}function xe(e){return Ee(e)?366:365}function Ee(e){return e%4==0&&e%100!=0||e%400==0}J("Y",0,0,(function(){var e=this.year();return e<=9999?""+e:"+"+e})),J(0,["YY",2],0,(function(){return this.year()%100})),J(0,["YYYY",4],0,"year"),J(0,["YYYYY",5],0,"year"),J(0,["YYYYYY",6,!0],0,"year"),C("year","y"),R("year",1),pe("Y",ue),pe("YY",te,Q),pe("YYYY",oe,X),pe("YYYYY",ie,ee),pe("YYYYYY",ie,ee),ye(["YYYYY","YYYYYY"],0),ye("YYYY",(function(e,t){t[0]=2===e.length?r.parseTwoDigitYear(e):k(e)})),ye("YY",(function(e,t){t[0]=r.parseTwoDigitYear(e)})),ye("Y",(function(e,t){t[0]=parseInt(e,10)})),r.parseTwoDigitYear=function(e){return k(e)+(k(e)>68?1900:2e3)};var je=I("FullYear",!0);function Ce(e,t,n,r,a,o,i){var s=new Date(e,t,n,r,a,o,i);return e<100&&e>=0&&isFinite(s.getFullYear())&&s.setFullYear(e),s}function He(e){var t=new Date(Date.UTC.apply(null,arguments));return e<100&&e>=0&&isFinite(t.getUTCFullYear())&&t.setUTCFullYear(e),t}function Ae(e,t,n){var r=7+t-n;return-(7+He(e,0,r).getUTCDay()-t)%7+r-1}function Fe(e,t,n,r,a){var o,i,s=1+7*(t-1)+(7+n-r)%7+Ae(e,r,a);return s<=0?i=xe(o=e-1)+s:s>xe(e)?(o=e+1,i=s-xe(e)):(o=e,i=s),{year:o,dayOfYear:i}}function Re(e,t,n){var r,a,o=Ae(e.year(),t,n),i=Math.floor((e.dayOfYear()-o-1)/7)+1;return i<1?r=i+Ie(a=e.year()-1,t,n):i>Ie(e.year(),t,n)?(r=i-Ie(e.year(),t,n),a=e.year()+1):(a=e.year(),r=i),{week:r,year:a}}function Ie(e,t,n){var r=Ae(e,t,n),a=Ae(e+1,t,n);return(xe(e)-r+a)/7}J("w",["ww",2],"wo","week"),J("W",["WW",2],"Wo","isoWeek"),C("week","w"),C("isoWeek","W"),R("week",5),R("isoWeek",5),pe("w",te),pe("ww",te,Q),pe("W",te),pe("WW",te,Q),ve(["w","ww","W","WW"],(function(e,t,n,r){t[r.substr(0,1)]=k(e)})),J("d",0,"do","day"),J("dd",0,0,(function(e){return this.localeData().weekdaysMin(this,e)})),J("ddd",0,0,(function(e){return this.localeData().weekdaysShort(this,e)})),J("dddd",0,0,(function(e){return this.localeData().weekdays(this,e)})),J("e",0,0,"weekday"),J("E",0,0,"isoWeekday"),C("day","d"),C("weekday","e"),C("isoWeekday","E"),R("day",11),R("weekday",11),R("isoWeekday",11),pe("d",te),pe("e",te),pe("E",te),pe("dd",(function(e,t){return t.weekdaysMinRegex(e)})),pe("ddd",(function(e,t){return t.weekdaysShortRegex(e)})),pe("dddd",(function(e,t){return t.weekdaysRegex(e)})),ve(["dd","ddd","dddd"],(function(e,t,n,r){var a=n._locale.weekdaysParse(e,r,n._strict);null!=a?t.d=a:p(n).invalidWeekday=e})),ve(["d","e","E"],(function(e,t,n,r){t[r]=k(e)}));var Ne="Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),We="Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),ze="Su_Mo_Tu_We_Th_Fr_Sa".split("_");function Ue(e,t,n){var r,a,o,i=e.toLocaleLowerCase();if(!this._weekdaysParse)for(this._weekdaysParse=[],this._shortWeekdaysParse=[],this._minWeekdaysParse=[],r=0;r<7;++r)o=f([2e3,1]).day(r),this._minWeekdaysParse[r]=this.weekdaysMin(o,"").toLocaleLowerCase(),this._shortWeekdaysParse[r]=this.weekdaysShort(o,"").toLocaleLowerCase(),this._weekdaysParse[r]=this.weekdays(o,"").toLocaleLowerCase();return n?"dddd"===t?-1!==(a=be.call(this._weekdaysParse,i))?a:null:"ddd"===t?-1!==(a=be.call(this._shortWeekdaysParse,i))?a:null:-1!==(a=be.call(this._minWeekdaysParse,i))?a:null:"dddd"===t?-1!==(a=be.call(this._weekdaysParse,i))?a:-1!==(a=be.call(this._shortWeekdaysParse,i))?a:-1!==(a=be.call(this._minWeekdaysParse,i))?a:null:"ddd"===t?-1!==(a=be.call(this._shortWeekdaysParse,i))?a:-1!==(a=be.call(this._weekdaysParse,i))?a:-1!==(a=be.call(this._minWeekdaysParse,i))?a:null:-1!==(a=be.call(this._minWeekdaysParse,i))?a:-1!==(a=be.call(this._weekdaysParse,i))?a:-1!==(a=be.call(this._shortWeekdaysParse,i))?a:null}var Ve=ce,Be=ce,Ke=ce;function Je(){function e(e,t){return t.length-e.length}var t,n,r,a,o,i=[],s=[],u=[],l=[];for(t=0;t<7;t++)n=f([2e3,1]).day(t),r=this.weekdaysMin(n,""),a=this.weekdaysShort(n,""),o=this.weekdays(n,""),i.push(r),s.push(a),u.push(o),l.push(r),l.push(a),l.push(o);for(i.sort(e),s.sort(e),u.sort(e),l.sort(e),t=0;t<7;t++)s[t]=_e(s[t]),u[t]=_e(u[t]),l[t]=_e(l[t]);this._weekdaysRegex=new RegExp("^("+l.join("|")+")","i"),this._weekdaysShortRegex=this._weekdaysRegex,this._weekdaysMinRegex=this._weekdaysRegex,this._weekdaysStrictRegex=new RegExp("^("+u.join("|")+")","i"),this._weekdaysShortStrictRegex=new RegExp("^("+s.join("|")+")","i"),this._weekdaysMinStrictRegex=new RegExp("^("+i.join("|")+")","i")}function qe(){return this.hours()%12||12}function Ge(e,t){J(e,0,0,(function(){return this.localeData().meridiem(this.hours(),this.minutes(),t)}))}function $e(e,t){return t._meridiemParse}J("H",["HH",2],0,"hour"),J("h",["hh",2],0,qe),J("k",["kk",2],0,(function(){return this.hours()||24})),J("hmm",0,0,(function(){return""+qe.apply(this)+z(this.minutes(),2)})),J("hmmss",0,0,(function(){return""+qe.apply(this)+z(this.minutes(),2)+z(this.seconds(),2)})),J("Hmm",0,0,(function(){return""+this.hours()+z(this.minutes(),2)})),J("Hmmss",0,0,(function(){return""+this.hours()+z(this.minutes(),2)+z(this.seconds(),2)})),Ge("a",!0),Ge("A",!1),C("hour","h"),R("hour",13),pe("a",$e),pe("A",$e),pe("H",te),pe("h",te),pe("k",te),pe("HH",te,Q),pe("hh",te,Q),pe("kk",te,Q),pe("hmm",ne),pe("hmmss",re),pe("Hmm",ne),pe("Hmmss",re),ye(["H","HH"],3),ye(["k","kk"],(function(e,t,n){var r=k(e);t[3]=24===r?0:r})),ye(["a","A"],(function(e,t,n){n._isPm=n._locale.isPM(e),n._meridiem=e})),ye(["h","hh"],(function(e,t,n){t[3]=k(e),p(n).bigHour=!0})),ye("hmm",(function(e,t,n){var r=e.length-2;t[3]=k(e.substr(0,r)),t[4]=k(e.substr(r)),p(n).bigHour=!0})),ye("hmmss",(function(e,t,n){var r=e.length-4,a=e.length-2;t[3]=k(e.substr(0,r)),t[4]=k(e.substr(r,2)),t[5]=k(e.substr(a)),p(n).bigHour=!0})),ye("Hmm",(function(e,t,n){var r=e.length-2;t[3]=k(e.substr(0,r)),t[4]=k(e.substr(r))})),ye("Hmmss",(function(e,t,n){var r=e.length-4,a=e.length-2;t[3]=k(e.substr(0,r)),t[4]=k(e.substr(r,2)),t[5]=k(e.substr(a))}));var Qe,Ze=I("Hours",!0),Xe={calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},longDateFormat:{LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},invalidDate:"Invalid date",ordinal:"%d",dayOfMonthOrdinalParse:/\d{1,2}/,relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},months:ke,monthsShort:Le,week:{dow:0,doy:6},weekdays:Ne,weekdaysMin:ze,weekdaysShort:We,meridiemParse:/[ap]\.?m?\.?/i},et={},tt={};function nt(e){return e?e.toLowerCase().replace("_","-"):e}function rt(t){var r=null;if(!et[t]&&void 0!==e&&e&&e.exports)try{r=Qe._abbr,n(220)("./"+t),at(r)}catch(e){}return et[t]}function at(e,t){var n;return e&&(n=i(t)?it(e):ot(e,t))&&(Qe=n),Qe._abbr}function ot(e,t){if(null!==t){var n=Xe;if(t.abbr=e,null!=et[e])S("defineLocaleOverride","use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info."),n=et[e]._config;else if(null!=t.parentLocale){if(null==et[t.parentLocale])return tt[t.parentLocale]||(tt[t.parentLocale]=[]),tt[t.parentLocale].push({name:e,config:t}),null;n=et[t.parentLocale]._config}return et[e]=new x(P(n,t)),tt[e]&&tt[e].forEach((function(e){ot(e.name,e.config)})),at(e),et[e]}return delete et[e],null}function it(e){var t;if(e&&e._locale&&e._locale._abbr&&(e=e._locale._abbr),!e)return Qe;if(!a(e)){if(t=rt(e))return t;e=[e]}return function(e){for(var t,n,r,a,o=0;o<e.length;){for(t=(a=nt(e[o]).split("-")).length,n=(n=nt(e[o+1]))?n.split("-"):null;t>0;){if(r=rt(a.slice(0,t).join("-")))return r;if(n&&n.length>=t&&L(a,n,!0)>=t-1)break;t--}o++}return null}(e)}function st(e){var t,n=e._a;return n&&-2===p(e).overflow&&(t=n[1]<0||n[1]>11?1:n[2]<1||n[2]>ge(n[0],n[1])?2:n[3]<0||n[3]>24||24===n[3]&&(0!==n[4]||0!==n[5]||0!==n[6])?3:n[4]<0||n[4]>59?4:n[5]<0||n[5]>59?5:n[6]<0||n[6]>999?6:-1,p(e)._overflowDayOfYear&&(t<0||t>2)&&(t=2),p(e)._overflowWeeks&&-1===t&&(t=7),p(e)._overflowWeekday&&-1===t&&(t=8),p(e).overflow=t),e}var ut=/^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,lt=/^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,dt=/Z|[+-]\d\d(?::?\d\d)?/,ct=[["YYYYYY-MM-DD",/[+-]\d{6}-\d\d-\d\d/],["YYYY-MM-DD",/\d{4}-\d\d-\d\d/],["GGGG-[W]WW-E",/\d{4}-W\d\d-\d/],["GGGG-[W]WW",/\d{4}-W\d\d/,!1],["YYYY-DDD",/\d{4}-\d{3}/],["YYYY-MM",/\d{4}-\d\d/,!1],["YYYYYYMMDD",/[+-]\d{10}/],["YYYYMMDD",/\d{8}/],["GGGG[W]WWE",/\d{4}W\d{3}/],["GGGG[W]WW",/\d{4}W\d{2}/,!1],["YYYYDDD",/\d{7}/]],ft=[["HH:mm:ss.SSSS",/\d\d:\d\d:\d\d\.\d+/],["HH:mm:ss,SSSS",/\d\d:\d\d:\d\d,\d+/],["HH:mm:ss",/\d\d:\d\d:\d\d/],["HH:mm",/\d\d:\d\d/],["HHmmss.SSSS",/\d\d\d\d\d\d\.\d+/],["HHmmss,SSSS",/\d\d\d\d\d\d,\d+/],["HHmmss",/\d\d\d\d\d\d/],["HHmm",/\d\d\d\d/],["HH",/\d\d/]],pt=/^\/?Date\((\-?\d+)/i;function ht(e){var t,n,r,a,o,i,s=e._i,u=ut.exec(s)||lt.exec(s);if(u){for(p(e).iso=!0,t=0,n=ct.length;t<n;t++)if(ct[t][1].exec(u[1])){a=ct[t][0],r=!1!==ct[t][2];break}if(null==a)return void(e._isValid=!1);if(u[3]){for(t=0,n=ft.length;t<n;t++)if(ft[t][1].exec(u[3])){o=(u[2]||" ")+ft[t][0];break}if(null==o)return void(e._isValid=!1)}if(!r&&null!=o)return void(e._isValid=!1);if(u[4]){if(!dt.exec(u[4]))return void(e._isValid=!1);i="Z"}e._f=a+(o||"")+(i||""),Mt(e)}else e._isValid=!1}var _t=/^((?:Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d?\d\s(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(?:\d\d)?\d\d\s)(\d\d:\d\d)(\:\d\d)?(\s(?:UT|GMT|[ECMP][SD]T|[A-IK-Za-ik-z]|[+-]\d{4}))$/;function mt(e){var t,n,r,a,o,i,s,u={" GMT":" +0000"," EDT":" -0400"," EST":" -0500"," CDT":" -0500"," CST":" -0600"," MDT":" -0600"," MST":" -0700"," PDT":" -0700"," PST":" -0800"};if(t=e._i.replace(/\([^\)]*\)|[\n\t]/g," ").replace(/(\s\s+)/g," ").replace(/^\s|\s$/g,""),n=_t.exec(t)){if(r=n[1]?"ddd"+(5===n[1].length?", ":" "):"",a="D MMM "+(n[2].length>10?"YYYY ":"YY "),o="HH:mm"+(n[4]?":ss":""),n[1]){var l=["Sun","Mon","Tue","Wed","Thu","Fri","Sat"][new Date(n[2]).getDay()];if(n[1].substr(0,3)!==l)return p(e).weekdayMismatch=!0,void(e._isValid=!1)}switch(n[5].length){case 2:i=0===s?" +0000":((s="YXWVUTSRQPONZABCDEFGHIKLM".indexOf(n[5][1].toUpperCase())-12)<0?" -":" +")+(""+s).replace(/^-?/,"0").match(/..$/)[0]+"00";break;case 4:i=u[n[5]];break;default:i=u[" GMT"]}n[5]=i,e._i=n.splice(1).join(""),e._f=r+a+o+" ZZ",Mt(e),p(e).rfc2822=!0}else e._isValid=!1}function yt(e,t,n){return null!=e?e:null!=t?t:n}function vt(e){var t,n,a,o,i=[];if(!e._d){for(a=function(e){var t=new Date(r.now());return e._useUTC?[t.getUTCFullYear(),t.getUTCMonth(),t.getUTCDate()]:[t.getFullYear(),t.getMonth(),t.getDate()]}(e),e._w&&null==e._a[2]&&null==e._a[1]&&function(e){var t,n,r,a,o,i,s,u;if(null!=(t=e._w).GG||null!=t.W||null!=t.E)o=1,i=4,n=yt(t.GG,e._a[0],Re(Dt(),1,4).year),r=yt(t.W,1),((a=yt(t.E,1))<1||a>7)&&(u=!0);else{o=e._locale._week.dow,i=e._locale._week.doy;var l=Re(Dt(),o,i);n=yt(t.gg,e._a[0],l.year),r=yt(t.w,l.week),null!=t.d?((a=t.d)<0||a>6)&&(u=!0):null!=t.e?(a=t.e+o,(t.e<0||t.e>6)&&(u=!0)):a=o}r<1||r>Ie(n,o,i)?p(e)._overflowWeeks=!0:null!=u?p(e)._overflowWeekday=!0:(s=Fe(n,r,a,o,i),e._a[0]=s.year,e._dayOfYear=s.dayOfYear)}(e),null!=e._dayOfYear&&(o=yt(e._a[0],a[0]),(e._dayOfYear>xe(o)||0===e._dayOfYear)&&(p(e)._overflowDayOfYear=!0),n=He(o,0,e._dayOfYear),e._a[1]=n.getUTCMonth(),e._a[2]=n.getUTCDate()),t=0;t<3&&null==e._a[t];++t)e._a[t]=i[t]=a[t];for(;t<7;t++)e._a[t]=i[t]=null==e._a[t]?2===t?1:0:e._a[t];24===e._a[3]&&0===e._a[4]&&0===e._a[5]&&0===e._a[6]&&(e._nextDay=!0,e._a[3]=0),e._d=(e._useUTC?He:Ce).apply(null,i),null!=e._tzm&&e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm),e._nextDay&&(e._a[3]=24)}}function Mt(e){if(e._f!==r.ISO_8601)if(e._f!==r.RFC_2822){e._a=[],p(e).empty=!0;var t,n,a,o,i,s=""+e._i,u=s.length,l=0;for(a=G(e._f,e._locale).match(U)||[],t=0;t<a.length;t++)o=a[t],(n=(s.match(he(o,e))||[])[0])&&((i=s.substr(0,s.indexOf(n))).length>0&&p(e).unusedInput.push(i),s=s.slice(s.indexOf(n)+n.length),l+=n.length),K[o]?(n?p(e).empty=!1:p(e).unusedTokens.push(o),Me(o,n,e)):e._strict&&!n&&p(e).unusedTokens.push(o);p(e).charsLeftOver=u-l,s.length>0&&p(e).unusedInput.push(s),e._a[3]<=12&&!0===p(e).bigHour&&e._a[3]>0&&(p(e).bigHour=void 0),p(e).parsedDateParts=e._a.slice(0),p(e).meridiem=e._meridiem,e._a[3]=function(e,t,n){var r;return null==n?t:null!=e.meridiemHour?e.meridiemHour(t,n):null!=e.isPM?((r=e.isPM(n))&&t<12&&(t+=12),r||12!==t||(t=0),t):t}(e._locale,e._a[3],e._meridiem),vt(e),st(e)}else mt(e);else ht(e)}function bt(e){var t=e._i,n=e._f;return e._locale=e._locale||it(e._l),null===t||void 0===n&&""===t?m({nullInput:!0}):("string"==typeof t&&(e._i=t=e._locale.preparse(t)),g(t)?new b(st(t)):(u(t)?e._d=t:a(n)?function(e){var t,n,r,a,o;if(0===e._f.length)return p(e).invalidFormat=!0,void(e._d=new Date(NaN));for(a=0;a<e._f.length;a++)o=0,t=v({},e),null!=e._useUTC&&(t._useUTC=e._useUTC),t._f=e._f[a],Mt(t),_(t)&&(o+=p(t).charsLeftOver,o+=10*p(t).unusedTokens.length,p(t).score=o,(null==r||o<r)&&(r=o,n=t));c(e,n||t)}(e):n?Mt(e):function(e){var t=e._i;i(t)?e._d=new Date(r.now()):u(t)?e._d=new Date(t.valueOf()):"string"==typeof t?function(e){var t=pt.exec(e._i);null===t?(ht(e),!1===e._isValid&&(delete e._isValid,mt(e),!1===e._isValid&&(delete e._isValid,r.createFromInputFallback(e)))):e._d=new Date(+t[1])}(e):a(t)?(e._a=l(t.slice(0),(function(e){return parseInt(e,10)})),vt(e)):o(t)?function(e){if(!e._d){var t=A(e._i);e._a=l([t.year,t.month,t.day||t.date,t.hour,t.minute,t.second,t.millisecond],(function(e){return e&&parseInt(e,10)})),vt(e)}}(e):s(t)?e._d=new Date(t):r.createFromInputFallback(e)}(e),_(e)||(e._d=null),e))}function gt(e,t,n,r,i){var s,u={};return!0!==n&&!1!==n||(r=n,n=void 0),(o(e)&&function(e){var t;for(t in e)return!1;return!0}(e)||a(e)&&0===e.length)&&(e=void 0),u._isAMomentObject=!0,u._useUTC=u._isUTC=i,u._l=n,u._i=e,u._f=t,u._strict=r,(s=new b(st(bt(u))))._nextDay&&(s.add(1,"d"),s._nextDay=void 0),s}function Dt(e,t,n,r){return gt(e,t,n,r,!1)}r.createFromInputFallback=Y("value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged and will be removed in an upcoming major release. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.",(function(e){e._d=new Date(e._i+(e._useUTC?" UTC":""))})),r.ISO_8601=function(){},r.RFC_2822=function(){};var kt=Y("moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/",(function(){var e=Dt.apply(null,arguments);return this.isValid()&&e.isValid()?e<this?this:e:m()})),Lt=Y("moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/",(function(){var e=Dt.apply(null,arguments);return this.isValid()&&e.isValid()?e>this?this:e:m()}));function wt(e,t){var n,r;if(1===t.length&&a(t[0])&&(t=t[0]),!t.length)return Dt();for(n=t[0],r=1;r<t.length;++r)t[r].isValid()&&!t[r][e](n)||(n=t[r]);return n}var Yt=["year","quarter","month","week","day","hour","minute","second","millisecond"];function Tt(e){var t=A(e),n=t.year||0,r=t.quarter||0,a=t.month||0,o=t.week||0,i=t.day||0,s=t.hour||0,u=t.minute||0,l=t.second||0,d=t.millisecond||0;this._isValid=function(e){for(var t in e)if(-1===Yt.indexOf(t)||null!=e[t]&&isNaN(e[t]))return!1;for(var n=!1,r=0;r<Yt.length;++r)if(e[Yt[r]]){if(n)return!1;parseFloat(e[Yt[r]])!==k(e[Yt[r]])&&(n=!0)}return!0}(t),this._milliseconds=+d+1e3*l+6e4*u+1e3*s*60*60,this._days=+i+7*o,this._months=+a+3*r+12*n,this._data={},this._locale=it(),this._bubble()}function St(e){return e instanceof Tt}function Ot(e){return e<0?-1*Math.round(-1*e):Math.round(e)}function Pt(e,t){J(e,0,0,(function(){var e=this.utcOffset(),n="+";return e<0&&(e=-e,n="-"),n+z(~~(e/60),2)+t+z(~~e%60,2)}))}Pt("Z",":"),Pt("ZZ",""),pe("Z",de),pe("ZZ",de),ye(["Z","ZZ"],(function(e,t,n){n._useUTC=!0,n._tzm=Et(de,e)}));var xt=/([\+\-]|\d\d)/gi;function Et(e,t){var n=(t||"").match(e);if(null===n)return null;var r=((n[n.length-1]||[])+"").match(xt)||["-",0,0],a=60*r[1]+k(r[2]);return 0===a?0:"+"===r[0]?a:-a}function jt(e,t){var n,a;return t._isUTC?(n=t.clone(),a=(g(e)||u(e)?e.valueOf():Dt(e).valueOf())-n.valueOf(),n._d.setTime(n._d.valueOf()+a),r.updateOffset(n,!1),n):Dt(e).local()}function Ct(e){return 15*-Math.round(e._d.getTimezoneOffset()/15)}function Ht(){return!!this.isValid()&&this._isUTC&&0===this._offset}r.updateOffset=function(){};var At=/^(\-)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/,Ft=/^(-)?P(?:(-?[0-9,.]*)Y)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)W)?(?:(-?[0-9,.]*)D)?(?:T(?:(-?[0-9,.]*)H)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)S)?)?$/;function Rt(e,t){var n,r,a,o,i,u,l=e,c=null;return St(e)?l={ms:e._milliseconds,d:e._days,M:e._months}:s(e)?(l={},t?l[t]=e:l.milliseconds=e):(c=At.exec(e))?(n="-"===c[1]?-1:1,l={y:0,d:k(c[2])*n,h:k(c[3])*n,m:k(c[4])*n,s:k(c[5])*n,ms:k(Ot(1e3*c[6]))*n}):(c=Ft.exec(e))?(n="-"===c[1]?-1:1,l={y:It(c[2],n),M:It(c[3],n),w:It(c[4],n),d:It(c[5],n),h:It(c[6],n),m:It(c[7],n),s:It(c[8],n)}):null==l?l={}:"object"==typeof l&&("from"in l||"to"in l)&&(o=Dt(l.from),i=Dt(l.to),a=o.isValid()&&i.isValid()?(i=jt(i,o),o.isBefore(i)?u=Nt(o,i):((u=Nt(i,o)).milliseconds=-u.milliseconds,u.months=-u.months),u):{milliseconds:0,months:0},(l={}).ms=a.milliseconds,l.M=a.months),r=new Tt(l),St(e)&&d(e,"_locale")&&(r._locale=e._locale),r}function It(e,t){var n=e&&parseFloat(e.replace(",","."));return(isNaN(n)?0:n)*t}function Nt(e,t){var n={milliseconds:0,months:0};return n.months=t.month()-e.month()+12*(t.year()-e.year()),e.clone().add(n.months,"M").isAfter(t)&&--n.months,n.milliseconds=+t-+e.clone().add(n.months,"M"),n}function Wt(e,t){return function(n,r){var a;return null===r||isNaN(+r)||(S(t,"moment()."+t+"(period, number) is deprecated. Please use moment()."+t+"(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."),a=n,n=r,r=a),zt(this,Rt(n="string"==typeof n?+n:n,r),e),this}}function zt(e,t,n,a){var o=t._milliseconds,i=Ot(t._days),s=Ot(t._months);e.isValid()&&(a=null==a||a,o&&e._d.setTime(e._d.valueOf()+o*n),i&&W(e,"Date",N(e,"Date")+i*n),s&&Ye(e,N(e,"Month")+s*n),a&&r.updateOffset(e,i||s))}Rt.fn=Tt.prototype,Rt.invalid=function(){return Rt(NaN)};var Ut=Wt(1,"add"),Vt=Wt(-1,"subtract");function Bt(e){var t;return void 0===e?this._locale._abbr:(null!=(t=it(e))&&(this._locale=t),this)}r.defaultFormat="YYYY-MM-DDTHH:mm:ssZ",r.defaultFormatUtc="YYYY-MM-DDTHH:mm:ss[Z]";var Kt=Y("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",(function(e){return void 0===e?this.localeData():this.locale(e)}));function Jt(){return this._locale}function qt(e,t){J(0,[e,e.length],0,t)}function Gt(e,t,n,r,a){var o;return null==e?Re(this,r,a).year:(t>(o=Ie(e,r,a))&&(t=o),$t.call(this,e,t,n,r,a))}function $t(e,t,n,r,a){var o=Fe(e,t,n,r,a),i=He(o.year,0,o.dayOfYear);return this.year(i.getUTCFullYear()),this.month(i.getUTCMonth()),this.date(i.getUTCDate()),this}J(0,["gg",2],0,(function(){return this.weekYear()%100})),J(0,["GG",2],0,(function(){return this.isoWeekYear()%100})),qt("gggg","weekYear"),qt("ggggg","weekYear"),qt("GGGG","isoWeekYear"),qt("GGGGG","isoWeekYear"),C("weekYear","gg"),C("isoWeekYear","GG"),R("weekYear",1),R("isoWeekYear",1),pe("G",ue),pe("g",ue),pe("GG",te,Q),pe("gg",te,Q),pe("GGGG",oe,X),pe("gggg",oe,X),pe("GGGGG",ie,ee),pe("ggggg",ie,ee),ve(["gggg","ggggg","GGGG","GGGGG"],(function(e,t,n,r){t[r.substr(0,2)]=k(e)})),ve(["gg","GG"],(function(e,t,n,a){t[a]=r.parseTwoDigitYear(e)})),J("Q",0,"Qo","quarter"),C("quarter","Q"),R("quarter",7),pe("Q",$),ye("Q",(function(e,t){t[1]=3*(k(e)-1)})),J("D",["DD",2],"Do","date"),C("date","D"),R("date",9),pe("D",te),pe("DD",te,Q),pe("Do",(function(e,t){return e?t._dayOfMonthOrdinalParse||t._ordinalParse:t._dayOfMonthOrdinalParseLenient})),ye(["D","DD"],2),ye("Do",(function(e,t){t[2]=k(e.match(te)[0])}));var Qt=I("Date",!0);J("DDD",["DDDD",3],"DDDo","dayOfYear"),C("dayOfYear","DDD"),R("dayOfYear",4),pe("DDD",ae),pe("DDDD",Z),ye(["DDD","DDDD"],(function(e,t,n){n._dayOfYear=k(e)})),J("m",["mm",2],0,"minute"),C("minute","m"),R("minute",14),pe("m",te),pe("mm",te,Q),ye(["m","mm"],4);var Zt=I("Minutes",!1);J("s",["ss",2],0,"second"),C("second","s"),R("second",15),pe("s",te),pe("ss",te,Q),ye(["s","ss"],5);var Xt,en=I("Seconds",!1);for(J("S",0,0,(function(){return~~(this.millisecond()/100)})),J(0,["SS",2],0,(function(){return~~(this.millisecond()/10)})),J(0,["SSS",3],0,"millisecond"),J(0,["SSSS",4],0,(function(){return 10*this.millisecond()})),J(0,["SSSSS",5],0,(function(){return 100*this.millisecond()})),J(0,["SSSSSS",6],0,(function(){return 1e3*this.millisecond()})),J(0,["SSSSSSS",7],0,(function(){return 1e4*this.millisecond()})),J(0,["SSSSSSSS",8],0,(function(){return 1e5*this.millisecond()})),J(0,["SSSSSSSSS",9],0,(function(){return 1e6*this.millisecond()})),C("millisecond","ms"),R("millisecond",16),pe("S",ae,$),pe("SS",ae,Q),pe("SSS",ae,Z),Xt="SSSS";Xt.length<=9;Xt+="S")pe(Xt,se);function tn(e,t){t[6]=k(1e3*("0."+e))}for(Xt="S";Xt.length<=9;Xt+="S")ye(Xt,tn);var nn=I("Milliseconds",!1);J("z",0,0,"zoneAbbr"),J("zz",0,0,"zoneName");var rn=b.prototype;function an(e){return e}rn.add=Ut,rn.calendar=function(e,t){var n=e||Dt(),a=jt(n,this).startOf("day"),o=r.calendarFormat(this,a)||"sameElse",i=t&&(O(t[o])?t[o].call(this,n):t[o]);return this.format(i||this.localeData().calendar(o,this,Dt(n)))},rn.clone=function(){return new b(this)},rn.diff=function(e,t,n){var r,a,o,i,s,u,l,d,c,f;return this.isValid()&&(r=jt(e,this)).isValid()?(a=6e4*(r.utcOffset()-this.utcOffset()),"year"===(t=H(t))||"month"===t||"quarter"===t?(s=this,c=12*((u=r).year()-s.year())+(u.month()-s.month()),f=s.clone().add(c,"months"),u-f<0?(l=s.clone().add(c-1,"months"),d=(u-f)/(f-l)):(l=s.clone().add(c+1,"months"),d=(u-f)/(l-f)),i=-(c+d)||0,"quarter"===t?i/=3:"year"===t&&(i/=12)):(o=this-r,i="second"===t?o/1e3:"minute"===t?o/6e4:"hour"===t?o/36e5:"day"===t?(o-a)/864e5:"week"===t?(o-a)/6048e5:o),n?i:D(i)):NaN},rn.endOf=function(e){return void 0===(e=H(e))||"millisecond"===e?this:("date"===e&&(e="day"),this.startOf(e).add(1,"isoWeek"===e?"week":e).subtract(1,"ms"))},rn.format=function(e){e||(e=this.isUtc()?r.defaultFormatUtc:r.defaultFormat);var t=q(this,e);return this.localeData().postformat(t)},rn.from=function(e,t){return this.isValid()&&(g(e)&&e.isValid()||Dt(e).isValid())?Rt({to:this,from:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()},rn.fromNow=function(e){return this.from(Dt(),e)},rn.to=function(e,t){return this.isValid()&&(g(e)&&e.isValid()||Dt(e).isValid())?Rt({from:this,to:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()},rn.toNow=function(e){return this.to(Dt(),e)},rn.get=function(e){return O(this[e=H(e)])?this[e]():this},rn.invalidAt=function(){return p(this).overflow},rn.isAfter=function(e,t){var n=g(e)?e:Dt(e);return!(!this.isValid()||!n.isValid())&&("millisecond"===(t=H(i(t)?"millisecond":t))?this.valueOf()>n.valueOf():n.valueOf()<this.clone().startOf(t).valueOf())},rn.isBefore=function(e,t){var n=g(e)?e:Dt(e);return!(!this.isValid()||!n.isValid())&&("millisecond"===(t=H(i(t)?"millisecond":t))?this.valueOf()<n.valueOf():this.clone().endOf(t).valueOf()<n.valueOf())},rn.isBetween=function(e,t,n,r){return("("===(r=r||"()")[0]?this.isAfter(e,n):!this.isBefore(e,n))&&(")"===r[1]?this.isBefore(t,n):!this.isAfter(t,n))},rn.isSame=function(e,t){var n,r=g(e)?e:Dt(e);return!(!this.isValid()||!r.isValid())&&("millisecond"===(t=H(t||"millisecond"))?this.valueOf()===r.valueOf():(n=r.valueOf(),this.clone().startOf(t).valueOf()<=n&&n<=this.clone().endOf(t).valueOf()))},rn.isSameOrAfter=function(e,t){return this.isSame(e,t)||this.isAfter(e,t)},rn.isSameOrBefore=function(e,t){return this.isSame(e,t)||this.isBefore(e,t)},rn.isValid=function(){return _(this)},rn.lang=Kt,rn.locale=Bt,rn.localeData=Jt,rn.max=Lt,rn.min=kt,rn.parsingFlags=function(){return c({},p(this))},rn.set=function(e,t){if("object"==typeof e)for(var n=function(e){var t=[];for(var n in e)t.push({unit:n,priority:F[n]});return t.sort((function(e,t){return e.priority-t.priority})),t}(e=A(e)),r=0;r<n.length;r++)this[n[r].unit](e[n[r].unit]);else if(O(this[e=H(e)]))return this[e](t);return this},rn.startOf=function(e){switch(e=H(e)){case"year":this.month(0);case"quarter":case"month":this.date(1);case"week":case"isoWeek":case"day":case"date":this.hours(0);case"hour":this.minutes(0);case"minute":this.seconds(0);case"second":this.milliseconds(0)}return"week"===e&&this.weekday(0),"isoWeek"===e&&this.isoWeekday(1),"quarter"===e&&this.month(3*Math.floor(this.month()/3)),this},rn.subtract=Vt,rn.toArray=function(){var e=this;return[e.year(),e.month(),e.date(),e.hour(),e.minute(),e.second(),e.millisecond()]},rn.toObject=function(){var e=this;return{years:e.year(),months:e.month(),date:e.date(),hours:e.hours(),minutes:e.minutes(),seconds:e.seconds(),milliseconds:e.milliseconds()}},rn.toDate=function(){return new Date(this.valueOf())},rn.toISOString=function(){if(!this.isValid())return null;var e=this.clone().utc();return e.year()<0||e.year()>9999?q(e,"YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]"):O(Date.prototype.toISOString)?this.toDate().toISOString():q(e,"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]")},rn.inspect=function(){if(!this.isValid())return"moment.invalid(/* "+this._i+" */)";var e="moment",t="";this.isLocal()||(e=0===this.utcOffset()?"moment.utc":"moment.parseZone",t="Z");var n="["+e+'("]',r=0<=this.year()&&this.year()<=9999?"YYYY":"YYYYYY",a=t+'[")]';return this.format(n+r+"-MM-DD[T]HH:mm:ss.SSS"+a)},rn.toJSON=function(){return this.isValid()?this.toISOString():null},rn.toString=function(){return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")},rn.unix=function(){return Math.floor(this.valueOf()/1e3)},rn.valueOf=function(){return this._d.valueOf()-6e4*(this._offset||0)},rn.creationData=function(){return{input:this._i,format:this._f,locale:this._locale,isUTC:this._isUTC,strict:this._strict}},rn.year=je,rn.isLeapYear=function(){return Ee(this.year())},rn.weekYear=function(e){return Gt.call(this,e,this.week(),this.weekday(),this.localeData()._week.dow,this.localeData()._week.doy)},rn.isoWeekYear=function(e){return Gt.call(this,e,this.isoWeek(),this.isoWeekday(),1,4)},rn.quarter=rn.quarters=function(e){return null==e?Math.ceil((this.month()+1)/3):this.month(3*(e-1)+this.month()%3)},rn.month=Te,rn.daysInMonth=function(){return ge(this.year(),this.month())},rn.week=rn.weeks=function(e){var t=this.localeData().week(this);return null==e?t:this.add(7*(e-t),"d")},rn.isoWeek=rn.isoWeeks=function(e){var t=Re(this,1,4).week;return null==e?t:this.add(7*(e-t),"d")},rn.weeksInYear=function(){var e=this.localeData()._week;return Ie(this.year(),e.dow,e.doy)},rn.isoWeeksInYear=function(){return Ie(this.year(),1,4)},rn.date=Qt,rn.day=rn.days=function(e){if(!this.isValid())return null!=e?this:NaN;var t=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=e?(e=function(e,t){return"string"!=typeof e?e:isNaN(e)?"number"==typeof(e=t.weekdaysParse(e))?e:null:parseInt(e,10)}(e,this.localeData()),this.add(e-t,"d")):t},rn.weekday=function(e){if(!this.isValid())return null!=e?this:NaN;var t=(this.day()+7-this.localeData()._week.dow)%7;return null==e?t:this.add(e-t,"d")},rn.isoWeekday=function(e){if(!this.isValid())return null!=e?this:NaN;if(null!=e){var t=function(e,t){return"string"==typeof e?t.weekdaysParse(e)%7||7:isNaN(e)?null:e}(e,this.localeData());return this.day(this.day()%7?t:t-7)}return this.day()||7},rn.dayOfYear=function(e){var t=Math.round((this.clone().startOf("day")-this.clone().startOf("year"))/864e5)+1;return null==e?t:this.add(e-t,"d")},rn.hour=rn.hours=Ze,rn.minute=rn.minutes=Zt,rn.second=rn.seconds=en,rn.millisecond=rn.milliseconds=nn,rn.utcOffset=function(e,t,n){var a,o=this._offset||0;if(!this.isValid())return null!=e?this:NaN;if(null!=e){if("string"==typeof e){if(null===(e=Et(de,e)))return this}else Math.abs(e)<16&&!n&&(e*=60);return!this._isUTC&&t&&(a=Ct(this)),this._offset=e,this._isUTC=!0,null!=a&&this.add(a,"m"),o!==e&&(!t||this._changeInProgress?zt(this,Rt(e-o,"m"),1,!1):this._changeInProgress||(this._changeInProgress=!0,r.updateOffset(this,!0),this._changeInProgress=null)),this}return this._isUTC?o:Ct(this)},rn.utc=function(e){return this.utcOffset(0,e)},rn.local=function(e){return this._isUTC&&(this.utcOffset(0,e),this._isUTC=!1,e&&this.subtract(Ct(this),"m")),this},rn.parseZone=function(){if(null!=this._tzm)this.utcOffset(this._tzm,!1,!0);else if("string"==typeof this._i){var e=Et(le,this._i);null!=e?this.utcOffset(e):this.utcOffset(0,!0)}return this},rn.hasAlignedHourOffset=function(e){return!!this.isValid()&&(e=e?Dt(e).utcOffset():0,(this.utcOffset()-e)%60==0)},rn.isDST=function(){return this.utcOffset()>this.clone().month(0).utcOffset()||this.utcOffset()>this.clone().month(5).utcOffset()},rn.isLocal=function(){return!!this.isValid()&&!this._isUTC},rn.isUtcOffset=function(){return!!this.isValid()&&this._isUTC},rn.isUtc=Ht,rn.isUTC=Ht,rn.zoneAbbr=function(){return this._isUTC?"UTC":""},rn.zoneName=function(){return this._isUTC?"Coordinated Universal Time":""},rn.dates=Y("dates accessor is deprecated. Use date instead.",Qt),rn.months=Y("months accessor is deprecated. Use month instead",Te),rn.years=Y("years accessor is deprecated. Use year instead",je),rn.zone=Y("moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/",(function(e,t){return null!=e?("string"!=typeof e&&(e=-e),this.utcOffset(e,t),this):-this.utcOffset()})),rn.isDSTShifted=Y("isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information",(function(){if(!i(this._isDSTShifted))return this._isDSTShifted;var e={};if(v(e,this),(e=bt(e))._a){var t=e._isUTC?f(e._a):Dt(e._a);this._isDSTShifted=this.isValid()&&L(e._a,t.toArray())>0}else this._isDSTShifted=!1;return this._isDSTShifted}));var on=x.prototype;function sn(e,t,n,r){var a=it(),o=f().set(r,t);return a[n](o,e)}function un(e,t,n){if(s(e)&&(t=e,e=void 0),e=e||"",null!=t)return sn(e,t,n,"month");var r,a=[];for(r=0;r<12;r++)a[r]=sn(e,r,n,"month");return a}function ln(e,t,n,r){"boolean"==typeof e?(s(t)&&(n=t,t=void 0),t=t||""):(n=t=e,e=!1,s(t)&&(n=t,t=void 0),t=t||"");var a,o=it(),i=e?o._week.dow:0;if(null!=n)return sn(t,(n+i)%7,r,"day");var u=[];for(a=0;a<7;a++)u[a]=sn(t,(a+i)%7,r,"day");return u}on.calendar=function(e,t,n){var r=this._calendar[e]||this._calendar.sameElse;return O(r)?r.call(t,n):r},on.longDateFormat=function(e){var t=this._longDateFormat[e],n=this._longDateFormat[e.toUpperCase()];return t||!n?t:(this._longDateFormat[e]=n.replace(/MMMM|MM|DD|dddd/g,(function(e){return e.slice(1)})),this._longDateFormat[e])},on.invalidDate=function(){return this._invalidDate},on.ordinal=function(e){return this._ordinal.replace("%d",e)},on.preparse=an,on.postformat=an,on.relativeTime=function(e,t,n,r){var a=this._relativeTime[n];return O(a)?a(e,t,n,r):a.replace(/%d/i,e)},on.pastFuture=function(e,t){var n=this._relativeTime[e>0?"future":"past"];return O(n)?n(t):n.replace(/%s/i,t)},on.set=function(e){var t,n;for(n in e)O(t=e[n])?this[n]=t:this["_"+n]=t;this._config=e,this._dayOfMonthOrdinalParseLenient=new RegExp((this._dayOfMonthOrdinalParse.source||this._ordinalParse.source)+"|"+/\d{1,2}/.source)},on.months=function(e,t){return e?a(this._months)?this._months[e.month()]:this._months[(this._months.isFormat||De).test(t)?"format":"standalone"][e.month()]:a(this._months)?this._months:this._months.standalone},on.monthsShort=function(e,t){return e?a(this._monthsShort)?this._monthsShort[e.month()]:this._monthsShort[De.test(t)?"format":"standalone"][e.month()]:a(this._monthsShort)?this._monthsShort:this._monthsShort.standalone},on.monthsParse=function(e,t,n){var r,a,o;if(this._monthsParseExact)return we.call(this,e,t,n);for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),r=0;r<12;r++){if(a=f([2e3,r]),n&&!this._longMonthsParse[r]&&(this._longMonthsParse[r]=new RegExp("^"+this.months(a,"").replace(".","")+"$","i"),this._shortMonthsParse[r]=new RegExp("^"+this.monthsShort(a,"").replace(".","")+"$","i")),n||this._monthsParse[r]||(o="^"+this.months(a,"")+"|^"+this.monthsShort(a,""),this._monthsParse[r]=new RegExp(o.replace(".",""),"i")),n&&"MMMM"===t&&this._longMonthsParse[r].test(e))return r;if(n&&"MMM"===t&&this._shortMonthsParse[r].test(e))return r;if(!n&&this._monthsParse[r].test(e))return r}},on.monthsRegex=function(e){return this._monthsParseExact?(d(this,"_monthsRegex")||Pe.call(this),e?this._monthsStrictRegex:this._monthsRegex):(d(this,"_monthsRegex")||(this._monthsRegex=Oe),this._monthsStrictRegex&&e?this._monthsStrictRegex:this._monthsRegex)},on.monthsShortRegex=function(e){return this._monthsParseExact?(d(this,"_monthsRegex")||Pe.call(this),e?this._monthsShortStrictRegex:this._monthsShortRegex):(d(this,"_monthsShortRegex")||(this._monthsShortRegex=Se),this._monthsShortStrictRegex&&e?this._monthsShortStrictRegex:this._monthsShortRegex)},on.week=function(e){return Re(e,this._week.dow,this._week.doy).week},on.firstDayOfYear=function(){return this._week.doy},on.firstDayOfWeek=function(){return this._week.dow},on.weekdays=function(e,t){return e?a(this._weekdays)?this._weekdays[e.day()]:this._weekdays[this._weekdays.isFormat.test(t)?"format":"standalone"][e.day()]:a(this._weekdays)?this._weekdays:this._weekdays.standalone},on.weekdaysMin=function(e){return e?this._weekdaysMin[e.day()]:this._weekdaysMin},on.weekdaysShort=function(e){return e?this._weekdaysShort[e.day()]:this._weekdaysShort},on.weekdaysParse=function(e,t,n){var r,a,o;if(this._weekdaysParseExact)return Ue.call(this,e,t,n);for(this._weekdaysParse||(this._weekdaysParse=[],this._minWeekdaysParse=[],this._shortWeekdaysParse=[],this._fullWeekdaysParse=[]),r=0;r<7;r++){if(a=f([2e3,1]).day(r),n&&!this._fullWeekdaysParse[r]&&(this._fullWeekdaysParse[r]=new RegExp("^"+this.weekdays(a,"").replace(".",".?")+"$","i"),this._shortWeekdaysParse[r]=new RegExp("^"+this.weekdaysShort(a,"").replace(".",".?")+"$","i"),this._minWeekdaysParse[r]=new RegExp("^"+this.weekdaysMin(a,"").replace(".",".?")+"$","i")),this._weekdaysParse[r]||(o="^"+this.weekdays(a,"")+"|^"+this.weekdaysShort(a,"")+"|^"+this.weekdaysMin(a,""),this._weekdaysParse[r]=new RegExp(o.replace(".",""),"i")),n&&"dddd"===t&&this._fullWeekdaysParse[r].test(e))return r;if(n&&"ddd"===t&&this._shortWeekdaysParse[r].test(e))return r;if(n&&"dd"===t&&this._minWeekdaysParse[r].test(e))return r;if(!n&&this._weekdaysParse[r].test(e))return r}},on.weekdaysRegex=function(e){return this._weekdaysParseExact?(d(this,"_weekdaysRegex")||Je.call(this),e?this._weekdaysStrictRegex:this._weekdaysRegex):(d(this,"_weekdaysRegex")||(this._weekdaysRegex=Ve),this._weekdaysStrictRegex&&e?this._weekdaysStrictRegex:this._weekdaysRegex)},on.weekdaysShortRegex=function(e){return this._weekdaysParseExact?(d(this,"_weekdaysRegex")||Je.call(this),e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex):(d(this,"_weekdaysShortRegex")||(this._weekdaysShortRegex=Be),this._weekdaysShortStrictRegex&&e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex)},on.weekdaysMinRegex=function(e){return this._weekdaysParseExact?(d(this,"_weekdaysRegex")||Je.call(this),e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex):(d(this,"_weekdaysMinRegex")||(this._weekdaysMinRegex=Ke),this._weekdaysMinStrictRegex&&e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex)},on.isPM=function(e){return"p"===(e+"").toLowerCase().charAt(0)},on.meridiem=function(e,t,n){return e>11?n?"pm":"PM":n?"am":"AM"},at("en",{dayOfMonthOrdinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(e){var t=e%10;return e+(1===k(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")}}),r.lang=Y("moment.lang is deprecated. Use moment.locale instead.",at),r.langData=Y("moment.langData is deprecated. Use moment.localeData instead.",it);var dn=Math.abs;function cn(e,t,n,r){var a=Rt(t,n);return e._milliseconds+=r*a._milliseconds,e._days+=r*a._days,e._months+=r*a._months,e._bubble()}function fn(e){return e<0?Math.floor(e):Math.ceil(e)}function pn(e){return 4800*e/146097}function hn(e){return 146097*e/4800}function _n(e){return function(){return this.as(e)}}var mn=_n("ms"),yn=_n("s"),vn=_n("m"),Mn=_n("h"),bn=_n("d"),gn=_n("w"),Dn=_n("M"),kn=_n("y");function Ln(e){return function(){return this.isValid()?this._data[e]:NaN}}var wn=Ln("milliseconds"),Yn=Ln("seconds"),Tn=Ln("minutes"),Sn=Ln("hours"),On=Ln("days"),Pn=Ln("months"),xn=Ln("years"),En=Math.round,jn={ss:44,s:45,m:45,h:22,d:26,M:11};function Cn(e,t,n,r,a){return a.relativeTime(t||1,!!n,e,r)}var Hn=Math.abs;function An(){if(!this.isValid())return this.localeData().invalidDate();var e,t,n=Hn(this._milliseconds)/1e3,r=Hn(this._days),a=Hn(this._months);e=D(n/60),t=D(e/60),n%=60,e%=60;var o=D(a/12),i=a%=12,s=r,u=t,l=e,d=n,c=this.asSeconds();return c?(c<0?"-":"")+"P"+(o?o+"Y":"")+(i?i+"M":"")+(s?s+"D":"")+(u||l||d?"T":"")+(u?u+"H":"")+(l?l+"M":"")+(d?d+"S":""):"P0D"}var Fn=Tt.prototype;return Fn.isValid=function(){return this._isValid},Fn.abs=function(){var e=this._data;return this._milliseconds=dn(this._milliseconds),this._days=dn(this._days),this._months=dn(this._months),e.milliseconds=dn(e.milliseconds),e.seconds=dn(e.seconds),e.minutes=dn(e.minutes),e.hours=dn(e.hours),e.months=dn(e.months),e.years=dn(e.years),this},Fn.add=function(e,t){return cn(this,e,t,1)},Fn.subtract=function(e,t){return cn(this,e,t,-1)},Fn.as=function(e){if(!this.isValid())return NaN;var t,n,r=this._milliseconds;if("month"===(e=H(e))||"year"===e)return t=this._days+r/864e5,n=this._months+pn(t),"month"===e?n:n/12;switch(t=this._days+Math.round(hn(this._months)),e){case"week":return t/7+r/6048e5;case"day":return t+r/864e5;case"hour":return 24*t+r/36e5;case"minute":return 1440*t+r/6e4;case"second":return 86400*t+r/1e3;case"millisecond":return Math.floor(864e5*t)+r;default:throw new Error("Unknown unit "+e)}},Fn.asMilliseconds=mn,Fn.asSeconds=yn,Fn.asMinutes=vn,Fn.asHours=Mn,Fn.asDays=bn,Fn.asWeeks=gn,Fn.asMonths=Dn,Fn.asYears=kn,Fn.valueOf=function(){return this.isValid()?this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*k(this._months/12):NaN},Fn._bubble=function(){var e,t,n,r,a,o=this._milliseconds,i=this._days,s=this._months,u=this._data;return o>=0&&i>=0&&s>=0||o<=0&&i<=0&&s<=0||(o+=864e5*fn(hn(s)+i),i=0,s=0),u.milliseconds=o%1e3,e=D(o/1e3),u.seconds=e%60,t=D(e/60),u.minutes=t%60,n=D(t/60),u.hours=n%24,i+=D(n/24),a=D(pn(i)),s+=a,i-=fn(hn(a)),r=D(s/12),s%=12,u.days=i,u.months=s,u.years=r,this},Fn.get=function(e){return e=H(e),this.isValid()?this[e+"s"]():NaN},Fn.milliseconds=wn,Fn.seconds=Yn,Fn.minutes=Tn,Fn.hours=Sn,Fn.days=On,Fn.weeks=function(){return D(this.days()/7)},Fn.months=Pn,Fn.years=xn,Fn.humanize=function(e){if(!this.isValid())return this.localeData().invalidDate();var t=this.localeData(),n=function(e,t,n){var r=Rt(e).abs(),a=En(r.as("s")),o=En(r.as("m")),i=En(r.as("h")),s=En(r.as("d")),u=En(r.as("M")),l=En(r.as("y")),d=a<=jn.ss&&["s",a]||a<jn.s&&["ss",a]||o<=1&&["m"]||o<jn.m&&["mm",o]||i<=1&&["h"]||i<jn.h&&["hh",i]||s<=1&&["d"]||s<jn.d&&["dd",s]||u<=1&&["M"]||u<jn.M&&["MM",u]||l<=1&&["y"]||["yy",l];return d[2]=t,d[3]=+e>0,d[4]=n,Cn.apply(null,d)}(this,!e,t);return e&&(n=t.pastFuture(+this,n)),t.postformat(n)},Fn.toISOString=An,Fn.toString=An,Fn.toJSON=An,Fn.locale=Bt,Fn.localeData=Jt,Fn.toIsoString=Y("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",An),Fn.lang=Kt,J("X",0,0,"unix"),J("x",0,0,"valueOf"),pe("x",ue),pe("X",/[+-]?\d+(\.\d{1,3})?/),ye("X",(function(e,t,n){n._d=new Date(1e3*parseFloat(e,10))})),ye("x",(function(e,t,n){n._d=new Date(k(e))})),r.version="2.18.1",t=Dt,r.fn=rn,r.min=function(){var e=[].slice.call(arguments,0);return wt("isBefore",e)},r.max=function(){var e=[].slice.call(arguments,0);return wt("isAfter",e)},r.now=function(){return Date.now?Date.now():+new Date},r.utc=f,r.unix=function(e){return Dt(1e3*e)},r.months=function(e,t){return un(e,t,"months")},r.isDate=u,r.locale=at,r.invalid=m,r.duration=Rt,r.isMoment=g,r.weekdays=function(e,t,n){return ln(e,t,n,"weekdays")},r.parseZone=function(){return Dt.apply(null,arguments).parseZone()},r.localeData=it,r.isDuration=St,r.monthsShort=function(e,t){return un(e,t,"monthsShort")},r.weekdaysMin=function(e,t,n){return ln(e,t,n,"weekdaysMin")},r.defineLocale=ot,r.updateLocale=function(e,t){if(null!=t){var n,r=Xe;null!=et[e]&&(r=et[e]._config),t=P(r,t),(n=new x(t)).parentLocale=et[e],et[e]=n,at(e)}else null!=et[e]&&(null!=et[e].parentLocale?et[e]=et[e].parentLocale:null!=et[e]&&delete et[e]);return et[e]},r.locales=function(){return E(et)},r.weekdaysShort=function(e,t,n){return ln(e,t,n,"weekdaysShort")},r.normalizeUnits=H,r.relativeTimeRounding=function(e){return void 0===e?En:"function"==typeof e&&(En=e,!0)},r.relativeTimeThreshold=function(e,t){return void 0!==jn[e]&&(void 0===t?jn[e]:(jn[e]=t,"s"===e&&(jn.ss=t-1),!0))},r.calendarFormat=function(e,t){var n=e.diff(t,"days",!0);return n<-6?"sameElse":n<-1?"lastWeek":n<0?"lastDay":n<1?"sameDay":n<2?"nextDay":n<7?"nextWeek":"sameElse"},r.prototype=rn,r}()}).call(this,n(219)(e))},function(e,t,n){e.exports=n(210)()},function(e,t,n){"use strict";e.exports=n(199)},function(e,t){e.exports={DISPLAY_FORMAT:"L",ISO_FORMAT:"YYYY-MM-DD",ISO_MONTH_FORMAT:"YYYY-MM",START_DATE:"startDate",END_DATE:"endDate",HORIZONTAL_ORIENTATION:"horizontal",VERTICAL_ORIENTATION:"vertical",VERTICAL_SCROLLABLE:"verticalScrollable",ANCHOR_LEFT:"left",ANCHOR_RIGHT:"right",DAY_SIZE:39,BLOCKED_MODIFIER:"blocked",WEEKDAYS:[0,1,2,3,4,5,6]}},function(e,t,n){"use strict";var r=function(){};e.exports=r},function(e,t,n){"use strict";e.exports=function(e,t,n,r,a,o,i,s){if(!e){var u;if(void 0===t)u=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var l=[n,r,a,o,i,s],d=0;(u=new Error(t.replace(/%s/g,(function(){return l[d++]})))).name="Invariant Violation"}throw u.framesToPop=1,u}}},function(e,t,n){e.exports=n(224)},function(e,t){Object.defineProperty(t,"__esModule",{value:!0});var n="Interact with the calendar and add the check-in date for your trip.",r="Move backward to switch to the previous month",a="Move forward to switch to the next month",o="page up and page down keys",i="Home and end keys",s="Escape key",u="Move backward (left) and forward (right) by one day",l="Move backward (up) and forward (down) by one week",d="Return to the date input field",c="Press the down arrow key to interact with the calendar and\n  select a date. Press the question mark key to get the keyboard shortcuts for changing dates.",f=function(e){var t=e.date;return"Choose "+String(t)+" as your check-in date. It's available."},p=function(e){var t=e.date;return"Choose "+String(t)+" as your check-out date. It's available."},h=function(e){return e.date},_=function(e){var t=e.date;return"Not available. "+String(t)};t.default={closeDatePicker:"Close",focusStartDate:n,clearDate:"Clear Date",clearDates:"Clear Dates",jumpToPrevMonth:r,jumpToNextMonth:a,keyboardShortcuts:"Keyboard Shortcuts",showKeyboardShortcutsPanel:"Open the keyboard shortcuts panel",hideKeyboardShortcutsPanel:"Close the shortcuts panel",openThisPanel:"Open this panel",enterKey:"Enter key",leftArrowRightArrow:"Right and left arrow keys",upArrowDownArrow:"up and down arrow keys",pageUpPageDown:o,homeEnd:i,escape:s,questionMark:"Question mark",selectFocusedDate:"Select the date in focus",moveFocusByOneDay:u,moveFocusByOneWeek:l,moveFocusByOneMonth:"Switch months",moveFocustoStartAndEndOfWeek:"Go to the first or last day of a week",returnFocusToInput:d,keyboardNavigationInstructions:c,chooseAvailableStartDate:f,chooseAvailableEndDate:p,dateIsUnavailable:_};t.DateRangePickerPhrases={closeDatePicker:"Close",clearDates:"Clear Dates",focusStartDate:n,jumpToPrevMonth:r,jumpToNextMonth:a,keyboardShortcuts:"Keyboard Shortcuts",showKeyboardShortcutsPanel:"Open the keyboard shortcuts panel",hideKeyboardShortcutsPanel:"Close the shortcuts panel",openThisPanel:"Open this panel",enterKey:"Enter key",leftArrowRightArrow:"Right and left arrow keys",upArrowDownArrow:"up and down arrow keys",pageUpPageDown:o,homeEnd:i,escape:s,questionMark:"Question mark",selectFocusedDate:"Select the date in focus",moveFocusByOneDay:u,moveFocusByOneWeek:l,moveFocusByOneMonth:"Switch months",moveFocustoStartAndEndOfWeek:"Go to the first or last day of a week",returnFocusToInput:d,keyboardNavigationInstructions:c,chooseAvailableStartDate:f,chooseAvailableEndDate:p,dateIsUnavailable:_},t.DateRangePickerInputPhrases={focusStartDate:n,clearDates:"Clear Dates",keyboardNavigationInstructions:c},t.SingleDatePickerPhrases={closeDatePicker:"Close",clearDate:"Clear Date",jumpToPrevMonth:r,jumpToNextMonth:a,keyboardShortcuts:"Keyboard Shortcuts",showKeyboardShortcutsPanel:"Open the keyboard shortcuts panel",hideKeyboardShortcutsPanel:"Close the shortcuts panel",openThisPanel:"Open this panel",enterKey:"Enter key",leftArrowRightArrow:"Right and left arrow keys",upArrowDownArrow:"up and down arrow keys",pageUpPageDown:o,homeEnd:i,escape:s,questionMark:"Question mark",selectFocusedDate:"Select the date in focus",moveFocusByOneDay:u,moveFocusByOneWeek:l,moveFocusByOneMonth:"Switch months",moveFocustoStartAndEndOfWeek:"Go to the first or last day of a week",returnFocusToInput:d,keyboardNavigationInstructions:c,chooseAvailableDate:h,dateIsUnavailable:_},t.SingleDatePickerInputPhrases={clearDate:"Clear Date",keyboardNavigationInstructions:c},t.DayPickerPhrases={jumpToPrevMonth:r,jumpToNextMonth:a,keyboardShortcuts:"Keyboard Shortcuts",showKeyboardShortcutsPanel:"Open the keyboard shortcuts panel",hideKeyboardShortcutsPanel:"Close the shortcuts panel",openThisPanel:"Open this panel",enterKey:"Enter key",leftArrowRightArrow:"Right and left arrow keys",upArrowDownArrow:"up and down arrow keys",pageUpPageDown:o,homeEnd:i,escape:s,questionMark:"Question mark",selectFocusedDate:"Select the date in focus",moveFocusByOneDay:u,moveFocusByOneWeek:l,moveFocusByOneMonth:"Switch months",moveFocustoStartAndEndOfWeek:"Go to the first or last day of a week",returnFocusToInput:d,chooseAvailableStartDate:f,chooseAvailableEndDate:p,chooseAvailableDate:h,dateIsUnavailable:_},t.DayPickerKeyboardShortcutsPhrases={keyboardShortcuts:"Keyboard Shortcuts",showKeyboardShortcutsPanel:"Open the keyboard shortcuts panel",hideKeyboardShortcutsPanel:"Close the shortcuts panel",openThisPanel:"Open this panel",enterKey:"Enter key",leftArrowRightArrow:"Right and left arrow keys",upArrowDownArrow:"up and down arrow keys",pageUpPageDown:o,homeEnd:i,escape:s,questionMark:"Question mark",selectFocusedDate:"Select the date in focus",moveFocusByOneDay:u,moveFocusByOneWeek:l,moveFocusByOneMonth:"Switch months",moveFocustoStartAndEndOfWeek:"Go to the first or last day of a week",returnFocusToInput:d},t.DayPickerNavigationPhrases={jumpToPrevMonth:r,jumpToNextMonth:a},t.CalendarDayPhrases={chooseAvailableDate:h,dateIsUnavailable:_}},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return Object.keys(e).reduce((function(e,t){return(0,r.default)({},e,function(e,t,n){t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n;return e}({},t,a.default.oneOfType([a.default.string,a.default.func,a.default.node])))}),{})};var r=o(n(25)),a=o(n(1));function o(e){return e&&e.__esModule?e:{default:e}}},function(e,t,n){var r;
/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/!function(){"use strict";var n={}.hasOwnProperty;function a(){for(var e=[],t=0;t<arguments.length;t++){var r=arguments[t];if(r){var o=typeof r;if("string"===o||"number"===o)e.push(r);else if(Array.isArray(r)&&r.length){var i=a.apply(null,r);i&&e.push(i)}else if("object"===o)for(var s in r)n.call(r,s)&&r[s]&&e.push(s)}}return e.join(" ")}e.exports?(a.default=a,e.exports=a):void 0===(r=function(){return a}.apply(t,[]))||(e.exports=r)}()},function(e,t,n){var r=n(0),a=n(230),o=n(231);e.exports={momentObj:o.createMomentChecker("object",(function(e){return"object"==typeof e}),(function(e){return a.isValidMoment(e)}),"Moment"),momentString:o.createMomentChecker("string",(function(e){return"string"==typeof e}),(function(e){return a.isValidMoment(r(e))}),"Moment"),momentDurationObj:o.createMomentChecker("object",(function(e){return"object"==typeof e}),(function(e){return r.isDuration(e)}),"Duration")}},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r,a=n(1),o=(r=a)&&r.__esModule?r:{default:r},i=n(3);t.default=o.default.oneOf(i.WEEKDAYS)},function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){return!("undefined"==typeof window||!("ontouchstart"in window||window.DocumentTouch&&"undefined"!=typeof document&&document instanceof window.DocumentTouch))||!("undefined"==typeof navigator||!navigator.maxTouchPoints&&!navigator.msMaxTouchPoints)},e.exports=t.default},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){var n=r.default.isMoment(e)?e:(0,a.default)(e,t);return n?n.format(o.ISO_FORMAT):null};var r=i(n(0)),a=i(n(14)),o=n(3);function i(e){return e&&e.__esModule?e:{default:e}}},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){var n=t?[t,i.DISPLAY_FORMAT,i.ISO_FORMAT]:[i.DISPLAY_FORMAT,i.ISO_FORMAT],r=(0,o.default)(e,n,!0);return r.isValid()?r.hour(12):null};var r,a=n(0),o=(r=a)&&r.__esModule?r:{default:r},i=n(3)},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r,a=n(1),o=(r=a)&&r.__esModule?r:{default:r},i=n(3);t.default=o.default.oneOf([i.HORIZONTAL_ORIENTATION,i.VERTICAL_ORIENTATION,i.VERTICAL_SCROLLABLE])},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){return!(!o.default.isMoment(e)||!o.default.isMoment(t))&&(e.date()===t.date()&&e.month()===t.month()&&e.year()===t.year())};var r,a=n(0),o=(r=a)&&r.__esModule?r:{default:r}},function(e,t,n){"use strict";var r=n(42);e.exports=function(e,t,n){return!r(e.props,t)||!r(e.state,n)}},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){return!(!r.default.isMoment(e)||!r.default.isMoment(t))&&!(0,a.default)(e,t)};var r=o(n(0)),a=o(n(19));function o(e){return e&&e.__esModule?e:{default:e}}},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if(!o.default.isMoment(e)||!o.default.isMoment(t))return!1;var n=e.year(),r=e.month(),a=t.year(),i=t.month(),s=n===a,u=r===i;return s&&u?e.date()<t.date():s?r<i:n<a};var r,a=n(0),o=(r=a)&&r.__esModule?r:{default:r}},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){return!(!r.default.isMoment(e)||!r.default.isMoment(t))&&(!(0,a.default)(e,t)&&!(0,o.default)(e,t))};var r=i(n(0)),a=i(n(19)),o=i(n(16));function i(e){return e&&e.__esModule?e:{default:e}}},function(e,t,n){"use strict";n.r(t);var r=n(2),a=n(1),o=n.n(a),i=o.a.shape({trySubscribe:o.a.func.isRequired,tryUnsubscribe:o.a.func.isRequired,notifyNestedSubs:o.a.func.isRequired,isSubscribed:o.a.func.isRequired}),s=o.a.shape({subscribe:o.a.func.isRequired,dispatch:o.a.func.isRequired,getState:o.a.func.isRequired});function u(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function l(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function d(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function c(){var e,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"store",n=arguments[1],a=n||t+"Subscription",c=function(e){function n(r,a){u(this,n);var o=l(this,e.call(this,r,a));return o[t]=r.store,o}return d(n,e),n.prototype.getChildContext=function(){var e;return(e={})[t]=this[t],e[a]=null,e},n.prototype.render=function(){return r.Children.only(this.props.children)},n}(r.Component);return c.propTypes={store:s.isRequired,children:o.a.element.isRequired},c.childContextTypes=((e={})[t]=s.isRequired,e[a]=i,e),c.displayName="Provider",c}var f=c(),p=n(194),h=n.n(p),_=n(5),m=n.n(_);var y={notify:function(){}};var v=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.store=t,this.parentSub=n,this.onStateChange=r,this.unsubscribe=null,this.listeners=y}return e.prototype.addNestedSub=function(e){return this.trySubscribe(),this.listeners.subscribe(e)},e.prototype.notifyNestedSubs=function(){this.listeners.notify()},e.prototype.isSubscribed=function(){return Boolean(this.unsubscribe)},e.prototype.trySubscribe=function(){var e,t;this.unsubscribe||(this.unsubscribe=this.parentSub?this.parentSub.addNestedSub(this.onStateChange):this.store.subscribe(this.onStateChange),this.listeners=(e=[],t=[],{clear:function(){t=null,e=null},notify:function(){for(var n=e=t,r=0;r<n.length;r++)n[r]()},subscribe:function(n){var r=!0;return t===e&&(t=e.slice()),t.push(n),function(){r&&null!==e&&(r=!1,t===e&&(t=e.slice()),t.splice(t.indexOf(n),1))}}}))},e.prototype.tryUnsubscribe=function(){this.unsubscribe&&(this.unsubscribe(),this.unsubscribe=null,this.listeners.clear(),this.listeners=y)},e}(),M=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function b(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function g(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function D(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function k(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}var L=0,w={};function Y(){}function T(e,t){var n={run:function(r){try{var a=e(t.getState(),r);(a!==n.props||n.error)&&(n.shouldComponentUpdate=!0,n.props=a,n.error=null)}catch(e){n.shouldComponentUpdate=!0,n.error=e}}};return n}function S(e){var t,n,a=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},o=a.getDisplayName,u=void 0===o?function(e){return"ConnectAdvanced("+e+")"}:o,l=a.methodName,d=void 0===l?"connectAdvanced":l,c=a.renderCountProp,f=void 0===c?void 0:c,p=a.shouldHandleStateChanges,_=void 0===p||p,y=a.storeKey,S=void 0===y?"store":y,O=a.withRef,P=void 0!==O&&O,x=k(a,["getDisplayName","methodName","renderCountProp","shouldHandleStateChanges","storeKey","withRef"]),E=S+"Subscription",j=L++,C=((t={})[S]=s,t[E]=i,t),H=((n={})[E]=i,n);return function(t){m()("function"==typeof t,"You must pass a component to the function returned by connect. Instead received "+JSON.stringify(t));var n=t.displayName||t.name||"Component",a=u(n),o=M({},x,{getDisplayName:u,methodName:d,renderCountProp:f,shouldHandleStateChanges:_,storeKey:S,withRef:P,displayName:a,wrappedComponentName:n,WrappedComponent:t}),i=function(n){function i(e,t){b(this,i);var r=g(this,n.call(this,e,t));return r.version=j,r.state={},r.renderCount=0,r.store=e[S]||t[S],r.propsMode=Boolean(e[S]),r.setWrappedInstance=r.setWrappedInstance.bind(r),m()(r.store,'Could not find "'+S+'" in either the context or props of "'+a+'". Either wrap the root component in a <Provider>, or explicitly pass "'+S+'" as a prop to "'+a+'".'),r.initSelector(),r.initSubscription(),r}return D(i,n),i.prototype.getChildContext=function(){var e,t=this.propsMode?null:this.subscription;return(e={})[E]=t||this.context[E],e},i.prototype.componentDidMount=function(){_&&(this.subscription.trySubscribe(),this.selector.run(this.props),this.selector.shouldComponentUpdate&&this.forceUpdate())},i.prototype.componentWillReceiveProps=function(e){this.selector.run(e)},i.prototype.shouldComponentUpdate=function(){return this.selector.shouldComponentUpdate},i.prototype.componentWillUnmount=function(){this.subscription&&this.subscription.tryUnsubscribe(),this.subscription=null,this.notifyNestedSubs=Y,this.store=null,this.selector.run=Y,this.selector.shouldComponentUpdate=!1},i.prototype.getWrappedInstance=function(){return m()(P,"To access the wrapped instance, you need to specify { withRef: true } in the options argument of the "+d+"() call."),this.wrappedInstance},i.prototype.setWrappedInstance=function(e){this.wrappedInstance=e},i.prototype.initSelector=function(){var t=e(this.store.dispatch,o);this.selector=T(t,this.store),this.selector.run(this.props)},i.prototype.initSubscription=function(){if(_){var e=(this.propsMode?this.props:this.context)[E];this.subscription=new v(this.store,e,this.onStateChange.bind(this)),this.notifyNestedSubs=this.subscription.notifyNestedSubs.bind(this.subscription)}},i.prototype.onStateChange=function(){this.selector.run(this.props),this.selector.shouldComponentUpdate?(this.componentDidUpdate=this.notifyNestedSubsOnComponentDidUpdate,this.setState(w)):this.notifyNestedSubs()},i.prototype.notifyNestedSubsOnComponentDidUpdate=function(){this.componentDidUpdate=void 0,this.notifyNestedSubs()},i.prototype.isSubscribed=function(){return Boolean(this.subscription)&&this.subscription.isSubscribed()},i.prototype.addExtraProps=function(e){if(!(P||f||this.propsMode&&this.subscription))return e;var t=M({},e);return P&&(t.ref=this.setWrappedInstance),f&&(t[f]=this.renderCount++),this.propsMode&&this.subscription&&(t[E]=this.subscription),t},i.prototype.render=function(){var e=this.selector;if(e.shouldComponentUpdate=!1,e.error)throw e.error;return Object(r.createElement)(t,this.addExtraProps(e.props))},i}(r.Component);return i.WrappedComponent=t,i.displayName=a,i.childContextTypes=H,i.contextTypes=C,i.propTypes=C,h()(i,t)}}var O=Object.prototype.hasOwnProperty;function P(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}function x(e,t){if(P(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var a=0;a<n.length;a++)if(!O.call(t,n[a])||!P(e[n[a]],t[n[a]]))return!1;return!0}var E=n(38),j=n(195),C="object"==typeof self&&self&&self.Object===Object&&self,H=(j.a||C||Function("return this")()).Symbol,A=Object.prototype;A.hasOwnProperty,A.toString,H&&H.toStringTag;Object.prototype.toString;H&&H.toStringTag;F=Object.getPrototypeOf,R=Object;var F,R;var I=Function.prototype,N=Object.prototype,W=I.toString;N.hasOwnProperty,W.call(Object);function z(e){return function(t,n){var r=e(t,n);function a(){return r}return a.dependsOnOwnProps=!1,a}}function U(e){return null!==e.dependsOnOwnProps&&void 0!==e.dependsOnOwnProps?Boolean(e.dependsOnOwnProps):1!==e.length}function V(e,t){return function(t,n){n.displayName;var r=function(e,t){return r.dependsOnOwnProps?r.mapToProps(e,t):r.mapToProps(e)};return r.dependsOnOwnProps=!0,r.mapToProps=function(t,n){r.mapToProps=e,r.dependsOnOwnProps=U(e);var a=r(t,n);return"function"==typeof a&&(r.mapToProps=a,r.dependsOnOwnProps=U(a),a=r(t,n)),a},r}}var B=[function(e){return"function"==typeof e?V(e):void 0},function(e){return e?void 0:z((function(e){return{dispatch:e}}))},function(e){return e&&"object"==typeof e?z((function(t){return Object(E.bindActionCreators)(e,t)})):void 0}];var K=[function(e){return"function"==typeof e?V(e):void 0},function(e){return e?void 0:z((function(){return{}}))}],J=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function q(e,t,n){return J({},n,e,t)}var G=[function(e){return"function"==typeof e?function(e){return function(t,n){n.displayName;var r=n.pure,a=n.areMergedPropsEqual,o=!1,i=void 0;return function(t,n,s){var u=e(t,n,s);return o?r&&a(u,i)||(i=u):(o=!0,i=u),i}}}(e):void 0},function(e){return e?void 0:function(){return q}}];function $(e,t,n,r){return function(a,o){return n(e(a,o),t(r,o),o)}}function Q(e,t,n,r,a){var o=a.areStatesEqual,i=a.areOwnPropsEqual,s=a.areStatePropsEqual,u=!1,l=void 0,d=void 0,c=void 0,f=void 0,p=void 0;function h(a,u){var h,_,m=!i(u,d),y=!o(a,l);return l=a,d=u,m&&y?(c=e(l,d),t.dependsOnOwnProps&&(f=t(r,d)),p=n(c,f,d)):m?(e.dependsOnOwnProps&&(c=e(l,d)),t.dependsOnOwnProps&&(f=t(r,d)),p=n(c,f,d)):y?(h=e(l,d),_=!s(h,c),c=h,_&&(p=n(c,f,d)),p):p}return function(a,o){return u?h(a,o):(c=e(l=a,d=o),f=t(r,d),p=n(c,f,d),u=!0,p)}}function Z(e,t){var n=t.initMapStateToProps,r=t.initMapDispatchToProps,a=t.initMergeProps,o=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(t,["initMapStateToProps","initMapDispatchToProps","initMergeProps"]),i=n(e,o),s=r(e,o),u=a(e,o);return(o.pure?Q:$)(i,s,u,e,o)}var X=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function ee(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}function te(e,t,n){for(var r=t.length-1;r>=0;r--){var a=t[r](e);if(a)return a}return function(t,r){throw new Error("Invalid value of type "+typeof e+" for "+n+" argument when connecting component "+r.wrappedComponentName+".")}}function ne(e,t){return e===t}var re=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.connectHOC,n=void 0===t?S:t,r=e.mapStateToPropsFactories,a=void 0===r?K:r,o=e.mapDispatchToPropsFactories,i=void 0===o?B:o,s=e.mergePropsFactories,u=void 0===s?G:s,l=e.selectorFactory,d=void 0===l?Z:l;return function(e,t,r){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},s=o.pure,l=void 0===s||s,c=o.areStatesEqual,f=void 0===c?ne:c,p=o.areOwnPropsEqual,h=void 0===p?x:p,_=o.areStatePropsEqual,m=void 0===_?x:_,y=o.areMergedPropsEqual,v=void 0===y?x:y,M=ee(o,["pure","areStatesEqual","areOwnPropsEqual","areStatePropsEqual","areMergedPropsEqual"]),b=te(e,a,"mapStateToProps"),g=te(t,i,"mapDispatchToProps"),D=te(r,u,"mergeProps");return n(d,X({methodName:"connect",getDisplayName:function(e){return"Connect("+e+")"},shouldHandleStateChanges:Boolean(e),initMapStateToProps:b,initMapDispatchToProps:g,initMergeProps:D,pure:l,areStatesEqual:f,areOwnPropsEqual:h,areStatePropsEqual:m,areMergedPropsEqual:v},M))}}();n.d(t,"Provider",(function(){return f})),n.d(t,"createProvider",(function(){return c})),n.d(t,"connectAdvanced",(function(){return S})),n.d(t,"connect",(function(){return re}))},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE){0;try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}}(),e.exports=n(200)},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0}),t.EVENT_HANDLERS_KEY=void 0,t.addEventListener=function(e,t,n,o){e[i]||(e[i]=new a.default(e));var s=(0,r.default)(o);return e[i].add(t,n,s)},t.removeEventListener=function(e){e()};var r=o(n(225)),a=o(n(228));function o(e){return e&&e.__esModule?e:{default:e}}var i=t.EVENT_HANDLERS_KEY="__consolidated_events_handlers__"},function(e,t,n){"use strict";var r=n(26),a=n(165),o=n(167),i=n(234),s=o();r(s,{getPolyfill:o,implementation:a,shim:i}),e.exports=s},function(e,t,n){"use strict";var r=n(163),a="function"==typeof Symbol&&"symbol"==typeof Symbol("foo"),o=Object.prototype.toString,i=Array.prototype.concat,s=Object.defineProperty,u=s&&function(){var e={};try{for(var t in s(e,"x",{enumerable:!1,value:e}),e)return!1;return e.x===e}catch(e){return!1}}(),l=function(e,t,n,r){var a;t in e&&("function"!=typeof(a=r)||"[object Function]"!==o.call(a)||!r())||(u?s(e,t,{configurable:!0,enumerable:!1,value:n,writable:!0}):e[t]=n)},d=function(e,t){var n=arguments.length>2?arguments[2]:{},o=r(t);a&&(o=i.call(o,Object.getOwnPropertySymbols(t)));for(var s=0;s<o.length;s+=1)l(e,o[s],t[o[s]],n[o[s]])};d.supportsDescriptors=!!u,e.exports=d},function(e,t,n){"use strict";var r=n(233);e.exports=Function.prototype.bind||r},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){var n=r.default.isMoment(e)?e:(0,a.default)(e,t);return n?n.format(o.ISO_MONTH_FORMAT):null};var r=i(n(0)),a=i(n(14)),o=n(3);function i(e){return e&&e.__esModule?e:{default:e}}},function(e,t,n){"use strict";n.r(t);var r=n(4),a=n.n(r),o=n(2),i=n.n(o),s=n(1),u=n.n(s);function l(){return(l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function d(e){return"/"===e.charAt(0)}function c(e,t){for(var n=t,r=n+1,a=e.length;r<a;n+=1,r+=1)e[n]=e[r];e.pop()}var f=function(e,t){void 0===t&&(t="");var n,r=e&&e.split("/")||[],a=t&&t.split("/")||[],o=e&&d(e),i=t&&d(t),s=o||i;if(e&&d(e)?a=r:r.length&&(a.pop(),a=a.concat(r)),!a.length)return"/";if(a.length){var u=a[a.length-1];n="."===u||".."===u||""===u}else n=!1;for(var l=0,f=a.length;f>=0;f--){var p=a[f];"."===p?c(a,f):".."===p?(c(a,f),l++):l&&(c(a,f),l--)}if(!s)for(;l--;l)a.unshift("..");!s||""===a[0]||a[0]&&d(a[0])||a.unshift("");var h=a.join("/");return n&&"/"!==h.substr(-1)&&(h+="/"),h};function p(e){return e.valueOf?e.valueOf():Object.prototype.valueOf.call(e)}var h=function e(t,n){if(t===n)return!0;if(null==t||null==n)return!1;if(Array.isArray(t))return Array.isArray(n)&&t.length===n.length&&t.every((function(t,r){return e(t,n[r])}));if("object"==typeof t||"object"==typeof n){var r=p(t),a=p(n);return r!==t||a!==n?e(r,a):Object.keys(Object.assign({},t,n)).every((function(r){return e(t[r],n[r])}))}return!1};var _=function(e,t){if(!e)throw new Error("Invariant failed")};function m(e){return"/"===e.charAt(0)?e:"/"+e}function y(e){return"/"===e.charAt(0)?e.substr(1):e}function v(e,t){return function(e,t){return 0===e.toLowerCase().indexOf(t.toLowerCase())&&-1!=="/?#".indexOf(e.charAt(t.length))}(e,t)?e.substr(t.length):e}function M(e){return"/"===e.charAt(e.length-1)?e.slice(0,-1):e}function b(e){var t=e.pathname,n=e.search,r=e.hash,a=t||"/";return n&&"?"!==n&&(a+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(a+="#"===r.charAt(0)?r:"#"+r),a}function g(e,t,n,r){var a;"string"==typeof e?(a=function(e){var t=e||"/",n="",r="",a=t.indexOf("#");-1!==a&&(r=t.substr(a),t=t.substr(0,a));var o=t.indexOf("?");return-1!==o&&(n=t.substr(o),t=t.substr(0,o)),{pathname:t,search:"?"===n?"":n,hash:"#"===r?"":r}}(e)).state=t:(void 0===(a=l({},e)).pathname&&(a.pathname=""),a.search?"?"!==a.search.charAt(0)&&(a.search="?"+a.search):a.search="",a.hash?"#"!==a.hash.charAt(0)&&(a.hash="#"+a.hash):a.hash="",void 0!==t&&void 0===a.state&&(a.state=t));try{a.pathname=decodeURI(a.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+a.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return n&&(a.key=n),r?a.pathname?"/"!==a.pathname.charAt(0)&&(a.pathname=f(a.pathname,r.pathname)):a.pathname=r.pathname:a.pathname||(a.pathname="/"),a}function D(){var e=null;var t=[];return{setPrompt:function(t){return e=t,function(){e===t&&(e=null)}},confirmTransitionTo:function(t,n,r,a){if(null!=e){var o="function"==typeof e?e(t,n):e;"string"==typeof o?"function"==typeof r?r(o,a):a(!0):a(!1!==o)}else a(!0)},appendListener:function(e){var n=!0;function r(){n&&e.apply(void 0,arguments)}return t.push(r),function(){n=!1,t=t.filter((function(e){return e!==r}))}},notifyListeners:function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];t.forEach((function(e){return e.apply(void 0,n)}))}}}var k=!("undefined"==typeof window||!window.document||!window.document.createElement);function L(e,t){t(window.confirm(e))}function w(){try{return window.history.state||{}}catch(e){return{}}}function Y(e){void 0===e&&(e={}),k||_(!1);var t,n=window.history,r=(-1===(t=window.navigator.userAgent).indexOf("Android 2.")&&-1===t.indexOf("Android 4.0")||-1===t.indexOf("Mobile Safari")||-1!==t.indexOf("Chrome")||-1!==t.indexOf("Windows Phone"))&&window.history&&"pushState"in window.history,a=!(-1===window.navigator.userAgent.indexOf("Trident")),o=e,i=o.forceRefresh,s=void 0!==i&&i,u=o.getUserConfirmation,d=void 0===u?L:u,c=o.keyLength,f=void 0===c?6:c,p=e.basename?M(m(e.basename)):"";function h(e){var t=e||{},n=t.key,r=t.state,a=window.location,o=a.pathname+a.search+a.hash;return p&&(o=v(o,p)),g(o,r,n)}function y(){return Math.random().toString(36).substr(2,f)}var Y=D();function T(e){l(I,e),I.length=n.length,Y.notifyListeners(I.location,I.action)}function S(e){(function(e){return void 0===e.state&&-1===navigator.userAgent.indexOf("CriOS")})(e)||x(h(e.state))}function O(){x(h(w()))}var P=!1;function x(e){if(P)P=!1,T();else{Y.confirmTransitionTo(e,"POP",d,(function(t){t?T({action:"POP",location:e}):function(e){var t=I.location,n=j.indexOf(t.key);-1===n&&(n=0);var r=j.indexOf(e.key);-1===r&&(r=0);var a=n-r;a&&(P=!0,H(a))}(e)}))}}var E=h(w()),j=[E.key];function C(e){return p+b(e)}function H(e){n.go(e)}var A=0;function F(e){1===(A+=e)&&1===e?(window.addEventListener("popstate",S),a&&window.addEventListener("hashchange",O)):0===A&&(window.removeEventListener("popstate",S),a&&window.removeEventListener("hashchange",O))}var R=!1;var I={length:n.length,action:"POP",location:E,createHref:C,push:function(e,t){var a=g(e,t,y(),I.location);Y.confirmTransitionTo(a,"PUSH",d,(function(e){if(e){var t=C(a),o=a.key,i=a.state;if(r)if(n.pushState({key:o,state:i},null,t),s)window.location.href=t;else{var u=j.indexOf(I.location.key),l=j.slice(0,u+1);l.push(a.key),j=l,T({action:"PUSH",location:a})}else window.location.href=t}}))},replace:function(e,t){var a=g(e,t,y(),I.location);Y.confirmTransitionTo(a,"REPLACE",d,(function(e){if(e){var t=C(a),o=a.key,i=a.state;if(r)if(n.replaceState({key:o,state:i},null,t),s)window.location.replace(t);else{var u=j.indexOf(I.location.key);-1!==u&&(j[u]=a.key),T({action:"REPLACE",location:a})}else window.location.replace(t)}}))},go:H,goBack:function(){H(-1)},goForward:function(){H(1)},block:function(e){void 0===e&&(e=!1);var t=Y.setPrompt(e);return R||(F(1),R=!0),function(){return R&&(R=!1,F(-1)),t()}},listen:function(e){var t=Y.appendListener(e);return F(1),function(){F(-1),t()}}};return I}var T={hashbang:{encodePath:function(e){return"!"===e.charAt(0)?e:"!/"+y(e)},decodePath:function(e){return"!"===e.charAt(0)?e.substr(1):e}},noslash:{encodePath:y,decodePath:m},slash:{encodePath:m,decodePath:m}};function S(e){var t=e.indexOf("#");return-1===t?e:e.slice(0,t)}function O(){var e=window.location.href,t=e.indexOf("#");return-1===t?"":e.substring(t+1)}function P(e){window.location.replace(S(window.location.href)+"#"+e)}function x(e){void 0===e&&(e={}),k||_(!1);var t=window.history,n=(window.navigator.userAgent.indexOf("Firefox"),e),r=n.getUserConfirmation,a=void 0===r?L:r,o=n.hashType,i=void 0===o?"slash":o,s=e.basename?M(m(e.basename)):"",u=T[i],d=u.encodePath,c=u.decodePath;function f(){var e=c(O());return s&&(e=v(e,s)),g(e)}var p=D();function h(e){l(I,e),I.length=t.length,p.notifyListeners(I.location,I.action)}var y=!1,w=null;function Y(){var e,t,n=O(),r=d(n);if(n!==r)P(r);else{var o=f(),i=I.location;if(!y&&(t=o,(e=i).pathname===t.pathname&&e.search===t.search&&e.hash===t.hash))return;if(w===b(o))return;w=null,function(e){if(y)y=!1,h();else{p.confirmTransitionTo(e,"POP",a,(function(t){t?h({action:"POP",location:e}):function(e){var t=I.location,n=C.lastIndexOf(b(t));-1===n&&(n=0);var r=C.lastIndexOf(b(e));-1===r&&(r=0);var a=n-r;a&&(y=!0,H(a))}(e)}))}}(o)}}var x=O(),E=d(x);x!==E&&P(E);var j=f(),C=[b(j)];function H(e){t.go(e)}var A=0;function F(e){1===(A+=e)&&1===e?window.addEventListener("hashchange",Y):0===A&&window.removeEventListener("hashchange",Y)}var R=!1;var I={length:t.length,action:"POP",location:j,createHref:function(e){var t=document.querySelector("base"),n="";return t&&t.getAttribute("href")&&(n=S(window.location.href)),n+"#"+d(s+b(e))},push:function(e,t){var n=g(e,void 0,void 0,I.location);p.confirmTransitionTo(n,"PUSH",a,(function(e){if(e){var t=b(n),r=d(s+t);if(O()!==r){w=t,function(e){window.location.hash=e}(r);var a=C.lastIndexOf(b(I.location)),o=C.slice(0,a+1);o.push(t),C=o,h({action:"PUSH",location:n})}else h()}}))},replace:function(e,t){var n=g(e,void 0,void 0,I.location);p.confirmTransitionTo(n,"REPLACE",a,(function(e){if(e){var t=b(n),r=d(s+t);O()!==r&&(w=t,P(r));var a=C.indexOf(b(I.location));-1!==a&&(C[a]=t),h({action:"REPLACE",location:n})}}))},go:H,goBack:function(){H(-1)},goForward:function(){H(1)},block:function(e){void 0===e&&(e=!1);var t=p.setPrompt(e);return R||(F(1),R=!0),function(){return R&&(R=!1,F(-1)),t()}},listen:function(e){var t=p.appendListener(e);return F(1),function(){F(-1),t()}}};return I}function E(e,t,n){return Math.min(Math.max(e,t),n)}function j(e){void 0===e&&(e={});var t=e,n=t.getUserConfirmation,r=t.initialEntries,a=void 0===r?["/"]:r,o=t.initialIndex,i=void 0===o?0:o,s=t.keyLength,u=void 0===s?6:s,d=D();function c(e){l(y,e),y.length=y.entries.length,d.notifyListeners(y.location,y.action)}function f(){return Math.random().toString(36).substr(2,u)}var p=E(i,0,a.length-1),h=a.map((function(e){return g(e,void 0,"string"==typeof e?f():e.key||f())})),_=b;function m(e){var t=E(y.index+e,0,y.entries.length-1),r=y.entries[t];d.confirmTransitionTo(r,"POP",n,(function(e){e?c({action:"POP",location:r,index:t}):c()}))}var y={length:h.length,action:"POP",location:h[p],index:p,entries:h,createHref:_,push:function(e,t){var r=g(e,t,f(),y.location);d.confirmTransitionTo(r,"PUSH",n,(function(e){if(e){var t=y.index+1,n=y.entries.slice(0);n.length>t?n.splice(t,n.length-t,r):n.push(r),c({action:"PUSH",location:r,index:t,entries:n})}}))},replace:function(e,t){var r=g(e,t,f(),y.location);d.confirmTransitionTo(r,"REPLACE",n,(function(e){e&&(y.entries[y.index]=r,c({action:"REPLACE",location:r}))}))},go:m,goBack:function(){m(-1)},goForward:function(){m(1)},canGo:function(e){var t=y.index+e;return t>=0&&t<y.entries.length},block:function(e){return void 0===e&&(e=!1),d.setPrompt(e)},listen:function(e){return d.appendListener(e)}};return y}var C=n(5),H=n.n(C),A=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function F(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function R(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var I=function(e){function t(){var n,r;F(this,t);for(var a=arguments.length,o=Array(a),i=0;i<a;i++)o[i]=arguments[i];return n=r=R(this,e.call.apply(e,[this].concat(o))),r.state={match:r.computeMatch(r.props.history.location.pathname)},R(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.getChildContext=function(){return{router:A({},this.context.router,{history:this.props.history,route:{location:this.props.history.location,match:this.state.match}})}},t.prototype.computeMatch=function(e){return{path:"/",url:"/",params:{},isExact:"/"===e}},t.prototype.componentWillMount=function(){var e=this,t=this.props,n=t.children,r=t.history;H()(null==n||1===i.a.Children.count(n),"A <Router> may have only one child element"),this.unlisten=r.listen((function(){e.setState({match:e.computeMatch(r.location.pathname)})}))},t.prototype.componentWillReceiveProps=function(e){a()(this.props.history===e.history,"You cannot change <Router history>")},t.prototype.componentWillUnmount=function(){this.unlisten()},t.prototype.render=function(){var e=this.props.children;return e?i.a.Children.only(e):null},t}(i.a.Component);I.propTypes={history:u.a.object.isRequired,children:u.a.node},I.contextTypes={router:u.a.object},I.childContextTypes={router:u.a.object.isRequired};var N=I,W=N;function z(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function U(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var V=function(e){function t(){var n,r;z(this,t);for(var a=arguments.length,o=Array(a),i=0;i<a;i++)o[i]=arguments[i];return n=r=U(this,e.call.apply(e,[this].concat(o))),r.history=Y(r.props),U(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){a()(!this.props.history,"<BrowserRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { BrowserRouter as Router }`.")},t.prototype.render=function(){return i.a.createElement(W,{history:this.history,children:this.props.children})},t}(i.a.Component);V.propTypes={basename:u.a.string,forceRefresh:u.a.bool,getUserConfirmation:u.a.func,keyLength:u.a.number,children:u.a.node};var B=V;function K(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function J(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var q=function(e){function t(){var n,r;K(this,t);for(var a=arguments.length,o=Array(a),i=0;i<a;i++)o[i]=arguments[i];return n=r=J(this,e.call.apply(e,[this].concat(o))),r.history=x(r.props),J(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){a()(!this.props.history,"<HashRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { HashRouter as Router }`.")},t.prototype.render=function(){return i.a.createElement(W,{history:this.history,children:this.props.children})},t}(i.a.Component);q.propTypes={basename:u.a.string,getUserConfirmation:u.a.func,hashType:u.a.oneOf(["hashbang","noslash","slash"]),children:u.a.node};var G=q,$=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function Q(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function Z(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var X=function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)},ee=function(e){function t(){var n,r;Q(this,t);for(var a=arguments.length,o=Array(a),i=0;i<a;i++)o[i]=arguments[i];return n=r=Z(this,e.call.apply(e,[this].concat(o))),r.handleClick=function(e){if(r.props.onClick&&r.props.onClick(e),!e.defaultPrevented&&0===e.button&&!r.props.target&&!X(e)){e.preventDefault();var t=r.context.router.history,n=r.props,a=n.replace,o=n.to;a?t.replace(o):t.push(o)}},Z(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.render=function(){var e=this.props,t=(e.replace,e.to),n=e.innerRef,r=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["replace","to","innerRef"]);H()(this.context.router,"You should not use <Link> outside a <Router>"),H()(void 0!==t,'You must specify the "to" property');var a=this.context.router.history,o="string"==typeof t?g(t,null,null,a.location):t,s=a.createHref(o);return i.a.createElement("a",$({},r,{onClick:this.handleClick,href:s,ref:n}))},t}(i.a.Component);ee.propTypes={onClick:u.a.func,target:u.a.string,replace:u.a.bool,to:u.a.oneOfType([u.a.string,u.a.object]).isRequired,innerRef:u.a.oneOfType([u.a.string,u.a.func])},ee.defaultProps={replace:!1},ee.contextTypes={router:u.a.shape({history:u.a.shape({push:u.a.func.isRequired,replace:u.a.func.isRequired,createHref:u.a.func.isRequired}).isRequired}).isRequired};var te=ee;function ne(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function re(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var ae=function(e){function t(){var n,r;ne(this,t);for(var a=arguments.length,o=Array(a),i=0;i<a;i++)o[i]=arguments[i];return n=r=re(this,e.call.apply(e,[this].concat(o))),r.history=j(r.props),re(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){a()(!this.props.history,"<MemoryRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { MemoryRouter as Router }`.")},t.prototype.render=function(){return i.a.createElement(N,{history:this.history,children:this.props.children})},t}(i.a.Component);ae.propTypes={initialEntries:u.a.array,initialIndex:u.a.number,getUserConfirmation:u.a.func,keyLength:u.a.number,children:u.a.node};var oe=ae,ie=n(30),se=n.n(ie),ue={},le=0,de=function(e,t){var n=""+t.end+t.strict+t.sensitive,r=ue[n]||(ue[n]={});if(r[e])return r[e];var a=[],o={re:se()(e,a,t),keys:a};return le<1e4&&(r[e]=o,le++),o},ce=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments[2];"string"==typeof t&&(t={path:t});var r=t,a=r.path,o=r.exact,i=void 0!==o&&o,s=r.strict,u=void 0!==s&&s,l=r.sensitive,d=void 0!==l&&l;if(null==a)return n;var c=de(a,{end:i,strict:u,sensitive:d}),f=c.re,p=c.keys,h=f.exec(e);if(!h)return null;var _=h[0],m=h.slice(1),y=e===_;return i&&!y?null:{path:a,url:"/"===a&&""===_?"/":_,isExact:y,params:p.reduce((function(e,t,n){return e[t.name]=m[n],e}),{})}},fe=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function pe(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function he(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var _e=function(e){return 0===i.a.Children.count(e)},me=function(e){function t(){var n,r;pe(this,t);for(var a=arguments.length,o=Array(a),i=0;i<a;i++)o[i]=arguments[i];return n=r=he(this,e.call.apply(e,[this].concat(o))),r.state={match:r.computeMatch(r.props,r.context.router)},he(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.getChildContext=function(){return{router:fe({},this.context.router,{route:{location:this.props.location||this.context.router.route.location,match:this.state.match}})}},t.prototype.computeMatch=function(e,t){var n=e.computedMatch,r=e.location,a=e.path,o=e.strict,i=e.exact,s=e.sensitive;if(n)return n;H()(t,"You should not use <Route> or withRouter() outside a <Router>");var u=t.route,l=(r||u.location).pathname;return ce(l,{path:a,strict:o,exact:i,sensitive:s},u.match)},t.prototype.componentWillMount=function(){a()(!(this.props.component&&this.props.render),"You should not use <Route component> and <Route render> in the same route; <Route render> will be ignored"),a()(!(this.props.component&&this.props.children&&!_e(this.props.children)),"You should not use <Route component> and <Route children> in the same route; <Route children> will be ignored"),a()(!(this.props.render&&this.props.children&&!_e(this.props.children)),"You should not use <Route render> and <Route children> in the same route; <Route children> will be ignored")},t.prototype.componentWillReceiveProps=function(e,t){a()(!(e.location&&!this.props.location),'<Route> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.'),a()(!(!e.location&&this.props.location),'<Route> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.'),this.setState({match:this.computeMatch(e,t.router)})},t.prototype.render=function(){var e=this.state.match,t=this.props,n=t.children,r=t.component,a=t.render,o=this.context.router,s=o.history,u=o.route,l=o.staticContext,d={match:e,location:this.props.location||u.location,history:s,staticContext:l};return r?e?i.a.createElement(r,d):null:a?e?a(d):null:"function"==typeof n?n(d):n&&!_e(n)?i.a.Children.only(n):null},t}(i.a.Component);me.propTypes={computedMatch:u.a.object,path:u.a.string,exact:u.a.bool,strict:u.a.bool,sensitive:u.a.bool,component:u.a.func,render:u.a.func,children:u.a.oneOfType([u.a.func,u.a.node]),location:u.a.object},me.contextTypes={router:u.a.shape({history:u.a.object.isRequired,route:u.a.object.isRequired,staticContext:u.a.object})},me.childContextTypes={router:u.a.object.isRequired};var ye=me,ve=ye,Me=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},be="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};var ge=function(e){var t=e.to,n=e.exact,r=e.strict,a=e.location,o=e.activeClassName,s=e.className,u=e.activeStyle,l=e.style,d=e.isActive,c=e["aria-current"],f=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["to","exact","strict","location","activeClassName","className","activeStyle","style","isActive","aria-current"]),p="object"===(void 0===t?"undefined":be(t))?t.pathname:t,h=p&&p.replace(/([.+*?=^!:${}()[\]|/\\])/g,"\\$1");return i.a.createElement(ve,{path:h,exact:n,strict:r,location:a,children:function(e){var n=e.location,r=e.match,a=!!(d?d(r,n):r);return i.a.createElement(te,Me({to:t,className:a?[s,o].filter((function(e){return e})).join(" "):s,style:a?Me({},l,u):l,"aria-current":a&&c||null},f))}})};ge.propTypes={to:te.propTypes.to,exact:u.a.bool,strict:u.a.bool,location:u.a.object,activeClassName:u.a.string,className:u.a.string,activeStyle:u.a.object,style:u.a.object,isActive:u.a.func,"aria-current":u.a.oneOf(["page","step","location","date","time","true"])},ge.defaultProps={activeClassName:"active","aria-current":"page"};var De=ge;function ke(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function Le(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var we=function(e){function t(){return ke(this,t),Le(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.enable=function(e){this.unblock&&this.unblock(),this.unblock=this.context.router.history.block(e)},t.prototype.disable=function(){this.unblock&&(this.unblock(),this.unblock=null)},t.prototype.componentWillMount=function(){H()(this.context.router,"You should not use <Prompt> outside a <Router>"),this.props.when&&this.enable(this.props.message)},t.prototype.componentWillReceiveProps=function(e){e.when?this.props.when&&this.props.message===e.message||this.enable(e.message):this.disable()},t.prototype.componentWillUnmount=function(){this.disable()},t.prototype.render=function(){return null},t}(i.a.Component);we.propTypes={when:u.a.bool,message:u.a.oneOfType([u.a.func,u.a.string]).isRequired},we.defaultProps={when:!0},we.contextTypes={router:u.a.shape({history:u.a.shape({block:u.a.func.isRequired}).isRequired}).isRequired};var Ye=we,Te={},Se=0,Oe=function(e){var t=e,n=Te[t]||(Te[t]={});if(n[e])return n[e];var r=se.a.compile(e);return Se<1e4&&(n[e]=r,Se++),r},Pe=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"/",t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if("/"===e)return e;var n=Oe(e);return n(t,{pretty:!0})},xe=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function Ee(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function je(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var Ce=function(e){function t(){return Ee(this,t),je(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.isStatic=function(){return this.context.router&&this.context.router.staticContext},t.prototype.componentWillMount=function(){H()(this.context.router,"You should not use <Redirect> outside a <Router>"),this.isStatic()&&this.perform()},t.prototype.componentDidMount=function(){this.isStatic()||this.perform()},t.prototype.componentDidUpdate=function(e){var t,n,r=g(e.to),o=g(this.props.to);(n=o,(t=r).pathname===n.pathname&&t.search===n.search&&t.hash===n.hash&&t.key===n.key&&h(t.state,n.state))?a()(!1,"You tried to redirect to the same route you're currently on: \""+o.pathname+o.search+'"'):this.perform()},t.prototype.computeTo=function(e){var t=e.computedMatch,n=e.to;return t?"string"==typeof n?Pe(n,t.params):xe({},n,{pathname:Pe(n.pathname,t.params)}):n},t.prototype.perform=function(){var e=this.context.router.history,t=this.props.push,n=this.computeTo(this.props);t?e.push(n):e.replace(n)},t.prototype.render=function(){return null},t}(i.a.Component);Ce.propTypes={computedMatch:u.a.object,push:u.a.bool,from:u.a.string,to:u.a.oneOfType([u.a.string,u.a.object]).isRequired},Ce.defaultProps={push:!1},Ce.contextTypes={router:u.a.shape({history:u.a.shape({push:u.a.func.isRequired,replace:u.a.func.isRequired}).isRequired,staticContext:u.a.object}).isRequired};var He=Ce,Ae=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function Fe(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function Re(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var Ie=function(e){return"/"===e.charAt(0)?e:"/"+e},Ne=function(e,t){return e?Ae({},t,{pathname:Ie(e)+t.pathname}):t},We=function(e,t){if(!e)return t;var n=Ie(e);return 0!==t.pathname.indexOf(n)?t:Ae({},t,{pathname:t.pathname.substr(n.length)})},ze=function(e){return"string"==typeof e?e:b(e)},Ue=function(e){return function(){H()(!1,"You cannot %s with <StaticRouter>",e)}},Ve=function(){},Be=function(e){function t(){var n,r;Fe(this,t);for(var a=arguments.length,o=Array(a),i=0;i<a;i++)o[i]=arguments[i];return n=r=Re(this,e.call.apply(e,[this].concat(o))),r.createHref=function(e){return Ie(r.props.basename+ze(e))},r.handlePush=function(e){var t=r.props,n=t.basename,a=t.context;a.action="PUSH",a.location=Ne(n,g(e)),a.url=ze(a.location)},r.handleReplace=function(e){var t=r.props,n=t.basename,a=t.context;a.action="REPLACE",a.location=Ne(n,g(e)),a.url=ze(a.location)},r.handleListen=function(){return Ve},r.handleBlock=function(){return Ve},Re(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.getChildContext=function(){return{router:{staticContext:this.props.context}}},t.prototype.componentWillMount=function(){a()(!this.props.history,"<StaticRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { StaticRouter as Router }`.")},t.prototype.render=function(){var e=this.props,t=e.basename,n=(e.context,e.location),r=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["basename","context","location"]),a={createHref:this.createHref,action:"POP",location:We(t,g(n)),push:this.handlePush,replace:this.handleReplace,go:Ue("go"),goBack:Ue("goBack"),goForward:Ue("goForward"),listen:this.handleListen,block:this.handleBlock};return i.a.createElement(N,Ae({},r,{history:a}))},t}(i.a.Component);Be.propTypes={basename:u.a.string,context:u.a.object.isRequired,location:u.a.oneOfType([u.a.string,u.a.object])},Be.defaultProps={basename:"",location:"/"},Be.childContextTypes={router:u.a.object.isRequired};var Ke=Be;function Je(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function qe(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var Ge=function(e){function t(){return Je(this,t),qe(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){H()(this.context.router,"You should not use <Switch> outside a <Router>")},t.prototype.componentWillReceiveProps=function(e){a()(!(e.location&&!this.props.location),'<Switch> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.'),a()(!(!e.location&&this.props.location),'<Switch> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.')},t.prototype.render=function(){var e=this.context.router.route,t=this.props.children,n=this.props.location||e.location,r=void 0,a=void 0;return i.a.Children.forEach(t,(function(t){if(null==r&&i.a.isValidElement(t)){var o=t.props,s=o.path,u=o.exact,l=o.strict,d=o.sensitive,c=o.from,f=s||c;a=t,r=ce(n.pathname,{path:f,exact:u,strict:l,sensitive:d},e.match)}})),r?i.a.cloneElement(a,{location:n,computedMatch:r}):null},t}(i.a.Component);Ge.contextTypes={router:u.a.shape({route:u.a.object.isRequired}).isRequired},Ge.propTypes={children:u.a.node,location:u.a.object};var $e=Ge,Qe=Pe,Ze=ce,Xe=n(197),et=n.n(Xe),tt=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};var nt=function(e){var t=function(t){var n=t.wrappedComponentRef,r=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(t,["wrappedComponentRef"]);return i.a.createElement(ye,{children:function(t){return i.a.createElement(e,tt({},r,t,{ref:n}))}})};return t.displayName="withRouter("+(e.displayName||e.name)+")",t.WrappedComponent=e,t.propTypes={wrappedComponentRef:u.a.func},et()(t,e)};n.d(t,"BrowserRouter",(function(){return B})),n.d(t,"HashRouter",(function(){return G})),n.d(t,"Link",(function(){return te})),n.d(t,"MemoryRouter",(function(){return oe})),n.d(t,"NavLink",(function(){return De})),n.d(t,"Prompt",(function(){return Ye})),n.d(t,"Redirect",(function(){return He})),n.d(t,"Route",(function(){return ve})),n.d(t,"Router",(function(){return W})),n.d(t,"StaticRouter",(function(){return Ke})),n.d(t,"Switch",(function(){return $e})),n.d(t,"generatePath",(function(){return Qe})),n.d(t,"matchPath",(function(){return Ze})),n.d(t,"withRouter",(function(){return nt}))},function(e,t,n){var r=n(214);e.exports=p,e.exports.parse=o,e.exports.compile=function(e,t){return s(o(e,t),t)},e.exports.tokensToFunction=s,e.exports.tokensToRegExp=f;var a=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function o(e,t){for(var n,r=[],o=0,i=0,s="",d=t&&t.delimiter||"/";null!=(n=a.exec(e));){var c=n[0],f=n[1],p=n.index;if(s+=e.slice(i,p),i=p+c.length,f)s+=f[1];else{var h=e[i],_=n[2],m=n[3],y=n[4],v=n[5],M=n[6],b=n[7];s&&(r.push(s),s="");var g=null!=_&&null!=h&&h!==_,D="+"===M||"*"===M,k="?"===M||"*"===M,L=n[2]||d,w=y||v;r.push({name:m||o++,prefix:_||"",delimiter:L,optional:k,repeat:D,partial:g,asterisk:!!b,pattern:w?l(w):b?".*":"[^"+u(L)+"]+?"})}}return i<e.length&&(s+=e.substr(i)),s&&r.push(s),r}function i(e){return encodeURI(e).replace(/[\/?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))}function s(e,t){for(var n=new Array(e.length),a=0;a<e.length;a++)"object"==typeof e[a]&&(n[a]=new RegExp("^(?:"+e[a].pattern+")$",c(t)));return function(t,a){for(var o="",s=t||{},u=(a||{}).pretty?i:encodeURIComponent,l=0;l<e.length;l++){var d=e[l];if("string"!=typeof d){var c,f=s[d.name];if(null==f){if(d.optional){d.partial&&(o+=d.prefix);continue}throw new TypeError('Expected "'+d.name+'" to be defined')}if(r(f)){if(!d.repeat)throw new TypeError('Expected "'+d.name+'" to not repeat, but received `'+JSON.stringify(f)+"`");if(0===f.length){if(d.optional)continue;throw new TypeError('Expected "'+d.name+'" to not be empty')}for(var p=0;p<f.length;p++){if(c=u(f[p]),!n[l].test(c))throw new TypeError('Expected all "'+d.name+'" to match "'+d.pattern+'", but received `'+JSON.stringify(c)+"`");o+=(0===p?d.prefix:d.delimiter)+c}}else{if(c=d.asterisk?encodeURI(f).replace(/[?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})):u(f),!n[l].test(c))throw new TypeError('Expected "'+d.name+'" to match "'+d.pattern+'", but received "'+c+'"');o+=d.prefix+c}}else o+=d}return o}}function u(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function l(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function d(e,t){return e.keys=t,e}function c(e){return e&&e.sensitive?"":"i"}function f(e,t,n){r(t)||(n=t||n,t=[]);for(var a=(n=n||{}).strict,o=!1!==n.end,i="",s=0;s<e.length;s++){var l=e[s];if("string"==typeof l)i+=u(l);else{var f=u(l.prefix),p="(?:"+l.pattern+")";t.push(l),l.repeat&&(p+="(?:"+f+p+")*"),i+=p=l.optional?l.partial?f+"("+p+")?":"(?:"+f+"("+p+"))?":f+"("+p+")"}}var h=u(n.delimiter||"/"),_=i.slice(-h.length)===h;return a||(i=(_?i.slice(0,-h.length):i)+"(?:"+h+"(?=$))?"),i+=o?"$":a&&_?"":"(?="+h+"|$)",d(new RegExp("^"+i,c(n)),t)}function p(e,t,n){return r(t)||(n=t||n,t=[]),n=n||{},e instanceof RegExp?function(e,t){var n=e.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)t.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return d(e,t)}(e,t):r(e)?function(e,t,n){for(var r=[],a=0;a<e.length;a++)r.push(p(e[a],t,n).source);return d(new RegExp("(?:"+r.join("|")+")",c(n)),t)}(e,t,n):function(e,t,n){return f(o(e,n),t,n)}(e,t,n)}},function(e,t,n){e.exports=function(e){var t={};function n(r){if(t[r])return t[r].exports;var a=t[r]={i:r,l:!1,exports:{}};return e[r].call(a.exports,a,a.exports,n),a.l=!0,a.exports}return n.m=e,n.c=t,n.i=function(e){return e},n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:r})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=71)}({0:function(e,t){e.exports=n(2)},16:function(e,t){e.exports=n(24)},3:function(e,t){e.exports=n(1)},71:function(e,t,n){var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=u(n(0)),i=u(n(3)),s=n(16);function u(e){return e&&e.__esModule?e:{default:e}}var l={children:i.default.node,onOutsideClick:i.default.func},d={children:o.default.createElement("span",null),onOutsideClick:function(){}},c=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":r(t))&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.onOutsideClick=n.onOutsideClick.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":r(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),a(t,[{key:"componentDidMount",value:function(){this.clickHandle=(0,s.addEventListener)(document,"click",this.onOutsideClick,{capture:!0})}},{key:"componentWillUnmount",value:function(){this.clickHandle&&(0,s.removeEventListener)(this.clickHandle)}},{key:"onOutsideClick",value:function(e){this.childNode.contains(e.target)||this.props.onOutsideClick(e)}},{key:"render",value:function(){var e=this;return o.default.createElement("div",{ref:function(t){e.childNode=t}},this.props.children)}}]),t}(o.default.Component);t.default=c,c.propTypes=l,c.defaultProps=d}})},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){var n=r.default.isMoment(e)?e:(0,a.default)(e,t);return n?n.format(o.DISPLAY_FORMAT):null};var r=i(n(0)),a=i(n(14)),o=n(3);function i(e){return e&&e.__esModule?e:{default:e}}},function(e,t){e.exports=function(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n,o){var i=t.clone().startOf("month");o&&(i=i.startOf("week"));if((0,r.default)(e,i))return!1;var s=t.clone().add(n-1,"months").endOf("month");o&&(s=s.endOf("week"));return!(0,a.default)(e,s)};var r=o(n(19)),a=o(n(20));function o(e){return e&&e.__esModule?e:{default:e}}},function(e,t,n){e.exports=function(e){var t={};function n(r){if(t[r])return t[r].exports;var a=t[r]={i:r,l:!1,exports:{}};return e[r].call(a.exports,a,a.exports,n),a.l=!0,a.exports}return n.m=e,n.c=t,n.i=function(e){return e},n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:r})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=66)}([function(e,t){e.exports=n(2)},function(e,t){e.exports=n(6)},function(e,t){e.exports=n(7)},function(e,t){e.exports=n(1)},function(e,t){e.exports=n(3)},function(e,t){e.exports=n(8)},function(e,t){e.exports=n(9)},function(e,t){e.exports=n(0)},function(e,t){e.exports=n(15)},function(e,t){e.exports=n(12)},,,function(e,t){e.exports=n(11)},,function(e,t){e.exports=n(17)},,,,function(e,t){e.exports=n(34)},,,function(e,t){e.exports=n(31)},,,,,function(e,t){e.exports=n(179)},,function(e,t){e.exports=n(180)},,,,,,,function(e,t){e.exports=n(174)},,function(e,t){e.exports=n(22)},,,,,,,function(e,t){e.exports=n(244)},,,,,,,function(e,t){e.exports=n(181)},,,function(e,t){e.exports=n(248)},function(e,t){e.exports=n(249)},,,,,,,,,,,function(e,t,n){var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};Object.defineProperty(t,"__esModule",{value:!0}),t.defaultProps=void 0;var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();t.calculateDimension=E;var o=S(n(0)),i=S(n(3)),s=S(n(14)),u=S(n(37)),l=n(1),d=S(n(7)),c=S(n(6)),f=S(n(35)),p=S(n(9)),h=n(2),_=S(n(5)),m=S(n(21)),y=S(n(51)),v=S(n(55)),M=n(54),b=S(M),g=S(n(28)),D=S(n(26)),k=S(n(44)),L=S(n(18)),w=S(n(8)),Y=S(n(12)),T=n(4);function S(e){return e&&e.__esModule?e:{default:e}}var O=(0,l.forbidExtraProps)({enableOutsideDays:i.default.bool,numberOfMonths:i.default.number,orientation:w.default,withPortal:i.default.bool,onOutsideClick:i.default.func,hidden:i.default.bool,initialVisibleMonth:i.default.func,firstDayOfWeek:Y.default,renderCalendarInfo:i.default.func,hideKeyboardShortcutsPanel:i.default.bool,daySize:l.nonNegativeInteger,isRTL:i.default.bool,navPrev:i.default.node,navNext:i.default.node,onPrevMonthClick:i.default.func,onNextMonthClick:i.default.func,onMultiplyScrollableMonths:i.default.func,renderMonth:i.default.func,modifiers:i.default.object,renderDay:i.default.func,onDayClick:i.default.func,onDayMouseEnter:i.default.func,onDayMouseLeave:i.default.func,isFocused:i.default.bool,getFirstFocusableDay:i.default.func,onBlur:i.default.func,showKeyboardShortcuts:i.default.bool,monthFormat:i.default.string,phrases:i.default.shape((0,_.default)(h.DayPickerPhrases))}),P=t.defaultProps={enableOutsideDays:!1,numberOfMonths:2,orientation:T.HORIZONTAL_ORIENTATION,withPortal:!1,onOutsideClick:function(){},hidden:!1,initialVisibleMonth:function(){return(0,d.default)()},firstDayOfWeek:null,renderCalendarInfo:null,hideKeyboardShortcutsPanel:!1,daySize:T.DAY_SIZE,isRTL:!1,navPrev:null,navNext:null,onPrevMonthClick:function(){},onNextMonthClick:function(){},onMultiplyScrollableMonths:function(){},renderMonth:null,modifiers:{},renderDay:null,onDayClick:function(){},onDayMouseEnter:function(){},onDayMouseLeave:function(){},isFocused:!1,getFirstFocusableDay:null,onBlur:function(){},showKeyboardShortcuts:!1,monthFormat:"MMMM YYYY",phrases:h.DayPickerPhrases};function x(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"",r=(0,g.default)(t);r.opacity=n,Object.keys(r).forEach((function(t){e.style[t]=r[t]}))}function E(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=arguments.length>3&&void 0!==arguments[3]&&arguments[3];if(!e)return 0;var a="width"===t?"Left":"Top",o="width"===t?"Right":"Bottom",i=!n||r?window.getComputedStyle(e):null,s=e.offsetWidth,u=e.offsetHeight,l="width"===t?s:u;return n||(l-=parseFloat(i["padding"+a])+parseFloat(i["padding"+o])+parseFloat(i["border"+a+"Width"])+parseFloat(i["border"+o+"Width"])),r&&(l+=parseFloat(i["margin"+a])+parseFloat(i["margin"+o])),l}function j(e){var t=e.querySelector(".js-CalendarMonth__caption"),n=e.querySelector(".js-CalendarMonth__grid");return E(t,"height",!0,!0)+E(n,"height")+1}var C=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":r(t))&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e)),a=e.hidden?(0,d.default)():e.initialVisibleMonth(),o=a.clone().startOf("month");e.getFirstFocusableDay&&(o=e.getFirstFocusableDay(a));var i=e.isRTL&&n.isHorizontal()?-(0,D.default)(e.daySize):0;return n.hasSetInitialVisibleMonth=!e.hidden,n.state={currentMonth:a,monthTransition:null,translationValue:i,scrollableMonthMultiple:1,calendarMonthWidth:(0,D.default)(e.daySize),focusedDate:!e.hidden||e.isFocused?o:null,nextFocusedDate:null,showKeyboardShortcuts:e.showKeyboardShortcuts,onKeyboardShortcutsPanelClose:function(){},isTouchDevice:(0,p.default)(),withMouseInteractions:!0},n.onKeyDown=n.onKeyDown.bind(n),n.onPrevMonthClick=n.onPrevMonthClick.bind(n),n.onNextMonthClick=n.onNextMonthClick.bind(n),n.setCalendarMonthGridRef=n.setCalendarMonthGridRef.bind(n),n.multiplyScrollableMonths=n.multiplyScrollableMonths.bind(n),n.updateStateAfterMonthTransition=n.updateStateAfterMonthTransition.bind(n),n.openKeyboardShortcutsPanel=n.openKeyboardShortcutsPanel.bind(n),n.closeKeyboardShortcutsPanel=n.closeKeyboardShortcutsPanel.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":r(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),a(t,[{key:"componentDidMount",value:function(){this.setState({isTouchDevice:(0,p.default)()}),this.isHorizontal()&&(this.adjustDayPickerHeight(),this.initializeDayPickerWidth())}},{key:"componentWillReceiveProps",value:function(e){var t=e.hidden,n=e.isFocused,r=e.showKeyboardShortcuts,a=e.onBlur,o=this.state.currentMonth;if(t||(this.hasSetInitialVisibleMonth||(this.hasSetInitialVisibleMonth=!0,this.setState({currentMonth:e.initialVisibleMonth()})),!this.dayPickerWidth&&this.isHorizontal()&&(this.initializeDayPickerWidth(),this.adjustDayPickerHeight())),e.daySize!==this.props.daySize&&this.setState({calendarMonthWidth:(0,D.default)(e.daySize)}),n!==this.props.isFocused)if(n){var i=this.getFocusedDay(o),s=this.state.onKeyboardShortcutsPanelClose;e.showKeyboardShortcuts&&(s=a),this.setState({showKeyboardShortcuts:r,onKeyboardShortcutsPanelClose:s,focusedDate:i,withMouseInteractions:!1})}else this.setState({focusedDate:null})}},{key:"shouldComponentUpdate",value:function(e,t){return(0,s.default)(this,e,t)}},{key:"componentDidUpdate",value:function(e,t){var n=this.state,r=n.monthTransition,a=n.currentMonth,o=n.focusedDate;!r&&a.isSame(t.currentMonth)||this.isHorizontal()&&this.adjustDayPickerHeight(),(!e.isFocused&&this.props.isFocused&&!o||!e.showKeyboardShortcuts&&this.props.showKeyboardShortcuts)&&this.container.focus()}},{key:"onKeyDown",value:function(e){e.stopPropagation(),this.setState({withMouseInteractions:!1});var t=this.props.onBlur,n=this.state,r=n.focusedDate,a=n.showKeyboardShortcuts;if(r){var o=r.clone(),i=!1,s=(0,k.default)(),u=function(){s&&s.focus()};switch(e.key){case"ArrowUp":e.preventDefault(),o.subtract(1,"week"),i=this.maybeTransitionPrevMonth(o);break;case"ArrowLeft":e.preventDefault(),o.subtract(1,"day"),i=this.maybeTransitionPrevMonth(o);break;case"Home":e.preventDefault(),o.startOf("week"),i=this.maybeTransitionPrevMonth(o);break;case"PageUp":e.preventDefault(),o.subtract(1,"month"),i=this.maybeTransitionPrevMonth(o);break;case"ArrowDown":e.preventDefault(),o.add(1,"week"),i=this.maybeTransitionNextMonth(o);break;case"ArrowRight":e.preventDefault(),o.add(1,"day"),i=this.maybeTransitionNextMonth(o);break;case"End":e.preventDefault(),o.endOf("week"),i=this.maybeTransitionNextMonth(o);break;case"PageDown":e.preventDefault(),o.add(1,"month"),i=this.maybeTransitionNextMonth(o);break;case"?":this.openKeyboardShortcutsPanel(u);break;case"Escape":a?this.closeKeyboardShortcutsPanel():t()}i||this.setState({focusedDate:o})}}},{key:"onPrevMonthClick",value:function(e,t){var n=this.props.isRTL;t&&t.preventDefault();var r=this.isVertical()?this.getMonthHeightByIndex(0):this.dayPickerWidth;n&&this.isHorizontal()&&(r=-2*this.dayPickerWidth),this.translateFirstDayPickerForAnimation(r),this.setState({monthTransition:"prev",translationValue:r,focusedDate:null,nextFocusedDate:e})}},{key:"onNextMonthClick",value:function(e,t){var n=this.props.isRTL;t&&t.preventDefault();var r=this.isVertical()?-this.getMonthHeightByIndex(1):-this.dayPickerWidth;n&&this.isHorizontal()&&(r=0),this.setState({monthTransition:"next",translationValue:r,focusedDate:null,nextFocusedDate:e})}},{key:"getFocusedDay",value:function(e){var t=this.props,n=t.getFirstFocusableDay,r=t.numberOfMonths,a=void 0;return n&&(a=n(e)),!e||a&&(0,L.default)(a,e,r)||(a=e.clone().startOf("month")),a}},{key:"getMonthHeightByIndex",value:function(e){return j(this.transitionContainer.querySelectorAll(".CalendarMonth")[e])}},{key:"setCalendarMonthGridRef",value:function(e){this.calendarMonthGrid=e}},{key:"maybeTransitionNextMonth",value:function(e){var t=this.props.numberOfMonths,n=this.state,r=n.currentMonth,a=n.focusedDate,o=e.month(),i=a.month(),s=(0,L.default)(e,r,t);return o!==i&&!s&&(this.onNextMonthClick(e),!0)}},{key:"maybeTransitionPrevMonth",value:function(e){var t=this.props.numberOfMonths,n=this.state,r=n.currentMonth,a=n.focusedDate,o=e.month(),i=a.month(),s=(0,L.default)(e,r,t);return o!==i&&!s&&(this.onPrevMonthClick(e),!0)}},{key:"multiplyScrollableMonths",value:function(e){var t=this.props.onMultiplyScrollableMonths;e&&e.preventDefault(),t&&t(e),this.setState({scrollableMonthMultiple:this.state.scrollableMonthMultiple+1})}},{key:"isHorizontal",value:function(){return this.props.orientation===T.HORIZONTAL_ORIENTATION}},{key:"isVertical",value:function(){return this.props.orientation===T.VERTICAL_ORIENTATION||this.props.orientation===T.VERTICAL_SCROLLABLE}},{key:"initializeDayPickerWidth",value:function(){if(this.calendarMonthGrid){var e=u.default.findDOMNode(this.calendarMonthGrid);e&&(this.dayPickerWidth=E(e.querySelector(".CalendarMonth"),"width",!0))}}},{key:"updateStateAfterMonthTransition",value:function(){var e=this.props,t=e.onPrevMonthClick,n=e.onNextMonthClick,r=this.state,a=r.currentMonth,o=r.monthTransition,i=r.focusedDate,s=r.nextFocusedDate,l=r.withMouseInteractions;if(o){var d=a.clone();"prev"===o?(t&&t(),d.subtract(1,"month")):"next"===o&&(n&&n(),d.add(1,"month"));var c=null;if(s?c=s:i||l||(c=this.getFocusedDay(d)),this.calendarMonthGrid){var f=u.default.findDOMNode(this.calendarMonthGrid);f&&x(f.querySelector(".CalendarMonth"),"none")}this.setState({currentMonth:d,monthTransition:null,translationValue:this.props.isRTL&&this.isHorizontal()?-this.dayPickerWidth:0,nextFocusedDate:null,focusedDate:c},(function(){if(l){var e=(0,k.default)();e&&e!==document.body&&e.blur()}}))}}},{key:"adjustDayPickerHeight",value:function(){var e=[];Array.prototype.forEach.call(this.transitionContainer.querySelectorAll(".CalendarMonth"),(function(t){"true"===t.getAttribute("data-visible")&&e.push(j(t))}));var t=Math.max.apply(Math,e)+23;t!==E(this.transitionContainer,"height")&&(this.monthHeight=t,this.transitionContainer.style.height=String(t)+"px")}},{key:"translateFirstDayPickerForAnimation",value:function(e){var t=-e;this.props.isRTL&&this.isHorizontal()&&(t=Math.abs(e+this.dayPickerWidth));var n=(this.isVertical()?"translateY":"translateX")+"("+String(t)+"px)";x(this.transitionContainer.querySelector(".CalendarMonth"),n,1)}},{key:"openKeyboardShortcutsPanel",value:function(e){this.setState({showKeyboardShortcuts:!0,onKeyboardShortcutsPanelClose:e})}},{key:"closeKeyboardShortcutsPanel",value:function(){var e=this.state.onKeyboardShortcutsPanelClose;e&&e(),this.setState({onKeyboardShortcutsPanelClose:null,showKeyboardShortcuts:!1})}},{key:"renderNavigation",value:function(){var e=this,t=this.props,n=t.navPrev,r=t.navNext,a=t.orientation,i=t.phrases,s=t.isRTL,u=void 0;return u=a===T.VERTICAL_SCROLLABLE?this.multiplyScrollableMonths:function(t){e.onNextMonthClick(null,t)},o.default.createElement(v.default,{onPrevMonthClick:function(t){e.onPrevMonthClick(null,t)},onNextMonthClick:u,navPrev:n,navNext:r,orientation:a,phrases:i,isRTL:s})}},{key:"renderWeekHeader",value:function(e){var t=this.props,n=t.daySize,r=t.orientation,a=this.state.calendarMonthWidth,i=r===T.VERTICAL_SCROLLABLE,s={left:e*a},u={marginLeft:-a/2},l={};this.isHorizontal()?l=s:this.isVertical()&&!i&&(l=u);var c=this.props.firstDayOfWeek;null==c&&(c=d.default.localeData().firstDayOfWeek());for(var f=[],p=0;p<7;p+=1)f.push(o.default.createElement("li",{key:p,style:{width:n}},o.default.createElement("small",null,(0,d.default)().day((p+c)%7).format("dd"))));return o.default.createElement("div",{className:"DayPicker__week-header",key:"week-"+String(e),style:l},o.default.createElement("ul",null,f))}},{key:"render",value:function(){for(var e=this,t=this.state,n=t.calendarMonthWidth,r=t.currentMonth,a=t.monthTransition,i=t.translationValue,s=t.scrollableMonthMultiple,u=t.focusedDate,l=t.showKeyboardShortcuts,d=t.isTouchDevice,p=this.props,h=p.enableOutsideDays,_=p.numberOfMonths,v=p.orientation,g=p.modifiers,D=p.withPortal,k=p.onDayClick,L=p.onDayMouseEnter,w=p.onDayMouseLeave,Y=p.firstDayOfWeek,S=p.renderMonth,O=p.renderDay,P=p.renderCalendarInfo,x=p.hideKeyboardShortcutsPanel,E=p.onOutsideClick,j=p.monthFormat,C=p.daySize,H=p.isFocused,A=p.phrases,F=this.isVertical()?1:_,R=[],I=0;I<F;I+=1)R.push(this.renderWeekHeader(I));var N=1;"prev"===a?N-=1:"next"===a&&(N+=1);var W=this.props.orientation===T.VERTICAL_SCROLLABLE;W&&(N=0);var z=(0,c.default)("DayPicker",{"DayPicker--horizontal":this.isHorizontal(),"DayPicker--vertical":this.isVertical(),"DayPicker--vertical-scrollable":W,"DayPicker--portal":D}),U=(0,c.default)("transition-container",{"transition-container--horizontal":this.isHorizontal(),"transition-container--vertical":this.isVertical()}),V=n*_+18,B=1.75*n,K={width:this.isHorizontal()&&V,marginLeft:this.isHorizontal()&&D&&-V/2,marginTop:this.isHorizontal()&&D&&-n/2},J={width:this.isHorizontal()&&V,height:this.isVertical()&&!W&&!D&&B},q=null!==a,G=(this.isVertical()?"translateY":"translateX")+"("+String(i)+"px)",$=!q&&H,Q=M.BOTTOM_RIGHT;return this.isVertical()&&(Q=D?M.TOP_LEFT:M.TOP_RIGHT),o.default.createElement("div",{className:z,style:K},o.default.createElement(m.default,{onOutsideClick:E},o.default.createElement("div",{className:"DayPicker__week-headers","aria-hidden":"true",role:"presentation"},R),o.default.createElement("div",{className:"DayPicker__focus-region",ref:function(t){e.container=t},onClick:function(e){e.stopPropagation()},onKeyDown:(0,f.default)(this.onKeyDown,300),onMouseUp:function(){e.setState({withMouseInteractions:!0})},role:"region",tabIndex:-1},!W&&this.renderNavigation(),o.default.createElement("div",{className:U,ref:function(t){e.transitionContainer=t},style:J},o.default.createElement(y.default,{ref:this.setCalendarMonthGridRef,transformValue:G,enableOutsideDays:h,firstVisibleMonthIndex:N,initialMonth:r,isAnimating:q,modifiers:g,orientation:v,numberOfMonths:_*s,onDayClick:k,onDayMouseEnter:L,onDayMouseLeave:w,renderMonth:S,renderDay:O,onMonthTransitionEnd:this.updateStateAfterMonthTransition,monthFormat:j,daySize:C,firstDayOfWeek:Y,isFocused:$,focusedDate:u,phrases:A}),W&&this.renderNavigation()),!d&&!x&&o.default.createElement(b.default,{block:this.isVertical()&&!D,buttonLocation:Q,showKeyboardShortcutsPanel:l,openKeyboardShortcutsPanel:this.openKeyboardShortcutsPanel,closeKeyboardShortcutsPanel:this.closeKeyboardShortcutsPanel,phrases:A})),P&&P()))}}]),t}(o.default.Component);t.default=C,C.propTypes=O,C.defaultProps=P}])},function(e,t,n){"use strict";var r=TypeError,a=Object.getOwnPropertyDescriptor;if(a)try{a({},"")}catch(e){a=null}var o=function(){throw new r},i=a?function(){try{return arguments.callee,o}catch(e){try{return a(arguments,"callee").get}catch(e){return o}}}():o,s=n(253)(),u=Object.getPrototypeOf||function(e){return e.__proto__},l=void 0,d="undefined"==typeof Uint8Array?void 0:u(Uint8Array),c={"%Array%":Array,"%ArrayBuffer%":"undefined"==typeof ArrayBuffer?void 0:ArrayBuffer,"%ArrayBufferPrototype%":"undefined"==typeof ArrayBuffer?void 0:ArrayBuffer.prototype,"%ArrayIteratorPrototype%":s?u([][Symbol.iterator]()):void 0,"%ArrayPrototype%":Array.prototype,"%ArrayProto_entries%":Array.prototype.entries,"%ArrayProto_forEach%":Array.prototype.forEach,"%ArrayProto_keys%":Array.prototype.keys,"%ArrayProto_values%":Array.prototype.values,"%AsyncFromSyncIteratorPrototype%":void 0,"%AsyncFunction%":void 0,"%AsyncFunctionPrototype%":void 0,"%AsyncGenerator%":void 0,"%AsyncGeneratorFunction%":void 0,"%AsyncGeneratorPrototype%":void 0,"%AsyncIteratorPrototype%":l&&s&&Symbol.asyncIterator?l[Symbol.asyncIterator]():void 0,"%Atomics%":"undefined"==typeof Atomics?void 0:Atomics,"%Boolean%":Boolean,"%BooleanPrototype%":Boolean.prototype,"%DataView%":"undefined"==typeof DataView?void 0:DataView,"%DataViewPrototype%":"undefined"==typeof DataView?void 0:DataView.prototype,"%Date%":Date,"%DatePrototype%":Date.prototype,"%decodeURI%":decodeURI,"%decodeURIComponent%":decodeURIComponent,"%encodeURI%":encodeURI,"%encodeURIComponent%":encodeURIComponent,"%Error%":Error,"%ErrorPrototype%":Error.prototype,"%eval%":eval,"%EvalError%":EvalError,"%EvalErrorPrototype%":EvalError.prototype,"%Float32Array%":"undefined"==typeof Float32Array?void 0:Float32Array,"%Float32ArrayPrototype%":"undefined"==typeof Float32Array?void 0:Float32Array.prototype,"%Float64Array%":"undefined"==typeof Float64Array?void 0:Float64Array,"%Float64ArrayPrototype%":"undefined"==typeof Float64Array?void 0:Float64Array.prototype,"%Function%":Function,"%FunctionPrototype%":Function.prototype,"%Generator%":void 0,"%GeneratorFunction%":void 0,"%GeneratorPrototype%":void 0,"%Int8Array%":"undefined"==typeof Int8Array?void 0:Int8Array,"%Int8ArrayPrototype%":"undefined"==typeof Int8Array?void 0:Int8Array.prototype,"%Int16Array%":"undefined"==typeof Int16Array?void 0:Int16Array,"%Int16ArrayPrototype%":"undefined"==typeof Int16Array?void 0:Int8Array.prototype,"%Int32Array%":"undefined"==typeof Int32Array?void 0:Int32Array,"%Int32ArrayPrototype%":"undefined"==typeof Int32Array?void 0:Int32Array.prototype,"%isFinite%":isFinite,"%isNaN%":isNaN,"%IteratorPrototype%":s?u(u([][Symbol.iterator]())):void 0,"%JSON%":"object"==typeof JSON?JSON:void 0,"%JSONParse%":"object"==typeof JSON?JSON.parse:void 0,"%Map%":"undefined"==typeof Map?void 0:Map,"%MapIteratorPrototype%":"undefined"!=typeof Map&&s?u((new Map)[Symbol.iterator]()):void 0,"%MapPrototype%":"undefined"==typeof Map?void 0:Map.prototype,"%Math%":Math,"%Number%":Number,"%NumberPrototype%":Number.prototype,"%Object%":Object,"%ObjectPrototype%":Object.prototype,"%ObjProto_toString%":Object.prototype.toString,"%ObjProto_valueOf%":Object.prototype.valueOf,"%parseFloat%":parseFloat,"%parseInt%":parseInt,"%Promise%":"undefined"==typeof Promise?void 0:Promise,"%PromisePrototype%":"undefined"==typeof Promise?void 0:Promise.prototype,"%PromiseProto_then%":"undefined"==typeof Promise?void 0:Promise.prototype.then,"%Promise_all%":"undefined"==typeof Promise?void 0:Promise.all,"%Promise_reject%":"undefined"==typeof Promise?void 0:Promise.reject,"%Promise_resolve%":"undefined"==typeof Promise?void 0:Promise.resolve,"%Proxy%":"undefined"==typeof Proxy?void 0:Proxy,"%RangeError%":RangeError,"%RangeErrorPrototype%":RangeError.prototype,"%ReferenceError%":ReferenceError,"%ReferenceErrorPrototype%":ReferenceError.prototype,"%Reflect%":"undefined"==typeof Reflect?void 0:Reflect,"%RegExp%":RegExp,"%RegExpPrototype%":RegExp.prototype,"%Set%":"undefined"==typeof Set?void 0:Set,"%SetIteratorPrototype%":"undefined"!=typeof Set&&s?u((new Set)[Symbol.iterator]()):void 0,"%SetPrototype%":"undefined"==typeof Set?void 0:Set.prototype,"%SharedArrayBuffer%":"undefined"==typeof SharedArrayBuffer?void 0:SharedArrayBuffer,"%SharedArrayBufferPrototype%":"undefined"==typeof SharedArrayBuffer?void 0:SharedArrayBuffer.prototype,"%String%":String,"%StringIteratorPrototype%":s?u(""[Symbol.iterator]()):void 0,"%StringPrototype%":String.prototype,"%Symbol%":s?Symbol:void 0,"%SymbolPrototype%":s?Symbol.prototype:void 0,"%SyntaxError%":SyntaxError,"%SyntaxErrorPrototype%":SyntaxError.prototype,"%ThrowTypeError%":i,"%TypedArray%":d,"%TypedArrayPrototype%":d?d.prototype:void 0,"%TypeError%":r,"%TypeErrorPrototype%":r.prototype,"%Uint8Array%":"undefined"==typeof Uint8Array?void 0:Uint8Array,"%Uint8ArrayPrototype%":"undefined"==typeof Uint8Array?void 0:Uint8Array.prototype,"%Uint8ClampedArray%":"undefined"==typeof Uint8ClampedArray?void 0:Uint8ClampedArray,"%Uint8ClampedArrayPrototype%":"undefined"==typeof Uint8ClampedArray?void 0:Uint8ClampedArray.prototype,"%Uint16Array%":"undefined"==typeof Uint16Array?void 0:Uint16Array,"%Uint16ArrayPrototype%":"undefined"==typeof Uint16Array?void 0:Uint16Array.prototype,"%Uint32Array%":"undefined"==typeof Uint32Array?void 0:Uint32Array,"%Uint32ArrayPrototype%":"undefined"==typeof Uint32Array?void 0:Uint32Array.prototype,"%URIError%":URIError,"%URIErrorPrototype%":URIError.prototype,"%WeakMap%":"undefined"==typeof WeakMap?void 0:WeakMap,"%WeakMapPrototype%":"undefined"==typeof WeakMap?void 0:WeakMap.prototype,"%WeakSet%":"undefined"==typeof WeakSet?void 0:WeakSet,"%WeakSetPrototype%":"undefined"==typeof WeakSet?void 0:WeakSet.prototype},f=n(27).call(Function.call,String.prototype.replace),p=/[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g,h=/\\(\\)?/g,_=function(e){var t=[];return f(e,p,(function(e,n,r,a){t[t.length]=r?f(a,h,"$1"):n||e})),t},m=function(e,t){if(!(e in c))throw new SyntaxError("intrinsic "+e+" does not exist!");if(void 0===c[e]&&!t)throw new r("intrinsic "+e+" exists, but is not available. Please file an issue!");return c[e]};e.exports=function(e,t){if("string"!=typeof e||0===e.length)throw new TypeError("intrinsic name must be a non-empty string");if(arguments.length>1&&"boolean"!=typeof t)throw new TypeError('"allowMissing" argument must be a boolean');for(var n=_(e),o=m("%"+(n.length>0?n[0]:"")+"%",t),i=1;i<n.length;i+=1)if(null!=o)if(a&&i+1>=n.length){var s=a(o,n[i]);if(!(t||n[i]in o))throw new r("base intrinsic for "+e+" exists, but the property is not available.");o=s?s.get||s.value:o[n[i]]}else o=o[n[i]];return o}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.editExpense=t.removeExpense=t.addExpense=void 0;var r,a=n(260),o=(r=a)&&r.__esModule?r:{default:r};t.addExpense=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.description,n=void 0===t?"":t,r=e.note,a=void 0===r?"":r,i=e.amount,s=void 0===i?0:i,u=e.createdAt,l=void 0===u?0:u;return{type:"ADD_EXPENSE",expense:{id:(0,o.default)(),description:n,note:a,amount:s,createdAt:l}}},t.removeExpense=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.id,n=void 0===t?0:t;return{type:"REMOVE_EXPENSE",id:n}},t.editExpense=function(e,t){return{type:"EDIT_EXPENSE",id:e,updates:t}}},function(e,t,n){"use strict";n.r(t),n.d(t,"__DO_NOT_USE__ActionTypes",(function(){return o})),n.d(t,"applyMiddleware",(function(){return m})),n.d(t,"bindActionCreators",(function(){return c})),n.d(t,"combineReducers",(function(){return l})),n.d(t,"compose",(function(){return _})),n.d(t,"createStore",(function(){return s}));var r=n(39),a=function(){return Math.random().toString(36).substring(7).split("").join(".")},o={INIT:"@@redux/INIT"+a(),REPLACE:"@@redux/REPLACE"+a(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+a()}};function i(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function s(e,t,n){var a;if("function"==typeof t&&"function"==typeof n||"function"==typeof n&&"function"==typeof arguments[3])throw new Error("It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function.");if("function"==typeof t&&void 0===n&&(n=t,t=void 0),void 0!==n){if("function"!=typeof n)throw new Error("Expected the enhancer to be a function.");return n(s)(e,t)}if("function"!=typeof e)throw new Error("Expected the reducer to be a function.");var u=e,l=t,d=[],c=d,f=!1;function p(){c===d&&(c=d.slice())}function h(){if(f)throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");return l}function _(e){if("function"!=typeof e)throw new Error("Expected the listener to be a function.");if(f)throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribelistener for more details.");var t=!0;return p(),c.push(e),function(){if(t){if(f)throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribelistener for more details.");t=!1,p();var n=c.indexOf(e);c.splice(n,1),d=null}}}function m(e){if(!i(e))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===e.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(f)throw new Error("Reducers may not dispatch actions.");try{f=!0,l=u(l,e)}finally{f=!1}for(var t=d=c,n=0;n<t.length;n++){(0,t[n])()}return e}function y(e){if("function"!=typeof e)throw new Error("Expected the nextReducer to be a function.");u=e,m({type:o.REPLACE})}function v(){var e,t=_;return(e={subscribe:function(e){if("object"!=typeof e||null===e)throw new TypeError("Expected the observer to be an object.");function n(){e.next&&e.next(h())}return n(),{unsubscribe:t(n)}}})[r.a]=function(){return this},e}return m({type:o.INIT}),(a={dispatch:m,subscribe:_,getState:h,replaceReducer:y})[r.a]=v,a}function u(e,t){var n=t&&t.type;return"Given "+(n&&'action "'+String(n)+'"'||"an action")+', reducer "'+e+'" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.'}function l(e){for(var t=Object.keys(e),n={},r=0;r<t.length;r++){var a=t[r];0,"function"==typeof e[a]&&(n[a]=e[a])}var i,s=Object.keys(n);try{!function(e){Object.keys(e).forEach((function(t){var n=e[t];if(void 0===n(void 0,{type:o.INIT}))throw new Error('Reducer "'+t+"\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");if(void 0===n(void 0,{type:o.PROBE_UNKNOWN_ACTION()}))throw new Error('Reducer "'+t+"\" returned undefined when probed with a random type. Don't try to handle "+o.INIT+' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.')}))}(n)}catch(e){i=e}return function(e,t){if(void 0===e&&(e={}),i)throw i;for(var r=!1,a={},o=0;o<s.length;o++){var l=s[o],d=n[l],c=e[l],f=d(c,t);if(void 0===f){var p=u(l,t);throw new Error(p)}a[l]=f,r=r||f!==c}return(r=r||s.length!==Object.keys(e).length)?a:e}}function d(e,t){return function(){return t(e.apply(this,arguments))}}function c(e,t){if("function"==typeof e)return d(e,t);if("object"!=typeof e||null===e)throw new Error("bindActionCreators expected an object or a function, instead received "+(null===e?"null":typeof e)+'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');var n={};for(var r in e){var a=e[r];"function"==typeof a&&(n[r]=d(a,t))}return n}function f(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function p(e,t){var n=Object.keys(e);return Object.getOwnPropertySymbols&&n.push.apply(n,Object.getOwnPropertySymbols(e)),t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n}function h(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?p(n,!0).forEach((function(t){f(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):p(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function _(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce((function(e,t){return function(){return e(t.apply(void 0,arguments))}}))}function m(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return function(){var n=e.apply(void 0,arguments),r=function(){throw new Error("Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.")},a={getState:n.getState,dispatch:function(){return r.apply(void 0,arguments)}},o=t.map((function(e){return e(a)}));return h({},n,{dispatch:r=_.apply(void 0,o)(n.dispatch)})}}}},function(e,t,n){"use strict";(function(e,r){var a,o=n(196);a="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==e?e:r;var i=Object(o.a)(a);t.a=i}).call(this,n(23),n(212)(e))},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,a=Object.prototype.hasOwnProperty,o=Object.prototype.propertyIsEnumerable;function i(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,s,u=i(e),l=1;l<arguments.length;l++){for(var d in n=Object(arguments[l]))a.call(n,d)&&(u[d]=n[d]);if(r){s=r(n);for(var c=0;c<s.length;c++)o.call(n,s[c])&&(u[s[c]]=n[s[c]])}}return u}},function(e,t,n){"use strict";function r(e){return function(){return e}}var a=function(){};a.thatReturns=r,a.thatReturnsFalse=r(!1),a.thatReturnsTrue=r(!0),a.thatReturnsNull=r(null),a.thatReturnsThis=function(){return this},a.thatReturnsArgument=function(e){return e},e.exports=a},function(e,t,n){"use strict";var r=Object.prototype.hasOwnProperty;function a(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}e.exports=function(e,t){if(a(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),o=Object.keys(t);if(n.length!==o.length)return!1;for(var i=0;i<n.length;i++)if(!r.call(t,n[i])||!a(e[n[i]],t[n[i]]))return!1;return!0}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,a=n(0),o=(r=a)&&r.__esModule?r:{default:r};t.default=function(e,t){var n=t.text,r=t.sortBy,a=t.startDate,i=t.endDate;return e.filter((function(e){var t=(0,o.default)(e.createdAt),r=!a||a.isSameOrBefore(t,"day"),s=!i||i.isSameOrAfter(t,"day"),u=e.description.toLowerCase().includes(n.toLowerCase());return r&&s&&u})).sort((function(e,t){return"date"===r?e.createdAt<t.createdAt?1:-1:"amount"===r?e.amount<t.amount?1:-1:void 0}))}},function(e,t,n){!function(e){"use strict";e.defineLocale("af",{months:"Januarie_Februarie_Maart_April_Mei_Junie_Julie_Augustus_September_Oktober_November_Desember".split("_"),monthsShort:"Jan_Feb_Mrt_Apr_Mei_Jun_Jul_Aug_Sep_Okt_Nov_Des".split("_"),weekdays:"Sondag_Maandag_Dinsdag_Woensdag_Donderdag_Vrydag_Saterdag".split("_"),weekdaysShort:"Son_Maa_Din_Woe_Don_Vry_Sat".split("_"),weekdaysMin:"So_Ma_Di_Wo_Do_Vr_Sa".split("_"),meridiemParse:/vm|nm/i,isPM:function(e){return/^nm$/i.test(e)},meridiem:function(e,t,n){return e<12?n?"vm":"VM":n?"nm":"NM"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Vandag om] LT",nextDay:"[Môre om] LT",nextWeek:"dddd [om] LT",lastDay:"[Gister om] LT",lastWeek:"[Laas] dddd [om] LT",sameElse:"L"},relativeTime:{future:"oor %s",past:"%s gelede",s:"'n paar sekondes",m:"'n minuut",mm:"%d minute",h:"'n uur",hh:"%d ure",d:"'n dag",dd:"%d dae",M:"'n maand",MM:"%d maande",y:"'n jaar",yy:"%d jaar"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},n={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"},r=function(e){return 0===e?0:1===e?1:2===e?2:e%100>=3&&e%100<=10?3:e%100>=11?4:5},a={s:["أقل من ثانية","ثانية واحدة",["ثانيتان","ثانيتين"],"%d ثوان","%d ثانية","%d ثانية"],m:["أقل من دقيقة","دقيقة واحدة",["دقيقتان","دقيقتين"],"%d دقائق","%d دقيقة","%d دقيقة"],h:["أقل من ساعة","ساعة واحدة",["ساعتان","ساعتين"],"%d ساعات","%d ساعة","%d ساعة"],d:["أقل من يوم","يوم واحد",["يومان","يومين"],"%d أيام","%d يومًا","%d يوم"],M:["أقل من شهر","شهر واحد",["شهران","شهرين"],"%d أشهر","%d شهرا","%d شهر"],y:["أقل من عام","عام واحد",["عامان","عامين"],"%d أعوام","%d عامًا","%d عام"]},o=function(e){return function(t,n,o,i){var s=r(t),u=a[e][r(t)];return 2===s&&(u=u[n?0:1]),u.replace(/%d/i,t)}},i=["كانون الثاني يناير","شباط فبراير","آذار مارس","نيسان أبريل","أيار مايو","حزيران يونيو","تموز يوليو","آب أغسطس","أيلول سبتمبر","تشرين الأول أكتوبر","تشرين الثاني نوفمبر","كانون الأول ديسمبر"];e.defineLocale("ar",{months:i,monthsShort:i,weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/‏M/‏YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,n){return e<12?"ص":"م"},calendar:{sameDay:"[اليوم عند الساعة] LT",nextDay:"[غدًا عند الساعة] LT",nextWeek:"dddd [عند الساعة] LT",lastDay:"[أمس عند الساعة] LT",lastWeek:"dddd [عند الساعة] LT",sameElse:"L"},relativeTime:{future:"بعد %s",past:"منذ %s",s:o("s"),m:o("m"),mm:o("m"),h:o("h"),hh:o("h"),d:o("d"),dd:o("d"),M:o("M"),MM:o("M"),y:o("y"),yy:o("y")},preparse:function(e){return e.replace(/\u200f/g,"").replace(/[١٢٣٤٥٦٧٨٩٠]/g,(function(e){return n[e]})).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]})).replace(/,/g,"،")},week:{dow:6,doy:12}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("ar-dz",{months:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),monthsShort:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"احد_اثنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"أح_إث_ثلا_أر_خم_جم_سب".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:0,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("ar-kw",{months:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),weekdays:"الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:0,doy:12}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={1:"1",2:"2",3:"3",4:"4",5:"5",6:"6",7:"7",8:"8",9:"9",0:"0"},n=function(e){return 0===e?0:1===e?1:2===e?2:e%100>=3&&e%100<=10?3:e%100>=11?4:5},r={s:["أقل من ثانية","ثانية واحدة",["ثانيتان","ثانيتين"],"%d ثوان","%d ثانية","%d ثانية"],m:["أقل من دقيقة","دقيقة واحدة",["دقيقتان","دقيقتين"],"%d دقائق","%d دقيقة","%d دقيقة"],h:["أقل من ساعة","ساعة واحدة",["ساعتان","ساعتين"],"%d ساعات","%d ساعة","%d ساعة"],d:["أقل من يوم","يوم واحد",["يومان","يومين"],"%d أيام","%d يومًا","%d يوم"],M:["أقل من شهر","شهر واحد",["شهران","شهرين"],"%d أشهر","%d شهرا","%d شهر"],y:["أقل من عام","عام واحد",["عامان","عامين"],"%d أعوام","%d عامًا","%d عام"]},a=function(e){return function(t,a,o,i){var s=n(t),u=r[e][n(t)];return 2===s&&(u=u[a?0:1]),u.replace(/%d/i,t)}},o=["يناير","فبراير","مارس","أبريل","مايو","يونيو","يوليو","أغسطس","سبتمبر","أكتوبر","نوفمبر","ديسمبر"];e.defineLocale("ar-ly",{months:o,monthsShort:o,weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/‏M/‏YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,n){return e<12?"ص":"م"},calendar:{sameDay:"[اليوم عند الساعة] LT",nextDay:"[غدًا عند الساعة] LT",nextWeek:"dddd [عند الساعة] LT",lastDay:"[أمس عند الساعة] LT",lastWeek:"dddd [عند الساعة] LT",sameElse:"L"},relativeTime:{future:"بعد %s",past:"منذ %s",s:a("s"),m:a("m"),mm:a("m"),h:a("h"),hh:a("h"),d:a("d"),dd:a("d"),M:a("M"),MM:a("M"),y:a("y"),yy:a("y")},preparse:function(e){return e.replace(/\u200f/g,"").replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]})).replace(/,/g,"،")},week:{dow:6,doy:12}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("ar-ma",{months:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),weekdays:"الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:6,doy:12}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},n={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"};e.defineLocale("ar-sa",{months:"يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,n){return e<12?"ص":"م"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},preparse:function(e){return e.replace(/[١٢٣٤٥٦٧٨٩٠]/g,(function(e){return n[e]})).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]})).replace(/,/g,"،")},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("ar-tn",{months:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),monthsShort:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={1:"-inci",5:"-inci",8:"-inci",70:"-inci",80:"-inci",2:"-nci",7:"-nci",20:"-nci",50:"-nci",3:"-üncü",4:"-üncü",100:"-üncü",6:"-ncı",9:"-uncu",10:"-uncu",30:"-uncu",60:"-ıncı",90:"-ıncı"};e.defineLocale("az",{months:"yanvar_fevral_mart_aprel_may_iyun_iyul_avqust_sentyabr_oktyabr_noyabr_dekabr".split("_"),monthsShort:"yan_fev_mar_apr_may_iyn_iyl_avq_sen_okt_noy_dek".split("_"),weekdays:"Bazar_Bazar ertəsi_Çərşənbə axşamı_Çərşənbə_Cümə axşamı_Cümə_Şənbə".split("_"),weekdaysShort:"Baz_BzE_ÇAx_Çər_CAx_Cüm_Şən".split("_"),weekdaysMin:"Bz_BE_ÇA_Çə_CA_Cü_Şə".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[bugün saat] LT",nextDay:"[sabah saat] LT",nextWeek:"[gələn həftə] dddd [saat] LT",lastDay:"[dünən] LT",lastWeek:"[keçən həftə] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s sonra",past:"%s əvvəl",s:"birneçə saniyyə",m:"bir dəqiqə",mm:"%d dəqiqə",h:"bir saat",hh:"%d saat",d:"bir gün",dd:"%d gün",M:"bir ay",MM:"%d ay",y:"bir il",yy:"%d il"},meridiemParse:/gecə|səhər|gündüz|axşam/,isPM:function(e){return/^(gündüz|axşam)$/.test(e)},meridiem:function(e,t,n){return e<4?"gecə":e<12?"səhər":e<17?"gündüz":"axşam"},dayOfMonthOrdinalParse:/\d{1,2}-(ıncı|inci|nci|üncü|ncı|uncu)/,ordinal:function(e){if(0===e)return e+"-ıncı";var n=e%10;return e+(t[n]||t[e%100-n]||t[e>=100?100:null])},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";function t(e,t,n){var r,a;return"m"===n?t?"хвіліна":"хвіліну":"h"===n?t?"гадзіна":"гадзіну":e+" "+(r=+e,a={mm:t?"хвіліна_хвіліны_хвілін":"хвіліну_хвіліны_хвілін",hh:t?"гадзіна_гадзіны_гадзін":"гадзіну_гадзіны_гадзін",dd:"дзень_дні_дзён",MM:"месяц_месяцы_месяцаў",yy:"год_гады_гадоў"}[n].split("_"),r%10==1&&r%100!=11?a[0]:r%10>=2&&r%10<=4&&(r%100<10||r%100>=20)?a[1]:a[2])}e.defineLocale("be",{months:{format:"студзеня_лютага_сакавіка_красавіка_траўня_чэрвеня_ліпеня_жніўня_верасня_кастрычніка_лістапада_снежня".split("_"),standalone:"студзень_люты_сакавік_красавік_травень_чэрвень_ліпень_жнівень_верасень_кастрычнік_лістапад_снежань".split("_")},monthsShort:"студ_лют_сак_крас_трав_чэрв_ліп_жнів_вер_каст_ліст_снеж".split("_"),weekdays:{format:"нядзелю_панядзелак_аўторак_сераду_чацвер_пятніцу_суботу".split("_"),standalone:"нядзеля_панядзелак_аўторак_серада_чацвер_пятніца_субота".split("_"),isFormat:/\[ ?[Вв] ?(?:мінулую|наступную)? ?\] ?dddd/},weekdaysShort:"нд_пн_ат_ср_чц_пт_сб".split("_"),weekdaysMin:"нд_пн_ат_ср_чц_пт_сб".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY г.",LLL:"D MMMM YYYY г., HH:mm",LLLL:"dddd, D MMMM YYYY г., HH:mm"},calendar:{sameDay:"[Сёння ў] LT",nextDay:"[Заўтра ў] LT",lastDay:"[Учора ў] LT",nextWeek:function(){return"[У] dddd [ў] LT"},lastWeek:function(){switch(this.day()){case 0:case 3:case 5:case 6:return"[У мінулую] dddd [ў] LT";case 1:case 2:case 4:return"[У мінулы] dddd [ў] LT"}},sameElse:"L"},relativeTime:{future:"праз %s",past:"%s таму",s:"некалькі секунд",m:t,mm:t,h:t,hh:t,d:"дзень",dd:t,M:"месяц",MM:t,y:"год",yy:t},meridiemParse:/ночы|раніцы|дня|вечара/,isPM:function(e){return/^(дня|вечара)$/.test(e)},meridiem:function(e,t,n){return e<4?"ночы":e<12?"раніцы":e<17?"дня":"вечара"},dayOfMonthOrdinalParse:/\d{1,2}-(і|ы|га)/,ordinal:function(e,t){switch(t){case"M":case"d":case"DDD":case"w":case"W":return e%10!=2&&e%10!=3||e%100==12||e%100==13?e+"-ы":e+"-і";case"D":return e+"-га";default:return e}},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("bg",{months:"януари_февруари_март_април_май_юни_юли_август_септември_октомври_ноември_декември".split("_"),monthsShort:"янр_фев_мар_апр_май_юни_юли_авг_сеп_окт_ное_дек".split("_"),weekdays:"неделя_понеделник_вторник_сряда_четвъртък_петък_събота".split("_"),weekdaysShort:"нед_пон_вто_сря_чет_пет_съб".split("_"),weekdaysMin:"нд_пн_вт_ср_чт_пт_сб".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[Днес в] LT",nextDay:"[Утре в] LT",nextWeek:"dddd [в] LT",lastDay:"[Вчера в] LT",lastWeek:function(){switch(this.day()){case 0:case 3:case 6:return"[В изминалата] dddd [в] LT";case 1:case 2:case 4:case 5:return"[В изминалия] dddd [в] LT"}},sameElse:"L"},relativeTime:{future:"след %s",past:"преди %s",s:"няколко секунди",m:"минута",mm:"%d минути",h:"час",hh:"%d часа",d:"ден",dd:"%d дни",M:"месец",MM:"%d месеца",y:"година",yy:"%d години"},dayOfMonthOrdinalParse:/\d{1,2}-(ев|ен|ти|ви|ри|ми)/,ordinal:function(e){var t=e%10,n=e%100;return 0===e?e+"-ев":0===n?e+"-ен":n>10&&n<20?e+"-ти":1===t?e+"-ви":2===t?e+"-ри":7===t||8===t?e+"-ми":e+"-ти"},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={1:"১",2:"২",3:"৩",4:"৪",5:"৫",6:"৬",7:"৭",8:"৮",9:"৯",0:"০"},n={"১":"1","২":"2","৩":"3","৪":"4","৫":"5","৬":"6","৭":"7","৮":"8","৯":"9","০":"0"};e.defineLocale("bn",{months:"জানুয়ারী_ফেব্রুয়ারি_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর".split("_"),monthsShort:"জানু_ফেব_মার্চ_এপ্র_মে_জুন_জুল_আগ_সেপ্ট_অক্টো_নভে_ডিসে".split("_"),weekdays:"রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পতিবার_শুক্রবার_শনিবার".split("_"),weekdaysShort:"রবি_সোম_মঙ্গল_বুধ_বৃহস্পতি_শুক্র_শনি".split("_"),weekdaysMin:"রবি_সোম_মঙ্গ_বুধ_বৃহঃ_শুক্র_শনি".split("_"),longDateFormat:{LT:"A h:mm সময়",LTS:"A h:mm:ss সময়",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm সময়",LLLL:"dddd, D MMMM YYYY, A h:mm সময়"},calendar:{sameDay:"[আজ] LT",nextDay:"[আগামীকাল] LT",nextWeek:"dddd, LT",lastDay:"[গতকাল] LT",lastWeek:"[গত] dddd, LT",sameElse:"L"},relativeTime:{future:"%s পরে",past:"%s আগে",s:"কয়েক সেকেন্ড",m:"এক মিনিট",mm:"%d মিনিট",h:"এক ঘন্টা",hh:"%d ঘন্টা",d:"এক দিন",dd:"%d দিন",M:"এক মাস",MM:"%d মাস",y:"এক বছর",yy:"%d বছর"},preparse:function(e){return e.replace(/[১২৩৪৫৬৭৮৯০]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/রাত|সকাল|দুপুর|বিকাল|রাত/,meridiemHour:function(e,t){return 12===e&&(e=0),"রাত"===t&&e>=4||"দুপুর"===t&&e<5||"বিকাল"===t?e+12:e},meridiem:function(e,t,n){return e<4?"রাত":e<10?"সকাল":e<17?"দুপুর":e<20?"বিকাল":"রাত"},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={1:"༡",2:"༢",3:"༣",4:"༤",5:"༥",6:"༦",7:"༧",8:"༨",9:"༩",0:"༠"},n={"༡":"1","༢":"2","༣":"3","༤":"4","༥":"5","༦":"6","༧":"7","༨":"8","༩":"9","༠":"0"};e.defineLocale("bo",{months:"ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ".split("_"),monthsShort:"ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ".split("_"),weekdays:"གཟའ་ཉི་མ་_གཟའ་ཟླ་བ་_གཟའ་མིག་དམར་_གཟའ་ལྷག་པ་_གཟའ་ཕུར་བུ_གཟའ་པ་སངས་_གཟའ་སྤེན་པ་".split("_"),weekdaysShort:"ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་".split("_"),weekdaysMin:"ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm",LLLL:"dddd, D MMMM YYYY, A h:mm"},calendar:{sameDay:"[དི་རིང] LT",nextDay:"[སང་ཉིན] LT",nextWeek:"[བདུན་ཕྲག་རྗེས་མ], LT",lastDay:"[ཁ་སང] LT",lastWeek:"[བདུན་ཕྲག་མཐའ་མ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s ལ་",past:"%s སྔན་ལ",s:"ལམ་སང",m:"སྐར་མ་གཅིག",mm:"%d སྐར་མ",h:"ཆུ་ཚོད་གཅིག",hh:"%d ཆུ་ཚོད",d:"ཉིན་གཅིག",dd:"%d ཉིན་",M:"ཟླ་བ་གཅིག",MM:"%d ཟླ་བ",y:"ལོ་གཅིག",yy:"%d ལོ"},preparse:function(e){return e.replace(/[༡༢༣༤༥༦༧༨༩༠]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/མཚན་མོ|ཞོགས་ཀས|ཉིན་གུང|དགོང་དག|མཚན་མོ/,meridiemHour:function(e,t){return 12===e&&(e=0),"མཚན་མོ"===t&&e>=4||"ཉིན་གུང"===t&&e<5||"དགོང་དག"===t?e+12:e},meridiem:function(e,t,n){return e<4?"མཚན་མོ":e<10?"ཞོགས་ཀས":e<17?"ཉིན་གུང":e<20?"དགོང་དག":"མཚན་མོ"},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";function t(e,t,n){return e+" "+function(e,t){return 2===t?function(e){var t={m:"v",b:"v",d:"z"};return void 0===t[e.charAt(0)]?e:t[e.charAt(0)]+e.substring(1)}(e):e}({mm:"munutenn",MM:"miz",dd:"devezh"}[n],e)}e.defineLocale("br",{months:"Genver_C'hwevrer_Meurzh_Ebrel_Mae_Mezheven_Gouere_Eost_Gwengolo_Here_Du_Kerzu".split("_"),monthsShort:"Gen_C'hwe_Meu_Ebr_Mae_Eve_Gou_Eos_Gwe_Her_Du_Ker".split("_"),weekdays:"Sul_Lun_Meurzh_Merc'her_Yaou_Gwener_Sadorn".split("_"),weekdaysShort:"Sul_Lun_Meu_Mer_Yao_Gwe_Sad".split("_"),weekdaysMin:"Su_Lu_Me_Mer_Ya_Gw_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h[e]mm A",LTS:"h[e]mm:ss A",L:"DD/MM/YYYY",LL:"D [a viz] MMMM YYYY",LLL:"D [a viz] MMMM YYYY h[e]mm A",LLLL:"dddd, D [a viz] MMMM YYYY h[e]mm A"},calendar:{sameDay:"[Hiziv da] LT",nextDay:"[Warc'hoazh da] LT",nextWeek:"dddd [da] LT",lastDay:"[Dec'h da] LT",lastWeek:"dddd [paset da] LT",sameElse:"L"},relativeTime:{future:"a-benn %s",past:"%s 'zo",s:"un nebeud segondennoù",m:"ur vunutenn",mm:t,h:"un eur",hh:"%d eur",d:"un devezh",dd:t,M:"ur miz",MM:t,y:"ur bloaz",yy:function(e){switch(function e(t){return t>9?e(t%10):t}(e)){case 1:case 3:case 4:case 5:case 9:return e+" bloaz";default:return e+" vloaz"}}},dayOfMonthOrdinalParse:/\d{1,2}(añ|vet)/,ordinal:function(e){return e+(1===e?"añ":"vet")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";function t(e,t,n){var r=e+" ";switch(n){case"m":return t?"jedna minuta":"jedne minute";case"mm":return r+=1===e?"minuta":2===e||3===e||4===e?"minute":"minuta";case"h":return t?"jedan sat":"jednog sata";case"hh":return r+=1===e?"sat":2===e||3===e||4===e?"sata":"sati";case"dd":return r+=1===e?"dan":"dana";case"MM":return r+=1===e?"mjesec":2===e||3===e||4===e?"mjeseca":"mjeseci";case"yy":return r+=1===e?"godina":2===e||3===e||4===e?"godine":"godina"}}e.defineLocale("bs",{months:"januar_februar_mart_april_maj_juni_juli_august_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj._jun._jul._aug._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[jučer u] LT",lastWeek:function(){switch(this.day()){case 0:case 3:return"[prošlu] dddd [u] LT";case 6:return"[prošle] [subote] [u] LT";case 1:case 2:case 4:case 5:return"[prošli] dddd [u] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"par sekundi",m:t,mm:t,h:t,hh:t,d:"dan",dd:t,M:"mjesec",MM:t,y:"godinu",yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("ca",{months:{standalone:"gener_febrer_març_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre".split("_"),format:"de gener_de febrer_de març_d'abril_de maig_de juny_de juliol_d'agost_de setembre_d'octubre_de novembre_de desembre".split("_"),isFormat:/D[oD]?(\s)+MMMM/},monthsShort:"gen._febr._març_abr._maig_juny_jul._ag._set._oct._nov._des.".split("_"),monthsParseExact:!0,weekdays:"diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte".split("_"),weekdaysShort:"dg._dl._dt._dc._dj._dv._ds.".split("_"),weekdaysMin:"Dg_Dl_Dt_Dc_Dj_Dv_Ds".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"[el] D MMMM [de] YYYY",ll:"D MMM YYYY",LLL:"[el] D MMMM [de] YYYY [a les] H:mm",lll:"D MMM YYYY, H:mm",LLLL:"[el] dddd D MMMM [de] YYYY [a les] H:mm",llll:"ddd D MMM YYYY, H:mm"},calendar:{sameDay:function(){return"[avui a "+(1!==this.hours()?"les":"la")+"] LT"},nextDay:function(){return"[demà a "+(1!==this.hours()?"les":"la")+"] LT"},nextWeek:function(){return"dddd [a "+(1!==this.hours()?"les":"la")+"] LT"},lastDay:function(){return"[ahir a "+(1!==this.hours()?"les":"la")+"] LT"},lastWeek:function(){return"[el] dddd [passat a "+(1!==this.hours()?"les":"la")+"] LT"},sameElse:"L"},relativeTime:{future:"d'aquí %s",past:"fa %s",s:"uns segons",m:"un minut",mm:"%d minuts",h:"una hora",hh:"%d hores",d:"un dia",dd:"%d dies",M:"un mes",MM:"%d mesos",y:"un any",yy:"%d anys"},dayOfMonthOrdinalParse:/\d{1,2}(r|n|t|è|a)/,ordinal:function(e,t){var n=1===e?"r":2===e?"n":3===e?"r":4===e?"t":"è";return"w"!==t&&"W"!==t||(n="a"),e+n},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";var t="leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec".split("_"),n="led_úno_bře_dub_kvě_čvn_čvc_srp_zář_říj_lis_pro".split("_");function r(e){return e>1&&e<5&&1!=~~(e/10)}function a(e,t,n,a){var o=e+" ";switch(n){case"s":return t||a?"pár sekund":"pár sekundami";case"m":return t?"minuta":a?"minutu":"minutou";case"mm":return t||a?o+(r(e)?"minuty":"minut"):o+"minutami";case"h":return t?"hodina":a?"hodinu":"hodinou";case"hh":return t||a?o+(r(e)?"hodiny":"hodin"):o+"hodinami";case"d":return t||a?"den":"dnem";case"dd":return t||a?o+(r(e)?"dny":"dní"):o+"dny";case"M":return t||a?"měsíc":"měsícem";case"MM":return t||a?o+(r(e)?"měsíce":"měsíců"):o+"měsíci";case"y":return t||a?"rok":"rokem";case"yy":return t||a?o+(r(e)?"roky":"let"):o+"lety"}}e.defineLocale("cs",{months:t,monthsShort:n,monthsParse:function(e,t){var n,r=[];for(n=0;n<12;n++)r[n]=new RegExp("^"+e[n]+"$|^"+t[n]+"$","i");return r}(t,n),shortMonthsParse:function(e){var t,n=[];for(t=0;t<12;t++)n[t]=new RegExp("^"+e[t]+"$","i");return n}(n),longMonthsParse:function(e){var t,n=[];for(t=0;t<12;t++)n[t]=new RegExp("^"+e[t]+"$","i");return n}(t),weekdays:"neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota".split("_"),weekdaysShort:"ne_po_út_st_čt_pá_so".split("_"),weekdaysMin:"ne_po_út_st_čt_pá_so".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd D. MMMM YYYY H:mm",l:"D. M. YYYY"},calendar:{sameDay:"[dnes v] LT",nextDay:"[zítra v] LT",nextWeek:function(){switch(this.day()){case 0:return"[v neděli v] LT";case 1:case 2:return"[v] dddd [v] LT";case 3:return"[ve středu v] LT";case 4:return"[ve čtvrtek v] LT";case 5:return"[v pátek v] LT";case 6:return"[v sobotu v] LT"}},lastDay:"[včera v] LT",lastWeek:function(){switch(this.day()){case 0:return"[minulou neděli v] LT";case 1:case 2:return"[minulé] dddd [v] LT";case 3:return"[minulou středu v] LT";case 4:case 5:return"[minulý] dddd [v] LT";case 6:return"[minulou sobotu v] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"před %s",s:a,m:a,mm:a,h:a,hh:a,d:a,dd:a,M:a,MM:a,y:a,yy:a},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("cv",{months:"кӑрлач_нарӑс_пуш_ака_май_ҫӗртме_утӑ_ҫурла_авӑн_юпа_чӳк_раштав".split("_"),monthsShort:"кӑр_нар_пуш_ака_май_ҫӗр_утӑ_ҫур_авн_юпа_чӳк_раш".split("_"),weekdays:"вырсарникун_тунтикун_ытларикун_юнкун_кӗҫнерникун_эрнекун_шӑматкун".split("_"),weekdaysShort:"выр_тун_ытл_юн_кӗҫ_эрн_шӑм".split("_"),weekdaysMin:"вр_тн_ыт_юн_кҫ_эр_шм".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ]",LLL:"YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm",LLLL:"dddd, YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm"},calendar:{sameDay:"[Паян] LT [сехетре]",nextDay:"[Ыран] LT [сехетре]",lastDay:"[Ӗнер] LT [сехетре]",nextWeek:"[Ҫитес] dddd LT [сехетре]",lastWeek:"[Иртнӗ] dddd LT [сехетре]",sameElse:"L"},relativeTime:{future:function(e){return e+(/сехет$/i.exec(e)?"рен":/ҫул$/i.exec(e)?"тан":"ран")},past:"%s каялла",s:"пӗр-ик ҫеккунт",m:"пӗр минут",mm:"%d минут",h:"пӗр сехет",hh:"%d сехет",d:"пӗр кун",dd:"%d кун",M:"пӗр уйӑх",MM:"%d уйӑх",y:"пӗр ҫул",yy:"%d ҫул"},dayOfMonthOrdinalParse:/\d{1,2}-мӗш/,ordinal:"%d-мӗш",week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("cy",{months:"Ionawr_Chwefror_Mawrth_Ebrill_Mai_Mehefin_Gorffennaf_Awst_Medi_Hydref_Tachwedd_Rhagfyr".split("_"),monthsShort:"Ion_Chwe_Maw_Ebr_Mai_Meh_Gor_Aws_Med_Hyd_Tach_Rhag".split("_"),weekdays:"Dydd Sul_Dydd Llun_Dydd Mawrth_Dydd Mercher_Dydd Iau_Dydd Gwener_Dydd Sadwrn".split("_"),weekdaysShort:"Sul_Llun_Maw_Mer_Iau_Gwe_Sad".split("_"),weekdaysMin:"Su_Ll_Ma_Me_Ia_Gw_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Heddiw am] LT",nextDay:"[Yfory am] LT",nextWeek:"dddd [am] LT",lastDay:"[Ddoe am] LT",lastWeek:"dddd [diwethaf am] LT",sameElse:"L"},relativeTime:{future:"mewn %s",past:"%s yn ôl",s:"ychydig eiliadau",m:"munud",mm:"%d munud",h:"awr",hh:"%d awr",d:"diwrnod",dd:"%d diwrnod",M:"mis",MM:"%d mis",y:"blwyddyn",yy:"%d flynedd"},dayOfMonthOrdinalParse:/\d{1,2}(fed|ain|af|il|ydd|ed|eg)/,ordinal:function(e){var t="";return e>20?t=40===e||50===e||60===e||80===e||100===e?"fed":"ain":e>0&&(t=["","af","il","ydd","ydd","ed","ed","ed","fed","fed","fed","eg","fed","eg","eg","fed","eg","eg","fed","eg","fed"][e]),e+t},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("da",{months:"januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),weekdays:"søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"),weekdaysShort:"søn_man_tir_ons_tor_fre_lør".split("_"),weekdaysMin:"sø_ma_ti_on_to_fr_lø".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd [d.] D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[i dag kl.] LT",nextDay:"[i morgen kl.] LT",nextWeek:"på dddd [kl.] LT",lastDay:"[i går kl.] LT",lastWeek:"[i] dddd[s kl.] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s siden",s:"få sekunder",m:"et minut",mm:"%d minutter",h:"en time",hh:"%d timer",d:"en dag",dd:"%d dage",M:"en måned",MM:"%d måneder",y:"et år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[e+" Tage",e+" Tagen"],M:["ein Monat","einem Monat"],MM:[e+" Monate",e+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[e+" Jahre",e+" Jahren"]};return t?a[n][0]:a[n][1]}e.defineLocale("de",{months:"Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",m:t,mm:"%d Minuten",h:t,hh:"%d Stunden",d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[e+" Tage",e+" Tagen"],M:["ein Monat","einem Monat"],MM:[e+" Monate",e+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[e+" Jahre",e+" Jahren"]};return t?a[n][0]:a[n][1]}e.defineLocale("de-at",{months:"Jänner_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jän._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",m:t,mm:"%d Minuten",h:t,hh:"%d Stunden",d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[e+" Tage",e+" Tagen"],M:["ein Monat","einem Monat"],MM:[e+" Monate",e+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[e+" Jahre",e+" Jahren"]};return t?a[n][0]:a[n][1]}e.defineLocale("de-ch",{months:"Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Febr._März_April_Mai_Juni_Juli_Aug._Sept._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH.mm",LLLL:"dddd, D. MMMM YYYY HH.mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",m:t,mm:"%d Minuten",h:t,hh:"%d Stunden",d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";var t=["ޖެނުއަރީ","ފެބްރުއަރީ","މާރިޗު","އޭޕްރީލު","މޭ","ޖޫން","ޖުލައި","އޯގަސްޓު","ސެޕްޓެމްބަރު","އޮކްޓޯބަރު","ނޮވެމްބަރު","ޑިސެމްބަރު"],n=["އާދިއްތަ","ހޯމަ","އަންގާރަ","ބުދަ","ބުރާސްފަތި","ހުކުރު","ހޮނިހިރު"];e.defineLocale("dv",{months:t,monthsShort:t,weekdays:n,weekdaysShort:n,weekdaysMin:"އާދި_ހޯމަ_އަން_ބުދަ_ބުރާ_ހުކު_ހޮނި".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/M/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/މކ|މފ/,isPM:function(e){return"މފ"===e},meridiem:function(e,t,n){return e<12?"މކ":"މފ"},calendar:{sameDay:"[މިއަދު] LT",nextDay:"[މާދަމާ] LT",nextWeek:"dddd LT",lastDay:"[އިއްޔެ] LT",lastWeek:"[ފާއިތުވި] dddd LT",sameElse:"L"},relativeTime:{future:"ތެރޭގައި %s",past:"ކުރިން %s",s:"ސިކުންތުކޮޅެއް",m:"މިނިޓެއް",mm:"މިނިޓު %d",h:"ގަޑިއިރެއް",hh:"ގަޑިއިރު %d",d:"ދުވަހެއް",dd:"ދުވަސް %d",M:"މަހެއް",MM:"މަސް %d",y:"އަހަރެއް",yy:"އަހަރު %d"},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:7,doy:12}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("el",{monthsNominativeEl:"Ιανουάριος_Φεβρουάριος_Μάρτιος_Απρίλιος_Μάιος_Ιούνιος_Ιούλιος_Αύγουστος_Σεπτέμβριος_Οκτώβριος_Νοέμβριος_Δεκέμβριος".split("_"),monthsGenitiveEl:"Ιανουαρίου_Φεβρουαρίου_Μαρτίου_Απριλίου_Μαΐου_Ιουνίου_Ιουλίου_Αυγούστου_Σεπτεμβρίου_Οκτωβρίου_Νοεμβρίου_Δεκεμβρίου".split("_"),months:function(e,t){return e?/D/.test(t.substring(0,t.indexOf("MMMM")))?this._monthsGenitiveEl[e.month()]:this._monthsNominativeEl[e.month()]:this._monthsNominativeEl},monthsShort:"Ιαν_Φεβ_Μαρ_Απρ_Μαϊ_Ιουν_Ιουλ_Αυγ_Σεπ_Οκτ_Νοε_Δεκ".split("_"),weekdays:"Κυριακή_Δευτέρα_Τρίτη_Τετάρτη_Πέμπτη_Παρασκευή_Σάββατο".split("_"),weekdaysShort:"Κυρ_Δευ_Τρι_Τετ_Πεμ_Παρ_Σαβ".split("_"),weekdaysMin:"Κυ_Δε_Τρ_Τε_Πε_Πα_Σα".split("_"),meridiem:function(e,t,n){return e>11?n?"μμ":"ΜΜ":n?"πμ":"ΠΜ"},isPM:function(e){return"μ"===(e+"").toLowerCase()[0]},meridiemParse:/[ΠΜ]\.?Μ?\.?/i,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendarEl:{sameDay:"[Σήμερα {}] LT",nextDay:"[Αύριο {}] LT",nextWeek:"dddd [{}] LT",lastDay:"[Χθες {}] LT",lastWeek:function(){switch(this.day()){case 6:return"[το προηγούμενο] dddd [{}] LT";default:return"[την προηγούμενη] dddd [{}] LT"}},sameElse:"L"},calendar:function(e,t){var n,r=this._calendarEl[e],a=t&&t.hours();return((n=r)instanceof Function||"[object Function]"===Object.prototype.toString.call(n))&&(r=r.apply(t)),r.replace("{}",a%12==1?"στη":"στις")},relativeTime:{future:"σε %s",past:"%s πριν",s:"λίγα δευτερόλεπτα",m:"ένα λεπτό",mm:"%d λεπτά",h:"μία ώρα",hh:"%d ώρες",d:"μία μέρα",dd:"%d μέρες",M:"ένας μήνας",MM:"%d μήνες",y:"ένας χρόνος",yy:"%d χρόνια"},dayOfMonthOrdinalParse:/\d{1,2}η/,ordinal:"%dη",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("en-au",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("en-ca",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"YYYY-MM-DD",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("en-gb",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("en-ie",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("en-nz",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("eo",{months:"januaro_februaro_marto_aprilo_majo_junio_julio_aŭgusto_septembro_oktobro_novembro_decembro".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aŭg_sep_okt_nov_dec".split("_"),weekdays:"dimanĉo_lundo_mardo_merkredo_ĵaŭdo_vendredo_sabato".split("_"),weekdaysShort:"dim_lun_mard_merk_ĵaŭ_ven_sab".split("_"),weekdaysMin:"di_lu_ma_me_ĵa_ve_sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D[-a de] MMMM, YYYY",LLL:"D[-a de] MMMM, YYYY HH:mm",LLLL:"dddd, [la] D[-a de] MMMM, YYYY HH:mm"},meridiemParse:/[ap]\.t\.m/i,isPM:function(e){return"p"===e.charAt(0).toLowerCase()},meridiem:function(e,t,n){return e>11?n?"p.t.m.":"P.T.M.":n?"a.t.m.":"A.T.M."},calendar:{sameDay:"[Hodiaŭ je] LT",nextDay:"[Morgaŭ je] LT",nextWeek:"dddd [je] LT",lastDay:"[Hieraŭ je] LT",lastWeek:"[pasinta] dddd [je] LT",sameElse:"L"},relativeTime:{future:"post %s",past:"antaŭ %s",s:"sekundoj",m:"minuto",mm:"%d minutoj",h:"horo",hh:"%d horoj",d:"tago",dd:"%d tagoj",M:"monato",MM:"%d monatoj",y:"jaro",yy:"%d jaroj"},dayOfMonthOrdinalParse:/\d{1,2}a/,ordinal:"%da",week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";var t="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),n="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_");e.defineLocale("es",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsParseExact:!0,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY H:mm",LLLL:"dddd, D [de] MMMM [de] YYYY H:mm"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";var t="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),n="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_");e.defineLocale("es-do",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsParseExact:!0,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY h:mm A",LLLL:"dddd, D [de] MMMM [de] YYYY h:mm A"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a={s:["mõne sekundi","mõni sekund","paar sekundit"],m:["ühe minuti","üks minut"],mm:[e+" minuti",e+" minutit"],h:["ühe tunni","tund aega","üks tund"],hh:[e+" tunni",e+" tundi"],d:["ühe päeva","üks päev"],M:["kuu aja","kuu aega","üks kuu"],MM:[e+" kuu",e+" kuud"],y:["ühe aasta","aasta","üks aasta"],yy:[e+" aasta",e+" aastat"]};return t?a[n][2]?a[n][2]:a[n][1]:r?a[n][0]:a[n][1]}e.defineLocale("et",{months:"jaanuar_veebruar_märts_aprill_mai_juuni_juuli_august_september_oktoober_november_detsember".split("_"),monthsShort:"jaan_veebr_märts_apr_mai_juuni_juuli_aug_sept_okt_nov_dets".split("_"),weekdays:"pühapäev_esmaspäev_teisipäev_kolmapäev_neljapäev_reede_laupäev".split("_"),weekdaysShort:"P_E_T_K_N_R_L".split("_"),weekdaysMin:"P_E_T_K_N_R_L".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[Täna,] LT",nextDay:"[Homme,] LT",nextWeek:"[Järgmine] dddd LT",lastDay:"[Eile,] LT",lastWeek:"[Eelmine] dddd LT",sameElse:"L"},relativeTime:{future:"%s pärast",past:"%s tagasi",s:t,m:t,mm:t,h:t,hh:t,d:t,dd:"%d päeva",M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("eu",{months:"urtarrila_otsaila_martxoa_apirila_maiatza_ekaina_uztaila_abuztua_iraila_urria_azaroa_abendua".split("_"),monthsShort:"urt._ots._mar._api._mai._eka._uzt._abu._ira._urr._aza._abe.".split("_"),monthsParseExact:!0,weekdays:"igandea_astelehena_asteartea_asteazkena_osteguna_ostirala_larunbata".split("_"),weekdaysShort:"ig._al._ar._az._og._ol._lr.".split("_"),weekdaysMin:"ig_al_ar_az_og_ol_lr".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY[ko] MMMM[ren] D[a]",LLL:"YYYY[ko] MMMM[ren] D[a] HH:mm",LLLL:"dddd, YYYY[ko] MMMM[ren] D[a] HH:mm",l:"YYYY-M-D",ll:"YYYY[ko] MMM D[a]",lll:"YYYY[ko] MMM D[a] HH:mm",llll:"ddd, YYYY[ko] MMM D[a] HH:mm"},calendar:{sameDay:"[gaur] LT[etan]",nextDay:"[bihar] LT[etan]",nextWeek:"dddd LT[etan]",lastDay:"[atzo] LT[etan]",lastWeek:"[aurreko] dddd LT[etan]",sameElse:"L"},relativeTime:{future:"%s barru",past:"duela %s",s:"segundo batzuk",m:"minutu bat",mm:"%d minutu",h:"ordu bat",hh:"%d ordu",d:"egun bat",dd:"%d egun",M:"hilabete bat",MM:"%d hilabete",y:"urte bat",yy:"%d urte"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={1:"۱",2:"۲",3:"۳",4:"۴",5:"۵",6:"۶",7:"۷",8:"۸",9:"۹",0:"۰"},n={"۱":"1","۲":"2","۳":"3","۴":"4","۵":"5","۶":"6","۷":"7","۸":"8","۹":"9","۰":"0"};e.defineLocale("fa",{months:"ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"),monthsShort:"ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"),weekdays:"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"),weekdaysShort:"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"),weekdaysMin:"ی_د_س_چ_پ_ج_ش".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},meridiemParse:/قبل از ظهر|بعد از ظهر/,isPM:function(e){return/بعد از ظهر/.test(e)},meridiem:function(e,t,n){return e<12?"قبل از ظهر":"بعد از ظهر"},calendar:{sameDay:"[امروز ساعت] LT",nextDay:"[فردا ساعت] LT",nextWeek:"dddd [ساعت] LT",lastDay:"[دیروز ساعت] LT",lastWeek:"dddd [پیش] [ساعت] LT",sameElse:"L"},relativeTime:{future:"در %s",past:"%s پیش",s:"چند ثانیه",m:"یک دقیقه",mm:"%d دقیقه",h:"یک ساعت",hh:"%d ساعت",d:"یک روز",dd:"%d روز",M:"یک ماه",MM:"%d ماه",y:"یک سال",yy:"%d سال"},preparse:function(e){return e.replace(/[۰-۹]/g,(function(e){return n[e]})).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]})).replace(/,/g,"،")},dayOfMonthOrdinalParse:/\d{1,2}م/,ordinal:"%dم",week:{dow:6,doy:12}})}(n(0))},function(e,t,n){!function(e){"use strict";var t="nolla yksi kaksi kolme neljä viisi kuusi seitsemän kahdeksan yhdeksän".split(" "),n=["nolla","yhden","kahden","kolmen","neljän","viiden","kuuden",t[7],t[8],t[9]];function r(e,r,a,o){var i="";switch(a){case"s":return o?"muutaman sekunnin":"muutama sekunti";case"m":return o?"minuutin":"minuutti";case"mm":i=o?"minuutin":"minuuttia";break;case"h":return o?"tunnin":"tunti";case"hh":i=o?"tunnin":"tuntia";break;case"d":return o?"päivän":"päivä";case"dd":i=o?"päivän":"päivää";break;case"M":return o?"kuukauden":"kuukausi";case"MM":i=o?"kuukauden":"kuukautta";break;case"y":return o?"vuoden":"vuosi";case"yy":i=o?"vuoden":"vuotta"}return i=function(e,r){return e<10?r?n[e]:t[e]:e}(e,o)+" "+i}e.defineLocale("fi",{months:"tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesäkuu_heinäkuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu".split("_"),monthsShort:"tammi_helmi_maalis_huhti_touko_kesä_heinä_elo_syys_loka_marras_joulu".split("_"),weekdays:"sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai".split("_"),weekdaysShort:"su_ma_ti_ke_to_pe_la".split("_"),weekdaysMin:"su_ma_ti_ke_to_pe_la".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD.MM.YYYY",LL:"Do MMMM[ta] YYYY",LLL:"Do MMMM[ta] YYYY, [klo] HH.mm",LLLL:"dddd, Do MMMM[ta] YYYY, [klo] HH.mm",l:"D.M.YYYY",ll:"Do MMM YYYY",lll:"Do MMM YYYY, [klo] HH.mm",llll:"ddd, Do MMM YYYY, [klo] HH.mm"},calendar:{sameDay:"[tänään] [klo] LT",nextDay:"[huomenna] [klo] LT",nextWeek:"dddd [klo] LT",lastDay:"[eilen] [klo] LT",lastWeek:"[viime] dddd[na] [klo] LT",sameElse:"L"},relativeTime:{future:"%s päästä",past:"%s sitten",s:r,m:r,mm:r,h:r,hh:r,d:r,dd:r,M:r,MM:r,y:r,yy:r},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("fo",{months:"januar_februar_mars_apríl_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"),weekdays:"sunnudagur_mánadagur_týsdagur_mikudagur_hósdagur_fríggjadagur_leygardagur".split("_"),weekdaysShort:"sun_mán_týs_mik_hós_frí_ley".split("_"),weekdaysMin:"su_má_tý_mi_hó_fr_le".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D. MMMM, YYYY HH:mm"},calendar:{sameDay:"[Í dag kl.] LT",nextDay:"[Í morgin kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[Í gjár kl.] LT",lastWeek:"[síðstu] dddd [kl] LT",sameElse:"L"},relativeTime:{future:"um %s",past:"%s síðani",s:"fá sekund",m:"ein minutt",mm:"%d minuttir",h:"ein tími",hh:"%d tímar",d:"ein dagur",dd:"%d dagar",M:"ein mánaði",MM:"%d mánaðir",y:"eitt ár",yy:"%d ár"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("fr",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),monthsParseExact:!0,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"Di_Lu_Ma_Me_Je_Ve_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd’hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(er|)/,ordinal:function(e,t){switch(t){case"D":return e+(1===e?"er":"");default:case"M":case"Q":case"DDD":case"d":return e+(1===e?"er":"e");case"w":case"W":return e+(1===e?"re":"e")}},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("fr-ca",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),monthsParseExact:!0,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"Di_Lu_Ma_Me_Je_Ve_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd’hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(er|e)/,ordinal:function(e,t){switch(t){default:case"M":case"Q":case"D":case"DDD":case"d":return e+(1===e?"er":"e");case"w":case"W":return e+(1===e?"re":"e")}}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("fr-ch",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),monthsParseExact:!0,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"Di_Lu_Ma_Me_Je_Ve_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd’hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(er|e)/,ordinal:function(e,t){switch(t){default:case"M":case"Q":case"D":case"DDD":case"d":return e+(1===e?"er":"e");case"w":case"W":return e+(1===e?"re":"e")}},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";var t="jan._feb._mrt._apr._mai_jun._jul._aug._sep._okt._nov._des.".split("_"),n="jan_feb_mrt_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_");e.defineLocale("fy",{months:"jannewaris_febrewaris_maart_april_maaie_juny_july_augustus_septimber_oktober_novimber_desimber".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsParseExact:!0,weekdays:"snein_moandei_tiisdei_woansdei_tongersdei_freed_sneon".split("_"),weekdaysShort:"si._mo._ti._wo._to._fr._so.".split("_"),weekdaysMin:"Si_Mo_Ti_Wo_To_Fr_So".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[hjoed om] LT",nextDay:"[moarn om] LT",nextWeek:"dddd [om] LT",lastDay:"[juster om] LT",lastWeek:"[ôfrûne] dddd [om] LT",sameElse:"L"},relativeTime:{future:"oer %s",past:"%s lyn",s:"in pear sekonden",m:"ien minút",mm:"%d minuten",h:"ien oere",hh:"%d oeren",d:"ien dei",dd:"%d dagen",M:"ien moanne",MM:"%d moannen",y:"ien jier",yy:"%d jierren"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("gd",{months:["Am Faoilleach","An Gearran","Am Màrt","An Giblean","An Cèitean","An t-Ògmhios","An t-Iuchar","An Lùnastal","An t-Sultain","An Dàmhair","An t-Samhain","An Dùbhlachd"],monthsShort:["Faoi","Gear","Màrt","Gibl","Cèit","Ògmh","Iuch","Lùn","Sult","Dàmh","Samh","Dùbh"],monthsParseExact:!0,weekdays:["Didòmhnaich","Diluain","Dimàirt","Diciadain","Diardaoin","Dihaoine","Disathairne"],weekdaysShort:["Did","Dil","Dim","Dic","Dia","Dih","Dis"],weekdaysMin:["Dò","Lu","Mà","Ci","Ar","Ha","Sa"],longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[An-diugh aig] LT",nextDay:"[A-màireach aig] LT",nextWeek:"dddd [aig] LT",lastDay:"[An-dè aig] LT",lastWeek:"dddd [seo chaidh] [aig] LT",sameElse:"L"},relativeTime:{future:"ann an %s",past:"bho chionn %s",s:"beagan diogan",m:"mionaid",mm:"%d mionaidean",h:"uair",hh:"%d uairean",d:"latha",dd:"%d latha",M:"mìos",MM:"%d mìosan",y:"bliadhna",yy:"%d bliadhna"},dayOfMonthOrdinalParse:/\d{1,2}(d|na|mh)/,ordinal:function(e){return e+(1===e?"d":e%10==2?"na":"mh")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("gl",{months:"xaneiro_febreiro_marzo_abril_maio_xuño_xullo_agosto_setembro_outubro_novembro_decembro".split("_"),monthsShort:"xan._feb._mar._abr._mai._xuñ._xul._ago._set._out._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"domingo_luns_martes_mércores_xoves_venres_sábado".split("_"),weekdaysShort:"dom._lun._mar._mér._xov._ven._sáb.".split("_"),weekdaysMin:"do_lu_ma_mé_xo_ve_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY H:mm",LLLL:"dddd, D [de] MMMM [de] YYYY H:mm"},calendar:{sameDay:function(){return"[hoxe "+(1!==this.hours()?"ás":"á")+"] LT"},nextDay:function(){return"[mañá "+(1!==this.hours()?"ás":"á")+"] LT"},nextWeek:function(){return"dddd ["+(1!==this.hours()?"ás":"a")+"] LT"},lastDay:function(){return"[onte "+(1!==this.hours()?"á":"a")+"] LT"},lastWeek:function(){return"[o] dddd [pasado "+(1!==this.hours()?"ás":"a")+"] LT"},sameElse:"L"},relativeTime:{future:function(e){return 0===e.indexOf("un")?"n"+e:"en "+e},past:"hai %s",s:"uns segundos",m:"un minuto",mm:"%d minutos",h:"unha hora",hh:"%d horas",d:"un día",dd:"%d días",M:"un mes",MM:"%d meses",y:"un ano",yy:"%d anos"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a={s:["thodde secondanim","thodde second"],m:["eka mintan","ek minute"],mm:[e+" mintanim",e+" mintam"],h:["eka horan","ek hor"],hh:[e+" horanim",e+" hor"],d:["eka disan","ek dis"],dd:[e+" disanim",e+" dis"],M:["eka mhoinean","ek mhoino"],MM:[e+" mhoineanim",e+" mhoine"],y:["eka vorsan","ek voros"],yy:[e+" vorsanim",e+" vorsam"]};return t?a[n][0]:a[n][1]}e.defineLocale("gom-latn",{months:"Janer_Febrer_Mars_Abril_Mai_Jun_Julai_Agost_Setembr_Otubr_Novembr_Dezembr".split("_"),monthsShort:"Jan._Feb._Mars_Abr._Mai_Jun_Jul._Ago._Set._Otu._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Aitar_Somar_Mongllar_Budvar_Brestar_Sukrar_Son'var".split("_"),weekdaysShort:"Ait._Som._Mon._Bud._Bre._Suk._Son.".split("_"),weekdaysMin:"Ai_Sm_Mo_Bu_Br_Su_Sn".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"A h:mm [vazta]",LTS:"A h:mm:ss [vazta]",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY A h:mm [vazta]",LLLL:"dddd, MMMM[achea] Do, YYYY, A h:mm [vazta]",llll:"ddd, D MMM YYYY, A h:mm [vazta]"},calendar:{sameDay:"[Aiz] LT",nextDay:"[Faleam] LT",nextWeek:"[Ieta to] dddd[,] LT",lastDay:"[Kal] LT",lastWeek:"[Fatlo] dddd[,] LT",sameElse:"L"},relativeTime:{future:"%s",past:"%s adim",s:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}(er)/,ordinal:function(e,t){switch(t){case"D":return e+"er";default:case"M":case"Q":case"DDD":case"d":case"w":case"W":return e}},week:{dow:1,doy:4},meridiemParse:/rati|sokalli|donparam|sanje/,meridiemHour:function(e,t){return 12===e&&(e=0),"rati"===t?e<4?e:e+12:"sokalli"===t?e:"donparam"===t?e>12?e:e+12:"sanje"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"rati":e<12?"sokalli":e<16?"donparam":e<20?"sanje":"rati"}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("he",{months:"ינואר_פברואר_מרץ_אפריל_מאי_יוני_יולי_אוגוסט_ספטמבר_אוקטובר_נובמבר_דצמבר".split("_"),monthsShort:"ינו׳_פבר׳_מרץ_אפר׳_מאי_יוני_יולי_אוג׳_ספט׳_אוק׳_נוב׳_דצמ׳".split("_"),weekdays:"ראשון_שני_שלישי_רביעי_חמישי_שישי_שבת".split("_"),weekdaysShort:"א׳_ב׳_ג׳_ד׳_ה׳_ו׳_ש׳".split("_"),weekdaysMin:"א_ב_ג_ד_ה_ו_ש".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [ב]MMMM YYYY",LLL:"D [ב]MMMM YYYY HH:mm",LLLL:"dddd, D [ב]MMMM YYYY HH:mm",l:"D/M/YYYY",ll:"D MMM YYYY",lll:"D MMM YYYY HH:mm",llll:"ddd, D MMM YYYY HH:mm"},calendar:{sameDay:"[היום ב־]LT",nextDay:"[מחר ב־]LT",nextWeek:"dddd [בשעה] LT",lastDay:"[אתמול ב־]LT",lastWeek:"[ביום] dddd [האחרון בשעה] LT",sameElse:"L"},relativeTime:{future:"בעוד %s",past:"לפני %s",s:"מספר שניות",m:"דקה",mm:"%d דקות",h:"שעה",hh:function(e){return 2===e?"שעתיים":e+" שעות"},d:"יום",dd:function(e){return 2===e?"יומיים":e+" ימים"},M:"חודש",MM:function(e){return 2===e?"חודשיים":e+" חודשים"},y:"שנה",yy:function(e){return 2===e?"שנתיים":e%10==0&&10!==e?e+" שנה":e+" שנים"}},meridiemParse:/אחה"צ|לפנה"צ|אחרי הצהריים|לפני הצהריים|לפנות בוקר|בבוקר|בערב/i,isPM:function(e){return/^(אחה"צ|אחרי הצהריים|בערב)$/.test(e)},meridiem:function(e,t,n){return e<5?"לפנות בוקר":e<10?"בבוקר":e<12?n?'לפנה"צ':"לפני הצהריים":e<18?n?'אחה"צ':"אחרי הצהריים":"בערב"}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},n={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"};e.defineLocale("hi",{months:"जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर".split("_"),monthsShort:"जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.".split("_"),monthsParseExact:!0,weekdays:"रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"),weekdaysShort:"रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि".split("_"),weekdaysMin:"र_सो_मं_बु_गु_शु_श".split("_"),longDateFormat:{LT:"A h:mm बजे",LTS:"A h:mm:ss बजे",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm बजे",LLLL:"dddd, D MMMM YYYY, A h:mm बजे"},calendar:{sameDay:"[आज] LT",nextDay:"[कल] LT",nextWeek:"dddd, LT",lastDay:"[कल] LT",lastWeek:"[पिछले] dddd, LT",sameElse:"L"},relativeTime:{future:"%s में",past:"%s पहले",s:"कुछ ही क्षण",m:"एक मिनट",mm:"%d मिनट",h:"एक घंटा",hh:"%d घंटे",d:"एक दिन",dd:"%d दिन",M:"एक महीने",MM:"%d महीने",y:"एक वर्ष",yy:"%d वर्ष"},preparse:function(e){return e.replace(/[१२३४५६७८९०]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/रात|सुबह|दोपहर|शाम/,meridiemHour:function(e,t){return 12===e&&(e=0),"रात"===t?e<4?e:e+12:"सुबह"===t?e:"दोपहर"===t?e>=10?e:e+12:"शाम"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"रात":e<10?"सुबह":e<17?"दोपहर":e<20?"शाम":"रात"},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";function t(e,t,n){var r=e+" ";switch(n){case"m":return t?"jedna minuta":"jedne minute";case"mm":return r+=1===e?"minuta":2===e||3===e||4===e?"minute":"minuta";case"h":return t?"jedan sat":"jednog sata";case"hh":return r+=1===e?"sat":2===e||3===e||4===e?"sata":"sati";case"dd":return r+=1===e?"dan":"dana";case"MM":return r+=1===e?"mjesec":2===e||3===e||4===e?"mjeseca":"mjeseci";case"yy":return r+=1===e?"godina":2===e||3===e||4===e?"godine":"godina"}}e.defineLocale("hr",{months:{format:"siječnja_veljače_ožujka_travnja_svibnja_lipnja_srpnja_kolovoza_rujna_listopada_studenoga_prosinca".split("_"),standalone:"siječanj_veljača_ožujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac".split("_")},monthsShort:"sij._velj._ožu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[jučer u] LT",lastWeek:function(){switch(this.day()){case 0:case 3:return"[prošlu] dddd [u] LT";case 6:return"[prošle] [subote] [u] LT";case 1:case 2:case 4:case 5:return"[prošli] dddd [u] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"par sekundi",m:t,mm:t,h:t,hh:t,d:"dan",dd:t,M:"mjesec",MM:t,y:"godinu",yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";var t="vasárnap hétfőn kedden szerdán csütörtökön pénteken szombaton".split(" ");function n(e,t,n,r){var a=e;switch(n){case"s":return r||t?"néhány másodperc":"néhány másodperce";case"m":return"egy"+(r||t?" perc":" perce");case"mm":return a+(r||t?" perc":" perce");case"h":return"egy"+(r||t?" óra":" órája");case"hh":return a+(r||t?" óra":" órája");case"d":return"egy"+(r||t?" nap":" napja");case"dd":return a+(r||t?" nap":" napja");case"M":return"egy"+(r||t?" hónap":" hónapja");case"MM":return a+(r||t?" hónap":" hónapja");case"y":return"egy"+(r||t?" év":" éve");case"yy":return a+(r||t?" év":" éve")}return""}function r(e){return(e?"":"[múlt] ")+"["+t[this.day()]+"] LT[-kor]"}e.defineLocale("hu",{months:"január_február_március_április_május_június_július_augusztus_szeptember_október_november_december".split("_"),monthsShort:"jan_feb_márc_ápr_máj_jún_júl_aug_szept_okt_nov_dec".split("_"),weekdays:"vasárnap_hétfő_kedd_szerda_csütörtök_péntek_szombat".split("_"),weekdaysShort:"vas_hét_kedd_sze_csüt_pén_szo".split("_"),weekdaysMin:"v_h_k_sze_cs_p_szo".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"YYYY.MM.DD.",LL:"YYYY. MMMM D.",LLL:"YYYY. MMMM D. H:mm",LLLL:"YYYY. MMMM D., dddd H:mm"},meridiemParse:/de|du/i,isPM:function(e){return"u"===e.charAt(1).toLowerCase()},meridiem:function(e,t,n){return e<12?!0===n?"de":"DE":!0===n?"du":"DU"},calendar:{sameDay:"[ma] LT[-kor]",nextDay:"[holnap] LT[-kor]",nextWeek:function(){return r.call(this,!0)},lastDay:"[tegnap] LT[-kor]",lastWeek:function(){return r.call(this,!1)},sameElse:"L"},relativeTime:{future:"%s múlva",past:"%s",s:n,m:n,mm:n,h:n,hh:n,d:n,dd:n,M:n,MM:n,y:n,yy:n},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("hy-am",{months:{format:"հունվարի_փետրվարի_մարտի_ապրիլի_մայիսի_հունիսի_հուլիսի_օգոստոսի_սեպտեմբերի_հոկտեմբերի_նոյեմբերի_դեկտեմբերի".split("_"),standalone:"հունվար_փետրվար_մարտ_ապրիլ_մայիս_հունիս_հուլիս_օգոստոս_սեպտեմբեր_հոկտեմբեր_նոյեմբեր_դեկտեմբեր".split("_")},monthsShort:"հնվ_փտր_մրտ_ապր_մյս_հնս_հլս_օգս_սպտ_հկտ_նմբ_դկտ".split("_"),weekdays:"կիրակի_երկուշաբթի_երեքշաբթի_չորեքշաբթի_հինգշաբթի_ուրբաթ_շաբաթ".split("_"),weekdaysShort:"կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ".split("_"),weekdaysMin:"կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY թ.",LLL:"D MMMM YYYY թ., HH:mm",LLLL:"dddd, D MMMM YYYY թ., HH:mm"},calendar:{sameDay:"[այսօր] LT",nextDay:"[վաղը] LT",lastDay:"[երեկ] LT",nextWeek:function(){return"dddd [օրը ժամը] LT"},lastWeek:function(){return"[անցած] dddd [օրը ժամը] LT"},sameElse:"L"},relativeTime:{future:"%s հետո",past:"%s առաջ",s:"մի քանի վայրկյան",m:"րոպե",mm:"%d րոպե",h:"ժամ",hh:"%d ժամ",d:"օր",dd:"%d օր",M:"ամիս",MM:"%d ամիս",y:"տարի",yy:"%d տարի"},meridiemParse:/գիշերվա|առավոտվա|ցերեկվա|երեկոյան/,isPM:function(e){return/^(ցերեկվա|երեկոյան)$/.test(e)},meridiem:function(e){return e<4?"գիշերվա":e<12?"առավոտվա":e<17?"ցերեկվա":"երեկոյան"},dayOfMonthOrdinalParse:/\d{1,2}|\d{1,2}-(ին|րդ)/,ordinal:function(e,t){switch(t){case"DDD":case"w":case"W":case"DDDo":return 1===e?e+"-ին":e+"-րդ";default:return e}},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("id",{months:"Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember".split("_"),monthsShort:"Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nov_Des".split("_"),weekdays:"Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu".split("_"),weekdaysShort:"Min_Sen_Sel_Rab_Kam_Jum_Sab".split("_"),weekdaysMin:"Mg_Sn_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|siang|sore|malam/,meridiemHour:function(e,t){return 12===e&&(e=0),"pagi"===t?e:"siang"===t?e>=11?e:e+12:"sore"===t||"malam"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"pagi":e<15?"siang":e<19?"sore":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Besok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kemarin pukul] LT",lastWeek:"dddd [lalu pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lalu",s:"beberapa detik",m:"semenit",mm:"%d menit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";function t(e){return e%100==11||e%10!=1}function n(e,n,r,a){var o=e+" ";switch(r){case"s":return n||a?"nokkrar sekúndur":"nokkrum sekúndum";case"m":return n?"mínúta":"mínútu";case"mm":return t(e)?o+(n||a?"mínútur":"mínútum"):n?o+"mínúta":o+"mínútu";case"hh":return t(e)?o+(n||a?"klukkustundir":"klukkustundum"):o+"klukkustund";case"d":return n?"dagur":a?"dag":"degi";case"dd":return t(e)?n?o+"dagar":o+(a?"daga":"dögum"):n?o+"dagur":o+(a?"dag":"degi");case"M":return n?"mánuður":a?"mánuð":"mánuði";case"MM":return t(e)?n?o+"mánuðir":o+(a?"mánuði":"mánuðum"):n?o+"mánuður":o+(a?"mánuð":"mánuði");case"y":return n||a?"ár":"ári";case"yy":return t(e)?o+(n||a?"ár":"árum"):o+(n||a?"ár":"ári")}}e.defineLocale("is",{months:"janúar_febrúar_mars_apríl_maí_júní_júlí_ágúst_september_október_nóvember_desember".split("_"),monthsShort:"jan_feb_mar_apr_maí_jún_júl_ágú_sep_okt_nóv_des".split("_"),weekdays:"sunnudagur_mánudagur_þriðjudagur_miðvikudagur_fimmtudagur_föstudagur_laugardagur".split("_"),weekdaysShort:"sun_mán_þri_mið_fim_fös_lau".split("_"),weekdaysMin:"Su_Má_Þr_Mi_Fi_Fö_La".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] H:mm",LLLL:"dddd, D. MMMM YYYY [kl.] H:mm"},calendar:{sameDay:"[í dag kl.] LT",nextDay:"[á morgun kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[í gær kl.] LT",lastWeek:"[síðasta] dddd [kl.] LT",sameElse:"L"},relativeTime:{future:"eftir %s",past:"fyrir %s síðan",s:n,m:n,mm:n,h:"klukkustund",hh:n,d:n,dd:n,M:n,MM:n,y:n,yy:n},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("it",{months:"gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre".split("_"),monthsShort:"gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic".split("_"),weekdays:"domenica_lunedì_martedì_mercoledì_giovedì_venerdì_sabato".split("_"),weekdaysShort:"dom_lun_mar_mer_gio_ven_sab".split("_"),weekdaysMin:"do_lu_ma_me_gi_ve_sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Oggi alle] LT",nextDay:"[Domani alle] LT",nextWeek:"dddd [alle] LT",lastDay:"[Ieri alle] LT",lastWeek:function(){switch(this.day()){case 0:return"[la scorsa] dddd [alle] LT";default:return"[lo scorso] dddd [alle] LT"}},sameElse:"L"},relativeTime:{future:function(e){return(/^[0-9].+$/.test(e)?"tra":"in")+" "+e},past:"%s fa",s:"alcuni secondi",m:"un minuto",mm:"%d minuti",h:"un'ora",hh:"%d ore",d:"un giorno",dd:"%d giorni",M:"un mese",MM:"%d mesi",y:"un anno",yy:"%d anni"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("ja",{months:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日".split("_"),weekdaysShort:"日_月_火_水_木_金_土".split("_"),weekdaysMin:"日_月_火_水_木_金_土".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日 HH:mm",LLLL:"YYYY年M月D日 HH:mm dddd",l:"YYYY/MM/DD",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日 HH:mm dddd"},meridiemParse:/午前|午後/i,isPM:function(e){return"午後"===e},meridiem:function(e,t,n){return e<12?"午前":"午後"},calendar:{sameDay:"[今日] LT",nextDay:"[明日] LT",nextWeek:"[来週]dddd LT",lastDay:"[昨日] LT",lastWeek:"[前週]dddd LT",sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}日/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";default:return e}},relativeTime:{future:"%s後",past:"%s前",s:"数秒",m:"1分",mm:"%d分",h:"1時間",hh:"%d時間",d:"1日",dd:"%d日",M:"1ヶ月",MM:"%dヶ月",y:"1年",yy:"%d年"}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("jv",{months:"Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_Nopember_Desember".split("_"),monthsShort:"Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nop_Des".split("_"),weekdays:"Minggu_Senen_Seloso_Rebu_Kemis_Jemuwah_Septu".split("_"),weekdaysShort:"Min_Sen_Sel_Reb_Kem_Jem_Sep".split("_"),weekdaysMin:"Mg_Sn_Sl_Rb_Km_Jm_Sp".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/enjing|siyang|sonten|ndalu/,meridiemHour:function(e,t){return 12===e&&(e=0),"enjing"===t?e:"siyang"===t?e>=11?e:e+12:"sonten"===t||"ndalu"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"enjing":e<15?"siyang":e<19?"sonten":"ndalu"},calendar:{sameDay:"[Dinten puniko pukul] LT",nextDay:"[Mbenjang pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kala wingi pukul] LT",lastWeek:"dddd [kepengker pukul] LT",sameElse:"L"},relativeTime:{future:"wonten ing %s",past:"%s ingkang kepengker",s:"sawetawis detik",m:"setunggal menit",mm:"%d menit",h:"setunggal jam",hh:"%d jam",d:"sedinten",dd:"%d dinten",M:"sewulan",MM:"%d wulan",y:"setaun",yy:"%d taun"},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("ka",{months:{standalone:"იანვარი_თებერვალი_მარტი_აპრილი_მაისი_ივნისი_ივლისი_აგვისტო_სექტემბერი_ოქტომბერი_ნოემბერი_დეკემბერი".split("_"),format:"იანვარს_თებერვალს_მარტს_აპრილის_მაისს_ივნისს_ივლისს_აგვისტს_სექტემბერს_ოქტომბერს_ნოემბერს_დეკემბერს".split("_")},monthsShort:"იან_თებ_მარ_აპრ_მაი_ივნ_ივლ_აგვ_სექ_ოქტ_ნოე_დეკ".split("_"),weekdays:{standalone:"კვირა_ორშაბათი_სამშაბათი_ოთხშაბათი_ხუთშაბათი_პარასკევი_შაბათი".split("_"),format:"კვირას_ორშაბათს_სამშაბათს_ოთხშაბათს_ხუთშაბათს_პარასკევს_შაბათს".split("_"),isFormat:/(წინა|შემდეგ)/},weekdaysShort:"კვი_ორშ_სამ_ოთხ_ხუთ_პარ_შაბ".split("_"),weekdaysMin:"კვ_ორ_სა_ოთ_ხუ_პა_შა".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[დღეს] LT[-ზე]",nextDay:"[ხვალ] LT[-ზე]",lastDay:"[გუშინ] LT[-ზე]",nextWeek:"[შემდეგ] dddd LT[-ზე]",lastWeek:"[წინა] dddd LT-ზე",sameElse:"L"},relativeTime:{future:function(e){return/(წამი|წუთი|საათი|წელი)/.test(e)?e.replace(/ი$/,"ში"):e+"ში"},past:function(e){return/(წამი|წუთი|საათი|დღე|თვე)/.test(e)?e.replace(/(ი|ე)$/,"ის უკან"):/წელი/.test(e)?e.replace(/წელი$/,"წლის უკან"):void 0},s:"რამდენიმე წამი",m:"წუთი",mm:"%d წუთი",h:"საათი",hh:"%d საათი",d:"დღე",dd:"%d დღე",M:"თვე",MM:"%d თვე",y:"წელი",yy:"%d წელი"},dayOfMonthOrdinalParse:/0|1-ლი|მე-\d{1,2}|\d{1,2}-ე/,ordinal:function(e){return 0===e?e:1===e?e+"-ლი":e<20||e<=100&&e%20==0||e%100==0?"მე-"+e:e+"-ე"},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={0:"-ші",1:"-ші",2:"-ші",3:"-ші",4:"-ші",5:"-ші",6:"-шы",7:"-ші",8:"-ші",9:"-шы",10:"-шы",20:"-шы",30:"-шы",40:"-шы",50:"-ші",60:"-шы",70:"-ші",80:"-ші",90:"-шы",100:"-ші"};e.defineLocale("kk",{months:"қаңтар_ақпан_наурыз_сәуір_мамыр_маусым_шілде_тамыз_қыркүйек_қазан_қараша_желтоқсан".split("_"),monthsShort:"қаң_ақп_нау_сәу_мам_мау_шіл_там_қыр_қаз_қар_жел".split("_"),weekdays:"жексенбі_дүйсенбі_сейсенбі_сәрсенбі_бейсенбі_жұма_сенбі".split("_"),weekdaysShort:"жек_дүй_сей_сәр_бей_жұм_сен".split("_"),weekdaysMin:"жк_дй_сй_ср_бй_жм_сн".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Бүгін сағат] LT",nextDay:"[Ертең сағат] LT",nextWeek:"dddd [сағат] LT",lastDay:"[Кеше сағат] LT",lastWeek:"[Өткен аптаның] dddd [сағат] LT",sameElse:"L"},relativeTime:{future:"%s ішінде",past:"%s бұрын",s:"бірнеше секунд",m:"бір минут",mm:"%d минут",h:"бір сағат",hh:"%d сағат",d:"бір күн",dd:"%d күн",M:"бір ай",MM:"%d ай",y:"бір жыл",yy:"%d жыл"},dayOfMonthOrdinalParse:/\d{1,2}-(ші|шы)/,ordinal:function(e){return e+(t[e]||t[e%10]||t[e>=100?100:null])},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("km",{months:"មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ".split("_"),monthsShort:"មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ".split("_"),weekdays:"អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍".split("_"),weekdaysShort:"អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍".split("_"),weekdaysMin:"អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[ថ្ងៃនេះ ម៉ោង] LT",nextDay:"[ស្អែក ម៉ោង] LT",nextWeek:"dddd [ម៉ោង] LT",lastDay:"[ម្សិលមិញ ម៉ោង] LT",lastWeek:"dddd [សប្តាហ៍មុន] [ម៉ោង] LT",sameElse:"L"},relativeTime:{future:"%sទៀត",past:"%sមុន",s:"ប៉ុន្មានវិនាទី",m:"មួយនាទី",mm:"%d នាទី",h:"មួយម៉ោង",hh:"%d ម៉ោង",d:"មួយថ្ងៃ",dd:"%d ថ្ងៃ",M:"មួយខែ",MM:"%d ខែ",y:"មួយឆ្នាំ",yy:"%d ឆ្នាំ"},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={1:"೧",2:"೨",3:"೩",4:"೪",5:"೫",6:"೬",7:"೭",8:"೮",9:"೯",0:"೦"},n={"೧":"1","೨":"2","೩":"3","೪":"4","೫":"5","೬":"6","೭":"7","೮":"8","೯":"9","೦":"0"};e.defineLocale("kn",{months:"ಜನವರಿ_ಫೆಬ್ರವರಿ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂಬರ್_ಅಕ್ಟೋಬರ್_ನವೆಂಬರ್_ಡಿಸೆಂಬರ್".split("_"),monthsShort:"ಜನ_ಫೆಬ್ರ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂಬ_ಅಕ್ಟೋಬ_ನವೆಂಬ_ಡಿಸೆಂಬ".split("_"),monthsParseExact:!0,weekdays:"ಭಾನುವಾರ_ಸೋಮವಾರ_ಮಂಗಳವಾರ_ಬುಧವಾರ_ಗುರುವಾರ_ಶುಕ್ರವಾರ_ಶನಿವಾರ".split("_"),weekdaysShort:"ಭಾನು_ಸೋಮ_ಮಂಗಳ_ಬುಧ_ಗುರು_ಶುಕ್ರ_ಶನಿ".split("_"),weekdaysMin:"ಭಾ_ಸೋ_ಮಂ_ಬು_ಗು_ಶು_ಶ".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm",LLLL:"dddd, D MMMM YYYY, A h:mm"},calendar:{sameDay:"[ಇಂದು] LT",nextDay:"[ನಾಳೆ] LT",nextWeek:"dddd, LT",lastDay:"[ನಿನ್ನೆ] LT",lastWeek:"[ಕೊನೆಯ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s ನಂತರ",past:"%s ಹಿಂದೆ",s:"ಕೆಲವು ಕ್ಷಣಗಳು",m:"ಒಂದು ನಿಮಿಷ",mm:"%d ನಿಮಿಷ",h:"ಒಂದು ಗಂಟೆ",hh:"%d ಗಂಟೆ",d:"ಒಂದು ದಿನ",dd:"%d ದಿನ",M:"ಒಂದು ತಿಂಗಳು",MM:"%d ತಿಂಗಳು",y:"ಒಂದು ವರ್ಷ",yy:"%d ವರ್ಷ"},preparse:function(e){return e.replace(/[೧೨೩೪೫೬೭೮೯೦]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/ರಾತ್ರಿ|ಬೆಳಿಗ್ಗೆ|ಮಧ್ಯಾಹ್ನ|ಸಂಜೆ/,meridiemHour:function(e,t){return 12===e&&(e=0),"ರಾತ್ರಿ"===t?e<4?e:e+12:"ಬೆಳಿಗ್ಗೆ"===t?e:"ಮಧ್ಯಾಹ್ನ"===t?e>=10?e:e+12:"ಸಂಜೆ"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"ರಾತ್ರಿ":e<10?"ಬೆಳಿಗ್ಗೆ":e<17?"ಮಧ್ಯಾಹ್ನ":e<20?"ಸಂಜೆ":"ರಾತ್ರಿ"},dayOfMonthOrdinalParse:/\d{1,2}(ನೇ)/,ordinal:function(e){return e+"ನೇ"},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("ko",{months:"1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),monthsShort:"1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),weekdays:"일요일_월요일_화요일_수요일_목요일_금요일_토요일".split("_"),weekdaysShort:"일_월_화_수_목_금_토".split("_"),weekdaysMin:"일_월_화_수_목_금_토".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"YYYY.MM.DD",LL:"YYYY년 MMMM D일",LLL:"YYYY년 MMMM D일 A h:mm",LLLL:"YYYY년 MMMM D일 dddd A h:mm",l:"YYYY.MM.DD",ll:"YYYY년 MMMM D일",lll:"YYYY년 MMMM D일 A h:mm",llll:"YYYY년 MMMM D일 dddd A h:mm"},calendar:{sameDay:"오늘 LT",nextDay:"내일 LT",nextWeek:"dddd LT",lastDay:"어제 LT",lastWeek:"지난주 dddd LT",sameElse:"L"},relativeTime:{future:"%s 후",past:"%s 전",s:"몇 초",ss:"%d초",m:"1분",mm:"%d분",h:"한 시간",hh:"%d시간",d:"하루",dd:"%d일",M:"한 달",MM:"%d달",y:"일 년",yy:"%d년"},dayOfMonthOrdinalParse:/\d{1,2}일/,ordinal:"%d일",meridiemParse:/오전|오후/,isPM:function(e){return"오후"===e},meridiem:function(e,t,n){return e<12?"오전":"오후"}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={0:"-чү",1:"-чи",2:"-чи",3:"-чү",4:"-чү",5:"-чи",6:"-чы",7:"-чи",8:"-чи",9:"-чу",10:"-чу",20:"-чы",30:"-чу",40:"-чы",50:"-чү",60:"-чы",70:"-чи",80:"-чи",90:"-чу",100:"-чү"};e.defineLocale("ky",{months:"январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_"),monthsShort:"янв_фев_март_апр_май_июнь_июль_авг_сен_окт_ноя_дек".split("_"),weekdays:"Жекшемби_Дүйшөмбү_Шейшемби_Шаршемби_Бейшемби_Жума_Ишемби".split("_"),weekdaysShort:"Жек_Дүй_Шей_Шар_Бей_Жум_Ише".split("_"),weekdaysMin:"Жк_Дй_Шй_Шр_Бй_Жм_Иш".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Бүгүн саат] LT",nextDay:"[Эртең саат] LT",nextWeek:"dddd [саат] LT",lastDay:"[Кече саат] LT",lastWeek:"[Өткен аптанын] dddd [күнү] [саат] LT",sameElse:"L"},relativeTime:{future:"%s ичинде",past:"%s мурун",s:"бирнече секунд",m:"бир мүнөт",mm:"%d мүнөт",h:"бир саат",hh:"%d саат",d:"бир күн",dd:"%d күн",M:"бир ай",MM:"%d ай",y:"бир жыл",yy:"%d жыл"},dayOfMonthOrdinalParse:/\d{1,2}-(чи|чы|чү|чу)/,ordinal:function(e){return e+(t[e]||t[e%10]||t[e>=100?100:null])},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a={m:["eng Minutt","enger Minutt"],h:["eng Stonn","enger Stonn"],d:["een Dag","engem Dag"],M:["ee Mount","engem Mount"],y:["ee Joer","engem Joer"]};return t?a[n][0]:a[n][1]}function n(e){if(e=parseInt(e,10),isNaN(e))return!1;if(e<0)return!0;if(e<10)return 4<=e&&e<=7;if(e<100){var t=e%10;return n(0===t?e/10:t)}if(e<1e4){for(;e>=10;)e/=10;return n(e)}return n(e/=1e3)}e.defineLocale("lb",{months:"Januar_Februar_Mäerz_Abrëll_Mee_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Febr._Mrz._Abr._Mee_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonndeg_Méindeg_Dënschdeg_Mëttwoch_Donneschdeg_Freideg_Samschdeg".split("_"),weekdaysShort:"So._Mé._Dë._Më._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mé_Dë_Më_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm [Auer]",LTS:"H:mm:ss [Auer]",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm [Auer]",LLLL:"dddd, D. MMMM YYYY H:mm [Auer]"},calendar:{sameDay:"[Haut um] LT",sameElse:"L",nextDay:"[Muer um] LT",nextWeek:"dddd [um] LT",lastDay:"[Gëschter um] LT",lastWeek:function(){switch(this.day()){case 2:case 4:return"[Leschten] dddd [um] LT";default:return"[Leschte] dddd [um] LT"}}},relativeTime:{future:function(e){return n(e.substr(0,e.indexOf(" ")))?"a "+e:"an "+e},past:function(e){return n(e.substr(0,e.indexOf(" ")))?"viru "+e:"virun "+e},s:"e puer Sekonnen",m:t,mm:"%d Minutten",h:t,hh:"%d Stonnen",d:t,dd:"%d Deeg",M:t,MM:"%d Méint",y:t,yy:"%d Joer"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("lo",{months:"ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ".split("_"),monthsShort:"ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ".split("_"),weekdays:"ອາທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ".split("_"),weekdaysShort:"ທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ".split("_"),weekdaysMin:"ທ_ຈ_ອຄ_ພ_ພຫ_ສກ_ສ".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"ວັນdddd D MMMM YYYY HH:mm"},meridiemParse:/ຕອນເຊົ້າ|ຕອນແລງ/,isPM:function(e){return"ຕອນແລງ"===e},meridiem:function(e,t,n){return e<12?"ຕອນເຊົ້າ":"ຕອນແລງ"},calendar:{sameDay:"[ມື້ນີ້ເວລາ] LT",nextDay:"[ມື້ອື່ນເວລາ] LT",nextWeek:"[ວັນ]dddd[ໜ້າເວລາ] LT",lastDay:"[ມື້ວານນີ້ເວລາ] LT",lastWeek:"[ວັນ]dddd[ແລ້ວນີ້ເວລາ] LT",sameElse:"L"},relativeTime:{future:"ອີກ %s",past:"%sຜ່ານມາ",s:"ບໍ່ເທົ່າໃດວິນາທີ",m:"1 ນາທີ",mm:"%d ນາທີ",h:"1 ຊົ່ວໂມງ",hh:"%d ຊົ່ວໂມງ",d:"1 ມື້",dd:"%d ມື້",M:"1 ເດືອນ",MM:"%d ເດືອນ",y:"1 ປີ",yy:"%d ປີ"},dayOfMonthOrdinalParse:/(ທີ່)\d{1,2}/,ordinal:function(e){return"ທີ່"+e}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={m:"minutė_minutės_minutę",mm:"minutės_minučių_minutes",h:"valanda_valandos_valandą",hh:"valandos_valandų_valandas",d:"diena_dienos_dieną",dd:"dienos_dienų_dienas",M:"mėnuo_mėnesio_mėnesį",MM:"mėnesiai_mėnesių_mėnesius",y:"metai_metų_metus",yy:"metai_metų_metus"};function n(e,t,n,r){return t?a(n)[0]:r?a(n)[1]:a(n)[2]}function r(e){return e%10==0||e>10&&e<20}function a(e){return t[e].split("_")}function o(e,t,o,i){var s=e+" ";return 1===e?s+n(0,t,o[0],i):t?s+(r(e)?a(o)[1]:a(o)[0]):i?s+a(o)[1]:s+(r(e)?a(o)[1]:a(o)[2])}e.defineLocale("lt",{months:{format:"sausio_vasario_kovo_balandžio_gegužės_birželio_liepos_rugpjūčio_rugsėjo_spalio_lapkričio_gruodžio".split("_"),standalone:"sausis_vasaris_kovas_balandis_gegužė_birželis_liepa_rugpjūtis_rugsėjis_spalis_lapkritis_gruodis".split("_"),isFormat:/D[oD]?(\[[^\[\]]*\]|\s)+MMMM?|MMMM?(\[[^\[\]]*\]|\s)+D[oD]?/},monthsShort:"sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd".split("_"),weekdays:{format:"sekmadienį_pirmadienį_antradienį_trečiadienį_ketvirtadienį_penktadienį_šeštadienį".split("_"),standalone:"sekmadienis_pirmadienis_antradienis_trečiadienis_ketvirtadienis_penktadienis_šeštadienis".split("_"),isFormat:/dddd HH:mm/},weekdaysShort:"Sek_Pir_Ant_Tre_Ket_Pen_Šeš".split("_"),weekdaysMin:"S_P_A_T_K_Pn_Š".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY [m.] MMMM D [d.]",LLL:"YYYY [m.] MMMM D [d.], HH:mm [val.]",LLLL:"YYYY [m.] MMMM D [d.], dddd, HH:mm [val.]",l:"YYYY-MM-DD",ll:"YYYY [m.] MMMM D [d.]",lll:"YYYY [m.] MMMM D [d.], HH:mm [val.]",llll:"YYYY [m.] MMMM D [d.], ddd, HH:mm [val.]"},calendar:{sameDay:"[Šiandien] LT",nextDay:"[Rytoj] LT",nextWeek:"dddd LT",lastDay:"[Vakar] LT",lastWeek:"[Praėjusį] dddd LT",sameElse:"L"},relativeTime:{future:"po %s",past:"prieš %s",s:function(e,t,n,r){return t?"kelios sekundės":r?"kelių sekundžių":"kelias sekundes"},m:n,mm:o,h:n,hh:o,d:n,dd:o,M:n,MM:o,y:n,yy:o},dayOfMonthOrdinalParse:/\d{1,2}-oji/,ordinal:function(e){return e+"-oji"},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={m:"minūtes_minūtēm_minūte_minūtes".split("_"),mm:"minūtes_minūtēm_minūte_minūtes".split("_"),h:"stundas_stundām_stunda_stundas".split("_"),hh:"stundas_stundām_stunda_stundas".split("_"),d:"dienas_dienām_diena_dienas".split("_"),dd:"dienas_dienām_diena_dienas".split("_"),M:"mēneša_mēnešiem_mēnesis_mēneši".split("_"),MM:"mēneša_mēnešiem_mēnesis_mēneši".split("_"),y:"gada_gadiem_gads_gadi".split("_"),yy:"gada_gadiem_gads_gadi".split("_")};function n(e,t,n){return n?t%10==1&&t%100!=11?e[2]:e[3]:t%10==1&&t%100!=11?e[0]:e[1]}function r(e,r,a){return e+" "+n(t[a],e,r)}function a(e,r,a){return n(t[a],e,r)}e.defineLocale("lv",{months:"janvāris_februāris_marts_aprīlis_maijs_jūnijs_jūlijs_augusts_septembris_oktobris_novembris_decembris".split("_"),monthsShort:"jan_feb_mar_apr_mai_jūn_jūl_aug_sep_okt_nov_dec".split("_"),weekdays:"svētdiena_pirmdiena_otrdiena_trešdiena_ceturtdiena_piektdiena_sestdiena".split("_"),weekdaysShort:"Sv_P_O_T_C_Pk_S".split("_"),weekdaysMin:"Sv_P_O_T_C_Pk_S".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY.",LL:"YYYY. [gada] D. MMMM",LLL:"YYYY. [gada] D. MMMM, HH:mm",LLLL:"YYYY. [gada] D. MMMM, dddd, HH:mm"},calendar:{sameDay:"[Šodien pulksten] LT",nextDay:"[Rīt pulksten] LT",nextWeek:"dddd [pulksten] LT",lastDay:"[Vakar pulksten] LT",lastWeek:"[Pagājušā] dddd [pulksten] LT",sameElse:"L"},relativeTime:{future:"pēc %s",past:"pirms %s",s:function(e,t){return t?"dažas sekundes":"dažām sekundēm"},m:a,mm:r,h:a,hh:r,d:a,dd:r,M:a,MM:r,y:a,yy:r},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={words:{m:["jedan minut","jednog minuta"],mm:["minut","minuta","minuta"],h:["jedan sat","jednog sata"],hh:["sat","sata","sati"],dd:["dan","dana","dana"],MM:["mjesec","mjeseca","mjeseci"],yy:["godina","godine","godina"]},correctGrammaticalCase:function(e,t){return 1===e?t[0]:e>=2&&e<=4?t[1]:t[2]},translate:function(e,n,r){var a=t.words[r];return 1===r.length?n?a[0]:a[1]:e+" "+t.correctGrammaticalCase(e,a)}};e.defineLocale("me",{months:"januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sjutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[juče u] LT",lastWeek:function(){return["[prošle] [nedjelje] [u] LT","[prošlog] [ponedjeljka] [u] LT","[prošlog] [utorka] [u] LT","[prošle] [srijede] [u] LT","[prošlog] [četvrtka] [u] LT","[prošlog] [petka] [u] LT","[prošle] [subote] [u] LT"][this.day()]},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"nekoliko sekundi",m:t.translate,mm:t.translate,h:t.translate,hh:t.translate,d:"dan",dd:t.translate,M:"mjesec",MM:t.translate,y:"godinu",yy:t.translate},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("mi",{months:"Kohi-tāte_Hui-tanguru_Poutū-te-rangi_Paenga-whāwhā_Haratua_Pipiri_Hōngoingoi_Here-turi-kōkā_Mahuru_Whiringa-ā-nuku_Whiringa-ā-rangi_Hakihea".split("_"),monthsShort:"Kohi_Hui_Pou_Pae_Hara_Pipi_Hōngoi_Here_Mahu_Whi-nu_Whi-ra_Haki".split("_"),monthsRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,monthsStrictRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,monthsShortRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,monthsShortStrictRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,2}/i,weekdays:"Rātapu_Mane_Tūrei_Wenerei_Tāite_Paraire_Hātarei".split("_"),weekdaysShort:"Ta_Ma_Tū_We_Tāi_Pa_Hā".split("_"),weekdaysMin:"Ta_Ma_Tū_We_Tāi_Pa_Hā".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [i] HH:mm",LLLL:"dddd, D MMMM YYYY [i] HH:mm"},calendar:{sameDay:"[i teie mahana, i] LT",nextDay:"[apopo i] LT",nextWeek:"dddd [i] LT",lastDay:"[inanahi i] LT",lastWeek:"dddd [whakamutunga i] LT",sameElse:"L"},relativeTime:{future:"i roto i %s",past:"%s i mua",s:"te hēkona ruarua",m:"he meneti",mm:"%d meneti",h:"te haora",hh:"%d haora",d:"he ra",dd:"%d ra",M:"he marama",MM:"%d marama",y:"he tau",yy:"%d tau"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("mk",{months:"јануари_февруари_март_април_мај_јуни_јули_август_септември_октомври_ноември_декември".split("_"),monthsShort:"јан_фев_мар_апр_мај_јун_јул_авг_сеп_окт_ное_дек".split("_"),weekdays:"недела_понеделник_вторник_среда_четврток_петок_сабота".split("_"),weekdaysShort:"нед_пон_вто_сре_чет_пет_саб".split("_"),weekdaysMin:"нe_пo_вт_ср_че_пе_сa".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[Денес во] LT",nextDay:"[Утре во] LT",nextWeek:"[Во] dddd [во] LT",lastDay:"[Вчера во] LT",lastWeek:function(){switch(this.day()){case 0:case 3:case 6:return"[Изминатата] dddd [во] LT";case 1:case 2:case 4:case 5:return"[Изминатиот] dddd [во] LT"}},sameElse:"L"},relativeTime:{future:"после %s",past:"пред %s",s:"неколку секунди",m:"минута",mm:"%d минути",h:"час",hh:"%d часа",d:"ден",dd:"%d дена",M:"месец",MM:"%d месеци",y:"година",yy:"%d години"},dayOfMonthOrdinalParse:/\d{1,2}-(ев|ен|ти|ви|ри|ми)/,ordinal:function(e){var t=e%10,n=e%100;return 0===e?e+"-ев":0===n?e+"-ен":n>10&&n<20?e+"-ти":1===t?e+"-ви":2===t?e+"-ри":7===t||8===t?e+"-ми":e+"-ти"},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("ml",{months:"ജനുവരി_ഫെബ്രുവരി_മാർച്ച്_ഏപ്രിൽ_മേയ്_ജൂൺ_ജൂലൈ_ഓഗസ്റ്റ്_സെപ്റ്റംബർ_ഒക്ടോബർ_നവംബർ_ഡിസംബർ".split("_"),monthsShort:"ജനു._ഫെബ്രു._മാർ._ഏപ്രി._മേയ്_ജൂൺ_ജൂലൈ._ഓഗ._സെപ്റ്റ._ഒക്ടോ._നവം._ഡിസം.".split("_"),monthsParseExact:!0,weekdays:"ഞായറാഴ്ച_തിങ്കളാഴ്ച_ചൊവ്വാഴ്ച_ബുധനാഴ്ച_വ്യാഴാഴ്ച_വെള്ളിയാഴ്ച_ശനിയാഴ്ച".split("_"),weekdaysShort:"ഞായർ_തിങ്കൾ_ചൊവ്വ_ബുധൻ_വ്യാഴം_വെള്ളി_ശനി".split("_"),weekdaysMin:"ഞാ_തി_ചൊ_ബു_വ്യാ_വെ_ശ".split("_"),longDateFormat:{LT:"A h:mm -നു",LTS:"A h:mm:ss -നു",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm -നു",LLLL:"dddd, D MMMM YYYY, A h:mm -നു"},calendar:{sameDay:"[ഇന്ന്] LT",nextDay:"[നാളെ] LT",nextWeek:"dddd, LT",lastDay:"[ഇന്നലെ] LT",lastWeek:"[കഴിഞ്ഞ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s കഴിഞ്ഞ്",past:"%s മുൻപ്",s:"അൽപ നിമിഷങ്ങൾ",m:"ഒരു മിനിറ്റ്",mm:"%d മിനിറ്റ്",h:"ഒരു മണിക്കൂർ",hh:"%d മണിക്കൂർ",d:"ഒരു ദിവസം",dd:"%d ദിവസം",M:"ഒരു മാസം",MM:"%d മാസം",y:"ഒരു വർഷം",yy:"%d വർഷം"},meridiemParse:/രാത്രി|രാവിലെ|ഉച്ച കഴിഞ്ഞ്|വൈകുന്നേരം|രാത്രി/i,meridiemHour:function(e,t){return 12===e&&(e=0),"രാത്രി"===t&&e>=4||"ഉച്ച കഴിഞ്ഞ്"===t||"വൈകുന്നേരം"===t?e+12:e},meridiem:function(e,t,n){return e<4?"രാത്രി":e<12?"രാവിലെ":e<17?"ഉച്ച കഴിഞ്ഞ്":e<20?"വൈകുന്നേരം":"രാത്രി"}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},n={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"};function r(e,t,n,r){var a="";if(t)switch(n){case"s":a="काही सेकंद";break;case"m":a="एक मिनिट";break;case"mm":a="%d मिनिटे";break;case"h":a="एक तास";break;case"hh":a="%d तास";break;case"d":a="एक दिवस";break;case"dd":a="%d दिवस";break;case"M":a="एक महिना";break;case"MM":a="%d महिने";break;case"y":a="एक वर्ष";break;case"yy":a="%d वर्षे"}else switch(n){case"s":a="काही सेकंदां";break;case"m":a="एका मिनिटा";break;case"mm":a="%d मिनिटां";break;case"h":a="एका तासा";break;case"hh":a="%d तासां";break;case"d":a="एका दिवसा";break;case"dd":a="%d दिवसां";break;case"M":a="एका महिन्या";break;case"MM":a="%d महिन्यां";break;case"y":a="एका वर्षा";break;case"yy":a="%d वर्षां"}return a.replace(/%d/i,e)}e.defineLocale("mr",{months:"जानेवारी_फेब्रुवारी_मार्च_एप्रिल_मे_जून_जुलै_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर".split("_"),monthsShort:"जाने._फेब्रु._मार्च._एप्रि._मे._जून._जुलै._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.".split("_"),monthsParseExact:!0,weekdays:"रविवार_सोमवार_मंगळवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"),weekdaysShort:"रवि_सोम_मंगळ_बुध_गुरू_शुक्र_शनि".split("_"),weekdaysMin:"र_सो_मं_बु_गु_शु_श".split("_"),longDateFormat:{LT:"A h:mm वाजता",LTS:"A h:mm:ss वाजता",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm वाजता",LLLL:"dddd, D MMMM YYYY, A h:mm वाजता"},calendar:{sameDay:"[आज] LT",nextDay:"[उद्या] LT",nextWeek:"dddd, LT",lastDay:"[काल] LT",lastWeek:"[मागील] dddd, LT",sameElse:"L"},relativeTime:{future:"%sमध्ये",past:"%sपूर्वी",s:r,m:r,mm:r,h:r,hh:r,d:r,dd:r,M:r,MM:r,y:r,yy:r},preparse:function(e){return e.replace(/[१२३४५६७८९०]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/रात्री|सकाळी|दुपारी|सायंकाळी/,meridiemHour:function(e,t){return 12===e&&(e=0),"रात्री"===t?e<4?e:e+12:"सकाळी"===t?e:"दुपारी"===t?e>=10?e:e+12:"सायंकाळी"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"रात्री":e<10?"सकाळी":e<17?"दुपारी":e<20?"सायंकाळी":"रात्री"},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("ms",{months:"Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"),weekdays:"Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"),weekdaysShort:"Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"),weekdaysMin:"Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|tengahari|petang|malam/,meridiemHour:function(e,t){return 12===e&&(e=0),"pagi"===t?e:"tengahari"===t?e>=11?e:e+12:"petang"===t||"malam"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"pagi":e<15?"tengahari":e<19?"petang":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Esok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kelmarin pukul] LT",lastWeek:"dddd [lepas pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lepas",s:"beberapa saat",m:"seminit",mm:"%d minit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("ms-my",{months:"Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"),weekdays:"Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"),weekdaysShort:"Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"),weekdaysMin:"Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|tengahari|petang|malam/,meridiemHour:function(e,t){return 12===e&&(e=0),"pagi"===t?e:"tengahari"===t?e>=11?e:e+12:"petang"===t||"malam"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"pagi":e<15?"tengahari":e<19?"petang":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Esok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kelmarin pukul] LT",lastWeek:"dddd [lepas pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lepas",s:"beberapa saat",m:"seminit",mm:"%d minit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={1:"၁",2:"၂",3:"၃",4:"၄",5:"၅",6:"၆",7:"၇",8:"၈",9:"၉",0:"၀"},n={"၁":"1","၂":"2","၃":"3","၄":"4","၅":"5","၆":"6","၇":"7","၈":"8","၉":"9","၀":"0"};e.defineLocale("my",{months:"ဇန်နဝါရီ_ဖေဖော်ဝါရီ_မတ်_ဧပြီ_မေ_ဇွန်_ဇူလိုင်_သြဂုတ်_စက်တင်ဘာ_အောက်တိုဘာ_နိုဝင်ဘာ_ဒီဇင်ဘာ".split("_"),monthsShort:"ဇန်_ဖေ_မတ်_ပြီ_မေ_ဇွန်_လိုင်_သြ_စက်_အောက်_နို_ဒီ".split("_"),weekdays:"တနင်္ဂနွေ_တနင်္လာ_အင်္ဂါ_ဗုဒ္ဓဟူး_ကြာသပတေး_သောကြာ_စနေ".split("_"),weekdaysShort:"နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ".split("_"),weekdaysMin:"နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[ယနေ.] LT [မှာ]",nextDay:"[မနက်ဖြန်] LT [မှာ]",nextWeek:"dddd LT [မှာ]",lastDay:"[မနေ.က] LT [မှာ]",lastWeek:"[ပြီးခဲ့သော] dddd LT [မှာ]",sameElse:"L"},relativeTime:{future:"လာမည့် %s မှာ",past:"လွန်ခဲ့သော %s က",s:"စက္ကန်.အနည်းငယ်",m:"တစ်မိနစ်",mm:"%d မိနစ်",h:"တစ်နာရီ",hh:"%d နာရီ",d:"တစ်ရက်",dd:"%d ရက်",M:"တစ်လ",MM:"%d လ",y:"တစ်နှစ်",yy:"%d နှစ်"},preparse:function(e){return e.replace(/[၁၂၃၄၅၆၇၈၉၀]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("nb",{months:"januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan._feb._mars_april_mai_juni_juli_aug._sep._okt._nov._des.".split("_"),monthsParseExact:!0,weekdays:"søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"),weekdaysShort:"sø._ma._ti._on._to._fr._lø.".split("_"),weekdaysMin:"sø_ma_ti_on_to_fr_lø".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] HH:mm",LLLL:"dddd D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[i dag kl.] LT",nextDay:"[i morgen kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[i går kl.] LT",lastWeek:"[forrige] dddd [kl.] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s siden",s:"noen sekunder",m:"ett minutt",mm:"%d minutter",h:"en time",hh:"%d timer",d:"en dag",dd:"%d dager",M:"en måned",MM:"%d måneder",y:"ett år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},n={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"};e.defineLocale("ne",{months:"जनवरी_फेब्रुवरी_मार्च_अप्रिल_मई_जुन_जुलाई_अगष्ट_सेप्टेम्बर_अक्टोबर_नोभेम्बर_डिसेम्बर".split("_"),monthsShort:"जन._फेब्रु._मार्च_अप्रि._मई_जुन_जुलाई._अग._सेप्ट._अक्टो._नोभे._डिसे.".split("_"),monthsParseExact:!0,weekdays:"आइतबार_सोमबार_मङ्गलबार_बुधबार_बिहिबार_शुक्रबार_शनिबार".split("_"),weekdaysShort:"आइत._सोम._मङ्गल._बुध._बिहि._शुक्र._शनि.".split("_"),weekdaysMin:"आ._सो._मं._बु._बि._शु._श.".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"Aको h:mm बजे",LTS:"Aको h:mm:ss बजे",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, Aको h:mm बजे",LLLL:"dddd, D MMMM YYYY, Aको h:mm बजे"},preparse:function(e){return e.replace(/[१२३४५६७८९०]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/राति|बिहान|दिउँसो|साँझ/,meridiemHour:function(e,t){return 12===e&&(e=0),"राति"===t?e<4?e:e+12:"बिहान"===t?e:"दिउँसो"===t?e>=10?e:e+12:"साँझ"===t?e+12:void 0},meridiem:function(e,t,n){return e<3?"राति":e<12?"बिहान":e<16?"दिउँसो":e<20?"साँझ":"राति"},calendar:{sameDay:"[आज] LT",nextDay:"[भोलि] LT",nextWeek:"[आउँदो] dddd[,] LT",lastDay:"[हिजो] LT",lastWeek:"[गएको] dddd[,] LT",sameElse:"L"},relativeTime:{future:"%sमा",past:"%s अगाडि",s:"केही क्षण",m:"एक मिनेट",mm:"%d मिनेट",h:"एक घण्टा",hh:"%d घण्टा",d:"एक दिन",dd:"%d दिन",M:"एक महिना",MM:"%d महिना",y:"एक बर्ष",yy:"%d बर्ष"},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";var t="jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_"),n="jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_"),r=[/^jan/i,/^feb/i,/^maart|mrt.?$/i,/^apr/i,/^mei$/i,/^jun[i.]?$/i,/^jul[i.]?$/i,/^aug/i,/^sep/i,/^okt/i,/^nov/i,/^dec/i],a=/^(januari|februari|maart|april|mei|april|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;e.defineLocale("nl",{months:"januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(januari|februari|maart|mei|ju[nl]i|april|augustus|september|oktober|november|december)/i,monthsShortStrictRegex:/^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"),weekdaysShort:"zo._ma._di._wo._do._vr._za.".split("_"),weekdaysMin:"Zo_Ma_Di_Wo_Do_Vr_Za".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[vandaag om] LT",nextDay:"[morgen om] LT",nextWeek:"dddd [om] LT",lastDay:"[gisteren om] LT",lastWeek:"[afgelopen] dddd [om] LT",sameElse:"L"},relativeTime:{future:"over %s",past:"%s geleden",s:"een paar seconden",m:"één minuut",mm:"%d minuten",h:"één uur",hh:"%d uur",d:"één dag",dd:"%d dagen",M:"één maand",MM:"%d maanden",y:"één jaar",yy:"%d jaar"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";var t="jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_"),n="jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_"),r=[/^jan/i,/^feb/i,/^maart|mrt.?$/i,/^apr/i,/^mei$/i,/^jun[i.]?$/i,/^jul[i.]?$/i,/^aug/i,/^sep/i,/^okt/i,/^nov/i,/^dec/i],a=/^(januari|februari|maart|april|mei|april|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;e.defineLocale("nl-be",{months:"januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(januari|februari|maart|mei|ju[nl]i|april|augustus|september|oktober|november|december)/i,monthsShortStrictRegex:/^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"),weekdaysShort:"zo._ma._di._wo._do._vr._za.".split("_"),weekdaysMin:"Zo_Ma_Di_Wo_Do_Vr_Za".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[vandaag om] LT",nextDay:"[morgen om] LT",nextWeek:"dddd [om] LT",lastDay:"[gisteren om] LT",lastWeek:"[afgelopen] dddd [om] LT",sameElse:"L"},relativeTime:{future:"over %s",past:"%s geleden",s:"een paar seconden",m:"één minuut",mm:"%d minuten",h:"één uur",hh:"%d uur",d:"één dag",dd:"%d dagen",M:"één maand",MM:"%d maanden",y:"één jaar",yy:"%d jaar"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("nn",{months:"januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"),weekdays:"sundag_måndag_tysdag_onsdag_torsdag_fredag_laurdag".split("_"),weekdaysShort:"sun_mån_tys_ons_tor_fre_lau".split("_"),weekdaysMin:"su_må_ty_on_to_fr_lø".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] H:mm",LLLL:"dddd D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[I dag klokka] LT",nextDay:"[I morgon klokka] LT",nextWeek:"dddd [klokka] LT",lastDay:"[I går klokka] LT",lastWeek:"[Føregåande] dddd [klokka] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s sidan",s:"nokre sekund",m:"eit minutt",mm:"%d minutt",h:"ein time",hh:"%d timar",d:"ein dag",dd:"%d dagar",M:"ein månad",MM:"%d månader",y:"eit år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={1:"੧",2:"੨",3:"੩",4:"੪",5:"੫",6:"੬",7:"੭",8:"੮",9:"੯",0:"੦"},n={"੧":"1","੨":"2","੩":"3","੪":"4","੫":"5","੬":"6","੭":"7","੮":"8","੯":"9","੦":"0"};e.defineLocale("pa-in",{months:"ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ".split("_"),monthsShort:"ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ".split("_"),weekdays:"ਐਤਵਾਰ_ਸੋਮਵਾਰ_ਮੰਗਲਵਾਰ_ਬੁਧਵਾਰ_ਵੀਰਵਾਰ_ਸ਼ੁੱਕਰਵਾਰ_ਸ਼ਨੀਚਰਵਾਰ".split("_"),weekdaysShort:"ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ".split("_"),weekdaysMin:"ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ".split("_"),longDateFormat:{LT:"A h:mm ਵਜੇ",LTS:"A h:mm:ss ਵਜੇ",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm ਵਜੇ",LLLL:"dddd, D MMMM YYYY, A h:mm ਵਜੇ"},calendar:{sameDay:"[ਅਜ] LT",nextDay:"[ਕਲ] LT",nextWeek:"dddd, LT",lastDay:"[ਕਲ] LT",lastWeek:"[ਪਿਛਲੇ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s ਵਿੱਚ",past:"%s ਪਿਛਲੇ",s:"ਕੁਝ ਸਕਿੰਟ",m:"ਇਕ ਮਿੰਟ",mm:"%d ਮਿੰਟ",h:"ਇੱਕ ਘੰਟਾ",hh:"%d ਘੰਟੇ",d:"ਇੱਕ ਦਿਨ",dd:"%d ਦਿਨ",M:"ਇੱਕ ਮਹੀਨਾ",MM:"%d ਮਹੀਨੇ",y:"ਇੱਕ ਸਾਲ",yy:"%d ਸਾਲ"},preparse:function(e){return e.replace(/[੧੨੩੪੫੬੭੮੯੦]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/ਰਾਤ|ਸਵੇਰ|ਦੁਪਹਿਰ|ਸ਼ਾਮ/,meridiemHour:function(e,t){return 12===e&&(e=0),"ਰਾਤ"===t?e<4?e:e+12:"ਸਵੇਰ"===t?e:"ਦੁਪਹਿਰ"===t?e>=10?e:e+12:"ਸ਼ਾਮ"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"ਰਾਤ":e<10?"ਸਵੇਰ":e<17?"ਦੁਪਹਿਰ":e<20?"ਸ਼ਾਮ":"ਰਾਤ"},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";var t="styczeń_luty_marzec_kwiecień_maj_czerwiec_lipiec_sierpień_wrzesień_październik_listopad_grudzień".split("_"),n="stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_września_października_listopada_grudnia".split("_");function r(e){return e%10<5&&e%10>1&&~~(e/10)%10!=1}function a(e,t,n){var a=e+" ";switch(n){case"m":return t?"minuta":"minutę";case"mm":return a+(r(e)?"minuty":"minut");case"h":return t?"godzina":"godzinę";case"hh":return a+(r(e)?"godziny":"godzin");case"MM":return a+(r(e)?"miesiące":"miesięcy");case"yy":return a+(r(e)?"lata":"lat")}}e.defineLocale("pl",{months:function(e,r){return e?""===r?"("+n[e.month()]+"|"+t[e.month()]+")":/D MMMM/.test(r)?n[e.month()]:t[e.month()]:t},monthsShort:"sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paź_lis_gru".split("_"),weekdays:"niedziela_poniedziałek_wtorek_środa_czwartek_piątek_sobota".split("_"),weekdaysShort:"ndz_pon_wt_śr_czw_pt_sob".split("_"),weekdaysMin:"Nd_Pn_Wt_Śr_Cz_Pt_So".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Dziś o] LT",nextDay:"[Jutro o] LT",nextWeek:"[W] dddd [o] LT",lastDay:"[Wczoraj o] LT",lastWeek:function(){switch(this.day()){case 0:return"[W zeszłą niedzielę o] LT";case 3:return"[W zeszłą środę o] LT";case 6:return"[W zeszłą sobotę o] LT";default:return"[W zeszły] dddd [o] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"%s temu",s:"kilka sekund",m:a,mm:a,h:a,hh:a,d:"1 dzień",dd:"%d dni",M:"miesiąc",MM:a,y:"rok",yy:a},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("pt",{months:"Janeiro_Fevereiro_Março_Abril_Maio_Junho_Julho_Agosto_Setembro_Outubro_Novembro_Dezembro".split("_"),monthsShort:"Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez".split("_"),weekdays:"Domingo_Segunda-Feira_Terça-Feira_Quarta-Feira_Quinta-Feira_Sexta-Feira_Sábado".split("_"),weekdaysShort:"Dom_Seg_Ter_Qua_Qui_Sex_Sáb".split("_"),weekdaysMin:"Do_2ª_3ª_4ª_5ª_6ª_Sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY HH:mm",LLLL:"dddd, D [de] MMMM [de] YYYY HH:mm"},calendar:{sameDay:"[Hoje às] LT",nextDay:"[Amanhã às] LT",nextWeek:"dddd [às] LT",lastDay:"[Ontem às] LT",lastWeek:function(){return 0===this.day()||6===this.day()?"[Último] dddd [às] LT":"[Última] dddd [às] LT"},sameElse:"L"},relativeTime:{future:"em %s",past:"há %s",s:"segundos",m:"um minuto",mm:"%d minutos",h:"uma hora",hh:"%d horas",d:"um dia",dd:"%d dias",M:"um mês",MM:"%d meses",y:"um ano",yy:"%d anos"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("pt-br",{months:"Janeiro_Fevereiro_Março_Abril_Maio_Junho_Julho_Agosto_Setembro_Outubro_Novembro_Dezembro".split("_"),monthsShort:"Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez".split("_"),weekdays:"Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado".split("_"),weekdaysShort:"Dom_Seg_Ter_Qua_Qui_Sex_Sáb".split("_"),weekdaysMin:"Do_2ª_3ª_4ª_5ª_6ª_Sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY [às] HH:mm",LLLL:"dddd, D [de] MMMM [de] YYYY [às] HH:mm"},calendar:{sameDay:"[Hoje às] LT",nextDay:"[Amanhã às] LT",nextWeek:"dddd [às] LT",lastDay:"[Ontem às] LT",lastWeek:function(){return 0===this.day()||6===this.day()?"[Último] dddd [às] LT":"[Última] dddd [às] LT"},sameElse:"L"},relativeTime:{future:"em %s",past:"%s atrás",s:"poucos segundos",m:"um minuto",mm:"%d minutos",h:"uma hora",hh:"%d horas",d:"um dia",dd:"%d dias",M:"um mês",MM:"%d meses",y:"um ano",yy:"%d anos"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº"})}(n(0))},function(e,t,n){!function(e){"use strict";function t(e,t,n){var r=" ";return(e%100>=20||e>=100&&e%100==0)&&(r=" de "),e+r+{mm:"minute",hh:"ore",dd:"zile",MM:"luni",yy:"ani"}[n]}e.defineLocale("ro",{months:"ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie".split("_"),monthsShort:"ian._febr._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"duminică_luni_marți_miercuri_joi_vineri_sâmbătă".split("_"),weekdaysShort:"Dum_Lun_Mar_Mie_Joi_Vin_Sâm".split("_"),weekdaysMin:"Du_Lu_Ma_Mi_Jo_Vi_Sâ".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[azi la] LT",nextDay:"[mâine la] LT",nextWeek:"dddd [la] LT",lastDay:"[ieri la] LT",lastWeek:"[fosta] dddd [la] LT",sameElse:"L"},relativeTime:{future:"peste %s",past:"%s în urmă",s:"câteva secunde",m:"un minut",mm:t,h:"o oră",hh:t,d:"o zi",dd:t,M:"o lună",MM:t,y:"un an",yy:t},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";function t(e,t,n){var r,a;return"m"===n?t?"минута":"минуту":e+" "+(r=+e,a={mm:t?"минута_минуты_минут":"минуту_минуты_минут",hh:"час_часа_часов",dd:"день_дня_дней",MM:"месяц_месяца_месяцев",yy:"год_года_лет"}[n].split("_"),r%10==1&&r%100!=11?a[0]:r%10>=2&&r%10<=4&&(r%100<10||r%100>=20)?a[1]:a[2])}var n=[/^янв/i,/^фев/i,/^мар/i,/^апр/i,/^ма[йя]/i,/^июн/i,/^июл/i,/^авг/i,/^сен/i,/^окт/i,/^ноя/i,/^дек/i];e.defineLocale("ru",{months:{format:"января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря".split("_"),standalone:"январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_")},monthsShort:{format:"янв._февр._мар._апр._мая_июня_июля_авг._сент._окт._нояб._дек.".split("_"),standalone:"янв._февр._март_апр._май_июнь_июль_авг._сент._окт._нояб._дек.".split("_")},weekdays:{standalone:"воскресенье_понедельник_вторник_среда_четверг_пятница_суббота".split("_"),format:"воскресенье_понедельник_вторник_среду_четверг_пятницу_субботу".split("_"),isFormat:/\[ ?[Вв] ?(?:прошлую|следующую|эту)? ?\] ?dddd/},weekdaysShort:"вс_пн_вт_ср_чт_пт_сб".split("_"),weekdaysMin:"вс_пн_вт_ср_чт_пт_сб".split("_"),monthsParse:n,longMonthsParse:n,shortMonthsParse:n,monthsRegex:/^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,monthsShortRegex:/^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,monthsStrictRegex:/^(январ[яь]|феврал[яь]|марта?|апрел[яь]|ма[яй]|июн[яь]|июл[яь]|августа?|сентябр[яь]|октябр[яь]|ноябр[яь]|декабр[яь])/i,monthsShortStrictRegex:/^(янв\.|февр?\.|мар[т.]|апр\.|ма[яй]|июн[ья.]|июл[ья.]|авг\.|сент?\.|окт\.|нояб?\.|дек\.)/i,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY г.",LLL:"D MMMM YYYY г., HH:mm",LLLL:"dddd, D MMMM YYYY г., HH:mm"},calendar:{sameDay:"[Сегодня в] LT",nextDay:"[Завтра в] LT",lastDay:"[Вчера в] LT",nextWeek:function(e){if(e.week()===this.week())return 2===this.day()?"[Во] dddd [в] LT":"[В] dddd [в] LT";switch(this.day()){case 0:return"[В следующее] dddd [в] LT";case 1:case 2:case 4:return"[В следующий] dddd [в] LT";case 3:case 5:case 6:return"[В следующую] dddd [в] LT"}},lastWeek:function(e){if(e.week()===this.week())return 2===this.day()?"[Во] dddd [в] LT":"[В] dddd [в] LT";switch(this.day()){case 0:return"[В прошлое] dddd [в] LT";case 1:case 2:case 4:return"[В прошлый] dddd [в] LT";case 3:case 5:case 6:return"[В прошлую] dddd [в] LT"}},sameElse:"L"},relativeTime:{future:"через %s",past:"%s назад",s:"несколько секунд",m:t,mm:t,h:"час",hh:t,d:"день",dd:t,M:"месяц",MM:t,y:"год",yy:t},meridiemParse:/ночи|утра|дня|вечера/i,isPM:function(e){return/^(дня|вечера)$/.test(e)},meridiem:function(e,t,n){return e<4?"ночи":e<12?"утра":e<17?"дня":"вечера"},dayOfMonthOrdinalParse:/\d{1,2}-(й|го|я)/,ordinal:function(e,t){switch(t){case"M":case"d":case"DDD":return e+"-й";case"D":return e+"-го";case"w":case"W":return e+"-я";default:return e}},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";var t=["جنوري","فيبروري","مارچ","اپريل","مئي","جون","جولاءِ","آگسٽ","سيپٽمبر","آڪٽوبر","نومبر","ڊسمبر"],n=["آچر","سومر","اڱارو","اربع","خميس","جمع","ڇنڇر"];e.defineLocale("sd",{months:t,monthsShort:t,weekdays:n,weekdaysShort:n,weekdaysMin:n,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd، D MMMM YYYY HH:mm"},meridiemParse:/صبح|شام/,isPM:function(e){return"شام"===e},meridiem:function(e,t,n){return e<12?"صبح":"شام"},calendar:{sameDay:"[اڄ] LT",nextDay:"[سڀاڻي] LT",nextWeek:"dddd [اڳين هفتي تي] LT",lastDay:"[ڪالهه] LT",lastWeek:"[گزريل هفتي] dddd [تي] LT",sameElse:"L"},relativeTime:{future:"%s پوء",past:"%s اڳ",s:"چند سيڪنڊ",m:"هڪ منٽ",mm:"%d منٽ",h:"هڪ ڪلاڪ",hh:"%d ڪلاڪ",d:"هڪ ڏينهن",dd:"%d ڏينهن",M:"هڪ مهينو",MM:"%d مهينا",y:"هڪ سال",yy:"%d سال"},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("se",{months:"ođđajagemánnu_guovvamánnu_njukčamánnu_cuoŋománnu_miessemánnu_geassemánnu_suoidnemánnu_borgemánnu_čakčamánnu_golggotmánnu_skábmamánnu_juovlamánnu".split("_"),monthsShort:"ođđj_guov_njuk_cuo_mies_geas_suoi_borg_čakč_golg_skáb_juov".split("_"),weekdays:"sotnabeaivi_vuossárga_maŋŋebárga_gaskavahkku_duorastat_bearjadat_lávvardat".split("_"),weekdaysShort:"sotn_vuos_maŋ_gask_duor_bear_láv".split("_"),weekdaysMin:"s_v_m_g_d_b_L".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"MMMM D. [b.] YYYY",LLL:"MMMM D. [b.] YYYY [ti.] HH:mm",LLLL:"dddd, MMMM D. [b.] YYYY [ti.] HH:mm"},calendar:{sameDay:"[otne ti] LT",nextDay:"[ihttin ti] LT",nextWeek:"dddd [ti] LT",lastDay:"[ikte ti] LT",lastWeek:"[ovddit] dddd [ti] LT",sameElse:"L"},relativeTime:{future:"%s geažes",past:"maŋit %s",s:"moadde sekunddat",m:"okta minuhta",mm:"%d minuhtat",h:"okta diimmu",hh:"%d diimmut",d:"okta beaivi",dd:"%d beaivvit",M:"okta mánnu",MM:"%d mánut",y:"okta jahki",yy:"%d jagit"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("si",{months:"ජනවාරි_පෙබරවාරි_මාර්තු_අප්‍රේල්_මැයි_ජූනි_ජූලි_අගෝස්තු_සැප්තැම්බර්_ඔක්තෝබර්_නොවැම්බර්_දෙසැම්බර්".split("_"),monthsShort:"ජන_පෙබ_මාර්_අප්_මැයි_ජූනි_ජූලි_අගෝ_සැප්_ඔක්_නොවැ_දෙසැ".split("_"),weekdays:"ඉරිදා_සඳුදා_අඟහරුවාදා_බදාදා_බ්‍රහස්පතින්දා_සිකුරාදා_සෙනසුරාදා".split("_"),weekdaysShort:"ඉරි_සඳු_අඟ_බදා_බ්‍රහ_සිකු_සෙන".split("_"),weekdaysMin:"ඉ_ස_අ_බ_බ්‍ර_සි_සෙ".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"a h:mm",LTS:"a h:mm:ss",L:"YYYY/MM/DD",LL:"YYYY MMMM D",LLL:"YYYY MMMM D, a h:mm",LLLL:"YYYY MMMM D [වැනි] dddd, a h:mm:ss"},calendar:{sameDay:"[අද] LT[ට]",nextDay:"[හෙට] LT[ට]",nextWeek:"dddd LT[ට]",lastDay:"[ඊයේ] LT[ට]",lastWeek:"[පසුගිය] dddd LT[ට]",sameElse:"L"},relativeTime:{future:"%sකින්",past:"%sකට පෙර",s:"තත්පර කිහිපය",m:"මිනිත්තුව",mm:"මිනිත්තු %d",h:"පැය",hh:"පැය %d",d:"දිනය",dd:"දින %d",M:"මාසය",MM:"මාස %d",y:"වසර",yy:"වසර %d"},dayOfMonthOrdinalParse:/\d{1,2} වැනි/,ordinal:function(e){return e+" වැනි"},meridiemParse:/පෙර වරු|පස් වරු|පෙ.ව|ප.ව./,isPM:function(e){return"ප.ව."===e||"පස් වරු"===e},meridiem:function(e,t,n){return e>11?n?"ප.ව.":"පස් වරු":n?"පෙ.ව.":"පෙර වරු"}})}(n(0))},function(e,t,n){!function(e){"use strict";var t="január_február_marec_apríl_máj_jún_júl_august_september_október_november_december".split("_"),n="jan_feb_mar_apr_máj_jún_júl_aug_sep_okt_nov_dec".split("_");function r(e){return e>1&&e<5}function a(e,t,n,a){var o=e+" ";switch(n){case"s":return t||a?"pár sekúnd":"pár sekundami";case"m":return t?"minúta":a?"minútu":"minútou";case"mm":return t||a?o+(r(e)?"minúty":"minút"):o+"minútami";case"h":return t?"hodina":a?"hodinu":"hodinou";case"hh":return t||a?o+(r(e)?"hodiny":"hodín"):o+"hodinami";case"d":return t||a?"deň":"dňom";case"dd":return t||a?o+(r(e)?"dni":"dní"):o+"dňami";case"M":return t||a?"mesiac":"mesiacom";case"MM":return t||a?o+(r(e)?"mesiace":"mesiacov"):o+"mesiacmi";case"y":return t||a?"rok":"rokom";case"yy":return t||a?o+(r(e)?"roky":"rokov"):o+"rokmi"}}e.defineLocale("sk",{months:t,monthsShort:n,weekdays:"nedeľa_pondelok_utorok_streda_štvrtok_piatok_sobota".split("_"),weekdaysShort:"ne_po_ut_st_št_pi_so".split("_"),weekdaysMin:"ne_po_ut_st_št_pi_so".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd D. MMMM YYYY H:mm"},calendar:{sameDay:"[dnes o] LT",nextDay:"[zajtra o] LT",nextWeek:function(){switch(this.day()){case 0:return"[v nedeľu o] LT";case 1:case 2:return"[v] dddd [o] LT";case 3:return"[v stredu o] LT";case 4:return"[vo štvrtok o] LT";case 5:return"[v piatok o] LT";case 6:return"[v sobotu o] LT"}},lastDay:"[včera o] LT",lastWeek:function(){switch(this.day()){case 0:return"[minulú nedeľu o] LT";case 1:case 2:return"[minulý] dddd [o] LT";case 3:return"[minulú stredu o] LT";case 4:case 5:return"[minulý] dddd [o] LT";case 6:return"[minulú sobotu o] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"pred %s",s:a,m:a,mm:a,h:a,hh:a,d:a,dd:a,M:a,MM:a,y:a,yy:a},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a=e+" ";switch(n){case"s":return t||r?"nekaj sekund":"nekaj sekundami";case"m":return t?"ena minuta":"eno minuto";case"mm":return a+=1===e?t?"minuta":"minuto":2===e?t||r?"minuti":"minutama":e<5?t||r?"minute":"minutami":t||r?"minut":"minutami";case"h":return t?"ena ura":"eno uro";case"hh":return a+=1===e?t?"ura":"uro":2===e?t||r?"uri":"urama":e<5?t||r?"ure":"urami":t||r?"ur":"urami";case"d":return t||r?"en dan":"enim dnem";case"dd":return a+=1===e?t||r?"dan":"dnem":2===e?t||r?"dni":"dnevoma":t||r?"dni":"dnevi";case"M":return t||r?"en mesec":"enim mesecem";case"MM":return a+=1===e?t||r?"mesec":"mesecem":2===e?t||r?"meseca":"mesecema":e<5?t||r?"mesece":"meseci":t||r?"mesecev":"meseci";case"y":return t||r?"eno leto":"enim letom";case"yy":return a+=1===e?t||r?"leto":"letom":2===e?t||r?"leti":"letoma":e<5?t||r?"leta":"leti":t||r?"let":"leti"}}e.defineLocale("sl",{months:"januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december".split("_"),monthsShort:"jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedelja_ponedeljek_torek_sreda_četrtek_petek_sobota".split("_"),weekdaysShort:"ned._pon._tor._sre._čet._pet._sob.".split("_"),weekdaysMin:"ne_po_to_sr_če_pe_so".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danes ob] LT",nextDay:"[jutri ob] LT",nextWeek:function(){switch(this.day()){case 0:return"[v] [nedeljo] [ob] LT";case 3:return"[v] [sredo] [ob] LT";case 6:return"[v] [soboto] [ob] LT";case 1:case 2:case 4:case 5:return"[v] dddd [ob] LT"}},lastDay:"[včeraj ob] LT",lastWeek:function(){switch(this.day()){case 0:return"[prejšnjo] [nedeljo] [ob] LT";case 3:return"[prejšnjo] [sredo] [ob] LT";case 6:return"[prejšnjo] [soboto] [ob] LT";case 1:case 2:case 4:case 5:return"[prejšnji] dddd [ob] LT"}},sameElse:"L"},relativeTime:{future:"čez %s",past:"pred %s",s:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("sq",{months:"Janar_Shkurt_Mars_Prill_Maj_Qershor_Korrik_Gusht_Shtator_Tetor_Nëntor_Dhjetor".split("_"),monthsShort:"Jan_Shk_Mar_Pri_Maj_Qer_Kor_Gus_Sht_Tet_Nën_Dhj".split("_"),weekdays:"E Diel_E Hënë_E Martë_E Mërkurë_E Enjte_E Premte_E Shtunë".split("_"),weekdaysShort:"Die_Hën_Mar_Mër_Enj_Pre_Sht".split("_"),weekdaysMin:"D_H_Ma_Më_E_P_Sh".split("_"),weekdaysParseExact:!0,meridiemParse:/PD|MD/,isPM:function(e){return"M"===e.charAt(0)},meridiem:function(e,t,n){return e<12?"PD":"MD"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Sot në] LT",nextDay:"[Nesër në] LT",nextWeek:"dddd [në] LT",lastDay:"[Dje në] LT",lastWeek:"dddd [e kaluar në] LT",sameElse:"L"},relativeTime:{future:"në %s",past:"%s më parë",s:"disa sekonda",m:"një minutë",mm:"%d minuta",h:"një orë",hh:"%d orë",d:"një ditë",dd:"%d ditë",M:"një muaj",MM:"%d muaj",y:"një vit",yy:"%d vite"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={words:{m:["jedan minut","jedne minute"],mm:["minut","minute","minuta"],h:["jedan sat","jednog sata"],hh:["sat","sata","sati"],dd:["dan","dana","dana"],MM:["mesec","meseca","meseci"],yy:["godina","godine","godina"]},correctGrammaticalCase:function(e,t){return 1===e?t[0]:e>=2&&e<=4?t[1]:t[2]},translate:function(e,n,r){var a=t.words[r];return 1===r.length?n?a[0]:a[1]:e+" "+t.correctGrammaticalCase(e,a)}};e.defineLocale("sr",{months:"januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedelja_ponedeljak_utorak_sreda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sre._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedelju] [u] LT";case 3:return"[u] [sredu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[juče u] LT",lastWeek:function(){return["[prošle] [nedelje] [u] LT","[prošlog] [ponedeljka] [u] LT","[prošlog] [utorka] [u] LT","[prošle] [srede] [u] LT","[prošlog] [četvrtka] [u] LT","[prošlog] [petka] [u] LT","[prošle] [subote] [u] LT"][this.day()]},sameElse:"L"},relativeTime:{future:"za %s",past:"pre %s",s:"nekoliko sekundi",m:t.translate,mm:t.translate,h:t.translate,hh:t.translate,d:"dan",dd:t.translate,M:"mesec",MM:t.translate,y:"godinu",yy:t.translate},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={words:{m:["један минут","једне минуте"],mm:["минут","минуте","минута"],h:["један сат","једног сата"],hh:["сат","сата","сати"],dd:["дан","дана","дана"],MM:["месец","месеца","месеци"],yy:["година","године","година"]},correctGrammaticalCase:function(e,t){return 1===e?t[0]:e>=2&&e<=4?t[1]:t[2]},translate:function(e,n,r){var a=t.words[r];return 1===r.length?n?a[0]:a[1]:e+" "+t.correctGrammaticalCase(e,a)}};e.defineLocale("sr-cyrl",{months:"јануар_фебруар_март_април_мај_јун_јул_август_септембар_октобар_новембар_децембар".split("_"),monthsShort:"јан._феб._мар._апр._мај_јун_јул_авг._сеп._окт._нов._дец.".split("_"),monthsParseExact:!0,weekdays:"недеља_понедељак_уторак_среда_четвртак_петак_субота".split("_"),weekdaysShort:"нед._пон._уто._сре._чет._пет._суб.".split("_"),weekdaysMin:"не_по_ут_ср_че_пе_су".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[данас у] LT",nextDay:"[сутра у] LT",nextWeek:function(){switch(this.day()){case 0:return"[у] [недељу] [у] LT";case 3:return"[у] [среду] [у] LT";case 6:return"[у] [суботу] [у] LT";case 1:case 2:case 4:case 5:return"[у] dddd [у] LT"}},lastDay:"[јуче у] LT",lastWeek:function(){return["[прошле] [недеље] [у] LT","[прошлог] [понедељка] [у] LT","[прошлог] [уторка] [у] LT","[прошле] [среде] [у] LT","[прошлог] [четвртка] [у] LT","[прошлог] [петка] [у] LT","[прошле] [суботе] [у] LT"][this.day()]},sameElse:"L"},relativeTime:{future:"за %s",past:"пре %s",s:"неколико секунди",m:t.translate,mm:t.translate,h:t.translate,hh:t.translate,d:"дан",dd:t.translate,M:"месец",MM:t.translate,y:"годину",yy:t.translate},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("ss",{months:"Bhimbidvwane_Indlovana_Indlov'lenkhulu_Mabasa_Inkhwekhweti_Inhlaba_Kholwane_Ingci_Inyoni_Imphala_Lweti_Ingongoni".split("_"),monthsShort:"Bhi_Ina_Inu_Mab_Ink_Inh_Kho_Igc_Iny_Imp_Lwe_Igo".split("_"),weekdays:"Lisontfo_Umsombuluko_Lesibili_Lesitsatfu_Lesine_Lesihlanu_Umgcibelo".split("_"),weekdaysShort:"Lis_Umb_Lsb_Les_Lsi_Lsh_Umg".split("_"),weekdaysMin:"Li_Us_Lb_Lt_Ls_Lh_Ug".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Namuhla nga] LT",nextDay:"[Kusasa nga] LT",nextWeek:"dddd [nga] LT",lastDay:"[Itolo nga] LT",lastWeek:"dddd [leliphelile] [nga] LT",sameElse:"L"},relativeTime:{future:"nga %s",past:"wenteka nga %s",s:"emizuzwana lomcane",m:"umzuzu",mm:"%d emizuzu",h:"lihora",hh:"%d emahora",d:"lilanga",dd:"%d emalanga",M:"inyanga",MM:"%d tinyanga",y:"umnyaka",yy:"%d iminyaka"},meridiemParse:/ekuseni|emini|entsambama|ebusuku/,meridiem:function(e,t,n){return e<11?"ekuseni":e<15?"emini":e<19?"entsambama":"ebusuku"},meridiemHour:function(e,t){return 12===e&&(e=0),"ekuseni"===t?e:"emini"===t?e>=11?e:e+12:"entsambama"===t||"ebusuku"===t?0===e?0:e+12:void 0},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:"%d",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("sv",{months:"januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),weekdays:"söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag".split("_"),weekdaysShort:"sön_mån_tis_ons_tor_fre_lör".split("_"),weekdaysMin:"sö_må_ti_on_to_fr_lö".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [kl.] HH:mm",LLLL:"dddd D MMMM YYYY [kl.] HH:mm",lll:"D MMM YYYY HH:mm",llll:"ddd D MMM YYYY HH:mm"},calendar:{sameDay:"[Idag] LT",nextDay:"[Imorgon] LT",lastDay:"[Igår] LT",nextWeek:"[På] dddd LT",lastWeek:"[I] dddd[s] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"för %s sedan",s:"några sekunder",m:"en minut",mm:"%d minuter",h:"en timme",hh:"%d timmar",d:"en dag",dd:"%d dagar",M:"en månad",MM:"%d månader",y:"ett år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}(e|a)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"e":1===t?"a":2===t?"a":"e")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("sw",{months:"Januari_Februari_Machi_Aprili_Mei_Juni_Julai_Agosti_Septemba_Oktoba_Novemba_Desemba".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ago_Sep_Okt_Nov_Des".split("_"),weekdays:"Jumapili_Jumatatu_Jumanne_Jumatano_Alhamisi_Ijumaa_Jumamosi".split("_"),weekdaysShort:"Jpl_Jtat_Jnne_Jtan_Alh_Ijm_Jmos".split("_"),weekdaysMin:"J2_J3_J4_J5_Al_Ij_J1".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[leo saa] LT",nextDay:"[kesho saa] LT",nextWeek:"[wiki ijayo] dddd [saat] LT",lastDay:"[jana] LT",lastWeek:"[wiki iliyopita] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s baadaye",past:"tokea %s",s:"hivi punde",m:"dakika moja",mm:"dakika %d",h:"saa limoja",hh:"masaa %d",d:"siku moja",dd:"masiku %d",M:"mwezi mmoja",MM:"miezi %d",y:"mwaka mmoja",yy:"miaka %d"},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={1:"௧",2:"௨",3:"௩",4:"௪",5:"௫",6:"௬",7:"௭",8:"௮",9:"௯",0:"௦"},n={"௧":"1","௨":"2","௩":"3","௪":"4","௫":"5","௬":"6","௭":"7","௮":"8","௯":"9","௦":"0"};e.defineLocale("ta",{months:"ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்".split("_"),monthsShort:"ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்".split("_"),weekdays:"ஞாயிற்றுக்கிழமை_திங்கட்கிழமை_செவ்வாய்கிழமை_புதன்கிழமை_வியாழக்கிழமை_வெள்ளிக்கிழமை_சனிக்கிழமை".split("_"),weekdaysShort:"ஞாயிறு_திங்கள்_செவ்வாய்_புதன்_வியாழன்_வெள்ளி_சனி".split("_"),weekdaysMin:"ஞா_தி_செ_பு_வி_வெ_ச".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, HH:mm",LLLL:"dddd, D MMMM YYYY, HH:mm"},calendar:{sameDay:"[இன்று] LT",nextDay:"[நாளை] LT",nextWeek:"dddd, LT",lastDay:"[நேற்று] LT",lastWeek:"[கடந்த வாரம்] dddd, LT",sameElse:"L"},relativeTime:{future:"%s இல்",past:"%s முன்",s:"ஒரு சில விநாடிகள்",m:"ஒரு நிமிடம்",mm:"%d நிமிடங்கள்",h:"ஒரு மணி நேரம்",hh:"%d மணி நேரம்",d:"ஒரு நாள்",dd:"%d நாட்கள்",M:"ஒரு மாதம்",MM:"%d மாதங்கள்",y:"ஒரு வருடம்",yy:"%d ஆண்டுகள்"},dayOfMonthOrdinalParse:/\d{1,2}வது/,ordinal:function(e){return e+"வது"},preparse:function(e){return e.replace(/[௧௨௩௪௫௬௭௮௯௦]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/யாமம்|வைகறை|காலை|நண்பகல்|எற்பாடு|மாலை/,meridiem:function(e,t,n){return e<2?" யாமம்":e<6?" வைகறை":e<10?" காலை":e<14?" நண்பகல்":e<18?" எற்பாடு":e<22?" மாலை":" யாமம்"},meridiemHour:function(e,t){return 12===e&&(e=0),"யாமம்"===t?e<2?e:e+12:"வைகறை"===t||"காலை"===t?e:"நண்பகல்"===t&&e>=10?e:e+12},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("te",{months:"జనవరి_ఫిబ్రవరి_మార్చి_ఏప్రిల్_మే_జూన్_జూలై_ఆగస్టు_సెప్టెంబర్_అక్టోబర్_నవంబర్_డిసెంబర్".split("_"),monthsShort:"జన._ఫిబ్ర._మార్చి_ఏప్రి._మే_జూన్_జూలై_ఆగ._సెప్._అక్టో._నవ._డిసె.".split("_"),monthsParseExact:!0,weekdays:"ఆదివారం_సోమవారం_మంగళవారం_బుధవారం_గురువారం_శుక్రవారం_శనివారం".split("_"),weekdaysShort:"ఆది_సోమ_మంగళ_బుధ_గురు_శుక్ర_శని".split("_"),weekdaysMin:"ఆ_సో_మం_బు_గు_శు_శ".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm",LLLL:"dddd, D MMMM YYYY, A h:mm"},calendar:{sameDay:"[నేడు] LT",nextDay:"[రేపు] LT",nextWeek:"dddd, LT",lastDay:"[నిన్న] LT",lastWeek:"[గత] dddd, LT",sameElse:"L"},relativeTime:{future:"%s లో",past:"%s క్రితం",s:"కొన్ని క్షణాలు",m:"ఒక నిమిషం",mm:"%d నిమిషాలు",h:"ఒక గంట",hh:"%d గంటలు",d:"ఒక రోజు",dd:"%d రోజులు",M:"ఒక నెల",MM:"%d నెలలు",y:"ఒక సంవత్సరం",yy:"%d సంవత్సరాలు"},dayOfMonthOrdinalParse:/\d{1,2}వ/,ordinal:"%dవ",meridiemParse:/రాత్రి|ఉదయం|మధ్యాహ్నం|సాయంత్రం/,meridiemHour:function(e,t){return 12===e&&(e=0),"రాత్రి"===t?e<4?e:e+12:"ఉదయం"===t?e:"మధ్యాహ్నం"===t?e>=10?e:e+12:"సాయంత్రం"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"రాత్రి":e<10?"ఉదయం":e<17?"మధ్యాహ్నం":e<20?"సాయంత్రం":"రాత్రి"},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("tet",{months:"Janeiru_Fevereiru_Marsu_Abril_Maiu_Juniu_Juliu_Augustu_Setembru_Outubru_Novembru_Dezembru".split("_"),monthsShort:"Jan_Fev_Mar_Abr_Mai_Jun_Jul_Aug_Set_Out_Nov_Dez".split("_"),weekdays:"Domingu_Segunda_Tersa_Kuarta_Kinta_Sexta_Sabadu".split("_"),weekdaysShort:"Dom_Seg_Ters_Kua_Kint_Sext_Sab".split("_"),weekdaysMin:"Do_Seg_Te_Ku_Ki_Sex_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Ohin iha] LT",nextDay:"[Aban iha] LT",nextWeek:"dddd [iha] LT",lastDay:"[Horiseik iha] LT",lastWeek:"dddd [semana kotuk] [iha] LT",sameElse:"L"},relativeTime:{future:"iha %s",past:"%s liuba",s:"minutu balun",m:"minutu ida",mm:"minutus %d",h:"horas ida",hh:"horas %d",d:"loron ida",dd:"loron %d",M:"fulan ida",MM:"fulan %d",y:"tinan ida",yy:"tinan %d"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("th",{months:"มกราคม_กุมภาพันธ์_มีนาคม_เมษายน_พฤษภาคม_มิถุนายน_กรกฎาคม_สิงหาคม_กันยายน_ตุลาคม_พฤศจิกายน_ธันวาคม".split("_"),monthsShort:"ม.ค._ก.พ._มี.ค._เม.ย._พ.ค._มิ.ย._ก.ค._ส.ค._ก.ย._ต.ค._พ.ย._ธ.ค.".split("_"),monthsParseExact:!0,weekdays:"อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัสบดี_ศุกร์_เสาร์".split("_"),weekdaysShort:"อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัส_ศุกร์_เสาร์".split("_"),weekdaysMin:"อา._จ._อ._พ._พฤ._ศ._ส.".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY เวลา H:mm",LLLL:"วันddddที่ D MMMM YYYY เวลา H:mm"},meridiemParse:/ก่อนเที่ยง|หลังเที่ยง/,isPM:function(e){return"หลังเที่ยง"===e},meridiem:function(e,t,n){return e<12?"ก่อนเที่ยง":"หลังเที่ยง"},calendar:{sameDay:"[วันนี้ เวลา] LT",nextDay:"[พรุ่งนี้ เวลา] LT",nextWeek:"dddd[หน้า เวลา] LT",lastDay:"[เมื่อวานนี้ เวลา] LT",lastWeek:"[วัน]dddd[ที่แล้ว เวลา] LT",sameElse:"L"},relativeTime:{future:"อีก %s",past:"%sที่แล้ว",s:"ไม่กี่วินาที",m:"1 นาที",mm:"%d นาที",h:"1 ชั่วโมง",hh:"%d ชั่วโมง",d:"1 วัน",dd:"%d วัน",M:"1 เดือน",MM:"%d เดือน",y:"1 ปี",yy:"%d ปี"}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("tl-ph",{months:"Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre".split("_"),monthsShort:"Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis".split("_"),weekdays:"Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado".split("_"),weekdaysShort:"Lin_Lun_Mar_Miy_Huw_Biy_Sab".split("_"),weekdaysMin:"Li_Lu_Ma_Mi_Hu_Bi_Sab".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"MM/D/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY HH:mm",LLLL:"dddd, MMMM DD, YYYY HH:mm"},calendar:{sameDay:"LT [ngayong araw]",nextDay:"[Bukas ng] LT",nextWeek:"LT [sa susunod na] dddd",lastDay:"LT [kahapon]",lastWeek:"LT [noong nakaraang] dddd",sameElse:"L"},relativeTime:{future:"sa loob ng %s",past:"%s ang nakalipas",s:"ilang segundo",m:"isang minuto",mm:"%d minuto",h:"isang oras",hh:"%d oras",d:"isang araw",dd:"%d araw",M:"isang buwan",MM:"%d buwan",y:"isang taon",yy:"%d taon"},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:function(e){return e},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";var t="pagh_wa’_cha’_wej_loS_vagh_jav_Soch_chorgh_Hut".split("_");function n(e,n,r,a){var o=function(e){var n=Math.floor(e%1e3/100),r=Math.floor(e%100/10),a=e%10,o="";return n>0&&(o+=t[n]+"vatlh"),r>0&&(o+=(""!==o?" ":"")+t[r]+"maH"),a>0&&(o+=(""!==o?" ":"")+t[a]),""===o?"pagh":o}(e);switch(r){case"mm":return o+" tup";case"hh":return o+" rep";case"dd":return o+" jaj";case"MM":return o+" jar";case"yy":return o+" DIS"}}e.defineLocale("tlh",{months:"tera’ jar wa’_tera’ jar cha’_tera’ jar wej_tera’ jar loS_tera’ jar vagh_tera’ jar jav_tera’ jar Soch_tera’ jar chorgh_tera’ jar Hut_tera’ jar wa’maH_tera’ jar wa’maH wa’_tera’ jar wa’maH cha’".split("_"),monthsShort:"jar wa’_jar cha’_jar wej_jar loS_jar vagh_jar jav_jar Soch_jar chorgh_jar Hut_jar wa’maH_jar wa’maH wa’_jar wa’maH cha’".split("_"),monthsParseExact:!0,weekdays:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),weekdaysShort:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),weekdaysMin:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[DaHjaj] LT",nextDay:"[wa’leS] LT",nextWeek:"LLL",lastDay:"[wa’Hu’] LT",lastWeek:"LLL",sameElse:"L"},relativeTime:{future:function(e){var t=e;return t=-1!==e.indexOf("jaj")?t.slice(0,-3)+"leS":-1!==e.indexOf("jar")?t.slice(0,-3)+"waQ":-1!==e.indexOf("DIS")?t.slice(0,-3)+"nem":t+" pIq"},past:function(e){var t=e;return t=-1!==e.indexOf("jaj")?t.slice(0,-3)+"Hu’":-1!==e.indexOf("jar")?t.slice(0,-3)+"wen":-1!==e.indexOf("DIS")?t.slice(0,-3)+"ben":t+" ret"},s:"puS lup",m:"wa’ tup",mm:n,h:"wa’ rep",hh:n,d:"wa’ jaj",dd:n,M:"wa’ jar",MM:n,y:"wa’ DIS",yy:n},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={1:"'inci",5:"'inci",8:"'inci",70:"'inci",80:"'inci",2:"'nci",7:"'nci",20:"'nci",50:"'nci",3:"'üncü",4:"'üncü",100:"'üncü",6:"'ncı",9:"'uncu",10:"'uncu",30:"'uncu",60:"'ıncı",90:"'ıncı"};e.defineLocale("tr",{months:"Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık".split("_"),monthsShort:"Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara".split("_"),weekdays:"Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi".split("_"),weekdaysShort:"Paz_Pts_Sal_Çar_Per_Cum_Cts".split("_"),weekdaysMin:"Pz_Pt_Sa_Ça_Pe_Cu_Ct".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[bugün saat] LT",nextDay:"[yarın saat] LT",nextWeek:"[haftaya] dddd [saat] LT",lastDay:"[dün] LT",lastWeek:"[geçen hafta] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s sonra",past:"%s önce",s:"birkaç saniye",m:"bir dakika",mm:"%d dakika",h:"bir saat",hh:"%d saat",d:"bir gün",dd:"%d gün",M:"bir ay",MM:"%d ay",y:"bir yıl",yy:"%d yıl"},dayOfMonthOrdinalParse:/\d{1,2}'(inci|nci|üncü|ncı|uncu|ıncı)/,ordinal:function(e){if(0===e)return e+"'ıncı";var n=e%10;return e+(t[n]||t[e%100-n]||t[e>=100?100:null])},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a={s:["viensas secunds","'iensas secunds"],m:["'n míut","'iens míut"],mm:[e+" míuts",e+" míuts"],h:["'n þora","'iensa þora"],hh:[e+" þoras",e+" þoras"],d:["'n ziua","'iensa ziua"],dd:[e+" ziuas",e+" ziuas"],M:["'n mes","'iens mes"],MM:[e+" mesen",e+" mesen"],y:["'n ar","'iens ar"],yy:[e+" ars",e+" ars"]};return r?a[n][0]:t?a[n][0]:a[n][1]}e.defineLocale("tzl",{months:"Januar_Fevraglh_Març_Avrïu_Mai_Gün_Julia_Guscht_Setemvar_Listopäts_Noemvar_Zecemvar".split("_"),monthsShort:"Jan_Fev_Mar_Avr_Mai_Gün_Jul_Gus_Set_Lis_Noe_Zec".split("_"),weekdays:"Súladi_Lúneçi_Maitzi_Márcuri_Xhúadi_Viénerçi_Sáturi".split("_"),weekdaysShort:"Súl_Lún_Mai_Már_Xhú_Vié_Sát".split("_"),weekdaysMin:"Sú_Lú_Ma_Má_Xh_Vi_Sá".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD.MM.YYYY",LL:"D. MMMM [dallas] YYYY",LLL:"D. MMMM [dallas] YYYY HH.mm",LLLL:"dddd, [li] D. MMMM [dallas] YYYY HH.mm"},meridiemParse:/d\'o|d\'a/i,isPM:function(e){return"d'o"===e.toLowerCase()},meridiem:function(e,t,n){return e>11?n?"d'o":"D'O":n?"d'a":"D'A"},calendar:{sameDay:"[oxhi à] LT",nextDay:"[demà à] LT",nextWeek:"dddd [à] LT",lastDay:"[ieiri à] LT",lastWeek:"[sür el] dddd [lasteu à] LT",sameElse:"L"},relativeTime:{future:"osprei %s",past:"ja%s",s:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("tzm",{months:"ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ".split("_"),monthsShort:"ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ".split("_"),weekdays:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),weekdaysShort:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),weekdaysMin:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[ⴰⵙⴷⵅ ⴴ] LT",nextDay:"[ⴰⵙⴽⴰ ⴴ] LT",nextWeek:"dddd [ⴴ] LT",lastDay:"[ⴰⵚⴰⵏⵜ ⴴ] LT",lastWeek:"dddd [ⴴ] LT",sameElse:"L"},relativeTime:{future:"ⴷⴰⴷⵅ ⵙ ⵢⴰⵏ %s",past:"ⵢⴰⵏ %s",s:"ⵉⵎⵉⴽ",m:"ⵎⵉⵏⵓⴺ",mm:"%d ⵎⵉⵏⵓⴺ",h:"ⵙⴰⵄⴰ",hh:"%d ⵜⴰⵙⵙⴰⵄⵉⵏ",d:"ⴰⵙⵙ",dd:"%d oⵙⵙⴰⵏ",M:"ⴰⵢoⵓⵔ",MM:"%d ⵉⵢⵢⵉⵔⵏ",y:"ⴰⵙⴳⴰⵙ",yy:"%d ⵉⵙⴳⴰⵙⵏ"},week:{dow:6,doy:12}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("tzm-latn",{months:"innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir".split("_"),monthsShort:"innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir".split("_"),weekdays:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),weekdaysShort:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),weekdaysMin:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[asdkh g] LT",nextDay:"[aska g] LT",nextWeek:"dddd [g] LT",lastDay:"[assant g] LT",lastWeek:"dddd [g] LT",sameElse:"L"},relativeTime:{future:"dadkh s yan %s",past:"yan %s",s:"imik",m:"minuḍ",mm:"%d minuḍ",h:"saɛa",hh:"%d tassaɛin",d:"ass",dd:"%d ossan",M:"ayowr",MM:"%d iyyirn",y:"asgas",yy:"%d isgasn"},week:{dow:6,doy:12}})}(n(0))},function(e,t,n){!function(e){"use strict";function t(e,t,n){var r,a;return"m"===n?t?"хвилина":"хвилину":"h"===n?t?"година":"годину":e+" "+(r=+e,a={mm:t?"хвилина_хвилини_хвилин":"хвилину_хвилини_хвилин",hh:t?"година_години_годин":"годину_години_годин",dd:"день_дні_днів",MM:"місяць_місяці_місяців",yy:"рік_роки_років"}[n].split("_"),r%10==1&&r%100!=11?a[0]:r%10>=2&&r%10<=4&&(r%100<10||r%100>=20)?a[1]:a[2])}function n(e){return function(){return e+"о"+(11===this.hours()?"б":"")+"] LT"}}e.defineLocale("uk",{months:{format:"січня_лютого_березня_квітня_травня_червня_липня_серпня_вересня_жовтня_листопада_грудня".split("_"),standalone:"січень_лютий_березень_квітень_травень_червень_липень_серпень_вересень_жовтень_листопад_грудень".split("_")},monthsShort:"січ_лют_бер_квіт_трав_черв_лип_серп_вер_жовт_лист_груд".split("_"),weekdays:function(e,t){var n={nominative:"неділя_понеділок_вівторок_середа_четвер_п’ятниця_субота".split("_"),accusative:"неділю_понеділок_вівторок_середу_четвер_п’ятницю_суботу".split("_"),genitive:"неділі_понеділка_вівторка_середи_четверга_п’ятниці_суботи".split("_")};return e?n[/(\[[ВвУу]\]) ?dddd/.test(t)?"accusative":/\[?(?:минулої|наступної)? ?\] ?dddd/.test(t)?"genitive":"nominative"][e.day()]:n.nominative},weekdaysShort:"нд_пн_вт_ср_чт_пт_сб".split("_"),weekdaysMin:"нд_пн_вт_ср_чт_пт_сб".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY р.",LLL:"D MMMM YYYY р., HH:mm",LLLL:"dddd, D MMMM YYYY р., HH:mm"},calendar:{sameDay:n("[Сьогодні "),nextDay:n("[Завтра "),lastDay:n("[Вчора "),nextWeek:n("[У] dddd ["),lastWeek:function(){switch(this.day()){case 0:case 3:case 5:case 6:return n("[Минулої] dddd [").call(this);case 1:case 2:case 4:return n("[Минулого] dddd [").call(this)}},sameElse:"L"},relativeTime:{future:"за %s",past:"%s тому",s:"декілька секунд",m:t,mm:t,h:"годину",hh:t,d:"день",dd:t,M:"місяць",MM:t,y:"рік",yy:t},meridiemParse:/ночі|ранку|дня|вечора/,isPM:function(e){return/^(дня|вечора)$/.test(e)},meridiem:function(e,t,n){return e<4?"ночі":e<12?"ранку":e<17?"дня":"вечора"},dayOfMonthOrdinalParse:/\d{1,2}-(й|го)/,ordinal:function(e,t){switch(t){case"M":case"d":case"DDD":case"w":case"W":return e+"-й";case"D":return e+"-го";default:return e}},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";var t=["جنوری","فروری","مارچ","اپریل","مئی","جون","جولائی","اگست","ستمبر","اکتوبر","نومبر","دسمبر"],n=["اتوار","پیر","منگل","بدھ","جمعرات","جمعہ","ہفتہ"];e.defineLocale("ur",{months:t,monthsShort:t,weekdays:n,weekdaysShort:n,weekdaysMin:n,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd، D MMMM YYYY HH:mm"},meridiemParse:/صبح|شام/,isPM:function(e){return"شام"===e},meridiem:function(e,t,n){return e<12?"صبح":"شام"},calendar:{sameDay:"[آج بوقت] LT",nextDay:"[کل بوقت] LT",nextWeek:"dddd [بوقت] LT",lastDay:"[گذشتہ روز بوقت] LT",lastWeek:"[گذشتہ] dddd [بوقت] LT",sameElse:"L"},relativeTime:{future:"%s بعد",past:"%s قبل",s:"چند سیکنڈ",m:"ایک منٹ",mm:"%d منٹ",h:"ایک گھنٹہ",hh:"%d گھنٹے",d:"ایک دن",dd:"%d دن",M:"ایک ماہ",MM:"%d ماہ",y:"ایک سال",yy:"%d سال"},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("uz",{months:"январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр".split("_"),monthsShort:"янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек".split("_"),weekdays:"Якшанба_Душанба_Сешанба_Чоршанба_Пайшанба_Жума_Шанба".split("_"),weekdaysShort:"Якш_Душ_Сеш_Чор_Пай_Жум_Шан".split("_"),weekdaysMin:"Як_Ду_Се_Чо_Па_Жу_Ша".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"D MMMM YYYY, dddd HH:mm"},calendar:{sameDay:"[Бугун соат] LT [да]",nextDay:"[Эртага] LT [да]",nextWeek:"dddd [куни соат] LT [да]",lastDay:"[Кеча соат] LT [да]",lastWeek:"[Утган] dddd [куни соат] LT [да]",sameElse:"L"},relativeTime:{future:"Якин %s ичида",past:"Бир неча %s олдин",s:"фурсат",m:"бир дакика",mm:"%d дакика",h:"бир соат",hh:"%d соат",d:"бир кун",dd:"%d кун",M:"бир ой",MM:"%d ой",y:"бир йил",yy:"%d йил"},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("uz-latn",{months:"Yanvar_Fevral_Mart_Aprel_May_Iyun_Iyul_Avgust_Sentabr_Oktabr_Noyabr_Dekabr".split("_"),monthsShort:"Yan_Fev_Mar_Apr_May_Iyun_Iyul_Avg_Sen_Okt_Noy_Dek".split("_"),weekdays:"Yakshanba_Dushanba_Seshanba_Chorshanba_Payshanba_Juma_Shanba".split("_"),weekdaysShort:"Yak_Dush_Sesh_Chor_Pay_Jum_Shan".split("_"),weekdaysMin:"Ya_Du_Se_Cho_Pa_Ju_Sha".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"D MMMM YYYY, dddd HH:mm"},calendar:{sameDay:"[Bugun soat] LT [da]",nextDay:"[Ertaga] LT [da]",nextWeek:"dddd [kuni soat] LT [da]",lastDay:"[Kecha soat] LT [da]",lastWeek:"[O'tgan] dddd [kuni soat] LT [da]",sameElse:"L"},relativeTime:{future:"Yaqin %s ichida",past:"Bir necha %s oldin",s:"soniya",m:"bir daqiqa",mm:"%d daqiqa",h:"bir soat",hh:"%d soat",d:"bir kun",dd:"%d kun",M:"bir oy",MM:"%d oy",y:"bir yil",yy:"%d yil"},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("vi",{months:"tháng 1_tháng 2_tháng 3_tháng 4_tháng 5_tháng 6_tháng 7_tháng 8_tháng 9_tháng 10_tháng 11_tháng 12".split("_"),monthsShort:"Th01_Th02_Th03_Th04_Th05_Th06_Th07_Th08_Th09_Th10_Th11_Th12".split("_"),monthsParseExact:!0,weekdays:"chủ nhật_thứ hai_thứ ba_thứ tư_thứ năm_thứ sáu_thứ bảy".split("_"),weekdaysShort:"CN_T2_T3_T4_T5_T6_T7".split("_"),weekdaysMin:"CN_T2_T3_T4_T5_T6_T7".split("_"),weekdaysParseExact:!0,meridiemParse:/sa|ch/i,isPM:function(e){return/^ch$/i.test(e)},meridiem:function(e,t,n){return e<12?n?"sa":"SA":n?"ch":"CH"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM [năm] YYYY",LLL:"D MMMM [năm] YYYY HH:mm",LLLL:"dddd, D MMMM [năm] YYYY HH:mm",l:"DD/M/YYYY",ll:"D MMM YYYY",lll:"D MMM YYYY HH:mm",llll:"ddd, D MMM YYYY HH:mm"},calendar:{sameDay:"[Hôm nay lúc] LT",nextDay:"[Ngày mai lúc] LT",nextWeek:"dddd [tuần tới lúc] LT",lastDay:"[Hôm qua lúc] LT",lastWeek:"dddd [tuần rồi lúc] LT",sameElse:"L"},relativeTime:{future:"%s tới",past:"%s trước",s:"vài giây",m:"một phút",mm:"%d phút",h:"một giờ",hh:"%d giờ",d:"một ngày",dd:"%d ngày",M:"một tháng",MM:"%d tháng",y:"một năm",yy:"%d năm"},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:function(e){return e},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("x-pseudo",{months:"J~áñúá~rý_F~ébrú~árý_~Márc~h_Áp~ríl_~Máý_~Júñé~_Júl~ý_Áú~gúst~_Sép~témb~ér_Ó~ctób~ér_Ñ~óvém~bér_~Décé~mbér".split("_"),monthsShort:"J~áñ_~Féb_~Már_~Ápr_~Máý_~Júñ_~Júl_~Áúg_~Sép_~Óct_~Ñóv_~Déc".split("_"),monthsParseExact:!0,weekdays:"S~úñdá~ý_Mó~ñdáý~_Túé~sdáý~_Wéd~ñésd~áý_T~húrs~dáý_~Fríd~áý_S~átúr~dáý".split("_"),weekdaysShort:"S~úñ_~Móñ_~Túé_~Wéd_~Thú_~Frí_~Sát".split("_"),weekdaysMin:"S~ú_Mó~_Tú_~Wé_T~h_Fr~_Sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[T~ódá~ý át] LT",nextDay:"[T~ómó~rró~w át] LT",nextWeek:"dddd [át] LT",lastDay:"[Ý~ést~érdá~ý át] LT",lastWeek:"[L~ást] dddd [át] LT",sameElse:"L"},relativeTime:{future:"í~ñ %s",past:"%s á~gó",s:"á ~féw ~sécó~ñds",m:"á ~míñ~úté",mm:"%d m~íñú~tés",h:"á~ñ hó~úr",hh:"%d h~óúrs",d:"á ~dáý",dd:"%d d~áýs",M:"á ~móñ~th",MM:"%d m~óñt~hs",y:"á ~ýéár",yy:"%d ý~éárs"},dayOfMonthOrdinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("yo",{months:"Sẹ́rẹ́_Èrèlè_Ẹrẹ̀nà_Ìgbé_Èbibi_Òkùdu_Agẹmo_Ògún_Owewe_Ọ̀wàrà_Bélú_Ọ̀pẹ̀̀".split("_"),monthsShort:"Sẹ́r_Èrl_Ẹrn_Ìgb_Èbi_Òkù_Agẹ_Ògú_Owe_Ọ̀wà_Bél_Ọ̀pẹ̀̀".split("_"),weekdays:"Àìkú_Ajé_Ìsẹ́gun_Ọjọ́rú_Ọjọ́bọ_Ẹtì_Àbámẹ́ta".split("_"),weekdaysShort:"Àìk_Ajé_Ìsẹ́_Ọjr_Ọjb_Ẹtì_Àbá".split("_"),weekdaysMin:"Àì_Aj_Ìs_Ọr_Ọb_Ẹt_Àb".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Ònì ni] LT",nextDay:"[Ọ̀la ni] LT",nextWeek:"dddd [Ọsẹ̀ tón'bọ] [ni] LT",lastDay:"[Àna ni] LT",lastWeek:"dddd [Ọsẹ̀ tólọ́] [ni] LT",sameElse:"L"},relativeTime:{future:"ní %s",past:"%s kọjá",s:"ìsẹjú aayá die",m:"ìsẹjú kan",mm:"ìsẹjú %d",h:"wákati kan",hh:"wákati %d",d:"ọjọ́ kan",dd:"ọjọ́ %d",M:"osù kan",MM:"osù %d",y:"ọdún kan",yy:"ọdún %d"},dayOfMonthOrdinalParse:/ọjọ́\s\d{1,2}/,ordinal:"ọjọ́ %d",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("zh-cn",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"周日_周一_周二_周三_周四_周五_周六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY年MMMD日",LL:"YYYY年MMMD日",LLL:"YYYY年MMMD日Ah点mm分",LLLL:"YYYY年MMMD日ddddAh点mm分",l:"YYYY年MMMD日",ll:"YYYY年MMMD日",lll:"YYYY年MMMD日 HH:mm",llll:"YYYY年MMMD日dddd HH:mm"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),"凌晨"===t||"早上"===t||"上午"===t?e:"下午"===t||"晚上"===t?e+12:e>=11?e:e+12},meridiem:function(e,t,n){var r=100*e+t;return r<600?"凌晨":r<900?"早上":r<1130?"上午":r<1230?"中午":r<1800?"下午":"晚上"},calendar:{sameDay:"[今天]LT",nextDay:"[明天]LT",nextWeek:"[下]ddddLT",lastDay:"[昨天]LT",lastWeek:"[上]ddddLT",sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(日|月|周)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";case"M":return e+"月";case"w":case"W":return e+"周";default:return e}},relativeTime:{future:"%s内",past:"%s前",s:"几秒",m:"1 分钟",mm:"%d 分钟",h:"1 小时",hh:"%d 小时",d:"1 天",dd:"%d 天",M:"1 个月",MM:"%d 个月",y:"1 年",yy:"%d 年"},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("zh-hk",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"週日_週一_週二_週三_週四_週五_週六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY年MMMD日",LL:"YYYY年MMMD日",LLL:"YYYY年MMMD日 HH:mm",LLLL:"YYYY年MMMD日dddd HH:mm",l:"YYYY年MMMD日",ll:"YYYY年MMMD日",lll:"YYYY年MMMD日 HH:mm",llll:"YYYY年MMMD日dddd HH:mm"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),"凌晨"===t||"早上"===t||"上午"===t?e:"中午"===t?e>=11?e:e+12:"下午"===t||"晚上"===t?e+12:void 0},meridiem:function(e,t,n){var r=100*e+t;return r<600?"凌晨":r<900?"早上":r<1130?"上午":r<1230?"中午":r<1800?"下午":"晚上"},calendar:{sameDay:"[今天]LT",nextDay:"[明天]LT",nextWeek:"[下]ddddLT",lastDay:"[昨天]LT",lastWeek:"[上]ddddLT",sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(日|月|週)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";case"M":return e+"月";case"w":case"W":return e+"週";default:return e}},relativeTime:{future:"%s內",past:"%s前",s:"幾秒",m:"1 分鐘",mm:"%d 分鐘",h:"1 小時",hh:"%d 小時",d:"1 天",dd:"%d 天",M:"1 個月",MM:"%d 個月",y:"1 年",yy:"%d 年"}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("zh-tw",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"週日_週一_週二_週三_週四_週五_週六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY年MMMD日",LL:"YYYY年MMMD日",LLL:"YYYY年MMMD日 HH:mm",LLLL:"YYYY年MMMD日dddd HH:mm",l:"YYYY年MMMD日",ll:"YYYY年MMMD日",lll:"YYYY年MMMD日 HH:mm",llll:"YYYY年MMMD日dddd HH:mm"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),"凌晨"===t||"早上"===t||"上午"===t?e:"中午"===t?e>=11?e:e+12:"下午"===t||"晚上"===t?e+12:void 0},meridiem:function(e,t,n){var r=100*e+t;return r<600?"凌晨":r<900?"早上":r<1130?"上午":r<1230?"中午":r<1800?"下午":"晚上"},calendar:{sameDay:"[今天]LT",nextDay:"[明天]LT",nextWeek:"[下]ddddLT",lastDay:"[昨天]LT",lastWeek:"[上]ddddLT",sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(日|月|週)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";case"M":return e+"月";case"w":case"W":return e+"週";default:return e}},relativeTime:{future:"%s內",past:"%s前",s:"幾秒",m:"1 分鐘",mm:"%d 分鐘",h:"1 小時",hh:"%d 小時",d:"1 天",dd:"%d 天",M:"1 個月",MM:"%d 個月",y:"1 年",yy:"%d 年"}})}(n(0))},function(e,t,n){var r=n(223).default,a=n(172).default,o=n(171).default,i=n(257).default,s=n(190).default,u=n(35).default,l=n(177).default,d=n(189).default,c=n(181).default,f=n(182).default,p=n(183).default,h=n(162).default,_=n(188).default,m=n(18).default,y=n(258).default,v=n(187).default,M=n(16).default,b=n(13).default,g=n(32).default,D=n(14).default;e.exports={DateRangePicker:r,SingleDatePicker:i,DateRangePickerInputController:o,DateRangePickerInput:a,SingleDatePickerInput:s,DayPicker:u,DayPickerRangeController:l,DayPickerSingleDateController:d,CalendarMonthGrid:c,CalendarMonth:f,CalendarDay:p,DateRangePickerShape:h,SingleDatePickerShape:_,isInclusivelyAfterDay:m,isInclusivelyBeforeDay:y,isNextDay:v,isSameDay:M,toISODateString:b,toLocalizedDateString:g,toMomentObject:D}},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n,a){var o="undefined"!=typeof window?window.innerWidth:0,i=e===r.ANCHOR_LEFT?o-n:n,s=a||0;return function(e,t,n){t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n;return e}({},e,Math.min(t+i-s,0))};var r=n(3)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=u(n(2)),o=n(22),i=u(o),s=u(n(1));function u(e){return e&&e.__esModule?e:{default:e}}var l=27,d=function(e){function t(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var e=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return e.state={active:!1},e.handleWrapperClick=e.handleWrapperClick.bind(e),e.closePortal=e.closePortal.bind(e),e.handleOutsideMouseClick=e.handleOutsideMouseClick.bind(e),e.handleKeydown=e.handleKeydown.bind(e),e.portal=null,e.node=null,e}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),r(t,[{key:"componentDidMount",value:function(){this.props.closeOnEsc&&document.addEventListener("keydown",this.handleKeydown),this.props.closeOnOutsideClick&&(document.addEventListener("mouseup",this.handleOutsideMouseClick),document.addEventListener("touchstart",this.handleOutsideMouseClick)),this.props.isOpened&&this.openPortal()}},{key:"componentWillReceiveProps",value:function(e){void 0!==e.isOpened&&(e.isOpened&&(this.state.active?this.renderPortal(e):this.openPortal(e)),!e.isOpened&&this.state.active&&this.closePortal()),void 0===e.isOpened&&this.state.active&&this.renderPortal(e)}},{key:"componentWillUnmount",value:function(){this.props.closeOnEsc&&document.removeEventListener("keydown",this.handleKeydown),this.props.closeOnOutsideClick&&(document.removeEventListener("mouseup",this.handleOutsideMouseClick),document.removeEventListener("touchstart",this.handleOutsideMouseClick)),this.closePortal(!0)}},{key:"handleWrapperClick",value:function(e){e.preventDefault(),e.stopPropagation(),this.state.active||this.openPortal()}},{key:"openPortal",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.props;this.setState({active:!0}),this.renderPortal(e),this.props.onOpen(this.node)}},{key:"closePortal",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]&&arguments[0],n=function(n){e.node&&(i.default.unmountComponentAtNode(e.node),document.body.removeChild(e.node)),e.portal=null,e.node=null,!0!==(void 0===n?t:n)&&e.setState({active:!1})};this.state.active&&(this.props.beforeClose?this.props.beforeClose(this.node,n):n(),this.props.onClose())}},{key:"handleOutsideMouseClick",value:function(e){this.state.active&&((0,o.findDOMNode)(this.portal).contains(e.target)||e.button&&0!==e.button||(e.stopPropagation(),this.closePortal()))}},{key:"handleKeydown",value:function(e){e.keyCode===l&&this.state.active&&this.closePortal()}},{key:"renderPortal",value:function(e){this.node||(this.node=document.createElement("div"),document.body.appendChild(this.node));var t=e.children;"function"==typeof e.children.type&&(t=a.default.cloneElement(e.children,{closePortal:this.closePortal})),this.portal=i.default.unstable_renderSubtreeIntoContainer(this,t,this.node,this.props.onUpdate)}},{key:"render",value:function(){return this.props.openByClickOn?a.default.cloneElement(this.props.openByClickOn,{onClick:this.handleWrapperClick}):null}}]),t}(a.default.Component);t.default=d,d.propTypes={children:s.default.element.isRequired,openByClickOn:s.default.element,closeOnEsc:s.default.bool,closeOnOutsideClick:s.default.bool,isOpened:s.default.bool,onOpen:s.default.func,onClose:s.default.func,beforeClose:s.default.func,onUpdate:s.default.func},d.defaultProps={onOpen:function(){},onClose:function(){},onUpdate:function(){}},e.exports=t.default},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r=f(n(1)),a=f(n(10)),o=n(6),i=n(7),s=f(n(8)),u=f(n(168)),l=f(n(169)),d=f(n(170)),c=f(n(11));function f(e){return e&&e.__esModule?e:{default:e}}t.default={startDate:a.default.momentObj,endDate:a.default.momentObj,onDatesChange:r.default.func.isRequired,focusedInput:u.default,onFocusChange:r.default.func.isRequired,onClose:r.default.func,startDateId:r.default.string.isRequired,startDatePlaceholderText:r.default.string,endDateId:r.default.string.isRequired,endDatePlaceholderText:r.default.string,disabled:r.default.bool,required:r.default.bool,readOnly:r.default.bool,screenReaderInputMessage:r.default.string,showClearDates:r.default.bool,showDefaultInputIcon:r.default.bool,customInputIcon:r.default.node,customArrowIcon:r.default.node,customCloseIcon:r.default.node,renderMonth:r.default.func,orientation:l.default,anchorDirection:d.default,horizontalMargin:r.default.number,withPortal:r.default.bool,withFullScreenPortal:r.default.bool,daySize:o.nonNegativeInteger,isRTL:r.default.bool,firstDayOfWeek:c.default,initialVisibleMonth:r.default.func,numberOfMonths:r.default.number,keepOpenOnDateSelect:r.default.bool,reopenPickerOnClearDates:r.default.bool,renderCalendarInfo:r.default.func,hideKeyboardShortcutsPanel:r.default.bool,navPrev:r.default.node,navNext:r.default.node,onPrevMonthClick:r.default.func,onNextMonthClick:r.default.func,renderDay:r.default.func,minimumNights:r.default.number,enableOutsideDays:r.default.bool,isDayBlocked:r.default.func,isOutsideRange:r.default.func,isDayHighlighted:r.default.func,displayFormat:r.default.oneOfType([r.default.string,r.default.func]),monthFormat:r.default.string,phrases:r.default.shape((0,s.default)(i.DateRangePickerPhrases))}},function(e,t,n){"use strict";var r=Array.prototype.slice,a=n(164),o=Object.keys,i=o?function(e){return o(e)}:n(232),s=Object.keys;i.shim=function(){Object.keys?function(){var e=Object.keys(arguments);return e&&e.length===arguments.length}(1,2)||(Object.keys=function(e){return a(e)?s(r.call(e)):s(e)}):Object.keys=i;return Object.keys||i},e.exports=i},function(e,t,n){"use strict";var r=Object.prototype.toString;e.exports=function(e){var t=r.call(e),n="[object Arguments]"===t;return n||(n="[object Array]"!==t&&null!==e&&"object"==typeof e&&"number"==typeof e.length&&e.length>=0&&"[object Function]"===r.call(e.callee)),n}},function(e,t,n){"use strict";var r=n(163),a=n(27),o=function(e){return null!=e},i=n(166)(),s=Object,u=a.call(Function.call,Array.prototype.push),l=a.call(Function.call,Object.prototype.propertyIsEnumerable),d=i?Object.getOwnPropertySymbols:null;e.exports=function(e,t){if(!o(e))throw new TypeError("target must be an object");var n,a,c,f,p,h,_,m=s(e);for(n=1;n<arguments.length;++n){a=s(arguments[n]),f=r(a);var y=i&&(Object.getOwnPropertySymbols||d);if(y)for(p=y(a),c=0;c<p.length;++c)_=p[c],l(a,_)&&u(f,_);for(c=0;c<f.length;++c)h=a[_=f[c]],l(a,_)&&(m[_]=h)}return m}},function(e,t,n){"use strict";e.exports=function(){if("function"!=typeof Symbol||"function"!=typeof Object.getOwnPropertySymbols)return!1;if("symbol"==typeof Symbol.iterator)return!0;var e={},t=Symbol("test"),n=Object(t);if("string"==typeof t)return!1;if("[object Symbol]"!==Object.prototype.toString.call(t))return!1;if("[object Symbol]"!==Object.prototype.toString.call(n))return!1;for(t in e[t]=42,e)return!1;if("function"==typeof Object.keys&&0!==Object.keys(e).length)return!1;if("function"==typeof Object.getOwnPropertyNames&&0!==Object.getOwnPropertyNames(e).length)return!1;var r=Object.getOwnPropertySymbols(e);if(1!==r.length||r[0]!==t)return!1;if(!Object.prototype.propertyIsEnumerable.call(e,t))return!1;if("function"==typeof Object.getOwnPropertyDescriptor){var a=Object.getOwnPropertyDescriptor(e,t);if(42!==a.value||!0!==a.enumerable)return!1}return!0}},function(e,t,n){"use strict";var r=n(165);e.exports=function(){return Object.assign?function(){if(!Object.assign)return!1;for(var e="abcdefghijklmnopqrst",t=e.split(""),n={},r=0;r<t.length;++r)n[t[r]]=t[r];var a=Object.assign({},n),o="";for(var i in a)o+=i;return e!==o}()?r:function(){if(!Object.assign||!Object.preventExtensions)return!1;var e=Object.preventExtensions({1:2});try{Object.assign(e,"xy")}catch(t){return"y"===e[1]}return!1}()?r:Object.assign:r}},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r,a=n(1),o=(r=a)&&r.__esModule?r:{default:r},i=n(3);t.default=o.default.oneOf([i.START_DATE,i.END_DATE])},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r,a=n(1),o=(r=a)&&r.__esModule?r:{default:r},i=n(3);t.default=o.default.oneOf([i.HORIZONTAL_ORIENTATION,i.VERTICAL_ORIENTATION])},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r,a=n(1),o=(r=a)&&r.__esModule?r:{default:r},i=n(3);t.default=o.default.oneOf([i.ANCHOR_LEFT,i.ANCHOR_RIGHT])},function(e,t,n){e.exports=function(e){var t={};function n(r){if(t[r])return t[r].exports;var a=t[r]={i:r,l:!1,exports:{}};return e[r].call(a.exports,a,a.exports,n),a.l=!0,a.exports}return n.m=e,n.c=t,n.i=function(e){return e},n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:r})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=65)}({0:function(e,t){e.exports=n(2)},1:function(e,t){e.exports=n(6)},10:function(e,t){e.exports=n(10)},13:function(e,t){e.exports=n(13)},15:function(e,t){e.exports=n(18)},2:function(e,t){e.exports=n(7)},3:function(e,t){e.exports=n(1)},30:function(e,t){e.exports=n(19)},31:function(e,t){e.exports=n(32)},32:function(e,t){e.exports=n(14)},4:function(e,t){e.exports=n(3)},5:function(e,t){e.exports=n(8)},52:function(e,t){e.exports=n(172)},65:function(e,t,n){var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=M(n(0)),i=M(n(3)),s=M(n(7)),u=M(n(10)),l=n(1),d=n(2),c=M(n(5)),f=M(n(52)),p=M(n(32)),h=M(n(31)),_=M(n(13)),m=M(n(15)),y=M(n(30)),v=n(4);function M(e){return e&&e.__esModule?e:{default:e}}var b=(0,l.forbidExtraProps)({startDate:u.default.momentObj,startDateId:i.default.string,startDatePlaceholderText:i.default.string,isStartDateFocused:i.default.bool,endDate:u.default.momentObj,endDateId:i.default.string,endDatePlaceholderText:i.default.string,isEndDateFocused:i.default.bool,screenReaderMessage:i.default.string,showClearDates:i.default.bool,showCaret:i.default.bool,showDefaultInputIcon:i.default.bool,disabled:i.default.bool,required:i.default.bool,readOnly:i.default.bool,keepOpenOnDateSelect:i.default.bool,reopenPickerOnClearDates:i.default.bool,withFullScreenPortal:i.default.bool,minimumNights:l.nonNegativeInteger,isOutsideRange:i.default.func,displayFormat:i.default.oneOfType([i.default.string,i.default.func]),onFocusChange:i.default.func,onClose:i.default.func,onDatesChange:i.default.func,onArrowDown:i.default.func,onQuestionMark:i.default.func,customInputIcon:i.default.node,customArrowIcon:i.default.node,customCloseIcon:i.default.node,isFocused:i.default.bool,phrases:i.default.shape((0,c.default)(d.DateRangePickerInputPhrases)),isRTL:i.default.bool}),g={startDate:null,startDateId:v.START_DATE,startDatePlaceholderText:"Start Date",isStartDateFocused:!1,endDate:null,endDateId:v.END_DATE,endDatePlaceholderText:"End Date",isEndDateFocused:!1,screenReaderMessage:"",showClearDates:!1,showCaret:!1,showDefaultInputIcon:!1,disabled:!1,required:!1,readOnly:!1,keepOpenOnDateSelect:!1,reopenPickerOnClearDates:!1,withFullScreenPortal:!1,minimumNights:1,isOutsideRange:function(e){return!(0,m.default)(e,(0,s.default)())},displayFormat:function(){return s.default.localeData().longDateFormat("L")},onFocusChange:function(){},onClose:function(){},onDatesChange:function(){},onArrowDown:function(){},onQuestionMark:function(){},customInputIcon:null,customArrowIcon:null,customCloseIcon:null,isFocused:!1,phrases:d.DateRangePickerInputPhrases,isRTL:!1},D=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":r(t))&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.onClearFocus=n.onClearFocus.bind(n),n.onStartDateChange=n.onStartDateChange.bind(n),n.onStartDateFocus=n.onStartDateFocus.bind(n),n.onEndDateChange=n.onEndDateChange.bind(n),n.onEndDateFocus=n.onEndDateFocus.bind(n),n.clearDates=n.clearDates.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":r(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),a(t,[{key:"onClearFocus",value:function(){var e=this.props,t=e.onFocusChange,n=e.onClose,r=e.startDate,a=e.endDate;t(null),n({startDate:r,endDate:a})}},{key:"onEndDateChange",value:function(e){var t=this.props,n=t.startDate,r=t.isOutsideRange,a=t.minimumNights,o=t.keepOpenOnDateSelect,i=t.onDatesChange,s=(0,p.default)(e,this.getDisplayFormat());!s||r(s)||n&&(0,y.default)(s,n.clone().add(a,"days"))?i({startDate:n,endDate:null}):(i({startDate:n,endDate:s}),o||this.onClearFocus())}},{key:"onEndDateFocus",value:function(){var e=this.props,t=e.startDate,n=e.onFocusChange,r=e.withFullScreenPortal,a=e.disabled;t||!r||a?a||n(v.END_DATE):n(v.START_DATE)}},{key:"onStartDateChange",value:function(e){var t=(0,p.default)(e,this.getDisplayFormat()),n=this.props.endDate,r=this.props,a=r.isOutsideRange,o=r.minimumNights,i=r.onDatesChange,s=r.onFocusChange;t&&!a(t)?(t&&(0,y.default)(n,t.clone().add(o,"days"))&&(n=null),i({startDate:t,endDate:n}),s(v.END_DATE)):i({startDate:null,endDate:n})}},{key:"onStartDateFocus",value:function(){this.props.disabled||this.props.onFocusChange(v.START_DATE)}},{key:"getDisplayFormat",value:function(){var e=this.props.displayFormat;return"string"==typeof e?e:e()}},{key:"getDateString",value:function(e){var t=this.getDisplayFormat();return e&&t?e&&e.format(t):(0,h.default)(e)}},{key:"clearDates",value:function(){var e=this.props,t=e.onDatesChange,n=e.reopenPickerOnClearDates,r=e.onFocusChange;t({startDate:null,endDate:null}),n&&r(v.START_DATE)}},{key:"render",value:function(){var e=this.props,t=e.startDate,n=e.startDateId,r=e.startDatePlaceholderText,a=e.isStartDateFocused,i=e.endDate,s=e.endDateId,u=e.endDatePlaceholderText,l=e.isEndDateFocused,d=e.screenReaderMessage,c=e.showClearDates,p=e.showCaret,h=e.showDefaultInputIcon,m=e.customInputIcon,y=e.customArrowIcon,v=e.customCloseIcon,M=e.disabled,b=e.required,g=e.readOnly,D=e.isFocused,k=e.phrases,L=e.onArrowDown,w=e.onQuestionMark,Y=e.isRTL,T=this.getDateString(t),S=(0,_.default)(t),O=this.getDateString(i),P=(0,_.default)(i);return o.default.createElement(f.default,{startDate:T,startDateValue:S,startDateId:n,startDatePlaceholderText:r,isStartDateFocused:a,endDate:O,endDateValue:P,endDateId:s,endDatePlaceholderText:u,isEndDateFocused:l,isFocused:D,disabled:M,required:b,readOnly:g,showCaret:p,showDefaultInputIcon:h,customInputIcon:m,customArrowIcon:y,customCloseIcon:v,phrases:k,onStartDateChange:this.onStartDateChange,onStartDateFocus:this.onStartDateFocus,onStartDateShiftTab:this.onClearFocus,onEndDateChange:this.onEndDateChange,onEndDateFocus:this.onEndDateFocus,onEndDateTab:this.onClearFocus,showClearDates:c,onClearDates:this.clearDates,screenReaderMessage:d,onArrowDown:L,onQuestionMark:w,isRTL:Y})}}]),t}(o.default.Component);t.default=D,D.propTypes=b,D.defaultProps=g},7:function(e,t){e.exports=n(0)}})},function(e,t,n){e.exports=function(e){var t={};function n(r){if(t[r])return t[r].exports;var a=t[r]={i:r,l:!1,exports:{}};return e[r].call(a.exports,a,a.exports,n),a.l=!0,a.exports}return n.m=e,n.c=t,n.i=function(e){return e},n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:r})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=64)}({0:function(e,t){e.exports=n(2)},1:function(e,t){e.exports=n(6)},11:function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r,a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0),s=(r=i)&&r.__esModule?r:{default:r};function u(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function l(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var d=function(e){function t(){return u(this,t),l(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),o(t,[{key:"render",value:function(){return s.default.createElement("svg",a({viewBox:"0 0 12 12"},this.props),s.default.createElement("path",{fillRule:"evenodd",d:"M11.53.47a.75.75 0 0 0-1.061 0l-4.47 4.47L1.529.47A.75.75 0 1 0 .468 1.531l4.47 4.47-4.47 4.47a.75.75 0 1 0 1.061 1.061l4.47-4.47 4.47 4.47a.75.75 0 1 0 1.061-1.061l-4.47-4.47 4.47-4.47a.75.75 0 0 0 0-1.061z"}))}}]),t}(s.default.Component);t.default=d},2:function(e,t){e.exports=n(7)},23:function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r,a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0),s=(r=i)&&r.__esModule?r:{default:r};function u(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function l(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var d=function(e){function t(){return u(this,t),l(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),o(t,[{key:"render",value:function(){return s.default.createElement("svg",a({viewBox:"0 0 1000 1000"},this.props),s.default.createElement("path",{d:"M336.2 274.5l-210.1 210h805.4c13 0 23 10 23 23s-10 23-23 23H126.1l210.1 210.1c11 11 11 21 0 32-5 5-10 7-16 7s-11-2-16-7l-249.1-249c-11-11-11-21 0-32l249.1-249.1c21-21.1 53 10.9 32 32z"}))}}]),t}(s.default.Component);t.default=d},24:function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r,a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0),s=(r=i)&&r.__esModule?r:{default:r};function u(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function l(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var d=function(e){function t(){return u(this,t),l(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),o(t,[{key:"render",value:function(){return s.default.createElement("svg",a({viewBox:"0 0 1000 1000"},this.props),s.default.createElement("path",{d:"M694.4 242.4l249.1 249.1c11 11 11 21 0 32L694.4 772.7c-5 5-10 7-16 7s-11-2-16-7c-11-11-11-21 0-32l210.1-210.1H67.1c-13 0-23-10-23-23s10-23 23-23h805.4L662.4 274.5c-21-21.1 11-53.1 32-32.1z"}))}}]),t}(s.default.Component);t.default=d},25:function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r,a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0),s=(r=i)&&r.__esModule?r:{default:r};function u(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function l(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var d=function(e){function t(){return u(this,t),l(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),o(t,[{key:"render",value:function(){return s.default.createElement("svg",a({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 1393.1 1500"},this.props),s.default.createElement("path",{d:"M107.2 1392.9h241.1v-241.1H107.2v241.1zm294.7 0h267.9v-241.1H401.9v241.1zm-294.7-294.7h241.1V830.4H107.2v267.8zm294.7 0h267.9V830.4H401.9v267.8zM107.2 776.8h241.1V535.7H107.2v241.1zm616.2 616.1h267.9v-241.1H723.4v241.1zM401.9 776.8h267.9V535.7H401.9v241.1zm642.9 616.1H1286v-241.1h-241.1v241.1zm-321.4-294.7h267.9V830.4H723.4v267.8zM428.7 375V133.9c0-7.3-2.7-13.5-8-18.8-5.3-5.3-11.6-8-18.8-8h-53.6c-7.3 0-13.5 2.7-18.8 8-5.3 5.3-8 11.6-8 18.8V375c0 7.3 2.7 13.5 8 18.8 5.3 5.3 11.6 8 18.8 8h53.6c7.3 0 13.5-2.7 18.8-8 5.3-5.3 8-11.5 8-18.8zm616.1 723.2H1286V830.4h-241.1v267.8zM723.4 776.8h267.9V535.7H723.4v241.1zm321.4 0H1286V535.7h-241.1v241.1zm26.8-401.8V133.9c0-7.3-2.7-13.5-8-18.8-5.3-5.3-11.6-8-18.8-8h-53.6c-7.3 0-13.5 2.7-18.8 8-5.3 5.3-8 11.6-8 18.8V375c0 7.3 2.7 13.5 8 18.8 5.3 5.3 11.6 8 18.8 8h53.6c7.3 0 13.5-2.7 18.8-8 5.4-5.3 8-11.5 8-18.8zm321.5-53.6v1071.4c0 29-10.6 54.1-31.8 75.3-21.2 21.2-46.3 31.8-75.3 31.8H107.2c-29 0-54.1-10.6-75.3-31.8C10.6 1447 0 1421.9 0 1392.9V321.4c0-29 10.6-54.1 31.8-75.3s46.3-31.8 75.3-31.8h107.2v-80.4c0-36.8 13.1-68.4 39.3-94.6S311.4 0 348.3 0h53.6c36.8 0 68.4 13.1 94.6 39.3 26.2 26.2 39.3 57.8 39.3 94.6v80.4h321.5v-80.4c0-36.8 13.1-68.4 39.3-94.6C922.9 13.1 954.4 0 991.3 0h53.6c36.8 0 68.4 13.1 94.6 39.3s39.3 57.8 39.3 94.6v80.4H1286c29 0 54.1 10.6 75.3 31.8 21.2 21.2 31.8 46.3 31.8 75.3z"}))}}]),t}(s.default.Component);t.default=d},3:function(e,t){e.exports=n(1)},33:function(e,t){e.exports=n(173)},4:function(e,t){e.exports=n(3)},5:function(e,t){e.exports=n(8)},6:function(e,t){e.exports=n(9)},64:function(e,t,n){var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=y(n(0)),i=y(n(3)),s=n(1),u=y(n(6)),l=n(2),d=y(n(5)),c=y(n(33)),f=y(n(24)),p=y(n(23)),h=y(n(11)),_=y(n(25)),m=n(4);function y(e){return e&&e.__esModule?e:{default:e}}var v=(0,s.forbidExtraProps)({startDateId:i.default.string,startDatePlaceholderText:i.default.string,screenReaderMessage:i.default.string,endDateId:i.default.string,endDatePlaceholderText:i.default.string,onStartDateFocus:i.default.func,onEndDateFocus:i.default.func,onStartDateChange:i.default.func,onEndDateChange:i.default.func,onStartDateShiftTab:i.default.func,onEndDateTab:i.default.func,onClearDates:i.default.func,onArrowDown:i.default.func,onQuestionMark:i.default.func,startDate:i.default.string,startDateValue:i.default.string,endDate:i.default.string,endDateValue:i.default.string,isStartDateFocused:i.default.bool,isEndDateFocused:i.default.bool,showClearDates:i.default.bool,disabled:i.default.bool,required:i.default.bool,readOnly:i.default.bool,showCaret:i.default.bool,showDefaultInputIcon:i.default.bool,customInputIcon:i.default.node,customArrowIcon:i.default.node,customCloseIcon:i.default.node,isFocused:i.default.bool,phrases:i.default.shape((0,d.default)(l.DateRangePickerInputPhrases)),isRTL:i.default.bool}),M={startDateId:m.START_DATE,endDateId:m.END_DATE,startDatePlaceholderText:"Start Date",endDatePlaceholderText:"End Date",screenReaderMessage:"",onStartDateFocus:function(){},onEndDateFocus:function(){},onStartDateChange:function(){},onEndDateChange:function(){},onStartDateShiftTab:function(){},onEndDateTab:function(){},onClearDates:function(){},onArrowDown:function(){},onQuestionMark:function(){},startDate:"",startDateValue:"",endDate:"",endDateValue:"",isStartDateFocused:!1,isEndDateFocused:!1,showClearDates:!1,disabled:!1,required:!1,readOnly:!1,showCaret:!1,showDefaultInputIcon:!1,customInputIcon:null,customArrowIcon:null,customCloseIcon:null,isFocused:!1,phrases:l.DateRangePickerInputPhrases,isRTL:!1},b=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":r(t))&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={isClearDatesHovered:!1},n.onClearDatesMouseEnter=n.onClearDatesMouseEnter.bind(n),n.onClearDatesMouseLeave=n.onClearDatesMouseLeave.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":r(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),a(t,[{key:"onClearDatesMouseEnter",value:function(){this.setState({isClearDatesHovered:!0})}},{key:"onClearDatesMouseLeave",value:function(){this.setState({isClearDatesHovered:!1})}},{key:"render",value:function(){var e=this.state.isClearDatesHovered,t=this.props,n=t.startDate,r=t.startDateValue,a=t.startDateId,i=t.startDatePlaceholderText,s=t.screenReaderMessage,l=t.isStartDateFocused,d=t.onStartDateChange,m=t.onStartDateFocus,y=t.onStartDateShiftTab,v=t.endDate,M=t.endDateValue,b=t.endDateId,g=t.endDatePlaceholderText,D=t.isEndDateFocused,k=t.onEndDateChange,L=t.onEndDateFocus,w=t.onEndDateTab,Y=t.onArrowDown,T=t.onQuestionMark,S=t.onClearDates,O=t.showClearDates,P=t.disabled,x=t.required,E=t.readOnly,j=t.showCaret,C=t.showDefaultInputIcon,H=t.customInputIcon,A=t.customArrowIcon,F=t.customCloseIcon,R=t.isFocused,I=t.phrases,N=t.isRTL,W=H||o.default.createElement(_.default,null),z=A||(N?o.default.createElement(p.default,null):o.default.createElement(f.default,null)),U=F||o.default.createElement(h.default,null),V=s||I.keyboardNavigationInstructions;return o.default.createElement("div",{className:(0,u.default)("DateRangePickerInput",{"DateRangePickerInput--disabled":P,"DateRangePickerInput--rtl":N})},(C||null!==H)&&o.default.createElement("button",{type:"button",className:"DateRangePickerInput__calendar-icon",disabled:P,"aria-label":I.focusStartDate,onClick:Y},W),o.default.createElement(c.default,{id:a,placeholder:i,displayValue:n,inputValue:r,screenReaderMessage:V,focused:l,isFocused:R,disabled:P,required:x,readOnly:E,showCaret:j,onChange:d,onFocus:m,onKeyDownShiftTab:y,onKeyDownArrowDown:Y,onKeyDownQuestionMark:T}),o.default.createElement("div",{className:"DateRangePickerInput__arrow","aria-hidden":"true",role:"presentation"},z),o.default.createElement(c.default,{id:b,placeholder:g,displayValue:v,inputValue:M,screenReaderMessage:V,focused:D,isFocused:R,disabled:P,required:x,readOnly:E,showCaret:j,onChange:k,onFocus:L,onKeyDownTab:w,onKeyDownArrowDown:Y,onKeyDownQuestionMark:T}),O&&o.default.createElement("button",{type:"button","aria-label":I.clearDates,className:(0,u.default)("DateRangePickerInput__clear-dates",{"DateRangePickerInput__clear-dates--hide":!(n||v),"DateRangePickerInput__clear-dates--hover":e}),onMouseEnter:this.onClearDatesMouseEnter,onMouseLeave:this.onClearDatesMouseLeave,onClick:S},o.default.createElement("div",{className:"DateRangePickerInput__close-icon"},U)))}}]),t}(o.default.Component);t.default=b,b.propTypes=v,b.defaultProps=M}})},function(e,t,n){e.exports=function(e){var t={};function n(r){if(t[r])return t[r].exports;var a=t[r]={i:r,l:!1,exports:{}};return e[r].call(a.exports,a,a.exports,n),a.l=!0,a.exports}return n.m=e,n.c=t,n.i=function(e){return e},n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:r})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=62)}({0:function(e,t){e.exports=n(2)},1:function(e,t){e.exports=n(6)},3:function(e,t){e.exports=n(1)},35:function(e,t){e.exports=n(174)},6:function(e,t){e.exports=n(9)},62:function(e,t,n){var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=c(n(0)),i=c(n(3)),s=n(1),u=c(n(6)),l=c(n(35)),d=c(n(9));function c(e){return e&&e.__esModule?e:{default:e}}var f=(0,s.forbidExtraProps)({id:i.default.string.isRequired,placeholder:i.default.string,displayValue:i.default.string,inputValue:i.default.string,screenReaderMessage:i.default.string,focused:i.default.bool,disabled:i.default.bool,required:i.default.bool,readOnly:i.default.bool,showCaret:i.default.bool,onChange:i.default.func,onFocus:i.default.func,onKeyDownShiftTab:i.default.func,onKeyDownTab:i.default.func,onKeyDownArrowDown:i.default.func,onKeyDownQuestionMark:i.default.func,isFocused:i.default.bool}),p={placeholder:"Select Date",displayValue:"",inputValue:"",screenReaderMessage:"",focused:!1,disabled:!1,required:!1,readOnly:null,showCaret:!1,onChange:function(){},onFocus:function(){},onKeyDownShiftTab:function(){},onKeyDownTab:function(){},onKeyDownArrowDown:function(){},onKeyDownQuestionMark:function(){},isFocused:!1},h=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":r(t))&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={dateString:"",isTouchDevice:!1},n.onChange=n.onChange.bind(n),n.onKeyDown=n.onKeyDown.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":r(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),a(t,[{key:"componentDidMount",value:function(){this.setState({isTouchDevice:(0,d.default)()})}},{key:"componentWillReceiveProps",value:function(e){!this.props.displayValue&&e.displayValue&&this.setState({dateString:""})}},{key:"componentDidUpdate",value:function(e){var t=this.props,n=t.focused,r=t.isFocused;e.focused===n&&e.isFocused===r||(n&&r?(this.inputRef.focus(),this.inputRef.select()):this.inputRef.blur())}},{key:"onChange",value:function(e){var t=this.props,n=t.onChange,r=t.onKeyDownQuestionMark,a=e.target.value;"?"===a[a.length-1]?r(e):(this.setState({dateString:a}),n(a))}},{key:"onKeyDown",value:function(e){e.stopPropagation();var t=this.props,n=t.onKeyDownShiftTab,r=t.onKeyDownTab,a=t.onKeyDownArrowDown,o=t.onKeyDownQuestionMark,i=e.key;"Tab"===i?e.shiftKey?n(e):r(e):"ArrowDown"===i?a(e):"?"===i&&(e.preventDefault(),o(e))}},{key:"render",value:function(){var e=this,t=this.state,n=t.dateString,r=t.isTouchDevice,a=this.props,i=a.id,s=a.placeholder,d=a.displayValue,c=a.inputValue,f=a.screenReaderMessage,p=a.focused,h=a.showCaret,_=a.onFocus,m=a.disabled,y=a.required,v=a.readOnly,M=d||c||n||s||"",b=c||d||n||"",g="DateInput__screen-reader-message-"+String(i);return o.default.createElement("div",{className:(0,u.default)("DateInput",{"DateInput--with-caret":h&&p,"DateInput--disabled":m})},o.default.createElement("input",{"aria-label":s,className:"DateInput__input needsclick",type:"text",id:i,name:i,ref:function(t){e.inputRef=t},value:b,onChange:this.onChange,onKeyDown:(0,l.default)(this.onKeyDown,300),onFocus:_,placeholder:s,autoComplete:"off",disabled:m,readOnly:"boolean"==typeof v?v:r,required:y,"aria-describedby":f&&g}),f&&o.default.createElement("p",{id:g,className:"screen-reader-only"},f),o.default.createElement("div",{className:(0,u.default)("DateInput__display-text",{"DateInput__display-text--has-input":!!b,"DateInput__display-text--focused":p,"DateInput__display-text--disabled":m})},M))}}]),t}(o.default.Component);t.default=h,h.propTypes=f,h.defaultProps=p},9:function(e,t){e.exports=n(12)}})},function(e,t,n){var r=n(235),a=n(33);e.exports=function(e,t,n){var o=!0,i=!0;if("function"!=typeof e)throw new TypeError("Expected a function");return a(n)&&(o="leading"in n?!!n.leading:o,i="trailing"in n?!!n.trailing:i),r(e,t,{leading:o,maxWait:t,trailing:i})}},function(e,t,n){var r=n(237),a="object"==typeof self&&self&&self.Object===Object&&self,o=r||a||Function("return this")();e.exports=o},function(e,t,n){var r=n(175).Symbol;e.exports=r},function(e,t,n){e.exports=function(e){var t={};function n(r){if(t[r])return t[r].exports;var a=t[r]={i:r,l:!1,exports:{}};return e[r].call(a.exports,a,a.exports,n),a.l=!0,a.exports}return n.m=e,n.c=t,n.i=function(e){return e},n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:r})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=69)}([function(e,t){e.exports=n(2)},function(e,t){e.exports=n(6)},function(e,t){e.exports=n(7)},function(e,t){e.exports=n(1)},function(e,t){e.exports=n(3)},function(e,t){e.exports=n(8)},,function(e,t){e.exports=n(0)},function(e,t){e.exports=n(15)},function(e,t){e.exports=n(12)},function(e,t){e.exports=n(10)},,function(e,t){e.exports=n(11)},function(e,t){e.exports=n(13)},,function(e,t){e.exports=n(18)},,function(e,t){e.exports=n(20)},function(e,t){e.exports=n(34)},function(e,t){e.exports=n(16)},function(e,t){e.exports=n(28)},,function(e,t){e.exports=n(25)},,,,,,,function(e,t){e.exports=n(178)},function(e,t){e.exports=n(19)},,,,function(e,t){e.exports=n(35)},,function(e,t){e.exports=n(184)},,,,,,function(e,t){e.exports=n(168)},,,,,function(e,t){e.exports=n(187)},,,,,,,,,,,,,,,,,,,,,,function(e,t,n){var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=O(n(22)),i=O(n(0)),s=O(n(3)),u=O(n(10)),l=n(1),d=O(n(7)),c=O(n(36)),f=O(n(9)),p=n(2),h=O(n(5)),_=O(n(15)),m=O(n(47)),y=O(n(19)),v=O(n(17)),M=O(n(30)),b=O(n(29)),g=O(n(18)),D=O(n(13)),k=O(n(20)),L=O(n(42)),w=O(n(8)),Y=O(n(12)),T=n(4),S=O(n(34));function O(e){return e&&e.__esModule?e:{default:e}}function P(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var x=(0,l.forbidExtraProps)({startDate:u.default.momentObj,endDate:u.default.momentObj,onDatesChange:s.default.func,focusedInput:L.default,onFocusChange:s.default.func,onClose:s.default.func,keepOpenOnDateSelect:s.default.bool,minimumNights:s.default.number,isOutsideRange:s.default.func,isDayBlocked:s.default.func,isDayHighlighted:s.default.func,renderMonth:s.default.func,enableOutsideDays:s.default.bool,numberOfMonths:s.default.number,orientation:w.default,withPortal:s.default.bool,initialVisibleMonth:s.default.func,hideKeyboardShortcutsPanel:s.default.bool,daySize:l.nonNegativeInteger,navPrev:s.default.node,navNext:s.default.node,onPrevMonthClick:s.default.func,onNextMonthClick:s.default.func,onOutsideClick:s.default.func,renderDay:s.default.func,renderCalendarInfo:s.default.func,firstDayOfWeek:Y.default,onBlur:s.default.func,isFocused:s.default.bool,showKeyboardShortcuts:s.default.bool,monthFormat:s.default.string,phrases:s.default.shape((0,h.default)(p.DayPickerPhrases)),isRTL:s.default.bool}),E={startDate:void 0,endDate:void 0,onDatesChange:function(){},focusedInput:null,onFocusChange:function(){},onClose:function(){},keepOpenOnDateSelect:!1,minimumNights:1,isOutsideRange:function(){},isDayBlocked:function(){},isDayHighlighted:function(){},renderMonth:null,enableOutsideDays:!1,numberOfMonths:1,orientation:T.HORIZONTAL_ORIENTATION,withPortal:!1,hideKeyboardShortcutsPanel:!1,initialVisibleMonth:null,daySize:T.DAY_SIZE,navPrev:null,navNext:null,onPrevMonthClick:function(){},onNextMonthClick:function(){},onOutsideClick:function(){},renderDay:null,renderCalendarInfo:null,firstDayOfWeek:null,onBlur:function(){},isFocused:!1,showKeyboardShortcuts:!1,monthFormat:"MMMM YYYY",phrases:p.DayPickerPhrases,isRTL:!1},j=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":r(t))&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));n.isTouchDevice=(0,f.default)(),n.today=(0,d.default)(),n.modifiers={today:function(e){return n.isToday(e)},blocked:function(e){return n.isBlocked(e)},"blocked-calendar":function(t){return e.isDayBlocked(t)},"blocked-out-of-range":function(t){return e.isOutsideRange(t)},"highlighted-calendar":function(t){return e.isDayHighlighted(t)},valid:function(e){return!n.isBlocked(e)},"selected-start":function(e){return n.isStartDate(e)},"selected-end":function(e){return n.isEndDate(e)},"blocked-minimum-nights":function(e){return n.doesNotMeetMinimumNights(e)},"selected-span":function(e){return n.isInSelectedSpan(e)},"last-in-range":function(e){return n.isLastInRange(e)},hovered:function(e){return n.isHovered(e)},"hovered-span":function(e){return n.isInHoveredSpan(e)},"after-hovered-start":function(e){return n.isDayAfterHoveredStartDate(e)}};var a=n.getStateForNewMonth(e),o=a.currentMonth,i=a.visibleDays;return n.state={hoverDate:null,currentMonth:o,phrases:e.phrases,visibleDays:i},n.onDayClick=n.onDayClick.bind(n),n.onDayMouseEnter=n.onDayMouseEnter.bind(n),n.onDayMouseLeave=n.onDayMouseLeave.bind(n),n.onPrevMonthClick=n.onPrevMonthClick.bind(n),n.onNextMonthClick=n.onNextMonthClick.bind(n),n.onMultiplyScrollableMonths=n.onMultiplyScrollableMonths.bind(n),n.getFirstFocusableDay=n.getFirstFocusableDay.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":r(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),a(t,[{key:"componentWillReceiveProps",value:function(e){var t=this,n=e.startDate,r=e.endDate,a=e.focusedInput,i=e.minimumNights,s=e.isOutsideRange,u=e.isDayBlocked,l=e.isDayHighlighted,f=e.phrases,p=e.initialVisibleMonth,h=e.numberOfMonths,_=e.enableOutsideDays,m=this.state.visibleDays;s!==this.props.isOutsideRange&&(this.modifiers["blocked-out-of-range"]=function(e){return s(e)}),u!==this.props.isDayBlocked&&(this.modifiers["blocked-calendar"]=function(e){return u(e)}),l!==this.props.isDayHighlighted&&(this.modifiers["highlighted-calendar"]=function(e){return l(e)});var v=n!==this.props.startDate,M=r!==this.props.endDate,b=a!==this.props.focusedInput;if((p!==this.props.initialVisibleMonth||h!==this.props.numberOfMonths||_!==this.props.enableOutsideDays)&&!this.props.focusedInput&&b){var g=this.getStateForNewMonth(e),D=g.currentMonth;m=g.visibleDays,this.setState({currentMonth:D,visibleDays:m})}var k={};if(v&&(k=this.deleteModifier(k,this.props.startDate,"selected-start"),k=this.addModifier(k,n,"selected-start")),M&&(k=this.deleteModifier(k,this.props.endDate,"selected-end"),k=this.addModifier(k,r,"selected-end")),(v||M)&&(this.props.startDate&&this.props.endDate&&(k=this.deleteModifierFromRange(k,this.props.startDate,this.props.endDate.clone().add(1,"day"),"selected-span")),n&&r&&(k=this.deleteModifierFromRange(k,n,r.clone().add(1,"day"),"hovered-span"),k=this.addModifierToRange(k,n.clone().add(1,"day"),r,"selected-span"))),!this.isTouchDevice&&v&&n&&!r){var L=n.clone().add(1,"day"),w=n.clone().add(i+1,"days");k=this.addModifierToRange(k,L,w,"after-hovered-start")}if(i>0||i!==this.props.minimumNights){if(b||v){var Y=this.props.startDate?this.props.startDate:this.today;k=this.deleteModifierFromRange(k,Y,Y.clone().add(i,"days"),"blocked-minimum-nights")}n&&a===T.END_DATE&&(k=this.addModifierToRange(k,n,n.clone().add(i,"days"),"blocked-minimum-nights"))}b&&(0,c.default)(m).forEach((function(e){Object.keys(e).forEach((function(e){var n=(0,d.default)(e);k=t.isBlocked(n)?t.addModifier(k,n,"blocked"):t.deleteModifier(k,n,"blocked"),k=s(n)?t.addModifier(k,n,"blocked-out-of-range"):t.deleteModifier(k,n,"blocked-out-of-range"),k=u(n)?t.addModifier(k,n,"blocked-calendar"):t.deleteModifier(k,n,"blocked-calendar"),k=l(n)?t.addModifier(k,n,"highlighted-calendar"):t.deleteModifier(k,n,"highlighted-calendar")}))}));var S=(0,d.default)();if((0,y.default)(this.today,S)||(k=this.deleteModifier(k,this.today,"today"),k=this.addModifier(k,S,"today"),this.today=S),Object.keys(k).length>0&&this.setState({visibleDays:(0,o.default)({},m,k)}),b||f!==this.props.phrases){var O=f.chooseAvailableDate;a===T.START_DATE?O=f.chooseAvailableStartDate:a===T.END_DATE&&(O=f.chooseAvailableEndDate),this.setState({phrases:(0,o.default)({},f,{chooseAvailableDate:O})})}}},{key:"onDayClick",value:function(e,t){var n=this.props,r=n.keepOpenOnDateSelect,a=n.minimumNights,o=n.onBlur;if(t&&t.preventDefault(),!this.isBlocked(e)){var i=this.props,s=i.focusedInput,u=i.onFocusChange,l=i.onClose,d=this.props,c=d.startDate,f=d.endDate;if(s===T.START_DATE)u(T.END_DATE),c=e,(0,_.default)(e,f)&&(f=null);else if(s===T.END_DATE){var p=c&&c.clone().add(a,"days");c?(0,_.default)(e,p)?(f=e,r||(u(null),l({startDate:c,endDate:f}))):(c=e,f=null):(f=e,u(T.START_DATE))}this.props.onDatesChange({startDate:c,endDate:f}),o()}}},{key:"onDayMouseEnter",value:function(e){if(!this.isTouchDevice){var t=this.props,n=t.startDate,r=t.endDate,a=t.focusedInput,i=t.minimumNights,s=this.state,u=s.hoverDate,l=s.visibleDays;if(a){var d={};if(d=this.deleteModifier(d,u,"hovered"),d=this.addModifier(d,e,"hovered"),n&&!r&&a===T.END_DATE){if((0,v.default)(u,n)){var c=u.clone().add(1,"day");d=this.deleteModifierFromRange(d,n,c,"hovered-span")}if(!this.isBlocked(e)&&(0,v.default)(e,n)){var f=e.clone().add(1,"day");d=this.addModifierToRange(d,n,f,"hovered-span")}}if(!n&&r&&a===T.START_DATE&&((0,M.default)(u,r)&&(d=this.deleteModifierFromRange(d,u,r,"hovered-span")),!this.isBlocked(e)&&(0,M.default)(e,r)&&(d=this.addModifierToRange(d,e,r,"hovered-span"))),n){var p=n.clone().add(1,"day"),h=n.clone().add(i+1,"days");if(d=this.deleteModifierFromRange(d,p,h,"after-hovered-start"),(0,y.default)(e,n)){var _=n.clone().add(1,"day"),m=n.clone().add(i+1,"days");d=this.addModifierToRange(d,_,m,"after-hovered-start")}}this.setState({hoverDate:e,visibleDays:(0,o.default)({},l,d)})}}}},{key:"onDayMouseLeave",value:function(e){var t=this.props,n=t.startDate,r=t.endDate,a=t.minimumNights,i=this.state,s=i.hoverDate,u=i.visibleDays;if(!this.isTouchDevice&&s){var l={};if(l=this.deleteModifier(l,s,"hovered"),n&&!r&&(0,v.default)(s,n)){var d=s.clone().add(1,"day");l=this.deleteModifierFromRange(l,n,d,"hovered-span")}if(!n&&r&&(0,v.default)(r,s)&&(l=this.deleteModifierFromRange(l,s,r,"hovered-span")),n&&(0,y.default)(e,n)){var c=n.clone().add(1,"day"),f=n.clone().add(a+1,"days");l=this.deleteModifierFromRange(l,c,f,"after-hovered-start")}this.setState({hoverDate:null,visibleDays:(0,o.default)({},u,l)})}}},{key:"onPrevMonthClick",value:function(){var e=this.props,t=e.onPrevMonthClick,n=e.numberOfMonths,r=e.enableOutsideDays,a=this.state,i=a.currentMonth,s=a.visibleDays,u={};Object.keys(s).sort().slice(0,n+1).forEach((function(e){u[e]=s[e]}));var l=i.clone().subtract(2,"months"),d=(0,b.default)(l,1,r,!0);this.setState({currentMonth:i.clone().subtract(1,"month"),visibleDays:(0,o.default)({},u,this.getModifiers(d))}),t()}},{key:"onNextMonthClick",value:function(){var e=this.props,t=e.onNextMonthClick,n=e.numberOfMonths,r=e.enableOutsideDays,a=this.state,i=a.currentMonth,s=a.visibleDays,u={};Object.keys(s).sort().slice(1).forEach((function(e){u[e]=s[e]}));var l=i.clone().add(n+1,"month"),d=(0,b.default)(l,1,r,!0);this.setState({currentMonth:i.clone().add(1,"month"),visibleDays:(0,o.default)({},u,this.getModifiers(d))}),t()}},{key:"onMultiplyScrollableMonths",value:function(){var e=this.props,t=e.numberOfMonths,n=e.enableOutsideDays,r=this.state,a=r.currentMonth,i=r.visibleDays,s=Object.keys(i).length,u=a.clone().add(s,"month"),l=(0,b.default)(u,t,n,!0);this.setState({visibleDays:(0,o.default)({},i,this.getModifiers(l))})}},{key:"getFirstFocusableDay",value:function(e){var t=this,n=this.props,r=n.startDate,a=n.endDate,o=n.focusedInput,i=n.minimumNights,s=n.numberOfMonths,u=e.clone().startOf("month");if(o===T.START_DATE&&r?u=r.clone():o===T.END_DATE&&!a&&r?u=r.clone().add(i,"days"):o===T.END_DATE&&a&&(u=a.clone()),this.isBlocked(u)){for(var l=[],d=e.clone().add(s-1,"months").endOf("month"),c=u.clone();!(0,v.default)(c,d);)c=c.clone().add(1,"day"),l.push(c);var f=l.filter((function(e){return!t.isBlocked(e)}));f.length>0&&(u=f[0])}return u}},{key:"getModifiers",value:function(e){var t=this,n={};return Object.keys(e).forEach((function(r){n[r]={},e[r].forEach((function(e){n[r][(0,D.default)(e)]=t.getModifiersForDay(e)}))})),n}},{key:"getModifiersForDay",value:function(e){var t=this;return new Set(Object.keys(this.modifiers).filter((function(n){return t.modifiers[n](e)})))}},{key:"getStateForNewMonth",value:function(e){var t=this,n=e.initialVisibleMonth,r=e.numberOfMonths,a=e.enableOutsideDays,o=e.orientation,i=e.startDate,s=(n||(i?function(){return i}:function(){return t.today}))(),u=o===T.VERTICAL_SCROLLABLE;return{currentMonth:s,visibleDays:this.getModifiers((0,b.default)(s,r,a,u))}}},{key:"addModifier",value:function(e,t,n){var r=this.props,a=r.numberOfMonths,i=r.enableOutsideDays,s=r.orientation,u=this.state,l=u.currentMonth,d=u.visibleDays,c=l,f=a;if(s!==T.VERTICAL_SCROLLABLE&&(c=c.clone().subtract(1,"month"),f+=2),!t||!(0,g.default)(t,c,f,i))return e;var p=(0,D.default)(t),h=(0,o.default)({},e);if(i)h=Object.keys(d).filter((function(e){return Object.keys(d[e]).indexOf(p)>-1})).reduce((function(t,r){var a=e[r]||d[r],i=new Set(a[p]);return i.add(n),(0,o.default)({},t,P({},r,(0,o.default)({},a,P({},p,i))))}),h);else{var _=(0,k.default)(t),m=e[_]||d[_],y=new Set(m[p]);y.add(n),h=(0,o.default)({},h,P({},_,(0,o.default)({},m,P({},p,y))))}return h}},{key:"addModifierToRange",value:function(e,t,n,r){for(var a=e,o=t.clone();(0,M.default)(o,n);)a=this.addModifier(a,o,r),o=o.clone().add(1,"day");return a}},{key:"deleteModifier",value:function(e,t,n){var r=this.props,a=r.numberOfMonths,i=r.enableOutsideDays,s=r.orientation,u=this.state,l=u.currentMonth,d=u.visibleDays,c=l,f=a;if(s!==T.VERTICAL_SCROLLABLE&&(c=c.clone().subtract(1,"month"),f+=2),!t||!(0,g.default)(t,c,f,i))return e;var p=(0,D.default)(t),h=(0,o.default)({},e);if(i)h=Object.keys(d).filter((function(e){return Object.keys(d[e]).indexOf(p)>-1})).reduce((function(t,r){var a=e[r]||d[r],i=new Set(a[p]);return i.delete(n),(0,o.default)({},t,P({},r,(0,o.default)({},a,P({},p,i))))}),h);else{var _=(0,k.default)(t),m=e[_]||d[_],y=new Set(m[p]);y.delete(n),h=(0,o.default)({},h,P({},_,(0,o.default)({},m,P({},p,y))))}return h}},{key:"deleteModifierFromRange",value:function(e,t,n,r){for(var a=e,o=t.clone();(0,M.default)(o,n);)a=this.deleteModifier(a,o,r),o=o.clone().add(1,"day");return a}},{key:"doesNotMeetMinimumNights",value:function(e){var t=this.props,n=t.startDate,r=t.isOutsideRange,a=t.focusedInput,o=t.minimumNights;if(a!==T.END_DATE)return!1;if(n){var i=e.diff(n.clone().startOf("day").hour(12),"days");return i<o&&i>=0}return r((0,d.default)(e).subtract(o,"days"))}},{key:"isDayAfterHoveredStartDate",value:function(e){var t=this.props,n=t.startDate,r=t.endDate,a=t.minimumNights,o=(this.state||{}).hoverDate;return!!n&&!r&&!this.isBlocked(e)&&(0,m.default)(o,e)&&a>0&&(0,y.default)(o,n)}},{key:"isEndDate",value:function(e){return(0,y.default)(e,this.props.endDate)}},{key:"isHovered",value:function(e){var t=(this.state||{}).hoverDate;return!!this.props.focusedInput&&(0,y.default)(e,t)}},{key:"isInHoveredSpan",value:function(e){var t=this.props,n=t.startDate,r=t.endDate,a=(this.state||{}).hoverDate,o=!!n&&!r&&(e.isBetween(n,a)||(0,y.default)(a,e)),i=!!r&&!n&&(e.isBetween(a,r)||(0,y.default)(a,e)),s=a&&!this.isBlocked(a);return(o||i)&&s}},{key:"isInSelectedSpan",value:function(e){var t=this.props,n=t.startDate,r=t.endDate;return e.isBetween(n,r)}},{key:"isLastInRange",value:function(e){return this.isInSelectedSpan(e)&&(0,m.default)(e,this.props.endDate)}},{key:"isStartDate",value:function(e){return(0,y.default)(e,this.props.startDate)}},{key:"isBlocked",value:function(e){var t=this.props,n=t.isDayBlocked,r=t.isOutsideRange;return n(e)||r(e)||this.doesNotMeetMinimumNights(e)}},{key:"isToday",value:function(e){return(0,y.default)(e,this.today)}},{key:"render",value:function(){var e=this,t=this.props,n=t.numberOfMonths,r=t.orientation,a=t.monthFormat,o=t.renderMonth,s=t.navPrev,u=t.navNext,l=t.onOutsideClick,d=t.withPortal,c=t.enableOutsideDays,f=t.firstDayOfWeek,p=t.hideKeyboardShortcutsPanel,h=t.daySize,_=t.focusedInput,m=t.renderDay,y=t.renderCalendarInfo,v=t.onBlur,M=t.isFocused,b=t.showKeyboardShortcuts,g=t.isRTL,D=this.state,k=D.currentMonth,L=D.phrases,w=D.visibleDays;return i.default.createElement(S.default,{ref:function(t){e.dayPicker=t},orientation:r,enableOutsideDays:c,modifiers:w,numberOfMonths:n,onDayClick:this.onDayClick,onDayMouseEnter:this.onDayMouseEnter,onDayMouseLeave:this.onDayMouseLeave,onPrevMonthClick:this.onPrevMonthClick,onNextMonthClick:this.onNextMonthClick,onMultiplyScrollableMonths:this.onMultiplyScrollableMonths,monthFormat:a,renderMonth:o,withPortal:d,hidden:!_,initialVisibleMonth:function(){return k},daySize:h,onOutsideClick:l,navPrev:s,navNext:u,renderDay:m,renderCalendarInfo:y,firstDayOfWeek:f,hideKeyboardShortcutsPanel:p,isFocused:M,getFirstFocusableDay:this.getFirstFocusableDay,onBlur:v,showKeyboardShortcuts:b,phrases:L,isRTL:g})}}]),t}(i.default.Component);t.default=j,j.propTypes=x,j.defaultProps=E}])},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n,o){if(!r.default.isMoment(e))return{};for(var i={},s=o?e.clone():e.clone().subtract(1,"month"),u=0;u<(o?t:t+2);u+=1){var l=[],d=s.clone(),c=d.clone().startOf("month").hour(12),f=d.clone().endOf("month").hour(12),p=c.clone();if(n)for(var h=0;h<p.weekday();h+=1){var _=p.clone().subtract(h+1,"day");l.unshift(_)}for(;p<f;)l.push(p.clone()),p.add(1,"day");if(n&&0!==p.weekday())for(var m=p.weekday(),y=0;m<7;m+=1,y+=1){var v=p.clone().add(y,"day");l.push(v)}i[(0,a.default)(s)]=l,s=s.clone().add(1,"month")}return i};var r=o(n(0)),a=o(n(28));function o(e){return e&&e.__esModule?e:{default:e}}},function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return 7*(e+1)+20}},function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return{transform:e,msTransform:e,MozTransform:e,WebkitTransform:e}}},function(e,t,n){e.exports=function(e){var t={};function n(r){if(t[r])return t[r].exports;var a=t[r]={i:r,l:!1,exports:{}};return e[r].call(a.exports,a,a.exports,n),a.l=!0,a.exports}return n.m=e,n.c=t,n.i=function(e){return e},n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:r})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=61)}([function(e,t){e.exports=n(2)},function(e,t){e.exports=n(6)},function(e,t){e.exports=n(7)},function(e,t){e.exports=n(1)},function(e,t){e.exports=n(3)},function(e,t){e.exports=n(8)},function(e,t){e.exports=n(9)},function(e,t){e.exports=n(0)},function(e,t){e.exports=n(15)},,function(e,t){e.exports=n(10)},,function(e,t){e.exports=n(11)},,function(e,t){e.exports=n(17)},,function(e,t){e.exports=n(24)},function(e,t){e.exports=n(20)},,,function(e,t){e.exports=n(28)},,function(e,t){e.exports=n(25)},,,,function(e,t){e.exports=n(179)},,function(e,t){e.exports=n(180)},,,,,,,,,,,,,,,,,,,,function(e,t){e.exports=n(245)},,function(e,t){e.exports=n(182)},,,,,,,,,,,function(e,t,n){var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=w(n(22)),i=w(n(0)),s=w(n(3)),u=w(n(14)),l=w(n(10)),d=n(1),c=w(n(7)),f=w(n(6)),p=n(16),h=n(2),_=w(n(5)),m=w(n(50)),y=w(n(48)),v=w(n(28)),M=w(n(26)),b=w(n(20)),g=w(n(17)),D=w(n(8)),k=w(n(12)),L=n(4);function w(e){return e&&e.__esModule?e:{default:e}}var Y=(0,d.forbidExtraProps)({enableOutsideDays:s.default.bool,firstVisibleMonthIndex:s.default.number,initialMonth:l.default.momentObj,isAnimating:s.default.bool,numberOfMonths:s.default.number,modifiers:s.default.object,orientation:D.default,onDayClick:s.default.func,onDayMouseEnter:s.default.func,onDayMouseLeave:s.default.func,onMonthTransitionEnd:s.default.func,renderMonth:s.default.func,renderDay:s.default.func,transformValue:s.default.string,daySize:d.nonNegativeInteger,focusedDate:l.default.momentObj,isFocused:s.default.bool,firstDayOfWeek:k.default,monthFormat:s.default.string,phrases:s.default.shape((0,_.default)(h.CalendarDayPhrases))}),T={enableOutsideDays:!1,firstVisibleMonthIndex:0,initialMonth:(0,c.default)(),isAnimating:!1,numberOfMonths:1,modifiers:{},orientation:L.HORIZONTAL_ORIENTATION,onDayClick:function(){},onDayMouseEnter:function(){},onDayMouseLeave:function(){},onMonthTransitionEnd:function(){},renderMonth:null,renderDay:null,transformValue:"none",daySize:L.DAY_SIZE,focusedDate:null,isFocused:!1,firstDayOfWeek:null,monthFormat:"MMMM YYYY",phrases:h.CalendarDayPhrases};function S(e,t,n){var r=e.clone();n||(r=r.subtract(1,"month"));for(var a=[],o=0;o<(n?t:t+2);o+=1)a.push(r),r=r.clone().add(1,"month");return a}var O=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":r(t))&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e)),a=e.orientation===L.VERTICAL_SCROLLABLE;return n.state={months:S(e.initialMonth,e.numberOfMonths,a)},n.isTransitionEndSupported=(0,y.default)(),n.onTransitionEnd=n.onTransitionEnd.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":r(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),a(t,[{key:"componentDidMount",value:function(){this.eventHandle=(0,p.addEventListener)(this.container,"transitionend",this.onTransitionEnd)}},{key:"componentWillReceiveProps",value:function(e){var t=e.initialMonth,n=e.numberOfMonths,r=e.orientation,a=this.state.months,o=!this.props.initialMonth.isSame(t,"month"),i=this.props.numberOfMonths!==n,s=a;o&&!i&&((0,g.default)(t,this.props.initialMonth)?(s=a.slice(1)).push(a[a.length-1].clone().add(1,"month")):(s=a.slice(0,a.length-1)).unshift(a[0].clone().subtract(1,"month"))),i&&(s=S(t,n,r===L.VERTICAL_SCROLLABLE)),this.setState({months:s})}},{key:"shouldComponentUpdate",value:function(e,t){return(0,u.default)(this,e,t)}},{key:"componentDidUpdate",value:function(){var e=this.props,t=e.isAnimating,n=e.onMonthTransitionEnd;!this.isTransitionEndSupported&&t&&n()}},{key:"componentWillUnmount",value:function(){(0,p.removeEventListener)(this.eventHandle)}},{key:"onTransitionEnd",value:function(){this.props.onMonthTransitionEnd()}},{key:"render",value:function(){var e=this,t=this.props,n=t.enableOutsideDays,r=t.firstVisibleMonthIndex,a=t.isAnimating,s=t.modifiers,u=t.numberOfMonths,l=t.monthFormat,d=t.orientation,c=t.transformValue,p=t.daySize,h=t.onDayMouseEnter,_=t.onDayMouseLeave,y=t.onDayClick,g=t.renderMonth,D=t.renderDay,k=t.onMonthTransitionEnd,w=t.firstDayOfWeek,Y=t.focusedDate,T=t.isFocused,S=t.phrases,O=this.state.months,P=d===L.VERTICAL_ORIENTATION,x=d===L.VERTICAL_SCROLLABLE,E=d===L.HORIZONTAL_ORIENTATION,j=(0,f.default)("CalendarMonthGrid",{"CalendarMonthGrid--horizontal":E,"CalendarMonthGrid--vertical":P,"CalendarMonthGrid--vertical-scrollable":x,"CalendarMonthGrid--animating":a}),C=(0,M.default)(p),H=P||x?C:(u+2)*C,A=(0,o.default)({},(0,v.default)(c),{width:H});return i.default.createElement("div",{ref:function(t){e.container=t},className:j,style:A,onTransitionEnd:k},O.map((function(e,t){var a=t>=r&&t<r+u,o=(0,b.default)(e);return i.default.createElement(m.default,{key:o,month:e,isVisible:a,enableOutsideDays:n,modifiers:s[o],monthFormat:l,orientation:d,onDayMouseEnter:h,onDayMouseLeave:_,onDayClick:y,renderMonth:g,renderDay:D,firstDayOfWeek:w,daySize:p,focusedDate:a?Y:null,isFocused:T,phrases:S})})))}}]),t}(i.default.Component);t.default=O,O.propTypes=Y,O.defaultProps=T}])},function(e,t,n){e.exports=function(e){var t={};function n(r){if(t[r])return t[r].exports;var a=t[r]={i:r,l:!1,exports:{}};return e[r].call(a.exports,a,a.exports,n),a.l=!0,a.exports}return n.m=e,n.c=t,n.i=function(e){return e},n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:r})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=60)}({0:function(e,t){e.exports=n(2)},1:function(e,t){e.exports=n(6)},10:function(e,t){e.exports=n(10)},12:function(e,t){e.exports=n(11)},13:function(e,t){e.exports=n(13)},14:function(e,t){e.exports=n(17)},19:function(e,t){e.exports=n(16)},2:function(e,t){e.exports=n(7)},3:function(e,t){e.exports=n(1)},4:function(e,t){e.exports=n(3)},45:function(e,t){e.exports=n(246)},49:function(e,t){e.exports=n(183)},5:function(e,t){e.exports=n(8)},6:function(e,t){e.exports=n(9)},60:function(e,t,n){var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=g(n(0)),i=g(n(3)),s=g(n(14)),u=g(n(10)),l=n(1),d=g(n(7)),c=g(n(6)),f=n(2),p=g(n(5)),h=g(n(49)),_=g(n(45)),m=g(n(19)),y=g(n(13)),v=g(n(8)),M=g(n(12)),b=n(4);function g(e){return e&&e.__esModule?e:{default:e}}var D=(0,l.forbidExtraProps)({month:u.default.momentObj,isVisible:i.default.bool,enableOutsideDays:i.default.bool,modifiers:i.default.object,orientation:v.default,daySize:l.nonNegativeInteger,onDayClick:i.default.func,onDayMouseEnter:i.default.func,onDayMouseLeave:i.default.func,renderMonth:i.default.func,renderDay:i.default.func,firstDayOfWeek:M.default,focusedDate:u.default.momentObj,isFocused:i.default.bool,monthFormat:i.default.string,phrases:i.default.shape((0,p.default)(f.CalendarDayPhrases))}),k={month:(0,d.default)(),isVisible:!0,enableOutsideDays:!1,modifiers:{},orientation:b.HORIZONTAL_ORIENTATION,daySize:b.DAY_SIZE,onDayClick:function(){},onDayMouseEnter:function(){},onDayMouseLeave:function(){},renderMonth:null,renderDay:null,firstDayOfWeek:null,focusedDate:null,isFocused:!1,monthFormat:"MMMM YYYY",phrases:f.CalendarDayPhrases},L=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":r(t))&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={weeks:(0,_.default)(e.month,e.enableOutsideDays,null==e.firstDayOfWeek?d.default.localeData().firstDayOfWeek():e.firstDayOfWeek)},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":r(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),a(t,[{key:"componentWillReceiveProps",value:function(e){var t=e.month,n=e.enableOutsideDays,r=e.firstDayOfWeek;t.isSame(this.props.month)&&n===this.props.enableOutsideDays&&r===this.props.firstDayOfWeek||this.setState({weeks:(0,_.default)(t,n,null==r?d.default.localeData().firstDayOfWeek():r)})}},{key:"shouldComponentUpdate",value:function(e,t){return(0,s.default)(this,e,t)}},{key:"render",value:function(){var e=this.props,t=e.month,n=e.monthFormat,r=e.orientation,a=e.isVisible,i=e.modifiers,s=e.onDayClick,u=e.onDayMouseEnter,l=e.onDayMouseLeave,d=e.renderMonth,f=e.renderDay,p=e.daySize,_=e.focusedDate,v=e.isFocused,M=e.phrases,g=this.state.weeks,D=d?d(t):t.format(n),k=(0,c.default)("CalendarMonth",{"CalendarMonth--horizontal":r===b.HORIZONTAL_ORIENTATION,"CalendarMonth--vertical":r===b.VERTICAL_ORIENTATION,"CalendarMonth--vertical-scrollable":r===b.VERTICAL_SCROLLABLE});return o.default.createElement("div",{className:k,"data-visible":a},o.default.createElement("table",null,o.default.createElement("caption",{className:"CalendarMonth__caption js-CalendarMonth__caption"},o.default.createElement("strong",null,D)),o.default.createElement("tbody",{className:"js-CalendarMonth__grid"},g.map((function(e,n){return o.default.createElement("tr",{key:n},e.map((function(e,n){return o.default.createElement(h.default,{day:e,daySize:p,isOutsideDay:!e||e.month()!==t.month(),tabIndex:a&&(0,m.default)(e,_)?0:-1,isFocused:v,key:n,onDayMouseEnter:u,onDayMouseLeave:l,onDayClick:s,renderDay:f,phrases:M,modifiers:i[(0,y.default)(e)]})})))})))))}}]),t}(o.default.Component);t.default=L,L.propTypes=D,L.defaultProps=k},7:function(e,t){e.exports=n(0)},8:function(e,t){e.exports=n(15)}})},function(e,t,n){e.exports=function(e){var t={};function n(r){if(t[r])return t[r].exports;var a=t[r]={i:r,l:!1,exports:{}};return e[r].call(a.exports,a,a.exports,n),a.l=!0,a.exports}return n.m=e,n.c=t,n.i=function(e){return e},n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:r})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=59)}({0:function(e,t){e.exports=n(2)},1:function(e,t){e.exports=n(6)},10:function(e,t){e.exports=n(10)},14:function(e,t){e.exports=n(17)},2:function(e,t){e.exports=n(7)},3:function(e,t){e.exports=n(1)},4:function(e,t){e.exports=n(3)},46:function(e,t){e.exports=n(247)},5:function(e,t){e.exports=n(8)},59:function(e,t,n){var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=m(n(0)),i=m(n(3)),s=m(n(14)),u=m(n(10)),l=n(1),d=m(n(7)),c=m(n(6)),f=n(2),p=m(n(5)),h=m(n(46)),_=n(4);function m(e){return e&&e.__esModule?e:{default:e}}function y(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function v(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":r(t))&&"function"!=typeof t?e:t}var M=(0,l.forbidExtraProps)({day:u.default.momentObj,daySize:l.nonNegativeInteger,isOutsideDay:i.default.bool,modifiers:i.default.instanceOf(Set),isFocused:i.default.bool,tabIndex:i.default.oneOf([0,-1]),onDayClick:i.default.func,onDayMouseEnter:i.default.func,onDayMouseLeave:i.default.func,renderDay:i.default.func,phrases:i.default.shape((0,p.default)(f.CalendarDayPhrases))}),b={day:(0,d.default)(),daySize:_.DAY_SIZE,isOutsideDay:!1,modifiers:new Set,isFocused:!1,tabIndex:-1,onDayClick:function(){},onDayMouseEnter:function(){},onDayMouseLeave:function(){},renderDay:null,phrases:f.CalendarDayPhrases},g=function(e){function t(){return y(this,t),v(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":r(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),a(t,[{key:"shouldComponentUpdate",value:function(e,t){return(0,s.default)(this,e,t)}},{key:"componentDidUpdate",value:function(e){var t=this.props,n=t.isFocused,r=t.tabIndex;0===r&&(n||r!==e.tabIndex)&&this.buttonRef.focus()}},{key:"onDayClick",value:function(e,t){(0,this.props.onDayClick)(e,t)}},{key:"onDayMouseEnter",value:function(e,t){(0,this.props.onDayMouseEnter)(e,t)}},{key:"onDayMouseLeave",value:function(e,t){(0,this.props.onDayMouseLeave)(e,t)}},{key:"render",value:function(){var e=this,t=this.props,n=t.day,r=t.daySize,a=t.isOutsideDay,i=t.modifiers,s=t.renderDay,u=t.tabIndex,l=t.phrases,d=l.chooseAvailableDate,f=l.dateIsUnavailable;if(!n)return o.default.createElement("td",null);var p=(0,c.default)("CalendarDay",{"CalendarDay--outside":a},Array.from(i,(function(e){return"CalendarDay--"+String(e)}))),m=String(n.format("dddd"))+", "+String(n.format("LL")),y=(0,h.default)(d,{date:m});_.BLOCKED_MODIFIER in i&&i[_.BLOCKED_MODIFIER](n)&&(y=(0,h.default)(f,{date:m}));var v={width:r,height:r-1};return o.default.createElement("td",{className:p,style:v},o.default.createElement("button",{type:"button",ref:function(t){e.buttonRef=t},className:"CalendarDay__button","aria-label":y,onMouseEnter:function(t){e.onDayMouseEnter(n,t)},onMouseLeave:function(t){e.onDayMouseLeave(n,t)},onMouseUp:function(e){e.currentTarget.blur()},onClick:function(t){e.onDayClick(n,t)},tabIndex:u},s?s(n):n.format("D")))}}]),t}(o.default.Component);t.default=g,g.propTypes=M,g.defaultProps=b},6:function(e,t){e.exports=n(9)},7:function(e,t){e.exports=n(0)}})},function(e,t,n){"use strict";var r=n(26),a=n(185),o=n(186),i=n(256),s=o();r(s,{getPolyfill:o,implementation:a,shim:i}),e.exports=s},function(e,t,n){"use strict";var r=n(250),a=n(251),o=n(254)("Object.prototype.propertyIsEnumerable");e.exports=function(e){var t=a(e),n=[];for(var i in t)r(t,i)&&o(t,i)&&n.push(t[i]);return n}},function(e,t,n){"use strict";var r=n(185);e.exports=function(){return"function"==typeof Object.values?Object.values:r}},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if(!r.default.isMoment(e)||!r.default.isMoment(t))return!1;var n=(0,r.default)(e).add(1,"day");return(0,a.default)(n,t)};var r=o(n(0)),a=o(n(16));function o(e){return e&&e.__esModule?e:{default:e}}},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r=c(n(1)),a=c(n(10)),o=n(6),i=n(7),s=c(n(8)),u=c(n(169)),l=c(n(170)),d=c(n(11));function c(e){return e&&e.__esModule?e:{default:e}}t.default={date:a.default.momentObj,onDateChange:r.default.func.isRequired,focused:r.default.bool,onFocusChange:r.default.func.isRequired,id:r.default.string.isRequired,placeholder:r.default.string,disabled:r.default.bool,required:r.default.bool,readOnly:r.default.bool,screenReaderInputMessage:r.default.string,showClearDate:r.default.bool,customCloseIcon:r.default.node,showDefaultInputIcon:r.default.bool,customInputIcon:r.default.node,renderMonth:r.default.func,orientation:u.default,anchorDirection:l.default,horizontalMargin:r.default.number,withPortal:r.default.bool,withFullScreenPortal:r.default.bool,initialVisibleMonth:r.default.func,firstDayOfWeek:d.default,numberOfMonths:r.default.number,keepOpenOnDateSelect:r.default.bool,reopenPickerOnClearDate:r.default.bool,renderCalendarInfo:r.default.func,hideKeyboardShortcutsPanel:r.default.bool,daySize:o.nonNegativeInteger,isRTL:r.default.bool,navPrev:r.default.node,navNext:r.default.node,onPrevMonthClick:r.default.func,onNextMonthClick:r.default.func,onClose:r.default.func,renderDay:r.default.func,enableOutsideDays:r.default.bool,isDayBlocked:r.default.func,isOutsideRange:r.default.func,isDayHighlighted:r.default.func,displayFormat:r.default.oneOfType([r.default.string,r.default.func]),monthFormat:r.default.string,phrases:r.default.shape((0,s.default)(i.SingleDatePickerPhrases))}},function(e,t,n){e.exports=function(e){var t={};function n(r){if(t[r])return t[r].exports;var a=t[r]={i:r,l:!1,exports:{}};return e[r].call(a.exports,a,a.exports,n),a.l=!0,a.exports}return n.m=e,n.c=t,n.i=function(e){return e},n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:r})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=70)}([function(e,t){e.exports=n(2)},function(e,t){e.exports=n(6)},function(e,t){e.exports=n(7)},function(e,t){e.exports=n(1)},function(e,t){e.exports=n(3)},function(e,t){e.exports=n(8)},,function(e,t){e.exports=n(0)},function(e,t){e.exports=n(15)},function(e,t){e.exports=n(12)},function(e,t){e.exports=n(10)},,function(e,t){e.exports=n(11)},function(e,t){e.exports=n(13)},,,,function(e,t){e.exports=n(20)},function(e,t){e.exports=n(34)},function(e,t){e.exports=n(16)},function(e,t){e.exports=n(28)},,function(e,t){e.exports=n(25)},,,,,,,function(e,t){e.exports=n(178)},,,,,function(e,t){e.exports=n(35)},,function(e,t){e.exports=n(184)},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(e,t,n){var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=w(n(22)),i=w(n(0)),s=w(n(3)),u=w(n(10)),l=n(1),d=w(n(7)),c=w(n(36)),f=w(n(9)),p=n(2),h=w(n(5)),_=w(n(19)),m=w(n(17)),y=w(n(29)),v=w(n(18)),M=w(n(13)),b=w(n(20)),g=w(n(8)),D=w(n(12)),k=n(4),L=w(n(34));function w(e){return e&&e.__esModule?e:{default:e}}function Y(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var T=(0,l.forbidExtraProps)({date:u.default.momentObj,onDateChange:s.default.func,focused:s.default.bool,onFocusChange:s.default.func,onClose:s.default.func,keepOpenOnDateSelect:s.default.bool,minimumNights:s.default.number,isOutsideRange:s.default.func,isDayBlocked:s.default.func,isDayHighlighted:s.default.func,renderMonth:s.default.func,enableOutsideDays:s.default.bool,numberOfMonths:s.default.number,orientation:g.default,withPortal:s.default.bool,initialVisibleMonth:s.default.func,firstDayOfWeek:D.default,hideKeyboardShortcutsPanel:s.default.bool,daySize:l.nonNegativeInteger,navPrev:s.default.node,navNext:s.default.node,onPrevMonthClick:s.default.func,onNextMonthClick:s.default.func,onOutsideClick:s.default.func,renderDay:s.default.func,renderCalendarInfo:s.default.func,onBlur:s.default.func,isFocused:s.default.bool,showKeyboardShortcuts:s.default.bool,monthFormat:s.default.string,phrases:s.default.shape((0,h.default)(p.DayPickerPhrases)),isRTL:s.default.bool}),S={date:void 0,onDateChange:function(){},focused:!1,onFocusChange:function(){},onClose:function(){},keepOpenOnDateSelect:!1,minimumNights:1,isOutsideRange:function(){},isDayBlocked:function(){},isDayHighlighted:function(){},renderMonth:null,enableOutsideDays:!1,numberOfMonths:1,orientation:k.HORIZONTAL_ORIENTATION,withPortal:!1,hideKeyboardShortcutsPanel:!1,initialVisibleMonth:null,firstDayOfWeek:null,daySize:k.DAY_SIZE,navPrev:null,navNext:null,onPrevMonthClick:function(){},onNextMonthClick:function(){},onOutsideClick:function(){},renderDay:null,renderCalendarInfo:null,onBlur:function(){},isFocused:!1,showKeyboardShortcuts:!1,monthFormat:"MMMM YYYY",phrases:p.DayPickerPhrases,isRTL:!1},O=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":r(t))&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));n.isTouchDevice=!1,n.today=(0,d.default)(),n.modifiers={today:function(e){return n.isToday(e)},blocked:function(e){return n.isBlocked(e)},"blocked-calendar":function(t){return e.isDayBlocked(t)},"blocked-out-of-range":function(t){return e.isOutsideRange(t)},"highlighted-calendar":function(t){return e.isDayHighlighted(t)},valid:function(e){return!n.isBlocked(e)},hovered:function(e){return n.isHovered(e)},selected:function(e){return n.isSelected(e)}};var a=n.getStateForNewMonth(e),o=a.currentMonth,i=a.visibleDays;return n.state={hoverDate:null,currentMonth:o,visibleDays:i},n.onDayMouseEnter=n.onDayMouseEnter.bind(n),n.onDayMouseLeave=n.onDayMouseLeave.bind(n),n.onDayClick=n.onDayClick.bind(n),n.onPrevMonthClick=n.onPrevMonthClick.bind(n),n.onNextMonthClick=n.onNextMonthClick.bind(n),n.getFirstFocusableDay=n.getFirstFocusableDay.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":r(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),a(t,[{key:"componentDidMount",value:function(){this.isTouchDevice=(0,f.default)()}},{key:"componentWillReceiveProps",value:function(e){var t=this,n=e.date,r=e.focused,a=e.isOutsideRange,i=e.isDayBlocked,s=e.isDayHighlighted,u=e.initialVisibleMonth,l=e.numberOfMonths,f=e.enableOutsideDays,p=this.state.visibleDays;if(a!==this.props.isOutsideRange&&(this.modifiers["blocked-out-of-range"]=function(e){return a(e)}),i!==this.props.isDayBlocked&&(this.modifiers["blocked-calendar"]=function(e){return i(e)}),s!==this.props.isDayHighlighted&&(this.modifiers["highlighted-calendar"]=function(e){return s(e)}),u!==this.props.initialVisibleMonth||l!==this.props.numberOfMonths||f!==this.props.enableOutsideDays){var h=this.getStateForNewMonth(e),m=h.currentMonth;p=h.visibleDays,this.setState({currentMonth:m,visibleDays:p})}var y=n!==this.props.date,v=r!==this.props.focused,M={};y&&(M=this.deleteModifier(M,this.props.date,"selected"),M=this.addModifier(M,n,"selected")),v&&(0,c.default)(p).forEach((function(e){Object.keys(e).forEach((function(e){var n=(0,d.default)(e);M=t.isBlocked(n)?t.addModifier(M,n,"blocked"):t.deleteModifier(M,n,"blocked"),M=a(n)?t.addModifier(M,n,"blocked-out-of-range"):t.deleteModifier(M,n,"blocked-out-of-range"),M=i(n)?t.addModifier(M,n,"blocked-calendar"):t.deleteModifier(M,n,"blocked-calendar"),M=s(n)?t.addModifier(M,n,"highlighted-calendar"):t.deleteModifier(M,n,"highlighted-calendar")}))}));var b=(0,d.default)();(0,_.default)(this.today,b)||(M=this.deleteModifier(M,this.today,"today"),M=this.addModifier(M,b,"today"),this.today=b),Object.keys(M).length>0&&this.setState({visibleDays:(0,o.default)({},p,M)})}},{key:"componentWillUpdate",value:function(){this.today=(0,d.default)()}},{key:"onDayClick",value:function(e,t){if(t&&t.preventDefault(),!this.isBlocked(e)){var n=this.props,r=n.onDateChange,a=n.keepOpenOnDateSelect,o=n.onFocusChange,i=n.onClose;r(e),a||(o({focused:null}),i({date:e}))}}},{key:"onDayMouseEnter",value:function(e){if(!this.isTouchDevice){var t=this.state,n=t.hoverDate,r=t.visibleDays,a=this.deleteModifier({},n,"hovered");a=this.addModifier(a,e,"hovered"),this.setState({hoverDate:e,visibleDays:(0,o.default)({},r,a)})}}},{key:"onDayMouseLeave",value:function(){var e=this.state,t=e.hoverDate,n=e.visibleDays;if(!this.isTouchDevice&&t){var r=this.deleteModifier({},t,"hovered");this.setState({hoverDate:null,visibleDays:(0,o.default)({},n,r)})}}},{key:"onPrevMonthClick",value:function(){var e=this.props,t=e.onPrevMonthClick,n=e.numberOfMonths,r=e.enableOutsideDays,a=this.state,i=a.currentMonth,s=a.visibleDays,u={};Object.keys(s).sort().slice(0,n+1).forEach((function(e){u[e]=s[e]}));var l=i.clone().subtract(1,"month"),d=(0,y.default)(l,1,r);this.setState({currentMonth:l,visibleDays:(0,o.default)({},u,this.getModifiers(d))}),t()}},{key:"onNextMonthClick",value:function(){var e=this.props,t=e.onNextMonthClick,n=e.numberOfMonths,r=e.enableOutsideDays,a=this.state,i=a.currentMonth,s=a.visibleDays,u={};Object.keys(s).sort().slice(1).forEach((function(e){u[e]=s[e]}));var l=i.clone().add(n,"month"),d=(0,y.default)(l,1,r);this.setState({currentMonth:i.clone().add(1,"month"),visibleDays:(0,o.default)({},u,this.getModifiers(d))}),t()}},{key:"getFirstFocusableDay",value:function(e){var t=this,n=this.props,r=n.date,a=n.numberOfMonths,o=e.clone().startOf("month");if(r&&(o=r.clone()),this.isBlocked(o)){for(var i=[],s=e.clone().add(a-1,"months").endOf("month"),u=o.clone();!(0,m.default)(u,s);)u=u.clone().add(1,"day"),i.push(u);var l=i.filter((function(e){return!t.isBlocked(e)&&(0,m.default)(e,o)}));l.length>0&&(o=l[0])}return o}},{key:"getModifiers",value:function(e){var t=this,n={};return Object.keys(e).forEach((function(r){n[r]={},e[r].forEach((function(e){n[r][(0,M.default)(e)]=t.getModifiersForDay(e)}))})),n}},{key:"getModifiersForDay",value:function(e){var t=this;return new Set(Object.keys(this.modifiers).filter((function(n){return t.modifiers[n](e)})))}},{key:"getStateForNewMonth",value:function(e){var t=this,n=e.initialVisibleMonth,r=e.date,a=e.numberOfMonths,o=e.enableOutsideDays,i=(n||(r?function(){return r}:function(){return t.today}))();return{currentMonth:i,visibleDays:this.getModifiers((0,y.default)(i,a,o))}}},{key:"addModifier",value:function(e,t,n){var r=this.props,a=r.numberOfMonths,i=r.enableOutsideDays,s=r.orientation,u=this.state,l=u.currentMonth,d=u.visibleDays,c=l,f=a;if(s!==k.VERTICAL_SCROLLABLE&&(c=c.clone().subtract(1,"month"),f+=2),!t||!(0,v.default)(t,c,f,i))return e;var p=(0,M.default)(t),h=(0,o.default)({},e);if(i)h=Object.keys(d).filter((function(e){return Object.keys(d[e]).indexOf(p)>-1})).reduce((function(t,r){var a=e[r]||d[r],i=new Set(a[p]);return i.add(n),(0,o.default)({},t,Y({},r,(0,o.default)({},a,Y({},p,i))))}),h);else{var _=(0,b.default)(t),m=e[_]||d[_],y=new Set(m[p]);y.add(n),h=(0,o.default)({},h,Y({},_,(0,o.default)({},m,Y({},p,y))))}return h}},{key:"deleteModifier",value:function(e,t,n){var r=this.props,a=r.numberOfMonths,i=r.enableOutsideDays,s=r.orientation,u=this.state,l=u.currentMonth,d=u.visibleDays,c=l,f=a;if(s!==k.VERTICAL_SCROLLABLE&&(c=c.clone().subtract(1,"month"),f+=2),!t||!(0,v.default)(t,c,f,i))return e;var p=(0,M.default)(t),h=(0,o.default)({},e);if(i)h=Object.keys(d).filter((function(e){return Object.keys(d[e]).indexOf(p)>-1})).reduce((function(t,r){var a=e[r]||d[r],i=new Set(a[p]);return i.delete(n),(0,o.default)({},t,Y({},r,(0,o.default)({},a,Y({},p,i))))}),h);else{var _=(0,b.default)(t),m=e[_]||d[_],y=new Set(m[p]);y.delete(n),h=(0,o.default)({},h,Y({},_,(0,o.default)({},m,Y({},p,y))))}return h}},{key:"isBlocked",value:function(e){var t=this.props,n=t.isDayBlocked,r=t.isOutsideRange;return n(e)||r(e)}},{key:"isHovered",value:function(e){var t=(this.state||{}).hoverDate;return(0,_.default)(e,t)}},{key:"isSelected",value:function(e){return(0,_.default)(e,this.props.date)}},{key:"isToday",value:function(e){return(0,_.default)(e,this.today)}},{key:"render",value:function(){var e=this.props,t=e.numberOfMonths,n=e.orientation,r=e.monthFormat,a=e.renderMonth,o=e.navPrev,s=e.navNext,u=e.withPortal,l=e.focused,d=e.enableOutsideDays,c=e.hideKeyboardShortcutsPanel,f=e.daySize,p=e.firstDayOfWeek,h=e.renderDay,_=e.renderCalendarInfo,m=e.isFocused,y=e.isRTL,v=e.phrases,M=this.state,b=M.currentMonth,g=M.visibleDays;return i.default.createElement(L.default,{orientation:n,enableOutsideDays:d,modifiers:g,numberOfMonths:t,onDayClick:this.onDayClick,onDayMouseEnter:this.onDayMouseEnter,onDayMouseLeave:this.onDayMouseLeave,onPrevMonthClick:this.onPrevMonthClick,onNextMonthClick:this.onNextMonthClick,monthFormat:r,withPortal:u,hidden:!l,hideKeyboardShortcutsPanel:c,initialVisibleMonth:function(){return b},firstDayOfWeek:p,navPrev:o,navNext:s,renderMonth:a,renderDay:h,renderCalendarInfo:_,isFocused:m,getFirstFocusableDay:this.getFirstFocusableDay,onBlur:this.onDayPickerBlur,phrases:v,daySize:f,isRTL:y})}}]),t}(i.default.Component);t.default=O,O.propTypes=T,O.defaultProps=S}])},function(e,t,n){e.exports=function(e){var t={};function n(r){if(t[r])return t[r].exports;var a=t[r]={i:r,l:!1,exports:{}};return e[r].call(a.exports,a,a.exports,n),a.l=!0,a.exports}return n.m=e,n.c=t,n.i=function(e){return e},n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:r})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=73)}({0:function(e,t){e.exports=n(2)},1:function(e,t){e.exports=n(6)},11:function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r,a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0),s=(r=i)&&r.__esModule?r:{default:r};function u(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function l(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var d=function(e){function t(){return u(this,t),l(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),o(t,[{key:"render",value:function(){return s.default.createElement("svg",a({viewBox:"0 0 12 12"},this.props),s.default.createElement("path",{fillRule:"evenodd",d:"M11.53.47a.75.75 0 0 0-1.061 0l-4.47 4.47L1.529.47A.75.75 0 1 0 .468 1.531l4.47 4.47-4.47 4.47a.75.75 0 1 0 1.061 1.061l4.47-4.47 4.47 4.47a.75.75 0 1 0 1.061-1.061l-4.47-4.47 4.47-4.47a.75.75 0 0 0 0-1.061z"}))}}]),t}(s.default.Component);t.default=d},2:function(e,t){e.exports=n(7)},25:function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r,a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0),s=(r=i)&&r.__esModule?r:{default:r};function u(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function l(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var d=function(e){function t(){return u(this,t),l(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),o(t,[{key:"render",value:function(){return s.default.createElement("svg",a({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 1393.1 1500"},this.props),s.default.createElement("path",{d:"M107.2 1392.9h241.1v-241.1H107.2v241.1zm294.7 0h267.9v-241.1H401.9v241.1zm-294.7-294.7h241.1V830.4H107.2v267.8zm294.7 0h267.9V830.4H401.9v267.8zM107.2 776.8h241.1V535.7H107.2v241.1zm616.2 616.1h267.9v-241.1H723.4v241.1zM401.9 776.8h267.9V535.7H401.9v241.1zm642.9 616.1H1286v-241.1h-241.1v241.1zm-321.4-294.7h267.9V830.4H723.4v267.8zM428.7 375V133.9c0-7.3-2.7-13.5-8-18.8-5.3-5.3-11.6-8-18.8-8h-53.6c-7.3 0-13.5 2.7-18.8 8-5.3 5.3-8 11.6-8 18.8V375c0 7.3 2.7 13.5 8 18.8 5.3 5.3 11.6 8 18.8 8h53.6c7.3 0 13.5-2.7 18.8-8 5.3-5.3 8-11.5 8-18.8zm616.1 723.2H1286V830.4h-241.1v267.8zM723.4 776.8h267.9V535.7H723.4v241.1zm321.4 0H1286V535.7h-241.1v241.1zm26.8-401.8V133.9c0-7.3-2.7-13.5-8-18.8-5.3-5.3-11.6-8-18.8-8h-53.6c-7.3 0-13.5 2.7-18.8 8-5.3 5.3-8 11.6-8 18.8V375c0 7.3 2.7 13.5 8 18.8 5.3 5.3 11.6 8 18.8 8h53.6c7.3 0 13.5-2.7 18.8-8 5.4-5.3 8-11.5 8-18.8zm321.5-53.6v1071.4c0 29-10.6 54.1-31.8 75.3-21.2 21.2-46.3 31.8-75.3 31.8H107.2c-29 0-54.1-10.6-75.3-31.8C10.6 1447 0 1421.9 0 1392.9V321.4c0-29 10.6-54.1 31.8-75.3s46.3-31.8 75.3-31.8h107.2v-80.4c0-36.8 13.1-68.4 39.3-94.6S311.4 0 348.3 0h53.6c36.8 0 68.4 13.1 94.6 39.3 26.2 26.2 39.3 57.8 39.3 94.6v80.4h321.5v-80.4c0-36.8 13.1-68.4 39.3-94.6C922.9 13.1 954.4 0 991.3 0h53.6c36.8 0 68.4 13.1 94.6 39.3s39.3 57.8 39.3 94.6v80.4H1286c29 0 54.1 10.6 75.3 31.8 21.2 21.2 31.8 46.3 31.8 75.3z"}))}}]),t}(s.default.Component);t.default=d},3:function(e,t){e.exports=n(1)},33:function(e,t){e.exports=n(173)},5:function(e,t){e.exports=n(8)},6:function(e,t){e.exports=n(9)},73:function(e,t,n){var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=h(n(0)),i=h(n(3)),s=n(1),u=h(n(6)),l=n(2),d=h(n(5)),c=h(n(33)),f=h(n(11)),p=h(n(25));function h(e){return e&&e.__esModule?e:{default:e}}var _=(0,s.forbidExtraProps)({id:i.default.string.isRequired,placeholder:i.default.string,displayValue:i.default.string,inputValue:i.default.string,screenReaderMessage:i.default.string,focused:i.default.bool,isFocused:i.default.bool,disabled:i.default.bool,required:i.default.bool,readOnly:i.default.bool,showCaret:i.default.bool,showClearDate:i.default.bool,customCloseIcon:i.default.node,showDefaultInputIcon:i.default.bool,customInputIcon:i.default.node,isRTL:i.default.bool,onChange:i.default.func,onClearDate:i.default.func,onFocus:i.default.func,onKeyDownShiftTab:i.default.func,onKeyDownTab:i.default.func,onKeyDownArrowDown:i.default.func,phrases:i.default.shape((0,d.default)(l.SingleDatePickerInputPhrases))}),m={placeholder:"Select Date",displayValue:"",inputValue:"",screenReaderMessage:"",focused:!1,isFocused:!1,disabled:!1,required:!1,readOnly:!1,showCaret:!1,showClearDate:!1,showDefaultInputIcon:!1,customCloseIcon:null,customInputIcon:null,isRTL:!1,onChange:function(){},onClearDate:function(){},onFocus:function(){},onKeyDownShiftTab:function(){},onKeyDownTab:function(){},onKeyDownArrowDown:function(){},phrases:l.SingleDatePickerInputPhrases},y=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":r(t))&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={isClearDateHovered:!1},n.onClearDateMouseEnter=n.onClearDateMouseEnter.bind(n),n.onClearDateMouseLeave=n.onClearDateMouseLeave.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":r(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),a(t,[{key:"onClearDateMouseEnter",value:function(){this.setState({isClearDateHovered:!0})}},{key:"onClearDateMouseLeave",value:function(){this.setState({isClearDateHovered:!1})}},{key:"render",value:function(){var e=this.state.isClearDateHovered,t=this.props,n=t.id,r=t.placeholder,a=t.displayValue,i=t.inputValue,s=t.focused,l=t.isFocused,d=t.disabled,h=t.required,_=t.readOnly,m=t.showCaret,y=t.showClearDate,v=t.showDefaultInputIcon,M=t.phrases,b=t.onClearDate,g=t.onChange,D=t.onFocus,k=t.onKeyDownShiftTab,L=t.onKeyDownTab,w=t.onKeyDownArrowDown,Y=t.screenReaderMessage,T=t.customCloseIcon,S=t.customInputIcon,O=t.isRTL,P=S||o.default.createElement(p.default,null),x=T||o.default.createElement(f.default,null),E=Y||M.keyboardNavigationInstructions;return o.default.createElement("div",{className:(0,u.default)("SingleDatePickerInput",{"SingleDatePickerInput--rtl":O})},(v||null!==S)&&o.default.createElement("button",{type:"button",className:"SingleDatePickerInput__calendar-icon",disabled:d,"aria-label":M.focusStartDate,onClick:D},P),o.default.createElement(c.default,{id:n,placeholder:r,displayValue:a,inputValue:i,screenReaderMessage:E,focused:s,isFocused:l,disabled:d,required:h,readOnly:_,showCaret:m,onChange:g,onFocus:D,onKeyDownShiftTab:k,onKeyDownTab:L,onKeyDownArrowDown:w}),y&&o.default.createElement("button",{type:"button",className:(0,u.default)("SingleDatePickerInput__clear-date",{"SingleDatePickerInput__clear-date--hide":!a,"SingleDatePickerInput__clear-date--hover":e}),"aria-label":M.clearDate,onMouseEnter:this.onClearDateMouseEnter,onMouseLeave:this.onClearDateMouseLeave,onClick:b},o.default.createElement("div",{className:"DateRangePickerInput__close"},x)))}}]),t}(o.default.Component);t.default=y,y.propTypes=_,y.defaultProps=m}})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=s(n(2)),o=s(n(0)),i=n(159);function s(e){return e&&e.__esModule?e:{default:e}}var u=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.onDescriptionChange=function(e){var t=e.target.value;n.setState((function(){return{description:t}}))},n.onAmountChange=function(e){var t=e.target.value;t&&!t.match(/^\d{1,}(\.?\d{0,2})$/)||n.setState((function(){return{amount:t}}))},n.onNoteChange=function(e){var t=e.target.value;n.setState((function(){return{note:t}}))},n.onAddExpense=function(e){e.preventDefault()},n.onDateChange=function(e){e&&n.setState((function(){return{createdAt:e}}))},n.onFocusChange=function(e){var t=e.focused;n.setState((function(){return{calanderFocused:t}}))},n.onSubmit=function(e){e.preventDefault(),n.state.amount&&n.state.description?(n.setState((function(){return{error:""}})),n.props.onSubmit({description:n.state.description,amount:100*parseFloat(n.state.amount,10),createdAt:n.state.createdAt.valueOf(),note:n.state.note})):n.setState((function(){return{error:"Please enter amount and description"}}))},n.state={description:e.expense?e.expense.description:"",amount:e.expense?(e.expense.amount/100).toString():"",note:e.expense?e.expense.note:"",createdAt:e.expense?(0,o.default)(e.expense.createdAt):(0,o.default)(),calanderFocused:!1,error:""},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),r(t,[{key:"render",value:function(){return a.default.createElement("div",null,a.default.createElement("div",null,this.state.error&&a.default.createElement("p",null,this.state.error)),a.default.createElement("form",{onSubmit:this.onSubmit},a.default.createElement("input",{type:"text",placeholder:"description",value:this.state.description,onChange:this.onDescriptionChange,autoFocus:!0}),a.default.createElement("input",{type:"text",placeholder:"amount",value:this.state.amount,onChange:this.onAmountChange}),a.default.createElement(i.SingleDatePicker,{date:this.state.createdAt,focused:this.state.calanderFocused,onDateChange:this.onDateChange,onFocusChange:this.onFocusChange,numberOfMonths:1,isOutsideRange:function(e){return!1}}),a.default.createElement("textarea",{name:"note",placeholder:"note",value:this.state.note,onChange:this.onNoteChange}),a.default.createElement("button",null,"Add Expense")))}}]),t}(a.default.Component);t.default=u},function(e,t){var n="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof window.msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto);if(n){var r=new Uint8Array(16);e.exports=function(){return n(r),r}}else{var a=new Array(16);e.exports=function(){for(var e,t=0;t<16;t++)0==(3&t)&&(e=4294967296*Math.random()),a[t]=e>>>((3&t)<<3)&255;return a}}},function(e,t){for(var n=[],r=0;r<256;++r)n[r]=(r+256).toString(16).substr(1);e.exports=function(e,t){var r=t||0,a=n;return[a[e[r++]],a[e[r++]],a[e[r++]],a[e[r++]],"-",a[e[r++]],a[e[r++]],"-",a[e[r++]],a[e[r++]],"-",a[e[r++]],a[e[r++]],"-",a[e[r++]],a[e[r++]],a[e[r++]],a[e[r++]],a[e[r++]],a[e[r++]]].join("")}},function(e,t,n){"use strict";var r={childContextTypes:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,mixins:!0,propTypes:!0,type:!0},a={name:!0,length:!0,prototype:!0,caller:!0,arguments:!0,arity:!0},o="function"==typeof Object.getOwnPropertySymbols;e.exports=function(e,t,n){if("string"!=typeof t){var i=Object.getOwnPropertyNames(t);o&&(i=i.concat(Object.getOwnPropertySymbols(t)));for(var s=0;s<i.length;++s)if(!(r[i[s]]||a[i[s]]||n&&n[i[s]]))try{e[i[s]]=t[i[s]]}catch(e){}}return e}},function(e,t,n){"use strict";(function(e){var n="object"==typeof e&&e&&e.Object===Object&&e;t.a=n}).call(this,n(23))},function(e,t,n){"use strict";function r(e){var t,n=e.Symbol;return"function"==typeof n?n.observable?t=n.observable:(t=n("observable"),n.observable=t):t="@@observable",t}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";var r={childContextTypes:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},a={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},o=Object.defineProperty,i=Object.getOwnPropertyNames,s=Object.getOwnPropertySymbols,u=Object.getOwnPropertyDescriptor,l=Object.getPrototypeOf,d=l&&l(Object);e.exports=function e(t,n,c){if("string"!=typeof n){if(d){var f=l(n);f&&f!==d&&e(t,f,c)}var p=i(n);s&&(p=p.concat(s(n)));for(var h=0;h<p.length;++h){var _=p[h];if(!(r[_]||a[_]||c&&c[_])){var m=u(n,_);try{o(t,_,m)}catch(e){}}}return t}return t}},function(e,t,n){"use strict";var r=u(n(2)),a=u(n(22)),o=n(21),i=u(n(213)),s=u(n(266));n(37),u(n(43));function u(e){return e&&e.__esModule?e:{default:e}}n(269),n(270),n(271);var l=(0,s.default)(),d=r.default.createElement(o.Provider,{store:l},r.default.createElement(i.default,null));a.default.render(d,document.getElementById("app"))},function(e,t,n){"use strict";
/** @license React v16.12.0
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(40),a="function"==typeof Symbol&&Symbol.for,o=a?Symbol.for("react.element"):60103,i=a?Symbol.for("react.portal"):60106,s=a?Symbol.for("react.fragment"):60107,u=a?Symbol.for("react.strict_mode"):60108,l=a?Symbol.for("react.profiler"):60114,d=a?Symbol.for("react.provider"):60109,c=a?Symbol.for("react.context"):60110,f=a?Symbol.for("react.forward_ref"):60112,p=a?Symbol.for("react.suspense"):60113;a&&Symbol.for("react.suspense_list");var h=a?Symbol.for("react.memo"):60115,_=a?Symbol.for("react.lazy"):60116;a&&Symbol.for("react.fundamental"),a&&Symbol.for("react.responder"),a&&Symbol.for("react.scope");var m="function"==typeof Symbol&&Symbol.iterator;function y(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var v={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},M={};function b(e,t,n){this.props=e,this.context=t,this.refs=M,this.updater=n||v}function g(){}function D(e,t,n){this.props=e,this.context=t,this.refs=M,this.updater=n||v}b.prototype.isReactComponent={},b.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(y(85));this.updater.enqueueSetState(this,e,t,"setState")},b.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},g.prototype=b.prototype;var k=D.prototype=new g;k.constructor=D,r(k,b.prototype),k.isPureReactComponent=!0;var L={current:null},w={current:null},Y=Object.prototype.hasOwnProperty,T={key:!0,ref:!0,__self:!0,__source:!0};function S(e,t,n){var r,a={},i=null,s=null;if(null!=t)for(r in void 0!==t.ref&&(s=t.ref),void 0!==t.key&&(i=""+t.key),t)Y.call(t,r)&&!T.hasOwnProperty(r)&&(a[r]=t[r]);var u=arguments.length-2;if(1===u)a.children=n;else if(1<u){for(var l=Array(u),d=0;d<u;d++)l[d]=arguments[d+2];a.children=l}if(e&&e.defaultProps)for(r in u=e.defaultProps)void 0===a[r]&&(a[r]=u[r]);return{$$typeof:o,type:e,key:i,ref:s,props:a,_owner:w.current}}function O(e){return"object"==typeof e&&null!==e&&e.$$typeof===o}var P=/\/+/g,x=[];function E(e,t,n,r){if(x.length){var a=x.pop();return a.result=e,a.keyPrefix=t,a.func=n,a.context=r,a.count=0,a}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function j(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>x.length&&x.push(e)}function C(e,t,n){return null==e?0:function e(t,n,r,a){var s=typeof t;"undefined"!==s&&"boolean"!==s||(t=null);var u=!1;if(null===t)u=!0;else switch(s){case"string":case"number":u=!0;break;case"object":switch(t.$$typeof){case o:case i:u=!0}}if(u)return r(a,t,""===n?"."+H(t,0):n),1;if(u=0,n=""===n?".":n+":",Array.isArray(t))for(var l=0;l<t.length;l++){var d=n+H(s=t[l],l);u+=e(s,d,r,a)}else if(null===t||"object"!=typeof t?d=null:d="function"==typeof(d=m&&t[m]||t["@@iterator"])?d:null,"function"==typeof d)for(t=d.call(t),l=0;!(s=t.next()).done;)u+=e(s=s.value,d=n+H(s,l++),r,a);else if("object"===s)throw r=""+t,Error(y(31,"[object Object]"===r?"object with keys {"+Object.keys(t).join(", ")+"}":r,""));return u}(e,"",t,n)}function H(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,(function(e){return t[e]}))}(e.key):t.toString(36)}function A(e,t){e.func.call(e.context,t,e.count++)}function F(e,t,n){var r=e.result,a=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?R(e,r,n,(function(e){return e})):null!=e&&(O(e)&&(e=function(e,t){return{$$typeof:o,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,a+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(P,"$&/")+"/")+n)),r.push(e))}function R(e,t,n,r,a){var o="";null!=n&&(o=(""+n).replace(P,"$&/")+"/"),C(e,F,t=E(t,o,r,a)),j(t)}function I(){var e=L.current;if(null===e)throw Error(y(321));return e}var N={Children:{map:function(e,t,n){if(null==e)return e;var r=[];return R(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;C(e,A,t=E(null,null,t,n)),j(t)},count:function(e){return C(e,(function(){return null}),null)},toArray:function(e){var t=[];return R(e,t,null,(function(e){return e})),t},only:function(e){if(!O(e))throw Error(y(143));return e}},createRef:function(){return{current:null}},Component:b,PureComponent:D,createContext:function(e,t){return void 0===t&&(t=null),(e={$$typeof:c,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:d,_context:e},e.Consumer=e},forwardRef:function(e){return{$$typeof:f,render:e}},lazy:function(e){return{$$typeof:_,_ctor:e,_status:-1,_result:null}},memo:function(e,t){return{$$typeof:h,type:e,compare:void 0===t?null:t}},useCallback:function(e,t){return I().useCallback(e,t)},useContext:function(e,t){return I().useContext(e,t)},useEffect:function(e,t){return I().useEffect(e,t)},useImperativeHandle:function(e,t,n){return I().useImperativeHandle(e,t,n)},useDebugValue:function(){},useLayoutEffect:function(e,t){return I().useLayoutEffect(e,t)},useMemo:function(e,t){return I().useMemo(e,t)},useReducer:function(e,t,n){return I().useReducer(e,t,n)},useRef:function(e){return I().useRef(e)},useState:function(e){return I().useState(e)},Fragment:s,Profiler:l,StrictMode:u,Suspense:p,createElement:S,cloneElement:function(e,t,n){if(null==e)throw Error(y(267,e));var a=r({},e.props),i=e.key,s=e.ref,u=e._owner;if(null!=t){if(void 0!==t.ref&&(s=t.ref,u=w.current),void 0!==t.key&&(i=""+t.key),e.type&&e.type.defaultProps)var l=e.type.defaultProps;for(d in t)Y.call(t,d)&&!T.hasOwnProperty(d)&&(a[d]=void 0===t[d]&&void 0!==l?l[d]:t[d])}var d=arguments.length-2;if(1===d)a.children=n;else if(1<d){l=Array(d);for(var c=0;c<d;c++)l[c]=arguments[c+2];a.children=l}return{$$typeof:o,type:e.type,key:i,ref:s,props:a,_owner:u}},createFactory:function(e){var t=S.bind(null,e);return t.type=e,t},isValidElement:O,version:"16.12.0",__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentDispatcher:L,ReactCurrentBatchConfig:{suspense:null},ReactCurrentOwner:w,IsSomeRendererActing:{current:!1},assign:r}},W={default:N},z=W&&N||W;e.exports=z.default||z},function(e,t,n){"use strict";var r=n(2);n(201);var a=n(202),o=n(40),i=n(203),s=n(41),u=n(204),l=n(42),d=n(205),c=n(208),f=n(209);function p(e){for(var t=arguments.length-1,n="Minified React error #"+e+"; visit http://facebook.github.io/react/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);throw(t=Error(n+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings.")).name="Invariant Violation",t.framesToPop=1,t}function h(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}r||p("227");var _={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"},m=h,y=function(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?h(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e},v=null,M={};function b(){if(v)for(var e in M){var t=M[e],n=v.indexOf(e);if(-1<n||p("96",e),!D.plugins[n])for(var r in t.extractEvents||p("97",e),D.plugins[n]=t,n=t.eventTypes){var a=void 0,o=n[r],i=t,s=r;D.eventNameDispatchConfigs.hasOwnProperty(s)&&p("99",s),D.eventNameDispatchConfigs[s]=o;var u=o.phasedRegistrationNames;if(u){for(a in u)u.hasOwnProperty(a)&&g(u[a],i,s);a=!0}else o.registrationName?(g(o.registrationName,i,s),a=!0):a=!1;a||p("98",r,e)}}}function g(e,t,n){D.registrationNameModules[e]&&p("100",e),D.registrationNameModules[e]=t,D.registrationNameDependencies[e]=t.eventTypes[n].dependencies}var D={plugins:[],eventNameDispatchConfigs:{},registrationNameModules:{},registrationNameDependencies:{},possibleRegistrationNames:null,injectEventPluginOrder:function(e){v&&p("101"),v=Array.prototype.slice.call(e),b()},injectEventPluginsByName:function(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];M.hasOwnProperty(t)&&M[t]===r||(M[t]&&p("102",t),M[t]=r,n=!0)}n&&b()}},k=D,L={children:!0,dangerouslySetInnerHTML:!0,autoFocus:!0,defaultValue:!0,defaultChecked:!0,innerHTML:!0,suppressContentEditableWarning:!0,style:!0};function w(e,t){return(e&t)===t}var Y={MUST_USE_PROPERTY:1,HAS_BOOLEAN_VALUE:4,HAS_NUMERIC_VALUE:8,HAS_POSITIVE_NUMERIC_VALUE:24,HAS_OVERLOADED_BOOLEAN_VALUE:32,HAS_STRING_BOOLEAN_VALUE:64,injectDOMPropertyConfig:function(e){var t=Y,n=e.Properties||{},r=e.DOMAttributeNamespaces||{},a=e.DOMAttributeNames||{};for(var o in e=e.DOMMutationMethods||{},n){T.properties.hasOwnProperty(o)&&p("48",o);var i=o.toLowerCase(),s=n[o];1>=(i={attributeName:i,attributeNamespace:null,propertyName:o,mutationMethod:null,mustUseProperty:w(s,t.MUST_USE_PROPERTY),hasBooleanValue:w(s,t.HAS_BOOLEAN_VALUE),hasNumericValue:w(s,t.HAS_NUMERIC_VALUE),hasPositiveNumericValue:w(s,t.HAS_POSITIVE_NUMERIC_VALUE),hasOverloadedBooleanValue:w(s,t.HAS_OVERLOADED_BOOLEAN_VALUE),hasStringBooleanValue:w(s,t.HAS_STRING_BOOLEAN_VALUE)}).hasBooleanValue+i.hasNumericValue+i.hasOverloadedBooleanValue||p("50",o),a.hasOwnProperty(o)&&(i.attributeName=a[o]),r.hasOwnProperty(o)&&(i.attributeNamespace=r[o]),e.hasOwnProperty(o)&&(i.mutationMethod=e[o]),T.properties[o]=i}}},T={ID_ATTRIBUTE_NAME:"data-reactid",ROOT_ATTRIBUTE_NAME:"data-reactroot",ATTRIBUTE_NAME_START_CHAR:":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD",ATTRIBUTE_NAME_CHAR:":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040",properties:{},shouldSetAttribute:function(e,t){if(T.isReservedProp(e)||!("o"!==e[0]&&"O"!==e[0]||"n"!==e[1]&&"N"!==e[1]))return!1;if(null===t)return!0;switch(typeof t){case"boolean":return T.shouldAttributeAcceptBooleanValue(e);case"undefined":case"number":case"string":case"object":return!0;default:return!1}},getPropertyInfo:function(e){return T.properties.hasOwnProperty(e)?T.properties[e]:null},shouldAttributeAcceptBooleanValue:function(e){if(T.isReservedProp(e))return!0;var t=T.getPropertyInfo(e);return t?t.hasBooleanValue||t.hasStringBooleanValue||t.hasOverloadedBooleanValue:"data-"===(e=e.toLowerCase().slice(0,5))||"aria-"===e},isReservedProp:function(e){return L.hasOwnProperty(e)},injection:Y},S=T,O=0,P=1,x=2,E=3,j=4,C=5,H=6,A=7,F=8,R=9,I=10,N=1,W=3,z=8,U=9,V=11,B=C,K=H,J=N,q=z,G=S.ID_ATTRIBUTE_NAME,$=1,Q=Math.random().toString(36).slice(2),Z="__reactInternalInstance$"+Q,X="__reactEventHandlers$"+Q;function ee(e){for(var t;t=e._renderedComponent;)e=t;return e}function te(e,t){(e=ee(e))._hostNode=t,t[Z]=e}function ne(e,t){if(!(e._flags&$)){var n,r=e._renderedChildren;t=t.firstChild;e:for(n in r)if(r.hasOwnProperty(n)){var a=r[n],o=ee(a)._domID;if(0!==o){for(;null!==t;t=t.nextSibling){var i=t,s=o;if(i.nodeType===J&&i.getAttribute(G)===""+s||i.nodeType===q&&i.nodeValue===" react-text: "+s+" "||i.nodeType===q&&i.nodeValue===" react-empty: "+s+" "){te(a,t);continue e}}p("32",o)}}e._flags|=$}}function re(e){if(e[Z])return e[Z];for(var t=[];!e[Z];){if(t.push(e),!e.parentNode)return null;e=e.parentNode}var n=e[Z];if(n.tag===B||n.tag===K)return n;for(;e&&(n=e[Z]);e=t.pop()){var r=n;t.length&&ne(n,e)}return r}var ae={getClosestInstanceFromNode:re,getInstanceFromNode:function(e){var t=e[Z];return t?t.tag===B||t.tag===K?t:t._hostNode===e?t:null:null!=(t=re(e))&&t._hostNode===e?t:null},getNodeFromInstance:function(e){if(e.tag===B||e.tag===K)return e.stateNode;if(void 0===e._hostNode&&p("33"),e._hostNode)return e._hostNode;for(var t=[];!e._hostNode;)t.push(e),e._hostParent||p("34"),e=e._hostParent;for(;t.length;e=t.pop())ne(e,e._hostNode);return e._hostNode},precacheChildNodes:ne,precacheNode:te,uncacheNode:function(e){var t=e._hostNode;t&&(delete t[Z],e._hostNode=null)},precacheFiberNode:function(e,t){t[Z]=e},getFiberCurrentPropsFromNode:function(e){return e[X]||null},updateFiberProps:function(e,t){e[X]=t}},oe=function(e){return e._reactInternalFiber},ie=function(e){return void 0!==e._reactInternalFiber},se=function(e,t){e._reactInternalFiber=t},ue={ReactCurrentOwner:r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner};function le(e){if("function"==typeof e.getName)return e.getName();if("number"==typeof e.tag){if("string"==typeof(e=e.type))return e;if("function"==typeof e)return e.displayName||e.name}return null}var de=0,ce=1,fe=2,pe=4,he=6,_e=8,me=16,ye=32,ve=64,Me=128,be=C,ge=E,De=j,ke=H,Le=de,we=fe;function Ye(e){var t=e;if(e.alternate)for(;t.return;)t=t.return;else{if((t.effectTag&we)!==Le)return 1;for(;t.return;)if(((t=t.return).effectTag&we)!==Le)return 1}return t.tag===ge?2:3}function Te(e){2!==Ye(e)&&p("188")}function Se(e){var t=e.alternate;if(!t)return 3===(t=Ye(e))&&p("188"),1===t?null:e;for(var n=e,r=t;;){var a=n.return,o=a?a.alternate:null;if(!a||!o)break;if(a.child===o.child){for(var i=a.child;i;){if(i===n)return Te(a),e;if(i===r)return Te(a),t;i=i.sibling}p("188")}if(n.return!==r.return)n=a,r=o;else{i=!1;for(var s=a.child;s;){if(s===n){i=!0,n=a,r=o;break}if(s===r){i=!0,r=a,n=o;break}s=s.sibling}if(!i){for(s=o.child;s;){if(s===n){i=!0,n=o,r=a;break}if(s===r){i=!0,r=o,n=a;break}s=s.sibling}i||p("189")}}n.alternate!==r&&p("190")}return n.tag!==ge&&p("188"),n.stateNode.current===n?e:t}var Oe=function(e){return 2===Ye(e)},Pe=function(e){return!!(e=oe(e))&&2===Ye(e)},xe=function(e){if(!(e=Se(e)))return null;for(var t=e;;){if(t.tag===be||t.tag===ke)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null},Ee=function(e){if(!(e=Se(e)))return null;for(var t=e;;){if(t.tag===be||t.tag===ke)return t;if(t.child&&t.tag!==De)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null},je={_caughtError:null,_hasCaughtError:!1,_rethrowError:null,_hasRethrowError:!1,injection:{injectErrorUtils:function(e){"function"!=typeof e.invokeGuardedCallback&&p("197"),Ce=e.invokeGuardedCallback}},invokeGuardedCallback:function(e,t,n,r,a,o,i,s,u){Ce.apply(je,arguments)},invokeGuardedCallbackAndCatchFirstError:function(e,t,n,r,a,o,i,s,u){if(je.invokeGuardedCallback.apply(this,arguments),je.hasCaughtError()){var l=je.clearCaughtError();je._hasRethrowError||(je._hasRethrowError=!0,je._rethrowError=l)}},rethrowCaughtError:function(){return He.apply(je,arguments)},hasCaughtError:function(){return je._hasCaughtError},clearCaughtError:function(){if(je._hasCaughtError){var e=je._caughtError;return je._caughtError=null,je._hasCaughtError=!1,e}p("198")}};function Ce(e,t,n,r,a,o,i,s,u){je._hasCaughtError=!1,je._caughtError=null;var l=Array.prototype.slice.call(arguments,3);try{t.apply(n,l)}catch(e){je._caughtError=e,je._hasCaughtError=!0}}function He(){if(je._hasRethrowError){var e=je._rethrowError;throw je._rethrowError=null,je._hasRethrowError=!1,e}}var Ae,Fe=je;function Re(e,t,n,r){t=e.type||"unknown-event",e.currentTarget=Ie.getNodeFromInstance(r),Fe.invokeGuardedCallbackAndCatchFirstError(t,n,void 0,e),e.currentTarget=null}var Ie={isEndish:function(e){return"topMouseUp"===e||"topTouchEnd"===e||"topTouchCancel"===e},isMoveish:function(e){return"topMouseMove"===e||"topTouchMove"===e},isStartish:function(e){return"topMouseDown"===e||"topTouchStart"===e},executeDirectDispatch:function(e){var t=e._dispatchListeners,n=e._dispatchInstances;return Array.isArray(t)&&p("103"),e.currentTarget=t?Ie.getNodeFromInstance(n):null,t=t?t(e):null,e.currentTarget=null,e._dispatchListeners=null,e._dispatchInstances=null,t},executeDispatchesInOrder:function(e,t){var n=e._dispatchListeners,r=e._dispatchInstances;if(Array.isArray(n))for(var a=0;a<n.length&&!e.isPropagationStopped();a++)Re(e,t,n[a],r[a]);else n&&Re(e,t,n,r);e._dispatchListeners=null,e._dispatchInstances=null},executeDispatchesInOrderStopAtTrue:function(e){e:{var t=e._dispatchListeners,n=e._dispatchInstances;if(Array.isArray(t)){for(var r=0;r<t.length&&!e.isPropagationStopped();r++)if(t[r](e,n[r])){t=n[r];break e}}else if(t&&t(e,n)){t=n;break e}t=null}return e._dispatchInstances=null,e._dispatchListeners=null,t},hasDispatches:function(e){return!!e._dispatchListeners},getFiberCurrentPropsFromNode:function(e){return Ae.getFiberCurrentPropsFromNode(e)},getInstanceFromNode:function(e){return Ae.getInstanceFromNode(e)},getNodeFromInstance:function(e){return Ae.getNodeFromInstance(e)},injection:{injectComponentTree:function(e){Ae=e}}},Ne=Ie,We=null,ze=null,Ue=null;function Ve(e){if(e=Ne.getInstanceFromNode(e))if("number"==typeof e.tag){We&&"function"==typeof We.restoreControlledState||p("194");var t=Ne.getFiberCurrentPropsFromNode(e.stateNode);We.restoreControlledState(e.stateNode,e.type,t)}else"function"!=typeof e.restoreControlledState&&p("195"),e.restoreControlledState()}var Be={injection:{injectFiberControlledHostComponent:function(e){We=e}},enqueueStateRestore:function(e){ze?Ue?Ue.push(e):Ue=[e]:ze=e},restoreStateIfNeeded:function(){if(ze){var e=ze,t=Ue;if(Ue=ze=null,Ve(e),t)for(e=0;e<t.length;e++)Ve(t[e])}}};function Ke(e,t,n,r,a,o){return e(t,n,r,a,o)}function Je(e,t){return e(t)}function qe(e,t){return Je(e,t)}var Ge=!1,$e={batchedUpdates:function(e,t){if(Ge)return Ke(qe,e,t);Ge=!0;try{return Ke(qe,e,t)}finally{Ge=!1,Be.restoreStateIfNeeded()}},injection:{injectStackBatchedUpdates:function(e){Ke=e},injectFiberBatchedUpdates:function(e){Je=e}}},Qe=W;function Ze(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),e.nodeType===Qe?e.parentNode:e}var Xe=E,et=[];function tt(e){var t=e.targetInst;do{if(!t){e.ancestors.push(t);break}var n=t;if("number"==typeof n.tag){for(;n.return;)n=n.return;n=n.tag!==Xe?null:n.stateNode.containerInfo}else{for(;n._hostParent;)n=n._hostParent;n=ae.getNodeFromInstance(n).parentNode}if(!n)break;e.ancestors.push(t),t=ae.getClosestInstanceFromNode(n)}while(t);for(n=0;n<e.ancestors.length;n++)t=e.ancestors[n],nt._handleTopLevel(e.topLevelType,t,e.nativeEvent,Ze(e.nativeEvent))}var nt={_enabled:!0,_handleTopLevel:null,setHandleTopLevel:function(e){nt._handleTopLevel=e},setEnabled:function(e){nt._enabled=!!e},isEnabled:function(){return nt._enabled},trapBubbledEvent:function(e,t,n){return n?i.listen(n,t,nt.dispatchEvent.bind(null,e)):null},trapCapturedEvent:function(e,t,n){return n?i.capture(n,t,nt.dispatchEvent.bind(null,e)):null},dispatchEvent:function(e,t){if(nt._enabled){var n=Ze(t);if(null===(n=ae.getClosestInstanceFromNode(n))||"number"!=typeof n.tag||Oe(n)||(n=null),et.length){var r=et.pop();r.topLevelType=e,r.nativeEvent=t,r.targetInst=n,e=r}else e={topLevelType:e,nativeEvent:t,targetInst:n,ancestors:[]};try{$e.batchedUpdates(tt,e)}finally{e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>et.length&&et.push(e)}}}},rt=nt;function at(e,t){return null==t&&p("30"),null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function ot(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var it=null;function st(e,t){e&&(Ne.executeDispatchesInOrder(e,t),e.isPersistent()||e.constructor.release(e))}function ut(e){return st(e,!0)}function lt(e){return st(e,!1)}function dt(e,t,n){switch(e){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":return!(!n.disabled||"button"!==t&&"input"!==t&&"select"!==t&&"textarea"!==t);default:return!1}}var ct,ft={injection:{injectEventPluginOrder:k.injectEventPluginOrder,injectEventPluginsByName:k.injectEventPluginsByName},getListener:function(e,t){if("number"==typeof e.tag){var n=e.stateNode;if(!n)return null;var r=Ne.getFiberCurrentPropsFromNode(n);if(!r)return null;if(n=r[t],dt(t,e.type,r))return null}else{if("string"==typeof(r=e._currentElement)||"number"==typeof r||!e._rootNodeID)return null;if(n=(e=r.props)[t],dt(t,r.type,e))return null}return n&&"function"!=typeof n&&p("231",t,typeof n),n},extractEvents:function(e,t,n,r){for(var a,o=k.plugins,i=0;i<o.length;i++){var s=o[i];s&&(s=s.extractEvents(e,t,n,r))&&(a=at(a,s))}return a},enqueueEvents:function(e){e&&(it=at(it,e))},processEventQueue:function(e){var t=it;it=null,ot(t,e?ut:lt),it&&p("95"),Fe.rethrowCaughtError()}};function pt(e,t){if(!a.canUseDOM||t&&!("addEventListener"in document))return!1;var n=(t="on"+e)in document;return n||((n=document.createElement("div")).setAttribute(t,"return;"),n="function"==typeof n[t]),!n&&ct&&"wheel"===e&&(n=document.implementation.hasFeature("Events.wheel","3.0")),n}function ht(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n["ms"+e]="MS"+t,n["O"+e]="o"+t.toLowerCase(),n}a.canUseDOM&&(ct=document.implementation&&document.implementation.hasFeature&&!0!==document.implementation.hasFeature("",""));var _t={animationend:ht("Animation","AnimationEnd"),animationiteration:ht("Animation","AnimationIteration"),animationstart:ht("Animation","AnimationStart"),transitionend:ht("Transition","TransitionEnd")},mt={},yt={};function vt(e){if(mt[e])return mt[e];if(!_t[e])return e;var t,n=_t[e];for(t in n)if(n.hasOwnProperty(t)&&t in yt)return mt[e]=n[t];return""}a.canUseDOM&&(yt=document.createElement("div").style,"AnimationEvent"in window||(delete _t.animationend.animation,delete _t.animationiteration.animation,delete _t.animationstart.animation),"TransitionEvent"in window||delete _t.transitionend.transition);var Mt={topAbort:"abort",topAnimationEnd:vt("animationend")||"animationend",topAnimationIteration:vt("animationiteration")||"animationiteration",topAnimationStart:vt("animationstart")||"animationstart",topBlur:"blur",topCancel:"cancel",topCanPlay:"canplay",topCanPlayThrough:"canplaythrough",topChange:"change",topClick:"click",topClose:"close",topCompositionEnd:"compositionend",topCompositionStart:"compositionstart",topCompositionUpdate:"compositionupdate",topContextMenu:"contextmenu",topCopy:"copy",topCut:"cut",topDoubleClick:"dblclick",topDrag:"drag",topDragEnd:"dragend",topDragEnter:"dragenter",topDragExit:"dragexit",topDragLeave:"dragleave",topDragOver:"dragover",topDragStart:"dragstart",topDrop:"drop",topDurationChange:"durationchange",topEmptied:"emptied",topEncrypted:"encrypted",topEnded:"ended",topError:"error",topFocus:"focus",topInput:"input",topKeyDown:"keydown",topKeyPress:"keypress",topKeyUp:"keyup",topLoadedData:"loadeddata",topLoad:"load",topLoadedMetadata:"loadedmetadata",topLoadStart:"loadstart",topMouseDown:"mousedown",topMouseMove:"mousemove",topMouseOut:"mouseout",topMouseOver:"mouseover",topMouseUp:"mouseup",topPaste:"paste",topPause:"pause",topPlay:"play",topPlaying:"playing",topProgress:"progress",topRateChange:"ratechange",topScroll:"scroll",topSeeked:"seeked",topSeeking:"seeking",topSelectionChange:"selectionchange",topStalled:"stalled",topSuspend:"suspend",topTextInput:"textInput",topTimeUpdate:"timeupdate",topToggle:"toggle",topTouchCancel:"touchcancel",topTouchEnd:"touchend",topTouchMove:"touchmove",topTouchStart:"touchstart",topTransitionEnd:vt("transitionend")||"transitionend",topVolumeChange:"volumechange",topWaiting:"waiting",topWheel:"wheel"},bt={},gt=0,Dt="_reactListenersID"+(""+Math.random()).slice(2);function kt(e){return Object.prototype.hasOwnProperty.call(e,Dt)||(e[Dt]=gt++,bt[e[Dt]]={}),bt[e[Dt]]}var Lt=o({},{handleTopLevel:function(e,t,n,r){e=ft.extractEvents(e,t,n,r),ft.enqueueEvents(e),ft.processEventQueue(!1)}},{setEnabled:function(e){rt&&rt.setEnabled(e)},isEnabled:function(){return!(!rt||!rt.isEnabled())},listenTo:function(e,t){var n=kt(t);e=k.registrationNameDependencies[e];for(var r=0;r<e.length;r++){var a=e[r];n.hasOwnProperty(a)&&n[a]||("topWheel"===a?pt("wheel")?rt.trapBubbledEvent("topWheel","wheel",t):pt("mousewheel")?rt.trapBubbledEvent("topWheel","mousewheel",t):rt.trapBubbledEvent("topWheel","DOMMouseScroll",t):"topScroll"===a?rt.trapCapturedEvent("topScroll","scroll",t):"topFocus"===a||"topBlur"===a?(rt.trapCapturedEvent("topFocus","focus",t),rt.trapCapturedEvent("topBlur","blur",t),n.topBlur=!0,n.topFocus=!0):"topCancel"===a?(pt("cancel",!0)&&rt.trapCapturedEvent("topCancel","cancel",t),n.topCancel=!0):"topClose"===a?(pt("close",!0)&&rt.trapCapturedEvent("topClose","close",t),n.topClose=!0):Mt.hasOwnProperty(a)&&rt.trapBubbledEvent(a,Mt[a],t),n[a]=!0)}},isListeningToAllDependencies:function(e,t){t=kt(t),e=k.registrationNameDependencies[e];for(var n=0;n<e.length;n++){var r=e[n];if(!t.hasOwnProperty(r)||!t[r])return!1}return!0},trapBubbledEvent:function(e,t,n){return rt.trapBubbledEvent(e,t,n)},trapCapturedEvent:function(e,t,n){return rt.trapCapturedEvent(e,t,n)}}),wt={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},Yt=["Webkit","ms","Moz","O"];Object.keys(wt).forEach((function(e){Yt.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),wt[t]=wt[e]}))}));var Tt={isUnitlessNumber:wt,shorthandPropertyExpansions:{background:{backgroundAttachment:!0,backgroundColor:!0,backgroundImage:!0,backgroundPositionX:!0,backgroundPositionY:!0,backgroundRepeat:!0},backgroundPosition:{backgroundPositionX:!0,backgroundPositionY:!0},border:{borderWidth:!0,borderStyle:!0,borderColor:!0},borderBottom:{borderBottomWidth:!0,borderBottomStyle:!0,borderBottomColor:!0},borderLeft:{borderLeftWidth:!0,borderLeftStyle:!0,borderLeftColor:!0},borderRight:{borderRightWidth:!0,borderRightStyle:!0,borderRightColor:!0},borderTop:{borderTopWidth:!0,borderTopStyle:!0,borderTopColor:!0},font:{fontStyle:!0,fontVariant:!0,fontWeight:!0,fontSize:!0,lineHeight:!0,fontFamily:!0},outline:{outlineWidth:!0,outlineStyle:!0,outlineColor:!0}}},St=Tt.isUnitlessNumber,Ot=!1;if(a.canUseDOM){var Pt=document.createElement("div").style;try{Pt.font=""}catch(e){Ot=!0}}var xt=function(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),a=n,o=t[n];if(a=null==o||"boolean"==typeof o||""===o?"":r||"number"!=typeof o||0===o||St.hasOwnProperty(a)&&St[a]?(""+o).trim():o+"px","float"===n&&(n="cssFloat"),r)e.setProperty(n,a);else if(a)e[n]=a;else if(r=Ot&&Tt.shorthandPropertyExpansions[n])for(var i in r)e[i]="";else e[n]=""}},Et=new RegExp("^["+S.ATTRIBUTE_NAME_START_CHAR+"]["+S.ATTRIBUTE_NAME_CHAR+"]*$"),jt={},Ct={};var Ht={setAttributeForID:function(e,t){e.setAttribute(S.ID_ATTRIBUTE_NAME,t)},setAttributeForRoot:function(e){e.setAttribute(S.ROOT_ATTRIBUTE_NAME,"")},getValueForProperty:function(){},getValueForAttribute:function(){},setValueForProperty:function(e,t,n){var r=S.getPropertyInfo(t);if(r&&S.shouldSetAttribute(t,n)){var a=r.mutationMethod;a?a(e,n):null==n||r.hasBooleanValue&&!n||r.hasNumericValue&&isNaN(n)||r.hasPositiveNumericValue&&1>n||r.hasOverloadedBooleanValue&&!1===n?Ht.deleteValueForProperty(e,t):r.mustUseProperty?e[r.propertyName]=n:(t=r.attributeName,(a=r.attributeNamespace)?e.setAttributeNS(a,t,""+n):r.hasBooleanValue||r.hasOverloadedBooleanValue&&!0===n?e.setAttribute(t,""):e.setAttribute(t,""+n))}else Ht.setValueForAttribute(e,t,S.shouldSetAttribute(t,n)?n:null)},setValueForAttribute:function(e,t,n){(function(e){return!!Ct.hasOwnProperty(e)||!jt.hasOwnProperty(e)&&(Et.test(e)?Ct[e]=!0:(jt[e]=!0,!1))})(t)&&(null==n?e.removeAttribute(t):e.setAttribute(t,""+n))},deleteValueForAttribute:function(e,t){e.removeAttribute(t)},deleteValueForProperty:function(e,t){var n=S.getPropertyInfo(t);n?(t=n.mutationMethod)?t(e,void 0):n.mustUseProperty?e[n.propertyName]=!n.hasBooleanValue&&"":e.removeAttribute(n.attributeName):e.removeAttribute(t)}},At=Ht,Ft=ue.ReactDebugCurrentFrame;function Rt(){return null}var It={current:null,phase:null,resetCurrentFiber:function(){Ft.getCurrentStack=null,It.current=null,It.phase=null},setCurrentFiber:function(e,t){Ft.getCurrentStack=Rt,It.current=e,It.phase=t},getCurrentFiberOwnerName:function(){return null},getCurrentFiberStackAddendum:Rt},Nt=It,Wt={getHostProps:function(e,t){var n=t.value,r=t.checked;return o({type:void 0,step:void 0,min:void 0,max:void 0},t,{defaultChecked:void 0,defaultValue:void 0,value:null!=n?n:e._wrapperState.initialValue,checked:null!=r?r:e._wrapperState.initialChecked})},initWrapperState:function(e,t){var n=t.defaultValue;e._wrapperState={initialChecked:null!=t.checked?t.checked:t.defaultChecked,initialValue:null!=t.value?t.value:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}},updateWrapper:function(e,t){var n=t.checked;null!=n&&At.setValueForProperty(e,"checked",n||!1),null!=(n=t.value)?0===n&&""===e.value?e.value="0":"number"===t.type?(n!=(t=parseFloat(e.value)||0)||n==t&&e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n):(null==t.value&&null!=t.defaultValue&&e.defaultValue!==""+t.defaultValue&&(e.defaultValue=""+t.defaultValue),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked))},postMountWrapper:function(e,t){switch(t.type){case"submit":case"reset":break;case"color":case"date":case"datetime":case"datetime-local":case"month":case"time":case"week":e.value="",e.value=e.defaultValue;break;default:e.value=e.value}""!==(t=e.name)&&(e.name=""),e.defaultChecked=!e.defaultChecked,e.defaultChecked=!e.defaultChecked,""!==t&&(e.name=t)},restoreControlledState:function(e,t){Wt.updateWrapper(e,t);var n=t.name;if("radio"===t.type&&null!=n){for(t=e;t.parentNode;)t=t.parentNode;for(n=t.querySelectorAll("input[name="+JSON.stringify(""+n)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var a=ae.getFiberCurrentPropsFromNode(r);a||p("90"),Wt.updateWrapper(r,a)}}}}},zt=Wt;var Ut=function(){},Vt=function(e,t){null!=t.value&&e.setAttribute("value",t.value)},Bt=function(e,t){return e=o({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null==e||"string"!=typeof e&&"number"!=typeof e||(t+=e)})),t}(t.children))&&(e.children=t),e};function Kt(e,t,n){if(e=e.options,t){t={};for(var r=0;r<n.length;r++)t["$"+n[r]]=!0;for(n=0;n<e.length;n++)r=t.hasOwnProperty("$"+e[n].value),e[n].selected!==r&&(e[n].selected=r)}else{for(n=""+n,t=null,r=0;r<e.length;r++){if(e[r].value===n)return void(e[r].selected=!0);null!==t||e[r].disabled||(t=e[r])}null!==t&&(t.selected=!0)}}var Jt=function(e,t){return o({},t,{value:void 0})},qt=function(e,t){var n=t.value;e._wrapperState={initialValue:null!=n?n:t.defaultValue,wasMultiple:!!t.multiple}},Gt=function(e,t){e.multiple=!!t.multiple;var n=t.value;null!=n?Kt(e,!!t.multiple,n):null!=t.defaultValue&&Kt(e,!!t.multiple,t.defaultValue)},$t=function(e,t){e._wrapperState.initialValue=void 0;var n=e._wrapperState.wasMultiple;e._wrapperState.wasMultiple=!!t.multiple;var r=t.value;null!=r?Kt(e,!!t.multiple,r):n!==!!t.multiple&&(null!=t.defaultValue?Kt(e,!!t.multiple,t.defaultValue):Kt(e,!!t.multiple,t.multiple?[]:""))},Qt=function(e,t){var n=t.value;null!=n&&Kt(e,!!t.multiple,n)},Zt={getHostProps:function(e,t){return null!=t.dangerouslySetInnerHTML&&p("91"),o({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})},initWrapperState:function(e,t){var n=t.value,r=n;null==n&&(n=t.defaultValue,null!=(t=t.children)&&(null!=n&&p("92"),Array.isArray(t)&&(1>=t.length||p("93"),t=t[0]),n=""+t),null==n&&(n=""),r=n),e._wrapperState={initialValue:""+r}},updateWrapper:function(e,t){var n=t.value;null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&(e.defaultValue=n)),null!=t.defaultValue&&(e.defaultValue=t.defaultValue)},postMountWrapper:function(e){var t=e.textContent;t===e._wrapperState.initialValue&&(e.value=t)},restoreControlledState:function(e,t){Zt.updateWrapper(e,t)}},Xt=Zt,en=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function tn(e,t){t&&(en[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML)&&p("137",e,""),null!=t.dangerouslySetInnerHTML&&(null!=t.children&&p("60"),"object"==typeof t.dangerouslySetInnerHTML&&"__html"in t.dangerouslySetInnerHTML||p("61")),null!=t.style&&"object"!=typeof t.style&&p("62",""))}function nn(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}var rn=function(e){e._valueTracker||(e._valueTracker=function(e){var t=nn(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&"function"==typeof n.get&&"function"==typeof n.set)return Object.defineProperty(e,t,{enumerable:n.enumerable,configurable:!0,get:function(){return n.get.call(this)},set:function(e){r=""+e,n.set.call(this,e)}}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}(e))},an=function(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=nn(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)};function on(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var sn,un=_,ln=function(e){return"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,n,r,a){MSApp.execUnsafeLocalFunction((function(){return e(t,n)}))}:e}((function(e,t){if(e.namespaceURI!==un.svg||"innerHTML"in e)e.innerHTML=t;else for((sn=sn||document.createElement("div")).innerHTML="<svg>"+t+"</svg>",t=sn.firstChild;t.firstChild;)e.appendChild(t.firstChild)})),dn=/["'&<>]/,cn=W;function fn(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&n.nodeType===cn)return void(n.nodeValue=t)}e.textContent=t}a.canUseDOM&&("textContent"in document.documentElement||(fn=function(e,t){if(e.nodeType===cn)e.nodeValue=t;else{if("boolean"==typeof t||"number"==typeof t)t=""+t;else{t=""+t;var n=dn.exec(t);if(n){var r,a="",o=0;for(r=n.index;r<t.length;r++){switch(t.charCodeAt(r)){case 34:n="&quot;";break;case 38:n="&amp;";break;case 39:n="&#x27;";break;case 60:n="&lt;";break;case 62:n="&gt;";break;default:continue}o!==r&&(a+=t.substring(o,r)),o=r+1,a+=n}t=o!==r?a+t.substring(o,r):a}}ln(e,t)}}));var pn=fn,hn=(Nt.getCurrentFiberOwnerName,U),_n=V,mn=Lt.listenTo,yn=k.registrationNameModules,vn=_.html,Mn=m;function bn(e,t){mn(t,e.nodeType===hn||e.nodeType===_n?e:e.ownerDocument)}var gn={topAbort:"abort",topCanPlay:"canplay",topCanPlayThrough:"canplaythrough",topDurationChange:"durationchange",topEmptied:"emptied",topEncrypted:"encrypted",topEnded:"ended",topError:"error",topLoadedData:"loadeddata",topLoadedMetadata:"loadedmetadata",topLoadStart:"loadstart",topPause:"pause",topPlay:"play",topPlaying:"playing",topProgress:"progress",topRateChange:"ratechange",topSeeked:"seeked",topSeeking:"seeking",topStalled:"stalled",topSuspend:"suspend",topTimeUpdate:"timeupdate",topVolumeChange:"volumechange",topWaiting:"waiting"},Dn={createElement:function(e,t,n,r){return n=n.nodeType===hn?n:n.ownerDocument,r===vn&&(r=Mn(e)),r===vn?"script"===e?((e=n.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):e="string"==typeof t.is?n.createElement(e,{is:t.is}):n.createElement(e):e=n.createElementNS(r,e),e},createTextNode:function(e,t){return(t.nodeType===hn?t:t.ownerDocument).createTextNode(e)},setInitialProperties:function(e,t,n,r){var a=on(t,n);switch(t){case"iframe":case"object":Lt.trapBubbledEvent("topLoad","load",e);var o=n;break;case"video":case"audio":for(o in gn)gn.hasOwnProperty(o)&&Lt.trapBubbledEvent(o,gn[o],e);o=n;break;case"source":Lt.trapBubbledEvent("topError","error",e),o=n;break;case"img":case"image":Lt.trapBubbledEvent("topError","error",e),Lt.trapBubbledEvent("topLoad","load",e),o=n;break;case"form":Lt.trapBubbledEvent("topReset","reset",e),Lt.trapBubbledEvent("topSubmit","submit",e),o=n;break;case"details":Lt.trapBubbledEvent("topToggle","toggle",e),o=n;break;case"input":zt.initWrapperState(e,n),o=zt.getHostProps(e,n),Lt.trapBubbledEvent("topInvalid","invalid",e),bn(r,"onChange");break;case"option":Ut(e,n),o=Bt(e,n);break;case"select":qt(e,n),o=Jt(e,n),Lt.trapBubbledEvent("topInvalid","invalid",e),bn(r,"onChange");break;case"textarea":Xt.initWrapperState(e,n),o=Xt.getHostProps(e,n),Lt.trapBubbledEvent("topInvalid","invalid",e),bn(r,"onChange");break;default:o=n}tn(t,o);var i,u=o;for(i in u)if(u.hasOwnProperty(i)){var l=u[i];"style"===i?xt(e,l):"dangerouslySetInnerHTML"===i?null!=(l=l?l.__html:void 0)&&ln(e,l):"children"===i?"string"==typeof l?pn(e,l):"number"==typeof l&&pn(e,""+l):"suppressContentEditableWarning"!==i&&(yn.hasOwnProperty(i)?null!=l&&bn(r,i):a?At.setValueForAttribute(e,i,l):null!=l&&At.setValueForProperty(e,i,l))}switch(t){case"input":rn(e),zt.postMountWrapper(e,n);break;case"textarea":rn(e),Xt.postMountWrapper(e,n);break;case"option":Vt(e,n);break;case"select":Gt(e,n);break;default:"function"==typeof o.onClick&&(e.onclick=s)}},diffProperties:function(e,t,n,r,a){var o,i,u=null;switch(t){case"input":n=zt.getHostProps(e,n),r=zt.getHostProps(e,r),u=[];break;case"option":n=Bt(e,n),r=Bt(e,r),u=[];break;case"select":n=Jt(e,n),r=Jt(e,r),u=[];break;case"textarea":n=Xt.getHostProps(e,n),r=Xt.getHostProps(e,r),u=[];break;default:"function"!=typeof n.onClick&&"function"==typeof r.onClick&&(e.onclick=s)}for(o in tn(t,r),e=null,n)if(!r.hasOwnProperty(o)&&n.hasOwnProperty(o)&&null!=n[o])if("style"===o)for(i in t=n[o])t.hasOwnProperty(i)&&(e||(e={}),e[i]="");else"dangerouslySetInnerHTML"!==o&&"children"!==o&&"suppressContentEditableWarning"!==o&&(yn.hasOwnProperty(o)?u||(u=[]):(u=u||[]).push(o,null));for(o in r){var l=r[o];if(t=null!=n?n[o]:void 0,r.hasOwnProperty(o)&&l!==t&&(null!=l||null!=t))if("style"===o)if(t){for(i in t)!t.hasOwnProperty(i)||l&&l.hasOwnProperty(i)||(e||(e={}),e[i]="");for(i in l)l.hasOwnProperty(i)&&t[i]!==l[i]&&(e||(e={}),e[i]=l[i])}else e||(u||(u=[]),u.push(o,e)),e=l;else"dangerouslySetInnerHTML"===o?(l=l?l.__html:void 0,t=t?t.__html:void 0,null!=l&&t!==l&&(u=u||[]).push(o,""+l)):"children"===o?t===l||"string"!=typeof l&&"number"!=typeof l||(u=u||[]).push(o,""+l):"suppressContentEditableWarning"!==o&&(yn.hasOwnProperty(o)?(null!=l&&bn(a,o),u||t===l||(u=[])):(u=u||[]).push(o,l))}return e&&(u=u||[]).push("style",e),u},updateProperties:function(e,t,n,r,a){on(n,r),r=on(n,a);for(var o=0;o<t.length;o+=2){var i=t[o],s=t[o+1];"style"===i?xt(e,s):"dangerouslySetInnerHTML"===i?ln(e,s):"children"===i?pn(e,s):r?null!=s?At.setValueForAttribute(e,i,s):At.deleteValueForAttribute(e,i):null!=s?At.setValueForProperty(e,i,s):At.deleteValueForProperty(e,i)}switch(n){case"input":zt.updateWrapper(e,a),an(e);break;case"textarea":Xt.updateWrapper(e,a);break;case"select":$t(e,a)}},diffHydratedProperties:function(e,t,n,r,a){switch(t){case"iframe":case"object":Lt.trapBubbledEvent("topLoad","load",e);break;case"video":case"audio":for(var o in gn)gn.hasOwnProperty(o)&&Lt.trapBubbledEvent(o,gn[o],e);break;case"source":Lt.trapBubbledEvent("topError","error",e);break;case"img":case"image":Lt.trapBubbledEvent("topError","error",e),Lt.trapBubbledEvent("topLoad","load",e);break;case"form":Lt.trapBubbledEvent("topReset","reset",e),Lt.trapBubbledEvent("topSubmit","submit",e);break;case"details":Lt.trapBubbledEvent("topToggle","toggle",e);break;case"input":zt.initWrapperState(e,n),Lt.trapBubbledEvent("topInvalid","invalid",e),bn(a,"onChange");break;case"option":Ut(e,n);break;case"select":qt(e,n),Lt.trapBubbledEvent("topInvalid","invalid",e),bn(a,"onChange");break;case"textarea":Xt.initWrapperState(e,n),Lt.trapBubbledEvent("topInvalid","invalid",e),bn(a,"onChange")}for(var i in tn(t,n),r=null,n)n.hasOwnProperty(i)&&(o=n[i],"children"===i?"string"==typeof o?e.textContent!==o&&(r=["children",o]):"number"==typeof o&&e.textContent!==""+o&&(r=["children",""+o]):yn.hasOwnProperty(i)&&null!=o&&bn(a,i));switch(t){case"input":rn(e),zt.postMountWrapper(e,n);break;case"textarea":rn(e),Xt.postMountWrapper(e,n);break;case"select":case"option":break;default:"function"==typeof n.onClick&&(e.onclick=s)}return r},diffHydratedText:function(e,t){return e.nodeValue!==t},warnForDeletedHydratableElement:function(){},warnForDeletedHydratableText:function(){},warnForInsertedHydratedElement:function(){},warnForInsertedHydratedText:function(){},restoreControlledState:function(e,t,n){switch(t){case"input":zt.restoreControlledState(e,n);break;case"textarea":Xt.restoreControlledState(e,n);break;case"select":Qt(e,n)}}},kn=void 0;if(a.canUseDOM)if("function"!=typeof requestIdleCallback){var Ln=null,wn=null,Yn=!1,Tn=!1,Sn=0,On=33,Pn=33,xn={timeRemaining:"object"==typeof performance&&"function"==typeof performance.now?function(){return Sn-performance.now()}:function(){return Sn-Date.now()}},En="__reactIdleCallback$"+Math.random().toString(36).slice(2);window.addEventListener("message",(function(e){e.source===window&&e.data===En&&(Yn=!1,e=wn,wn=null,null!==e&&e(xn))}),!1);var jn=function(e){Tn=!1;var t=e-Sn+Pn;t<Pn&&On<Pn?(8>t&&(t=8),Pn=t<On?On:t):On=t,Sn=e+Pn,Yn||(Yn=!0,window.postMessage(En,"*")),t=Ln,Ln=null,null!==t&&t(e)};kn=function(e){return wn=e,Tn||(Tn=!0,requestAnimationFrame(jn)),0}}else kn=requestIdleCallback;else kn=function(e){return setTimeout((function(){e({timeRemaining:function(){return 1/0}})})),0};var Cn={rIC:kn},Hn=!0,An=0,Fn=1,Rn=2,In=3,Nn=4,Wn=5,zn=ye,Un=An,Vn=Fn,Bn=Rn,Kn=x,Jn=E,qn=void 0,Gn=void 0;function $n(e,t){return e!==Bn&&e!==Vn||t!==Bn&&t!==Vn?e===Un&&t!==Un?-255:e!==Un&&t===Un?255:e-t:0}function Qn(e,t,n,r){null!==n?n.next=t:(t.next=e.first,e.first=t),null!==r?t.next=r:e.last=t}function Zn(e,t){t=t.priorityLevel;var n=null;if(null!==e.last&&0>=$n(e.last.priorityLevel,t))n=e.last;else for(e=e.first;null!==e&&0>=$n(e.priorityLevel,t);)n=e,e=e.next;return n}function Xn(e,t){var n=e.alternate,r=e.updateQueue;null===r&&(r=e.updateQueue={first:null,last:null,hasForceUpdate:!1,callbackList:null}),null!==n?null===(e=n.updateQueue)&&(e=n.updateQueue={first:null,last:null,hasForceUpdate:!1,callbackList:null}):e=null;var a=qn=r;n=Gn=e!==r?e:null;var o=Zn(a,t),i=null!==o?o.next:a.first;return null===n?(Qn(a,t,o,i),null):(e=null!==(r=Zn(n,t))?r.next:n.first,Qn(a,t,o,i),i===e&&null!==i||o===r&&null!==o?(null===r&&(n.first=t),null===e&&(n.last=null),null):(Qn(n,t={priorityLevel:t.priorityLevel,partialState:t.partialState,callback:t.callback,isReplace:t.isReplace,isForced:t.isForced,isTopLevelUnmount:t.isTopLevelUnmount,next:null},r,e),t))}function er(e,t,n,r){return"function"==typeof(e=e.partialState)?e.call(t,n,r):e}var tr=function(e,t,n,r){Xn(e,{priorityLevel:r,partialState:t,callback:n,isReplace:!1,isForced:!1,isTopLevelUnmount:!1,next:null})},nr=function(e,t,n,r){Xn(e,{priorityLevel:r,partialState:t,callback:n,isReplace:!0,isForced:!1,isTopLevelUnmount:!1,next:null})},rr=function(e,t,n){Xn(e,{priorityLevel:n,partialState:null,callback:t,isReplace:!1,isForced:!0,isTopLevelUnmount:!1,next:null})},ar=function(e){var t=e.updateQueue;return null===t||e.tag!==Kn&&e.tag!==Jn?Un:null!==t.first?t.first.priorityLevel:Un},or=function(e,t,n,r){var a=null===t.element;e=Xn(e,t={priorityLevel:r,partialState:t,callback:n,isReplace:!1,isForced:!1,isTopLevelUnmount:a,next:null}),a&&(n=Gn,null!==(a=qn)&&null!==t.next&&(t.next=null,a.last=t),null!==n&&null!==e&&null!==e.next&&(e.next=null,n.last=t))},ir=function(e,t,n,r,a,i,s){null!==e&&e.updateQueue===n&&(n=t.updateQueue={first:n.first,last:n.last,callbackList:null,hasForceUpdate:!1}),e=n.callbackList;for(var u=n.hasForceUpdate,l=!0,d=n.first;null!==d&&0>=$n(d.priorityLevel,s);){var c;n.first=d.next,null===n.first&&(n.last=null),d.isReplace?(a=er(d,r,a,i),l=!0):(c=er(d,r,a,i))&&(a=l?o({},a,c):o(a,c),l=!1),d.isForced&&(u=!0),null===d.callback||d.isTopLevelUnmount&&null!==d.next||((e=null!==e?e:[]).push(d.callback),t.effectTag|=zn),d=d.next}return n.callbackList=e,n.hasForceUpdate=u,null!==n.first||null!==e||u||(t.updateQueue=null),a},sr=function(e,t,n){if(null!==(e=t.callbackList))for(t.callbackList=null,t=0;t<e.length;t++){var r=e[t];"function"!=typeof r&&p("191",r),r.call(n)}},ur=[],lr=-1,dr=function(e){return{current:e}},cr=function(e){0>lr||(e.current=ur[lr],ur[lr]=null,lr--)},fr=function(e,t){lr++,ur[lr]=e.current,e.current=t},pr=function(){for(;-1<lr;)ur[lr]=null,lr--},hr=Oe,_r=x,mr=E,yr=dr,vr=cr,Mr=fr,br=yr(u),gr=yr(!1),Dr=u;function kr(e,t,n){(e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=n}function Lr(e){return e.tag===_r&&null!=e.type.childContextTypes}function wr(e,t){var n=e.stateNode,r=e.type.childContextTypes;if("function"!=typeof n.getChildContext)return t;for(var a in n=n.getChildContext())a in r||p("108",le(e)||"Unknown",a);return o({},t,n)}var Yr=function(e){return Lr(e)?Dr:br.current},Tr=kr,Sr=function(e,t){var n=e.type.contextTypes;if(!n)return u;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var a,o={};for(a in n)o[a]=t[a];return r&&kr(e,t,o),o},Or=function(){return gr.current},Pr=function(e){return e.tag===_r&&null!=e.type.contextTypes},xr=Lr,Er=function(e){Lr(e)&&(vr(gr,e),vr(br,e))},jr=function(e){vr(gr,e),vr(br,e)},Cr=function(e,t,n){null!=br.cursor&&p("168"),Mr(br,t,e),Mr(gr,n,e)},Hr=wr,Ar=function(e){if(!Lr(e))return!1;var t=e.stateNode;return t=t&&t.__reactInternalMemoizedMergedChildContext||u,Dr=br.current,Mr(br,t,e),Mr(gr,gr.current,e),!0},Fr=function(e,t){var n=e.stateNode;if(n||p("169"),t){var r=wr(e,Dr);n.__reactInternalMemoizedMergedChildContext=r,vr(gr,e),vr(br,e),Mr(br,r,e)}else vr(gr,e);Mr(gr,t,e)},Rr=function(){Dr=u,br.current=u,gr.current=!1},Ir=function(e){for(hr(e)&&e.tag===_r||p("170");e.tag!==mr;){if(Lr(e))return e.stateNode.__reactInternalMemoizedMergedChildContext;(e=e.return)||p("171")}return e.stateNode.context},Nr=1,Wr=O,zr=x,Ur=E,Vr=C,Br=H,Kr=j,Jr=A,qr=R,Gr=I,$r=An,Qr=0,Zr=de;function Xr(e,t,n){this.tag=e,this.key=t,this.stateNode=this.type=null,this.sibling=this.child=this.return=null,this.index=0,this.memoizedState=this.updateQueue=this.memoizedProps=this.pendingProps=this.ref=null,this.internalContextTag=n,this.effectTag=Zr,this.lastEffect=this.firstEffect=this.nextEffect=null,this.pendingWorkPriority=$r,this.alternate=null}function ea(e,t,n){var r=void 0;return"function"==typeof e?(r=e.prototype&&e.prototype.isReactComponent?new Xr(zr,t,n):new Xr(Wr,t,n)).type=e:"string"==typeof e?(r=new Xr(Vr,t,n)).type=e:"object"==typeof e&&null!==e&&"number"==typeof e.tag?r=e:p("130",null==e?e:typeof e,""),r}var ta,na,ra=function(e,t){var n=e.alternate;return null===n?((n=new Xr(e.tag,e.key,e.internalContextTag)).type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.effectTag=Zr,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.pendingWorkPriority=t,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n},aa=function(e,t,n){return(t=ea(e.type,e.key,t)).pendingProps=e.props,t.pendingWorkPriority=n,t},oa=function(e,t,n){return(t=new Xr(Gr,null,t)).pendingProps=e,t.pendingWorkPriority=n,t},ia=function(e,t,n){return(t=new Xr(Br,null,t)).pendingProps=e,t.pendingWorkPriority=n,t},sa=function(){var e=new Xr(Vr,null,Qr);return e.type="DELETED",e},ua=function(e,t,n){return(t=new Xr(Jr,e.key,t)).type=e.handler,t.pendingProps=e,t.pendingWorkPriority=n,t},la=function(e,t){return new Xr(qr,null,t)},da=function(e,t,n){return(t=new Xr(Kr,e.key,t)).pendingProps=e.children||[],t.pendingWorkPriority=n,t.stateNode={containerInfo:e.containerInfo,implementation:e.implementation},t},ca=function(e,t){return e!==$r&&(t===$r||t>e)?e:t},fa=function(){return new Xr(Ur,null,Qr)},pa=O,ha=P,_a=x,ma=C;"function"==typeof Symbol&&Symbol.for?(ta=Symbol.for("react.coroutine"),na=Symbol.for("react.yield")):(ta=60104,na=60105);var ya={createCoroutine:function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:ta,key:null==r?null:""+r,children:e,handler:t,props:n}},createYield:function(e){return{$$typeof:na,value:e}},isCoroutine:function(e){return"object"==typeof e&&null!==e&&e.$$typeof===ta},isYield:function(e){return"object"==typeof e&&null!==e&&e.$$typeof===na},REACT_YIELD_TYPE:na,REACT_COROUTINE_TYPE:ta},va="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.portal")||60106,Ma={createPortal:function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:va,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}},isPortal:function(e){return"object"==typeof e&&null!==e&&e.$$typeof===va},REACT_PORTAL_TYPE:va},ba=ya.REACT_COROUTINE_TYPE,ga=ya.REACT_YIELD_TYPE,Da=Ma.REACT_PORTAL_TYPE,ka=ra,La=aa,wa=oa,Ya=ia,Ta=ua,Sa=la,Oa=da,Pa=Array.isArray,xa=P,Ea=x,ja=H,Ca=j,Ha=A,Aa=R,Fa=I,Ra=de,Ia=fe,Na=_e,Wa="function"==typeof Symbol&&Symbol.iterator,za="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103;function Ua(e){return null==e?null:"function"==typeof(e=Wa&&e[Wa]||e["@@iterator"])?e:null}function Va(e,t){var n=t.ref;if(null!==n&&"function"!=typeof n){if(t._owner){t=t._owner;var r=void 0;t&&("number"==typeof t.tag?(t.tag!==Ea&&p("110"),r=t.stateNode):r=t.getPublicInstance()),r||p("147",n);var a=""+n;return null!==e&&null!==e.ref&&e.ref._stringRef===a?e.ref:((e=function(e){var t=r.refs===u?r.refs={}:r.refs;null===e?delete t[a]:t[a]=e})._stringRef=a,e)}"string"!=typeof n&&p("148"),t._owner||p("149",n)}return n}function Ba(e,t){"textarea"!==e.type&&p("31","[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,"")}function Ka(e,t){function n(n,r){if(t){if(!e){if(null===r.alternate)return;r=r.alternate}var a=n.lastEffect;null!==a?(a.nextEffect=r,n.lastEffect=r):n.firstEffect=n.lastEffect=r,r.nextEffect=null,r.effectTag=Na}}function r(e,r){if(!t)return null;for(;null!==r;)n(e,r),r=r.sibling;return null}function a(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(t,n){return e?((t=ka(t,n)).index=0,t.sibling=null,t):(t.pendingWorkPriority=n,t.effectTag=Ra,t.index=0,t.sibling=null,t)}function i(e,n,r){return e.index=r,t?null!==(r=e.alternate)?(r=r.index)<n?(e.effectTag=Ia,n):r:(e.effectTag=Ia,n):n}function s(e){return t&&null===e.alternate&&(e.effectTag=Ia),e}function u(e,t,n,r){return null===t||t.tag!==ja?((n=Ya(n,e.internalContextTag,r)).return=e,n):((t=o(t,r)).pendingProps=n,t.return=e,t)}function l(e,t,n,r){return null===t||t.type!==n.type?((r=La(n,e.internalContextTag,r)).ref=Va(t,n),r.return=e,r):((r=o(t,r)).ref=Va(t,n),r.pendingProps=n.props,r.return=e,r)}function d(e,t,n,r){return null===t||t.tag!==Ha?((n=Ta(n,e.internalContextTag,r)).return=e,n):((t=o(t,r)).pendingProps=n,t.return=e,t)}function c(e,t,n,r){return null===t||t.tag!==Aa?((t=Sa(n,e.internalContextTag,r)).type=n.value,t.return=e,t):((t=o(t,r)).type=n.value,t.return=e,t)}function f(e,t,n,r){return null===t||t.tag!==Ca||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((n=Oa(n,e.internalContextTag,r)).return=e,n):((t=o(t,r)).pendingProps=n.children||[],t.return=e,t)}function h(e,t,n,r){return null===t||t.tag!==Fa?((n=wa(n,e.internalContextTag,r)).return=e,n):((t=o(t,r)).pendingProps=n,t.return=e,t)}function _(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Ya(""+t,e.internalContextTag,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case za:return(n=La(t,e.internalContextTag,n)).ref=Va(null,t),n.return=e,n;case ba:return(t=Ta(t,e.internalContextTag,n)).return=e,t;case ga:return(n=Sa(t,e.internalContextTag,n)).type=t.value,n.return=e,n;case Da:return(t=Oa(t,e.internalContextTag,n)).return=e,t}if(Pa(t)||Ua(t))return(t=wa(t,e.internalContextTag,n)).return=e,t;Ba(e,t)}return null}function m(e,t,n,r){var a=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==a?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case za:return n.key===a?l(e,t,n,r):null;case ba:return n.key===a?d(e,t,n,r):null;case ga:return null===a?c(e,t,n,r):null;case Da:return n.key===a?f(e,t,n,r):null}if(Pa(n)||Ua(n))return null!==a?null:h(e,t,n,r);Ba(e,n)}return null}function y(e,t,n,r,a){if("string"==typeof r||"number"==typeof r)return u(t,e=e.get(n)||null,""+r,a);if("object"==typeof r&&null!==r){switch(r.$$typeof){case za:return l(t,e=e.get(null===r.key?n:r.key)||null,r,a);case ba:return d(t,e=e.get(null===r.key?n:r.key)||null,r,a);case ga:return c(t,e=e.get(n)||null,r,a);case Da:return f(t,e=e.get(null===r.key?n:r.key)||null,r,a)}if(Pa(r)||Ua(r))return h(t,e=e.get(n)||null,r,a);Ba(t,r)}return null}function v(e,o,s,u){for(var l=null,d=null,c=o,f=o=0,p=null;null!==c&&f<s.length;f++){c.index>f?(p=c,c=null):p=c.sibling;var h=m(e,c,s[f],u);if(null===h){null===c&&(c=p);break}t&&c&&null===h.alternate&&n(e,c),o=i(h,o,f),null===d?l=h:d.sibling=h,d=h,c=p}if(f===s.length)return r(e,c),l;if(null===c){for(;f<s.length;f++)(c=_(e,s[f],u))&&(o=i(c,o,f),null===d?l=c:d.sibling=c,d=c);return l}for(c=a(e,c);f<s.length;f++)(p=y(c,e,f,s[f],u))&&(t&&null!==p.alternate&&c.delete(null===p.key?f:p.key),o=i(p,o,f),null===d?l=p:d.sibling=p,d=p);return t&&c.forEach((function(t){return n(e,t)})),l}function M(e,o,s,u){var l=Ua(s);"function"!=typeof l&&p("150"),null==(s=l.call(s))&&p("151");for(var d=l=null,c=o,f=o=0,h=null,v=s.next();null!==c&&!v.done;f++,v=s.next()){c.index>f?(h=c,c=null):h=c.sibling;var M=m(e,c,v.value,u);if(null===M){c||(c=h);break}t&&c&&null===M.alternate&&n(e,c),o=i(M,o,f),null===d?l=M:d.sibling=M,d=M,c=h}if(v.done)return r(e,c),l;if(null===c){for(;!v.done;f++,v=s.next())null!==(v=_(e,v.value,u))&&(o=i(v,o,f),null===d?l=v:d.sibling=v,d=v);return l}for(c=a(e,c);!v.done;f++,v=s.next())null!==(v=y(c,e,f,v.value,u))&&(t&&null!==v.alternate&&c.delete(null===v.key?f:v.key),o=i(v,o,f),null===d?l=v:d.sibling=v,d=v);return t&&c.forEach((function(t){return n(e,t)})),l}return function(e,t,a,i){var u="object"==typeof a&&null!==a;if(u)switch(a.$$typeof){case za:e:{var l=a.key;for(u=t;null!==u;){if(u.key===l){if(u.type===a.type){r(e,u.sibling),(t=o(u,i)).ref=Va(u,a),t.pendingProps=a.props,t.return=e,e=t;break e}r(e,u);break}n(e,u),u=u.sibling}(i=La(a,e.internalContextTag,i)).ref=Va(t,a),i.return=e,e=i}return s(e);case ba:e:{for(u=a.key;null!==t;){if(t.key===u){if(t.tag===Ha){r(e,t.sibling),(t=o(t,i)).pendingProps=a,t.return=e,e=t;break e}r(e,t);break}n(e,t),t=t.sibling}(a=Ta(a,e.internalContextTag,i)).return=e,e=a}return s(e);case ga:e:{if(null!==t){if(t.tag===Aa){r(e,t.sibling),(t=o(t,i)).type=a.value,t.return=e,e=t;break e}r(e,t)}(t=Sa(a,e.internalContextTag,i)).type=a.value,t.return=e,e=t}return s(e);case Da:e:{for(u=a.key;null!==t;){if(t.key===u){if(t.tag===Ca&&t.stateNode.containerInfo===a.containerInfo&&t.stateNode.implementation===a.implementation){r(e,t.sibling),(t=o(t,i)).pendingProps=a.children||[],t.return=e,e=t;break e}r(e,t);break}n(e,t),t=t.sibling}(a=Oa(a,e.internalContextTag,i)).return=e,e=a}return s(e)}if("string"==typeof a||"number"==typeof a)return a=""+a,null!==t&&t.tag===ja?(r(e,t.sibling),(t=o(t,i)).pendingProps=a,t.return=e,e=t):(r(e,t),(a=Ya(a,e.internalContextTag,i)).return=e,e=a),s(e);if(Pa(a))return v(e,t,a,i);if(Ua(a))return M(e,t,a,i);if(u&&Ba(e,a),void 0===a)switch(e.tag){case Ea:case xa:p("152",(a=e.type).displayName||a.name||"Component")}return r(e,t)}}var Ja={reconcileChildFibers:Ka(!0,!0),reconcileChildFibersInPlace:Ka(!1,!0),mountChildFibersInPlace:Ka(!1,!1),cloneChildFibers:function(e,t){if(null!==e&&t.child!==e.child&&p("153"),null!==t.child){e=t.child;var n=ka(e,e.pendingWorkPriority);for(n.pendingProps=e.pendingProps,t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=ka(e,e.pendingWorkPriority)).pendingProps=e.pendingProps,n.return=t;n.sibling=null}}},qa=pe,Ga=Nr,$a=Tr,Qa=Sr,Za=Yr,Xa=Pr,eo=tr,to=nr,no=rr,ro=ir,ao=Or,oo=Pe;var io=Ja.mountChildFibersInPlace,so=Ja.reconcileChildFibers,uo=Ja.reconcileChildFibersInPlace,lo=Ja.cloneChildFibers,co=ir,fo=Sr,po=Yr,ho=Or,_o=Ar,mo=Cr,yo=Fr,vo=O,Mo=P,bo=x,go=E,Do=C,ko=H,Lo=j,wo=A,Yo=F,To=R,So=I,Oo=An,Po=Wn,xo=ce,Eo=fe,jo=me,Co=ve,Ho=Me,Ao=ue.ReactCurrentOwner;function Fo(e,t,n,r,a){function o(e,t,n){i(e,t,n,t.pendingWorkPriority)}function i(e,t,n,r){t.child=null===e?io(t,t.child,n,r):e.child===t.child?so(t,t.child,n,r):uo(t,t.child,n,r)}function s(e,t){var n=t.ref;null===n||e&&e.ref===n||(t.effectTag|=Ho)}function d(e,t,n,r){if(s(e,t),!n)return r&&yo(t,!1),f(e,t);n=t.stateNode,Ao.current=t;var a=n.render();return t.effectTag|=xo,o(e,t,a),t.memoizedState=n.state,t.memoizedProps=n.props,r&&yo(t,!0),t.child}function c(e){var t=e.stateNode;t.pendingContext?mo(e,t.pendingContext,t.pendingContext!==t.context):t.context&&mo(e,t.context,!1),M(e,t.containerInfo)}function f(e,t){return lo(e,t),t.child}function h(e,t){switch(t.tag){case go:c(t);break;case bo:_o(t);break;case Lo:M(t,t.stateNode.containerInfo)}return null}var _=e.shouldSetTextContent,m=e.useSyncScheduling,y=e.shouldDeprioritizeSubtree,v=t.pushHostContext,M=t.pushHostContainer,b=n.enterHydrationState,g=n.resetHydrationState,D=n.tryToClaimNextHydratableInstance,k=(e=function(e,t,n,r){function a(e,t){t.updater=o,e.stateNode=t,se(t,e)}var o={isMounted:oo,enqueueSetState:function(n,r,a){n=oe(n);var o=t(n,!1);eo(n,r,void 0===a?null:a,o),e(n,o)},enqueueReplaceState:function(n,r,a){n=oe(n);var o=t(n,!1);to(n,r,void 0===a?null:a,o),e(n,o)},enqueueForceUpdate:function(n,r){n=oe(n);var a=t(n,!1);no(n,void 0===r?null:r,a),e(n,a)}};return{adoptClassInstance:a,constructClassInstance:function(e,t){var n=e.type,r=Za(e),o=Xa(e),i=o?Qa(e,r):u;return a(e,t=new n(t,i)),o&&$a(e,r,i),t},mountClassInstance:function(e,t){var n=e.alternate,r=e.stateNode,a=r.state||null,i=e.pendingProps;i||p("158");var s=Za(e);r.props=i,r.state=a,r.refs=u,r.context=Qa(e,s),Hn&&null!=e.type&&null!=e.type.prototype&&!0===e.type.prototype.unstable_isAsyncReactComponent&&(e.internalContextTag|=Ga),"function"==typeof r.componentWillMount&&(s=r.state,r.componentWillMount(),s!==r.state&&o.enqueueReplaceState(r,r.state,null),null!==(s=e.updateQueue)&&(r.state=ro(n,e,s,r,a,i,t))),"function"==typeof r.componentDidMount&&(e.effectTag|=qa)},updateClassInstance:function(e,t,a){var i=t.stateNode;i.props=t.memoizedProps,i.state=t.memoizedState;var s=t.memoizedProps,u=t.pendingProps;u||null==(u=s)&&p("159");var d=i.context,c=Za(t);if(c=Qa(t,c),"function"!=typeof i.componentWillReceiveProps||s===u&&d===c||(d=i.state,i.componentWillReceiveProps(u,c),i.state!==d&&o.enqueueReplaceState(i,i.state,null)),d=t.memoizedState,a=null!==t.updateQueue?ro(e,t,t.updateQueue,i,d,u,a):d,!(s!==u||d!==a||ao()||null!==t.updateQueue&&t.updateQueue.hasForceUpdate))return"function"!=typeof i.componentDidUpdate||s===e.memoizedProps&&d===e.memoizedState||(t.effectTag|=qa),!1;var f=u;if(null===s||null!==t.updateQueue&&t.updateQueue.hasForceUpdate)f=!0;else{var h=t.stateNode,_=t.type;f="function"==typeof h.shouldComponentUpdate?h.shouldComponentUpdate(f,a,c):!_.prototype||!_.prototype.isPureReactComponent||(!l(s,f)||!l(d,a))}return f?("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(u,a,c),"function"==typeof i.componentDidUpdate&&(t.effectTag|=qa)):("function"!=typeof i.componentDidUpdate||s===e.memoizedProps&&d===e.memoizedState||(t.effectTag|=qa),n(t,u),r(t,a)),i.props=u,i.state=a,i.context=c,f}}}(r,a,(function(e,t){e.memoizedProps=t}),(function(e,t){e.memoizedState=t}))).adoptClassInstance,L=e.constructClassInstance,w=e.mountClassInstance,Y=e.updateClassInstance;return{beginWork:function(e,t,n){if(t.pendingWorkPriority===Oo||t.pendingWorkPriority>n)return h(0,t);switch(t.tag){case vo:null!==e&&p("155");var r=t.type,a=t.pendingProps,i=po(t);return r=r(a,i=fo(t,i)),t.effectTag|=xo,"object"==typeof r&&null!==r&&"function"==typeof r.render?(t.tag=bo,a=_o(t),k(t,r),w(t,n),t=d(e,t,!0,a)):(t.tag=Mo,o(e,t,r),t.memoizedProps=a,t=t.child),t;case Mo:e:{if(a=t.type,n=t.pendingProps,r=t.memoizedProps,ho())null===n&&(n=r);else if(null===n||r===n){t=f(e,t);break e}r=po(t),a=a(n,r=fo(t,r)),t.effectTag|=xo,o(e,t,a),t.memoizedProps=n,t=t.child}return t;case bo:return a=_o(t),r=void 0,null===e?t.stateNode?p("153"):(L(t,t.pendingProps),w(t,n),r=!0):r=Y(e,t,n),d(e,t,r,a);case go:return c(t),null!==(r=t.updateQueue)?(a=t.memoizedState)===(r=co(e,t,r,null,a,null,n))?(g(),t=f(e,t)):(a=r.element,null!==e&&null!==e.child||!b(t)?(g(),o(e,t,a)):(t.effectTag|=Eo,t.child=io(t,t.child,a,n)),t.memoizedState=r,t=t.child):(g(),t=f(e,t)),t;case Do:v(t),null===e&&D(t),a=t.type;var u=t.memoizedProps;return null===(r=t.pendingProps)&&(null===(r=u)&&p("154")),i=null!==e?e.memoizedProps:null,ho()||null!==r&&u!==r?(u=r.children,_(a,r)?u=null:i&&_(a,i)&&(t.effectTag|=jo),s(e,t),n!==Po&&!m&&y(a,r)?(t.pendingWorkPriority=Po,t=null):(o(e,t,u),t.memoizedProps=r,t=t.child)):t=f(e,t),t;case ko:return null===e&&D(t),null===(e=t.pendingProps)&&(e=t.memoizedProps),t.memoizedProps=e,null;case Yo:t.tag=wo;case wo:return n=t.pendingProps,ho()?null===n&&(null===(n=e&&e.memoizedProps)&&p("154")):null!==n&&t.memoizedProps!==n||(n=t.memoizedProps),a=n.children,r=t.pendingWorkPriority,t.stateNode=null===e?io(t,t.stateNode,a,r):e.child===t.child?so(t,t.stateNode,a,r):uo(t,t.stateNode,a,r),t.memoizedProps=n,t.stateNode;case To:return null;case Lo:e:{if(M(t,t.stateNode.containerInfo),n=t.pendingWorkPriority,a=t.pendingProps,ho())null===a&&(null==(a=e&&e.memoizedProps)&&p("154"));else if(null===a||t.memoizedProps===a){t=f(e,t);break e}null===e?t.child=uo(t,t.child,a,n):o(e,t,a),t.memoizedProps=a,t=t.child}return t;case So:e:{if(n=t.pendingProps,ho())null===n&&(n=t.memoizedProps);else if(null===n||t.memoizedProps===n){t=f(e,t);break e}o(e,t,n),t.memoizedProps=n,t=t.child}return t;default:p("156")}},beginFailedWork:function(e,t,n){switch(t.tag){case bo:_o(t);break;case go:c(t);break;default:p("157")}return t.effectTag|=Co,null===e?t.child=null:t.child!==e.child&&(t.child=e.child),t.pendingWorkPriority===Oo||t.pendingWorkPriority>n?h(0,t):(t.firstEffect=null,t.lastEffect=null,i(e,t,null,n),t.tag===bo&&(e=t.stateNode,t.memoizedProps=e.props,t.memoizedState=e.state),t.child)}}}var Ro=Ja.reconcileChildFibers,Io=Er,No=jr,Wo=O,zo=P,Uo=x,Vo=E,Bo=C,Ko=H,Jo=j,qo=A,Go=F,$o=R,Qo=I,Zo=fe,Xo=Me,ei=pe,ti=Wn;var ni=null,ri=null;function ai(e){return function(t){try{return e(t)}catch(e){}}}var oi=function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!t.supportsFiber)return!0;try{var n=t.inject(e);ni=ai((function(e){return t.onCommitFiberRoot(n,e)})),ri=ai((function(e){return t.onCommitFiberUnmount(n,e)}))}catch(e){}return!0},ii=x,si=E,ui=C,li=H,di=j,ci=A,fi=sr,pi=function(e){"function"==typeof ri&&ri(e)},hi=fe,_i=pe,mi=ye,yi=me;var vi=dr,Mi=cr,bi=fr,gi={};var Di=C,ki=H,Li=E,wi=_e,Yi=fe,Ti=sa;var Si=Er,Oi=pr,Pi=ue.ReactCurrentOwner,xi=ra,Ei=ca,ji=function(e){"function"==typeof ni&&ni(e)},Ci=An,Hi=Fn,Ai=Rn,Fi=In,Ri=Nn,Ii=Wn,Ni=Nr,Wi=ce,zi=fe,Ui=pe,Vi=he,Bi=_e,Ki=me,Ji=ye,qi=ve,Gi=Me,$i=E,Qi=C,Zi=j,Xi=x,es=ar,ts=Rr;function ns(e){function t(){for(;null!==B&&B.current.pendingWorkPriority===Ci;){B.isScheduled=!1;var e=B.nextScheduledRoot;if(B.nextScheduledRoot=null,B===K)return K=B=null,z=Ci,null;B=e}e=B;for(var t=null,n=Ci;null!==e;)e.current.pendingWorkPriority!==Ci&&(n===Ci||n>e.current.pendingWorkPriority)&&(n=e.current.pendingWorkPriority,t=e),e=e.nextScheduledRoot;null!==t?(z=n,Oi(),ts(),g(),W=xi(t.current,n),t!==re&&(ne=0,re=t)):(z=Ci,re=W=null)}function n(n){X=!0,V=null;var r=n.stateNode;if(r.current===n&&p("177"),z!==Hi&&z!==Ai||ne++,Pi.current=null,n.effectTag>Wi)if(null!==n.lastEffect){n.lastEffect.nextEffect=n;var a=n.firstEffect}else a=n;else a=n.firstEffect;for(C(),U=a;null!==U;){var o=!1,i=void 0;try{for(;null!==U;){var s=U.effectTag;if(s&Ki&&e.resetTextContent(U.stateNode),s&Gi){var u=U.alternate;null!==u&&x(u)}switch(s&~(Ji|qi|Ki|Gi|Wi)){case zi:Y(U),U.effectTag&=~zi;break;case Vi:Y(U),U.effectTag&=~zi,S(U.alternate,U);break;case Ui:S(U.alternate,U);break;case Bi:ee=!0,T(U),ee=!1}U=U.nextEffect}}catch(e){o=!0,i=e}o&&(null===U&&p("178"),d(U,i),null!==U&&(U=U.nextEffect))}for(H(),r.current=n,U=a;null!==U;){r=!1,a=void 0;try{for(;null!==U;){var l=U.effectTag;if(l&(Ui|Ji)&&O(U.alternate,U),l&Gi&&P(U),l&qi)switch(o=U,i=void 0,null!==q&&(i=q.get(o),q.delete(o),null==i&&null!==o.alternate&&(o=o.alternate,i=q.get(o),q.delete(o))),null==i&&p("184"),o.tag){case Xi:o.stateNode.componentDidCatch(i.error,{componentStack:i.componentStack});break;case $i:null===Q&&(Q=i.error);break;default:p("157")}var c=U.nextEffect;U.nextEffect=null,U=c}}catch(e){r=!0,a=e}r&&(null===U&&p("178"),d(U,a),null!==U&&(U=U.nextEffect))}X=!1,"function"==typeof ji&&ji(n.stateNode),$&&($.forEach(m),$=null),t()}function r(e){for(;;){var t=w(e.alternate,e,z),n=e.return,r=e.sibling,a=e;if(!(a.pendingWorkPriority!==Ci&&a.pendingWorkPriority>z)){for(var o=es(a),i=a.child;null!==i;)o=Ei(o,i.pendingWorkPriority),i=i.sibling;a.pendingWorkPriority=o}if(null!==t)return t;if(null!==n&&(null===n.firstEffect&&(n.firstEffect=e.firstEffect),null!==e.lastEffect&&(null!==n.lastEffect&&(n.lastEffect.nextEffect=e.firstEffect),n.lastEffect=e.lastEffect),e.effectTag>Wi&&(null!==n.lastEffect?n.lastEffect.nextEffect=e:n.firstEffect=e,n.lastEffect=e)),null!==r)return r;if(null===n){V=e;break}e=n}return null}function a(e){var t=k(e.alternate,e,z);return null===t&&(t=r(e)),Pi.current=null,t}function o(e){var t=L(e.alternate,e,z);return null===t&&(t=r(e)),Pi.current=null,t}function i(e){l(Ii,e)}function s(){if(null!==q&&0<q.size&&z===Ai)for(;null!==W;){var e=W;if(null===(W=null!==q&&(q.has(e)||null!==e.alternate&&q.has(e.alternate))?o(W):a(W))&&(null===V&&p("179"),A=Ai,n(V),A=z,null===q||0===q.size||z!==Ai))break}}function u(e,r){if(null!==V?(A=Ai,n(V),s()):null===W&&t(),!(z===Ci||z>e)){A=z;e:for(;;){if(z<=Ai)for(;null!==W&&!(null===(W=a(W))&&(null===V&&p("179"),A=Ai,n(V),A=z,s(),z===Ci||z>e||z>Ai)););else if(null!==r)for(;null!==W&&!R;)if(1<r.timeRemaining()){if(null===(W=a(W)))if(null===V&&p("179"),1<r.timeRemaining()){if(A=Ai,n(V),A=z,s(),z===Ci||z>e||z<Fi)break}else R=!0}else R=!0;switch(z){case Hi:case Ai:if(z<=e)continue e;break e;case Fi:case Ri:case Ii:if(null===r)break e;if(!R&&z<=e)continue e;break e;case Ci:break e;default:p("181")}}}}function l(e,t){F&&p("182"),F=!0;var n=A,r=!1,a=null;try{u(e,t)}catch(e){r=!0,a=e}for(;r;){if(Z){Q=a;break}var s=W;if(null===s)Z=!0;else{var l=d(s,a);if(null===l&&p("183"),!Z){try{r=l,a=e,l=t;for(var c=r;null!==s;){switch(s.tag){case Xi:Si(s);break;case Qi:b(s);break;case $i:M(s);break;case Zi:M(s)}if(s===c||s.alternate===c)break;s=s.return}W=o(r),u(a,l)}catch(e){r=!0,a=e;continue}break}}}if(A=n,null!==t&&(J=!1),z>Ai&&!J&&(E(i),J=!0),e=Q,Z=R=F=!1,re=G=q=Q=null,ne=0,null!==e)throw e}function d(e,t){var n=Pi.current=null,r=!1,a=!1,o=null;if(e.tag===$i)n=e,c(e)&&(Z=!0);else for(var i=e.return;null!==i&&null===n;){if(i.tag===Xi?"function"==typeof i.stateNode.componentDidCatch&&(r=!0,o=le(i),n=i,a=!0):i.tag===$i&&(n=i),c(i)){if(ee||null!==$&&($.has(i)||null!==i.alternate&&$.has(i.alternate)))return null;n=null,a=!1}i=i.return}if(null!==n){null===G&&(G=new Set),G.add(n);var s="";i=e;do{e:switch(i.tag){case pa:case ha:case _a:case ma:var u=i._debugOwner,l=i._debugSource,d=le(i),f=null;u&&(f=le(u)),d="\n    in "+(d||"Unknown")+((u=l)?" (at "+u.fileName.replace(/^.*[\\\/]/,"")+":"+u.lineNumber+")":f?" (created by "+f+")":"");break e;default:d=""}s+=d,i=i.return}while(i);i=s,e=le(e),null===q&&(q=new Map),t={componentName:e,componentStack:i,error:t,errorBoundary:r?n.stateNode:null,errorBoundaryFound:r,errorBoundaryName:o,willRetry:a},q.set(n,t);try{console.error(t.error)}catch(e){console.error(e)}return X?(null===$&&($=new Set),$.add(n)):m(n),n}return null===Q&&(Q=t),null}function c(e){return null!==G&&(G.has(e)||null!==e.alternate&&G.has(e.alternate))}function f(e,t){return h(e,t)}function h(e,t){ne>te&&(Z=!0,p("185")),!F&&t<=z&&(W=null);for(var n=!0;null!==e&&n;){if(n=!1,(e.pendingWorkPriority===Ci||e.pendingWorkPriority>t)&&(n=!0,e.pendingWorkPriority=t),null!==e.alternate&&(e.alternate.pendingWorkPriority===Ci||e.alternate.pendingWorkPriority>t)&&(n=!0,e.alternate.pendingWorkPriority=t),null===e.return){if(e.tag!==$i)break;var r=e.stateNode;if(t===Ci||r.isScheduled||(r.isScheduled=!0,K?K.nextScheduledRoot=r:B=r,K=r),!F)switch(t){case Hi:l(N?Hi:Ai,null);break;case Ai:I||p("186");break;default:J||(E(i),J=!0)}}e=e.return}}function _(e,t){var n=A;return n===Ci&&(n=!j||e.internalContextTag&Ni||t?Ri:Hi),n===Hi&&(F||I)?Ai:n}function m(e){h(e,Ai)}var y=function(e){function t(e){return e===gi&&p("174"),e}var n=e.getChildHostContext,r=e.getRootHostContext,a=vi(gi),o=vi(gi),i=vi(gi);return{getHostContext:function(){return t(a.current)},getRootHostContainer:function(){return t(i.current)},popHostContainer:function(e){Mi(a,e),Mi(o,e),Mi(i,e)},popHostContext:function(e){o.current===e&&(Mi(a,e),Mi(o,e))},pushHostContainer:function(e,t){bi(i,t,e),t=r(t),bi(o,e,e),bi(a,t,e)},pushHostContext:function(e){var r=t(i.current),s=t(a.current);s!==(r=n(s,e.type,r))&&(bi(o,e,e),bi(a,r,e))},resetHostContainer:function(){a.current=gi,i.current=gi}}}(e),v=function(e){function t(e,t){var n=Ti();n.stateNode=t,n.return=e,n.effectTag=wi,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function n(e,t){switch(e.tag){case Di:return o(t,e.type,e.pendingProps);case ki:return i(t,e.pendingProps);default:return!1}}function r(e){for(e=e.return;null!==e&&e.tag!==Di&&e.tag!==Li;)e=e.return;h=e}var a=e.shouldSetTextContent,o=e.canHydrateInstance,i=e.canHydrateTextInstance,s=e.getNextHydratableSibling,u=e.getFirstHydratableChild,l=e.hydrateInstance,d=e.hydrateTextInstance,c=e.didNotHydrateInstance,f=e.didNotFindHydratableInstance;if(e=e.didNotFindHydratableTextInstance,!(o&&i&&s&&u&&l&&d&&c&&f&&e))return{enterHydrationState:function(){return!1},resetHydrationState:function(){},tryToClaimNextHydratableInstance:function(){},prepareToHydrateHostInstance:function(){p("175")},prepareToHydrateHostTextInstance:function(){p("176")},popHydrationState:function(){return!1}};var h=null,_=null,m=!1;return{enterHydrationState:function(e){return _=u(e.stateNode.containerInfo),h=e,m=!0},resetHydrationState:function(){_=h=null,m=!1},tryToClaimNextHydratableInstance:function(e){if(m){var r=_;if(r){if(!n(e,r)){if(!(r=s(r))||!n(e,r))return e.effectTag|=Yi,m=!1,void(h=e);t(h,_)}e.stateNode=r,h=e,_=u(r)}else e.effectTag|=Yi,m=!1,h=e}},prepareToHydrateHostInstance:function(e,t,n){return t=l(e.stateNode,e.type,e.memoizedProps,t,n,e),e.updateQueue=t,null!==t},prepareToHydrateHostTextInstance:function(e){return d(e.stateNode,e.memoizedProps,e)},popHydrationState:function(e){if(e!==h)return!1;if(!m)return r(e),m=!0,!1;var n=e.type;if(e.tag!==Di||"head"!==n&&"body"!==n&&!a(n,e.memoizedProps))for(n=_;n;)t(e,n),n=s(n);return r(e),_=h?s(e.stateNode):null,!0}}}(e),M=y.popHostContainer,b=y.popHostContext,g=y.resetHostContainer,D=Fo(e,y,v,f,_),k=D.beginWork,L=D.beginFailedWork,w=function(e,t,n){var r=e.createInstance,a=e.createTextInstance,o=e.appendInitialChild,i=e.finalizeInitialChildren,s=e.prepareUpdate,u=t.getRootHostContainer,l=t.popHostContext,d=t.getHostContext,c=t.popHostContainer,f=n.prepareToHydrateHostInstance,h=n.prepareToHydrateHostTextInstance,_=n.popHydrationState;return{completeWork:function(e,t,n){var m=t.pendingProps;switch(null===m?m=t.memoizedProps:t.pendingWorkPriority===ti&&n!==ti||(t.pendingProps=null),t.tag){case zo:return null;case Uo:return Io(t),null;case Vo:return c(t),No(t),(m=t.stateNode).pendingContext&&(m.context=m.pendingContext,m.pendingContext=null),null!==e&&null!==e.child||(_(t),t.effectTag&=~Zo),null;case Bo:l(t),n=u();var y=t.type;if(null!==e&&null!=t.stateNode){var v=e.memoizedProps,M=t.stateNode,b=d();m=s(M,y,v,m,n,b),(t.updateQueue=m)&&(t.effectTag|=ei),e.ref!==t.ref&&(t.effectTag|=Xo)}else{if(!m)return null===t.stateNode&&p("166"),null;if(e=d(),_(t))f(t,n,e)&&(t.effectTag|=ei);else{e=r(y,m,n,e,t);e:for(v=t.child;null!==v;){if(v.tag===Bo||v.tag===Ko)o(e,v.stateNode);else if(v.tag!==Jo&&null!==v.child){v=v.child;continue}if(v===t)break e;for(;null===v.sibling;){if(null===v.return||v.return===t)break e;v=v.return}v=v.sibling}i(e,y,m,n)&&(t.effectTag|=ei),t.stateNode=e}null!==t.ref&&(t.effectTag|=Xo)}return null;case Ko:if(e&&null!=t.stateNode)e.memoizedProps!==m&&(t.effectTag|=ei);else{if("string"!=typeof m)return null===t.stateNode&&p("166"),null;e=u(),n=d(),_(t)?h(t)&&(t.effectTag|=ei):t.stateNode=a(m,e,n,t)}return null;case qo:(m=t.memoizedProps)||p("165"),t.tag=Go,n=[];e:for((y=t.stateNode)&&(y.return=t);null!==y;){if(y.tag===Bo||y.tag===Ko||y.tag===Jo)p("164");else if(y.tag===$o)n.push(y.type);else if(null!==y.child){y.child.return=y,y=y.child;continue}for(;null===y.sibling;){if(null===y.return||y.return===t)break e;y=y.return}y.sibling.return=y.return,y=y.sibling}return m=(y=m.handler)(m.props,n),t.child=Ro(t,null!==e?e.child:null,m,t.pendingWorkPriority),t.child;case Go:return t.tag=qo,null;case $o:case Qo:return null;case Jo:return t.effectTag|=ei,c(t),null;case Wo:p("167");default:p("156")}}}}(e,y,v).completeWork,Y=(y=function(e,t){function n(e){var n=e.ref;if(null!==n)try{n(null)}catch(n){t(e,n)}}function r(e){return e.tag===ui||e.tag===si||e.tag===di}function a(e){for(var t=e;;)if(i(t),null!==t.child&&t.tag!==di)t.child.return=t,t=t.child;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return;t=t.return}t.sibling.return=t.return,t=t.sibling}}function o(e){for(var t=e,n=!1,r=void 0,o=void 0;;){if(!n){n=t.return;e:for(;;){switch(null===n&&p("160"),n.tag){case ui:r=n.stateNode,o=!1;break e;case si:case di:r=n.stateNode.containerInfo,o=!0;break e}n=n.return}n=!0}if(t.tag===ui||t.tag===li)a(t),o?y(r,t.stateNode):m(r,t.stateNode);else if(t.tag===di?r=t.stateNode.containerInfo:i(t),null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return;(t=t.return).tag===di&&(n=!1)}t.sibling.return=t.return,t=t.sibling}}function i(e){switch("function"==typeof pi&&pi(e),e.tag){case ii:n(e);var r=e.stateNode;if("function"==typeof r.componentWillUnmount)try{r.props=e.memoizedProps,r.state=e.memoizedState,r.componentWillUnmount()}catch(n){t(e,n)}break;case ui:n(e);break;case ci:a(e.stateNode);break;case di:o(e)}}var s=e.commitMount,u=e.commitUpdate,l=e.resetTextContent,d=e.commitTextUpdate,c=e.appendChild,f=e.appendChildToContainer,h=e.insertBefore,_=e.insertInContainerBefore,m=e.removeChild,y=e.removeChildFromContainer,v=e.getPublicInstance;return{commitPlacement:function(e){e:{for(var t=e.return;null!==t;){if(r(t)){var n=t;break e}t=t.return}p("160"),n=void 0}var a=t=void 0;switch(n.tag){case ui:t=n.stateNode,a=!1;break;case si:case di:t=n.stateNode.containerInfo,a=!0;break;default:p("161")}n.effectTag&yi&&(l(t),n.effectTag&=~yi);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||r(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;n.tag!==ui&&n.tag!==li;){if(n.effectTag&hi)continue t;if(null===n.child||n.tag===di)continue t;n.child.return=n,n=n.child}if(!(n.effectTag&hi)){n=n.stateNode;break e}}for(var o=e;;){if(o.tag===ui||o.tag===li)n?a?_(t,o.stateNode,n):h(t,o.stateNode,n):a?f(t,o.stateNode):c(t,o.stateNode);else if(o.tag!==di&&null!==o.child){o.child.return=o,o=o.child;continue}if(o===e)break;for(;null===o.sibling;){if(null===o.return||o.return===e)return;o=o.return}o.sibling.return=o.return,o=o.sibling}},commitDeletion:function(e){o(e),e.return=null,e.child=null,e.alternate&&(e.alternate.child=null,e.alternate.return=null)},commitWork:function(e,t){switch(t.tag){case ii:break;case ui:var n=t.stateNode;if(null!=n){var r=t.memoizedProps;e=null!==e?e.memoizedProps:r;var a=t.type,o=t.updateQueue;t.updateQueue=null,null!==o&&u(n,o,a,e,r,t)}break;case li:null===t.stateNode&&p("162"),n=t.memoizedProps,d(t.stateNode,null!==e?e.memoizedProps:n,n);break;case si:case di:break;default:p("163")}},commitLifeCycles:function(e,t){switch(t.tag){case ii:var n=t.stateNode;if(t.effectTag&_i)if(null===e)n.props=t.memoizedProps,n.state=t.memoizedState,n.componentDidMount();else{var r=e.memoizedProps;e=e.memoizedState,n.props=t.memoizedProps,n.state=t.memoizedState,n.componentDidUpdate(r,e)}t.effectTag&mi&&null!==t.updateQueue&&fi(t,t.updateQueue,n);break;case si:null!==(e=t.updateQueue)&&fi(t,e,t.child&&t.child.stateNode);break;case ui:n=t.stateNode,null===e&&t.effectTag&_i&&s(n,t.type,t.memoizedProps,t);break;case li:case di:break;default:p("163")}},commitAttachRef:function(e){var t=e.ref;if(null!==t){var n=e.stateNode;switch(e.tag){case ui:t(v(n));break;default:t(n)}}},commitDetachRef:function(e){null!==(e=e.ref)&&e(null)}}}(e,d)).commitPlacement,T=y.commitDeletion,S=y.commitWork,O=y.commitLifeCycles,P=y.commitAttachRef,x=y.commitDetachRef,E=e.scheduleDeferredCallback,j=e.useSyncScheduling,C=e.prepareForCommit,H=e.resetAfterCommit,A=Ci,F=!1,R=!1,I=!1,N=!1,W=null,z=Ci,U=null,V=null,B=null,K=null,J=!1,q=null,G=null,$=null,Q=null,Z=!1,X=!1,ee=!1,te=1e3,ne=0,re=null;return{scheduleUpdate:f,getPriorityContext:_,batchedUpdates:function(e,t){var n=I;I=!0;try{return e(t)}finally{I=n,F||I||l(Ai,null)}},unbatchedUpdates:function(e){var t=N,n=I;N=I,I=!1;try{return e()}finally{I=n,N=t}},flushSync:function(e){var t=I,n=A;I=!0,A=Hi;try{return e()}finally{I=t,A=n,F&&p("187"),l(Ai,null)}},deferredUpdates:function(e){var t=A;A=Ri;try{return e()}finally{A=t}}}}function rs(){p("196")}function as(e){return e?"number"==typeof(e=oe(e)).tag?rs(e):e._processChildContext(e._context):u}as._injectFiber=function(e){rs=e};var os=or,is=Ir,ss=xr,us=Hr,ls=C,ds=xe,cs=Ee;as._injectFiber((function(e){var t=is(e);return ss(e)?us(e,t,!1):t}));var fs=W;function ps(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function hs(e,t){var n,r=ps(e);for(e=0;r;){if(r.nodeType===fs){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=ps(r)}}var _s=null;function ms(){return!_s&&a.canUseDOM&&(_s="textContent"in document.documentElement?"textContent":"innerText"),_s}var ys=function(e){var t=window.getSelection&&window.getSelection();if(!t||0===t.rangeCount)return null;var n=t.anchorNode,r=t.anchorOffset,a=t.focusNode,o=t.focusOffset,i=t.getRangeAt(0);try{i.startContainer.nodeType,i.endContainer.nodeType}catch(e){return null}t=t.anchorNode===t.focusNode&&t.anchorOffset===t.focusOffset?0:i.toString().length;var s=i.cloneRange();return s.selectNodeContents(e),s.setEnd(i.startContainer,i.startOffset),i=(e=s.startContainer===s.endContainer&&s.startOffset===s.endOffset?0:s.toString().length)+t,(t=document.createRange()).setStart(n,r),t.setEnd(a,o),{start:(n=t.collapsed)?i:e,end:n?e:i}},vs=function(e,t){if(window.getSelection){var n=window.getSelection(),r=e[ms()].length,a=Math.min(t.start,r);if(t=void 0===t.end?a:Math.min(t.end,r),!n.extend&&a>t&&(r=t,t=a,a=r),r=hs(e,a),e=hs(e,t),r&&e){var o=document.createRange();o.setStart(r.node,r.offset),n.removeAllRanges(),a>t?(n.addRange(o),n.extend(e.node,e.offset)):(o.setEnd(e.node,e.offset),n.addRange(o))}}},Ms=N,bs={hasSelectionCapabilities:function(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&"text"===e.type||"textarea"===t||"true"===e.contentEditable)},getSelectionInformation:function(){var e=f();return{focusedElem:e,selectionRange:bs.hasSelectionCapabilities(e)?bs.getSelection(e):null}},restoreSelection:function(e){var t=f(),n=e.focusedElem;if(e=e.selectionRange,t!==n&&d(document.documentElement,n)){for(bs.hasSelectionCapabilities(n)&&bs.setSelection(n,e),t=[],e=n;e=e.parentNode;)e.nodeType===Ms&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for(c(n),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}},getSelection:function(e){return("selectionStart"in e?{start:e.selectionStart,end:e.selectionEnd}:ys(e))||{start:0,end:0}},setSelection:function(e,t){var n=t.start,r=t.end;void 0===r&&(r=n),"selectionStart"in e?(e.selectionStart=n,e.selectionEnd=Math.min(r,e.value.length)):vs(e,t)}},gs=bs,Ds=N;function ks(){p("211")}function Ls(){p("212")}function ws(e){if(null==e)return null;if(e.nodeType===Ds)return e;var t=oe(e);if(t)return"number"==typeof t.tag?ks(t):Ls(t);"function"==typeof e.render?p("188"):p("213",Object.keys(e))}ws._injectFiber=function(e){ks=e},ws._injectStack=function(e){Ls=e};var Ys=C;function Ts(e){if(void 0!==e._hostParent)return e._hostParent;if("number"==typeof e.tag){do{e=e.return}while(e&&e.tag!==Ys);if(e)return e}return null}function Ss(e,t){for(var n=0,r=e;r;r=Ts(r))n++;r=0;for(var a=t;a;a=Ts(a))r++;for(;0<n-r;)e=Ts(e),n--;for(;0<r-n;)t=Ts(t),r--;for(;n--;){if(e===t||e===t.alternate)return e;e=Ts(e),t=Ts(t)}return null}var Os=function(e){return Ts(e)},Ps=function(e,t,n){for(var r=[];e;)r.push(e),e=Ts(e);for(e=r.length;0<e--;)t(r[e],"captured",n);for(e=0;e<r.length;e++)t(r[e],"bubbled",n)},xs=function(e,t,n,r,a){for(var o=e&&t?Ss(e,t):null,i=[];e&&e!==o;)i.push(e),e=Ts(e);for(e=[];t&&t!==o;)e.push(t),t=Ts(t);for(t=0;t<i.length;t++)n(i[t],"bubbled",r);for(t=e.length;0<t--;)n(e[t],"captured",a)},Es=ft.getListener;function js(e,t,n){(t=Es(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=at(n._dispatchListeners,t),n._dispatchInstances=at(n._dispatchInstances,e))}function Cs(e){e&&e.dispatchConfig.phasedRegistrationNames&&Ps(e._targetInst,js,e)}function Hs(e){if(e&&e.dispatchConfig.phasedRegistrationNames){var t=e._targetInst;t=t?Os(t):null,Ps(t,js,e)}}function As(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=Es(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=at(n._dispatchListeners,t),n._dispatchInstances=at(n._dispatchInstances,e))}function Fs(e){e&&e.dispatchConfig.registrationName&&As(e._targetInst,null,e)}var Rs={accumulateTwoPhaseDispatches:function(e){ot(e,Cs)},accumulateTwoPhaseDispatchesSkipTarget:function(e){ot(e,Hs)},accumulateDirectDispatches:function(e){ot(e,Fs)},accumulateEnterLeaveDispatches:function(e,t,n,r){xs(n,r,As,e,t)}},Is={_root:null,_startText:null,_fallbackText:null},Ns={initialize:function(e){return Is._root=e,Is._startText=Ns.getText(),!0},reset:function(){Is._root=null,Is._startText=null,Is._fallbackText=null},getData:function(){if(Is._fallbackText)return Is._fallbackText;var e,t,n=Is._startText,r=n.length,a=Ns.getText(),o=a.length;for(e=0;e<r&&n[e]===a[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===a[o-t];t++);return Is._fallbackText=a.slice(e,1<t?1-t:void 0),Is._fallbackText},getText:function(){return"value"in Is._root?Is._root.value:Is._root[ms()]}},Ws=Ns,zs="dispatchConfig _targetInst nativeEvent isDefaultPrevented isPropagationStopped _dispatchListeners _dispatchInstances".split(" "),Us={type:null,target:null,currentTarget:s.thatReturnsNull,eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null};function Vs(e,t,n,r){for(var a in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(a)&&((t=e[a])?this[a]=t(n):"target"===a?this.target=r:this[a]=n[a]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?s.thatReturnsTrue:s.thatReturnsFalse,this.isPropagationStopped=s.thatReturnsFalse,this}function Bs(e,t,n,r){if(this.eventPool.length){var a=this.eventPool.pop();return this.call(a,e,t,n,r),a}return new this(e,t,n,r)}function Ks(e){e instanceof this||p("223"),e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function Js(e){e.eventPool=[],e.getPooled=Bs,e.release=Ks}function qs(e,t,n,r){return Vs.call(this,e,t,n,r)}function Gs(e,t,n,r){return Vs.call(this,e,t,n,r)}o(Vs.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=s.thatReturnsTrue)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=s.thatReturnsTrue)},persist:function(){this.isPersistent=s.thatReturnsTrue},isPersistent:s.thatReturnsFalse,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;for(t=0;t<zs.length;t++)this[zs[t]]=null}}),Vs.Interface=Us,Vs.augmentClass=function(e,t){function n(){}n.prototype=this.prototype;var r=new n;o(r,e.prototype),e.prototype=r,e.prototype.constructor=e,e.Interface=o({},this.Interface,t),e.augmentClass=this.augmentClass,Js(e)},Js(Vs),Vs.augmentClass(qs,{data:null}),Vs.augmentClass(Gs,{data:null});var $s,Qs=[9,13,27,32],Zs=a.canUseDOM&&"CompositionEvent"in window,Xs=null;if(a.canUseDOM&&"documentMode"in document&&(Xs=document.documentMode),$s=a.canUseDOM&&"TextEvent"in window&&!Xs){var eu=window.opera;$s=!("object"==typeof eu&&"function"==typeof eu.version&&12>=parseInt(eu.version(),10))}var tu=$s,nu=a.canUseDOM&&(!Zs||Xs&&8<Xs&&11>=Xs),ru=String.fromCharCode(32),au={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["topCompositionEnd","topKeyPress","topTextInput","topPaste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"topBlur topCompositionEnd topKeyDown topKeyPress topKeyUp topMouseDown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"topBlur topCompositionStart topKeyDown topKeyPress topKeyUp topMouseDown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"topBlur topCompositionUpdate topKeyDown topKeyPress topKeyUp topMouseDown".split(" ")}},ou=!1;function iu(e,t){switch(e){case"topKeyUp":return-1!==Qs.indexOf(t.keyCode);case"topKeyDown":return 229!==t.keyCode;case"topKeyPress":case"topMouseDown":case"topBlur":return!0;default:return!1}}function su(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var uu=!1;var lu={eventTypes:au,extractEvents:function(e,t,n,r){var a;if(Zs)e:{switch(e){case"topCompositionStart":var o=au.compositionStart;break e;case"topCompositionEnd":o=au.compositionEnd;break e;case"topCompositionUpdate":o=au.compositionUpdate;break e}o=void 0}else uu?iu(e,n)&&(o=au.compositionEnd):"topKeyDown"===e&&229===n.keyCode&&(o=au.compositionStart);return o?(nu&&(uu||o!==au.compositionStart?o===au.compositionEnd&&uu&&(a=Ws.getData()):uu=Ws.initialize(r)),o=qs.getPooled(o,t,n,r),a?o.data=a:null!==(a=su(n))&&(o.data=a),Rs.accumulateTwoPhaseDispatches(o),a=o):a=null,(e=tu?function(e,t){switch(e){case"topCompositionEnd":return su(t);case"topKeyPress":return 32!==t.which?null:(ou=!0,ru);case"topTextInput":return(e=t.data)===ru&&ou?null:e;default:return null}}(e,n):function(e,t){if(uu)return"topCompositionEnd"===e||!Zs&&iu(e,t)?(e=Ws.getData(),Ws.reset(),uu=!1,e):null;switch(e){case"topPaste":return null;case"topKeyPress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"topCompositionEnd":return nu?null:t.data;default:return null}}(e,n))?((t=Gs.getPooled(au.beforeInput,t,n,r)).data=e,Rs.accumulateTwoPhaseDispatches(t)):t=null,[a,t]}},du={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function cu(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!du[e.type]:"textarea"===t}var fu={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"topBlur topChange topClick topFocus topInput topKeyDown topKeyUp topSelectionChange".split(" ")}};function pu(e,t,n){return(e=Vs.getPooled(fu.change,e,t,n)).type="change",Be.enqueueStateRestore(n),Rs.accumulateTwoPhaseDispatches(e),e}var hu=null,_u=null;function mu(e){ft.enqueueEvents(e),ft.processEventQueue(!1)}function yu(e){var t=ae.getNodeFromInstance(e);if(an(t))return e}function vu(e,t){if("topChange"===e)return t}var Mu=!1;function bu(){hu&&(hu.detachEvent("onpropertychange",gu),_u=hu=null)}function gu(e){"value"===e.propertyName&&yu(_u)&&(e=pu(_u,e,Ze(e)),$e.batchedUpdates(mu,e))}function Du(e,t,n){"topFocus"===e?(bu(),_u=n,(hu=t).attachEvent("onpropertychange",gu)):"topBlur"===e&&bu()}function ku(e){if("topSelectionChange"===e||"topKeyUp"===e||"topKeyDown"===e)return yu(_u)}function Lu(e,t){if("topClick"===e)return yu(t)}function wu(e,t){if("topInput"===e||"topChange"===e)return yu(t)}a.canUseDOM&&(Mu=pt("input")&&(!document.documentMode||9<document.documentMode));var Yu={eventTypes:fu,_isInputEventSupported:Mu,extractEvents:function(e,t,n,r){var a=t?ae.getNodeFromInstance(t):window,o=a.nodeName&&a.nodeName.toLowerCase();if("select"===o||"input"===o&&"file"===a.type)var i=vu;else if(cu(a))if(Mu)i=wu;else{i=ku;var s=Du}else!(o=a.nodeName)||"input"!==o.toLowerCase()||"checkbox"!==a.type&&"radio"!==a.type||(i=Lu);if(i&&(i=i(e,t)))return pu(i,n,r);s&&s(e,a,t),"topBlur"===e&&null!=t&&(e=t._wrapperState||a._wrapperState)&&e.controlled&&"number"===a.type&&(e=""+a.value,a.getAttribute("value")!==e&&a.setAttribute("value",e))}};function Tu(e,t,n,r){return Vs.call(this,e,t,n,r)}Vs.augmentClass(Tu,{view:function(e){return e.view?e.view:(e=Ze(e)).window===e?e:(e=e.ownerDocument)?e.defaultView||e.parentWindow:window},detail:function(e){return e.detail||0}});var Su={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Ou(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Su[e])&&!!t[e]}function Pu(){return Ou}function xu(e,t,n,r){return Vs.call(this,e,t,n,r)}Tu.augmentClass(xu,{screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Pu,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)}});var Eu={mouseEnter:{registrationName:"onMouseEnter",dependencies:["topMouseOut","topMouseOver"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["topMouseOut","topMouseOver"]}},ju={eventTypes:Eu,extractEvents:function(e,t,n,r){if("topMouseOver"===e&&(n.relatedTarget||n.fromElement)||"topMouseOut"!==e&&"topMouseOver"!==e)return null;var a=r.window===r?r:(a=r.ownerDocument)?a.defaultView||a.parentWindow:window;if("topMouseOut"===e?(e=t,t=(t=n.relatedTarget||n.toElement)?ae.getClosestInstanceFromNode(t):null):e=null,e===t)return null;var o=null==e?a:ae.getNodeFromInstance(e);a=null==t?a:ae.getNodeFromInstance(t);var i=xu.getPooled(Eu.mouseLeave,e,n,r);return i.type="mouseleave",i.target=o,i.relatedTarget=a,(n=xu.getPooled(Eu.mouseEnter,t,n,r)).type="mouseenter",n.target=a,n.relatedTarget=o,Rs.accumulateEnterLeaveDispatches(i,n,e,t),[i,n]}},Cu=U,Hu=a.canUseDOM&&"documentMode"in document&&11>=document.documentMode,Au={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"topBlur topContextMenu topFocus topKeyDown topKeyUp topMouseDown topMouseUp topSelectionChange".split(" ")}},Fu=null,Ru=null,Iu=null,Nu=!1,Wu=Lt.isListeningToAllDependencies;function zu(e,t){if(Nu||null==Fu||Fu!==f())return null;var n=Fu;return"selectionStart"in n&&gs.hasSelectionCapabilities(n)?n={start:n.selectionStart,end:n.selectionEnd}:window.getSelection?n={anchorNode:(n=window.getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset}:n=void 0,Iu&&l(Iu,n)?null:(Iu=n,(e=Vs.getPooled(Au.select,Ru,e,t)).type="select",e.target=Fu,Rs.accumulateTwoPhaseDispatches(e),e)}var Uu={eventTypes:Au,extractEvents:function(e,t,n,r){var a=r.window===r?r.document:r.nodeType===Cu?r:r.ownerDocument;if(!a||!Wu("onSelect",a))return null;switch(a=t?ae.getNodeFromInstance(t):window,e){case"topFocus":(cu(a)||"true"===a.contentEditable)&&(Fu=a,Ru=t,Iu=null);break;case"topBlur":Iu=Ru=Fu=null;break;case"topMouseDown":Nu=!0;break;case"topContextMenu":case"topMouseUp":return Nu=!1,zu(n,r);case"topSelectionChange":if(Hu)break;case"topKeyDown":case"topKeyUp":return zu(n,r)}return null}};function Vu(e,t,n,r){return Vs.call(this,e,t,n,r)}function Bu(e,t,n,r){return Vs.call(this,e,t,n,r)}function Ku(e,t,n,r){return Vs.call(this,e,t,n,r)}function Ju(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,32<=e||13===e?e:0}Vs.augmentClass(Vu,{animationName:null,elapsedTime:null,pseudoElement:null}),Vs.augmentClass(Bu,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),Tu.augmentClass(Ku,{relatedTarget:null});var qu={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Gu={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"};function $u(e,t,n,r){return Vs.call(this,e,t,n,r)}function Qu(e,t,n,r){return Vs.call(this,e,t,n,r)}function Zu(e,t,n,r){return Vs.call(this,e,t,n,r)}function Xu(e,t,n,r){return Vs.call(this,e,t,n,r)}function el(e,t,n,r){return Vs.call(this,e,t,n,r)}Tu.augmentClass($u,{key:function(e){if(e.key){var t=qu[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=Ju(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?Gu[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Pu,charCode:function(e){return"keypress"===e.type?Ju(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?Ju(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),xu.augmentClass(Qu,{dataTransfer:null}),Tu.augmentClass(Zu,{touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Pu}),Vs.augmentClass(Xu,{propertyName:null,elapsedTime:null,pseudoElement:null}),xu.augmentClass(el,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null});var tl={},nl={};"abort animationEnd animationIteration animationStart blur cancel canPlay canPlayThrough click close contextMenu copy cut doubleClick drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error focus input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing progress rateChange reset scroll seeked seeking stalled submit suspend timeUpdate toggle touchCancel touchEnd touchMove touchStart transitionEnd volumeChange waiting wheel".split(" ").forEach((function(e){var t=e[0].toUpperCase()+e.slice(1),n="on"+t;n={phasedRegistrationNames:{bubbled:n,captured:n+"Capture"},dependencies:[t="top"+t]},tl[e]=n,nl[t]=n}));var rl={eventTypes:tl,extractEvents:function(e,t,n,r){var a=nl[e];if(!a)return null;switch(e){case"topAbort":case"topCancel":case"topCanPlay":case"topCanPlayThrough":case"topClose":case"topDurationChange":case"topEmptied":case"topEncrypted":case"topEnded":case"topError":case"topInput":case"topInvalid":case"topLoad":case"topLoadedData":case"topLoadedMetadata":case"topLoadStart":case"topPause":case"topPlay":case"topPlaying":case"topProgress":case"topRateChange":case"topReset":case"topSeeked":case"topSeeking":case"topStalled":case"topSubmit":case"topSuspend":case"topTimeUpdate":case"topToggle":case"topVolumeChange":case"topWaiting":var o=Vs;break;case"topKeyPress":if(0===Ju(n))return null;case"topKeyDown":case"topKeyUp":o=$u;break;case"topBlur":case"topFocus":o=Ku;break;case"topClick":if(2===n.button)return null;case"topDoubleClick":case"topMouseDown":case"topMouseMove":case"topMouseUp":case"topMouseOut":case"topMouseOver":case"topContextMenu":o=xu;break;case"topDrag":case"topDragEnd":case"topDragEnter":case"topDragExit":case"topDragLeave":case"topDragOver":case"topDragStart":case"topDrop":o=Qu;break;case"topTouchCancel":case"topTouchEnd":case"topTouchMove":case"topTouchStart":o=Zu;break;case"topAnimationEnd":case"topAnimationIteration":case"topAnimationStart":o=Vu;break;case"topTransitionEnd":o=Xu;break;case"topScroll":o=Tu;break;case"topWheel":o=el;break;case"topCopy":case"topCut":case"topPaste":o=Bu}return o||p("86",e),e=o.getPooled(a,t,n,r),Rs.accumulateTwoPhaseDispatches(e),e}};rt.setHandleTopLevel(Lt.handleTopLevel),ft.injection.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin TapEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),Ne.injection.injectComponentTree(ae),ft.injection.injectEventPluginsByName({SimpleEventPlugin:rl,EnterLeaveEventPlugin:ju,ChangeEventPlugin:Yu,SelectEventPlugin:Uu,BeforeInputEventPlugin:lu});var al=S.injection.MUST_USE_PROPERTY,ol=S.injection.HAS_BOOLEAN_VALUE,il=S.injection.HAS_NUMERIC_VALUE,sl=S.injection.HAS_POSITIVE_NUMERIC_VALUE,ul=S.injection.HAS_STRING_BOOLEAN_VALUE,ll={Properties:{allowFullScreen:ol,allowTransparency:ul,async:ol,autoPlay:ol,capture:ol,checked:al|ol,cols:sl,contentEditable:ul,controls:ol,default:ol,defer:ol,disabled:ol,download:S.injection.HAS_OVERLOADED_BOOLEAN_VALUE,draggable:ul,formNoValidate:ol,hidden:ol,loop:ol,multiple:al|ol,muted:al|ol,noValidate:ol,open:ol,playsInline:ol,readOnly:ol,required:ol,reversed:ol,rows:sl,rowSpan:il,scoped:ol,seamless:ol,selected:al|ol,size:sl,start:il,span:sl,spellCheck:ul,style:0,itemScope:ol,acceptCharset:0,className:0,htmlFor:0,httpEquiv:0,value:ul},DOMAttributeNames:{acceptCharset:"accept-charset",className:"class",htmlFor:"for",httpEquiv:"http-equiv"},DOMMutationMethods:{value:function(e,t){if(null==t)return e.removeAttribute("value");"number"!==e.type||!1===e.hasAttribute("value")?e.setAttribute("value",""+t):e.validity&&!e.validity.badInput&&e.ownerDocument.activeElement!==e&&e.setAttribute("value",""+t)}}},dl=S.injection.HAS_STRING_BOOLEAN_VALUE,cl="http://www.w3.org/1999/xlink",fl="http://www.w3.org/XML/1998/namespace",pl={Properties:{autoReverse:dl,externalResourcesRequired:dl,preserveAlpha:dl},DOMAttributeNames:{autoReverse:"autoReverse",externalResourcesRequired:"externalResourcesRequired",preserveAlpha:"preserveAlpha"},DOMAttributeNamespaces:{xlinkActuate:cl,xlinkArcrole:cl,xlinkHref:cl,xlinkRole:cl,xlinkShow:cl,xlinkTitle:cl,xlinkType:cl,xmlBase:fl,xmlLang:fl,xmlSpace:fl}},hl=/[\-\:]([a-z])/g;function _l(e){return e[1].toUpperCase()}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode x-height xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type xml:base xmlns:xlink xml:lang xml:space".split(" ").forEach((function(e){var t=e.replace(hl,_l);pl.Properties[t]=0,pl.DOMAttributeNames[t]=e})),S.injection.injectDOMPropertyConfig(ll),S.injection.injectDOMPropertyConfig(pl);var ml=oi,yl=N,vl=W,Ml=z,bl=U,gl=V,Dl=S.ROOT_ATTRIBUTE_NAME,kl=y,Ll=Dn.createElement,wl=Dn.createTextNode,Yl=Dn.setInitialProperties,Tl=Dn.diffProperties,Sl=Dn.updateProperties,Ol=Dn.diffHydratedProperties,Pl=Dn.diffHydratedText,xl=Dn.warnForDeletedHydratableElement,El=Dn.warnForDeletedHydratableText,jl=Dn.warnForInsertedHydratedElement,Cl=Dn.warnForInsertedHydratedText,Hl=ae.precacheFiberNode,Al=ae.updateFiberProps;Be.injection.injectFiberControlledHostComponent(Dn),ws._injectFiber((function(e){return Nl.findHostInstance(e)}));var Fl=null,Rl=null;function Il(e){return!(!e||e.nodeType!==yl&&e.nodeType!==bl&&e.nodeType!==gl&&(e.nodeType!==Ml||" react-mount-point-unstable "!==e.nodeValue))}var Nl=function(e){var t=e.getPublicInstance,n=(e=ns(e)).scheduleUpdate,r=e.getPriorityContext;return{createContainer:function(e){var t=fa();return e={current:t,containerInfo:e,isScheduled:!1,nextScheduledRoot:null,context:null,pendingContext:null},t.stateNode=e},updateContainer:function(e,t,a,o){var i=t.current;a=as(a),null===t.context?t.context=a:t.pendingContext=a,t=o,o=r(i,Hn&&null!=e&&null!=e.type&&null!=e.type.prototype&&!0===e.type.prototype.unstable_isAsyncReactComponent),os(i,e={element:e},void 0===t?null:t,o),n(i,o)},batchedUpdates:e.batchedUpdates,unbatchedUpdates:e.unbatchedUpdates,deferredUpdates:e.deferredUpdates,flushSync:e.flushSync,getPublicRootInstance:function(e){if(!(e=e.current).child)return null;switch(e.child.tag){case ls:return t(e.child.stateNode);default:return e.child.stateNode}},findHostInstance:function(e){return null===(e=ds(e))?null:e.stateNode},findHostInstanceWithNoPortals:function(e){return null===(e=cs(e))?null:e.stateNode}}}({getRootHostContext:function(e){if(e.nodeType===bl)e=(e=e.documentElement)?e.namespaceURI:kl(null,"");else{var t=e.nodeType===Ml?e.parentNode:e;e=t.namespaceURI||null,t=t.tagName,e=kl(e,t)}return e},getChildHostContext:function(e,t){return kl(e,t)},getPublicInstance:function(e){return e},prepareForCommit:function(){Fl=Lt.isEnabled(),Rl=gs.getSelectionInformation(),Lt.setEnabled(!1)},resetAfterCommit:function(){gs.restoreSelection(Rl),Rl=null,Lt.setEnabled(Fl),Fl=null},createInstance:function(e,t,n,r,a){return e=Ll(e,t,n,r),Hl(a,e),Al(e,t),e},appendInitialChild:function(e,t){e.appendChild(t)},finalizeInitialChildren:function(e,t,n,r){Yl(e,t,n,r);e:{switch(t){case"button":case"input":case"select":case"textarea":e=!!n.autoFocus;break e}e=!1}return e},prepareUpdate:function(e,t,n,r,a){return Tl(e,t,n,r,a)},commitMount:function(e){e.focus()},commitUpdate:function(e,t,n,r,a){Al(e,a),Sl(e,t,n,r,a)},shouldSetTextContent:function(e,t){return"textarea"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&"string"==typeof t.dangerouslySetInnerHTML.__html},resetTextContent:function(e){e.textContent=""},shouldDeprioritizeSubtree:function(e,t){return!!t.hidden},createTextInstance:function(e,t,n,r){return e=wl(e,t),Hl(r,e),e},commitTextUpdate:function(e,t,n){e.nodeValue=n},appendChild:function(e,t){e.appendChild(t)},appendChildToContainer:function(e,t){e.nodeType===Ml?e.parentNode.insertBefore(t,e):e.appendChild(t)},insertBefore:function(e,t,n){e.insertBefore(t,n)},insertInContainerBefore:function(e,t,n){e.nodeType===Ml?e.parentNode.insertBefore(t,n):e.insertBefore(t,n)},removeChild:function(e,t){e.removeChild(t)},removeChildFromContainer:function(e,t){e.nodeType===Ml?e.parentNode.removeChild(t):e.removeChild(t)},canHydrateInstance:function(e,t){return e.nodeType===yl&&t===e.nodeName.toLowerCase()},canHydrateTextInstance:function(e,t){return""!==t&&e.nodeType===vl},getNextHydratableSibling:function(e){for(e=e.nextSibling;e&&e.nodeType!==yl&&e.nodeType!==vl;)e=e.nextSibling;return e},getFirstHydratableChild:function(e){for(e=e.firstChild;e&&e.nodeType!==yl&&e.nodeType!==vl;)e=e.nextSibling;return e},hydrateInstance:function(e,t,n,r,a,o){return Hl(o,e),Al(e,n),Ol(e,t,n,a,r)},hydrateTextInstance:function(e,t,n){return Hl(n,e),Pl(e,t)},didNotHydrateInstance:function(e,t){1===t.nodeType?xl(e,t):El(e,t)},didNotFindHydratableInstance:function(e,t,n){jl(e,t,n)},didNotFindHydratableTextInstance:function(e,t){Cl(e,t)},scheduleDeferredCallback:Cn.rIC,useSyncScheduling:!0});function Wl(e,t,n,r,a){Il(n)||p("200");var o=n._reactRootContainer;if(o)Nl.updateContainer(t,o,e,a);else{if(!r&&!function(e){return!(!(e=e?e.nodeType===bl?e.documentElement:e.firstChild:null)||e.nodeType!==yl||!e.hasAttribute(Dl))}(n))for(r=void 0;r=n.lastChild;)n.removeChild(r);var i=Nl.createContainer(n);o=n._reactRootContainer=i,Nl.unbatchedUpdates((function(){Nl.updateContainer(t,i,e,a)}))}return Nl.getPublicRootInstance(o)}function zl(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;return Il(t)||p("200"),Ma.createPortal(e,t,null,n)}$e.injection.injectFiberBatchedUpdates(Nl.batchedUpdates);var Ul={createPortal:zl,hydrate:function(e,t,n){return Wl(null,e,t,!0,n)},render:function(e,t,n){return Wl(null,e,t,!1,n)},unstable_renderSubtreeIntoContainer:function(e,t,n,r){return null!=e&&ie(e)||p("38"),Wl(e,t,n,!1,r)},unmountComponentAtNode:function(e){return Il(e)||p("40"),!!e._reactRootContainer&&(Nl.unbatchedUpdates((function(){Wl(null,null,e,!1,(function(){e._reactRootContainer=null}))})),!0)},findDOMNode:ws,unstable_createPortal:zl,unstable_batchedUpdates:$e.batchedUpdates,unstable_deferredUpdates:Nl.deferredUpdates,flushSync:Nl.flushSync,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{EventPluginHub:ft,EventPluginRegistry:k,EventPropagators:Rs,ReactControlledComponent:Be,ReactDOMComponentTree:ae,ReactDOMEventListener:rt}};ml({findFiberByHostInstance:ae.getClosestInstanceFromNode,findHostInstanceByFiber:Nl.findHostInstance,bundleType:0,version:"16.0.1",rendererPackageName:"react-dom"}),e.exports=Ul},function(e,t,n){"use strict";e.exports=function(e,t,n,r,a,o,i,s){if(!e){var u;if(void 0===t)u=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var l=[n,r,a,o,i,s],d=0;(u=new Error(t.replace(/%s/g,(function(){return l[d++]})))).name="Invariant Violation"}throw u.framesToPop=1,u}}},function(e,t,n){"use strict";var r=!("undefined"==typeof window||!window.document||!window.document.createElement),a={canUseDOM:r,canUseWorkers:"undefined"!=typeof Worker,canUseEventListeners:r&&!(!window.addEventListener&&!window.attachEvent),canUseViewport:r&&!!window.screen,isInWorker:!r};e.exports=a},function(e,t,n){"use strict";var r=n(41),a={listen:function(e,t,n){return e.addEventListener?(e.addEventListener(t,n,!1),{remove:function(){e.removeEventListener(t,n,!1)}}):e.attachEvent?(e.attachEvent("on"+t,n),{remove:function(){e.detachEvent("on"+t,n)}}):void 0},capture:function(e,t,n){return e.addEventListener?(e.addEventListener(t,n,!0),{remove:function(){e.removeEventListener(t,n,!0)}}):{remove:r}},registerDefault:function(){}};e.exports=a},function(e,t,n){"use strict";e.exports={}},function(e,t,n){"use strict";var r=n(206);e.exports=function e(t,n){return!(!t||!n)&&(t===n||!r(t)&&(r(n)?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}},function(e,t,n){"use strict";var r=n(207);e.exports=function(e){return r(e)&&3==e.nodeType}},function(e,t,n){"use strict";e.exports=function(e){var t=(e?e.ownerDocument||e:document).defaultView||window;return!(!e||!("function"==typeof t.Node?e instanceof t.Node:"object"==typeof e&&"number"==typeof e.nodeType&&"string"==typeof e.nodeName))}},function(e,t,n){"use strict";e.exports=function(e){try{e.focus()}catch(e){}}},function(e,t,n){"use strict";e.exports=function(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}},function(e,t,n){"use strict";var r=n(211);function a(){}function o(){}o.resetWarningCache=a,e.exports=function(){function e(e,t,n,a,o,i){if(i!==r){var s=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw s.name="Invariant Violation",s}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:o,resetWarningCache:a};return n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t){e.exports=function(e){if(!e.webpackPolyfill){var t=Object.create(e);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=c(n(2)),a=n(29),o=c(n(215)),i=c(n(216)),s=c(n(259)),u=c(n(263)),l=c(n(264)),d=c(n(265));function c(e){return e&&e.__esModule?e:{default:e}}t.default=function(){return r.default.createElement(a.BrowserRouter,null,r.default.createElement("div",null,r.default.createElement(o.default,null),r.default.createElement(a.Switch,null,r.default.createElement(a.Route,{path:"/",component:i.default,exact:!0}),r.default.createElement(a.Route,{path:"/create",component:s.default}),r.default.createElement(a.Route,{path:"/edit/:id",component:u.default}),r.default.createElement(a.Route,{path:"/help",component:l.default}),r.default.createElement(a.Route,{component:d.default}))))}},function(e,t){e.exports=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,a=n(2),o=(r=a)&&r.__esModule?r:{default:r},i=n(29);t.default=function(){return o.default.createElement("header",null,o.default.createElement("h1",null,"Expensify"),o.default.createElement(i.NavLink,{to:"/",activeClassName:"is-active",exact:!0},"Dashboard"),o.default.createElement(i.NavLink,{to:"/create",activeClassName:"is-active"},"Create Expense"),o.default.createElement(i.NavLink,{to:"/help",activeClassName:"is-active"},"Help"))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=i(n(2)),a=i(n(217)),o=i(n(221));function i(e){return e&&e.__esModule?e:{default:e}}t.default=function(){return r.default.createElement("div",null,r.default.createElement("div",null,r.default.createElement(o.default,null),r.default.createElement(a.default,null)))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ExpenseList=void 0;var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},a=u(n(2)),o=n(21),i=u(n(218)),s=u(n(43));function u(e){return e&&e.__esModule?e:{default:e}}var l=t.ExpenseList=function(e){return a.default.createElement("div",null,0===e.expenses.length?a.default.createElement("p",null,"No Expenses"):e.expenses.map((function(e){return a.default.createElement(i.default,r({key:e.id},e))})))};t.default=(0,o.connect)((function(e){return{expenses:(0,s.default)(e.expenses,e.filters)}}))(l)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,a=n(2),o=(r=a)&&r.__esModule?r:{default:r},i=n(29);t.default=function(e){var t=e.id,n=e.description,r=e.amount,a=e.createdAt;return o.default.createElement("div",null,o.default.createElement(i.Link,{to:"/edit/"+t},o.default.createElement("h3",null,n)),o.default.createElement("p",null,r," - ",a))}},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,n){var r={"./af":44,"./af.js":44,"./ar":45,"./ar-dz":46,"./ar-dz.js":46,"./ar-kw":47,"./ar-kw.js":47,"./ar-ly":48,"./ar-ly.js":48,"./ar-ma":49,"./ar-ma.js":49,"./ar-sa":50,"./ar-sa.js":50,"./ar-tn":51,"./ar-tn.js":51,"./ar.js":45,"./az":52,"./az.js":52,"./be":53,"./be.js":53,"./bg":54,"./bg.js":54,"./bn":55,"./bn.js":55,"./bo":56,"./bo.js":56,"./br":57,"./br.js":57,"./bs":58,"./bs.js":58,"./ca":59,"./ca.js":59,"./cs":60,"./cs.js":60,"./cv":61,"./cv.js":61,"./cy":62,"./cy.js":62,"./da":63,"./da.js":63,"./de":64,"./de-at":65,"./de-at.js":65,"./de-ch":66,"./de-ch.js":66,"./de.js":64,"./dv":67,"./dv.js":67,"./el":68,"./el.js":68,"./en-au":69,"./en-au.js":69,"./en-ca":70,"./en-ca.js":70,"./en-gb":71,"./en-gb.js":71,"./en-ie":72,"./en-ie.js":72,"./en-nz":73,"./en-nz.js":73,"./eo":74,"./eo.js":74,"./es":75,"./es-do":76,"./es-do.js":76,"./es.js":75,"./et":77,"./et.js":77,"./eu":78,"./eu.js":78,"./fa":79,"./fa.js":79,"./fi":80,"./fi.js":80,"./fo":81,"./fo.js":81,"./fr":82,"./fr-ca":83,"./fr-ca.js":83,"./fr-ch":84,"./fr-ch.js":84,"./fr.js":82,"./fy":85,"./fy.js":85,"./gd":86,"./gd.js":86,"./gl":87,"./gl.js":87,"./gom-latn":88,"./gom-latn.js":88,"./he":89,"./he.js":89,"./hi":90,"./hi.js":90,"./hr":91,"./hr.js":91,"./hu":92,"./hu.js":92,"./hy-am":93,"./hy-am.js":93,"./id":94,"./id.js":94,"./is":95,"./is.js":95,"./it":96,"./it.js":96,"./ja":97,"./ja.js":97,"./jv":98,"./jv.js":98,"./ka":99,"./ka.js":99,"./kk":100,"./kk.js":100,"./km":101,"./km.js":101,"./kn":102,"./kn.js":102,"./ko":103,"./ko.js":103,"./ky":104,"./ky.js":104,"./lb":105,"./lb.js":105,"./lo":106,"./lo.js":106,"./lt":107,"./lt.js":107,"./lv":108,"./lv.js":108,"./me":109,"./me.js":109,"./mi":110,"./mi.js":110,"./mk":111,"./mk.js":111,"./ml":112,"./ml.js":112,"./mr":113,"./mr.js":113,"./ms":114,"./ms-my":115,"./ms-my.js":115,"./ms.js":114,"./my":116,"./my.js":116,"./nb":117,"./nb.js":117,"./ne":118,"./ne.js":118,"./nl":119,"./nl-be":120,"./nl-be.js":120,"./nl.js":119,"./nn":121,"./nn.js":121,"./pa-in":122,"./pa-in.js":122,"./pl":123,"./pl.js":123,"./pt":124,"./pt-br":125,"./pt-br.js":125,"./pt.js":124,"./ro":126,"./ro.js":126,"./ru":127,"./ru.js":127,"./sd":128,"./sd.js":128,"./se":129,"./se.js":129,"./si":130,"./si.js":130,"./sk":131,"./sk.js":131,"./sl":132,"./sl.js":132,"./sq":133,"./sq.js":133,"./sr":134,"./sr-cyrl":135,"./sr-cyrl.js":135,"./sr.js":134,"./ss":136,"./ss.js":136,"./sv":137,"./sv.js":137,"./sw":138,"./sw.js":138,"./ta":139,"./ta.js":139,"./te":140,"./te.js":140,"./tet":141,"./tet.js":141,"./th":142,"./th.js":142,"./tl-ph":143,"./tl-ph.js":143,"./tlh":144,"./tlh.js":144,"./tr":145,"./tr.js":145,"./tzl":146,"./tzl.js":146,"./tzm":147,"./tzm-latn":148,"./tzm-latn.js":148,"./tzm.js":147,"./uk":149,"./uk.js":149,"./ur":150,"./ur.js":150,"./uz":151,"./uz-latn":152,"./uz-latn.js":152,"./uz.js":151,"./vi":153,"./vi.js":153,"./x-pseudo":154,"./x-pseudo.js":154,"./yo":155,"./yo.js":155,"./zh-cn":156,"./zh-cn.js":156,"./zh-hk":157,"./zh-hk.js":157,"./zh-tw":158,"./zh-tw.js":158};function a(e){var t=o(e);return n(t)}function o(e){if(!n.o(r,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return r[e]}a.keys=function(){return Object.keys(r)},a.resolve=o,e.exports=a,a.id=220},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ExpenseListFilters=void 0;var r,a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(2),i=(r=o)&&r.__esModule?r:{default:r},s=n(21),u=n(222),l=n(159);function d(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function c(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var f=t.ExpenseListFilters=function(e){function t(){var e,n,r;d(this,t);for(var a=arguments.length,o=Array(a),i=0;i<a;i++)o[i]=arguments[i];return n=r=c(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(o))),r.state={calanderFocused:null},r.onDatesChange=function(e){var t=e.startDate,n=e.endDate;r.props.setStartDate(t),r.props.setEndDate(n)},r.onFocusChange=function(e){r.setState((function(){return{calanderFocused:e}}))},r.onTextChange=function(e){r.props.setTextFilter(e.target.value)},r.onSortChange=function(e){"date"===e.target.value?r.props.sortByDate():"amount"===e.target.value&&r.props.sortByAmount()},c(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),a(t,[{key:"onOutsideClick",value:function(e){var t=this.props.onOutsideClick,n=this.childNode;n&&n.contains(e.target)||t(e)}},{key:"render",value:function(){return i.default.createElement("div",null,i.default.createElement("input",{type:"text",value:this.props.filters.text,onChange:this.onTextChange}),i.default.createElement("select",{value:this.props.filters.sortBy,onChange:this.onSortChange},i.default.createElement("option",{value:"date"},"Date"),i.default.createElement("option",{value:"amount"},"Amount")),i.default.createElement(l.DateRangePicker,{startDate:this.props.filters.startDate,endDate:this.props.filters.endDate,onDatesChange:this.onDatesChange,focusedInput:this.state.calanderFocused,onFocusChange:this.onFocusChange,numberOfMonths:1,showClearDates:!0,isOutsideRange:function(){return!1}}))}}]),t}(i.default.Component);t.default=(0,s.connect)((function(e){return{filters:e.filters}}),(function(e){return{setTextFilter:function(t){return e((0,u.setTextFilter)(t))},sortByDate:function(){return e((0,u.sortByDate)())},sortByAmount:function(){return e((0,u.sortByAmount)())},setStartDate:function(t){return e((0,u.setStartDate)(t))},setEndDate:function(t){return e((0,u.setEndDate)(t))}}}))(f)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.setTextFilter=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return{type:"SET_TEXT_FILTER",text:e}},t.sortByDate=function(){return{type:"SORT_BY_DATE"}},t.sortByAmount=function(){return{type:"SORT_BY_AMOUNT"}},t.setStartDate=function(e){return{type:"SET_START_DATE",startDate:e}},t.setEndDate=function(e){return{type:"SET_END_DATE",endDate:e}}},function(e,t,n){e.exports=function(e){var t={};function n(r){if(t[r])return t[r].exports;var a=t[r]={i:r,l:!1,exports:{}};return e[r].call(a.exports,a,a.exports,n),a.l=!0,a.exports}return n.m=e,n.c=t,n.i=function(e){return e},n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:r})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=63)}([function(e,t){e.exports=n(2)},function(e,t){e.exports=n(6)},function(e,t){e.exports=n(7)},,function(e,t){e.exports=n(3)},,function(e,t){e.exports=n(9)},function(e,t){e.exports=n(0)},,function(e,t){e.exports=n(12)},,function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r,a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0),s=(r=i)&&r.__esModule?r:{default:r};function u(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function l(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var d=function(e){function t(){return u(this,t),l(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),o(t,[{key:"render",value:function(){return s.default.createElement("svg",a({viewBox:"0 0 12 12"},this.props),s.default.createElement("path",{fillRule:"evenodd",d:"M11.53.47a.75.75 0 0 0-1.061 0l-4.47 4.47L1.529.47A.75.75 0 1 0 .468 1.531l4.47 4.47-4.47 4.47a.75.75 0 1 0 1.061 1.061l4.47-4.47 4.47 4.47a.75.75 0 1 0 1.061-1.061l-4.47-4.47 4.47-4.47a.75.75 0 0 0 0-1.061z"}))}}]),t}(s.default.Component);t.default=d},,,function(e,t){e.exports=n(17)},function(e,t){e.exports=n(18)},function(e,t){e.exports=n(24)},,,,,function(e,t){e.exports=n(31)},,,,,,function(e,t){e.exports=n(160)},,,,,,,,,,function(e,t){e.exports=n(22)},function(e,t){e.exports=n(161)},,,function(e,t){e.exports=n(162)},,,,,,,,,,,,function(e,t){e.exports=n(171)},,,function(e,t){e.exports=n(177)},,,,,,,function(e,t,n){var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=k(n(0)),i=k(n(37)),s=k(n(14)),u=k(n(7)),l=k(n(6)),d=k(n(38)),c=n(1),f=n(16),p=k(n(9)),h=n(2),_=k(n(21)),m=k(n(27)),y=k(n(15)),v=k(n(53)),M=k(n(56)),b=k(n(11)),g=k(n(41)),D=n(4);function k(e){return e&&e.__esModule?e:{default:e}}var L=(0,c.forbidExtraProps)(g.default),w={startDate:null,endDate:null,focusedInput:null,startDateId:D.START_DATE,startDatePlaceholderText:"Start Date",endDateId:D.END_DATE,endDatePlaceholderText:"End Date",disabled:!1,required:!1,readOnly:!1,screenReaderInputMessage:"",showClearDates:!1,showDefaultInputIcon:!1,customInputIcon:null,customArrowIcon:null,customCloseIcon:null,renderMonth:null,orientation:D.HORIZONTAL_ORIENTATION,anchorDirection:D.ANCHOR_LEFT,horizontalMargin:0,withPortal:!1,withFullScreenPortal:!1,initialVisibleMonth:null,numberOfMonths:2,keepOpenOnDateSelect:!1,reopenPickerOnClearDates:!1,renderCalendarInfo:null,hideKeyboardShortcutsPanel:!1,daySize:D.DAY_SIZE,isRTL:!1,firstDayOfWeek:null,navPrev:null,navNext:null,onPrevMonthClick:function(){},onNextMonthClick:function(){},onClose:function(){},renderDay:null,minimumNights:1,enableOutsideDays:!1,isDayBlocked:function(){return!1},isOutsideRange:function(e){return!(0,y.default)(e,(0,u.default)())},isDayHighlighted:function(){return!1},displayFormat:function(){return u.default.localeData().longDateFormat("L")},monthFormat:"MMMM YYYY",phrases:h.DateRangePickerPhrases},Y=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":r(t))&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={dayPickerContainerStyles:{},isDateRangePickerInputFocused:!1,isDayPickerFocused:!1,showKeyboardShortcuts:!1},n.isTouchDevice=!1,n.onOutsideClick=n.onOutsideClick.bind(n),n.onDateRangePickerInputFocus=n.onDateRangePickerInputFocus.bind(n),n.onDayPickerFocus=n.onDayPickerFocus.bind(n),n.onDayPickerBlur=n.onDayPickerBlur.bind(n),n.showKeyboardShortcutsPanel=n.showKeyboardShortcutsPanel.bind(n),n.responsivizePickerPosition=n.responsivizePickerPosition.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":r(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),a(t,[{key:"componentDidMount",value:function(){this.resizeHandle=(0,f.addEventListener)(window,"resize",this.responsivizePickerPosition,{passive:!0}),this.responsivizePickerPosition(),this.props.focusedInput&&this.setState({isDateRangePickerInputFocused:!0}),this.isTouchDevice=(0,p.default)()}},{key:"shouldComponentUpdate",value:function(e,t){return(0,s.default)(this,e,t)}},{key:"componentDidUpdate",value:function(e){!e.focusedInput&&this.props.focusedInput&&this.isOpened()&&this.responsivizePickerPosition()}},{key:"componentWillUnmount",value:function(){this.resizeHandle&&(0,f.removeEventListener)(this.resizeHandle)}},{key:"onOutsideClick",value:function(){var e=this.props,t=e.onFocusChange,n=e.onClose,r=e.startDate,a=e.endDate;this.isOpened()&&(this.setState({isDateRangePickerInputFocused:!1,isDayPickerFocused:!1,showKeyboardShortcuts:!1}),t(null),n({startDate:r,endDate:a}))}},{key:"onDateRangePickerInputFocus",value:function(e){var t=this.props,n=t.onFocusChange,r=t.withPortal,a=t.withFullScreenPortal;e&&(r||a||this.isTouchDevice?this.onDayPickerFocus():this.onDayPickerBlur()),n(e)}},{key:"onDayPickerFocus",value:function(){var e=this.props,t=e.focusedInput,n=e.onFocusChange;t||n(D.START_DATE),this.setState({isDateRangePickerInputFocused:!1,isDayPickerFocused:!0,showKeyboardShortcuts:!1})}},{key:"onDayPickerBlur",value:function(){this.setState({isDateRangePickerInputFocused:!0,isDayPickerFocused:!1,showKeyboardShortcuts:!1})}},{key:"getDayPickerContainerClasses",value:function(){var e=this.props,t=e.orientation,n=e.withPortal,r=e.withFullScreenPortal,a=e.anchorDirection,o=e.isRTL;return(0,l.default)("DateRangePicker__picker",{"DateRangePicker__picker--direction-left":a===D.ANCHOR_LEFT,"DateRangePicker__picker--direction-right":a===D.ANCHOR_RIGHT,"DateRangePicker__picker--horizontal":t===D.HORIZONTAL_ORIENTATION,"DateRangePicker__picker--vertical":t===D.VERTICAL_ORIENTATION,"DateRangePicker__picker--portal":n||r,"DateRangePicker__picker--full-screen-portal":r,"DateRangePicker__picker--rtl":o})}},{key:"getDayPickerDOMNode",value:function(){return i.default.findDOMNode(this.dayPicker)}},{key:"isOpened",value:function(){var e=this.props.focusedInput;return e===D.START_DATE||e===D.END_DATE}},{key:"responsivizePickerPosition",value:function(){if(this.isOpened()){var e=this.props,t=e.anchorDirection,n=e.horizontalMargin,r=e.withPortal,a=e.withFullScreenPortal,o=this.state.dayPickerContainerStyles,i=t===D.ANCHOR_LEFT;if(!r&&!a){var s=this.dayPickerContainer.getBoundingClientRect(),u=o[t]||0,l=i?s[D.ANCHOR_RIGHT]:s[D.ANCHOR_LEFT];this.setState({dayPickerContainerStyles:(0,m.default)(t,u,l,n)})}}}},{key:"showKeyboardShortcutsPanel",value:function(){this.setState({isDateRangePickerInputFocused:!1,isDayPickerFocused:!0,showKeyboardShortcuts:!0})}},{key:"maybeRenderDayPickerWithPortal",value:function(){var e=this.props,t=e.withPortal,n=e.withFullScreenPortal;return this.isOpened()?t||n?o.default.createElement(d.default,{isOpened:!0},this.renderDayPicker()):this.renderDayPicker():null}},{key:"renderDayPicker",value:function(){var e=this,t=this.props,n=t.isDayBlocked,r=t.isDayHighlighted,a=t.isOutsideRange,i=t.numberOfMonths,s=t.orientation,l=t.monthFormat,d=t.renderMonth,c=t.navPrev,f=t.navNext,p=t.onPrevMonthClick,h=t.onNextMonthClick,_=t.onDatesChange,m=t.onFocusChange,y=t.withPortal,v=t.withFullScreenPortal,g=t.daySize,D=t.enableOutsideDays,k=t.focusedInput,L=t.startDate,w=t.endDate,Y=t.minimumNights,T=t.keepOpenOnDateSelect,S=t.renderDay,O=t.renderCalendarInfo,P=t.firstDayOfWeek,x=t.initialVisibleMonth,E=t.hideKeyboardShortcutsPanel,j=t.customCloseIcon,C=t.onClose,H=t.phrases,A=t.isRTL,F=this.state,R=F.dayPickerContainerStyles,I=F.isDayPickerFocused,N=F.showKeyboardShortcuts,W=!v&&y?this.onOutsideClick:void 0,z=x||function(){return L||w||(0,u.default)()},U=j||o.default.createElement(b.default,null);return o.default.createElement("div",{ref:function(t){e.dayPickerContainer=t},className:this.getDayPickerContainerClasses(),style:R,onClick:W},o.default.createElement(M.default,{ref:function(t){e.dayPicker=t},orientation:s,enableOutsideDays:D,numberOfMonths:i,onPrevMonthClick:p,onNextMonthClick:h,onDatesChange:_,onFocusChange:m,onClose:C,focusedInput:k,startDate:L,endDate:w,monthFormat:l,renderMonth:d,withPortal:y||v,daySize:g,initialVisibleMonth:z,hideKeyboardShortcutsPanel:E,navPrev:c,navNext:f,minimumNights:Y,isOutsideRange:a,isDayHighlighted:r,isDayBlocked:n,keepOpenOnDateSelect:T,renderDay:S,renderCalendarInfo:O,isFocused:I,showKeyboardShortcuts:N,onBlur:this.onDayPickerBlur,phrases:H,isRTL:A,firstDayOfWeek:P}),v&&o.default.createElement("button",{className:"DateRangePicker__close",type:"button",onClick:this.onOutsideClick,"aria-label":H.closeDatePicker},o.default.createElement("div",{className:"DateRangePicker__close"},U)))}},{key:"render",value:function(){var e=this.props,t=e.startDate,n=e.startDateId,r=e.startDatePlaceholderText,a=e.endDate,i=e.endDateId,s=e.endDatePlaceholderText,u=e.focusedInput,l=e.screenReaderInputMessage,d=e.showClearDates,c=e.showDefaultInputIcon,f=e.customInputIcon,p=e.customArrowIcon,h=e.customCloseIcon,m=e.disabled,y=e.required,M=e.readOnly,b=e.phrases,g=e.isOutsideRange,k=e.minimumNights,L=e.withPortal,w=e.withFullScreenPortal,Y=e.displayFormat,T=e.reopenPickerOnClearDates,S=e.keepOpenOnDateSelect,O=e.onDatesChange,P=e.onClose,x=e.isRTL,E=this.state.isDateRangePickerInputFocused,j=L||w?void 0:this.onOutsideClick;return o.default.createElement("div",{className:"DateRangePicker"},o.default.createElement(_.default,{onOutsideClick:j},o.default.createElement(v.default,{startDate:t,startDateId:n,startDatePlaceholderText:r,isStartDateFocused:u===D.START_DATE,endDate:a,endDateId:i,endDatePlaceholderText:s,isEndDateFocused:u===D.END_DATE,displayFormat:Y,showClearDates:d,showCaret:!L&&!w,showDefaultInputIcon:c,customInputIcon:f,customArrowIcon:p,customCloseIcon:h,disabled:m,required:y,readOnly:M,reopenPickerOnClearDates:T,keepOpenOnDateSelect:S,isOutsideRange:g,minimumNights:k,withFullScreenPortal:w,onDatesChange:O,onFocusChange:this.onDateRangePickerInputFocus,onArrowDown:this.onDayPickerFocus,onQuestionMark:this.showKeyboardShortcutsPanel,onClose:P,phrases:b,screenReaderMessage:l,isFocused:E,isRTL:x}),this.maybeRenderDayPickerWithPortal()))}}]),t}(o.default.Component);t.default=Y,Y.propTypes=L,Y.defaultProps=w}])},function(e,t,n){"use strict";function r(){return null}function a(){return r}r.isRequired=r,e.exports={and:a,between:a,booleanSome:a,childrenHavePropXorChildren:a,childrenOf:a,childrenOfType:a,childrenSequenceOf:a,componentWithName:a,disallowedIf:a,elementType:a,empty:a,explicitNull:a,forbidExtraProps:Object,integer:a,keysOf:a,mutuallyExclusiveProps:a,mutuallyExclusiveTrueProps:a,nChildren:a,nonNegativeInteger:r,nonNegativeNumber:a,numericString:a,object:a,or:a,range:a,ref:a,requiredBy:a,restrictedProp:a,sequenceOf:a,shape:a,stringEndsWith:a,stringStartsWith:a,uniqueArray:a,uniqueArrayOf:a,valuesOf:a,withShape:a}},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){if(!e)return;if(!(0,o.default)())return!!e.capture;return e};var r,a=n(226),o=(r=a)&&r.__esModule?r:{default:r}},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){void 0===i&&(i=function(){if(!o.default)return!1;if(!window.addEventListener||!window.removeEventListener||!Object.defineProperty)return!1;var e=!1;try{var t=Object.defineProperty({},"passive",{get:function(){e=!0}});window.addEventListener("test",null,t)}catch(e){}return e}());return i};var r,a=n(227),o=(r=a)&&r.__esModule?r:{default:r};var i=void 0},function(e,t){Object.defineProperty(t,"__esModule",{value:!0});var n=!("undefined"==typeof window||!window.document||!window.document.createElement);t.default=n},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r,a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(229),i=(r=o)&&r.__esModule?r:{default:r};function s(e){e.handlers===e.nextHandlers&&(e.nextHandlers=e.handlers.slice())}var u=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.target=t,this.events={}}return a(e,[{key:"getEventHandlers",value:function(e,t){var n=String(e)+" "+String((0,i.default)(t));return this.events[n]||(this.events[n]={handlers:[],handleEvent:void 0},this.events[n].nextHandlers=this.events[n].handlers),this.events[n]}},{key:"handleEvent",value:function(e,t,n){var r=this.getEventHandlers(e,t);r.handlers=r.nextHandlers,r.handlers.forEach((function(e){e&&e(n)}))}},{key:"add",value:function(e,t,n){var r=this,a=this.getEventHandlers(e,n);s(a),0===a.nextHandlers.length&&(a.handleEvent=this.handleEvent.bind(this,e,n),this.target.addEventListener(e,a.handleEvent,n)),a.nextHandlers.push(t);var o=!0;return function(){if(o){o=!1,s(a);var i=a.nextHandlers.indexOf(t);a.nextHandlers.splice(i,1),0===a.nextHandlers.length&&(r.target&&r.target.removeEventListener(e,a.handleEvent,n),a.handleEvent=void 0)}}}}]),e}();t.default=u},function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){if(!e)return 0;if(!0===e)return 100;var t=e.capture<<0,n=e.passive<<1,r=e.once<<2;return t+n+r}},function(e,t,n){var r=n(0);e.exports={isValidMoment:function(e){return!("function"==typeof r.isMoment&&!r.isMoment(e))&&("function"==typeof e.isValid?e.isValid():!isNaN(e))}}},function(e,t){var n={invalidPredicate:"`predicate` must be a function",invalidPropValidator:"`propValidator` must be a function",requiredCore:"is marked as required",invalidTypeCore:"Invalid input type",predicateFailureCore:"Failed to succeed with predicate",anonymousMessage:"<<anonymous>>",baseInvalidMessage:"Invalid "};function r(e){if("function"!=typeof e)throw new Error(n.invalidPropValidator);var t=e.bind(null,!1,null);return t.isRequired=e.bind(null,!0,null),t.withPredicate=function(t){if("function"!=typeof t)throw new Error(n.invalidPredicate);var r=e.bind(null,!1,t);return r.isRequired=e.bind(null,!0,t),r},t}function a(e,t,r){return new Error("The prop `"+e+"` "+n.requiredCore+" in `"+t+"`, but its value is `"+r+"`.")}e.exports={constructPropValidatorVariations:r,createMomentChecker:function(e,t,o,i){return r((function(r,s,u,l,d,c,f){var p=u[l],h=typeof p,_=function(e,t,n,r){var o=void 0===r,i=null===r;if(e){if(o)return a(n,t,"undefined");if(i)return a(n,t,"null")}return o||i?null:-1}(r,d=d||n.anonymousMessage,f=f||l,p);if(-1!==_)return _;if(t&&!t(p))return new Error(n.invalidTypeCore+": `"+l+"` of type `"+h+"` supplied to `"+d+"`, expected `"+e+"`.");if(!o(p))return new Error(n.baseInvalidMessage+c+" `"+l+"` of type `"+h+"` supplied to `"+d+"`, expected `"+i+"`.");if(s&&!s(p)){var m=s.name||n.anonymousMessage;return new Error(n.baseInvalidMessage+c+" `"+l+"` of type `"+h+"` supplied to `"+d+"`. "+n.predicateFailureCore+" `"+m+"`.")}return null}))},messages:n}},function(e,t,n){"use strict";var r;if(!Object.keys){var a=Object.prototype.hasOwnProperty,o=Object.prototype.toString,i=n(164),s=Object.prototype.propertyIsEnumerable,u=!s.call({toString:null},"toString"),l=s.call((function(){}),"prototype"),d=["toString","toLocaleString","valueOf","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","constructor"],c=function(e){var t=e.constructor;return t&&t.prototype===e},f={$applicationCache:!0,$console:!0,$external:!0,$frame:!0,$frameElement:!0,$frames:!0,$innerHeight:!0,$innerWidth:!0,$onmozfullscreenchange:!0,$onmozfullscreenerror:!0,$outerHeight:!0,$outerWidth:!0,$pageXOffset:!0,$pageYOffset:!0,$parent:!0,$scrollLeft:!0,$scrollTop:!0,$scrollX:!0,$scrollY:!0,$self:!0,$webkitIndexedDB:!0,$webkitStorageInfo:!0,$window:!0},p=function(){if("undefined"==typeof window)return!1;for(var e in window)try{if(!f["$"+e]&&a.call(window,e)&&null!==window[e]&&"object"==typeof window[e])try{c(window[e])}catch(e){return!0}}catch(e){return!0}return!1}();r=function(e){var t=null!==e&&"object"==typeof e,n="[object Function]"===o.call(e),r=i(e),s=t&&"[object String]"===o.call(e),f=[];if(!t&&!n&&!r)throw new TypeError("Object.keys called on a non-object");var h=l&&n;if(s&&e.length>0&&!a.call(e,0))for(var _=0;_<e.length;++_)f.push(String(_));if(r&&e.length>0)for(var m=0;m<e.length;++m)f.push(String(m));else for(var y in e)h&&"prototype"===y||!a.call(e,y)||f.push(String(y));if(u)for(var v=function(e){if("undefined"==typeof window||!p)return c(e);try{return c(e)}catch(e){return!1}}(e),M=0;M<d.length;++M)v&&"constructor"===d[M]||!a.call(e,d[M])||f.push(d[M]);return f}}e.exports=r},function(e,t,n){"use strict";var r="Function.prototype.bind called on incompatible ",a=Array.prototype.slice,o=Object.prototype.toString;e.exports=function(e){var t=this;if("function"!=typeof t||"[object Function]"!==o.call(t))throw new TypeError(r+t);for(var n,i=a.call(arguments,1),s=function(){if(this instanceof n){var r=t.apply(this,i.concat(a.call(arguments)));return Object(r)===r?r:this}return t.apply(e,i.concat(a.call(arguments)))},u=Math.max(0,t.length-i.length),l=[],d=0;d<u;d++)l.push("$"+d);if(n=Function("binder","return function ("+l.join(",")+"){ return binder.apply(this,arguments); }")(s),t.prototype){var c=function(){};c.prototype=t.prototype,n.prototype=new c,c.prototype=null}return n}},function(e,t,n){"use strict";var r=n(26),a=n(167);e.exports=function(){var e=a();return r(Object,{assign:e},{assign:function(){return Object.assign!==e}}),e}},function(e,t,n){var r=n(33),a=n(236),o=n(238),i=Math.max,s=Math.min;e.exports=function(e,t,n){var u,l,d,c,f,p,h=0,_=!1,m=!1,y=!0;if("function"!=typeof e)throw new TypeError("Expected a function");function v(t){var n=u,r=l;return u=l=void 0,h=t,c=e.apply(r,n)}function M(e){return h=e,f=setTimeout(g,t),_?v(e):c}function b(e){var n=e-p;return void 0===p||n>=t||n<0||m&&e-h>=d}function g(){var e=a();if(b(e))return D(e);f=setTimeout(g,function(e){var n=t-(e-p);return m?s(n,d-(e-h)):n}(e))}function D(e){return f=void 0,y&&u?v(e):(u=l=void 0,c)}function k(){var e=a(),n=b(e);if(u=arguments,l=this,p=e,n){if(void 0===f)return M(p);if(m)return clearTimeout(f),f=setTimeout(g,t),v(p)}return void 0===f&&(f=setTimeout(g,t)),c}return t=o(t)||0,r(n)&&(_=!!n.leading,d=(m="maxWait"in n)?i(o(n.maxWait)||0,t):d,y="trailing"in n?!!n.trailing:y),k.cancel=function(){void 0!==f&&clearTimeout(f),h=0,u=p=l=f=void 0},k.flush=function(){return void 0===f?c:D(a())},k}},function(e,t,n){var r=n(175);e.exports=function(){return r.Date.now()}},function(e,t,n){(function(t){var n="object"==typeof t&&t&&t.Object===Object&&t;e.exports=n}).call(this,n(23))},function(e,t,n){var r=n(33),a=n(239),o=/^\s+|\s+$/g,i=/^[-+]0x[0-9a-f]+$/i,s=/^0b[01]+$/i,u=/^0o[0-7]+$/i,l=parseInt;e.exports=function(e){if("number"==typeof e)return e;if(a(e))return NaN;if(r(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=r(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(o,"");var n=s.test(e);return n||u.test(e)?l(e.slice(2),n?2:8):i.test(e)?NaN:+e}},function(e,t,n){var r=n(240),a=n(243);e.exports=function(e){return"symbol"==typeof e||a(e)&&"[object Symbol]"==r(e)}},function(e,t,n){var r=n(176),a=n(241),o=n(242),i=r?r.toStringTag:void 0;e.exports=function(e){return null==e?void 0===e?"[object Undefined]":"[object Null]":i&&i in Object(e)?a(e):o(e)}},function(e,t,n){var r=n(176),a=Object.prototype,o=a.hasOwnProperty,i=a.toString,s=r?r.toStringTag:void 0;e.exports=function(e){var t=o.call(e,s),n=e[s];try{e[s]=void 0;var r=!0}catch(e){}var a=i.call(e);return r&&(t?e[s]=n:delete e[s]),a}},function(e,t){var n=Object.prototype.toString;e.exports=function(e){return n.call(e)}},function(e,t){e.exports=function(e){return null!=e&&"object"==typeof e}},function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){return"undefined"!=typeof document&&document.activeElement}},function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){return!!("undefined"!=typeof window&&"TransitionEvent"in window)}},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:o.default.localeData().firstDayOfWeek();if(!o.default.isMoment(e)||!e.isValid())throw new TypeError("`month` must be a valid moment object");if(-1===i.WEEKDAYS.indexOf(n))throw new TypeError("`firstDayOfWeek` must be an integer between 0 and 6");for(var r=e.clone().startOf("month").hour(12),a=e.clone().endOf("month").hour(12),s=(r.day()+7-n)%7,u=(n+6-a.day())%7,l=r.clone().subtract(s,"day"),d=a.clone().add(u,"day"),c=d.diff(l,"days")+1,f=l.clone(),p=[],h=0;h<c;h+=1){h%7==0&&p.push([]);var _=null;(h>=s&&h<c-u||t)&&(_=f.clone()),p[p.length-1].push(_),f.add(1,"day")}return p};var r,a=n(0),o=(r=a)&&r.__esModule?r:{default:r},i=n(3)},function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if("string"==typeof e)return e;if("function"==typeof e)return e(t);return""}},function(e,t,n){e.exports=function(e){var t={};function n(r){if(t[r])return t[r].exports;var a=t[r]={i:r,l:!1,exports:{}};return e[r].call(a.exports,a,a.exports,n),a.l=!0,a.exports}return n.m=e,n.c=t,n.i=function(e){return e},n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:r})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=67)}({0:function(e,t){e.exports=n(2)},1:function(e,t){e.exports=n(6)},11:function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r,a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0),s=(r=i)&&r.__esModule?r:{default:r};function u(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function l(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var d=function(e){function t(){return u(this,t),l(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),o(t,[{key:"render",value:function(){return s.default.createElement("svg",a({viewBox:"0 0 12 12"},this.props),s.default.createElement("path",{fillRule:"evenodd",d:"M11.53.47a.75.75 0 0 0-1.061 0l-4.47 4.47L1.529.47A.75.75 0 1 0 .468 1.531l4.47 4.47-4.47 4.47a.75.75 0 1 0 1.061 1.061l4.47-4.47 4.47 4.47a.75.75 0 1 0 1.061-1.061l-4.47-4.47 4.47-4.47a.75.75 0 0 0 0-1.061z"}))}}]),t}(s.default.Component);t.default=d},2:function(e,t){e.exports=n(7)},3:function(e,t){e.exports=n(1)},5:function(e,t){e.exports=n(8)},6:function(e,t){e.exports=n(9)},67:function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0}),t.BOTTOM_RIGHT=t.TOP_RIGHT=t.TOP_LEFT=void 0,t.KeyboardShortcutRow=m,t.default=y;var r=d(n(0)),a=d(n(3)),o=n(1),i=d(n(6)),s=n(2),u=d(n(5)),l=d(n(11));function d(e){return e&&e.__esModule?e:{default:e}}var c=t.TOP_LEFT="top-left",f=t.TOP_RIGHT="top-right",p=t.BOTTOM_RIGHT="bottom-right",h=(0,o.forbidExtraProps)({block:a.default.bool,buttonLocation:a.default.oneOf([c,f,p]),showKeyboardShortcutsPanel:a.default.bool,openKeyboardShortcutsPanel:a.default.func,closeKeyboardShortcutsPanel:a.default.func,phrases:a.default.shape((0,u.default)(s.DayPickerKeyboardShortcutsPhrases))}),_={block:!1,buttonLocation:p,showKeyboardShortcutsPanel:!1,openKeyboardShortcutsPanel:function(){},closeKeyboardShortcutsPanel:function(){},phrases:s.DayPickerKeyboardShortcutsPhrases};function m(e){var t=e.unicode,n=e.label,a=e.action;return r.default.createElement("li",{className:"KeyboardShortcutRow"},r.default.createElement("div",{className:"KeyboardShortcutRow__key-container"},r.default.createElement("span",{className:"KeyboardShortcutRow__key",role:"img","aria-label":n},t)),r.default.createElement("div",{className:"KeyboardShortcutRow__action"},a))}function y(e){var t=this,n=e.block,a=e.buttonLocation,o=e.showKeyboardShortcutsPanel,s=e.openKeyboardShortcutsPanel,u=e.closeKeyboardShortcutsPanel,d=e.phrases,h=[{unicode:"↵",label:d.enterKey,action:d.selectFocusedDate},{unicode:"←/→",label:d.leftArrowRightArrow,action:d.moveFocusByOneDay},{unicode:"↑/↓",label:d.upArrowDownArrow,action:d.moveFocusByOneWeek},{unicode:"PgUp/PgDn",label:d.pageUpPageDown,action:d.moveFocusByOneMonth},{unicode:"Home/End",label:d.homeEnd,action:d.moveFocustoStartAndEndOfWeek},{unicode:"Esc",label:d.escape,action:d.returnFocusToInput},{unicode:"?",label:d.questionMark,action:d.openThisPanel}],_=o?d.hideKeyboardShortcutsPanel:d.showKeyboardShortcutsPanel;return r.default.createElement("div",null,r.default.createElement("button",{ref:function(e){t.showKeyboardShortcutsButton=e},className:(0,i.default)("DayPickerKeyboardShortcuts__show",{"DayPickerKeyboardShortcuts__show--bottom-right":a===p,"DayPickerKeyboardShortcuts__show--top-right":a===f,"DayPickerKeyboardShortcuts__show--top-left":a===c}),type:"button","aria-label":_,onClick:function(){s((function(){t.showKeyboardShortcutsButton.focus()}))},onMouseUp:function(e){e.currentTarget.blur()}},r.default.createElement("span",{className:"DayPickerKeyboardShortcuts__show_span"},"?")),o&&r.default.createElement("div",{className:(0,i.default)("DayPickerKeyboardShortcuts__panel",{"DayPickerKeyboardShortcuts__panel--block":n}),role:"dialog","aria-labelledby":"DayPickerKeyboardShortcuts__title"},r.default.createElement("div",{id:"DayPickerKeyboardShortcuts__title",className:"DayPickerKeyboardShortcuts__title"},d.keyboardShortcuts),r.default.createElement("button",{className:"DayPickerKeyboardShortcuts__close",type:"button","aria-label":d.hideKeyboardShortcutsPanel,onClick:u,onKeyDown:function(e){"Tab"===e.key&&e.preventDefault()}},r.default.createElement(l.default,null)),r.default.createElement("ul",{className:"DayPickerKeyboardShortcuts__list"},h.map((function(e){var t=e.unicode,n=e.label,a=e.action;return r.default.createElement(m,{key:n,unicode:t,label:n,action:a})})))))}m.propTypes={unicode:a.default.string.isRequired,label:a.default.string.isRequired,action:a.default.string.isRequired},y.propTypes=h,y.defaultProps=_}})},function(e,t,n){e.exports=function(e){var t={};function n(r){if(t[r])return t[r].exports;var a=t[r]={i:r,l:!1,exports:{}};return e[r].call(a.exports,a,a.exports,n),a.l=!0,a.exports}return n.m=e,n.c=t,n.i=function(e){return e},n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:r})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=68)}({0:function(e,t){e.exports=n(2)},1:function(e,t){e.exports=n(6)},2:function(e,t){e.exports=n(7)},23:function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r,a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0),s=(r=i)&&r.__esModule?r:{default:r};function u(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function l(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var d=function(e){function t(){return u(this,t),l(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),o(t,[{key:"render",value:function(){return s.default.createElement("svg",a({viewBox:"0 0 1000 1000"},this.props),s.default.createElement("path",{d:"M336.2 274.5l-210.1 210h805.4c13 0 23 10 23 23s-10 23-23 23H126.1l210.1 210.1c11 11 11 21 0 32-5 5-10 7-16 7s-11-2-16-7l-249.1-249c-11-11-11-21 0-32l249.1-249.1c21-21.1 53 10.9 32 32z"}))}}]),t}(s.default.Component);t.default=d},24:function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r,a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0),s=(r=i)&&r.__esModule?r:{default:r};function u(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function l(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var d=function(e){function t(){return u(this,t),l(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),o(t,[{key:"render",value:function(){return s.default.createElement("svg",a({viewBox:"0 0 1000 1000"},this.props),s.default.createElement("path",{d:"M694.4 242.4l249.1 249.1c11 11 11 21 0 32L694.4 772.7c-5 5-10 7-16 7s-11-2-16-7c-11-11-11-21 0-32l210.1-210.1H67.1c-13 0-23-10-23-23s10-23 23-23h805.4L662.4 274.5c-21-21.1 11-53.1 32-32.1z"}))}}]),t}(s.default.Component);t.default=d},3:function(e,t){e.exports=n(1)},39:function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r,a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0),s=(r=i)&&r.__esModule?r:{default:r};function u(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function l(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var d=function(e){function t(){return u(this,t),l(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),o(t,[{key:"render",value:function(){return s.default.createElement("svg",a({viewBox:"0 0 1000 1000"},this.props),s.default.createElement("path",{d:"M967.5 288.5L514.3 740.7c-11 11-21 11-32 0L29.1 288.5c-4-5-6-11-6-16 0-13 10-23 23-23 6 0 11 2 15 7l437.2 436.2 437.2-436.2c4-5 9-7 16-7 6 0 11 2 16 7 9 10.9 9 21 0 32z"}))}}]),t}(s.default.Component);t.default=d},4:function(e,t){e.exports=n(3)},40:function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r,a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0),s=(r=i)&&r.__esModule?r:{default:r};function u(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function l(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var d=function(e){function t(){return u(this,t),l(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),o(t,[{key:"render",value:function(){return s.default.createElement("svg",a({viewBox:"0 0 1000 1000"},this.props),s.default.createElement("path",{d:"M32.1 712.6l453.2-452.2c11-11 21-11 32 0l453.2 452.2c4 5 6 10 6 16 0 13-10 23-22 23-7 0-12-2-16-7L501.3 308.5 64.1 744.7c-4 5-9 7-15 7-7 0-12-2-17-7-9-11-9-21 0-32.1z"}))}}]),t}(s.default.Component);t.default=d},5:function(e,t){e.exports=n(8)},6:function(e,t){e.exports=n(9)},68:function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0}),t.default=v;var r=_(n(0)),a=_(n(3)),o=n(1),i=_(n(6)),s=n(2),u=_(n(5)),l=_(n(23)),d=_(n(24)),c=_(n(40)),f=_(n(39)),p=_(n(8)),h=n(4);function _(e){return e&&e.__esModule?e:{default:e}}var m=(0,o.forbidExtraProps)({navPrev:a.default.node,navNext:a.default.node,orientation:p.default,onPrevMonthClick:a.default.func,onNextMonthClick:a.default.func,phrases:a.default.shape((0,u.default)(s.DayPickerNavigationPhrases)),isRTL:a.default.bool}),y={navPrev:null,navNext:null,orientation:h.HORIZONTAL_ORIENTATION,onPrevMonthClick:function(){},onNextMonthClick:function(){},phrases:s.DayPickerNavigationPhrases,isRTL:!1};function v(e){var t=e.navPrev,n=e.navNext,a=e.onPrevMonthClick,o=e.onNextMonthClick,s=e.orientation,u=e.phrases,p=e.isRTL,_=s!==h.HORIZONTAL_ORIENTATION,m=s===h.VERTICAL_SCROLLABLE,y=t,v=n,M=!1,b=!1;y||(M=!0,y=_?r.default.createElement(c.default,null):r.default.createElement(l.default,null),p&&!_&&(y=r.default.createElement(d.default,null))),v||(b=!0,v=_?r.default.createElement(f.default,null):r.default.createElement(d.default,null),p&&!_&&(v=r.default.createElement(l.default,null)));var g=(0,i.default)("DayPickerNavigation",{"DayPickerNavigation--horizontal":!_,"DayPickerNavigation--vertical":_,"DayPickerNavigation--vertical-scrollable":m}),D=(0,i.default)("DayPickerNavigation__prev",{"DayPickerNavigation__prev--default":M,"DayPickerNavigation__prev--rtl":p}),k=(0,i.default)("DayPickerNavigation__next",{"DayPickerNavigation__next--default":b,"DayPickerNavigation__next--rtl":p});return r.default.createElement("div",{className:g},!m&&r.default.createElement("button",{type:"button","aria-label":u.jumpToPrevMonth,className:D,onClick:a,onMouseUp:function(e){e.currentTarget.blur()}},y),r.default.createElement("button",{type:"button","aria-label":u.jumpToNextMonth,className:k,onClick:o,onMouseUp:function(e){e.currentTarget.blur()}},v))}v.propTypes=m,v.defaultProps=y},8:function(e,t){e.exports=n(15)}})},function(e,t,n){"use strict";var r=n(27);e.exports=r.call(Function.call,Object.prototype.hasOwnProperty)},function(e,t,n){"use strict";e.exports=n(252)},function(e,t,n){"use strict";var r=n(36)("%TypeError%");e.exports=function(e,t){if(null==e)throw new r(t||"Cannot call method on "+e);return e}},function(e,t,n){"use strict";(function(t){var r=t.Symbol,a=n(166);e.exports=function(){return"function"==typeof r&&("function"==typeof Symbol&&("symbol"==typeof r("foo")&&("symbol"==typeof Symbol("bar")&&a())))}}).call(this,n(23))},function(e,t,n){"use strict";var r=n(36),a=n(255),o=a(r("String.prototype.indexOf"));e.exports=function(e,t){var n=r(e,!!t);return"function"==typeof n&&o(e,".prototype.")?a(n):n}},function(e,t,n){"use strict";var r=n(27),a=n(36)("%Function%"),o=a.apply,i=a.call;e.exports=function(){return r.apply(i,arguments)},e.exports.apply=function(){return r.apply(o,arguments)}},function(e,t,n){"use strict";var r=n(186),a=n(26);e.exports=function(){var e=r();return a(Object,{values:e},{values:function(){return Object.values!==e}}),e}},function(e,t,n){e.exports=function(e){var t={};function n(r){if(t[r])return t[r].exports;var a=t[r]={i:r,l:!1,exports:{}};return e[r].call(a.exports,a,a.exports,n),a.l=!0,a.exports}return n.m=e,n.c=t,n.i=function(e){return e},n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:r})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=72)}({0:function(e,t){e.exports=n(2)},1:function(e,t){e.exports=n(6)},11:function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r,a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0),s=(r=i)&&r.__esModule?r:{default:r};function u(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function l(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var d=function(e){function t(){return u(this,t),l(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),o(t,[{key:"render",value:function(){return s.default.createElement("svg",a({viewBox:"0 0 12 12"},this.props),s.default.createElement("path",{fillRule:"evenodd",d:"M11.53.47a.75.75 0 0 0-1.061 0l-4.47 4.47L1.529.47A.75.75 0 1 0 .468 1.531l4.47 4.47-4.47 4.47a.75.75 0 1 0 1.061 1.061l4.47-4.47 4.47 4.47a.75.75 0 1 0 1.061-1.061l-4.47-4.47 4.47-4.47a.75.75 0 0 0 0-1.061z"}))}}]),t}(s.default.Component);t.default=d},13:function(e,t){e.exports=n(13)},15:function(e,t){e.exports=n(18)},16:function(e,t){e.exports=n(24)},2:function(e,t){e.exports=n(7)},21:function(e,t){e.exports=n(31)},27:function(e,t){e.exports=n(160)},31:function(e,t){e.exports=n(32)},32:function(e,t){e.exports=n(14)},38:function(e,t){e.exports=n(161)},4:function(e,t){e.exports=n(3)},43:function(e,t){e.exports=n(188)},57:function(e,t){e.exports=n(189)},58:function(e,t){e.exports=n(190)},6:function(e,t){e.exports=n(9)},7:function(e,t){e.exports=n(0)},72:function(e,t,n){var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=L(n(0)),i=L(n(7)),s=L(n(6)),u=L(n(38)),l=n(1),d=n(16),c=L(n(9)),f=L(n(43)),p=n(2),h=L(n(21)),_=L(n(32)),m=L(n(31)),y=L(n(27)),v=L(n(13)),M=L(n(58)),b=L(n(57)),g=L(n(11)),D=L(n(15)),k=n(4);function L(e){return e&&e.__esModule?e:{default:e}}var w=(0,l.forbidExtraProps)(f.default),Y={date:null,focused:!1,id:"date",placeholder:"Date",disabled:!1,required:!1,readOnly:!1,screenReaderInputMessage:"",showClearDate:!1,showDefaultInputIcon:!1,customInputIcon:null,customCloseIcon:null,orientation:k.HORIZONTAL_ORIENTATION,anchorDirection:k.ANCHOR_LEFT,horizontalMargin:0,withPortal:!1,withFullScreenPortal:!1,initialVisibleMonth:null,firstDayOfWeek:null,numberOfMonths:2,keepOpenOnDateSelect:!1,reopenPickerOnClearDate:!1,renderCalendarInfo:null,hideKeyboardShortcutsPanel:!1,daySize:k.DAY_SIZE,isRTL:!1,navPrev:null,navNext:null,onPrevMonthClick:function(){},onNextMonthClick:function(){},onClose:function(){},renderMonth:null,renderDay:null,enableOutsideDays:!1,isDayBlocked:function(){return!1},isOutsideRange:function(e){return!(0,D.default)(e,(0,i.default)())},isDayHighlighted:function(){},displayFormat:function(){return i.default.localeData().longDateFormat("L")},monthFormat:"MMMM YYYY",phrases:p.SingleDatePickerPhrases},T=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":r(t))&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.isTouchDevice=!1,n.state={dayPickerContainerStyles:{},isDayPickerFocused:!1,isInputFocused:!1},n.onDayPickerFocus=n.onDayPickerFocus.bind(n),n.onDayPickerBlur=n.onDayPickerBlur.bind(n),n.onChange=n.onChange.bind(n),n.onFocus=n.onFocus.bind(n),n.onClearFocus=n.onClearFocus.bind(n),n.clearDate=n.clearDate.bind(n),n.responsivizePickerPosition=n.responsivizePickerPosition.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":r(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),a(t,[{key:"componentDidMount",value:function(){this.resizeHandle=(0,d.addEventListener)(window,"resize",this.responsivizePickerPosition,{passive:!0}),this.responsivizePickerPosition(),this.props.focused&&this.setState({isInputFocused:!0}),this.isTouchDevice=(0,c.default)()}},{key:"componentDidUpdate",value:function(e){!e.focused&&this.props.focused&&this.responsivizePickerPosition()}},{key:"componentWillUnmount",value:function(){(0,d.removeEventListener)(this.resizeHandle)}},{key:"onChange",value:function(e){var t=this.props,n=t.isOutsideRange,r=t.keepOpenOnDateSelect,a=t.onDateChange,o=t.onFocusChange,i=t.onClose,s=(0,_.default)(e,this.getDisplayFormat());s&&!n(s)?(a(s),r||(o({focused:!1}),i({date:s}))):a(null)}},{key:"onFocus",value:function(){var e=this.props,t=e.disabled,n=e.onFocusChange,r=e.withPortal,a=e.withFullScreenPortal;r||a||this.isTouchDevice?this.onDayPickerFocus():this.onDayPickerBlur(),t||n({focused:!0})}},{key:"onClearFocus",value:function(){var e=this.props,t=e.startDate,n=e.endDate,r=e.focused,a=e.onFocusChange,o=e.onClose;r&&(this.setState({isInputFocused:!1,isDayPickerFocused:!1}),a({focused:!1}),o({startDate:t,endDate:n}))}},{key:"onDayPickerFocus",value:function(){this.setState({isInputFocused:!1,isDayPickerFocused:!0})}},{key:"onDayPickerBlur",value:function(){this.setState({isInputFocused:!0,isDayPickerFocused:!1})}},{key:"getDateString",value:function(e){var t=this.getDisplayFormat();return e&&t?e&&e.format(t):(0,m.default)(e)}},{key:"getDayPickerContainerClasses",value:function(){var e=this.props,t=e.orientation,n=e.withPortal,r=e.withFullScreenPortal,a=e.anchorDirection,o=e.isRTL;return(0,s.default)("SingleDatePicker__picker",{"SingleDatePicker__picker--direction-left":a===k.ANCHOR_LEFT,"SingleDatePicker__picker--direction-right":a===k.ANCHOR_RIGHT,"SingleDatePicker__picker--horizontal":t===k.HORIZONTAL_ORIENTATION,"SingleDatePicker__picker--vertical":t===k.VERTICAL_ORIENTATION,"SingleDatePicker__picker--portal":n||r,"SingleDatePicker__picker--full-screen-portal":r,"SingleDatePicker__picker--rtl":o})}},{key:"getDisplayFormat",value:function(){var e=this.props.displayFormat;return"string"==typeof e?e:e()}},{key:"clearDate",value:function(){var e=this.props,t=e.onDateChange,n=e.reopenPickerOnClearDate,r=e.onFocusChange;t(null),n&&r({focused:!0})}},{key:"responsivizePickerPosition",value:function(){var e=this.props,t=e.anchorDirection,n=e.horizontalMargin,r=e.withPortal,a=e.withFullScreenPortal,o=e.focused,i=this.state.dayPickerContainerStyles;if(o){var s=t===k.ANCHOR_LEFT;if(!r&&!a){var u=this.dayPickerContainer.getBoundingClientRect(),l=i[t]||0,d=s?u[k.ANCHOR_RIGHT]:u[k.ANCHOR_LEFT];this.setState({dayPickerContainerStyles:(0,y.default)(t,l,d,n)})}}}},{key:"maybeRenderDayPickerWithPortal",value:function(){var e=this.props,t=e.focused,n=e.withPortal,r=e.withFullScreenPortal;return t?n||r?o.default.createElement(u.default,{isOpened:!0},this.renderDayPicker()):this.renderDayPicker():null}},{key:"renderDayPicker",value:function(){var e=this,t=this.props,n=t.onDateChange,r=t.date,a=t.onFocusChange,i=t.focused,s=t.enableOutsideDays,u=t.numberOfMonths,l=t.orientation,d=t.monthFormat,c=t.navPrev,f=t.navNext,p=t.withPortal,h=t.withFullScreenPortal,_=t.keepOpenOnDateSelect,m=t.initialVisibleMonth,y=t.renderMonth,v=t.renderDay,M=t.renderCalendarInfo,D=t.hideKeyboardShortcutsPanel,k=t.firstDayOfWeek,L=t.customCloseIcon,w=t.phrases,Y=t.daySize,T=t.isRTL,S=t.isOutsideRange,O=t.isDayBlocked,P=t.isDayHighlighted,x=this.state,E=x.dayPickerContainerStyles,j=x.isDayPickerFocused,C=!h&&p?this.onClearFocus:void 0,H=L||o.default.createElement(g.default,null);return o.default.createElement("div",{ref:function(t){e.dayPickerContainer=t},className:this.getDayPickerContainerClasses(),style:E,onClick:C},o.default.createElement(b.default,{date:r,onDateChange:n,onFocusChange:a,orientation:l,enableOutsideDays:s,numberOfMonths:u,monthFormat:d,withPortal:p||h,focused:i,keepOpenOnDateSelect:_,hideKeyboardShortcutsPanel:D,initialVisibleMonth:m,navPrev:c,navNext:f,renderMonth:y,renderDay:v,renderCalendarInfo:M,isFocused:j,phrases:w,daySize:Y,isRTL:T,isOutsideRange:S,isDayBlocked:O,isDayHighlighted:P,firstDayOfWeek:k}),h&&o.default.createElement("button",{"aria-label":w.closeDatePicker,className:"SingleDatePicker__close",type:"button",onClick:this.onClearFocus},o.default.createElement("div",{className:"SingleDatePicker__close-icon"},H)))}},{key:"render",value:function(){var e=this.props,t=e.id,n=e.placeholder,r=e.disabled,a=e.focused,i=e.required,s=e.readOnly,u=e.showClearDate,l=e.showDefaultInputIcon,d=e.customInputIcon,c=e.date,f=e.phrases,p=e.withPortal,_=e.withFullScreenPortal,m=e.screenReaderInputMessage,y=e.isRTL,b=this.state.isInputFocused,g=this.getDateString(c),D=(0,v.default)(c),k=p||_?void 0:this.onClearFocus;return o.default.createElement("div",{className:"SingleDatePicker"},o.default.createElement(h.default,{onOutsideClick:k},o.default.createElement(M.default,{id:t,placeholder:n,focused:a,isFocused:b,disabled:r,required:i,readOnly:s,showCaret:!p&&!_,onClearDate:this.clearDate,showClearDate:u,showDefaultInputIcon:l,customInputIcon:d,displayValue:g,inputValue:D,onChange:this.onChange,onFocus:this.onFocus,onKeyDownShiftTab:this.onClearFocus,onKeyDownTab:this.onClearFocus,onKeyDownArrowDown:this.onDayPickerFocus,screenReaderMessage:m,phrases:f,isRTL:y}),this.maybeRenderDayPickerWithPortal()))}}]),t}(o.default.Component);t.default=T,T.propTypes=w,T.defaultProps=Y},9:function(e,t){e.exports=n(12)}})},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){return!(!r.default.isMoment(e)||!r.default.isMoment(t))&&!(0,a.default)(e,t)};var r=o(n(0)),a=o(n(20));function o(e){return e&&e.__esModule?e:{default:e}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.AddExpensePage=void 0;var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=u(n(2)),o=u(n(191)),i=n(21),s=n(37);function u(e){return e&&e.__esModule?e:{default:e}}function l(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function d(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var c=t.AddExpensePage=function(e){function t(){var e,n,r;l(this,t);for(var a=arguments.length,o=Array(a),i=0;i<a;i++)o[i]=arguments[i];return n=r=d(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(o))),r.onSubmit=function(e){r.props.addExpense(e),r.props.history.push("/")},d(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),r(t,[{key:"render",value:function(){return a.default.createElement("div",null,a.default.createElement("h1",null,"AddExpensePage"),a.default.createElement(o.default,{onSubmit:this.onSubmit}))}}]),t}(a.default.Component);t.default=(0,i.connect)(void 0,(function(e){return{addExpense:function(t){return e((0,s.addExpense)(t))}}}))(c)},function(e,t,n){var r=n(261),a=n(262),o=a;o.v1=r,o.v4=a,e.exports=o},function(e,t,n){var r,a,o=n(192),i=n(193),s=0,u=0;e.exports=function(e,t,n){var l=t&&n||0,d=t||[],c=(e=e||{}).node||r,f=void 0!==e.clockseq?e.clockseq:a;if(null==c||null==f){var p=o();null==c&&(c=r=[1|p[0],p[1],p[2],p[3],p[4],p[5]]),null==f&&(f=a=16383&(p[6]<<8|p[7]))}var h=void 0!==e.msecs?e.msecs:(new Date).getTime(),_=void 0!==e.nsecs?e.nsecs:u+1,m=h-s+(_-u)/1e4;if(m<0&&void 0===e.clockseq&&(f=f+1&16383),(m<0||h>s)&&void 0===e.nsecs&&(_=0),_>=1e4)throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");s=h,u=_,a=f;var y=(1e4*(268435455&(h+=122192928e5))+_)%4294967296;d[l++]=y>>>24&255,d[l++]=y>>>16&255,d[l++]=y>>>8&255,d[l++]=255&y;var v=h/4294967296*1e4&268435455;d[l++]=v>>>8&255,d[l++]=255&v,d[l++]=v>>>24&15|16,d[l++]=v>>>16&255,d[l++]=f>>>8|128,d[l++]=255&f;for(var M=0;M<6;++M)d[l+M]=c[M];return t||i(d)}},function(e,t,n){var r=n(192),a=n(193);e.exports=function(e,t,n){var o=t&&n||0;"string"==typeof e&&(t="binary"===e?new Array(16):null,e=null);var i=(e=e||{}).random||(e.rng||r)();if(i[6]=15&i[6]|64,i[8]=63&i[8]|128,t)for(var s=0;s<16;++s)t[o+s]=i[s];return t||a(i)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.EditExpensePage=void 0;var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=u(n(2)),o=u(n(191)),i=n(21),s=n(37);function u(e){return e&&e.__esModule?e:{default:e}}function l(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function d(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var c=t.EditExpensePage=function(e){function t(){var e,n,r;l(this,t);for(var a=arguments.length,o=Array(a),i=0;i<a;i++)o[i]=arguments[i];return n=r=d(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(o))),r.onSubmit=function(e){r.props.editExpense(r.props.expense.id,e),r.props.history.push("/")},r.onRemove=function(){r.props.removeExpense({id:r.props.expense.id}),r.props.history.push("/")},d(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),r(t,[{key:"render",value:function(){return a.default.createElement("div",null,a.default.createElement(o.default,{expense:this.props.expense,onSubmit:this.onSubmit}),a.default.createElement("button",{onClick:this.onRemove},"Remove"))}}]),t}(a.default.Component);t.default=(0,i.connect)((function(e,t){return{expense:e.expenses.find((function(e){return e.id===t.match.params.id}))}}),(function(e,t){return{editExpense:function(t,n){return e((0,s.editExpense)(t,n))},removeExpense:function(t){return e((0,s.removeExpense)(t))}}}))(c)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,a=n(2),o=(r=a)&&r.__esModule?r:{default:r};t.default=function(){return o.default.createElement("div",null,"Help Page")}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,a=n(2),o=(r=a)&&r.__esModule?r:{default:r},i=n(29);t.default=function(){return o.default.createElement("div",null,o.default.createElement("h2",null,"आप गलत निकल लिए है!...404"),o.default.createElement(i.Link,{to:"/"},"Go to Home.."))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(38),a=i(n(267)),o=i(n(268));function i(e){return e&&e.__esModule?e:{default:e}}t.default=function(){return(0,r.createStore)((0,r.combineReducers)({expenses:a.default,filters:o.default}),window.__REDUX_DEVTOOLS_EXTENSION__&&window.__REDUX_DEVTOOLS_EXTENSION__())}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function a(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}var o=[];t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:o,t=arguments[1];switch(t.type){case"ADD_EXPENSE":return[].concat(a(e),[t.expense]);case"REMOVE_EXPENSE":return e.filter((function(e){return e.id!==t.id}));case"EDIT_EXPENSE":return e.map((function(e){return e.id===t.id?r({},e,t.updates):e}));default:return e}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=n(0),i=(r=o)&&r.__esModule?r:{default:r};var s={text:"",sortBy:"date",startDate:(0,i.default)().startOf("month"),endDate:(0,i.default)().endOf("month")};t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:s,t=arguments[1];switch(t.type){case"SET_TEXT_FILTER":return a({},e,{text:t.text});case"SORT_BY_AMOUNT":return a({},e,{sortBy:"amount"});case"SORT_BY_DATE":return a({},e,{sortBy:"date"});case"SET_START_DATE":return a({},e,{startDate:t.startDate});case"SET_END_DATE":return a({},e,{endDate:t.endDate});default:return e}}},function(e,t,n){},function(e,t,n){},function(e,t,n){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9tb21lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kYXRlcy9jb25zdGFudHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3dhcm5pbmcvd2FybmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaW52YXJpYW50L2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FpcmJuYi1wcm9wLXR5cGVzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kYXRlcy9saWIvZGVmYXVsdFBocmFzZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRhdGVzL2xpYi91dGlscy9nZXRQaHJhc2VQcm9wVHlwZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NsYXNzbmFtZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LW1vbWVudC1wcm9wdHlwZXMvc3JjL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kYXRlcy9saWIvc2hhcGVzL0RheU9mV2Vla1NoYXBlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pcy10b3VjaC1kZXZpY2UvYnVpbGQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRhdGVzL2xpYi91dGlscy90b0lTT0RhdGVTdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRhdGVzL2xpYi91dGlscy90b01vbWVudE9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZXMvbGliL3NoYXBlcy9TY3JvbGxhYmxlT3JpZW50YXRpb25TaGFwZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZXMvbGliL3V0aWxzL2lzU2FtZURheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYWRkb25zLXNoYWxsb3ctY29tcGFyZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZXMvbGliL3V0aWxzL2lzSW5jbHVzaXZlbHlBZnRlckRheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZXMvbGliL3V0aWxzL2lzQmVmb3JlRGF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kYXRlcy9saWIvdXRpbHMvaXNBZnRlckRheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvdXRpbHMvUHJvcFR5cGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb21wb25lbnRzL1Byb3ZpZGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy91dGlscy9TdWJzY3JpcHRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2NvbXBvbmVudHMvY29ubmVjdEFkdmFuY2VkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy91dGlscy9zaGFsbG93RXF1YWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fcm9vdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19TeW1ib2wuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fZ2V0UmF3VGFnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX29iamVjdFRvU3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VHZXRUYWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fb3ZlckFyZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19nZXRQcm90b3R5cGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9pc09iamVjdExpa2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9pc1BsYWluT2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L3dyYXBNYXBUb1Byb3BzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L21hcERpc3BhdGNoVG9Qcm9wcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC9tYXBTdGF0ZVRvUHJvcHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3QvbWVyZ2VQcm9wcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC9zZWxlY3RvckZhY3RvcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3QvY29ubmVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb25zb2xpZGF0ZWQtZXZlbnRzL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb2JqZWN0LmFzc2lnbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGVmaW5lLXByb3BlcnRpZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Z1bmN0aW9uLWJpbmQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRhdGVzL2xpYi91dGlscy90b0lTT01vbnRoU3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZXNvbHZlLXBhdGhuYW1lL2VzbS9yZXNvbHZlLXBhdGhuYW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy92YWx1ZS1lcXVhbC9lc20vdmFsdWUtZXF1YWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3RpbnktaW52YXJpYW50L2Rpc3QvdGlueS1pbnZhcmlhbnQuZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oaXN0b3J5L2VzbS9oaXN0b3J5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvZXMvUm91dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL1JvdXRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy9Ccm93c2VyUm91dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL0hhc2hSb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXMvTGluay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2VzL01lbW9yeVJvdXRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy9NZW1vcnlSb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9lcy9tYXRjaFBhdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9lcy9Sb3V0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy9Sb3V0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy9OYXZMaW5rLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvZXMvUHJvbXB0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL1Byb21wdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2VzL2dlbmVyYXRlUGF0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2VzL1JlZGlyZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL1JlZGlyZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvZXMvU3RhdGljUm91dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL1N0YXRpY1JvdXRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2VzL1N3aXRjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy9Td2l0Y2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXMvZ2VuZXJhdGVQYXRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL21hdGNoUGF0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2VzL3dpdGhSb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXMvd2l0aFJvdXRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL25vZGVfbW9kdWxlcy9wYXRoLXRvLXJlZ2V4cC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZXMvbGliL2NvbXBvbmVudHMvT3V0c2lkZUNsaWNrSGFuZGxlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZXMvbGliL3V0aWxzL3RvTG9jYWxpemVkRGF0ZVN0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzT2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kYXRlcy9saWIvdXRpbHMvaXNEYXlWaXNpYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kYXRlcy9saWIvY29tcG9uZW50cy9EYXlQaWNrZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0L0dldEludHJpbnNpYy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYWN0aW9ucy9leHBlbnNlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVkdXgvZXMvcmVkdXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N5bWJvbC1vYnNlcnZhYmxlL2VzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vYmplY3QtYXNzaWduL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9lbXB0eUZ1bmN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9zaGFsbG93RXF1YWwuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NlbGVjdG9ycy9leHBlbnNlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9hZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9hci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9hci1kei5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9hci1rdy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9hci1seS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9hci1tYS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9hci1zYS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9hci10bi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9hei5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9iZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9iZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9ibi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9iby5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9ici5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9icy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9jYS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9jcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9jdi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9jeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9kYS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9kZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9kZS1hdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9kZS1jaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9kdi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9lbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9lbi1hdS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9lbi1jYS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9lbi1nYi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9lbi1pZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9lbi1uei5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9lby5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9lcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9lcy1kby5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9ldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9ldS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9mYS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9maS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9mby5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9mci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9mci1jYS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9mci1jaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9meS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9nZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9nbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9nb20tbGF0bi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9oZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9oaS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9oci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9odS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9oeS1hbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9pZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9pcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9pdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9qYS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9qdi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9rYS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9ray5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9rbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9rbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9rby5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9reS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9sYi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9sby5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9sdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9sdi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9tZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9taS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9tay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9tbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9tci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9tcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9tcy1teS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9teS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9uYi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9uZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9ubC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9ubC1iZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9ubi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9wYS1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9wbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9wdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9wdC1ici5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9yby5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9ydS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9zZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9zZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9zaS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9zay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9zbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9zcS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9zci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9zci1jeXJsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3NzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3N2LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3N3LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3RhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3RlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3RldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS90aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS90bC1waC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS90bGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvdHIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvdHpsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3R6bS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS90em0tbGF0bi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS91ay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS91ci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS91ei5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS91ei1sYXRuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3ZpLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3gtcHNldWRvLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3lvLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3poLWNuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3poLWhrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3poLXR3LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kYXRlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZXMvbGliL3V0aWxzL2dldFJlc3BvbnNpdmVDb250YWluZXJTdHlsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXBvcnRhbC9idWlsZC9wb3J0YWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRhdGVzL2xpYi9zaGFwZXMvRGF0ZVJhbmdlUGlja2VyU2hhcGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iamVjdC1rZXlzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vYmplY3Qta2V5cy9pc0FyZ3VtZW50cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb2JqZWN0LmFzc2lnbi9pbXBsZW1lbnRhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGFzLXN5bWJvbHMvc2hhbXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iamVjdC5hc3NpZ24vcG9seWZpbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRhdGVzL2xpYi9zaGFwZXMvRm9jdXNlZElucHV0U2hhcGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRhdGVzL2xpYi9zaGFwZXMvT3JpZW50YXRpb25TaGFwZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZXMvbGliL3NoYXBlcy9BbmNob3JEaXJlY3Rpb25TaGFwZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZXMvbGliL2NvbXBvbmVudHMvRGF0ZVJhbmdlUGlja2VySW5wdXRDb250cm9sbGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kYXRlcy9saWIvY29tcG9uZW50cy9EYXRlUmFuZ2VQaWNrZXJJbnB1dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZXMvbGliL2NvbXBvbmVudHMvRGF0ZUlucHV0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvdGhyb3R0bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fcm9vdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19TeW1ib2wuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRhdGVzL2xpYi9jb21wb25lbnRzL0RheVBpY2tlclJhbmdlQ29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZXMvbGliL3V0aWxzL2dldFZpc2libGVEYXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kYXRlcy9saWIvdXRpbHMvZ2V0Q2FsZW5kYXJNb250aFdpZHRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kYXRlcy9saWIvdXRpbHMvZ2V0VHJhbnNmb3JtU3R5bGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kYXRlcy9saWIvY29tcG9uZW50cy9DYWxlbmRhck1vbnRoR3JpZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZXMvbGliL2NvbXBvbmVudHMvQ2FsZW5kYXJNb250aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZXMvbGliL2NvbXBvbmVudHMvQ2FsZW5kYXJEYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iamVjdC52YWx1ZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iamVjdC52YWx1ZXMvaW1wbGVtZW50YXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iamVjdC52YWx1ZXMvcG9seWZpbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRhdGVzL2xpYi91dGlscy9pc05leHREYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRhdGVzL2xpYi9zaGFwZXMvU2luZ2xlRGF0ZVBpY2tlclNoYXBlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kYXRlcy9saWIvY29tcG9uZW50cy9EYXlQaWNrZXJTaW5nbGVEYXRlQ29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZXMvbGliL2NvbXBvbmVudHMvU2luZ2xlRGF0ZVBpY2tlcklucHV0LmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0V4cGVuc2VGb3JtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy91dWlkL2xpYi9ybmctYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdXVpZC9saWIvYnl0ZXNUb1V1aWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L25vZGVfbW9kdWxlcy9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19mcmVlR2xvYmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zeW1ib2wtb2JzZXJ2YWJsZS9lcy9wb255ZmlsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MvZGlzdC9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy5janMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QvY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvaW52YXJpYW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9FeGVjdXRpb25FbnZpcm9ubWVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvRXZlbnRMaXN0ZW5lci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvZW1wdHlPYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2NvbnRhaW5zTm9kZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvaXNUZXh0Tm9kZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvaXNOb2RlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9mb2N1c05vZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2dldEFjdGl2ZUVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldC5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vaGFybW9ueS1tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3JvdXRlcnMvQXBwUm91dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbm9kZV9tb2R1bGVzL2lzYXJyYXkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvSGVhZGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0V4cGVuc2VEYXNoYm9hcmRQYWdlLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0V4cGVuc2VMaXN0LmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0V4cGVuc2VMaXN0SXRlbS5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlIHN5bmMgXlxcLlxcLy4qJCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9FeHBlbnNlTGlzdEZpbHRlcnMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FjdGlvbnMvZmlsdGVycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZXMvbGliL2NvbXBvbmVudHMvRGF0ZVJhbmdlUGlja2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9haXJibmItcHJvcC10eXBlcy9idWlsZC9tb2Nrcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29uc29saWRhdGVkLWV2ZW50cy9saWIvbm9ybWFsaXplRXZlbnRPcHRpb25zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb25zb2xpZGF0ZWQtZXZlbnRzL2xpYi9jYW5Vc2VQYXNzaXZlRXZlbnRMaXN0ZW5lcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbnNvbGlkYXRlZC1ldmVudHMvbGliL2NhblVzZURPTS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29uc29saWRhdGVkLWV2ZW50cy9saWIvVGFyZ2V0RXZlbnRIYW5kbGVycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29uc29saWRhdGVkLWV2ZW50cy9saWIvZXZlbnRPcHRpb25zS2V5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1tb21lbnQtcHJvcHR5cGVzL3NyYy9tb21lbnQtdmFsaWRhdGlvbi13cmFwcGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1tb21lbnQtcHJvcHR5cGVzL3NyYy9jb3JlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vYmplY3Qta2V5cy9pbXBsZW1lbnRhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZnVuY3Rpb24tYmluZC9pbXBsZW1lbnRhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb2JqZWN0LmFzc2lnbi9zaGltLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvZGVib3VuY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9ub3cuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZnJlZUdsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL3RvTnVtYmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNTeW1ib2wuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUdldFRhZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXRSYXdUYWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fb2JqZWN0VG9TdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc09iamVjdExpa2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRhdGVzL2xpYi91dGlscy9nZXRBY3RpdmVFbGVtZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kYXRlcy9saWIvdXRpbHMvaXNUcmFuc2l0aW9uRW5kU3VwcG9ydGVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kYXRlcy9saWIvdXRpbHMvZ2V0Q2FsZW5kYXJNb250aFdlZWtzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kYXRlcy9saWIvdXRpbHMvZ2V0UGhyYXNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kYXRlcy9saWIvY29tcG9uZW50cy9EYXlQaWNrZXJLZXlib2FyZFNob3J0Y3V0cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZXMvbGliL2NvbXBvbmVudHMvRGF5UGlja2VyTmF2aWdhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGFzL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvMjAxOS9SZXF1aXJlT2JqZWN0Q29lcmNpYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC81L0NoZWNrT2JqZWN0Q29lcmNpYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oYXMtc3ltYm9scy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvaGVscGVycy9jYWxsQm91bmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0L2hlbHBlcnMvY2FsbEJpbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iamVjdC52YWx1ZXMvc2hpbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZXMvbGliL2NvbXBvbmVudHMvU2luZ2xlRGF0ZVBpY2tlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZXMvbGliL3V0aWxzL2lzSW5jbHVzaXZlbHlCZWZvcmVEYXkuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvQWRkRXhwZW5zZVBhZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3V1aWQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3V1aWQvdjEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3V1aWQvdjQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvRWRpdEV4cGVuc2VQYWdlLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0hlbHBQYWdlLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL05vdEZvdW5kUGFnZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc3RvcmUvY29uZmlndXJlU3RvcmUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3JlZHVjZXJzL2V4cGVuc2VzLmpzIiwid2VicGFjazovLy8uL3NyYy9yZWR1Y2Vycy9maWx0ZXJzLmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiaG9va0NhbGxiYWNrIiwiaG9va3MiLCJhcHBseSIsImFyZ3VtZW50cyIsImlzQXJyYXkiLCJpbnB1dCIsIkFycmF5IiwidG9TdHJpbmciLCJpc09iamVjdCIsImlzVW5kZWZpbmVkIiwiaXNOdW1iZXIiLCJpc0RhdGUiLCJEYXRlIiwibWFwIiwiYXJyIiwiZm4iLCJyZXMiLCJsZW5ndGgiLCJwdXNoIiwiaGFzT3duUHJvcCIsImEiLCJiIiwiZXh0ZW5kIiwidmFsdWVPZiIsImNyZWF0ZVVUQyIsImZvcm1hdCIsImxvY2FsZSIsInN0cmljdCIsImNyZWF0ZUxvY2FsT3JVVEMiLCJ1dGMiLCJnZXRQYXJzaW5nRmxhZ3MiLCJfcGYiLCJlbXB0eSIsInVudXNlZFRva2VucyIsInVudXNlZElucHV0Iiwib3ZlcmZsb3ciLCJjaGFyc0xlZnRPdmVyIiwibnVsbElucHV0IiwiaW52YWxpZE1vbnRoIiwiaW52YWxpZEZvcm1hdCIsInVzZXJJbnZhbGlkYXRlZCIsImlzbyIsInBhcnNlZERhdGVQYXJ0cyIsIm1lcmlkaWVtIiwicmZjMjgyMiIsIndlZWtkYXlNaXNtYXRjaCIsInNvbWUkMSIsInNvbWUiLCJmdW4iLCJ0aGlzIiwibGVuIiwiaXNWYWxpZCIsIl9pc1ZhbGlkIiwiZmxhZ3MiLCJwYXJzZWRQYXJ0cyIsImlzTm93VmFsaWQiLCJpc05hTiIsIl9kIiwiZ2V0VGltZSIsImludmFsaWRXZWVrZGF5IiwiX3N0cmljdCIsInVuZGVmaW5lZCIsImJpZ0hvdXIiLCJpc0Zyb3plbiIsImNyZWF0ZUludmFsaWQiLCJOYU4iLCJtb21lbnRQcm9wZXJ0aWVzIiwiY29weUNvbmZpZyIsInRvIiwiZnJvbSIsInByb3AiLCJ2YWwiLCJfaXNBTW9tZW50T2JqZWN0IiwiX2kiLCJfZiIsIl9sIiwiX3R6bSIsIl9pc1VUQyIsIl9vZmZzZXQiLCJfbG9jYWxlIiwidXBkYXRlSW5Qcm9ncmVzcyIsIk1vbWVudCIsImNvbmZpZyIsInVwZGF0ZU9mZnNldCIsImlzTW9tZW50Iiwib2JqIiwiYWJzRmxvb3IiLCJudW1iZXIiLCJNYXRoIiwiY2VpbCIsImZsb29yIiwidG9JbnQiLCJhcmd1bWVudEZvckNvZXJjaW9uIiwiY29lcmNlZE51bWJlciIsImlzRmluaXRlIiwiY29tcGFyZUFycmF5cyIsImFycmF5MSIsImFycmF5MiIsImRvbnRDb252ZXJ0IiwibWluIiwibGVuZ3RoRGlmZiIsImFicyIsImRpZmZzIiwid2FybiIsIm1zZyIsInN1cHByZXNzRGVwcmVjYXRpb25XYXJuaW5ncyIsImNvbnNvbGUiLCJkZXByZWNhdGUiLCJmaXJzdFRpbWUiLCJkZXByZWNhdGlvbkhhbmRsZXIiLCJhcmciLCJhcmdzIiwic2xpY2UiLCJqb2luIiwiRXJyb3IiLCJzdGFjayIsImRlcHJlY2F0aW9ucyIsImRlcHJlY2F0ZVNpbXBsZSIsImlzRnVuY3Rpb24iLCJGdW5jdGlvbiIsIm1lcmdlQ29uZmlncyIsInBhcmVudENvbmZpZyIsImNoaWxkQ29uZmlnIiwiTG9jYWxlIiwic2V0Iiwia2V5cyQxIiwia2V5cyIsImFsaWFzZXMiLCJhZGRVbml0QWxpYXMiLCJ1bml0Iiwic2hvcnRoYW5kIiwibG93ZXJDYXNlIiwidG9Mb3dlckNhc2UiLCJub3JtYWxpemVVbml0cyIsInVuaXRzIiwibm9ybWFsaXplT2JqZWN0VW5pdHMiLCJpbnB1dE9iamVjdCIsIm5vcm1hbGl6ZWRQcm9wIiwibm9ybWFsaXplZElucHV0IiwicHJpb3JpdGllcyIsImFkZFVuaXRQcmlvcml0eSIsInByaW9yaXR5IiwibWFrZUdldFNldCIsImtlZXBUaW1lIiwic2V0JDEiLCJtb20iLCJ6ZXJvRmlsbCIsInRhcmdldExlbmd0aCIsImZvcmNlU2lnbiIsImFic051bWJlciIsInplcm9zVG9GaWxsIiwicG93IiwibWF4Iiwic3Vic3RyIiwiZm9ybWF0dGluZ1Rva2VucyIsImxvY2FsRm9ybWF0dGluZ1Rva2VucyIsImZvcm1hdEZ1bmN0aW9ucyIsImZvcm1hdFRva2VuRnVuY3Rpb25zIiwiYWRkRm9ybWF0VG9rZW4iLCJ0b2tlbiIsInBhZGRlZCIsIm9yZGluYWwiLCJjYWxsYmFjayIsImZ1bmMiLCJsb2NhbGVEYXRhIiwiZm9ybWF0TW9tZW50IiwiZXhwYW5kRm9ybWF0IiwiYXJyYXkiLCJtYXRjaCIsInJlcGxhY2UiLCJvdXRwdXQiLCJtYWtlRm9ybWF0RnVuY3Rpb24iLCJpbnZhbGlkRGF0ZSIsInJlcGxhY2VMb25nRGF0ZUZvcm1hdFRva2VucyIsImxvbmdEYXRlRm9ybWF0IiwibGFzdEluZGV4IiwidGVzdCIsIm1hdGNoMSIsIm1hdGNoMiIsIm1hdGNoMyIsIm1hdGNoNCIsIm1hdGNoNiIsIm1hdGNoMXRvMiIsIm1hdGNoM3RvNCIsIm1hdGNoNXRvNiIsIm1hdGNoMXRvMyIsIm1hdGNoMXRvNCIsIm1hdGNoMXRvNiIsIm1hdGNoVW5zaWduZWQiLCJtYXRjaFNpZ25lZCIsIm1hdGNoT2Zmc2V0IiwibWF0Y2hTaG9ydE9mZnNldCIsIm1hdGNoV29yZCIsInJlZ2V4ZXMiLCJhZGRSZWdleFRva2VuIiwicmVnZXgiLCJzdHJpY3RSZWdleCIsImlzU3RyaWN0IiwiZ2V0UGFyc2VSZWdleEZvclRva2VuIiwiUmVnRXhwIiwicmVnZXhFc2NhcGUiLCJtYXRjaGVkIiwicDEiLCJwMiIsInAzIiwicDQiLCJ0b2tlbnMiLCJhZGRQYXJzZVRva2VuIiwiYWRkV2Vla1BhcnNlVG9rZW4iLCJfdyIsImFkZFRpbWVUb0FycmF5RnJvbVRva2VuIiwiX2EiLCJpbmRleE9mJDEiLCJpbmRleE9mIiwiZGF5c0luTW9udGgiLCJ5ZWFyIiwibW9udGgiLCJVVEMiLCJnZXRVVENEYXRlIiwibW9udGhzU2hvcnQiLCJtb250aHMiLCJtb250aHNTaG9ydFJlZ2V4IiwibW9udGhzUmVnZXgiLCJtb250aHNQYXJzZSIsIk1PTlRIU19JTl9GT1JNQVQiLCJkZWZhdWx0TG9jYWxlTW9udGhzIiwic3BsaXQiLCJkZWZhdWx0TG9jYWxlTW9udGhzU2hvcnQiLCJoYW5kbGVTdHJpY3RQYXJzZSIsIm1vbnRoTmFtZSIsImlpIiwibGxjIiwidG9Mb2NhbGVMb3dlckNhc2UiLCJfbW9udGhzUGFyc2UiLCJfbG9uZ01vbnRoc1BhcnNlIiwiX3Nob3J0TW9udGhzUGFyc2UiLCJzZXRNb250aCIsImRheU9mTW9udGgiLCJkYXRlIiwiZ2V0U2V0TW9udGgiLCJkZWZhdWx0TW9udGhzU2hvcnRSZWdleCIsImRlZmF1bHRNb250aHNSZWdleCIsImNvbXB1dGVNb250aHNQYXJzZSIsImNtcExlblJldiIsInNob3J0UGllY2VzIiwibG9uZ1BpZWNlcyIsIm1peGVkUGllY2VzIiwic29ydCIsIl9tb250aHNSZWdleCIsIl9tb250aHNTaG9ydFJlZ2V4IiwiX21vbnRoc1N0cmljdFJlZ2V4IiwiX21vbnRoc1Nob3J0U3RyaWN0UmVnZXgiLCJkYXlzSW5ZZWFyIiwiaXNMZWFwWWVhciIsInkiLCJwYXJzZVR3b0RpZ2l0WWVhciIsInBhcnNlSW50IiwiZ2V0U2V0WWVhciIsImNyZWF0ZURhdGUiLCJoIiwiTSIsIm1zIiwiZ2V0RnVsbFllYXIiLCJzZXRGdWxsWWVhciIsImNyZWF0ZVVUQ0RhdGUiLCJnZXRVVENGdWxsWWVhciIsInNldFVUQ0Z1bGxZZWFyIiwiZmlyc3RXZWVrT2Zmc2V0IiwiZG93IiwiZG95IiwiZndkIiwiZ2V0VVRDRGF5IiwiZGF5T2ZZZWFyRnJvbVdlZWtzIiwid2VlayIsIndlZWtkYXkiLCJyZXNZZWFyIiwicmVzRGF5T2ZZZWFyIiwiZGF5T2ZZZWFyIiwid2Vla09mWWVhciIsInJlc1dlZWsiLCJ3ZWVrT2Zmc2V0Iiwid2Vla3NJblllYXIiLCJ3ZWVrT2Zmc2V0TmV4dCIsIndlZWtkYXlzTWluIiwid2Vla2RheXNTaG9ydCIsIndlZWtkYXlzIiwid2Vla2RheXNNaW5SZWdleCIsIndlZWtkYXlzU2hvcnRSZWdleCIsIndlZWtkYXlzUmVnZXgiLCJ3ZWVrZGF5c1BhcnNlIiwiZGVmYXVsdExvY2FsZVdlZWtkYXlzIiwiZGVmYXVsdExvY2FsZVdlZWtkYXlzU2hvcnQiLCJkZWZhdWx0TG9jYWxlV2Vla2RheXNNaW4iLCJoYW5kbGVTdHJpY3RQYXJzZSQxIiwid2Vla2RheU5hbWUiLCJfd2Vla2RheXNQYXJzZSIsIl9zaG9ydFdlZWtkYXlzUGFyc2UiLCJfbWluV2Vla2RheXNQYXJzZSIsImRheSIsImRlZmF1bHRXZWVrZGF5c1JlZ2V4IiwiZGVmYXVsdFdlZWtkYXlzU2hvcnRSZWdleCIsImRlZmF1bHRXZWVrZGF5c01pblJlZ2V4IiwiY29tcHV0ZVdlZWtkYXlzUGFyc2UiLCJtaW5wIiwic2hvcnRwIiwibG9uZ3AiLCJtaW5QaWVjZXMiLCJfd2Vla2RheXNSZWdleCIsIl93ZWVrZGF5c1Nob3J0UmVnZXgiLCJfd2Vla2RheXNNaW5SZWdleCIsIl93ZWVrZGF5c1N0cmljdFJlZ2V4IiwiX3dlZWtkYXlzU2hvcnRTdHJpY3RSZWdleCIsIl93ZWVrZGF5c01pblN0cmljdFJlZ2V4IiwiaEZvcm1hdCIsImhvdXJzIiwibG93ZXJjYXNlIiwibWludXRlcyIsIm1hdGNoTWVyaWRpZW0iLCJfbWVyaWRpZW1QYXJzZSIsInNlY29uZHMiLCJrSW5wdXQiLCJfaXNQbSIsImlzUE0iLCJfbWVyaWRpZW0iLCJwb3MiLCJwb3MxIiwicG9zMiIsImdsb2JhbExvY2FsZSIsImdldFNldEhvdXIiLCJiYXNlQ29uZmlnIiwiY2FsZW5kYXIiLCJzYW1lRGF5IiwibmV4dERheSIsIm5leHRXZWVrIiwibGFzdERheSIsImxhc3RXZWVrIiwic2FtZUVsc2UiLCJMVFMiLCJMVCIsIkwiLCJMTCIsIkxMTCIsIkxMTEwiLCJkYXlPZk1vbnRoT3JkaW5hbFBhcnNlIiwicmVsYXRpdmVUaW1lIiwiZnV0dXJlIiwicGFzdCIsInNzIiwibW0iLCJoaCIsImRkIiwiTU0iLCJ5eSIsIm1lcmlkaWVtUGFyc2UiLCJsb2NhbGVzIiwibG9jYWxlRmFtaWxpZXMiLCJub3JtYWxpemVMb2NhbGUiLCJsb2FkTG9jYWxlIiwib2xkTG9jYWxlIiwiX2FiYnIiLCJnZXRTZXRHbG9iYWxMb2NhbGUiLCJlIiwidmFsdWVzIiwiZGF0YSIsImdldExvY2FsZSIsImRlZmluZUxvY2FsZSIsImFiYnIiLCJfY29uZmlnIiwicGFyZW50TG9jYWxlIiwiZm9yRWFjaCIsIngiLCJuYW1lcyIsImoiLCJuZXh0IiwiY2hvb3NlTG9jYWxlIiwiY2hlY2tPdmVyZmxvdyIsIl9vdmVyZmxvd0RheU9mWWVhciIsIl9vdmVyZmxvd1dlZWtzIiwiX292ZXJmbG93V2Vla2RheSIsImV4dGVuZGVkSXNvUmVnZXgiLCJiYXNpY0lzb1JlZ2V4IiwidHpSZWdleCIsImlzb0RhdGVzIiwiaXNvVGltZXMiLCJhc3BOZXRKc29uUmVnZXgiLCJjb25maWdGcm9tSVNPIiwiYWxsb3dUaW1lIiwiZGF0ZUZvcm1hdCIsInRpbWVGb3JtYXQiLCJ0ekZvcm1hdCIsInN0cmluZyIsImV4ZWMiLCJjb25maWdGcm9tU3RyaW5nQW5kRm9ybWF0IiwiYmFzaWNSZmNSZWdleCIsImNvbmZpZ0Zyb21SRkMyODIyIiwiZGF5Rm9ybWF0IiwidGltZXpvbmUiLCJ0aW1lem9uZUluZGV4IiwidGltZXpvbmVzIiwibW9tZW50RGF5IiwiZ2V0RGF5IiwidG9VcHBlckNhc2UiLCJzcGxpY2UiLCJkZWZhdWx0cyIsImNvbmZpZ0Zyb21BcnJheSIsImN1cnJlbnREYXRlIiwieWVhclRvVXNlIiwibm93VmFsdWUiLCJub3ciLCJfdXNlVVRDIiwiZ2V0VVRDTW9udGgiLCJnZXRNb250aCIsImdldERhdGUiLCJjdXJyZW50RGF0ZUFycmF5IiwidyIsIndlZWtZZWFyIiwidGVtcCIsIndlZWtkYXlPdmVyZmxvdyIsIkdHIiwiVyIsIkUiLCJjcmVhdGVMb2NhbCIsIl93ZWVrIiwiY3VyV2VlayIsImdnIiwiX2RheU9mWWVhciIsImRheU9mWWVhckZyb21XZWVrSW5mbyIsIl9uZXh0RGF5Iiwic2V0VVRDTWludXRlcyIsImdldFVUQ01pbnV0ZXMiLCJJU09fODYwMSIsIlJGQ18yODIyIiwicGFyc2VkSW5wdXQiLCJza2lwcGVkIiwic3RyaW5nTGVuZ3RoIiwidG90YWxQYXJzZWRJbnB1dExlbmd0aCIsImhvdXIiLCJpc1BtIiwibWVyaWRpZW1Ib3VyIiwibWVyaWRpZW1GaXhXcmFwIiwicHJlcGFyZUNvbmZpZyIsInByZXBhcnNlIiwidGVtcENvbmZpZyIsImJlc3RNb21lbnQiLCJzY29yZVRvQmVhdCIsImN1cnJlbnRTY29yZSIsInNjb3JlIiwiY29uZmlnRnJvbVN0cmluZ0FuZEFycmF5IiwiY3JlYXRlRnJvbUlucHV0RmFsbGJhY2siLCJjb25maWdGcm9tU3RyaW5nIiwibWludXRlIiwic2Vjb25kIiwibWlsbGlzZWNvbmQiLCJjb25maWdGcm9tT2JqZWN0IiwiY29uZmlnRnJvbUlucHV0IiwiaXNVVEMiLCJrIiwiaXNPYmplY3RFbXB0eSIsImFkZCIsInByb3RvdHlwZU1pbiIsIm90aGVyIiwicHJvdG90eXBlTWF4IiwicGlja0J5IiwibW9tZW50cyIsIm9yZGVyaW5nIiwiRHVyYXRpb24iLCJkdXJhdGlvbiIsInllYXJzIiwicXVhcnRlcnMiLCJxdWFydGVyIiwid2Vla3MiLCJkYXlzIiwibWlsbGlzZWNvbmRzIiwidW5pdEhhc0RlY2ltYWwiLCJwYXJzZUZsb2F0IiwiaXNEdXJhdGlvblZhbGlkIiwiX21pbGxpc2Vjb25kcyIsIl9kYXlzIiwiX21vbnRocyIsIl9kYXRhIiwiX2J1YmJsZSIsImlzRHVyYXRpb24iLCJhYnNSb3VuZCIsInJvdW5kIiwib2Zmc2V0Iiwic2VwYXJhdG9yIiwidXRjT2Zmc2V0Iiwic2lnbiIsIm9mZnNldEZyb21TdHJpbmciLCJjaHVua09mZnNldCIsIm1hdGNoZXIiLCJtYXRjaGVzIiwicGFydHMiLCJjbG9uZVdpdGhPZmZzZXQiLCJtb2RlbCIsImRpZmYiLCJjbG9uZSIsInNldFRpbWUiLCJsb2NhbCIsImdldERhdGVPZmZzZXQiLCJnZXRUaW1lem9uZU9mZnNldCIsImlzVXRjIiwiYXNwTmV0UmVnZXgiLCJpc29SZWdleCIsImNyZWF0ZUR1cmF0aW9uIiwicmV0IiwiZGlmZlJlcyIsImJhc2UiLCJwYXJzZUlzbyIsImlzQmVmb3JlIiwicG9zaXRpdmVNb21lbnRzRGlmZmVyZW5jZSIsImlucCIsImlzQWZ0ZXIiLCJjcmVhdGVBZGRlciIsImRpcmVjdGlvbiIsInBlcmlvZCIsInRtcCIsImFkZFN1YnRyYWN0IiwiaXNBZGRpbmciLCJpbnZhbGlkIiwic3VidHJhY3QiLCJuZXdMb2NhbGVEYXRhIiwiZGVmYXVsdEZvcm1hdCIsImRlZmF1bHRGb3JtYXRVdGMiLCJsYW5nIiwiYWRkV2Vla1llYXJGb3JtYXRUb2tlbiIsImdldFNldFdlZWtZZWFySGVscGVyIiwid2Vla3NUYXJnZXQiLCJzZXRXZWVrQWxsIiwiZGF5T2ZZZWFyRGF0YSIsImlzb1dlZWtZZWFyIiwiX2RheU9mTW9udGhPcmRpbmFsUGFyc2UiLCJfb3JkaW5hbFBhcnNlIiwiX2RheU9mTW9udGhPcmRpbmFsUGFyc2VMZW5pZW50IiwiZ2V0U2V0RGF5T2ZNb250aCIsImdldFNldE1pbnV0ZSIsImdldFNldFNlY29uZCIsInBhcnNlTXMiLCJnZXRTZXRNaWxsaXNlY29uZCIsInByb3RvIiwicHJlUGFyc2VQb3N0Rm9ybWF0IiwidGltZSIsImZvcm1hdHMiLCJzb2QiLCJzdGFydE9mIiwiY2FsZW5kYXJGb3JtYXQiLCJhc0Zsb2F0IiwidGhhdCIsInpvbmVEZWx0YSIsImRlbHRhIiwiYW5jaG9yMiIsImFkanVzdCIsIndob2xlTW9udGhEaWZmIiwiYW5jaG9yIiwiZW5kT2YiLCJpbnB1dFN0cmluZyIsInBvc3Rmb3JtYXQiLCJ3aXRob3V0U3VmZml4IiwiaHVtYW5pemUiLCJmcm9tTm93IiwidG9Ob3ciLCJpbnZhbGlkQXQiLCJsb2NhbElucHV0IiwiaXNCZXR3ZWVuIiwiaW5jbHVzaXZpdHkiLCJpc1NhbWUiLCJpbnB1dE1zIiwiaXNTYW1lT3JBZnRlciIsImlzU2FtZU9yQmVmb3JlIiwicGFyc2luZ0ZsYWdzIiwicHJpb3JpdGl6ZWQiLCJ1bml0c09iaiIsInUiLCJnZXRQcmlvcml0aXplZFVuaXRzIiwiaXNvV2Vla2RheSIsInRvQXJyYXkiLCJ0b09iamVjdCIsInRvRGF0ZSIsInRvSVNPU3RyaW5nIiwiaW5zcGVjdCIsInpvbmUiLCJpc0xvY2FsIiwicHJlZml4Iiwic3VmZml4IiwidG9KU09OIiwidW5peCIsImNyZWF0aW9uRGF0YSIsImlzb1dlZWsiLCJpc29XZWVrcyIsIndlZWtJbmZvIiwiaXNvV2Vla3NJblllYXIiLCJwYXJzZVdlZWtkYXkiLCJwYXJzZUlzb1dlZWtkYXkiLCJrZWVwTG9jYWxUaW1lIiwia2VlcE1pbnV0ZXMiLCJsb2NhbEFkanVzdCIsIl9jaGFuZ2VJblByb2dyZXNzIiwicGFyc2Vab25lIiwidFpvbmUiLCJoYXNBbGlnbmVkSG91ck9mZnNldCIsImlzRFNUIiwiaXNVdGNPZmZzZXQiLCJ6b25lQWJiciIsInpvbmVOYW1lIiwiZGF0ZXMiLCJpc0RTVFNoaWZ0ZWQiLCJfaXNEU1RTaGlmdGVkIiwicHJvdG8kMSIsImdldCQxIiwiaW5kZXgiLCJmaWVsZCIsInNldHRlciIsImxpc3RNb250aHNJbXBsIiwib3V0IiwibGlzdFdlZWtkYXlzSW1wbCIsImxvY2FsZVNvcnRlZCIsInNoaWZ0IiwiX2NhbGVuZGFyIiwiX2xvbmdEYXRlRm9ybWF0IiwiZm9ybWF0VXBwZXIiLCJfaW52YWxpZERhdGUiLCJfb3JkaW5hbCIsImlzRnV0dXJlIiwiX3JlbGF0aXZlVGltZSIsInBhc3RGdXR1cmUiLCJzb3VyY2UiLCJpc0Zvcm1hdCIsIl9tb250aHNTaG9ydCIsIl9tb250aHNQYXJzZUV4YWN0IiwiZmlyc3REYXlPZlllYXIiLCJmaXJzdERheU9mV2VlayIsIl93ZWVrZGF5cyIsIl93ZWVrZGF5c01pbiIsIl93ZWVrZGF5c1Nob3J0IiwiX3dlZWtkYXlzUGFyc2VFeGFjdCIsIl9mdWxsV2Vla2RheXNQYXJzZSIsImNoYXJBdCIsImlzTG93ZXIiLCJsYW5nRGF0YSIsIm1hdGhBYnMiLCJhZGRTdWJ0cmFjdCQxIiwiYWJzQ2VpbCIsImRheXNUb01vbnRocyIsIm1vbnRoc1RvRGF5cyIsIm1ha2VBcyIsImFsaWFzIiwiYXMiLCJhc01pbGxpc2Vjb25kcyIsImFzU2Vjb25kcyIsImFzTWludXRlcyIsImFzSG91cnMiLCJhc0RheXMiLCJhc1dlZWtzIiwiYXNNb250aHMiLCJhc1llYXJzIiwibWFrZUdldHRlciIsInRocmVzaG9sZHMiLCJzdWJzdGl0dXRlVGltZUFnbyIsImFicyQxIiwidG9JU09TdHJpbmckMSIsIlkiLCJEIiwidG90YWwiLCJwcm90byQyIiwibW9udGhzRnJvbURheXMiLCJ3aXRoU3VmZml4IiwicG9zTmVnRHVyYXRpb24iLCJyZWxhdGl2ZVRpbWUkMSIsInRvSXNvU3RyaW5nIiwidmVyc2lvbiIsInVwZGF0ZUxvY2FsZSIsInJlbGF0aXZlVGltZVJvdW5kaW5nIiwicm91bmRpbmdGdW5jdGlvbiIsInJlbGF0aXZlVGltZVRocmVzaG9sZCIsInRocmVzaG9sZCIsImxpbWl0IiwibXlNb21lbnQiLCJmYWN0b3J5IiwiRElTUExBWV9GT1JNQVQiLCJJU09fRk9STUFUIiwiSVNPX01PTlRIX0ZPUk1BVCIsIlNUQVJUX0RBVEUiLCJFTkRfREFURSIsIkhPUklaT05UQUxfT1JJRU5UQVRJT04iLCJWRVJUSUNBTF9PUklFTlRBVElPTiIsIlZFUlRJQ0FMX1NDUk9MTEFCTEUiLCJBTkNIT1JfTEVGVCIsIkFOQ0hPUl9SSUdIVCIsIkRBWV9TSVpFIiwiQkxPQ0tFRF9NT0RJRklFUiIsIldFRUtEQVlTIiwid2FybmluZyIsImNvbmRpdGlvbiIsImYiLCJlcnJvciIsImFyZ0luZGV4IiwiZnJhbWVzVG9Qb3AiLCJmb2N1c1N0YXJ0RGF0ZSIsImp1bXBUb1ByZXZNb250aCIsImp1bXBUb05leHRNb250aCIsInBhZ2VVcFBhZ2VEb3duIiwiaG9tZUVuZCIsImVzY2FwZSIsIm1vdmVGb2N1c0J5T25lRGF5IiwibW92ZUZvY3VzQnlPbmVXZWVrIiwicmV0dXJuRm9jdXNUb0lucHV0Iiwia2V5Ym9hcmROYXZpZ2F0aW9uSW5zdHJ1Y3Rpb25zIiwiY2hvb3NlQXZhaWxhYmxlU3RhcnREYXRlIiwiX3JlZiIsIlN0cmluZyIsImNob29zZUF2YWlsYWJsZUVuZERhdGUiLCJfcmVmMiIsImNob29zZUF2YWlsYWJsZURhdGUiLCJfcmVmMyIsImRhdGVJc1VuYXZhaWxhYmxlIiwiX3JlZjQiLCJjbG9zZURhdGVQaWNrZXIiLCJjbGVhckRhdGUiLCJjbGVhckRhdGVzIiwia2V5Ym9hcmRTaG9ydGN1dHMiLCJzaG93S2V5Ym9hcmRTaG9ydGN1dHNQYW5lbCIsImhpZGVLZXlib2FyZFNob3J0Y3V0c1BhbmVsIiwib3BlblRoaXNQYW5lbCIsImVudGVyS2V5IiwibGVmdEFycm93UmlnaHRBcnJvdyIsInVwQXJyb3dEb3duQXJyb3ciLCJxdWVzdGlvbk1hcmsiLCJzZWxlY3RGb2N1c2VkRGF0ZSIsIm1vdmVGb2N1c0J5T25lTW9udGgiLCJtb3ZlRm9jdXN0b1N0YXJ0QW5kRW5kT2ZXZWVrIiwiRGF0ZVJhbmdlUGlja2VyUGhyYXNlcyIsIkRhdGVSYW5nZVBpY2tlcklucHV0UGhyYXNlcyIsIlNpbmdsZURhdGVQaWNrZXJQaHJhc2VzIiwiU2luZ2xlRGF0ZVBpY2tlcklucHV0UGhyYXNlcyIsIkRheVBpY2tlclBocmFzZXMiLCJEYXlQaWNrZXJLZXlib2FyZFNob3J0Y3V0c1BocmFzZXMiLCJEYXlQaWNrZXJOYXZpZ2F0aW9uUGhyYXNlcyIsIkNhbGVuZGFyRGF5UGhyYXNlcyIsImRlZmF1bHRQaHJhc2VzIiwicmVkdWNlIiwicGhyYXNlcyIsIl9vYmplY3QyIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJfZGVmaW5lUHJvcGVydHkiLCJfcHJvcFR5cGVzMiIsIm9uZU9mVHlwZSIsIm5vZGUiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiaGFzT3duIiwiY2xhc3NOYW1lcyIsImNsYXNzZXMiLCJhcmdUeXBlIiwiaW5uZXIiLCJkZWZhdWx0IiwibW9tZW50IiwibW9tZW50VmFsaWRhdGlvbldyYXBwZXIiLCJjb3JlIiwibW9tZW50T2JqIiwiY3JlYXRlTW9tZW50Q2hlY2tlciIsImlzVmFsaWRNb21lbnQiLCJtb21lbnRTdHJpbmciLCJzdHIiLCJtb21lbnREdXJhdGlvbk9iaiIsIl9wcm9wVHlwZXMiLCJfY29uc3RhbnRzIiwib25lT2YiLCJ3aW5kb3ciLCJEb2N1bWVudFRvdWNoIiwiZG9jdW1lbnQiLCJuYXZpZ2F0b3IiLCJtYXhUb3VjaFBvaW50cyIsIm1zTWF4VG91Y2hQb2ludHMiLCJjdXJyZW50Rm9ybWF0IiwiZGF0ZU9iaiIsIl9tb21lbnQyIiwiX3RvTW9tZW50T2JqZWN0MiIsImRhdGVTdHJpbmciLCJjdXN0b21Gb3JtYXQiLCJkYXRlRm9ybWF0cyIsIl9tb21lbnQiLCJzaGFsbG93RXF1YWwiLCJpbnN0YW5jZSIsIm5leHRQcm9wcyIsIm5leHRTdGF0ZSIsInByb3BzIiwic3RhdGUiLCJfaXNCZWZvcmVEYXkyIiwiYVllYXIiLCJhTW9udGgiLCJiWWVhciIsImJNb250aCIsImlzU2FtZVllYXIiLCJpc1NhbWVNb250aCIsIl9pc1NhbWVEYXkyIiwic3Vic2NyaXB0aW9uU2hhcGUiLCJzaGFwZSIsInRyeVN1YnNjcmliZSIsImlzUmVxdWlyZWQiLCJ0cnlVbnN1YnNjcmliZSIsIm5vdGlmeU5lc3RlZFN1YnMiLCJpc1N1YnNjcmliZWQiLCJzdG9yZVNoYXBlIiwic3Vic2NyaWJlIiwiZGlzcGF0Y2giLCJnZXRTdGF0ZSIsIl9jbGFzc0NhbGxDaGVjayIsIkNvbnN0cnVjdG9yIiwiVHlwZUVycm9yIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJzZWxmIiwiUmVmZXJlbmNlRXJyb3IiLCJfaW5oZXJpdHMiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJjb25zdHJ1Y3RvciIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiY3JlYXRlUHJvdmlkZXIiLCJfUHJvdmlkZXIkY2hpbGRDb250ZXgiLCJzdG9yZUtleSIsInN1YktleSIsInN1YnNjcmlwdGlvbktleSIsIlByb3ZpZGVyIiwiX0NvbXBvbmVudCIsImNvbnRleHQiLCJfdGhpcyIsInN0b3JlIiwiZ2V0Q2hpbGRDb250ZXh0IiwicmVuZGVyIiwib25seSIsImNoaWxkcmVuIiwicHJvcFR5cGVzIiwiZWxlbWVudCIsImNoaWxkQ29udGV4dFR5cGVzIiwiZGlzcGxheU5hbWUiLCJudWxsTGlzdGVuZXJzIiwibm90aWZ5IiwiU3Vic2NyaXB0aW9uIiwicGFyZW50U3ViIiwib25TdGF0ZUNoYW5nZSIsInVuc3Vic2NyaWJlIiwibGlzdGVuZXJzIiwiYWRkTmVzdGVkU3ViIiwibGlzdGVuZXIiLCJCb29sZWFuIiwiY3VycmVudCIsImNsZWFyIiwiX2V4dGVuZHMiLCJhc3NpZ24iLCJ0YXJnZXQiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJob3RSZWxvYWRpbmdWZXJzaW9uIiwiZHVtbXlTdGF0ZSIsIm5vb3AiLCJtYWtlU2VsZWN0b3JTdGF0ZWZ1bCIsInNvdXJjZVNlbGVjdG9yIiwic2VsZWN0b3IiLCJydW4iLCJzaG91bGRDb21wb25lbnRVcGRhdGUiLCJjb25uZWN0QWR2YW5jZWQiLCJzZWxlY3RvckZhY3RvcnkiLCJfY29udGV4dFR5cGVzIiwiX2NoaWxkQ29udGV4dFR5cGVzIiwiX3JlZiRnZXREaXNwbGF5TmFtZSIsImdldERpc3BsYXlOYW1lIiwiX3JlZiRtZXRob2ROYW1lIiwibWV0aG9kTmFtZSIsIl9yZWYkcmVuZGVyQ291bnRQcm9wIiwicmVuZGVyQ291bnRQcm9wIiwiX3JlZiRzaG91bGRIYW5kbGVTdGF0Iiwic2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzIiwiX3JlZiRzdG9yZUtleSIsIl9yZWYkd2l0aFJlZiIsIndpdGhSZWYiLCJjb25uZWN0T3B0aW9ucyIsImNvbnRleHRUeXBlcyIsIldyYXBwZWRDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5Iiwid3JhcHBlZENvbXBvbmVudE5hbWUiLCJzZWxlY3RvckZhY3RvcnlPcHRpb25zIiwiQ29ubmVjdCIsInJlbmRlckNvdW50IiwicHJvcHNNb2RlIiwic2V0V3JhcHBlZEluc3RhbmNlIiwiaW5pdFNlbGVjdG9yIiwiaW5pdFN1YnNjcmlwdGlvbiIsInN1YnNjcmlwdGlvbiIsImNvbXBvbmVudERpZE1vdW50IiwiZm9yY2VVcGRhdGUiLCJjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJnZXRXcmFwcGVkSW5zdGFuY2UiLCJ3cmFwcGVkSW5zdGFuY2UiLCJyZWYiLCJjb21wb25lbnREaWRVcGRhdGUiLCJub3RpZnlOZXN0ZWRTdWJzT25Db21wb25lbnREaWRVcGRhdGUiLCJzZXRTdGF0ZSIsImFkZEV4dHJhUHJvcHMiLCJ3aXRoRXh0cmFzIiwiaXMiLCJvYmpBIiwib2JqQiIsImtleXNBIiwia2V5c0IiLCJmcmVlU2VsZiIsIm9iamVjdFByb3RvIiwiZ2V0UHJvdG90eXBlT2YiLCJ0cmFuc2Zvcm0iLCJmdW5jUHJvdG8iLCJmdW5jVG9TdHJpbmciLCJ3cmFwTWFwVG9Qcm9wc0NvbnN0YW50IiwiZ2V0Q29uc3RhbnQiLCJvcHRpb25zIiwiY29uc3RhbnQiLCJjb25zdGFudFNlbGVjdG9yIiwiZGVwZW5kc09uT3duUHJvcHMiLCJnZXREZXBlbmRzT25Pd25Qcm9wcyIsIm1hcFRvUHJvcHMiLCJ3cmFwTWFwVG9Qcm9wc0Z1bmMiLCJwcm94eSIsInN0YXRlT3JEaXNwYXRjaCIsIm93blByb3BzIiwibWFwRGlzcGF0Y2hUb1Byb3BzIiwibWFwU3RhdGVUb1Byb3BzIiwiZGVmYXVsdE1lcmdlUHJvcHMiLCJzdGF0ZVByb3BzIiwiZGlzcGF0Y2hQcm9wcyIsIm1lcmdlUHJvcHMiLCJwdXJlIiwiYXJlTWVyZ2VkUHJvcHNFcXVhbCIsImhhc1J1bk9uY2UiLCJtZXJnZWRQcm9wcyIsIm5leHRNZXJnZWRQcm9wcyIsIndyYXBNZXJnZVByb3BzRnVuYyIsImltcHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkiLCJwdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeSIsImFyZVN0YXRlc0VxdWFsIiwiYXJlT3duUHJvcHNFcXVhbCIsImFyZVN0YXRlUHJvcHNFcXVhbCIsImhhc1J1bkF0TGVhc3RPbmNlIiwiaGFuZGxlU3Vic2VxdWVudENhbGxzIiwibmV4dE93blByb3BzIiwibmV4dFN0YXRlUHJvcHMiLCJzdGF0ZVByb3BzQ2hhbmdlZCIsInByb3BzQ2hhbmdlZCIsInN0YXRlQ2hhbmdlZCIsImZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkiLCJpbml0TWFwU3RhdGVUb1Byb3BzIiwiaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyIsImluaXRNZXJnZVByb3BzIiwiZmFjdG9yaWVzIiwicmVzdWx0Iiwic3RyaWN0RXF1YWwiLCJfcmVmJGNvbm5lY3RIT0MiLCJjb25uZWN0SE9DIiwiX3JlZiRtYXBTdGF0ZVRvUHJvcHNGIiwibWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzIiwiX3JlZiRtYXBEaXNwYXRjaFRvUHJvIiwibWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzIiwiX3JlZiRtZXJnZVByb3BzRmFjdG9yIiwibWVyZ2VQcm9wc0ZhY3RvcmllcyIsIl9yZWYkc2VsZWN0b3JGYWN0b3J5IiwiX3JlZjIkcHVyZSIsIl9yZWYyJGFyZVN0YXRlc0VxdWFsIiwiX3JlZjIkYXJlT3duUHJvcHNFcXVhIiwiX3JlZjIkYXJlU3RhdGVQcm9wc0VxIiwiX3JlZjIkYXJlTWVyZ2VkUHJvcHNFIiwiZXh0cmFPcHRpb25zIiwiY2hlY2tEQ0UiLCJfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18iLCJlcnIiLCJnIiwiRVZFTlRfSEFORExFUlNfS0VZIiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2ZW50TmFtZSIsIl9UYXJnZXRFdmVudEhhbmRsZXJzMiIsIm5vcm1hbGl6ZWRFdmVudE9wdGlvbnMiLCJfbm9ybWFsaXplRXZlbnRPcHRpb25zMiIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJ1bnN1YnNjcmliZUZuIiwiZGVmaW5lUHJvcGVydGllcyIsImltcGxlbWVudGF0aW9uIiwiZ2V0UG9seWZpbGwiLCJzaGltIiwicG9seWZpbGwiLCJoYXNTeW1ib2xzIiwidG9TdHIiLCJjb25jYXQiLCJvcmlnRGVmaW5lUHJvcGVydHkiLCJzdXBwb3J0c0Rlc2NyaXB0b3JzIiwiXyIsImFyZVByb3BlcnR5RGVzY3JpcHRvcnNTdXBwb3J0ZWQiLCJwcmVkaWNhdGUiLCJwcmVkaWNhdGVzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiaXNBYnNvbHV0ZSIsInBhdGhuYW1lIiwic3BsaWNlT25lIiwibGlzdCIsInBvcCIsImhhc1RyYWlsaW5nU2xhc2giLCJ0b1BhcnRzIiwiZnJvbVBhcnRzIiwiaXNUb0FicyIsImlzRnJvbUFicyIsIm11c3RFbmRBYnMiLCJsYXN0IiwidXAiLCJwYXJ0IiwidW5zaGlmdCIsInZhbHVlRXF1YWwiLCJldmVyeSIsIml0ZW0iLCJhVmFsdWUiLCJiVmFsdWUiLCJtZXNzYWdlIiwiYWRkTGVhZGluZ1NsYXNoIiwicGF0aCIsInN0cmlwTGVhZGluZ1NsYXNoIiwic3RyaXBCYXNlbmFtZSIsImhhc0Jhc2VuYW1lIiwic3RyaXBUcmFpbGluZ1NsYXNoIiwiY3JlYXRlUGF0aCIsImxvY2F0aW9uIiwic2VhcmNoIiwiaGFzaCIsImNyZWF0ZUxvY2F0aW9uIiwiY3VycmVudExvY2F0aW9uIiwiaGFzaEluZGV4Iiwic2VhcmNoSW5kZXgiLCJwYXJzZVBhdGgiLCJkZWNvZGVVUkkiLCJVUklFcnJvciIsImNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyIiwicHJvbXB0Iiwic2V0UHJvbXB0IiwibmV4dFByb21wdCIsImNvbmZpcm1UcmFuc2l0aW9uVG8iLCJhY3Rpb24iLCJnZXRVc2VyQ29uZmlybWF0aW9uIiwiYXBwZW5kTGlzdGVuZXIiLCJpc0FjdGl2ZSIsImZpbHRlciIsIm5vdGlmeUxpc3RlbmVycyIsIl9sZW4iLCJfa2V5IiwiY2FuVXNlRE9NIiwiY3JlYXRlRWxlbWVudCIsImdldENvbmZpcm1hdGlvbiIsImNvbmZpcm0iLCJnZXRIaXN0b3J5U3RhdGUiLCJoaXN0b3J5IiwiY3JlYXRlQnJvd3Nlckhpc3RvcnkiLCJ1YSIsImdsb2JhbEhpc3RvcnkiLCJjYW5Vc2VIaXN0b3J5IiwidXNlckFnZW50IiwibmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIiLCJfcHJvcHMiLCJfcHJvcHMkZm9yY2VSZWZyZXNoIiwiZm9yY2VSZWZyZXNoIiwiX3Byb3BzJGdldFVzZXJDb25maXJtIiwiX3Byb3BzJGtleUxlbmd0aCIsImtleUxlbmd0aCIsImJhc2VuYW1lIiwiZ2V0RE9NTG9jYXRpb24iLCJoaXN0b3J5U3RhdGUiLCJfd2luZG93JGxvY2F0aW9uIiwiY3JlYXRlS2V5IiwicmFuZG9tIiwidHJhbnNpdGlvbk1hbmFnZXIiLCJoYW5kbGVQb3BTdGF0ZSIsImV2ZW50IiwiaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudCIsImhhbmRsZVBvcCIsImhhbmRsZUhhc2hDaGFuZ2UiLCJmb3JjZU5leHRQb3AiLCJvayIsImZyb21Mb2NhdGlvbiIsInRvTG9jYXRpb24iLCJ0b0luZGV4IiwiYWxsS2V5cyIsImZyb21JbmRleCIsImdvIiwicmV2ZXJ0UG9wIiwiaW5pdGlhbExvY2F0aW9uIiwiY3JlYXRlSHJlZiIsImxpc3RlbmVyQ291bnQiLCJjaGVja0RPTUxpc3RlbmVycyIsImlzQmxvY2tlZCIsImhyZWYiLCJwdXNoU3RhdGUiLCJwcmV2SW5kZXgiLCJuZXh0S2V5cyIsInJlcGxhY2VTdGF0ZSIsImdvQmFjayIsImdvRm9yd2FyZCIsImJsb2NrIiwidW5ibG9jayIsImxpc3RlbiIsInVubGlzdGVuIiwiSGFzaFBhdGhDb2RlcnMiLCJoYXNoYmFuZyIsImVuY29kZVBhdGgiLCJkZWNvZGVQYXRoIiwibm9zbGFzaCIsInNsYXNoIiwic3RyaXBIYXNoIiwidXJsIiwiZ2V0SGFzaFBhdGgiLCJzdWJzdHJpbmciLCJyZXBsYWNlSGFzaFBhdGgiLCJjcmVhdGVIYXNoSGlzdG9yeSIsIl9wcm9wcyRoYXNoVHlwZSIsImhhc2hUeXBlIiwiX0hhc2hQYXRoQ29kZXJzJGhhc2hUIiwiaWdub3JlUGF0aCIsImVuY29kZWRQYXRoIiwicHJldkxvY2F0aW9uIiwiYWxsUGF0aHMiLCJsYXN0SW5kZXhPZiIsImJhc2VUYWciLCJxdWVyeVNlbGVjdG9yIiwiZ2V0QXR0cmlidXRlIiwicHVzaEhhc2hQYXRoIiwibmV4dFBhdGhzIiwiY2xhbXAiLCJsb3dlckJvdW5kIiwidXBwZXJCb3VuZCIsImNyZWF0ZU1lbW9yeUhpc3RvcnkiLCJfcHJvcHMkaW5pdGlhbEVudHJpZXMiLCJpbml0aWFsRW50cmllcyIsIl9wcm9wcyRpbml0aWFsSW5kZXgiLCJpbml0aWFsSW5kZXgiLCJlbnRyaWVzIiwiZW50cnkiLCJuZXh0SW5kZXgiLCJuZXh0RW50cmllcyIsImNhbkdvIiwiX1JlYWN0JENvbXBvbmVudCIsIlJvdXRlciIsIl90ZW1wIiwiY29tcHV0ZU1hdGNoIiwicm91dGVyIiwicm91dGUiLCJwYXJhbXMiLCJpc0V4YWN0IiwiY29tcG9uZW50V2lsbE1vdW50IiwiX3RoaXMyIiwiQ2hpbGRyZW4iLCJjb3VudCIsIkNvbXBvbmVudCIsIkJyb3dzZXJSb3V0ZXIiLCJib29sIiwiSGFzaFJvdXRlciIsImlzTW9kaWZpZWRFdmVudCIsIm1ldGFLZXkiLCJhbHRLZXkiLCJjdHJsS2V5Iiwic2hpZnRLZXkiLCJMaW5rIiwiaGFuZGxlQ2xpY2siLCJvbkNsaWNrIiwiZGVmYXVsdFByZXZlbnRlZCIsImJ1dHRvbiIsInByZXZlbnREZWZhdWx0IiwiX3RoaXMkcHJvcHMiLCJpbm5lclJlZiIsImRlZmF1bHRQcm9wcyIsIk1lbW9yeVJvdXRlciIsInBhdHRlcm5DYWNoZSIsImNhY2hlQ291bnQiLCJwYXR0ZXJuIiwiY2FjaGVLZXkiLCJlbmQiLCJzZW5zaXRpdmUiLCJjYWNoZSIsImNvbXBpbGVkUGF0dGVybiIsInJlIiwicGFyZW50IiwiX29wdGlvbnMiLCJfb3B0aW9ucyRleGFjdCIsImV4YWN0IiwiX29wdGlvbnMkc3RyaWN0IiwiX29wdGlvbnMkc2Vuc2l0aXZlIiwiX2NvbXBpbGVQYXRoIiwibWVtbyIsIlJvdXRlIiwiY29tcHV0ZWRNYXRjaCIsImNvbXBvbmVudCIsIm5leHRDb250ZXh0IiwiX2NvbnRleHQkcm91dGVyIiwic3RhdGljQ29udGV4dCIsIl90eXBlb2YiLCJpdGVyYXRvciIsImFjdGl2ZUNsYXNzTmFtZSIsImNsYXNzTmFtZSIsImFjdGl2ZVN0eWxlIiwic3R5bGUiLCJnZXRJc0FjdGl2ZSIsImFyaWFDdXJyZW50IiwicmVzdCIsImVzY2FwZWRQYXRoIiwiUHJvbXB0IiwiZW5hYmxlIiwiZGlzYWJsZSIsIndoZW4iLCJjb21waWxlZEdlbmVyYXRvciIsImNvbXBpbGUiLCJnZW5lcmF0b3IiLCJwcmV0dHkiLCJSZWRpcmVjdCIsImlzU3RhdGljIiwicGVyZm9ybSIsInByZXZQcm9wcyIsInByZXZUbyIsIm5leHRUbyIsImNvbXB1dGVUbyIsImFkZEJhc2VuYW1lIiwiU3RhdGljUm91dGVyIiwiaGFuZGxlUHVzaCIsImhhbmRsZVJlcGxhY2UiLCJfdGhpcyRwcm9wczIiLCJoYW5kbGVMaXN0ZW4iLCJoYW5kbGVCbG9jayIsIlN3aXRjaCIsImNoaWxkIiwiaXNWYWxpZEVsZW1lbnQiLCJfZWxlbWVudCRwcm9wcyIsInBhdGhQcm9wIiwiY2xvbmVFbGVtZW50IiwiQyIsIndyYXBwZWRDb21wb25lbnRSZWYiLCJyZW1haW5pbmdQcm9wcyIsInJvdXRlQ29tcG9uZW50UHJvcHMiLCJpc2FycmF5IiwicGF0aFRvUmVnZXhwIiwicGFyc2UiLCJ0b2tlbnNUb0Z1bmN0aW9uIiwidG9rZW5zVG9SZWdFeHAiLCJQQVRIX1JFR0VYUCIsImRlZmF1bHREZWxpbWl0ZXIiLCJkZWxpbWl0ZXIiLCJlc2NhcGVkIiwiY2FwdHVyZSIsImdyb3VwIiwibW9kaWZpZXIiLCJhc3RlcmlzayIsInBhcnRpYWwiLCJyZXBlYXQiLCJvcHRpb25hbCIsImVzY2FwZUdyb3VwIiwiZXNjYXBlU3RyaW5nIiwiZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5IiwiZW5jb2RlVVJJIiwiY2hhckNvZGVBdCIsIm9wdHMiLCJlbmNvZGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJzZWdtZW50IiwiYXR0YWNoS2V5cyIsImVuZHNXaXRoRGVsaW1pdGVyIiwiZ3JvdXBzIiwicmVnZXhwVG9SZWdleHAiLCJhcnJheVRvUmVnZXhwIiwic3RyaW5nVG9SZWdleHAiLCIwIiwiMTYiLCIzIiwiNzEiLCJfY3JlYXRlQ2xhc3MiLCJkZXNjcmlwdG9yIiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwiX3JlYWN0MiIsIl9jb25zb2xpZGF0ZWRFdmVudHMiLCJvbk91dHNpZGVDbGljayIsIk91dHNpZGVDbGlja0hhbmRsZXIiLCJjbGlja0hhbmRsZSIsImNoaWxkTm9kZSIsImNvbnRhaW5zIiwidHlwZSIsIm51bWJlck9mTW9udGhzIiwiZW5hYmxlT3V0c2lkZURheXMiLCJmaXJzdERheU9mRmlyc3RNb250aCIsImxhc3REYXlPZkxhc3RNb250aCIsIl9pc0FmdGVyRGF5MiIsImNhbGN1bGF0ZURpbWVuc2lvbiIsIl9yZWFjdEFkZG9uc1NoYWxsb3dDb21wYXJlMiIsIl9yZWFjdERvbTIiLCJfYWlyYm5iUHJvcFR5cGVzIiwiX2NsYXNzbmFtZXMyIiwiX3Rocm90dGxlMiIsIl9pc1RvdWNoRGV2aWNlMiIsIl9kZWZhdWx0UGhyYXNlcyIsIl9nZXRQaHJhc2VQcm9wVHlwZXMyIiwiX091dHNpZGVDbGlja0hhbmRsZXIyIiwiX0NhbGVuZGFyTW9udGhHcmlkMiIsIl9EYXlQaWNrZXJOYXZpZ2F0aW9uMiIsIl9EYXlQaWNrZXJLZXlib2FyZFNob3J0Y3V0cyIsIl9EYXlQaWNrZXJLZXlib2FyZFNob3J0Y3V0czIiLCJfZ2V0VHJhbnNmb3JtU3R5bGVzMiIsIl9nZXRDYWxlbmRhck1vbnRoV2lkdGgyIiwiX2dldEFjdGl2ZUVsZW1lbnQyIiwiX2lzRGF5VmlzaWJsZTIiLCJfU2Nyb2xsYWJsZU9yaWVudGF0aW9uU2hhcGUyIiwiX0RheU9mV2Vla1NoYXBlMiIsImZvcmJpZEV4dHJhUHJvcHMiLCJvcmllbnRhdGlvbiIsIndpdGhQb3J0YWwiLCJoaWRkZW4iLCJpbml0aWFsVmlzaWJsZU1vbnRoIiwicmVuZGVyQ2FsZW5kYXJJbmZvIiwiZGF5U2l6ZSIsIm5vbk5lZ2F0aXZlSW50ZWdlciIsImlzUlRMIiwibmF2UHJldiIsIm5hdk5leHQiLCJvblByZXZNb250aENsaWNrIiwib25OZXh0TW9udGhDbGljayIsIm9uTXVsdGlwbHlTY3JvbGxhYmxlTW9udGhzIiwicmVuZGVyTW9udGgiLCJtb2RpZmllcnMiLCJyZW5kZXJEYXkiLCJvbkRheUNsaWNrIiwib25EYXlNb3VzZUVudGVyIiwib25EYXlNb3VzZUxlYXZlIiwiaXNGb2N1c2VkIiwiZ2V0Rmlyc3RGb2N1c2FibGVEYXkiLCJvbkJsdXIiLCJzaG93S2V5Ym9hcmRTaG9ydGN1dHMiLCJtb250aEZvcm1hdCIsImFwcGx5VHJhbnNmb3JtU3R5bGVzIiwiZWwiLCJvcGFjaXR5IiwidHJhbnNmb3JtU3R5bGVzIiwic3R5bGVLZXkiLCJheGlzIiwiYm9yZGVyQm94Iiwid2l0aE1hcmdpbiIsImF4aXNTdGFydCIsImF4aXNFbmQiLCJnZXRDb21wdXRlZFN0eWxlIiwib2Zmc2V0V2lkdGgiLCJvZmZzZXRIZWlnaHQiLCJzaXplIiwiZ2V0TW9udGhIZWlnaHQiLCJjYXB0aW9uIiwiZ3JpZCIsIkRheVBpY2tlciIsImN1cnJlbnRNb250aCIsImZvY3VzZWREYXRlIiwidHJhbnNsYXRpb25WYWx1ZSIsImlzSG9yaXpvbnRhbCIsImhhc1NldEluaXRpYWxWaXNpYmxlTW9udGgiLCJtb250aFRyYW5zaXRpb24iLCJzY3JvbGxhYmxlTW9udGhNdWx0aXBsZSIsImNhbGVuZGFyTW9udGhXaWR0aCIsIm5leHRGb2N1c2VkRGF0ZSIsIm9uS2V5Ym9hcmRTaG9ydGN1dHNQYW5lbENsb3NlIiwiaXNUb3VjaERldmljZSIsIndpdGhNb3VzZUludGVyYWN0aW9ucyIsIm9uS2V5RG93biIsInNldENhbGVuZGFyTW9udGhHcmlkUmVmIiwibXVsdGlwbHlTY3JvbGxhYmxlTW9udGhzIiwidXBkYXRlU3RhdGVBZnRlck1vbnRoVHJhbnNpdGlvbiIsIm9wZW5LZXlib2FyZFNob3J0Y3V0c1BhbmVsIiwiY2xvc2VLZXlib2FyZFNob3J0Y3V0c1BhbmVsIiwiYWRqdXN0RGF5UGlja2VySGVpZ2h0IiwiaW5pdGlhbGl6ZURheVBpY2tlcldpZHRoIiwiZGF5UGlja2VyV2lkdGgiLCJnZXRGb2N1c2VkRGF5IiwicHJldlN0YXRlIiwiX3N0YXRlIiwiY29udGFpbmVyIiwiZm9jdXMiLCJzdG9wUHJvcGFnYXRpb24iLCJfc3RhdGUyIiwibmV3Rm9jdXNlZERhdGUiLCJkaWRUcmFuc2l0aW9uTW9udGgiLCJhY3RpdmVFbGVtZW50IiwibWF5YmVUcmFuc2l0aW9uUHJldk1vbnRoIiwibWF5YmVUcmFuc2l0aW9uTmV4dE1vbnRoIiwiaXNWZXJ0aWNhbCIsImdldE1vbnRoSGVpZ2h0QnlJbmRleCIsInRyYW5zbGF0ZUZpcnN0RGF5UGlja2VyRm9yQW5pbWF0aW9uIiwibmV3TW9udGgiLCJ0cmFuc2l0aW9uQ29udGFpbmVyIiwicXVlcnlTZWxlY3RvckFsbCIsImNhbGVuZGFyTW9udGhHcmlkIiwiX3N0YXRlMyIsIm5ld0ZvY3VzZWREYXRlTW9udGgiLCJmb2N1c2VkRGF0ZU1vbnRoIiwiaXNOZXdGb2N1c2VkRGF0ZVZpc2libGUiLCJfc3RhdGU0IiwiY2FsZW5kYXJNb250aEdyaWRET01Ob2RlIiwiZmluZERPTU5vZGUiLCJfcHJvcHMyIiwiX3N0YXRlNSIsImJvZHkiLCJibHVyIiwiaGVpZ2h0cyIsIm5ld01vbnRoSGVpZ2h0IiwibW9udGhIZWlnaHQiLCJoZWlnaHQiLCJjb252ZXJ0ZWRUcmFuc2xhdGlvblZhbHVlIiwidHJhbnNmb3JtVmFsdWUiLCJvbkNsb3NlQ2FsbEJhY2siLCJfcHJvcHMzIiwiX3Byb3BzNCIsInZlcnRpY2FsU2Nyb2xsYWJsZSIsImhvcml6b250YWxTdHlsZSIsImxlZnQiLCJ2ZXJ0aWNhbFN0eWxlIiwibWFyZ2luTGVmdCIsImhlYWRlciIsIndpZHRoIiwiX3RoaXMzIiwiX3N0YXRlNiIsImlzVG91Y2giLCJfcHJvcHM1IiwibnVtT2ZXZWVrSGVhZGVycyIsIndlZWtIZWFkZXJzIiwicmVuZGVyV2Vla0hlYWRlciIsImZpcnN0VmlzaWJsZU1vbnRoSW5kZXgiLCJkYXlQaWNrZXJDbGFzc05hbWVzIiwidHJhbnNpdGlvbkNvbnRhaW5lckNsYXNzZXMiLCJob3Jpem9udGFsV2lkdGgiLCJ2ZXJ0aWNhbEhlaWdodCIsImRheVBpY2tlclN0eWxlIiwibWFyZ2luVG9wIiwidHJhbnNpdGlvbkNvbnRhaW5lclN0eWxlIiwiaXNDYWxlbmRhck1vbnRoR3JpZEFuaW1hdGluZyIsInNob3VsZEZvY3VzRGF0ZSIsImtleWJvYXJkU2hvcnRjdXRCdXR0b25Mb2NhdGlvbiIsIkJPVFRPTV9SSUdIVCIsIlRPUF9MRUZUIiwiVE9QX1JJR0hUIiwicm9sZSIsIm9uTW91c2VVcCIsInRhYkluZGV4IiwicmVuZGVyTmF2aWdhdGlvbiIsImluaXRpYWxNb250aCIsImlzQW5pbWF0aW5nIiwib25Nb250aFRyYW5zaXRpb25FbmQiLCJidXR0b25Mb2NhdGlvbiIsIiRUeXBlRXJyb3IiLCIkZ09QRCIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsInRocm93VHlwZUVycm9yIiwiVGhyb3dUeXBlRXJyb3IiLCJjYWxsZWUiLCJjYWxsZWVUaHJvd3MiLCJnT1BEdGhyb3dzIiwiZ2V0UHJvdG8iLCJhc3luY0dlbkl0ZXJhdG9yIiwiVHlwZWRBcnJheSIsIlVpbnQ4QXJyYXkiLCJJTlRSSU5TSUNTIiwiQXJyYXlCdWZmZXIiLCJhc3luY0l0ZXJhdG9yIiwiQXRvbWljcyIsIkRhdGFWaWV3IiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiZXZhbCIsIkV2YWxFcnJvciIsIkZsb2F0MzJBcnJheSIsIkZsb2F0NjRBcnJheSIsIkludDhBcnJheSIsIkludDE2QXJyYXkiLCJJbnQzMkFycmF5IiwiTWFwIiwiTnVtYmVyIiwiUHJvbWlzZSIsInRoZW4iLCJhbGwiLCJyZWplY3QiLCJyZXNvbHZlIiwiUHJveHkiLCJSYW5nZUVycm9yIiwiUmVmbGVjdCIsIlNldCIsIlNoYXJlZEFycmF5QnVmZmVyIiwiU3ludGF4RXJyb3IiLCJVaW50OENsYW1wZWRBcnJheSIsIlVpbnQxNkFycmF5IiwiVWludDMyQXJyYXkiLCJXZWFrTWFwIiwiV2Vha1NldCIsIiRyZXBsYWNlIiwicmVQcm9wTmFtZSIsInJlRXNjYXBlQ2hhciIsInN0cmluZ1RvUGF0aCIsInF1b3RlIiwic3ViU3RyaW5nIiwiZ2V0QmFzZUludHJpbnNpYyIsImFsbG93TWlzc2luZyIsImRlc2MiLCJhZGRFeHBlbnNlIiwiZGVzY3JpcHRpb24iLCJub3RlIiwiYW1vdW50IiwiY3JlYXRlZEF0IiwiZXhwZW5zZSIsImlkIiwicmVtb3ZlRXhwZW5zZSIsImVkaXRFeHBlbnNlIiwidXBkYXRlcyIsInJhbmRvbVN0cmluZyIsIkFjdGlvblR5cGVzIiwiSU5JVCIsIlJFUExBQ0UiLCJQUk9CRV9VTktOT1dOX0FDVElPTiIsImlzUGxhaW5PYmplY3QiLCJjcmVhdGVTdG9yZSIsInJlZHVjZXIiLCJwcmVsb2FkZWRTdGF0ZSIsImVuaGFuY2VyIiwiY3VycmVudFJlZHVjZXIiLCJjdXJyZW50U3RhdGUiLCJjdXJyZW50TGlzdGVuZXJzIiwibmV4dExpc3RlbmVycyIsImlzRGlzcGF0Y2hpbmciLCJlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzIiwicmVwbGFjZVJlZHVjZXIiLCJuZXh0UmVkdWNlciIsIm9ic2VydmFibGUiLCJvdXRlclN1YnNjcmliZSIsIm9ic2VydmVyIiwib2JzZXJ2ZVN0YXRlIiwiZ2V0VW5kZWZpbmVkU3RhdGVFcnJvck1lc3NhZ2UiLCJhY3Rpb25UeXBlIiwiY29tYmluZVJlZHVjZXJzIiwicmVkdWNlcnMiLCJyZWR1Y2VyS2V5cyIsImZpbmFsUmVkdWNlcnMiLCJzaGFwZUFzc2VydGlvbkVycm9yIiwiZmluYWxSZWR1Y2VyS2V5cyIsImFzc2VydFJlZHVjZXJTaGFwZSIsImhhc0NoYW5nZWQiLCJwcmV2aW91c1N0YXRlRm9yS2V5IiwibmV4dFN0YXRlRm9yS2V5IiwiZXJyb3JNZXNzYWdlIiwiYmluZEFjdGlvbkNyZWF0b3IiLCJhY3Rpb25DcmVhdG9yIiwiYmluZEFjdGlvbkNyZWF0b3JzIiwiYWN0aW9uQ3JlYXRvcnMiLCJib3VuZEFjdGlvbkNyZWF0b3JzIiwib3duS2V5cyIsImVudW1lcmFibGVPbmx5Iiwic3ltIiwiX29iamVjdFNwcmVhZDIiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwiY29tcG9zZSIsImZ1bmNzIiwiYXBwbHlNaWRkbGV3YXJlIiwibWlkZGxld2FyZXMiLCJfZGlzcGF0Y2giLCJtaWRkbGV3YXJlQVBJIiwiY2hhaW4iLCJtaWRkbGV3YXJlIiwicm9vdCIsImdsb2JhbCIsInByb3BJc0VudW1lcmFibGUiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsInRlc3QxIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsInRlc3QyIiwiZnJvbUNoYXJDb2RlIiwidGVzdDMiLCJsZXR0ZXIiLCJzaG91bGRVc2VOYXRpdmUiLCJzeW1ib2xzIiwibWFrZUVtcHR5RnVuY3Rpb24iLCJlbXB0eUZ1bmN0aW9uIiwidGhhdFJldHVybnMiLCJ0aGF0UmV0dXJuc0ZhbHNlIiwidGhhdFJldHVybnNUcnVlIiwidGhhdFJldHVybnNOdWxsIiwidGhhdFJldHVybnNUaGlzIiwidGhhdFJldHVybnNBcmd1bWVudCIsImV4cGVuc2VzIiwidGV4dCIsInNvcnRCeSIsInN0YXJ0RGF0ZSIsImVuZERhdGUiLCJjcmVhdGVkQXRNb21lbnQiLCJzdGFydERhdGVNYXRjaCIsImVuZERhdGVNYXRjaCIsInRleHRNYXRjaCIsImluY2x1ZGVzIiwic3ltYm9sTWFwIiwibnVtYmVyTWFwIiwicGx1cmFsRm9ybSIsInBsdXJhbHMiLCJwbHVyYWxpemUiLCJ3ZWVrZGF5c1BhcnNlRXhhY3QiLCJzdWZmaXhlcyIsIjEiLCI1IiwiOCIsIjcwIiwiODAiLCIyIiwiNyIsIjIwIiwiNTAiLCI0IiwiMTAwIiwiNiIsIjkiLCIxMCIsIjMwIiwiNjAiLCI5MCIsInJlbGF0aXZlVGltZVdpdGhQbHVyYWwiLCJudW0iLCJmb3JtcyIsInN0YW5kYWxvbmUiLCJsYXN0RGlnaXQiLCJsYXN0MkRpZ2l0cyIsInJlbGF0aXZlVGltZVdpdGhNdXRhdGlvbiIsIm11dGF0aW9uVGFibGUiLCJzb2Z0TXV0YXRpb24iLCJtdXRhdGlvbiIsImxhc3ROdW1iZXIiLCJ0cmFuc2xhdGUiLCJtb250aHNQYXJzZUV4YWN0IiwibGwiLCJsbGwiLCJsbGxsIiwicGx1cmFsIiwic2hvcnRNb250aHNQYXJzZSIsImxvbmdNb250aHNQYXJzZSIsInByb2Nlc3NSZWxhdGl2ZVRpbWUiLCJtb250aHNOb21pbmF0aXZlRWwiLCJtb250aHNHZW5pdGl2ZUVsIiwibW9tZW50VG9Gb3JtYXQiLCJfbW9udGhzR2VuaXRpdmVFbCIsIl9tb250aHNOb21pbmF0aXZlRWwiLCJjYWxlbmRhckVsIiwiX2NhbGVuZGFyRWwiLCJtb250aHNTaG9ydERvdCIsIm51bWJlcnNQYXN0IiwibnVtYmVyc0Z1dHVyZSIsInZlcmJhbE51bWJlciIsIm1vbnRoc1Nob3J0V2l0aERvdHMiLCJtb250aHNTaG9ydFdpdGhvdXREb3RzIiwid2Vla0VuZGluZ3MiLCI0MCIsImlzVXBwZXIiLCJlaWZlbGVyUmVnZWxBcHBsaWVzVG9OdW1iZXIiLCJ0cmFuc2xhdGVTaW5ndWxhciIsInNwZWNpYWwiLCJyZWxhdGl2ZVRpbWVXaXRoU2luZ3VsYXIiLCJ0cmFuc2xhdG9yIiwid29yZHMiLCJjb3JyZWN0R3JhbW1hdGljYWxDYXNlIiwid29yZEtleSIsIm1vbnRoc1N0cmljdFJlZ2V4IiwibW9udGhzU2hvcnRTdHJpY3RSZWdleCIsInJlbGF0aXZlVGltZU1yIiwibW9udGhzTm9taW5hdGl2ZSIsIm1vbnRoc1N1YmplY3RpdmUiLCJudW1iZXJzTm91bnMiLCJudW1iZXJOb3VuIiwiaHVuZHJlZCIsInRlbiIsIm9uZSIsIndvcmQiLCJudW1iZXJBc05vdW4iLCJwcm9jZXNzSG91cnNGdW5jdGlvbiIsImhtIiwiRGF0ZVJhbmdlUGlja2VyIiwiRGF0ZVJhbmdlUGlja2VySW5wdXQiLCJEYXRlUmFuZ2VQaWNrZXJJbnB1dENvbnRyb2xsZXIiLCJTaW5nbGVEYXRlUGlja2VyIiwiU2luZ2xlRGF0ZVBpY2tlcklucHV0IiwiRGF5UGlja2VyUmFuZ2VDb250cm9sbGVyIiwiRGF5UGlja2VyU2luZ2xlRGF0ZUNvbnRyb2xsZXIiLCJDYWxlbmRhck1vbnRoR3JpZCIsIkNhbGVuZGFyTW9udGgiLCJDYWxlbmRhckRheSIsIkRhdGVSYW5nZVBpY2tlclNoYXBlIiwiU2luZ2xlRGF0ZVBpY2tlclNoYXBlIiwiaXNJbmNsdXNpdmVseUFmdGVyRGF5IiwiaXNJbmNsdXNpdmVseUJlZm9yZURheSIsImlzTmV4dERheSIsImlzU2FtZURheSIsInRvSVNPRGF0ZVN0cmluZyIsInRvTG9jYWxpemVkRGF0ZVN0cmluZyIsInRvTW9tZW50T2JqZWN0IiwiYW5jaG9yRGlyZWN0aW9uIiwiY3VycmVudE9mZnNldCIsImNvbnRhaW5lckVkZ2UiLCJtYXJnaW4iLCJ3aW5kb3dXaWR0aCIsImlubmVyV2lkdGgiLCJjYWxjdWxhdGVkT2Zmc2V0IiwiY2FsY3VsYXRlZE1hcmdpbiIsIl9yZWFjdERvbSIsIktFWUNPREVTIiwiUG9ydGFsIiwiYWN0aXZlIiwiaGFuZGxlV3JhcHBlckNsaWNrIiwiY2xvc2VQb3J0YWwiLCJoYW5kbGVPdXRzaWRlTW91c2VDbGljayIsImhhbmRsZUtleWRvd24iLCJwb3J0YWwiLCJjbG9zZU9uRXNjIiwiY2xvc2VPbk91dHNpZGVDbGljayIsImlzT3BlbmVkIiwib3BlblBvcnRhbCIsIm5ld1Byb3BzIiwicmVuZGVyUG9ydGFsIiwib25PcGVuIiwiaXNVbm1vdW50ZWQiLCJyZXNldFBvcnRhbFN0YXRlIiwib3ZlcnJpZGVJc1VubW91bnRlZCIsInVubW91bnRDb21wb25lbnRBdE5vZGUiLCJyZW1vdmVDaGlsZCIsImJlZm9yZUNsb3NlIiwib25DbG9zZSIsImtleUNvZGUiLCJhcHBlbmRDaGlsZCIsInVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyIiwib25VcGRhdGUiLCJvcGVuQnlDbGlja09uIiwiX3JlYWN0TW9tZW50UHJvcHR5cGVzMiIsIl9Gb2N1c2VkSW5wdXRTaGFwZTIiLCJfT3JpZW50YXRpb25TaGFwZTIiLCJfQW5jaG9yRGlyZWN0aW9uU2hhcGUyIiwib25EYXRlc0NoYW5nZSIsImZvY3VzZWRJbnB1dCIsIm9uRm9jdXNDaGFuZ2UiLCJzdGFydERhdGVJZCIsInN0YXJ0RGF0ZVBsYWNlaG9sZGVyVGV4dCIsImVuZERhdGVJZCIsImVuZERhdGVQbGFjZWhvbGRlclRleHQiLCJkaXNhYmxlZCIsInJlcXVpcmVkIiwicmVhZE9ubHkiLCJzY3JlZW5SZWFkZXJJbnB1dE1lc3NhZ2UiLCJzaG93Q2xlYXJEYXRlcyIsInNob3dEZWZhdWx0SW5wdXRJY29uIiwiY3VzdG9tSW5wdXRJY29uIiwiY3VzdG9tQXJyb3dJY29uIiwiY3VzdG9tQ2xvc2VJY29uIiwiaG9yaXpvbnRhbE1hcmdpbiIsIndpdGhGdWxsU2NyZWVuUG9ydGFsIiwia2VlcE9wZW5PbkRhdGVTZWxlY3QiLCJyZW9wZW5QaWNrZXJPbkNsZWFyRGF0ZXMiLCJtaW5pbXVtTmlnaHRzIiwiaXNEYXlCbG9ja2VkIiwiaXNPdXRzaWRlUmFuZ2UiLCJpc0RheUhpZ2hsaWdodGVkIiwiZGlzcGxheUZvcm1hdCIsImlzQXJncyIsIm9yaWdLZXlzIiwia2V5c1NoaW0iLCJvcmlnaW5hbEtleXMiLCJjYW5CZU9iamVjdCIsIm9yaWdpbmFsR2V0U3ltYm9scyIsInNvdXJjZTEiLCJzeW1zIiwib2JqVGFyZ2V0IiwiZ2V0U3ltYm9scyIsInN5bU9iaiIsImxldHRlcnMiLCJhY3R1YWwiLCJsYWNrc1Byb3BlckVudW1lcmF0aW9uT3JkZXIiLCJwcmV2ZW50RXh0ZW5zaW9ucyIsInRocm93ZXIiLCJhc3NpZ25IYXNQZW5kaW5nRXhjZXB0aW9ucyIsIjEzIiwiMTUiLCIzMSIsIjMyIiwiNTIiLCI2NSIsIl9EYXRlUmFuZ2VQaWNrZXJJbnB1dDIiLCJfdG9Mb2NhbGl6ZWREYXRlU3RyaW5nMiIsIl90b0lTT0RhdGVTdHJpbmcyIiwiX2lzSW5jbHVzaXZlbHlBZnRlckRheTIiLCJpc1N0YXJ0RGF0ZUZvY3VzZWQiLCJpc0VuZERhdGVGb2N1c2VkIiwic2NyZWVuUmVhZGVyTWVzc2FnZSIsInNob3dDYXJldCIsIm9uQXJyb3dEb3duIiwib25RdWVzdGlvbk1hcmsiLCJvbkNsZWFyRm9jdXMiLCJvblN0YXJ0RGF0ZUNoYW5nZSIsIm9uU3RhcnREYXRlRm9jdXMiLCJvbkVuZERhdGVDaGFuZ2UiLCJvbkVuZERhdGVGb2N1cyIsImVuZERhdGVTdHJpbmciLCJnZXREaXNwbGF5Rm9ybWF0Iiwic3RhcnREYXRlU3RyaW5nIiwiX3Byb3BzNiIsImdldERhdGVTdHJpbmciLCJzdGFydERhdGVWYWx1ZSIsImVuZERhdGVWYWx1ZSIsIm9uU3RhcnREYXRlU2hpZnRUYWIiLCJvbkVuZERhdGVUYWIiLCJvbkNsZWFyRGF0ZXMiLCIxMSIsIl9yZWFjdCIsIlNWRyIsInZpZXdCb3giLCJmaWxsUnVsZSIsIjIzIiwiMjQiLCIyNSIsInhtbG5zIiwiMzMiLCI2NCIsIl9EYXRlSW5wdXQyIiwiX2Fycm93UmlnaHQyIiwiX2Fycm93TGVmdDIiLCJfY2xvc2UyIiwiX2NhbGVuZGFyMiIsImlzQ2xlYXJEYXRlc0hvdmVyZWQiLCJvbkNsZWFyRGF0ZXNNb3VzZUVudGVyIiwib25DbGVhckRhdGVzTW91c2VMZWF2ZSIsImlucHV0SWNvbiIsImFycm93SWNvbiIsImNsb3NlSWNvbiIsInNjcmVlblJlYWRlclRleHQiLCJwbGFjZWhvbGRlciIsImRpc3BsYXlWYWx1ZSIsImlucHV0VmFsdWUiLCJmb2N1c2VkIiwib25DaGFuZ2UiLCJvbkZvY3VzIiwib25LZXlEb3duU2hpZnRUYWIiLCJvbktleURvd25BcnJvd0Rvd24iLCJvbktleURvd25RdWVzdGlvbk1hcmsiLCJvbktleURvd25UYWIiLCJvbk1vdXNlRW50ZXIiLCJvbk1vdXNlTGVhdmUiLCIzNSIsIjYyIiwiRGF0ZUlucHV0IiwiaW5wdXRSZWYiLCJzZWxlY3QiLCJkaXNwbGF5VGV4dCIsInNjcmVlblJlYWRlck1lc3NhZ2VJZCIsImF1dG9Db21wbGV0ZSIsImRlYm91bmNlIiwid2FpdCIsImxlYWRpbmciLCJ0cmFpbGluZyIsImZyZWVHbG9iYWwiLCJfb2JqZWN0NCIsIl9pc05leHREYXkyIiwiX2dldFZpc2libGVEYXlzMiIsIl90b0lTT01vbnRoU3RyaW5nMiIsIl9EYXlQaWNrZXIyIiwidG9kYXkiLCJpc1RvZGF5IiwiYmxvY2tlZCIsInZhbGlkIiwiaXNTdGFydERhdGUiLCJpc0VuZERhdGUiLCJkb2VzTm90TWVldE1pbmltdW1OaWdodHMiLCJpc0luU2VsZWN0ZWRTcGFuIiwiaXNMYXN0SW5SYW5nZSIsImhvdmVyZWQiLCJpc0hvdmVyZWQiLCJpc0luSG92ZXJlZFNwYW4iLCJpc0RheUFmdGVySG92ZXJlZFN0YXJ0RGF0ZSIsIl90aGlzJGdldFN0YXRlRm9yTmV3TSIsImdldFN0YXRlRm9yTmV3TW9udGgiLCJ2aXNpYmxlRGF5cyIsImhvdmVyRGF0ZSIsImRpZFN0YXJ0RGF0ZUNoYW5nZSIsImRpZEVuZERhdGVDaGFuZ2UiLCJkaWRGb2N1c0NoYW5nZSIsIm5ld01vbnRoU3RhdGUiLCJkZWxldGVNb2RpZmllciIsImFkZE1vZGlmaWVyIiwiZGVsZXRlTW9kaWZpZXJGcm9tUmFuZ2UiLCJhZGRNb2RpZmllclRvUmFuZ2UiLCJzdGFydFNwYW4iLCJlbmRTcGFuIiwiX3N0YXJ0U3BhbiIsImZpcnN0QWxsb3dlZEVuZERhdGUiLCJfZW5kU3BhbiIsIl9lbmRTcGFuMiIsIm5ld1N0YXJ0U3BhbiIsIm5ld0VuZFNwYW4iLCJfZW5kU3BhbjMiLCJuZXdWaXNpYmxlRGF5cyIsInByZXZNb250aCIsInByZXZNb250aFZpc2libGVEYXlzIiwiZ2V0TW9kaWZpZXJzIiwiX3Byb3BzNyIsIm5leHRNb250aCIsIm5leHRNb250aFZpc2libGVEYXlzIiwiX3Byb3BzOCIsIm51bWJlck9mVmlzaWJsZU1vbnRocyIsIl9wcm9wczkiLCJsYXN0VmlzaWJsZURheSIsImN1cnJlbnREYXkiLCJ2aWFibGVEYXlzIiwiX3RoaXM0IiwiZ2V0TW9kaWZpZXJzRm9yRGF5IiwiX3RoaXM1IiwiX3RoaXM2Iiwid2l0aG91dFRyYW5zaXRpb25Nb250aHMiLCJ1cGRhdGVkRGF5cyIsIl9wcm9wczEwIiwiZmlyc3RWaXNpYmxlTW9udGgiLCJ1cGRhdGVkRGF5c0FmdGVyQWRkaXRpb24iLCJtb250aEtleSIsIm1vbnRoSXNvIiwic3RhcnQiLCJzcGFuU3RhcnQiLCJfcHJvcHMxMSIsIl9zdGF0ZTciLCJ1cGRhdGVkRGF5c0FmdGVyRGVsZXRpb24iLCJfcHJvcHMxMiIsImRheURpZmYiLCJfcHJvcHMxMyIsIl9wcm9wczE0IiwiaXNGb3J3YXJkUmFuZ2UiLCJpc0JhY2t3YXJkUmFuZ2UiLCJpc1ZhbGlkRGF5SG92ZXJlZCIsIl9wcm9wczE1IiwiX3Byb3BzMTYiLCJfdGhpczciLCJfcHJvcHMxNyIsIl9zdGF0ZTgiLCJkYXlQaWNrZXIiLCJ2aXNpYmxlRGF5c0J5TW9udGgiLCJiYXNlRGF0ZSIsImZpcnN0T2ZNb250aCIsImxhc3RPZk1vbnRoIiwicHJldkRheSIsIm1zVHJhbnNmb3JtIiwiTW96VHJhbnNmb3JtIiwiV2Via2l0VHJhbnNmb3JtIiwiX0NhbGVuZGFyTW9udGgyIiwiX2lzVHJhbnNpdGlvbkVuZFN1cHBvcnRlZDIiLCJnZXRNb250aHMiLCJpc1RyYW5zaXRpb25FbmRTdXBwb3J0ZWQiLCJvblRyYW5zaXRpb25FbmQiLCJldmVudEhhbmRsZSIsImhhc01vbnRoQ2hhbmdlZCIsImhhc051bWJlck9mTW9udGhzQ2hhbmdlZCIsIm5ld01vbnRocyIsImlzVmVydGljYWxTY3JvbGxhYmxlIiwiaXNWaXNpYmxlIiwibW9udGhTdHJpbmciLCIxMiIsIjE0IiwiMTkiLCI0NSIsIjQ5IiwiX0NhbGVuZGFyRGF5MiIsIl9nZXRDYWxlbmRhck1vbnRoV2Vla3MyIiwibW9udGhUaXRsZSIsImNhbGVuZGFyTW9udGhDbGFzc2VzIiwiZGF5T2ZXZWVrIiwiaXNPdXRzaWRlRGF5IiwiNDYiLCI1OSIsIl9nZXRQaHJhc2UyIiwiaW5zdGFuY2VPZiIsImJ1dHRvblJlZiIsIl9wcm9wczIkcGhyYXNlcyIsIm1vZCIsImZvcm1hdHRlZERhdGUiLCJhcmlhTGFiZWwiLCJkYXlTaXplU3R5bGVzIiwiY3VycmVudFRhcmdldCIsImRlZmluZSIsImhhcyIsIlJlcXVpcmVPYmplY3RDb2VyY2libGUiLCIkaXNFbnVtZXJhYmxlIiwiY2FsbEJvdW5kIiwiTyIsInZhbHMiLCJvbkRhdGVDaGFuZ2UiLCJzaG93Q2xlYXJEYXRlIiwicmVvcGVuUGlja2VyT25DbGVhckRhdGUiLCJzZWxlY3RlZCIsImlzU2VsZWN0ZWQiLCJkaWREYXRlQ2hhbmdlIiwib25EYXlQaWNrZXJCbHVyIiwiNzMiLCJvbkNsZWFyRGF0ZSIsImlzQ2xlYXJEYXRlSG92ZXJlZCIsIm9uQ2xlYXJEYXRlTW91c2VFbnRlciIsIm9uQ2xlYXJEYXRlTW91c2VMZWF2ZSIsIkV4cGVuc2VGb3JtIiwib25EZXNjcmlwdGlvbkNoYW5nZSIsIm9uQW1vdW50Q2hhbmdlIiwib25Ob3RlQ2hhbmdlIiwib25BZGRFeHBlbnNlIiwiY2FsYW5kZXJGb2N1c2VkIiwib25TdWJtaXQiLCJhdXRvRm9jdXMiLCJSZWFjdCIsImdldFJhbmRvbVZhbHVlcyIsImNyeXB0byIsIm1zQ3J5cHRvIiwicm5kczgiLCJybmRzIiwiYnl0ZVRvSGV4IiwiYnVmIiwiYnRoIiwiUkVBQ1RfU1RBVElDUyIsImdldERlZmF1bHRQcm9wcyIsIm1peGlucyIsIktOT1dOX1NUQVRJQ1MiLCJjYWxsZXIiLCJhcml0eSIsImlzR2V0T3duUHJvcGVydHlTeW1ib2xzQXZhaWxhYmxlIiwidGFyZ2V0Q29tcG9uZW50Iiwic291cmNlQ29tcG9uZW50IiwiY3VzdG9tU3RhdGljcyIsInN5bWJvbE9ic2VydmFibGVQb255ZmlsbCIsImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyIsIm9iamVjdFByb3RvdHlwZSIsImhvaXN0Tm9uUmVhY3RTdGF0aWNzIiwiYmxhY2tsaXN0IiwiaW5oZXJpdGVkQ29tcG9uZW50IiwianN4IiwiUmVhY3RET00iLCJnZXRFbGVtZW50QnlJZCIsImZvciIsInEiLCJ2IiwieiIsImFhIiwiQSIsIkIiLCJpc01vdW50ZWQiLCJlbnF1ZXVlRm9yY2VVcGRhdGUiLCJlbnF1ZXVlUmVwbGFjZVN0YXRlIiwiZW5xdWV1ZVNldFN0YXRlIiwicmVmcyIsInVwZGF0ZXIiLCJGIiwiRyIsImlzUmVhY3RDb21wb25lbnQiLCJIIiwiaXNQdXJlUmVhY3RDb21wb25lbnQiLCJJIiwiSiIsIksiLCJfX3NlbGYiLCJfX3NvdXJjZSIsIiQkdHlwZW9mIiwiX293bmVyIiwiTiIsIlAiLCJRIiwia2V5UHJlZml4IiwiUiIsIlUiLCJTIiwiVCIsImRvbmUiLCJjYSIsImRhIiwiViIsImJhIiwiWCIsImNyZWF0ZVJlZiIsIlB1cmVDb21wb25lbnQiLCJjcmVhdGVDb250ZXh0IiwiX2NhbGN1bGF0ZUNoYW5nZWRCaXRzIiwiX2N1cnJlbnRWYWx1ZSIsIl9jdXJyZW50VmFsdWUyIiwiX3RocmVhZENvdW50IiwiQ29uc3VtZXIiLCJfY29udGV4dCIsImZvcndhcmRSZWYiLCJsYXp5IiwiX2N0b3IiLCJfc3RhdHVzIiwiX3Jlc3VsdCIsImNvbXBhcmUiLCJ1c2VDYWxsYmFjayIsInVzZUNvbnRleHQiLCJ1c2VFZmZlY3QiLCJ1c2VJbXBlcmF0aXZlSGFuZGxlIiwidXNlRGVidWdWYWx1ZSIsInVzZUxheW91dEVmZmVjdCIsInVzZU1lbW8iLCJ1c2VSZWR1Y2VyIiwidXNlUmVmIiwidXNlU3RhdGUiLCJGcmFnbWVudCIsIlByb2ZpbGVyIiwiU3RyaWN0TW9kZSIsIlN1c3BlbnNlIiwiY3JlYXRlRmFjdG9yeSIsIl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEIiwiUmVhY3RDdXJyZW50RGlzcGF0Y2hlciIsIlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnIiwic3VzcGVuc2UiLCJSZWFjdEN1cnJlbnRPd25lciIsIklzU29tZVJlbmRlcmVyQWN0aW5nIiwiWiIsImVhIiwiZmEiLCJoYSIsImlhIiwiamEiLCJrYSIsImh0bWwiLCJtYXRobWwiLCJzdmciLCJsYSIsIm9hIiwicGEiLCJxYSIsInBsdWdpbnMiLCJleHRyYWN0RXZlbnRzIiwiZXZlbnRUeXBlcyIsImV2ZW50TmFtZURpc3BhdGNoQ29uZmlncyIsInBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzIiwicmEiLCJyZWdpc3RyYXRpb25OYW1lIiwicmVnaXN0cmF0aW9uTmFtZU1vZHVsZXMiLCJyZWdpc3RyYXRpb25OYW1lRGVwZW5kZW5jaWVzIiwiZGVwZW5kZW5jaWVzIiwicG9zc2libGVSZWdpc3RyYXRpb25OYW1lcyIsImluamVjdEV2ZW50UGx1Z2luT3JkZXIiLCJpbmplY3RFdmVudFBsdWdpbnNCeU5hbWUiLCJzYSIsInRhIiwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwiLCJkZWZhdWx0VmFsdWUiLCJkZWZhdWx0Q2hlY2tlZCIsImlubmVySFRNTCIsInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZyIsIndhIiwiTVVTVF9VU0VfUFJPUEVSVFkiLCJIQVNfQk9PTEVBTl9WQUxVRSIsIkhBU19OVU1FUklDX1ZBTFVFIiwiSEFTX1BPU0lUSVZFX05VTUVSSUNfVkFMVUUiLCJIQVNfT1ZFUkxPQURFRF9CT09MRUFOX1ZBTFVFIiwiSEFTX1NUUklOR19CT09MRUFOX1ZBTFVFIiwiaW5qZWN0RE9NUHJvcGVydHlDb25maWciLCJQcm9wZXJ0aWVzIiwiRE9NQXR0cmlidXRlTmFtZXNwYWNlcyIsIkRPTUF0dHJpYnV0ZU5hbWVzIiwiRE9NTXV0YXRpb25NZXRob2RzIiwieGEiLCJwcm9wZXJ0aWVzIiwiYXR0cmlidXRlTmFtZSIsImF0dHJpYnV0ZU5hbWVzcGFjZSIsInByb3BlcnR5TmFtZSIsIm11dGF0aW9uTWV0aG9kIiwibXVzdFVzZVByb3BlcnR5IiwiaGFzQm9vbGVhblZhbHVlIiwiaGFzTnVtZXJpY1ZhbHVlIiwiaGFzUG9zaXRpdmVOdW1lcmljVmFsdWUiLCJoYXNPdmVybG9hZGVkQm9vbGVhblZhbHVlIiwiaGFzU3RyaW5nQm9vbGVhblZhbHVlIiwiSURfQVRUUklCVVRFX05BTUUiLCJST09UX0FUVFJJQlVURV9OQU1FIiwiQVRUUklCVVRFX05BTUVfU1RBUlRfQ0hBUiIsIkFUVFJJQlVURV9OQU1FX0NIQVIiLCJzaG91bGRTZXRBdHRyaWJ1dGUiLCJpc1Jlc2VydmVkUHJvcCIsInNob3VsZEF0dHJpYnV0ZUFjY2VwdEJvb2xlYW5WYWx1ZSIsImdldFByb3BlcnR5SW5mbyIsImluamVjdGlvbiIsInlhIiwiemEiLCJBYSIsIkJhIiwiRWEiLCJGYSIsIkdhIiwiSGEiLCJJYSIsIkxhIiwiX3JlbmRlcmVkQ29tcG9uZW50IiwiTWEiLCJfaG9zdE5vZGUiLCJOYSIsIl9mbGFncyIsIl9yZW5kZXJlZENoaWxkcmVuIiwiZmlyc3RDaGlsZCIsIl9kb21JRCIsIm5leHRTaWJsaW5nIiwibm9kZVR5cGUiLCJub2RlVmFsdWUiLCJPYSIsInBhcmVudE5vZGUiLCJ0YWciLCJnZXRDbG9zZXN0SW5zdGFuY2VGcm9tTm9kZSIsImdldEluc3RhbmNlRnJvbU5vZGUiLCJnZXROb2RlRnJvbUluc3RhbmNlIiwic3RhdGVOb2RlIiwiX2hvc3RQYXJlbnQiLCJwcmVjYWNoZUNoaWxkTm9kZXMiLCJwcmVjYWNoZU5vZGUiLCJ1bmNhY2hlTm9kZSIsInByZWNhY2hlRmliZXJOb2RlIiwiZ2V0RmliZXJDdXJyZW50UHJvcHNGcm9tTm9kZSIsInVwZGF0ZUZpYmVyUHJvcHMiLCJQYSIsIl9yZWFjdEludGVybmFsRmliZXIiLCJRYSIsIlJhIiwiZ2V0TmFtZSIsIlNhIiwiVGEiLCJVYSIsIlZhIiwiV2EiLCJYYSIsIlphIiwiYWx0ZXJuYXRlIiwiZWZmZWN0VGFnIiwiJGEiLCJhYiIsInNpYmxpbmciLCJiYiIsIl9jYXVnaHRFcnJvciIsIl9oYXNDYXVnaHRFcnJvciIsIl9yZXRocm93RXJyb3IiLCJfaGFzUmV0aHJvd0Vycm9yIiwiaW5qZWN0RXJyb3JVdGlscyIsImludm9rZUd1YXJkZWRDYWxsYmFjayIsImNiIiwiaW52b2tlR3VhcmRlZENhbGxiYWNrQW5kQ2F0Y2hGaXJzdEVycm9yIiwiaGFzQ2F1Z2h0RXJyb3IiLCJjbGVhckNhdWdodEVycm9yIiwicmV0aHJvd0NhdWdodEVycm9yIiwiZGIiLCJmYiIsImViIiwiZ2IiLCJoYiIsImlzRW5kaXNoIiwiaXNNb3ZlaXNoIiwiaXNTdGFydGlzaCIsImV4ZWN1dGVEaXJlY3REaXNwYXRjaCIsIl9kaXNwYXRjaExpc3RlbmVycyIsIl9kaXNwYXRjaEluc3RhbmNlcyIsImV4ZWN1dGVEaXNwYXRjaGVzSW5PcmRlciIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwiZXhlY3V0ZURpc3BhdGNoZXNJbk9yZGVyU3RvcEF0VHJ1ZSIsImhhc0Rpc3BhdGNoZXMiLCJpbmplY3RDb21wb25lbnRUcmVlIiwiaWIiLCJqYiIsImtiIiwibGIiLCJtYiIsInJlc3RvcmVDb250cm9sbGVkU3RhdGUiLCJuYiIsImluamVjdEZpYmVyQ29udHJvbGxlZEhvc3RDb21wb25lbnQiLCJlbnF1ZXVlU3RhdGVSZXN0b3JlIiwicmVzdG9yZVN0YXRlSWZOZWVkZWQiLCJvYiIsInBiIiwicWIiLCJyYiIsInNiIiwiYmF0Y2hlZFVwZGF0ZXMiLCJpbmplY3RTdGFja0JhdGNoZWRVcGRhdGVzIiwiaW5qZWN0RmliZXJCYXRjaGVkVXBkYXRlcyIsInRiIiwidWIiLCJzcmNFbGVtZW50IiwiY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQiLCJ2YiIsIndiIiwieGIiLCJ0YXJnZXRJbnN0IiwiYW5jZXN0b3JzIiwiY29udGFpbmVySW5mbyIsInliIiwiX2hhbmRsZVRvcExldmVsIiwidG9wTGV2ZWxUeXBlIiwibmF0aXZlRXZlbnQiLCJfZW5hYmxlZCIsInNldEhhbmRsZVRvcExldmVsIiwic2V0RW5hYmxlZCIsImlzRW5hYmxlZCIsInRyYXBCdWJibGVkRXZlbnQiLCJkaXNwYXRjaEV2ZW50IiwidHJhcENhcHR1cmVkRXZlbnQiLCJDYiIsIkRiIiwiRWIiLCJGYiIsImlzUGVyc2lzdGVudCIsInJlbGVhc2UiLCJHYiIsIkhiIiwiSWIiLCJLYiIsIkpiIiwiZ2V0TGlzdGVuZXIiLCJfY3VycmVudEVsZW1lbnQiLCJfcm9vdE5vZGVJRCIsImVucXVldWVFdmVudHMiLCJwcm9jZXNzRXZlbnRRdWV1ZSIsIkxiIiwic2V0QXR0cmlidXRlIiwiaGFzRmVhdHVyZSIsIk1iIiwiTmIiLCJhbmltYXRpb25lbmQiLCJhbmltYXRpb25pdGVyYXRpb24iLCJhbmltYXRpb25zdGFydCIsInRyYW5zaXRpb25lbmQiLCJPYiIsIlBiIiwiUWIiLCJhbmltYXRpb24iLCJ0cmFuc2l0aW9uIiwiUmIiLCJ0b3BBYm9ydCIsInRvcEFuaW1hdGlvbkVuZCIsInRvcEFuaW1hdGlvbkl0ZXJhdGlvbiIsInRvcEFuaW1hdGlvblN0YXJ0IiwidG9wQmx1ciIsInRvcENhbmNlbCIsInRvcENhblBsYXkiLCJ0b3BDYW5QbGF5VGhyb3VnaCIsInRvcENoYW5nZSIsInRvcENsaWNrIiwidG9wQ2xvc2UiLCJ0b3BDb21wb3NpdGlvbkVuZCIsInRvcENvbXBvc2l0aW9uU3RhcnQiLCJ0b3BDb21wb3NpdGlvblVwZGF0ZSIsInRvcENvbnRleHRNZW51IiwidG9wQ29weSIsInRvcEN1dCIsInRvcERvdWJsZUNsaWNrIiwidG9wRHJhZyIsInRvcERyYWdFbmQiLCJ0b3BEcmFnRW50ZXIiLCJ0b3BEcmFnRXhpdCIsInRvcERyYWdMZWF2ZSIsInRvcERyYWdPdmVyIiwidG9wRHJhZ1N0YXJ0IiwidG9wRHJvcCIsInRvcER1cmF0aW9uQ2hhbmdlIiwidG9wRW1wdGllZCIsInRvcEVuY3J5cHRlZCIsInRvcEVuZGVkIiwidG9wRXJyb3IiLCJ0b3BGb2N1cyIsInRvcElucHV0IiwidG9wS2V5RG93biIsInRvcEtleVByZXNzIiwidG9wS2V5VXAiLCJ0b3BMb2FkZWREYXRhIiwidG9wTG9hZCIsInRvcExvYWRlZE1ldGFkYXRhIiwidG9wTG9hZFN0YXJ0IiwidG9wTW91c2VEb3duIiwidG9wTW91c2VNb3ZlIiwidG9wTW91c2VPdXQiLCJ0b3BNb3VzZU92ZXIiLCJ0b3BNb3VzZVVwIiwidG9wUGFzdGUiLCJ0b3BQYXVzZSIsInRvcFBsYXkiLCJ0b3BQbGF5aW5nIiwidG9wUHJvZ3Jlc3MiLCJ0b3BSYXRlQ2hhbmdlIiwidG9wU2Nyb2xsIiwidG9wU2Vla2VkIiwidG9wU2Vla2luZyIsInRvcFNlbGVjdGlvbkNoYW5nZSIsInRvcFN0YWxsZWQiLCJ0b3BTdXNwZW5kIiwidG9wVGV4dElucHV0IiwidG9wVGltZVVwZGF0ZSIsInRvcFRvZ2dsZSIsInRvcFRvdWNoQ2FuY2VsIiwidG9wVG91Y2hFbmQiLCJ0b3BUb3VjaE1vdmUiLCJ0b3BUb3VjaFN0YXJ0IiwidG9wVHJhbnNpdGlvbkVuZCIsInRvcFZvbHVtZUNoYW5nZSIsInRvcFdhaXRpbmciLCJ0b3BXaGVlbCIsIlNiIiwiVGIiLCJVYiIsIlZiIiwiaGFuZGxlVG9wTGV2ZWwiLCJsaXN0ZW5UbyIsImlzTGlzdGVuaW5nVG9BbGxEZXBlbmRlbmNpZXMiLCJXYiIsImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50IiwiYm9yZGVySW1hZ2VPdXRzZXQiLCJib3JkZXJJbWFnZVNsaWNlIiwiYm9yZGVySW1hZ2VXaWR0aCIsImJveEZsZXgiLCJib3hGbGV4R3JvdXAiLCJib3hPcmRpbmFsR3JvdXAiLCJjb2x1bW5Db3VudCIsImNvbHVtbnMiLCJmbGV4IiwiZmxleEdyb3ciLCJmbGV4UG9zaXRpdmUiLCJmbGV4U2hyaW5rIiwiZmxleE5lZ2F0aXZlIiwiZmxleE9yZGVyIiwiZ3JpZFJvdyIsImdyaWRSb3dFbmQiLCJncmlkUm93U3BhbiIsImdyaWRSb3dTdGFydCIsImdyaWRDb2x1bW4iLCJncmlkQ29sdW1uRW5kIiwiZ3JpZENvbHVtblNwYW4iLCJncmlkQ29sdW1uU3RhcnQiLCJmb250V2VpZ2h0IiwibGluZUNsYW1wIiwibGluZUhlaWdodCIsIm9yZGVyIiwib3JwaGFucyIsInRhYlNpemUiLCJ3aWRvd3MiLCJ6SW5kZXgiLCJ6b29tIiwiZmlsbE9wYWNpdHkiLCJmbG9vZE9wYWNpdHkiLCJzdG9wT3BhY2l0eSIsInN0cm9rZURhc2hhcnJheSIsInN0cm9rZURhc2hvZmZzZXQiLCJzdHJva2VNaXRlcmxpbWl0Iiwic3Ryb2tlT3BhY2l0eSIsInN0cm9rZVdpZHRoIiwiWGIiLCJZYiIsImlzVW5pdGxlc3NOdW1iZXIiLCJzaG9ydGhhbmRQcm9wZXJ0eUV4cGFuc2lvbnMiLCJiYWNrZ3JvdW5kIiwiYmFja2dyb3VuZEF0dGFjaG1lbnQiLCJiYWNrZ3JvdW5kQ29sb3IiLCJiYWNrZ3JvdW5kSW1hZ2UiLCJiYWNrZ3JvdW5kUG9zaXRpb25YIiwiYmFja2dyb3VuZFBvc2l0aW9uWSIsImJhY2tncm91bmRSZXBlYXQiLCJiYWNrZ3JvdW5kUG9zaXRpb24iLCJib3JkZXIiLCJib3JkZXJXaWR0aCIsImJvcmRlclN0eWxlIiwiYm9yZGVyQ29sb3IiLCJib3JkZXJCb3R0b20iLCJib3JkZXJCb3R0b21XaWR0aCIsImJvcmRlckJvdHRvbVN0eWxlIiwiYm9yZGVyQm90dG9tQ29sb3IiLCJib3JkZXJMZWZ0IiwiYm9yZGVyTGVmdFdpZHRoIiwiYm9yZGVyTGVmdFN0eWxlIiwiYm9yZGVyTGVmdENvbG9yIiwiYm9yZGVyUmlnaHQiLCJib3JkZXJSaWdodFdpZHRoIiwiYm9yZGVyUmlnaHRTdHlsZSIsImJvcmRlclJpZ2h0Q29sb3IiLCJib3JkZXJUb3AiLCJib3JkZXJUb3BXaWR0aCIsImJvcmRlclRvcFN0eWxlIiwiYm9yZGVyVG9wQ29sb3IiLCJmb250IiwiZm9udFN0eWxlIiwiZm9udFZhcmlhbnQiLCJmb250U2l6ZSIsImZvbnRGYW1pbHkiLCJvdXRsaW5lIiwib3V0bGluZVdpZHRoIiwib3V0bGluZVN0eWxlIiwib3V0bGluZUNvbG9yIiwiWmIiLCIkYiIsImFjIiwiYmMiLCJ0cmltIiwic2V0UHJvcGVydHkiLCJjYyIsImRjIiwiZWMiLCJnYyIsInNldEF0dHJpYnV0ZUZvcklEIiwic2V0QXR0cmlidXRlRm9yUm9vdCIsImdldFZhbHVlRm9yUHJvcGVydHkiLCJnZXRWYWx1ZUZvckF0dHJpYnV0ZSIsInNldFZhbHVlRm9yUHJvcGVydHkiLCJkZWxldGVWYWx1ZUZvclByb3BlcnR5Iiwic2V0QXR0cmlidXRlTlMiLCJzZXRWYWx1ZUZvckF0dHJpYnV0ZSIsImZjIiwicmVtb3ZlQXR0cmlidXRlIiwiZGVsZXRlVmFsdWVGb3JBdHRyaWJ1dGUiLCJoYyIsImljIiwiUmVhY3REZWJ1Z0N1cnJlbnRGcmFtZSIsImpjIiwia2MiLCJwaGFzZSIsInJlc2V0Q3VycmVudEZpYmVyIiwiZ2V0Q3VycmVudFN0YWNrIiwic2V0Q3VycmVudEZpYmVyIiwiZ2V0Q3VycmVudEZpYmVyT3duZXJOYW1lIiwiZ2V0Q3VycmVudEZpYmVyU3RhY2tBZGRlbmR1bSIsImxjIiwibWMiLCJnZXRIb3N0UHJvcHMiLCJjaGVja2VkIiwic3RlcCIsIl93cmFwcGVyU3RhdGUiLCJpbml0aWFsVmFsdWUiLCJpbml0aWFsQ2hlY2tlZCIsImluaXRXcmFwcGVyU3RhdGUiLCJjb250cm9sbGVkIiwidXBkYXRlV3JhcHBlciIsInBvc3RNb3VudFdyYXBwZXIiLCJmb3JtIiwicWMiLCJzYyIsInJjIiwidGMiLCJ1YyIsIndhc011bHRpcGxlIiwibXVsdGlwbGUiLCJ2YyIsInRleHRDb250ZW50Iiwid2MiLCJ4YyIsIm1lbnVpdGVtIiwiYXJlYSIsImJyIiwiY29sIiwiZW1iZWQiLCJociIsImltZyIsImtleWdlbiIsImxpbmsiLCJtZXRhIiwicGFyYW0iLCJ0cmFjayIsIndiciIsInljIiwiemMiLCJub2RlTmFtZSIsIkJjIiwiX3ZhbHVlVHJhY2tlciIsImdldFZhbHVlIiwic2V0VmFsdWUiLCJzdG9wVHJhY2tpbmciLCJBYyIsIkNjIiwiRWMiLCJEYyIsIkZjIiwiTVNBcHAiLCJleGVjVW5zYWZlTG9jYWxGdW5jdGlvbiIsIm5hbWVzcGFjZVVSSSIsIkdjIiwiSGMiLCJJYyIsImxhc3RDaGlsZCIsImRvY3VtZW50RWxlbWVudCIsIkpjIiwiTGMiLCJNYyIsIk5jIiwiT2MiLCJQYyIsIlFjIiwiUmMiLCJvd25lckRvY3VtZW50IiwiU2MiLCJjcmVhdGVFbGVtZW50TlMiLCJjcmVhdGVUZXh0Tm9kZSIsInNldEluaXRpYWxQcm9wZXJ0aWVzIiwiX19odG1sIiwib25jbGljayIsImRpZmZQcm9wZXJ0aWVzIiwidXBkYXRlUHJvcGVydGllcyIsImRpZmZIeWRyYXRlZFByb3BlcnRpZXMiLCJkaWZmSHlkcmF0ZWRUZXh0Iiwid2FybkZvckRlbGV0ZWRIeWRyYXRhYmxlRWxlbWVudCIsIndhcm5Gb3JEZWxldGVkSHlkcmF0YWJsZVRleHQiLCJ3YXJuRm9ySW5zZXJ0ZWRIeWRyYXRlZEVsZW1lbnQiLCJ3YXJuRm9ySW5zZXJ0ZWRIeWRyYXRlZFRleHQiLCJUYyIsInJlcXVlc3RJZGxlQ2FsbGJhY2siLCJVYyIsIlZjIiwiV2MiLCJYYyIsIlljIiwiWmMiLCIkYyIsImFkIiwidGltZVJlbWFpbmluZyIsInBlcmZvcm1hbmNlIiwiYmQiLCJjZCIsInBvc3RNZXNzYWdlIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwic2V0VGltZW91dCIsIkluZmluaXR5IiwicklDIiwiZWQiLCJmZCIsImdkIiwiaGQiLCJqZCIsImtkIiwibWQiLCJuZCIsIm9kIiwicWQiLCJmaXJzdCIsInJkIiwicHJpb3JpdHlMZXZlbCIsInNkIiwidXBkYXRlUXVldWUiLCJoYXNGb3JjZVVwZGF0ZSIsImNhbGxiYWNrTGlzdCIsInBhcnRpYWxTdGF0ZSIsImlzUmVwbGFjZSIsImlzRm9yY2VkIiwiaXNUb3BMZXZlbFVubW91bnQiLCJ0ZCIsInVkIiwidmQiLCJ3ZCIsInhkIiwieWQiLCJ6ZCIsIkFkIiwiQmQiLCJDZCIsIkRkIiwiRWQiLCJGZCIsIkxkIiwiTWQiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0IiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQiLCJOZCIsIk9kIiwiY3Vyc29yIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQiLCJQZCIsIlFkIiwiUmQiLCJTZCIsIlRkIiwiVWQiLCJWZCIsIldkIiwiWGQiLCJZZCIsIlpkIiwiJGQiLCJhZSIsImJlIiwibWVtb2l6ZWRTdGF0ZSIsIm1lbW9pemVkUHJvcHMiLCJwZW5kaW5nUHJvcHMiLCJpbnRlcm5hbENvbnRleHRUYWciLCJsYXN0RWZmZWN0IiwiZmlyc3RFZmZlY3QiLCJuZXh0RWZmZWN0IiwicGVuZGluZ1dvcmtQcmlvcml0eSIsImNlIiwiamUiLCJrZSIsImRlIiwiaGFuZGxlciIsImVlIiwiZmUiLCJnZSIsImhlIiwiaWUiLCJsZSIsImNyZWF0ZUNvcm91dGluZSIsImNyZWF0ZVlpZWxkIiwiaXNDb3JvdXRpbmUiLCJpc1lpZWxkIiwiUkVBQ1RfWUlFTERfVFlQRSIsIlJFQUNUX0NPUk9VVElORV9UWVBFIiwibWUiLCJuZSIsImNyZWF0ZVBvcnRhbCIsImlzUG9ydGFsIiwiUkVBQ1RfUE9SVEFMX1RZUEUiLCJvZSIsInBlIiwicWUiLCJzZSIsInRlIiwidWUiLCJ2ZSIsIndlIiwieGUiLCJ5ZSIsInplIiwiQWUiLCJCZSIsIkNlIiwiRGUiLCJFZSIsIkZlIiwiR2UiLCJIZSIsIkllIiwiSmUiLCJLZSIsIkxlIiwiTWUiLCJnZXRQdWJsaWNJbnN0YW5jZSIsIl9zdHJpbmdSZWYiLCJOZSIsIk9lIiwiQ2EiLCJTZSIsInJlY29uY2lsZUNoaWxkRmliZXJzIiwicmVjb25jaWxlQ2hpbGRGaWJlcnNJblBsYWNlIiwibW91bnRDaGlsZEZpYmVyc0luUGxhY2UiLCJjbG9uZUNoaWxkRmliZXJzIiwiVGUiLCJVZSIsIlZlIiwiV2UiLCJYZSIsIlllIiwiWmUiLCIkZSIsImFmIiwiYmYiLCJjZiIsImRmIiwiZmYiLCJnZiIsImhmIiwiamYiLCJrZiIsImxmIiwibWYiLCJuZiIsIm9mIiwicGYiLCJxZiIsInJmIiwic2YiLCJ0ZiIsInVmIiwid2YiLCJ4ZiIsInlmIiwiemYiLCJBZiIsIkJmIiwiQ2YiLCJEZiIsIkVmIiwiRmYiLCJHZiIsIkhmIiwiSWYiLCJKZiIsIktmIiwiTGYiLCJwZW5kaW5nQ29udGV4dCIsInNob3VsZFNldFRleHRDb250ZW50IiwidXNlU3luY1NjaGVkdWxpbmciLCJzaG91bGREZXByaW9yaXRpemVTdWJ0cmVlIiwicHVzaEhvc3RDb250ZXh0IiwicHVzaEhvc3RDb250YWluZXIiLCJlbnRlckh5ZHJhdGlvblN0YXRlIiwicmVzZXRIeWRyYXRpb25TdGF0ZSIsInRyeVRvQ2xhaW1OZXh0SHlkcmF0YWJsZUluc3RhbmNlIiwiYWRvcHRDbGFzc0luc3RhbmNlIiwiY29uc3RydWN0Q2xhc3NJbnN0YW5jZSIsIm1vdW50Q2xhc3NJbnN0YW5jZSIsInVuc3RhYmxlX2lzQXN5bmNSZWFjdENvbXBvbmVudCIsInVwZGF0ZUNsYXNzSW5zdGFuY2UiLCJjb21wb25lbnRXaWxsVXBkYXRlIiwiZWYiLCJsZCIsImJlZ2luV29yayIsImJlZ2luRmFpbGVkV29yayIsIk1mIiwiTmYiLCJPZiIsIlBmIiwiUWYiLCJSZiIsIlNmIiwiVGYiLCJVZiIsIlZmIiwiV2YiLCJYZiIsIllmIiwiWmYiLCJhZyIsImJnIiwiY2ciLCJkZyIsImZnIiwiaGciLCJpZyIsInN1cHBvcnRzRmliZXIiLCJpbmplY3QiLCJvbkNvbW1pdEZpYmVyUm9vdCIsIm9uQ29tbWl0RmliZXJVbm1vdW50IiwiamciLCJrZyIsImxnIiwibWciLCJuZyIsIm9nIiwicGciLCJxZyIsInJnIiwic2ciLCJ0ZyIsInVnIiwid2ciLCJ4ZyIsInlnIiwiemciLCJCZyIsIkNnIiwiRGciLCJFZyIsIkZnIiwiR2ciLCJJZyIsIkpnIiwiS2ciLCJMZyIsIk1nIiwiTmciLCJPZyIsIlBnIiwiUWciLCJSZyIsIlNnIiwiVGciLCJVZyIsIlZnIiwiV2ciLCJYZyIsIllnIiwiWmciLCIkZyIsImFoIiwiYmgiLCJjaCIsImRoIiwiZWgiLCJmaCIsImdoIiwibWEiLCJpc1NjaGVkdWxlZCIsIm5leHRTY2hlZHVsZWRSb290IiwiemIiLCJuYyIsIm9jIiwiSGQiLCJuYSIsIlVpIiwicmVzZXRUZXh0Q29udGVudCIsIlBoIiwidmYiLCJJZCIsIk1oIiwiSmQiLCJWaSIsIkdkIiwiTmgiLCJPaCIsImNvbXBvbmVudERpZENhdGNoIiwiY29tcG9uZW50U3RhY2siLCJKYSIsInZhIiwiTGgiLCJBYiIsIkRhIiwiS2QiLCJZYSIsIkJiIiwiJGYiLCJLYSIsIl9kZWJ1Z093bmVyIiwiX2RlYnVnU291cmNlIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwiY29tcG9uZW50TmFtZSIsImVycm9yQm91bmRhcnkiLCJlcnJvckJvdW5kYXJ5Rm91bmQiLCJlcnJvckJvdW5kYXJ5TmFtZSIsIndpbGxSZXRyeSIsIldpIiwiWGkiLCJwYyIsIllpIiwiZ2V0Q2hpbGRIb3N0Q29udGV4dCIsImdldFJvb3RIb3N0Q29udGV4dCIsImdldEhvc3RDb250ZXh0IiwiZ2V0Um9vdEhvc3RDb250YWluZXIiLCJwb3BIb3N0Q29udGFpbmVyIiwicG9wSG9zdENvbnRleHQiLCJyZXNldEhvc3RDb250YWluZXIiLCJBZyIsImNhbkh5ZHJhdGVJbnN0YW5jZSIsImNhbkh5ZHJhdGVUZXh0SW5zdGFuY2UiLCJnZXROZXh0SHlkcmF0YWJsZVNpYmxpbmciLCJnZXRGaXJzdEh5ZHJhdGFibGVDaGlsZCIsImh5ZHJhdGVJbnN0YW5jZSIsImh5ZHJhdGVUZXh0SW5zdGFuY2UiLCJkaWROb3RIeWRyYXRlSW5zdGFuY2UiLCJkaWROb3RGaW5kSHlkcmF0YWJsZUluc3RhbmNlIiwiZGlkTm90RmluZEh5ZHJhdGFibGVUZXh0SW5zdGFuY2UiLCJwcmVwYXJlVG9IeWRyYXRlSG9zdEluc3RhbmNlIiwicHJlcGFyZVRvSHlkcmF0ZUhvc3RUZXh0SW5zdGFuY2UiLCJwb3BIeWRyYXRpb25TdGF0ZSIsIkhnIiwiY3JlYXRlSW5zdGFuY2UiLCJjcmVhdGVUZXh0SW5zdGFuY2UiLCJhcHBlbmRJbml0aWFsQ2hpbGQiLCJmaW5hbGl6ZUluaXRpYWxDaGlsZHJlbiIsInByZXBhcmVVcGRhdGUiLCJjb21wbGV0ZVdvcmsiLCJlZyIsImNvbW1pdE1vdW50IiwiY29tbWl0VXBkYXRlIiwiY29tbWl0VGV4dFVwZGF0ZSIsImFwcGVuZENoaWxkVG9Db250YWluZXIiLCJpbnNlcnRCZWZvcmUiLCJpbnNlcnRJbkNvbnRhaW5lckJlZm9yZSIsInJlbW92ZUNoaWxkRnJvbUNvbnRhaW5lciIsImNvbW1pdFBsYWNlbWVudCIsImNvbW1pdERlbGV0aW9uIiwiY29tbWl0V29yayIsImNvbW1pdExpZmVDeWNsZXMiLCJjb21taXRBdHRhY2hSZWYiLCJjb21taXREZXRhY2hSZWYiLCJ2ZyIsInNjaGVkdWxlRGVmZXJyZWRDYWxsYmFjayIsInByZXBhcmVGb3JDb21taXQiLCJyZXNldEFmdGVyQ29tbWl0Iiwic2NoZWR1bGVVcGRhdGUiLCJnZXRQcmlvcml0eUNvbnRleHQiLCJ1bmJhdGNoZWRVcGRhdGVzIiwiZmx1c2hTeW5jIiwiZGVmZXJyZWRVcGRhdGVzIiwiaWgiLCJqaCIsIl9wcm9jZXNzQ2hpbGRDb250ZXh0IiwiX2luamVjdEZpYmVyIiwia2giLCJsaCIsIm1oIiwibmgiLCJvaCIsInBoIiwicWgiLCJyaCIsInNoIiwidGgiLCJ1aCIsInZoIiwid2giLCJnZXRTZWxlY3Rpb24iLCJyYW5nZUNvdW50IiwiYW5jaG9yTm9kZSIsImFuY2hvck9mZnNldCIsImZvY3VzTm9kZSIsImZvY3VzT2Zmc2V0IiwiZ2V0UmFuZ2VBdCIsInN0YXJ0Q29udGFpbmVyIiwiZW5kQ29udGFpbmVyIiwiY2xvbmVSYW5nZSIsInNlbGVjdE5vZGVDb250ZW50cyIsInNldEVuZCIsInN0YXJ0T2Zmc2V0IiwiZW5kT2Zmc2V0IiwiY3JlYXRlUmFuZ2UiLCJzZXRTdGFydCIsImNvbGxhcHNlZCIsInJlbW92ZUFsbFJhbmdlcyIsImFkZFJhbmdlIiwieGgiLCJ5aCIsImhhc1NlbGVjdGlvbkNhcGFiaWxpdGllcyIsImNvbnRlbnRFZGl0YWJsZSIsImdldFNlbGVjdGlvbkluZm9ybWF0aW9uIiwiZm9jdXNlZEVsZW0iLCJzZWxlY3Rpb25SYW5nZSIsInJlc3RvcmVTZWxlY3Rpb24iLCJzZXRTZWxlY3Rpb24iLCJzY3JvbGxMZWZ0IiwidG9wIiwic2Nyb2xsVG9wIiwic2VsZWN0aW9uU3RhcnQiLCJzZWxlY3Rpb25FbmQiLCJ6aCIsIkFoIiwiQmgiLCJDaCIsIkRoIiwiX2luamVjdFN0YWNrIiwiRWgiLCJGaCIsIkdoIiwiSGgiLCJJaCIsIkpoIiwiZGlzcGF0Y2hDb25maWciLCJLaCIsIl90YXJnZXRJbnN0IiwiUWgiLCJSaCIsIlNoIiwiVGgiLCJhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzIiwiYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlc1NraXBUYXJnZXQiLCJhY2N1bXVsYXRlRGlyZWN0RGlzcGF0Y2hlcyIsImFjY3VtdWxhdGVFbnRlckxlYXZlRGlzcGF0Y2hlcyIsIl9yb290IiwiX3N0YXJ0VGV4dCIsIl9mYWxsYmFja1RleHQiLCJVaCIsImluaXRpYWxpemUiLCJnZXRUZXh0IiwicmVzZXQiLCJnZXREYXRhIiwiVmgiLCJXaCIsIlhoIiwiZXZlbnRQaGFzZSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwidGltZVN0YW1wIiwiaXNUcnVzdGVkIiwiSW50ZXJmYWNlIiwiaXNEZWZhdWx0UHJldmVudGVkIiwicmV0dXJuVmFsdWUiLCJaaCIsImV2ZW50UG9vbCIsIiRoIiwiZGVzdHJ1Y3RvciIsIlloIiwiZ2V0UG9vbGVkIiwiYWkiLCJiaSIsImNhbmNlbEJ1YmJsZSIsInBlcnNpc3QiLCJhdWdtZW50Q2xhc3MiLCJmaSIsImNpIiwiZGkiLCJlaSIsImRvY3VtZW50TW9kZSIsImdpIiwib3BlcmEiLCJoaSIsImppIiwia2kiLCJiZWZvcmVJbnB1dCIsImJ1YmJsZWQiLCJjYXB0dXJlZCIsImNvbXBvc2l0aW9uRW5kIiwiY29tcG9zaXRpb25TdGFydCIsImNvbXBvc2l0aW9uVXBkYXRlIiwibGkiLCJtaSIsIm5pIiwiZGV0YWlsIiwib2kiLCJyaSIsIndoaWNoIiwicGkiLCJjaGFyIiwicWkiLCJzaSIsImNvbG9yIiwiZGF0ZXRpbWUiLCJlbWFpbCIsInBhc3N3b3JkIiwicmFuZ2UiLCJ0ZWwiLCJ0aSIsInVpIiwiY2hhbmdlIiwidmkiLCJ3aSIsInhpIiwieWkiLCJ6aSIsIkFpIiwiQmkiLCJDaSIsImRldGFjaEV2ZW50IiwiRGkiLCJFaSIsImF0dGFjaEV2ZW50IiwiRmkiLCJHaSIsIkhpIiwiSWkiLCJfaXNJbnB1dEV2ZW50U3VwcG9ydGVkIiwiSmkiLCJ2aWV3IiwiZGVmYXVsdFZpZXciLCJwYXJlbnRXaW5kb3ciLCJLaSIsIkFsdCIsIkNvbnRyb2wiLCJNZXRhIiwiU2hpZnQiLCJMaSIsImdldE1vZGlmaWVyU3RhdGUiLCJNaSIsIk5pIiwic2NyZWVuWCIsInNjcmVlblkiLCJjbGllbnRYIiwiY2xpZW50WSIsInBhZ2VYIiwicGFnZVkiLCJidXR0b25zIiwicmVsYXRlZFRhcmdldCIsImZyb21FbGVtZW50IiwidG9FbGVtZW50IiwiT2kiLCJtb3VzZUVudGVyIiwibW91c2VMZWF2ZSIsIlBpIiwiUWkiLCJSaSIsIlNpIiwiVGkiLCJaaSIsIiRpIiwiYWoiLCJiaiIsImNqIiwiZGoiLCJlaiIsImZqIiwiZ2oiLCJoaiIsImNoYXJDb2RlIiwiYW5pbWF0aW9uTmFtZSIsImVsYXBzZWRUaW1lIiwicHNldWRvRWxlbWVudCIsImNsaXBib2FyZERhdGEiLCJpaiIsIkVzYyIsIlNwYWNlYmFyIiwiTGVmdCIsIlVwIiwiUmlnaHQiLCJEb3duIiwiRGVsIiwiV2luIiwiTWVudSIsIkFwcHMiLCJTY3JvbGwiLCJNb3pQcmludGFibGVLZXkiLCJqaiIsIjE3IiwiMTgiLCIyNyIsIjM0IiwiMzYiLCIzNyIsIjM4IiwiMzkiLCIxMTIiLCIxMTMiLCIxMTQiLCIxMTUiLCIxMTYiLCIxMTciLCIxMTgiLCIxMTkiLCIxMjAiLCIxMjEiLCIxMjIiLCIxMjMiLCIxNDQiLCIxNDUiLCIyMjQiLCJraiIsImxqIiwibWoiLCJuaiIsIm9qIiwiZGF0YVRyYW5zZmVyIiwidG91Y2hlcyIsInRhcmdldFRvdWNoZXMiLCJjaGFuZ2VkVG91Y2hlcyIsImRlbHRhWCIsIndoZWVsRGVsdGFYIiwiZGVsdGFZIiwid2hlZWxEZWx0YVkiLCJ3aGVlbERlbHRhIiwiZGVsdGFaIiwiZGVsdGFNb2RlIiwicGoiLCJxaiIsInJqIiwiU2ltcGxlRXZlbnRQbHVnaW4iLCJFbnRlckxlYXZlRXZlbnRQbHVnaW4iLCJDaGFuZ2VFdmVudFBsdWdpbiIsIlNlbGVjdEV2ZW50UGx1Z2luIiwiQmVmb3JlSW5wdXRFdmVudFBsdWdpbiIsInNqIiwidGoiLCJ1aiIsInZqIiwid2oiLCJhbGxvd0Z1bGxTY3JlZW4iLCJhbGxvd1RyYW5zcGFyZW5jeSIsImFzeW5jIiwiYXV0b1BsYXkiLCJjb2xzIiwiY29udHJvbHMiLCJkZWZlciIsImRvd25sb2FkIiwiZHJhZ2dhYmxlIiwiZm9ybU5vVmFsaWRhdGUiLCJsb29wIiwibXV0ZWQiLCJub1ZhbGlkYXRlIiwib3BlbiIsInBsYXlzSW5saW5lIiwicmV2ZXJzZWQiLCJyb3dzIiwicm93U3BhbiIsInNjb3BlZCIsInNlYW1sZXNzIiwic3BhbiIsInNwZWxsQ2hlY2siLCJpdGVtU2NvcGUiLCJhY2NlcHRDaGFyc2V0IiwiaHRtbEZvciIsImh0dHBFcXVpdiIsImhhc0F0dHJpYnV0ZSIsInZhbGlkaXR5IiwiYmFkSW5wdXQiLCJ4aiIsInlqIiwiemoiLCJhdXRvUmV2ZXJzZSIsImV4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWQiLCJwcmVzZXJ2ZUFscGhhIiwieGxpbmtBY3R1YXRlIiwieGxpbmtBcmNyb2xlIiwieGxpbmtIcmVmIiwieGxpbmtSb2xlIiwieGxpbmtTaG93IiwieGxpbmtUaXRsZSIsInhsaW5rVHlwZSIsInhtbEJhc2UiLCJ4bWxMYW5nIiwieG1sU3BhY2UiLCJBaiIsIkJqIiwiQ2oiLCJEaiIsIkVqIiwiRmoiLCJHaiIsIkhqIiwiSWoiLCJKaiIsIktqIiwiTGoiLCJNaiIsIk5qIiwiT2oiLCJQaiIsIlFqIiwiUmoiLCJTaiIsIlRqIiwiVWoiLCJWaiIsIldqIiwiWGoiLCJmaW5kSG9zdEluc3RhbmNlIiwiWWoiLCJaaiIsImFrIiwiY3JlYXRlQ29udGFpbmVyIiwidXBkYXRlQ29udGFpbmVyIiwiZ2V0UHVibGljUm9vdEluc3RhbmNlIiwiZmluZEhvc3RJbnN0YW5jZVdpdGhOb1BvcnRhbHMiLCJ0YWdOYW1lIiwiY2siLCJfcmVhY3RSb290Q29udGFpbmVyIiwiYmsiLCJkayIsImVrIiwiaHlkcmF0ZSIsInVuc3RhYmxlX2NyZWF0ZVBvcnRhbCIsInVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzIiwidW5zdGFibGVfZGVmZXJyZWRVcGRhdGVzIiwiRXZlbnRQbHVnaW5IdWIiLCJFdmVudFBsdWdpblJlZ2lzdHJ5IiwiRXZlbnRQcm9wYWdhdG9ycyIsIlJlYWN0Q29udHJvbGxlZENvbXBvbmVudCIsIlJlYWN0RE9NQ29tcG9uZW50VHJlZSIsIlJlYWN0RE9NRXZlbnRMaXN0ZW5lciIsImZpbmRGaWJlckJ5SG9zdEluc3RhbmNlIiwiZmluZEhvc3RJbnN0YW5jZUJ5RmliZXIiLCJidW5kbGVUeXBlIiwicmVuZGVyZXJQYWNrYWdlTmFtZSIsIkV4ZWN1dGlvbkVudmlyb25tZW50IiwiY2FuVXNlV29ya2VycyIsIldvcmtlciIsImNhblVzZUV2ZW50TGlzdGVuZXJzIiwiY2FuVXNlVmlld3BvcnQiLCJzY3JlZW4iLCJpc0luV29ya2VyIiwiRXZlbnRMaXN0ZW5lciIsImV2ZW50VHlwZSIsInJlbW92ZSIsInJlZ2lzdGVyRGVmYXVsdCIsImlzVGV4dE5vZGUiLCJjb250YWluc05vZGUiLCJvdXRlck5vZGUiLCJpbm5lck5vZGUiLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsImlzTm9kZSIsIk5vZGUiLCJkb2MiLCJSZWFjdFByb3BUeXBlc1NlY3JldCIsImVtcHR5RnVuY3Rpb25XaXRoUmVzZXQiLCJyZXNldFdhcm5pbmdDYWNoZSIsInByb3BOYW1lIiwicHJvcEZ1bGxOYW1lIiwic2VjcmV0IiwiZ2V0U2hpbSIsIlJlYWN0UHJvcFR5cGVzIiwic3ltYm9sIiwiYW55IiwiYXJyYXlPZiIsImVsZW1lbnRUeXBlIiwib2JqZWN0T2YiLCJjaGVja1Byb3BUeXBlcyIsIlByb3BUeXBlcyIsIm9yaWdpbmFsTW9kdWxlIiwid2VicGFja1BvbHlmaWxsIiwiRXhwZW5zZURhc2hib2FyZFBhZ2UiLCJBZGRFeHBlbnNlUGFnZSIsIkVkaXRFeHBlbnNlUGFnZSIsIkhlbHBQYWdlIiwiTm90Rm91bmRQYWdlIiwiTmF2TGluayIsIkV4cGVuc2VMaXN0IiwiY29ubmVjdCIsImZpbHRlcnMiLCJwYXRocyIsIndlYnBhY2tDb250ZXh0IiwicmVxIiwid2VicGFja0NvbnRleHRSZXNvbHZlIiwiY29kZSIsIkV4cGVuc2VMaXN0RmlsdGVycyIsInNldFN0YXJ0RGF0ZSIsInNldEVuZERhdGUiLCJvblRleHRDaGFuZ2UiLCJzZXRUZXh0RmlsdGVyIiwib25Tb3J0Q2hhbmdlIiwic29ydEJ5RGF0ZSIsInNvcnRCeUFtb3VudCIsIl9yZWFjdFBvcnRhbDIiLCJfZ2V0UmVzcG9uc2l2ZUNvbnRhaW5lclN0eWxlczIiLCJfRGF0ZVJhbmdlUGlja2VySW5wdXRDb250cm9sbGVyMiIsIl9EYXlQaWNrZXJSYW5nZUNvbnRyb2xsZXIyIiwiX0RhdGVSYW5nZVBpY2tlclNoYXBlMiIsImRheVBpY2tlckNvbnRhaW5lclN0eWxlcyIsImlzRGF0ZVJhbmdlUGlja2VySW5wdXRGb2N1c2VkIiwiaXNEYXlQaWNrZXJGb2N1c2VkIiwib25EYXRlUmFuZ2VQaWNrZXJJbnB1dEZvY3VzIiwib25EYXlQaWNrZXJGb2N1cyIsInJlc3BvbnNpdml6ZVBpY2tlclBvc2l0aW9uIiwicmVzaXplSGFuZGxlIiwicGFzc2l2ZSIsImlzQW5jaG9yZWRMZWZ0IiwiY29udGFpbmVyUmVjdCIsImRheVBpY2tlckNvbnRhaW5lciIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInJlbmRlckRheVBpY2tlciIsImluaXRpYWxWaXNpYmxlTW9udGhUaHVuayIsImdldERheVBpY2tlckNvbnRhaW5lckNsYXNzZXMiLCJtYXliZVJlbmRlckRheVBpY2tlcldpdGhQb3J0YWwiLCJub29wVGh1bmsiLCJhbmQiLCJiZXR3ZWVuIiwiYm9vbGVhblNvbWUiLCJjaGlsZHJlbkhhdmVQcm9wWG9yQ2hpbGRyZW4iLCJjaGlsZHJlbk9mIiwiY2hpbGRyZW5PZlR5cGUiLCJjaGlsZHJlblNlcXVlbmNlT2YiLCJjb21wb25lbnRXaXRoTmFtZSIsImRpc2FsbG93ZWRJZiIsImV4cGxpY2l0TnVsbCIsImludGVnZXIiLCJrZXlzT2YiLCJtdXR1YWxseUV4Y2x1c2l2ZVByb3BzIiwibXV0dWFsbHlFeGNsdXNpdmVUcnVlUHJvcHMiLCJuQ2hpbGRyZW4iLCJub25OZWdhdGl2ZU51bWJlciIsIm51bWVyaWNTdHJpbmciLCJvciIsInJlcXVpcmVkQnkiLCJyZXN0cmljdGVkUHJvcCIsInNlcXVlbmNlT2YiLCJzdHJpbmdFbmRzV2l0aCIsInN0cmluZ1N0YXJ0c1dpdGgiLCJ1bmlxdWVBcnJheSIsInVuaXF1ZUFycmF5T2YiLCJ2YWx1ZXNPZiIsIndpdGhTaGFwZSIsImV2ZW50T3B0aW9ucyIsIl9jYW5Vc2VQYXNzaXZlRXZlbnRMaXN0ZW5lcnMyIiwiX2NhblVzZVBhc3NpdmVFdmVudExpc3RlbmVycyIsIm1lbW9pemVkIiwiX2NhblVzZURPTTIiLCJzdXBwb3J0c1Bhc3NpdmVPcHRpb24iLCJ0ZXN0UGFzc2l2ZUV2ZW50TGlzdGVuZXJzIiwiX2NhblVzZURPTSIsIkNBTl9VU0VfRE9NIiwiX2V2ZW50T3B0aW9uc0tleSIsIl9ldmVudE9wdGlvbnNLZXkyIiwiZW5zdXJlQ2FuTXV0YXRlTmV4dEV2ZW50SGFuZGxlcnMiLCJldmVudEhhbmRsZXJzIiwiaGFuZGxlcnMiLCJuZXh0SGFuZGxlcnMiLCJUYXJnZXRFdmVudEhhbmRsZXJzIiwiZXZlbnRzIiwiaGFuZGxlRXZlbnQiLCJnZXRFdmVudEhhbmRsZXJzIiwib25jZSIsInRlc3RNb21lbnQiLCJtZXNzYWdlcyIsImludmFsaWRQcmVkaWNhdGUiLCJpbnZhbGlkUHJvcFZhbGlkYXRvciIsInJlcXVpcmVkQ29yZSIsImludmFsaWRUeXBlQ29yZSIsInByZWRpY2F0ZUZhaWx1cmVDb3JlIiwiYW5vbnltb3VzTWVzc2FnZSIsImJhc2VJbnZhbGlkTWVzc2FnZSIsImNvbnN0cnVjdFByb3BWYWxpZGF0b3JWYXJpYXRpb25zIiwicHJvcFZhbGlkYXRvciIsInJlcXVpcmVkUHJvcFZhbGlkYXRvciIsIndpdGhQcmVkaWNhdGUiLCJiYXNlUHJvcFZhbGlkYXRvciIsImNyZWF0ZUludmFsaWRSZXF1aXJlZEVycm9yTWVzc2FnZSIsInR5cGVWYWxpZGF0b3IiLCJ2YWxpZGF0b3IiLCJtb21lbnRUeXBlIiwicHJvcFZhbHVlIiwicHJvcFR5cGUiLCJwcmVWYWxpZGF0aW9uUmVxdWlyZUNoZWNrVmFsdWUiLCJpc1Byb3BWYWx1ZVVuZGVmaW5lZCIsImlzUHJvcFZhbHVlTnVsbCIsInByZVZhbGlkYXRpb25SZXF1aXJlQ2hlY2siLCJwcmVkaWNhdGVOYW1lIiwiaXNFbnVtZXJhYmxlIiwiaGFzRG9udEVudW1CdWciLCJoYXNQcm90b0VudW1CdWciLCJkb250RW51bXMiLCJlcXVhbHNDb25zdHJ1Y3RvclByb3RvdHlwZSIsImN0b3IiLCJleGNsdWRlZEtleXMiLCIkYXBwbGljYXRpb25DYWNoZSIsIiRjb25zb2xlIiwiJGV4dGVybmFsIiwiJGZyYW1lIiwiJGZyYW1lRWxlbWVudCIsIiRmcmFtZXMiLCIkaW5uZXJIZWlnaHQiLCIkaW5uZXJXaWR0aCIsIiRvbm1vemZ1bGxzY3JlZW5jaGFuZ2UiLCIkb25tb3pmdWxsc2NyZWVuZXJyb3IiLCIkb3V0ZXJIZWlnaHQiLCIkb3V0ZXJXaWR0aCIsIiRwYWdlWE9mZnNldCIsIiRwYWdlWU9mZnNldCIsIiRwYXJlbnQiLCIkc2Nyb2xsTGVmdCIsIiRzY3JvbGxUb3AiLCIkc2Nyb2xsWCIsIiRzY3JvbGxZIiwiJHNlbGYiLCIkd2Via2l0SW5kZXhlZERCIiwiJHdlYmtpdFN0b3JhZ2VJbmZvIiwiJHdpbmRvdyIsImhhc0F1dG9tYXRpb25FcXVhbGl0eUJ1ZyIsImlzQXJndW1lbnRzIiwiaXNTdHJpbmciLCJ0aGVLZXlzIiwic2tpcFByb3RvIiwic2tpcENvbnN0cnVjdG9yIiwiZXF1YWxzQ29uc3RydWN0b3JQcm90b3R5cGVJZk5vdEJ1Z2d5IiwiRVJST1JfTUVTU0FHRSIsImJvdW5kIiwiYmluZGVyIiwiYm91bmRMZW5ndGgiLCJib3VuZEFyZ3MiLCJFbXB0eSIsInRvTnVtYmVyIiwibmF0aXZlTWF4IiwibmF0aXZlTWluIiwibGFzdEFyZ3MiLCJsYXN0VGhpcyIsIm1heFdhaXQiLCJ0aW1lcklkIiwibGFzdENhbGxUaW1lIiwibGFzdEludm9rZVRpbWUiLCJtYXhpbmciLCJpbnZva2VGdW5jIiwidGhpc0FyZyIsImxlYWRpbmdFZGdlIiwidGltZXJFeHBpcmVkIiwic2hvdWxkSW52b2tlIiwidGltZVNpbmNlTGFzdENhbGwiLCJ0cmFpbGluZ0VkZ2UiLCJ0aW1lV2FpdGluZyIsInJlbWFpbmluZ1dhaXQiLCJkZWJvdW5jZWQiLCJpc0ludm9raW5nIiwiY2xlYXJUaW1lb3V0IiwiY2FuY2VsIiwiZmx1c2giLCJpc1N5bWJvbCIsInJlVHJpbSIsInJlSXNCYWRIZXgiLCJyZUlzQmluYXJ5IiwicmVJc09jdGFsIiwiZnJlZVBhcnNlSW50IiwiaXNCaW5hcnkiLCJiYXNlR2V0VGFnIiwiaXNPYmplY3RMaWtlIiwiZ2V0UmF3VGFnIiwib2JqZWN0VG9TdHJpbmciLCJzeW1Ub1N0cmluZ1RhZyIsIm5hdGl2ZU9iamVjdFRvU3RyaW5nIiwiaXNPd24iLCJ1bm1hc2tlZCIsInByZXZEYXlzIiwibmV4dERheXMiLCJmaXJzdERheSIsInRvdGFsRGF5cyIsIndlZWtzSW5Nb250aCIsInBocmFzZSIsIjY3IiwiS2V5Ym9hcmRTaG9ydGN1dFJvdyIsIkRheVBpY2tlcktleWJvYXJkU2hvcnRjdXRzIiwidW5pY29kZSIsImxhYmVsIiwidG9nZ2xlQnV0dG9uVGV4dCIsInNob3dLZXlib2FyZFNob3J0Y3V0c0J1dHRvbiIsIjY4IiwiRGF5UGlja2VyTmF2aWdhdGlvbiIsIl9jaGV2cm9uVXAyIiwiX2NoZXZyb25Eb3duMiIsIm5hdlByZXZJY29uIiwibmF2TmV4dEljb24iLCJpc0RlZmF1bHROYXZQcmV2IiwiaXNEZWZhdWx0TmF2TmV4dCIsIm5hdkNsYXNzTmFtZXMiLCJwcmV2Q2xhc3NOYW1lcyIsIm5leHRDbGFzc05hbWVzIiwiR2V0SW50cmluc2ljIiwib3B0TWVzc2FnZSIsIm9yaWdTeW1ib2wiLCJoYXNTeW1ib2xTaGFtIiwiY2FsbEJpbmQiLCIkaW5kZXhPZiIsImludHJpbnNpYyIsIiRGdW5jdGlvbiIsIiRhcHBseSIsIiRjYWxsIiwiMjEiLCI0MyIsIjU3IiwiNTgiLCI3MiIsIl9TaW5nbGVEYXRlUGlja2VyU2hhcGUyIiwiX1NpbmdsZURhdGVQaWNrZXJJbnB1dDIiLCJfRGF5UGlja2VyU2luZ2xlRGF0ZUNvbnRyb2xsZXIyIiwiaXNJbnB1dEZvY3VzZWQiLCJuZXdEYXRlIiwidjEiLCJ2NCIsInV1aWQiLCJfbm9kZUlkIiwiX2Nsb2Nrc2VxIiwicm5nIiwiYnl0ZXNUb1V1aWQiLCJfbGFzdE1TZWNzIiwiX2xhc3ROU2VjcyIsImNsb2Nrc2VxIiwic2VlZEJ5dGVzIiwibXNlY3MiLCJuc2VjcyIsImR0IiwidGwiLCJ0bWgiLCJvblJlbW92ZSIsImZpbmQiLCJleHBlbnNlUmVkdWNlciIsImZpbHRlclJlZHVjZXIiLCJfX1JFRFVYX0RFVlRPT0xTX0VYVEVOU0lPTl9fIiwiZXhwZW5zZVJlZHVjZXJEZWZhdWx0U3RhdGUiLCJmaWx0ZXJSZWR1Y2VyRGVmYXVsdFN0YXRlIl0sIm1hcHBpbmdzIjoiYUFDRSxJQUFJQSxFQUFtQixHQUd2QixTQUFTQyxFQUFvQkMsR0FHNUIsR0FBR0YsRUFBaUJFLEdBQ25CLE9BQU9GLEVBQWlCRSxHQUFVQyxRQUduQyxJQUFJQyxFQUFTSixFQUFpQkUsR0FBWSxDQUN6Q0csRUFBR0gsRUFDSEksR0FBRyxFQUNISCxRQUFTLElBVVYsT0FOQUksRUFBUUwsR0FBVU0sS0FBS0osRUFBT0QsUUFBU0MsRUFBUUEsRUFBT0QsUUFBU0YsR0FHL0RHLEVBQU9FLEdBQUksRUFHSkYsRUFBT0QsUUFLZkYsRUFBb0JRLEVBQUlGLEVBR3hCTixFQUFvQlMsRUFBSVYsRUFHeEJDLEVBQW9CVSxFQUFJLFNBQVNSLEVBQVNTLEVBQU1DLEdBQzNDWixFQUFvQmEsRUFBRVgsRUFBU1MsSUFDbENHLE9BQU9DLGVBQWViLEVBQVNTLEVBQU0sQ0FBRUssWUFBWSxFQUFNQyxJQUFLTCxLQUtoRVosRUFBb0JrQixFQUFJLFNBQVNoQixHQUNYLG9CQUFYaUIsUUFBMEJBLE9BQU9DLGFBQzFDTixPQUFPQyxlQUFlYixFQUFTaUIsT0FBT0MsWUFBYSxDQUFFQyxNQUFPLFdBRTdEUCxPQUFPQyxlQUFlYixFQUFTLGFBQWMsQ0FBRW1CLE9BQU8sS0FRdkRyQixFQUFvQnNCLEVBQUksU0FBU0QsRUFBT0UsR0FFdkMsR0FEVSxFQUFQQSxJQUFVRixF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QUFXLEdBQ1gsT0FBUSxHQUNSLFVBQVcsR0FDWCxPQUFRLEdBQ1IsVUFBVyxHQUNYLE9BQVEsR0FDUixVQUFXLEdBQ1gsT0FBUSxHQUNSLFVBQVcsR0FDWCxPQUFRLEdBQ1IsVUFBVyxHQUNYLE9BQVEsR0FDUixVQUFXLEdBQ1gsT0FBUSxHQUNSLFVBQVcsR0FDWCxPQUFRLEdBQ1IsVUFBVyxHQUNYLGFBQWMsR0FDZCxVQUFXLEdBQ1gsYUFBYyxHQUNkLFVBQVcsR0FDWCxPQUFRLEdBQ1IsVUFBVyxHQUNYLE9BQVEsR0FDUixVQUFXLEdBQ1gsVUFBVyxHQUNYLGFBQWMsR0FDZCxVQUFXLEdBQ1gsYUFBYyxHQUNkLFVBQVcsR0FDWCxhQUFjLEdBQ2QsVUFBVyxHQUNYLGFBQWMsR0FDZCxVQUFXLEdBQ1gsYUFBYyxHQUNkLE9BQVEsR0FDUixVQUFXLEdBQ1gsT0FBUSxHQUNSLFVBQVcsR0FDWCxhQUFjLEdBQ2QsVUFBVyxHQUNYLE9BQVEsR0FDUixVQUFXLEdBQ1gsT0FBUSxHQUNSLFVBQVcsR0FDWCxPQUFRLEdBQ1IsVUFBVyxHQUNYLE9BQVEsR0FDUixVQUFXLEdBQ1gsT0FBUSxHQUNSLFVBQVcsR0FDWCxPQUFRLEdBQ1IsVUFBVyxHQUNYLGFBQWMsR0FDZCxVQUFXLEdBQ1gsYUFBYyxHQUNkLFVBQVcsR0FDWCxPQUFRLEdBQ1IsVUFBVyxHQUNYLE9BQVEsR0FDUixVQUFXLEdBQ1gsT0FBUSxHQUNSLFVBQVcsR0FDWCxhQUFjLEdBQ2QsZ0JBQWlCLEdBQ2pCLE9BQVEsR0FDUixVQUFXLEdBQ1gsT0FBUSxHQUNSLFVBQVcsR0FDWCxPQUFRLEdBQ1IsVUFBVyxHQUNYLE9BQVEsR0FDUixVQUFXLEdBQ1gsVUFBVyxHQUNYLGFBQWMsR0FDZCxPQUFRLEdBQ1IsVUFBVyxHQUNYLE9BQVEsR0FDUixVQUFXLEdBQ1gsT0FBUSxHQUNSLFVBQVcsR0FDWCxPQUFRLEdBQ1IsVUFBVyxHQUNYLE9BQVEsR0FDUixVQUFXLEdBQ1gsT0FBUSxHQUNSLFVBQVcsR0FDWCxPQUFRLElBQ1IsVUFBVyxJQUNYLE9BQVEsSUFDUixVQUFXLElBQ1gsT0FBUSxJQUNSLFVBQVcsSUFDWCxPQUFRLElBQ1IsVUFBVyxJQUNYLE9BQVEsSUFDUixVQUFXLElBQ1gsT0FBUSxJQUNSLFVBQVcsSUFDWCxPQUFRLElBQ1IsVUFBVyxJQUNYLE9BQVEsSUFDUixVQUFXLElBQ1gsT0FBUSxJQUNSLFVBQVcsSUFDWCxPQUFRLElBQ1IsVUFBVyxJQUNYLE9BQVEsSUFDUixVQUFXLElBQ1gsT0FBUSxJQUNSLFVBQVcsSUFDWCxPQUFRLElBQ1IsVUFBVyxJQUNYLE9BQVEsSUFDUixVQUFXLElBQ1gsT0FBUSxJQUNSLFVBQVcsSUFDWCxhQUFjLElBQ2QsVUFBVyxJQUNYLE9BQVEsSUFDUixVQUFXLElBQ1gsT0FBUSxJQUNSLFVBQVcsSUFDWCxPQUFRLElBQ1IsVUFBVyxJQUNYLE9BQVEsSUFDUixVQUFXLElBQ1gsYUFBYyxJQUNkLFVBQVcsSUFDWCxPQUFRLElBQ1IsVUFBVyxJQUNYLFVBQVcsSUFDWCxhQUFjLElBQ2QsT0FBUSxJQUNSLFVBQVcsSUFDWCxPQUFRLElBQ1IsVUFBVyxJQUNYLGFBQWMsSUFDZCxVQUFXLElBQ1gsT0FBUSxJQUNSLFVBQVcsSUFDWCxPQUFRLElBQ1IsVUFBVyxJQUNYLE9BQVEsSUFDUixVQUFXLElBQ1gsT0FBUSxJQUNSLFVBQVcsSUFDWCxPQUFRLElBQ1IsVUFBVyxJQUNYLE9BQVEsSUFDUixVQUFXLElBQ1gsT0FBUSxJQUNSLFVBQVcsSUFDWCxPQUFRLElBQ1IsVUFBVyxJQUNYLE9BQVEsSUFDUixZQUFhLElBQ2IsZUFBZ0IsSUFDaEIsVUFBVyxJQUNYLE9BQVEsSUFDUixVQUFXLElBQ1gsT0FBUSxJQUNSLFVBQVcsSUFDWCxPQUFRLElBQ1IsVUFBVyxJQUNYLE9BQVEsSUFDUixVQUFXLElBQ1gsT0FBUSxJQUNSLFVBQVcsSUFDWCxRQUFTLElBQ1QsV0FBWSxJQUNaLE9BQVEsSUFDUixVQUFXLElBQ1gsVUFBVyxJQUNYLGFBQWMsSUFDZCxRQUFTLElBQ1QsV0FBWSxJQUNaLE9BQVEsSUFDUixVQUFXLElBQ1gsUUFBUyxJ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ZUFBU2xoQyxRQUFRLFNBQzVCbWhDLFNBQVMsZUFBU3pnQyxNQUFNLFUsVUFFSixXQUE2QyxJQUE1Q3dPLEVBQTRDLHVEQUFwQzB4RixFQUEyQjVoRixFQUFTLGFBQ2pFLE9BQVFBLEVBQU9tUCxNQUNiLElBQUssa0JBQ0gsWUFBV2pmLEVBQVgsQ0FBa0I4eEIsS0FBTWhpQixFQUFPZ2lCLE9BQ2pDLElBQUssaUJBQ0gsWUFBVzl4QixFQUFYLENBQWtCK3hCLE9BQVEsV0FDNUIsSUFBSyxlQUNILFlBQVcveEIsRUFBWCxDQUFrQit4QixPQUFRLFNBQzVCLElBQUssaUJBQ0gsWUFBVy94QixFQUFYLENBQWtCZ3lCLFVBQVdsaUIsRUFBT2tpQixZQUN0QyxJQUFLLGVBQ0gsWUFBV2h5QixFQUFYLENBQWtCaXlCLFFBQVNuaUIsRUFBT21pQixVQUNwQyxRQUNFLE9BQU9qeUIsSyIsImZpbGUiOiJidW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMTk4KTtcbiIsIi8vISBtb21lbnQuanNcbi8vISB2ZXJzaW9uIDogMi4xOC4xXG4vLyEgYXV0aG9ycyA6IFRpbSBXb29kLCBJc2tyZW4gQ2hlcm5ldiwgTW9tZW50LmpzIGNvbnRyaWJ1dG9yc1xuLy8hIGxpY2Vuc2UgOiBNSVRcbi8vISBtb21lbnRqcy5jb21cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCkgOlxuICAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShmYWN0b3J5KSA6XG4gICAgZ2xvYmFsLm1vbWVudCA9IGZhY3RvcnkoKVxufSh0aGlzLCAoZnVuY3Rpb24gKCkgeyAndXNlIHN0cmljdCc7XG5cbnZhciBob29rQ2FsbGJhY2s7XG5cbmZ1bmN0aW9uIGhvb2tzICgpIHtcbiAgICByZXR1cm4gaG9va0NhbGxiYWNrLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG59XG5cbi8vIFRoaXMgaXMgZG9uZSB0byByZWdpc3RlciB0aGUgbWV0aG9kIGNhbGxlZCB3aXRoIG1vbWVudCgpXG4vLyB3aXRob3V0IGNyZWF0aW5nIGNpcmN1bGFyIGRlcGVuZGVuY2llcy5cbmZ1bmN0aW9uIHNldEhvb2tDYWxsYmFjayAoY2FsbGJhY2spIHtcbiAgICBob29rQ2FsbGJhY2sgPSBjYWxsYmFjaztcbn1cblxuZnVuY3Rpb24gaXNBcnJheShpbnB1dCkge1xuICAgIHJldHVybiBpbnB1dCBpbnN0YW5jZW9mIEFycmF5IHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpbnB1dCkgPT09ICdbb2JqZWN0IEFycmF5XSc7XG59XG5cbmZ1bmN0aW9uIGlzT2JqZWN0KGlucHV0KSB7XG4gICAgLy8gSUU4IHdpbGwgdHJlYXQgdW5kZWZpbmVkIGFuZCBudWxsIGFzIG9iamVjdCBpZiBpdCB3YXNuJ3QgZm9yXG4gICAgLy8gaW5wdXQgIT0gbnVsbFxuICAgIHJldHVybiBpbnB1dCAhPSBudWxsICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpbnB1dCkgPT09ICdbb2JqZWN0IE9iamVjdF0nO1xufVxuXG5mdW5jdGlvbiBpc09iamVjdEVtcHR5KG9iaikge1xuICAgIHZhciBrO1xuICAgIGZvciAoayBpbiBvYmopIHtcbiAgICAgICAgLy8gZXZlbiBpZiBpdHMgbm90IG93biBwcm9wZXJ0eSBJJ2Qgc3RpbGwgY2FsbCBpdCBub24tZW1wdHlcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gaXNVbmRlZmluZWQoaW5wdXQpIHtcbiAgICByZXR1cm4gaW5wdXQgPT09IHZvaWQgMDtcbn1cblxuZnVuY3Rpb24gaXNOdW1iZXIoaW5wdXQpIHtcbiAgICByZXR1cm4gdHlwZW9mIGlucHV0ID09PSAnbnVtYmVyJyB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaW5wdXQpID09PSAnW29iamVjdCBOdW1iZXJdJztcbn1cblxuZnVuY3Rpb24gaXNEYXRlKGlucHV0KSB7XG4gICAgcmV0dXJuIGlucHV0IGluc3RhbmNlb2YgRGF0ZSB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaW5wdXQpID09PSAnW29iamVjdCBEYXRlXSc7XG59XG5cbmZ1bmN0aW9uIG1hcChhcnIsIGZuKSB7XG4gICAgdmFyIHJlcyA9IFtdLCBpO1xuICAgIGZvciAoaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgcmVzLnB1c2goZm4oYXJyW2ldLCBpKSk7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG59XG5cbmZ1bmN0aW9uIGhhc093blByb3AoYSwgYikge1xuICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYSwgYik7XG59XG5cbmZ1bmN0aW9uIGV4dGVuZChhLCBiKSB7XG4gICAgZm9yICh2YXIgaSBpbiBiKSB7XG4gICAgICAgIGlmIChoYXNPd25Qcm9wKGIsIGkpKSB7XG4gICAgICAgICAgICBhW2ldID0gYltpXTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmIChoYXNPd25Qcm9wKGIsICd0b1N0cmluZycpKSB7XG4gICAgICAgIGEudG9TdHJpbmcgPSBiLnRvU3RyaW5nO1xuICAgIH1cblxuICAgIGlmIChoYXNPd25Qcm9wKGIsICd2YWx1ZU9mJykpIHtcbiAgICAgICAgYS52YWx1ZU9mID0gYi52YWx1ZU9mO1xuICAgIH1cblxuICAgIHJldHVybiBhO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVVVEMgKGlucHV0LCBmb3JtYXQsIGxvY2FsZSwgc3RyaWN0KSB7XG4gICAgcmV0dXJuIGNyZWF0ZUxvY2FsT3JVVEMoaW5wdXQsIGZvcm1hdCwgbG9jYWxlLCBzdHJpY3QsIHRydWUpLnV0YygpO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0UGFyc2luZ0ZsYWdzKCkge1xuICAgIC8vIFdlIG5lZWQgdG8gZGVlcCBjbG9uZSB0aGlzIG9iamVjdC5cbiAgICByZXR1cm4ge1xuICAgICAgICBlbXB0eSAgICAgICAgICAgOiBmYWxzZSxcbiAgICAgICAgdW51c2VkVG9rZW5zICAgIDogW10sXG4gICAgICAgIHVudXNlZElucHV0ICAgICA6IFtdLFxuICAgICAgICBvdmVyZmxvdyAgICAgICAgOiAtMixcbiAgICAgICAgY2hhcnNMZWZ0T3ZlciAgIDogMCxcbiAgICAgICAgbnVsbElucHV0ICAgICAgIDogZmFsc2UsXG4gICAgICAgIGludmFsaWRNb250aCAgICA6IG51bGwsXG4gICAgICAgIGludmFsaWRGb3JtYXQgICA6IGZhbHNlLFxuICAgICAgICB1c2VySW52YWxpZGF0ZWQgOiBmYWxzZSxcbiAgICAgICAgaXNvICAgICAgICAgICAgIDogZmFsc2UsXG4gICAgICAgIHBhcnNlZERhdGVQYXJ0cyA6IFtdLFxuICAgICAgICBtZXJpZGllbSAgICAgICAgOiBudWxsLFxuICAgICAgICByZmMyODIyICAgICAgICAgOiBmYWxzZSxcbiAgICAgICAgd2Vla2RheU1pc21hdGNoIDogZmFsc2VcbiAgICB9O1xufVxuXG5mdW5jdGlvbiBnZXRQYXJzaW5nRmxhZ3MobSkge1xuICAgIGlmIChtLl9wZiA9PSBudWxsKSB7XG4gICAgICAgIG0uX3BmID0gZGVmYXVsdFBhcnNpbmdGbGFncygpO1xuICAgIH1cbiAgICByZXR1cm4gbS5fcGY7XG59XG5cbnZhciBzb21lO1xuaWYgKEFycmF5LnByb3RvdHlwZS5zb21lKSB7XG4gICAgc29tZSA9IEFycmF5LnByb3RvdHlwZS5zb21lO1xufSBlbHNlIHtcbiAgICBzb21lID0gZnVuY3Rpb24gKGZ1bikge1xuICAgICAgICB2YXIgdCA9IE9iamVjdCh0aGlzKTtcbiAgICAgICAgdmFyIGxlbiA9IHQubGVuZ3RoID4+PiAwO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChpIGluIHQgJiYgZnVuLmNhbGwodGhpcywgdFtpXSwgaSwgdCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xufVxuXG52YXIgc29tZSQxID0gc29tZTtcblxuZnVuY3Rpb24gaXNWYWxpZChtKSB7XG4gICAgaWYgKG0uX2lzVmFsaWQgPT0gbnVsbCkge1xuICAgICAgICB2YXIgZmxhZ3MgPSBnZXRQYXJzaW5nRmxhZ3MobSk7XG4gICAgICAgIHZhciBwYXJzZWRQYXJ0cyA9IHNvbWUkMS5jYWxsKGZsYWdzLnBhcnNlZERhdGVQYXJ0cywgZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgICAgIHJldHVybiBpICE9IG51bGw7XG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgaXNOb3dWYWxpZCA9ICFpc05hTihtLl9kLmdldFRpbWUoKSkgJiZcbiAgICAgICAgICAgIGZsYWdzLm92ZXJmbG93IDwgMCAmJlxuICAgICAgICAgICAgIWZsYWdzLmVtcHR5ICYmXG4gICAgICAgICAgICAhZmxhZ3MuaW52YWxpZE1vbnRoICYmXG4gICAgICAgICAgICAhZmxhZ3MuaW52YWxpZFdlZWtkYXkgJiZcbiAgICAgICAgICAgICFmbGFncy5udWxsSW5wdXQgJiZcbiAgICAgICAgICAgICFmbGFncy5pbnZhbGlkRm9ybWF0ICYmXG4gICAgICAgICAgICAhZmxhZ3MudXNlckludmFsaWRhdGVkICYmXG4gICAgICAgICAgICAoIWZsYWdzLm1lcmlkaWVtIHx8IChmbGFncy5tZXJpZGllbSAmJiBwYXJzZWRQYXJ0cykpO1xuXG4gICAgICAgIGlmIChtLl9zdHJpY3QpIHtcbiAgICAgICAgICAgIGlzTm93VmFsaWQgPSBpc05vd1ZhbGlkICYmXG4gICAgICAgICAgICAgICAgZmxhZ3MuY2hhcnNMZWZ0T3ZlciA9PT0gMCAmJlxuICAgICAgICAgICAgICAgIGZsYWdzLnVudXNlZFRva2Vucy5sZW5ndGggPT09IDAgJiZcbiAgICAgICAgICAgICAgICBmbGFncy5iaWdIb3VyID09PSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoT2JqZWN0LmlzRnJvemVuID09IG51bGwgfHwgIU9iamVjdC5pc0Zyb3plbihtKSkge1xuICAgICAgICAgICAgbS5faXNWYWxpZCA9IGlzTm93VmFsaWQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gaXNOb3dWYWxpZDtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbS5faXNWYWxpZDtcbn1cblxuZnVuY3Rpb24gY3JlYXRlSW52YWxpZCAoZmxhZ3MpIHtcbiAgICB2YXIgbSA9IGNyZWF0ZVVUQyhOYU4pO1xuICAgIGlmIChmbGFncyAhPSBudWxsKSB7XG4gICAgICAgIGV4dGVuZChnZXRQYXJzaW5nRmxhZ3MobSksIGZsYWdzKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGdldFBhcnNpbmdGbGFncyhtKS51c2VySW52YWxpZGF0ZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBtO1xufVxuXG4vLyBQbHVnaW5zIHRoYXQgYWRkIHByb3BlcnRpZXMgc2hvdWxkIGFsc28gYWRkIHRoZSBrZXkgaGVyZSAobnVsbCB2YWx1ZSksXG4vLyBzbyB3ZSBjYW4gcHJvcGVybHkgY2xvbmUgb3Vyc2VsdmVzLlxudmFyIG1vbWVudFByb3BlcnRpZXMgPSBob29rcy5tb21lbnRQcm9wZXJ0aWVzID0gW107XG5cbmZ1bmN0aW9uIGNvcHlDb25maWcodG8sIGZyb20pIHtcbiAgICB2YXIgaSwgcHJvcCwgdmFsO1xuXG4gICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl9pc0FNb21lbnRPYmplY3QpKSB7XG4gICAgICAgIHRvLl9pc0FNb21lbnRPYmplY3QgPSBmcm9tLl9pc0FNb21lbnRPYmplY3Q7XG4gICAgfVxuICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5faSkpIHtcbiAgICAgICAgdG8uX2kgPSBmcm9tLl9pO1xuICAgIH1cbiAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX2YpKSB7XG4gICAgICAgIHRvLl9mID0gZnJvbS5fZjtcbiAgICB9XG4gICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl9sKSkge1xuICAgICAgICB0by5fbCA9IGZyb20uX2w7XG4gICAgfVxuICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5fc3RyaWN0KSkge1xuICAgICAgICB0by5fc3RyaWN0ID0gZnJvbS5fc3RyaWN0O1xuICAgIH1cbiAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX3R6bSkpIHtcbiAgICAgICAgdG8uX3R6bSA9IGZyb20uX3R6bTtcbiAgICB9XG4gICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl9pc1VUQykpIHtcbiAgICAgICAgdG8uX2lzVVRDID0gZnJvbS5faXNVVEM7XG4gICAgfVxuICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5fb2Zmc2V0KSkge1xuICAgICAgICB0by5fb2Zmc2V0ID0gZnJvbS5fb2Zmc2V0O1xuICAgIH1cbiAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX3BmKSkge1xuICAgICAgICB0by5fcGYgPSBnZXRQYXJzaW5nRmxhZ3MoZnJvbSk7XG4gICAgfVxuICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5fbG9jYWxlKSkge1xuICAgICAgICB0by5fbG9jYWxlID0gZnJvbS5fbG9jYWxlO1xuICAgIH1cblxuICAgIGlmIChtb21lbnRQcm9wZXJ0aWVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IG1vbWVudFByb3BlcnRpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHByb3AgPSBtb21lbnRQcm9wZXJ0aWVzW2ldO1xuICAgICAgICAgICAgdmFsID0gZnJvbVtwcm9wXTtcbiAgICAgICAgICAgIGlmICghaXNVbmRlZmluZWQodmFsKSkge1xuICAgICAgICAgICAgICAgIHRvW3Byb3BdID0gdmFsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRvO1xufVxuXG52YXIgdXBkYXRlSW5Qcm9ncmVzcyA9IGZhbHNlO1xuXG4vLyBNb21lbnQgcHJvdG90eXBlIG9iamVjdFxuZnVuY3Rpb24gTW9tZW50KGNvbmZpZykge1xuICAgIGNvcHlDb25maWcodGhpcywgY29uZmlnKTtcbiAgICB0aGlzLl9kID0gbmV3IERhdGUoY29uZmlnLl9kICE9IG51bGwgPyBjb25maWcuX2QuZ2V0VGltZSgpIDogTmFOKTtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgIHRoaXMuX2QgPSBuZXcgRGF0ZShOYU4pO1xuICAgIH1cbiAgICAvLyBQcmV2ZW50IGluZmluaXRlIGxvb3AgaW4gY2FzZSB1cGRhdGVPZmZzZXQgY3JlYXRlcyBuZXcgbW9tZW50XG4gICAgLy8gb2JqZWN0cy5cbiAgICBpZiAodXBkYXRlSW5Qcm9ncmVzcyA9PT0gZmFsc2UpIHtcbiAgICAgICAgdXBkYXRlSW5Qcm9ncmVzcyA9IHRydWU7XG4gICAgICAgIGhvb2tzLnVwZGF0ZU9mZnNldCh0aGlzKTtcbiAgICAgICAgdXBkYXRlSW5Qcm9ncmVzcyA9IGZhbHNlO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gaXNNb21lbnQgKG9iaikge1xuICAgIHJldHVybiBvYmogaW5zdGFuY2VvZiBNb21lbnQgfHwgKG9iaiAhPSBudWxsICYmIG9iai5faXNBTW9tZW50T2JqZWN0ICE9IG51bGwpO1xufVxuXG5mdW5jdGlvbiBhYnNGbG9vciAobnVtYmVyKSB7XG4gICAgaWYgKG51bWJlciA8IDApIHtcbiAgICAgICAgLy8gLTAgLT4gMFxuICAgICAgICByZXR1cm4gTWF0aC5jZWlsKG51bWJlcikgfHwgMDtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihudW1iZXIpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gdG9JbnQoYXJndW1lbnRGb3JDb2VyY2lvbikge1xuICAgIHZhciBjb2VyY2VkTnVtYmVyID0gK2FyZ3VtZW50Rm9yQ29lcmNpb24sXG4gICAgICAgIHZhbHVlID0gMDtcblxuICAgIGlmIChjb2VyY2VkTnVtYmVyICE9PSAwICYmIGlzRmluaXRlKGNvZXJjZWROdW1iZXIpKSB7XG4gICAgICAgIHZhbHVlID0gYWJzRmxvb3IoY29lcmNlZE51bWJlcik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbHVlO1xufVxuXG4vLyBjb21wYXJlIHR3byBhcnJheXMsIHJldHVybiB0aGUgbnVtYmVyIG9mIGRpZmZlcmVuY2VzXG5mdW5jdGlvbiBjb21wYXJlQXJyYXlzKGFycmF5MSwgYXJyYXkyLCBkb250Q29udmVydCkge1xuICAgIHZhciBsZW4gPSBNYXRoLm1pbihhcnJheTEubGVuZ3RoLCBhcnJheTIubGVuZ3RoKSxcbiAgICAgICAgbGVuZ3RoRGlmZiA9IE1hdGguYWJzKGFycmF5MS5sZW5ndGggLSBhcnJheTIubGVuZ3RoKSxcbiAgICAgICAgZGlmZnMgPSAwLFxuICAgICAgICBpO1xuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBpZiAoKGRvbnRDb252ZXJ0ICYmIGFycmF5MVtpXSAhPT0gYXJyYXkyW2ldKSB8fFxuICAgICAgICAgICAgKCFkb250Q29udmVydCAmJiB0b0ludChhcnJheTFbaV0pICE9PSB0b0ludChhcnJheTJbaV0pKSkge1xuICAgICAgICAgICAgZGlmZnMrKztcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZGlmZnMgKyBsZW5ndGhEaWZmO1xufVxuXG5mdW5jdGlvbiB3YXJuKG1zZykge1xuICAgIGlmIChob29rcy5zdXBwcmVzc0RlcHJlY2F0aW9uV2FybmluZ3MgPT09IGZhbHNlICYmXG4gICAgICAgICAgICAodHlwZW9mIGNvbnNvbGUgIT09ICAndW5kZWZpbmVkJykgJiYgY29uc29sZS53YXJuKSB7XG4gICAgICAgIGNvbnNvbGUud2FybignRGVwcmVjYXRpb24gd2FybmluZzogJyArIG1zZyk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkZXByZWNhdGUobXNnLCBmbikge1xuICAgIHZhciBmaXJzdFRpbWUgPSB0cnVlO1xuXG4gICAgcmV0dXJuIGV4dGVuZChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChob29rcy5kZXByZWNhdGlvbkhhbmRsZXIgIT0gbnVsbCkge1xuICAgICAgICAgICAgaG9va3MuZGVwcmVjYXRpb25IYW5kbGVyKG51bGwsIG1zZyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZpcnN0VGltZSkge1xuICAgICAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgICAgIHZhciBhcmc7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGFyZyA9ICcnO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgYXJndW1lbnRzW2ldID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgICAgICBhcmcgKz0gJ1xcblsnICsgaSArICddICc7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBhcmd1bWVudHNbMF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZyArPSBrZXkgKyAnOiAnICsgYXJndW1lbnRzWzBdW2tleV0gKyAnLCAnO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGFyZyA9IGFyZy5zbGljZSgwLCAtMik7IC8vIFJlbW92ZSB0cmFpbGluZyBjb21tYSBhbmQgc3BhY2VcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBhcmcgPSBhcmd1bWVudHNbaV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGFyZ3MucHVzaChhcmcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgd2Fybihtc2cgKyAnXFxuQXJndW1lbnRzOiAnICsgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJncykuam9pbignJykgKyAnXFxuJyArIChuZXcgRXJyb3IoKSkuc3RhY2spO1xuICAgICAgICAgICAgZmlyc3RUaW1lID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfSwgZm4pO1xufVxuXG52YXIgZGVwcmVjYXRpb25zID0ge307XG5cbmZ1bmN0aW9uIGRlcHJlY2F0ZVNpbXBsZShuYW1lLCBtc2cpIHtcbiAgICBpZiAoaG9va3MuZGVwcmVjYXRpb25IYW5kbGVyICE9IG51bGwpIHtcbiAgICAgICAgaG9va3MuZGVwcmVjYXRpb25IYW5kbGVyKG5hbWUsIG1zZyk7XG4gICAgfVxuICAgIGlmICghZGVwcmVjYXRpb25zW25hbWVdKSB7XG4gICAgICAgIHdhcm4obXNnKTtcbiAgICAgICAgZGVwcmVjYXRpb25zW25hbWVdID0gdHJ1ZTtcbiAgICB9XG59XG5cbmhvb2tzLnN1cHByZXNzRGVwcmVjYXRpb25XYXJuaW5ncyA9IGZhbHNlO1xuaG9va3MuZGVwcmVjYXRpb25IYW5kbGVyID0gbnVsbDtcblxuZnVuY3Rpb24gaXNGdW5jdGlvbihpbnB1dCkge1xuICAgIHJldHVybiBpbnB1dCBpbnN0YW5jZW9mIEZ1bmN0aW9uIHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpbnB1dCkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG59XG5cbmZ1bmN0aW9uIHNldCAoY29uZmlnKSB7XG4gICAgdmFyIHByb3AsIGk7XG4gICAgZm9yIChpIGluIGNvbmZpZykge1xuICAgICAgICBwcm9wID0gY29uZmlnW2ldO1xuICAgICAgICBpZiAoaXNGdW5jdGlvbihwcm9wKSkge1xuICAgICAgICAgICAgdGhpc1tpXSA9IHByb3A7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzWydfJyArIGldID0gcHJvcDtcbiAgICAgICAgfVxuICAgIH1cbiAgICB0aGlzLl9jb25maWcgPSBjb25maWc7XG4gICAgLy8gTGVuaWVudCBvcmRpbmFsIHBhcnNpbmcgYWNjZXB0cyBqdXN0IGEgbnVtYmVyIGluIGFkZGl0aW9uIHRvXG4gICAgLy8gbnVtYmVyICsgKHBvc3NpYmx5KSBzdHVmZiBjb21pbmcgZnJvbSBfZGF5T2ZNb250aE9yZGluYWxQYXJzZS5cbiAgICAvLyBUT0RPOiBSZW1vdmUgXCJvcmRpbmFsUGFyc2VcIiBmYWxsYmFjayBpbiBuZXh0IG1ham9yIHJlbGVhc2UuXG4gICAgdGhpcy5fZGF5T2ZNb250aE9yZGluYWxQYXJzZUxlbmllbnQgPSBuZXcgUmVnRXhwKFxuICAgICAgICAodGhpcy5fZGF5T2ZNb250aE9yZGluYWxQYXJzZS5zb3VyY2UgfHwgdGhpcy5fb3JkaW5hbFBhcnNlLnNvdXJjZSkgK1xuICAgICAgICAgICAgJ3wnICsgKC9cXGR7MSwyfS8pLnNvdXJjZSk7XG59XG5cbmZ1bmN0aW9uIG1lcmdlQ29uZmlncyhwYXJlbnRDb25maWcsIGNoaWxkQ29uZmlnKSB7XG4gICAgdmFyIHJlcyA9IGV4dGVuZCh7fSwgcGFyZW50Q29uZmlnKSwgcHJvcDtcbiAgICBmb3IgKHByb3AgaW4gY2hpbGRDb25maWcpIHtcbiAgICAgICAgaWYgKGhhc093blByb3AoY2hpbGRDb25maWcsIHByb3ApKSB7XG4gICAgICAgICAgICBpZiAoaXNPYmplY3QocGFyZW50Q29uZmlnW3Byb3BdKSAmJiBpc09iamVjdChjaGlsZENvbmZpZ1twcm9wXSkpIHtcbiAgICAgICAgICAgICAgICByZXNbcHJvcF0gPSB7fTtcbiAgICAgICAgICAgICAgICBleHRlbmQocmVzW3Byb3BdLCBwYXJlbnRDb25maWdbcHJvcF0pO1xuICAgICAgICAgICAgICAgIGV4dGVuZChyZXNbcHJvcF0sIGNoaWxkQ29uZmlnW3Byb3BdKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY2hpbGRDb25maWdbcHJvcF0gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJlc1twcm9wXSA9IGNoaWxkQ29uZmlnW3Byb3BdO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBkZWxldGUgcmVzW3Byb3BdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGZvciAocHJvcCBpbiBwYXJlbnRDb25maWcpIHtcbiAgICAgICAgaWYgKGhhc093blByb3AocGFyZW50Q29uZmlnLCBwcm9wKSAmJlxuICAgICAgICAgICAgICAgICFoYXNPd25Qcm9wKGNoaWxkQ29uZmlnLCBwcm9wKSAmJlxuICAgICAgICAgICAgICAgIGlzT2JqZWN0KHBhcmVudENvbmZpZ1twcm9wXSkpIHtcbiAgICAgICAgICAgIC8vIG1ha2Ugc3VyZSBjaGFuZ2VzIHRvIHByb3BlcnRpZXMgZG9uJ3QgbW9kaWZ5IHBhcmVudCBjb25maWdcbiAgICAgICAgICAgIHJlc1twcm9wXSA9IGV4dGVuZCh7fSwgcmVzW3Byb3BdKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzO1xufVxuXG5mdW5jdGlvbiBMb2NhbGUoY29uZmlnKSB7XG4gICAgaWYgKGNvbmZpZyAhPSBudWxsKSB7XG4gICAgICAgIHRoaXMuc2V0KGNvbmZpZyk7XG4gICAgfVxufVxuXG52YXIga2V5cztcblxuaWYgKE9iamVjdC5rZXlzKSB7XG4gICAga2V5cyA9IE9iamVjdC5rZXlzO1xufSBlbHNlIHtcbiAgICBrZXlzID0gZnVuY3Rpb24gKG9iaikge1xuICAgICAgICB2YXIgaSwgcmVzID0gW107XG4gICAgICAgIGZvciAoaSBpbiBvYmopIHtcbiAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wKG9iaiwgaSkpIHtcbiAgICAgICAgICAgICAgICByZXMucHVzaChpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH07XG59XG5cbnZhciBrZXlzJDEgPSBrZXlzO1xuXG52YXIgZGVmYXVsdENhbGVuZGFyID0ge1xuICAgIHNhbWVEYXkgOiAnW1RvZGF5IGF0XSBMVCcsXG4gICAgbmV4dERheSA6ICdbVG9tb3Jyb3cgYXRdIExUJyxcbiAgICBuZXh0V2VlayA6ICdkZGRkIFthdF0gTFQnLFxuICAgIGxhc3REYXkgOiAnW1llc3RlcmRheSBhdF0gTFQnLFxuICAgIGxhc3RXZWVrIDogJ1tMYXN0XSBkZGRkIFthdF0gTFQnLFxuICAgIHNhbWVFbHNlIDogJ0wnXG59O1xuXG5mdW5jdGlvbiBjYWxlbmRhciAoa2V5LCBtb20sIG5vdykge1xuICAgIHZhciBvdXRwdXQgPSB0aGlzLl9jYWxlbmRhcltrZXldIHx8IHRoaXMuX2NhbGVuZGFyWydzYW1lRWxzZSddO1xuICAgIHJldHVybiBpc0Z1bmN0aW9uKG91dHB1dCkgPyBvdXRwdXQuY2FsbChtb20sIG5vdykgOiBvdXRwdXQ7XG59XG5cbnZhciBkZWZhdWx0TG9uZ0RhdGVGb3JtYXQgPSB7XG4gICAgTFRTICA6ICdoOm1tOnNzIEEnLFxuICAgIExUICAgOiAnaDptbSBBJyxcbiAgICBMICAgIDogJ01NL0REL1lZWVknLFxuICAgIExMICAgOiAnTU1NTSBELCBZWVlZJyxcbiAgICBMTEwgIDogJ01NTU0gRCwgWVlZWSBoOm1tIEEnLFxuICAgIExMTEwgOiAnZGRkZCwgTU1NTSBELCBZWVlZIGg6bW0gQSdcbn07XG5cbmZ1bmN0aW9uIGxvbmdEYXRlRm9ybWF0IChrZXkpIHtcbiAgICB2YXIgZm9ybWF0ID0gdGhpcy5fbG9uZ0RhdGVGb3JtYXRba2V5XSxcbiAgICAgICAgZm9ybWF0VXBwZXIgPSB0aGlzLl9sb25nRGF0ZUZvcm1hdFtrZXkudG9VcHBlckNhc2UoKV07XG5cbiAgICBpZiAoZm9ybWF0IHx8ICFmb3JtYXRVcHBlcikge1xuICAgICAgICByZXR1cm4gZm9ybWF0O1xuICAgIH1cblxuICAgIHRoaXMuX2xvbmdEYXRlRm9ybWF0W2tleV0gPSBmb3JtYXRVcHBlci5yZXBsYWNlKC9NTU1NfE1NfEREfGRkZGQvZywgZnVuY3Rpb24gKHZhbCkge1xuICAgICAgICByZXR1cm4gdmFsLnNsaWNlKDEpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRoaXMuX2xvbmdEYXRlRm9ybWF0W2tleV07XG59XG5cbnZhciBkZWZhdWx0SW52YWxpZERhdGUgPSAnSW52YWxpZCBkYXRlJztcblxuZnVuY3Rpb24gaW52YWxpZERhdGUgKCkge1xuICAgIHJldHVybiB0aGlzLl9pbnZhbGlkRGF0ZTtcbn1cblxudmFyIGRlZmF1bHRPcmRpbmFsID0gJyVkJztcbnZhciBkZWZhdWx0RGF5T2ZNb250aE9yZGluYWxQYXJzZSA9IC9cXGR7MSwyfS87XG5cbmZ1bmN0aW9uIG9yZGluYWwgKG51bWJlcikge1xuICAgIHJldHVybiB0aGlzLl9vcmRpbmFsLnJlcGxhY2UoJyVkJywgbnVtYmVyKTtcbn1cblxudmFyIGRlZmF1bHRSZWxhdGl2ZVRpbWUgPSB7XG4gICAgZnV0dXJlIDogJ2luICVzJyxcbiAgICBwYXN0ICAgOiAnJXMgYWdvJyxcbiAgICBzICA6ICdhIGZldyBzZWNvbmRzJyxcbiAgICBzcyA6ICclZCBzZWNvbmRzJyxcbiAgICBtICA6ICdhIG1pbnV0ZScsXG4gICAgbW0gOiAnJWQgbWludXRlcycsXG4gICAgaCAgOiAnYW4gaG91cicsXG4gICAgaGggOiAnJWQgaG91cnMnLFxuICAgIGQgIDogJ2EgZGF5JyxcbiAgICBkZCA6ICclZCBkYXlzJyxcbiAgICBNICA6ICdhIG1vbnRoJyxcbiAgICBNTSA6ICclZCBtb250aHMnLFxuICAgIHkgIDogJ2EgeWVhcicsXG4gICAgeXkgOiAnJWQgeWVhcnMnXG59O1xuXG5mdW5jdGlvbiByZWxhdGl2ZVRpbWUgKG51bWJlciwgd2l0aG91dFN1ZmZpeCwgc3RyaW5nLCBpc0Z1dHVyZSkge1xuICAgIHZhciBvdXRwdXQgPSB0aGlzLl9yZWxhdGl2ZVRpbWVbc3RyaW5nXTtcbiAgICByZXR1cm4gKGlzRnVuY3Rpb24ob3V0cHV0KSkgP1xuICAgICAgICBvdXRwdXQobnVtYmVyLCB3aXRob3V0U3VmZml4LCBzdHJpbmcsIGlzRnV0dXJlKSA6XG4gICAgICAgIG91dHB1dC5yZXBsYWNlKC8lZC9pLCBudW1iZXIpO1xufVxuXG5mdW5jdGlvbiBwYXN0RnV0dXJlIChkaWZmLCBvdXRwdXQpIHtcbiAgICB2YXIgZm9ybWF0ID0gdGhpcy5fcmVsYXRpdmVUaW1lW2RpZmYgPiAwID8gJ2Z1dHVyZScgOiAncGFzdCddO1xuICAgIHJldHVybiBpc0Z1bmN0aW9uKGZvcm1hdCkgPyBmb3JtYXQob3V0cHV0KSA6IGZvcm1hdC5yZXBsYWNlKC8lcy9pLCBvdXRwdXQpO1xufVxuXG52YXIgYWxpYXNlcyA9IHt9O1xuXG5mdW5jdGlvbiBhZGRVbml0QWxpYXMgKHVuaXQsIHNob3J0aGFuZCkge1xuICAgIHZhciBsb3dlckNhc2UgPSB1bml0LnRvTG93ZXJDYXNlKCk7XG4gICAgYWxpYXNlc1tsb3dlckNhc2VdID0gYWxpYXNlc1tsb3dlckNhc2UgKyAncyddID0gYWxpYXNlc1tzaG9ydGhhbmRdID0gdW5pdDtcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplVW5pdHModW5pdHMpIHtcbiAgICByZXR1cm4gdHlwZW9mIHVuaXRzID09PSAnc3RyaW5nJyA/IGFsaWFzZXNbdW5pdHNdIHx8IGFsaWFzZXNbdW5pdHMudG9Mb3dlckNhc2UoKV0gOiB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZU9iamVjdFVuaXRzKGlucHV0T2JqZWN0KSB7XG4gICAgdmFyIG5vcm1hbGl6ZWRJbnB1dCA9IHt9LFxuICAgICAgICBub3JtYWxpemVkUHJvcCxcbiAgICAgICAgcHJvcDtcblxuICAgIGZvciAocHJvcCBpbiBpbnB1dE9iamVjdCkge1xuICAgICAgICBpZiAoaGFzT3duUHJvcChpbnB1dE9iamVjdCwgcHJvcCkpIHtcbiAgICAgICAgICAgIG5vcm1hbGl6ZWRQcm9wID0gbm9ybWFsaXplVW5pdHMocHJvcCk7XG4gICAgICAgICAgICBpZiAobm9ybWFsaXplZFByb3ApIHtcbiAgICAgICAgICAgICAgICBub3JtYWxpemVkSW5wdXRbbm9ybWFsaXplZFByb3BdID0gaW5wdXRPYmplY3RbcHJvcF07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbm9ybWFsaXplZElucHV0O1xufVxuXG52YXIgcHJpb3JpdGllcyA9IHt9O1xuXG5mdW5jdGlvbiBhZGRVbml0UHJpb3JpdHkodW5pdCwgcHJpb3JpdHkpIHtcbiAgICBwcmlvcml0aWVzW3VuaXRdID0gcHJpb3JpdHk7XG59XG5cbmZ1bmN0aW9uIGdldFByaW9yaXRpemVkVW5pdHModW5pdHNPYmopIHtcbiAgICB2YXIgdW5pdHMgPSBbXTtcbiAgICBmb3IgKHZhciB1IGluIHVuaXRzT2JqKSB7XG4gICAgICAgIHVuaXRzLnB1c2goe3VuaXQ6IHUsIHByaW9yaXR5OiBwcmlvcml0aWVzW3VdfSk7XG4gICAgfVxuICAgIHVuaXRzLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIGEucHJpb3JpdHkgLSBiLnByaW9yaXR5O1xuICAgIH0pO1xuICAgIHJldHVybiB1bml0cztcbn1cblxuZnVuY3Rpb24gbWFrZUdldFNldCAodW5pdCwga2VlcFRpbWUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICAgICAgICBzZXQkMSh0aGlzLCB1bml0LCB2YWx1ZSk7XG4gICAgICAgICAgICBob29rcy51cGRhdGVPZmZzZXQodGhpcywga2VlcFRpbWUpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0KHRoaXMsIHVuaXQpO1xuICAgICAgICB9XG4gICAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0IChtb20sIHVuaXQpIHtcbiAgICByZXR1cm4gbW9tLmlzVmFsaWQoKSA/XG4gICAgICAgIG1vbS5fZFsnZ2V0JyArIChtb20uX2lzVVRDID8gJ1VUQycgOiAnJykgKyB1bml0XSgpIDogTmFOO1xufVxuXG5mdW5jdGlvbiBzZXQkMSAobW9tLCB1bml0LCB2YWx1ZSkge1xuICAgIGlmIChtb20uaXNWYWxpZCgpKSB7XG4gICAgICAgIG1vbS5fZFsnc2V0JyArIChtb20uX2lzVVRDID8gJ1VUQycgOiAnJykgKyB1bml0XSh2YWx1ZSk7XG4gICAgfVxufVxuXG4vLyBNT01FTlRTXG5cbmZ1bmN0aW9uIHN0cmluZ0dldCAodW5pdHMpIHtcbiAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKTtcbiAgICBpZiAoaXNGdW5jdGlvbih0aGlzW3VuaXRzXSkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbdW5pdHNdKCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xufVxuXG5cbmZ1bmN0aW9uIHN0cmluZ1NldCAodW5pdHMsIHZhbHVlKSB7XG4gICAgaWYgKHR5cGVvZiB1bml0cyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgdW5pdHMgPSBub3JtYWxpemVPYmplY3RVbml0cyh1bml0cyk7XG4gICAgICAgIHZhciBwcmlvcml0aXplZCA9IGdldFByaW9yaXRpemVkVW5pdHModW5pdHMpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByaW9yaXRpemVkLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzW3ByaW9yaXRpemVkW2ldLnVuaXRdKHVuaXRzW3ByaW9yaXRpemVkW2ldLnVuaXRdKTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpO1xuICAgICAgICBpZiAoaXNGdW5jdGlvbih0aGlzW3VuaXRzXSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzW3VuaXRzXSh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIHplcm9GaWxsKG51bWJlciwgdGFyZ2V0TGVuZ3RoLCBmb3JjZVNpZ24pIHtcbiAgICB2YXIgYWJzTnVtYmVyID0gJycgKyBNYXRoLmFicyhudW1iZXIpLFxuICAgICAgICB6ZXJvc1RvRmlsbCA9IHRhcmdldExlbmd0aCAtIGFic051bWJlci5sZW5ndGgsXG4gICAgICAgIHNpZ24gPSBudW1iZXIgPj0gMDtcbiAgICByZXR1cm4gKHNpZ24gPyAoZm9yY2VTaWduID8gJysnIDogJycpIDogJy0nKSArXG4gICAgICAgIE1hdGgucG93KDEwLCBNYXRoLm1heCgwLCB6ZXJvc1RvRmlsbCkpLnRvU3RyaW5nKCkuc3Vic3RyKDEpICsgYWJzTnVtYmVyO1xufVxuXG52YXIgZm9ybWF0dGluZ1Rva2VucyA9IC8oXFxbW15cXFtdKlxcXSl8KFxcXFwpPyhbSGhdbW0oc3MpP3xNb3xNTT9NP00/fERvfERERG98REQ/RD9EP3xkZGQ/ZD98ZG8/fHdbb3x3XT98V1tvfFddP3xRbz98WVlZWVlZfFlZWVlZfFlZWVl8WVl8Z2coZ2dnPyk/fEdHKEdHRz8pP3xlfEV8YXxBfGhoP3xISD98a2s/fG1tP3xzcz98U3sxLDl9fHh8WHx6ej98Wlo/fC4pL2c7XG5cbnZhciBsb2NhbEZvcm1hdHRpbmdUb2tlbnMgPSAvKFxcW1teXFxbXSpcXF0pfChcXFxcKT8oTFRTfExUfExMP0w/TD98bHsxLDR9KS9nO1xuXG52YXIgZm9ybWF0RnVuY3Rpb25zID0ge307XG5cbnZhciBmb3JtYXRUb2tlbkZ1bmN0aW9ucyA9IHt9O1xuXG4vLyB0b2tlbjogICAgJ00nXG4vLyBwYWRkZWQ6ICAgWydNTScsIDJdXG4vLyBvcmRpbmFsOiAgJ01vJ1xuLy8gY2FsbGJhY2s6IGZ1bmN0aW9uICgpIHsgdGhpcy5tb250aCgpICsgMSB9XG5mdW5jdGlvbiBhZGRGb3JtYXRUb2tlbiAodG9rZW4sIHBhZGRlZCwgb3JkaW5hbCwgY2FsbGJhY2spIHtcbiAgICB2YXIgZnVuYyA9IGNhbGxiYWNrO1xuICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGZ1bmMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpc1tjYWxsYmFja10oKTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgaWYgKHRva2VuKSB7XG4gICAgICAgIGZvcm1hdFRva2VuRnVuY3Rpb25zW3Rva2VuXSA9IGZ1bmM7XG4gICAgfVxuICAgIGlmIChwYWRkZWQpIHtcbiAgICAgICAgZm9ybWF0VG9rZW5GdW5jdGlvbnNbcGFkZGVkWzBdXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB6ZXJvRmlsbChmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksIHBhZGRlZFsxXSwgcGFkZGVkWzJdKTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgaWYgKG9yZGluYWwpIHtcbiAgICAgICAgZm9ybWF0VG9rZW5GdW5jdGlvbnNbb3JkaW5hbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkub3JkaW5hbChmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksIHRva2VuKTtcbiAgICAgICAgfTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUZvcm1hdHRpbmdUb2tlbnMoaW5wdXQpIHtcbiAgICBpZiAoaW5wdXQubWF0Y2goL1xcW1tcXHNcXFNdLykpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0LnJlcGxhY2UoL15cXFt8XFxdJC9nLCAnJyk7XG4gICAgfVxuICAgIHJldHVybiBpbnB1dC5yZXBsYWNlKC9cXFxcL2csICcnKTtcbn1cblxuZnVuY3Rpb24gbWFrZUZvcm1hdEZ1bmN0aW9uKGZvcm1hdCkge1xuICAgIHZhciBhcnJheSA9IGZvcm1hdC5tYXRjaChmb3JtYXR0aW5nVG9rZW5zKSwgaSwgbGVuZ3RoO1xuXG4gICAgZm9yIChpID0gMCwgbGVuZ3RoID0gYXJyYXkubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGZvcm1hdFRva2VuRnVuY3Rpb25zW2FycmF5W2ldXSkge1xuICAgICAgICAgICAgYXJyYXlbaV0gPSBmb3JtYXRUb2tlbkZ1bmN0aW9uc1thcnJheVtpXV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhcnJheVtpXSA9IHJlbW92ZUZvcm1hdHRpbmdUb2tlbnMoYXJyYXlbaV0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChtb20pIHtcbiAgICAgICAgdmFyIG91dHB1dCA9ICcnLCBpO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIG91dHB1dCArPSBpc0Z1bmN0aW9uKGFycmF5W2ldKSA/IGFycmF5W2ldLmNhbGwobW9tLCBmb3JtYXQpIDogYXJyYXlbaV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICB9O1xufVxuXG4vLyBmb3JtYXQgZGF0ZSB1c2luZyBuYXRpdmUgZGF0ZSBvYmplY3RcbmZ1bmN0aW9uIGZvcm1hdE1vbWVudChtLCBmb3JtYXQpIHtcbiAgICBpZiAoIW0uaXNWYWxpZCgpKSB7XG4gICAgICAgIHJldHVybiBtLmxvY2FsZURhdGEoKS5pbnZhbGlkRGF0ZSgpO1xuICAgIH1cblxuICAgIGZvcm1hdCA9IGV4cGFuZEZvcm1hdChmb3JtYXQsIG0ubG9jYWxlRGF0YSgpKTtcbiAgICBmb3JtYXRGdW5jdGlvbnNbZm9ybWF0XSA9IGZvcm1hdEZ1bmN0aW9uc1tmb3JtYXRdIHx8IG1ha2VGb3JtYXRGdW5jdGlvbihmb3JtYXQpO1xuXG4gICAgcmV0dXJuIGZvcm1hdEZ1bmN0aW9uc1tmb3JtYXRdKG0pO1xufVxuXG5mdW5jdGlvbiBleHBhbmRGb3JtYXQoZm9ybWF0LCBsb2NhbGUpIHtcbiAgICB2YXIgaSA9IDU7XG5cbiAgICBmdW5jdGlvbiByZXBsYWNlTG9uZ0RhdGVGb3JtYXRUb2tlbnMoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS5sb25nRGF0ZUZvcm1hdChpbnB1dCkgfHwgaW5wdXQ7XG4gICAgfVxuXG4gICAgbG9jYWxGb3JtYXR0aW5nVG9rZW5zLmxhc3RJbmRleCA9IDA7XG4gICAgd2hpbGUgKGkgPj0gMCAmJiBsb2NhbEZvcm1hdHRpbmdUb2tlbnMudGVzdChmb3JtYXQpKSB7XG4gICAgICAgIGZvcm1hdCA9IGZvcm1hdC5yZXBsYWNlKGxvY2FsRm9ybWF0dGluZ1Rva2VucywgcmVwbGFjZUxvbmdEYXRlRm9ybWF0VG9rZW5zKTtcbiAgICAgICAgbG9jYWxGb3JtYXR0aW5nVG9rZW5zLmxhc3RJbmRleCA9IDA7XG4gICAgICAgIGkgLT0gMTtcbiAgICB9XG5cbiAgICByZXR1cm4gZm9ybWF0O1xufVxuXG52YXIgbWF0Y2gxICAgICAgICAgPSAvXFxkLzsgICAgICAgICAgICAvLyAgICAgICAwIC0gOVxudmFyIG1hdGNoMiAgICAgICAgID0gL1xcZFxcZC87ICAgICAgICAgIC8vICAgICAgMDAgLSA5OVxudmFyIG1hdGNoMyAgICAgICAgID0gL1xcZHszfS87ICAgICAgICAgLy8gICAgIDAwMCAtIDk5OVxudmFyIG1hdGNoNCAgICAgICAgID0gL1xcZHs0fS87ICAgICAgICAgLy8gICAgMDAwMCAtIDk5OTlcbnZhciBtYXRjaDYgICAgICAgICA9IC9bKy1dP1xcZHs2fS87ICAgIC8vIC05OTk5OTkgLSA5OTk5OTlcbnZhciBtYXRjaDF0bzIgICAgICA9IC9cXGRcXGQ/LzsgICAgICAgICAvLyAgICAgICAwIC0gOTlcbnZhciBtYXRjaDN0bzQgICAgICA9IC9cXGRcXGRcXGRcXGQ/LzsgICAgIC8vICAgICA5OTkgLSA5OTk5XG52YXIgbWF0Y2g1dG82ICAgICAgPSAvXFxkXFxkXFxkXFxkXFxkXFxkPy87IC8vICAgOTk5OTkgLSA5OTk5OTlcbnZhciBtYXRjaDF0bzMgICAgICA9IC9cXGR7MSwzfS87ICAgICAgIC8vICAgICAgIDAgLSA5OTlcbnZhciBtYXRjaDF0bzQgICAgICA9IC9cXGR7MSw0fS87ICAgICAgIC8vICAgICAgIDAgLSA5OTk5XG52YXIgbWF0Y2gxdG82ICAgICAgPSAvWystXT9cXGR7MSw2fS87ICAvLyAtOTk5OTk5IC0gOTk5OTk5XG5cbnZhciBtYXRjaFVuc2lnbmVkICA9IC9cXGQrLzsgICAgICAgICAgIC8vICAgICAgIDAgLSBpbmZcbnZhciBtYXRjaFNpZ25lZCAgICA9IC9bKy1dP1xcZCsvOyAgICAgIC8vICAgIC1pbmYgLSBpbmZcblxudmFyIG1hdGNoT2Zmc2V0ICAgID0gL1p8WystXVxcZFxcZDo/XFxkXFxkL2dpOyAvLyArMDA6MDAgLTAwOjAwICswMDAwIC0wMDAwIG9yIFpcbnZhciBtYXRjaFNob3J0T2Zmc2V0ID0gL1p8WystXVxcZFxcZCg/Ojo/XFxkXFxkKT8vZ2k7IC8vICswMCAtMDAgKzAwOjAwIC0wMDowMCArMDAwMCAtMDAwMCBvciBaXG5cbnZhciBtYXRjaFRpbWVzdGFtcCA9IC9bKy1dP1xcZCsoXFwuXFxkezEsM30pPy87IC8vIDEyMzQ1Njc4OSAxMjM0NTY3ODkuMTIzXG5cbi8vIGFueSB3b3JkIChvciB0d28pIGNoYXJhY3RlcnMgb3IgbnVtYmVycyBpbmNsdWRpbmcgdHdvL3RocmVlIHdvcmQgbW9udGggaW4gYXJhYmljLlxuLy8gaW5jbHVkZXMgc2NvdHRpc2ggZ2FlbGljIHR3byB3b3JkIGFuZCBoeXBoZW5hdGVkIG1vbnRoc1xudmFyIG1hdGNoV29yZCA9IC9bMC05XSpbJ2EtelxcdTAwQTAtXFx1MDVGRlxcdTA3MDAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0rfFtcXHUwNjAwLVxcdTA2RkZcXC9dKyhcXHMqP1tcXHUwNjAwLVxcdTA2RkZdKyl7MSwyfS9pO1xuXG5cbnZhciByZWdleGVzID0ge307XG5cbmZ1bmN0aW9uIGFkZFJlZ2V4VG9rZW4gKHRva2VuLCByZWdleCwgc3RyaWN0UmVnZXgpIHtcbiAgICByZWdleGVzW3Rva2VuXSA9IGlzRnVuY3Rpb24ocmVnZXgpID8gcmVnZXggOiBmdW5jdGlvbiAoaXNTdHJpY3QsIGxvY2FsZURhdGEpIHtcbiAgICAgICAgcmV0dXJuIChpc1N0cmljdCAmJiBzdHJpY3RSZWdleCkgPyBzdHJpY3RSZWdleCA6IHJlZ2V4O1xuICAgIH07XG59XG5cbmZ1bmN0aW9uIGdldFBhcnNlUmVnZXhGb3JUb2tlbiAodG9rZW4sIGNvbmZpZykge1xuICAgIGlmICghaGFzT3duUHJvcChyZWdleGVzLCB0b2tlbikpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBSZWdFeHAodW5lc2NhcGVGb3JtYXQodG9rZW4pKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVnZXhlc1t0b2tlbl0oY29uZmlnLl9zdHJpY3QsIGNvbmZpZy5fbG9jYWxlKTtcbn1cblxuLy8gQ29kZSBmcm9tIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMzU2MTQ5My9pcy10aGVyZS1hLXJlZ2V4cC1lc2NhcGUtZnVuY3Rpb24taW4tamF2YXNjcmlwdFxuZnVuY3Rpb24gdW5lc2NhcGVGb3JtYXQocykge1xuICAgIHJldHVybiByZWdleEVzY2FwZShzLnJlcGxhY2UoJ1xcXFwnLCAnJykucmVwbGFjZSgvXFxcXChcXFspfFxcXFwoXFxdKXxcXFsoW15cXF1cXFtdKilcXF18XFxcXCguKS9nLCBmdW5jdGlvbiAobWF0Y2hlZCwgcDEsIHAyLCBwMywgcDQpIHtcbiAgICAgICAgcmV0dXJuIHAxIHx8IHAyIHx8IHAzIHx8IHA0O1xuICAgIH0pKTtcbn1cblxuZnVuY3Rpb24gcmVnZXhFc2NhcGUocykge1xuICAgIHJldHVybiBzLnJlcGxhY2UoL1stXFwvXFxcXF4kKis/LigpfFtcXF17fV0vZywgJ1xcXFwkJicpO1xufVxuXG52YXIgdG9rZW5zID0ge307XG5cbmZ1bmN0aW9uIGFkZFBhcnNlVG9rZW4gKHRva2VuLCBjYWxsYmFjaykge1xuICAgIHZhciBpLCBmdW5jID0gY2FsbGJhY2s7XG4gICAgaWYgKHR5cGVvZiB0b2tlbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdG9rZW4gPSBbdG9rZW5dO1xuICAgIH1cbiAgICBpZiAoaXNOdW1iZXIoY2FsbGJhY2spKSB7XG4gICAgICAgIGZ1bmMgPSBmdW5jdGlvbiAoaW5wdXQsIGFycmF5KSB7XG4gICAgICAgICAgICBhcnJheVtjYWxsYmFja10gPSB0b0ludChpbnB1dCk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIGZvciAoaSA9IDA7IGkgPCB0b2tlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICB0b2tlbnNbdG9rZW5baV1dID0gZnVuYztcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGFkZFdlZWtQYXJzZVRva2VuICh0b2tlbiwgY2FsbGJhY2spIHtcbiAgICBhZGRQYXJzZVRva2VuKHRva2VuLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcsIHRva2VuKSB7XG4gICAgICAgIGNvbmZpZy5fdyA9IGNvbmZpZy5fdyB8fCB7fTtcbiAgICAgICAgY2FsbGJhY2soaW5wdXQsIGNvbmZpZy5fdywgY29uZmlnLCB0b2tlbik7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGFkZFRpbWVUb0FycmF5RnJvbVRva2VuKHRva2VuLCBpbnB1dCwgY29uZmlnKSB7XG4gICAgaWYgKGlucHV0ICE9IG51bGwgJiYgaGFzT3duUHJvcCh0b2tlbnMsIHRva2VuKSkge1xuICAgICAgICB0b2tlbnNbdG9rZW5dKGlucHV0LCBjb25maWcuX2EsIGNvbmZpZywgdG9rZW4pO1xuICAgIH1cbn1cblxudmFyIFlFQVIgPSAwO1xudmFyIE1PTlRIID0gMTtcbnZhciBEQVRFID0gMjtcbnZhciBIT1VSID0gMztcbnZhciBNSU5VVEUgPSA0O1xudmFyIFNFQ09ORCA9IDU7XG52YXIgTUlMTElTRUNPTkQgPSA2O1xudmFyIFdFRUsgPSA3O1xudmFyIFdFRUtEQVkgPSA4O1xuXG52YXIgaW5kZXhPZjtcblxuaWYgKEFycmF5LnByb3RvdHlwZS5pbmRleE9mKSB7XG4gICAgaW5kZXhPZiA9IEFycmF5LnByb3RvdHlwZS5pbmRleE9mO1xufSBlbHNlIHtcbiAgICBpbmRleE9mID0gZnVuY3Rpb24gKG8pIHtcbiAgICAgICAgLy8gSSBrbm93XG4gICAgICAgIHZhciBpO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgaWYgKHRoaXNbaV0gPT09IG8pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gLTE7XG4gICAgfTtcbn1cblxudmFyIGluZGV4T2YkMSA9IGluZGV4T2Y7XG5cbmZ1bmN0aW9uIGRheXNJbk1vbnRoKHllYXIsIG1vbnRoKSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKERhdGUuVVRDKHllYXIsIG1vbnRoICsgMSwgMCkpLmdldFVUQ0RhdGUoKTtcbn1cblxuLy8gRk9STUFUVElOR1xuXG5hZGRGb3JtYXRUb2tlbignTScsIFsnTU0nLCAyXSwgJ01vJywgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLm1vbnRoKCkgKyAxO1xufSk7XG5cbmFkZEZvcm1hdFRva2VuKCdNTU0nLCAwLCAwLCBmdW5jdGlvbiAoZm9ybWF0KSB7XG4gICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLm1vbnRoc1Nob3J0KHRoaXMsIGZvcm1hdCk7XG59KTtcblxuYWRkRm9ybWF0VG9rZW4oJ01NTU0nLCAwLCAwLCBmdW5jdGlvbiAoZm9ybWF0KSB7XG4gICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLm1vbnRocyh0aGlzLCBmb3JtYXQpO1xufSk7XG5cbi8vIEFMSUFTRVNcblxuYWRkVW5pdEFsaWFzKCdtb250aCcsICdNJyk7XG5cbi8vIFBSSU9SSVRZXG5cbmFkZFVuaXRQcmlvcml0eSgnbW9udGgnLCA4KTtcblxuLy8gUEFSU0lOR1xuXG5hZGRSZWdleFRva2VuKCdNJywgICAgbWF0Y2gxdG8yKTtcbmFkZFJlZ2V4VG9rZW4oJ01NJywgICBtYXRjaDF0bzIsIG1hdGNoMik7XG5hZGRSZWdleFRva2VuKCdNTU0nLCAgZnVuY3Rpb24gKGlzU3RyaWN0LCBsb2NhbGUpIHtcbiAgICByZXR1cm4gbG9jYWxlLm1vbnRoc1Nob3J0UmVnZXgoaXNTdHJpY3QpO1xufSk7XG5hZGRSZWdleFRva2VuKCdNTU1NJywgZnVuY3Rpb24gKGlzU3RyaWN0LCBsb2NhbGUpIHtcbiAgICByZXR1cm4gbG9jYWxlLm1vbnRoc1JlZ2V4KGlzU3RyaWN0KTtcbn0pO1xuXG5hZGRQYXJzZVRva2VuKFsnTScsICdNTSddLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5KSB7XG4gICAgYXJyYXlbTU9OVEhdID0gdG9JbnQoaW5wdXQpIC0gMTtcbn0pO1xuXG5hZGRQYXJzZVRva2VuKFsnTU1NJywgJ01NTU0nXSwgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnLCB0b2tlbikge1xuICAgIHZhciBtb250aCA9IGNvbmZpZy5fbG9jYWxlLm1vbnRoc1BhcnNlKGlucHV0LCB0b2tlbiwgY29uZmlnLl9zdHJpY3QpO1xuICAgIC8vIGlmIHdlIGRpZG4ndCBmaW5kIGEgbW9udGggbmFtZSwgbWFyayB0aGUgZGF0ZSBhcyBpbnZhbGlkLlxuICAgIGlmIChtb250aCAhPSBudWxsKSB7XG4gICAgICAgIGFycmF5W01PTlRIXSA9IG1vbnRoO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmludmFsaWRNb250aCA9IGlucHV0O1xuICAgIH1cbn0pO1xuXG4vLyBMT0NBTEVTXG5cbnZhciBNT05USFNfSU5fRk9STUFUID0gL0Rbb0RdPyhcXFtbXlxcW1xcXV0qXFxdfFxccykrTU1NTT8vO1xudmFyIGRlZmF1bHRMb2NhbGVNb250aHMgPSAnSmFudWFyeV9GZWJydWFyeV9NYXJjaF9BcHJpbF9NYXlfSnVuZV9KdWx5X0F1Z3VzdF9TZXB0ZW1iZXJfT2N0b2Jlcl9Ob3ZlbWJlcl9EZWNlbWJlcicuc3BsaXQoJ18nKTtcbmZ1bmN0aW9uIGxvY2FsZU1vbnRocyAobSwgZm9ybWF0KSB7XG4gICAgaWYgKCFtKSB7XG4gICAgICAgIHJldHVybiBpc0FycmF5KHRoaXMuX21vbnRocykgPyB0aGlzLl9tb250aHMgOlxuICAgICAgICAgICAgdGhpcy5fbW9udGhzWydzdGFuZGFsb25lJ107XG4gICAgfVxuICAgIHJldHVybiBpc0FycmF5KHRoaXMuX21vbnRocykgPyB0aGlzLl9tb250aHNbbS5tb250aCgpXSA6XG4gICAgICAgIHRoaXMuX21vbnRoc1sodGhpcy5fbW9udGhzLmlzRm9ybWF0IHx8IE1PTlRIU19JTl9GT1JNQVQpLnRlc3QoZm9ybWF0KSA/ICdmb3JtYXQnIDogJ3N0YW5kYWxvbmUnXVttLm1vbnRoKCldO1xufVxuXG52YXIgZGVmYXVsdExvY2FsZU1vbnRoc1Nob3J0ID0gJ0phbl9GZWJfTWFyX0Fwcl9NYXlfSnVuX0p1bF9BdWdfU2VwX09jdF9Ob3ZfRGVjJy5zcGxpdCgnXycpO1xuZnVuY3Rpb24gbG9jYWxlTW9udGhzU2hvcnQgKG0sIGZvcm1hdCkge1xuICAgIGlmICghbSkge1xuICAgICAgICByZXR1cm4gaXNBcnJheSh0aGlzLl9tb250aHNTaG9ydCkgPyB0aGlzLl9tb250aHNTaG9ydCA6XG4gICAgICAgICAgICB0aGlzLl9tb250aHNTaG9ydFsnc3RhbmRhbG9uZSddO1xuICAgIH1cbiAgICByZXR1cm4gaXNBcnJheSh0aGlzLl9tb250aHNTaG9ydCkgPyB0aGlzLl9tb250aHNTaG9ydFttLm1vbnRoKCldIDpcbiAgICAgICAgdGhpcy5fbW9udGhzU2hvcnRbTU9OVEhTX0lOX0ZPUk1BVC50ZXN0KGZvcm1hdCkgPyAnZm9ybWF0JyA6ICdzdGFuZGFsb25lJ11bbS5tb250aCgpXTtcbn1cblxuZnVuY3Rpb24gaGFuZGxlU3RyaWN0UGFyc2UobW9udGhOYW1lLCBmb3JtYXQsIHN0cmljdCkge1xuICAgIHZhciBpLCBpaSwgbW9tLCBsbGMgPSBtb250aE5hbWUudG9Mb2NhbGVMb3dlckNhc2UoKTtcbiAgICBpZiAoIXRoaXMuX21vbnRoc1BhcnNlKSB7XG4gICAgICAgIC8vIHRoaXMgaXMgbm90IHVzZWRcbiAgICAgICAgdGhpcy5fbW9udGhzUGFyc2UgPSBbXTtcbiAgICAgICAgdGhpcy5fbG9uZ01vbnRoc1BhcnNlID0gW107XG4gICAgICAgIHRoaXMuX3Nob3J0TW9udGhzUGFyc2UgPSBbXTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IDEyOyArK2kpIHtcbiAgICAgICAgICAgIG1vbSA9IGNyZWF0ZVVUQyhbMjAwMCwgaV0pO1xuICAgICAgICAgICAgdGhpcy5fc2hvcnRNb250aHNQYXJzZVtpXSA9IHRoaXMubW9udGhzU2hvcnQobW9tLCAnJykudG9Mb2NhbGVMb3dlckNhc2UoKTtcbiAgICAgICAgICAgIHRoaXMuX2xvbmdNb250aHNQYXJzZVtpXSA9IHRoaXMubW9udGhzKG1vbSwgJycpLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoc3RyaWN0KSB7XG4gICAgICAgIGlmIChmb3JtYXQgPT09ICdNTU0nKSB7XG4gICAgICAgICAgICBpaSA9IGluZGV4T2YkMS5jYWxsKHRoaXMuX3Nob3J0TW9udGhzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWkgPSBpbmRleE9mJDEuY2FsbCh0aGlzLl9sb25nTW9udGhzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsO1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGZvcm1hdCA9PT0gJ01NTScpIHtcbiAgICAgICAgICAgIGlpID0gaW5kZXhPZiQxLmNhbGwodGhpcy5fc2hvcnRNb250aHNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgIGlmIChpaSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpaSA9IGluZGV4T2YkMS5jYWxsKHRoaXMuX2xvbmdNb250aHNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpaSA9IGluZGV4T2YkMS5jYWxsKHRoaXMuX2xvbmdNb250aHNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgIGlmIChpaSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpaSA9IGluZGV4T2YkMS5jYWxsKHRoaXMuX3Nob3J0TW9udGhzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5mdW5jdGlvbiBsb2NhbGVNb250aHNQYXJzZSAobW9udGhOYW1lLCBmb3JtYXQsIHN0cmljdCkge1xuICAgIHZhciBpLCBtb20sIHJlZ2V4O1xuXG4gICAgaWYgKHRoaXMuX21vbnRoc1BhcnNlRXhhY3QpIHtcbiAgICAgICAgcmV0dXJuIGhhbmRsZVN0cmljdFBhcnNlLmNhbGwodGhpcywgbW9udGhOYW1lLCBmb3JtYXQsIHN0cmljdCk7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLl9tb250aHNQYXJzZSkge1xuICAgICAgICB0aGlzLl9tb250aHNQYXJzZSA9IFtdO1xuICAgICAgICB0aGlzLl9sb25nTW9udGhzUGFyc2UgPSBbXTtcbiAgICAgICAgdGhpcy5fc2hvcnRNb250aHNQYXJzZSA9IFtdO1xuICAgIH1cblxuICAgIC8vIFRPRE86IGFkZCBzb3J0aW5nXG4gICAgLy8gU29ydGluZyBtYWtlcyBzdXJlIGlmIG9uZSBtb250aCAob3IgYWJicikgaXMgYSBwcmVmaXggb2YgYW5vdGhlclxuICAgIC8vIHNlZSBzb3J0aW5nIGluIGNvbXB1dGVNb250aHNQYXJzZVxuICAgIGZvciAoaSA9IDA7IGkgPCAxMjsgaSsrKSB7XG4gICAgICAgIC8vIG1ha2UgdGhlIHJlZ2V4IGlmIHdlIGRvbid0IGhhdmUgaXQgYWxyZWFkeVxuICAgICAgICBtb20gPSBjcmVhdGVVVEMoWzIwMDAsIGldKTtcbiAgICAgICAgaWYgKHN0cmljdCAmJiAhdGhpcy5fbG9uZ01vbnRoc1BhcnNlW2ldKSB7XG4gICAgICAgICAgICB0aGlzLl9sb25nTW9udGhzUGFyc2VbaV0gPSBuZXcgUmVnRXhwKCdeJyArIHRoaXMubW9udGhzKG1vbSwgJycpLnJlcGxhY2UoJy4nLCAnJykgKyAnJCcsICdpJyk7XG4gICAgICAgICAgICB0aGlzLl9zaG9ydE1vbnRoc1BhcnNlW2ldID0gbmV3IFJlZ0V4cCgnXicgKyB0aGlzLm1vbnRoc1Nob3J0KG1vbSwgJycpLnJlcGxhY2UoJy4nLCAnJykgKyAnJCcsICdpJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFzdHJpY3QgJiYgIXRoaXMuX21vbnRoc1BhcnNlW2ldKSB7XG4gICAgICAgICAgICByZWdleCA9ICdeJyArIHRoaXMubW9udGhzKG1vbSwgJycpICsgJ3xeJyArIHRoaXMubW9udGhzU2hvcnQobW9tLCAnJyk7XG4gICAgICAgICAgICB0aGlzLl9tb250aHNQYXJzZVtpXSA9IG5ldyBSZWdFeHAocmVnZXgucmVwbGFjZSgnLicsICcnKSwgJ2knKTtcbiAgICAgICAgfVxuICAgICAgICAvLyB0ZXN0IHRoZSByZWdleFxuICAgICAgICBpZiAoc3RyaWN0ICYmIGZvcm1hdCA9PT0gJ01NTU0nICYmIHRoaXMuX2xvbmdNb250aHNQYXJzZVtpXS50ZXN0KG1vbnRoTmFtZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICB9IGVsc2UgaWYgKHN0cmljdCAmJiBmb3JtYXQgPT09ICdNTU0nICYmIHRoaXMuX3Nob3J0TW9udGhzUGFyc2VbaV0udGVzdChtb250aE5hbWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgfSBlbHNlIGlmICghc3RyaWN0ICYmIHRoaXMuX21vbnRoc1BhcnNlW2ldLnRlc3QobW9udGhOYW1lKSkge1xuICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8vIE1PTUVOVFNcblxuZnVuY3Rpb24gc2V0TW9udGggKG1vbSwgdmFsdWUpIHtcbiAgICB2YXIgZGF5T2ZNb250aDtcblxuICAgIGlmICghbW9tLmlzVmFsaWQoKSkge1xuICAgICAgICAvLyBObyBvcFxuICAgICAgICByZXR1cm4gbW9tO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGlmICgvXlxcZCskLy50ZXN0KHZhbHVlKSkge1xuICAgICAgICAgICAgdmFsdWUgPSB0b0ludCh2YWx1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YWx1ZSA9IG1vbS5sb2NhbGVEYXRhKCkubW9udGhzUGFyc2UodmFsdWUpO1xuICAgICAgICAgICAgLy8gVE9ETzogQW5vdGhlciBzaWxlbnQgZmFpbHVyZT9cbiAgICAgICAgICAgIGlmICghaXNOdW1iZXIodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1vbTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGRheU9mTW9udGggPSBNYXRoLm1pbihtb20uZGF0ZSgpLCBkYXlzSW5Nb250aChtb20ueWVhcigpLCB2YWx1ZSkpO1xuICAgIG1vbS5fZFsnc2V0JyArIChtb20uX2lzVVRDID8gJ1VUQycgOiAnJykgKyAnTW9udGgnXSh2YWx1ZSwgZGF5T2ZNb250aCk7XG4gICAgcmV0dXJuIG1vbTtcbn1cblxuZnVuY3Rpb24gZ2V0U2V0TW9udGggKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgc2V0TW9udGgodGhpcywgdmFsdWUpO1xuICAgICAgICBob29rcy51cGRhdGVPZmZzZXQodGhpcywgdHJ1ZSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBnZXQodGhpcywgJ01vbnRoJyk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBnZXREYXlzSW5Nb250aCAoKSB7XG4gICAgcmV0dXJuIGRheXNJbk1vbnRoKHRoaXMueWVhcigpLCB0aGlzLm1vbnRoKCkpO1xufVxuXG52YXIgZGVmYXVsdE1vbnRoc1Nob3J0UmVnZXggPSBtYXRjaFdvcmQ7XG5mdW5jdGlvbiBtb250aHNTaG9ydFJlZ2V4IChpc1N0cmljdCkge1xuICAgIGlmICh0aGlzLl9tb250aHNQYXJzZUV4YWN0KSB7XG4gICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX21vbnRoc1JlZ2V4JykpIHtcbiAgICAgICAgICAgIGNvbXB1dGVNb250aHNQYXJzZS5jYWxsKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1N0cmljdCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21vbnRoc1Nob3J0U3RyaWN0UmVnZXg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbW9udGhzU2hvcnRSZWdleDtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX21vbnRoc1Nob3J0UmVnZXgnKSkge1xuICAgICAgICAgICAgdGhpcy5fbW9udGhzU2hvcnRSZWdleCA9IGRlZmF1bHRNb250aHNTaG9ydFJlZ2V4O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9tb250aHNTaG9ydFN0cmljdFJlZ2V4ICYmIGlzU3RyaWN0ID9cbiAgICAgICAgICAgIHRoaXMuX21vbnRoc1Nob3J0U3RyaWN0UmVnZXggOiB0aGlzLl9tb250aHNTaG9ydFJlZ2V4O1xuICAgIH1cbn1cblxudmFyIGRlZmF1bHRNb250aHNSZWdleCA9IG1hdGNoV29yZDtcbmZ1bmN0aW9uIG1vbnRoc1JlZ2V4IChpc1N0cmljdCkge1xuICAgIGlmICh0aGlzLl9tb250aHNQYXJzZUV4YWN0KSB7XG4gICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX21vbnRoc1JlZ2V4JykpIHtcbiAgICAgICAgICAgIGNvbXB1dGVNb250aHNQYXJzZS5jYWxsKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1N0cmljdCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21vbnRoc1N0cmljdFJlZ2V4O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21vbnRoc1JlZ2V4O1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfbW9udGhzUmVnZXgnKSkge1xuICAgICAgICAgICAgdGhpcy5fbW9udGhzUmVnZXggPSBkZWZhdWx0TW9udGhzUmVnZXg7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX21vbnRoc1N0cmljdFJlZ2V4ICYmIGlzU3RyaWN0ID9cbiAgICAgICAgICAgIHRoaXMuX21vbnRoc1N0cmljdFJlZ2V4IDogdGhpcy5fbW9udGhzUmVnZXg7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBjb21wdXRlTW9udGhzUGFyc2UgKCkge1xuICAgIGZ1bmN0aW9uIGNtcExlblJldihhLCBiKSB7XG4gICAgICAgIHJldHVybiBiLmxlbmd0aCAtIGEubGVuZ3RoO1xuICAgIH1cblxuICAgIHZhciBzaG9ydFBpZWNlcyA9IFtdLCBsb25nUGllY2VzID0gW10sIG1peGVkUGllY2VzID0gW10sXG4gICAgICAgIGksIG1vbTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgMTI7IGkrKykge1xuICAgICAgICAvLyBtYWtlIHRoZSByZWdleCBpZiB3ZSBkb24ndCBoYXZlIGl0IGFscmVhZHlcbiAgICAgICAgbW9tID0gY3JlYXRlVVRDKFsyMDAwLCBpXSk7XG4gICAgICAgIHNob3J0UGllY2VzLnB1c2godGhpcy5tb250aHNTaG9ydChtb20sICcnKSk7XG4gICAgICAgIGxvbmdQaWVjZXMucHVzaCh0aGlzLm1vbnRocyhtb20sICcnKSk7XG4gICAgICAgIG1peGVkUGllY2VzLnB1c2godGhpcy5tb250aHMobW9tLCAnJykpO1xuICAgICAgICBtaXhlZFBpZWNlcy5wdXNoKHRoaXMubW9udGhzU2hvcnQobW9tLCAnJykpO1xuICAgIH1cbiAgICAvLyBTb3J0aW5nIG1ha2VzIHN1cmUgaWYgb25lIG1vbnRoIChvciBhYmJyKSBpcyBhIHByZWZpeCBvZiBhbm90aGVyIGl0XG4gICAgLy8gd2lsbCBtYXRjaCB0aGUgbG9uZ2VyIHBpZWNlLlxuICAgIHNob3J0UGllY2VzLnNvcnQoY21wTGVuUmV2KTtcbiAgICBsb25nUGllY2VzLnNvcnQoY21wTGVuUmV2KTtcbiAgICBtaXhlZFBpZWNlcy5zb3J0KGNtcExlblJldik7XG4gICAgZm9yIChpID0gMDsgaSA8IDEyOyBpKyspIHtcbiAgICAgICAgc2hvcnRQaWVjZXNbaV0gPSByZWdleEVzY2FwZShzaG9ydFBpZWNlc1tpXSk7XG4gICAgICAgIGxvbmdQaWVjZXNbaV0gPSByZWdleEVzY2FwZShsb25nUGllY2VzW2ldKTtcbiAgICB9XG4gICAgZm9yIChpID0gMDsgaSA8IDI0OyBpKyspIHtcbiAgICAgICAgbWl4ZWRQaWVjZXNbaV0gPSByZWdleEVzY2FwZShtaXhlZFBpZWNlc1tpXSk7XG4gICAgfVxuXG4gICAgdGhpcy5fbW9udGhzUmVnZXggPSBuZXcgUmVnRXhwKCdeKCcgKyBtaXhlZFBpZWNlcy5qb2luKCd8JykgKyAnKScsICdpJyk7XG4gICAgdGhpcy5fbW9udGhzU2hvcnRSZWdleCA9IHRoaXMuX21vbnRoc1JlZ2V4O1xuICAgIHRoaXMuX21vbnRoc1N0cmljdFJlZ2V4ID0gbmV3IFJlZ0V4cCgnXignICsgbG9uZ1BpZWNlcy5qb2luKCd8JykgKyAnKScsICdpJyk7XG4gICAgdGhpcy5fbW9udGhzU2hvcnRTdHJpY3RSZWdleCA9IG5ldyBSZWdFeHAoJ14oJyArIHNob3J0UGllY2VzLmpvaW4oJ3wnKSArICcpJywgJ2knKTtcbn1cblxuLy8gRk9STUFUVElOR1xuXG5hZGRGb3JtYXRUb2tlbignWScsIDAsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgeSA9IHRoaXMueWVhcigpO1xuICAgIHJldHVybiB5IDw9IDk5OTkgPyAnJyArIHkgOiAnKycgKyB5O1xufSk7XG5cbmFkZEZvcm1hdFRva2VuKDAsIFsnWVknLCAyXSwgMCwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLnllYXIoKSAlIDEwMDtcbn0pO1xuXG5hZGRGb3JtYXRUb2tlbigwLCBbJ1lZWVknLCAgIDRdLCAgICAgICAwLCAneWVhcicpO1xuYWRkRm9ybWF0VG9rZW4oMCwgWydZWVlZWScsICA1XSwgICAgICAgMCwgJ3llYXInKTtcbmFkZEZvcm1hdFRva2VuKDAsIFsnWVlZWVlZJywgNiwgdHJ1ZV0sIDAsICd5ZWFyJyk7XG5cbi8vIEFMSUFTRVNcblxuYWRkVW5pdEFsaWFzKCd5ZWFyJywgJ3knKTtcblxuLy8gUFJJT1JJVElFU1xuXG5hZGRVbml0UHJpb3JpdHkoJ3llYXInLCAxKTtcblxuLy8gUEFSU0lOR1xuXG5hZGRSZWdleFRva2VuKCdZJywgICAgICBtYXRjaFNpZ25lZCk7XG5hZGRSZWdleFRva2VuKCdZWScsICAgICBtYXRjaDF0bzIsIG1hdGNoMik7XG5hZGRSZWdleFRva2VuKCdZWVlZJywgICBtYXRjaDF0bzQsIG1hdGNoNCk7XG5hZGRSZWdleFRva2VuKCdZWVlZWScsICBtYXRjaDF0bzYsIG1hdGNoNik7XG5hZGRSZWdleFRva2VuKCdZWVlZWVknLCBtYXRjaDF0bzYsIG1hdGNoNik7XG5cbmFkZFBhcnNlVG9rZW4oWydZWVlZWScsICdZWVlZWVknXSwgWUVBUik7XG5hZGRQYXJzZVRva2VuKCdZWVlZJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSkge1xuICAgIGFycmF5W1lFQVJdID0gaW5wdXQubGVuZ3RoID09PSAyID8gaG9va3MucGFyc2VUd29EaWdpdFllYXIoaW5wdXQpIDogdG9JbnQoaW5wdXQpO1xufSk7XG5hZGRQYXJzZVRva2VuKCdZWScsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXkpIHtcbiAgICBhcnJheVtZRUFSXSA9IGhvb2tzLnBhcnNlVHdvRGlnaXRZZWFyKGlucHV0KTtcbn0pO1xuYWRkUGFyc2VUb2tlbignWScsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXkpIHtcbiAgICBhcnJheVtZRUFSXSA9IHBhcnNlSW50KGlucHV0LCAxMCk7XG59KTtcblxuLy8gSEVMUEVSU1xuXG5mdW5jdGlvbiBkYXlzSW5ZZWFyKHllYXIpIHtcbiAgICByZXR1cm4gaXNMZWFwWWVhcih5ZWFyKSA/IDM2NiA6IDM2NTtcbn1cblxuZnVuY3Rpb24gaXNMZWFwWWVhcih5ZWFyKSB7XG4gICAgcmV0dXJuICh5ZWFyICUgNCA9PT0gMCAmJiB5ZWFyICUgMTAwICE9PSAwKSB8fCB5ZWFyICUgNDAwID09PSAwO1xufVxuXG4vLyBIT09LU1xuXG5ob29rcy5wYXJzZVR3b0RpZ2l0WWVhciA9IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgIHJldHVybiB0b0ludChpbnB1dCkgKyAodG9JbnQoaW5wdXQpID4gNjggPyAxOTAwIDogMjAwMCk7XG59O1xuXG4vLyBNT01FTlRTXG5cbnZhciBnZXRTZXRZZWFyID0gbWFrZUdldFNldCgnRnVsbFllYXInLCB0cnVlKTtcblxuZnVuY3Rpb24gZ2V0SXNMZWFwWWVhciAoKSB7XG4gICAgcmV0dXJuIGlzTGVhcFllYXIodGhpcy55ZWFyKCkpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVEYXRlICh5LCBtLCBkLCBoLCBNLCBzLCBtcykge1xuICAgIC8vIGNhbid0IGp1c3QgYXBwbHkoKSB0byBjcmVhdGUgYSBkYXRlOlxuICAgIC8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcS8xODEzNDhcbiAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlKHksIG0sIGQsIGgsIE0sIHMsIG1zKTtcblxuICAgIC8vIHRoZSBkYXRlIGNvbnN0cnVjdG9yIHJlbWFwcyB5ZWFycyAwLTk5IHRvIDE5MDAtMTk5OVxuICAgIGlmICh5IDwgMTAwICYmIHkgPj0gMCAmJiBpc0Zpbml0ZShkYXRlLmdldEZ1bGxZZWFyKCkpKSB7XG4gICAgICAgIGRhdGUuc2V0RnVsbFllYXIoeSk7XG4gICAgfVxuICAgIHJldHVybiBkYXRlO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVVVENEYXRlICh5KSB7XG4gICAgdmFyIGRhdGUgPSBuZXcgRGF0ZShEYXRlLlVUQy5hcHBseShudWxsLCBhcmd1bWVudHMpKTtcblxuICAgIC8vIHRoZSBEYXRlLlVUQyBmdW5jdGlvbiByZW1hcHMgeWVhcnMgMC05OSB0byAxOTAwLTE5OTlcbiAgICBpZiAoeSA8IDEwMCAmJiB5ID49IDAgJiYgaXNGaW5pdGUoZGF0ZS5nZXRVVENGdWxsWWVhcigpKSkge1xuICAgICAgICBkYXRlLnNldFVUQ0Z1bGxZZWFyKHkpO1xuICAgIH1cbiAgICByZXR1cm4gZGF0ZTtcbn1cblxuLy8gc3RhcnQtb2YtZmlyc3Qtd2VlayAtIHN0YXJ0LW9mLXllYXJcbmZ1bmN0aW9uIGZpcnN0V2Vla09mZnNldCh5ZWFyLCBkb3csIGRveSkge1xuICAgIHZhciAvLyBmaXJzdC13ZWVrIGRheSAtLSB3aGljaCBqYW51YXJ5IGlzIGFsd2F5cyBpbiB0aGUgZmlyc3Qgd2VlayAoNCBmb3IgaXNvLCAxIGZvciBvdGhlcilcbiAgICAgICAgZndkID0gNyArIGRvdyAtIGRveSxcbiAgICAgICAgLy8gZmlyc3Qtd2VlayBkYXkgbG9jYWwgd2Vla2RheSAtLSB3aGljaCBsb2NhbCB3ZWVrZGF5IGlzIGZ3ZFxuICAgICAgICBmd2RsdyA9ICg3ICsgY3JlYXRlVVRDRGF0ZSh5ZWFyLCAwLCBmd2QpLmdldFVUQ0RheSgpIC0gZG93KSAlIDc7XG5cbiAgICByZXR1cm4gLWZ3ZGx3ICsgZndkIC0gMTtcbn1cblxuLy8gaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSVNPX3dlZWtfZGF0ZSNDYWxjdWxhdGluZ19hX2RhdGVfZ2l2ZW5fdGhlX3llYXIuMkNfd2Vla19udW1iZXJfYW5kX3dlZWtkYXlcbmZ1bmN0aW9uIGRheU9mWWVhckZyb21XZWVrcyh5ZWFyLCB3ZWVrLCB3ZWVrZGF5LCBkb3csIGRveSkge1xuICAgIHZhciBsb2NhbFdlZWtkYXkgPSAoNyArIHdlZWtkYXkgLSBkb3cpICUgNyxcbiAgICAgICAgd2Vla09mZnNldCA9IGZpcnN0V2Vla09mZnNldCh5ZWFyLCBkb3csIGRveSksXG4gICAgICAgIGRheU9mWWVhciA9IDEgKyA3ICogKHdlZWsgLSAxKSArIGxvY2FsV2Vla2RheSArIHdlZWtPZmZzZXQsXG4gICAgICAgIHJlc1llYXIsIHJlc0RheU9mWWVhcjtcblxuICAgIGlmIChkYXlPZlllYXIgPD0gMCkge1xuICAgICAgICByZXNZZWFyID0geWVhciAtIDE7XG4gICAgICAgIHJlc0RheU9mWWVhciA9IGRheXNJblllYXIocmVzWWVhcikgKyBkYXlPZlllYXI7XG4gICAgfSBlbHNlIGlmIChkYXlPZlllYXIgPiBkYXlzSW5ZZWFyKHllYXIpKSB7XG4gICAgICAgIHJlc1llYXIgPSB5ZWFyICsgMTtcbiAgICAgICAgcmVzRGF5T2ZZZWFyID0gZGF5T2ZZZWFyIC0gZGF5c0luWWVhcih5ZWFyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXNZZWFyID0geWVhcjtcbiAgICAgICAgcmVzRGF5T2ZZZWFyID0gZGF5T2ZZZWFyO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAgIHllYXI6IHJlc1llYXIsXG4gICAgICAgIGRheU9mWWVhcjogcmVzRGF5T2ZZZWFyXG4gICAgfTtcbn1cblxuZnVuY3Rpb24gd2Vla09mWWVhcihtb20sIGRvdywgZG95KSB7XG4gICAgdmFyIHdlZWtPZmZzZXQgPSBmaXJzdFdlZWtPZmZzZXQobW9tLnllYXIoKSwgZG93LCBkb3kpLFxuICAgICAgICB3ZWVrID0gTWF0aC5mbG9vcigobW9tLmRheU9mWWVhcigpIC0gd2Vla09mZnNldCAtIDEpIC8gNykgKyAxLFxuICAgICAgICByZXNXZWVrLCByZXNZZWFyO1xuXG4gICAgaWYgKHdlZWsgPCAxKSB7XG4gICAgICAgIHJlc1llYXIgPSBtb20ueWVhcigpIC0gMTtcbiAgICAgICAgcmVzV2VlayA9IHdlZWsgKyB3ZWVrc0luWWVhcihyZXNZZWFyLCBkb3csIGRveSk7XG4gICAgfSBlbHNlIGlmICh3ZWVrID4gd2Vla3NJblllYXIobW9tLnllYXIoKSwgZG93LCBkb3kpKSB7XG4gICAgICAgIHJlc1dlZWsgPSB3ZWVrIC0gd2Vla3NJblllYXIobW9tLnllYXIoKSwgZG93LCBkb3kpO1xuICAgICAgICByZXNZZWFyID0gbW9tLnllYXIoKSArIDE7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmVzWWVhciA9IG1vbS55ZWFyKCk7XG4gICAgICAgIHJlc1dlZWsgPSB3ZWVrO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAgIHdlZWs6IHJlc1dlZWssXG4gICAgICAgIHllYXI6IHJlc1llYXJcbiAgICB9O1xufVxuXG5mdW5jdGlvbiB3ZWVrc0luWWVhcih5ZWFyLCBkb3csIGRveSkge1xuICAgIHZhciB3ZWVrT2Zmc2V0ID0gZmlyc3RXZWVrT2Zmc2V0KHllYXIsIGRvdywgZG95KSxcbiAgICAgICAgd2Vla09mZnNldE5leHQgPSBmaXJzdFdlZWtPZmZzZXQoeWVhciArIDEsIGRvdywgZG95KTtcbiAgICByZXR1cm4gKGRheXNJblllYXIoeWVhcikgLSB3ZWVrT2Zmc2V0ICsgd2Vla09mZnNldE5leHQpIC8gNztcbn1cblxuLy8gRk9STUFUVElOR1xuXG5hZGRGb3JtYXRUb2tlbigndycsIFsnd3cnLCAyXSwgJ3dvJywgJ3dlZWsnKTtcbmFkZEZvcm1hdFRva2VuKCdXJywgWydXVycsIDJdLCAnV28nLCAnaXNvV2VlaycpO1xuXG4vLyBBTElBU0VTXG5cbmFkZFVuaXRBbGlhcygnd2VlaycsICd3Jyk7XG5hZGRVbml0QWxpYXMoJ2lzb1dlZWsnLCAnVycpO1xuXG4vLyBQUklPUklUSUVTXG5cbmFkZFVuaXRQcmlvcml0eSgnd2VlaycsIDUpO1xuYWRkVW5pdFByaW9yaXR5KCdpc29XZWVrJywgNSk7XG5cbi8vIFBBUlNJTkdcblxuYWRkUmVnZXhUb2tlbigndycsICBtYXRjaDF0bzIpO1xuYWRkUmVnZXhUb2tlbignd3cnLCBtYXRjaDF0bzIsIG1hdGNoMik7XG5hZGRSZWdleFRva2VuKCdXJywgIG1hdGNoMXRvMik7XG5hZGRSZWdleFRva2VuKCdXVycsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcblxuYWRkV2Vla1BhcnNlVG9rZW4oWyd3JywgJ3d3JywgJ1cnLCAnV1cnXSwgZnVuY3Rpb24gKGlucHV0LCB3ZWVrLCBjb25maWcsIHRva2VuKSB7XG4gICAgd2Vla1t0b2tlbi5zdWJzdHIoMCwgMSldID0gdG9JbnQoaW5wdXQpO1xufSk7XG5cbi8vIEhFTFBFUlNcblxuLy8gTE9DQUxFU1xuXG5mdW5jdGlvbiBsb2NhbGVXZWVrIChtb20pIHtcbiAgICByZXR1cm4gd2Vla09mWWVhcihtb20sIHRoaXMuX3dlZWsuZG93LCB0aGlzLl93ZWVrLmRveSkud2Vlaztcbn1cblxudmFyIGRlZmF1bHRMb2NhbGVXZWVrID0ge1xuICAgIGRvdyA6IDAsIC8vIFN1bmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgIGRveSA6IDYgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDFzdCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbn07XG5cbmZ1bmN0aW9uIGxvY2FsZUZpcnN0RGF5T2ZXZWVrICgpIHtcbiAgICByZXR1cm4gdGhpcy5fd2Vlay5kb3c7XG59XG5cbmZ1bmN0aW9uIGxvY2FsZUZpcnN0RGF5T2ZZZWFyICgpIHtcbiAgICByZXR1cm4gdGhpcy5fd2Vlay5kb3k7XG59XG5cbi8vIE1PTUVOVFNcblxuZnVuY3Rpb24gZ2V0U2V0V2VlayAoaW5wdXQpIHtcbiAgICB2YXIgd2VlayA9IHRoaXMubG9jYWxlRGF0YSgpLndlZWsodGhpcyk7XG4gICAgcmV0dXJuIGlucHV0ID09IG51bGwgPyB3ZWVrIDogdGhpcy5hZGQoKGlucHV0IC0gd2VlaykgKiA3LCAnZCcpO1xufVxuXG5mdW5jdGlvbiBnZXRTZXRJU09XZWVrIChpbnB1dCkge1xuICAgIHZhciB3ZWVrID0gd2Vla09mWWVhcih0aGlzLCAxLCA0KS53ZWVrO1xuICAgIHJldHVybiBpbnB1dCA9PSBudWxsID8gd2VlayA6IHRoaXMuYWRkKChpbnB1dCAtIHdlZWspICogNywgJ2QnKTtcbn1cblxuLy8gRk9STUFUVElOR1xuXG5hZGRGb3JtYXRUb2tlbignZCcsIDAsICdkbycsICdkYXknKTtcblxuYWRkRm9ybWF0VG9rZW4oJ2RkJywgMCwgMCwgZnVuY3Rpb24gKGZvcm1hdCkge1xuICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS53ZWVrZGF5c01pbih0aGlzLCBmb3JtYXQpO1xufSk7XG5cbmFkZEZvcm1hdFRva2VuKCdkZGQnLCAwLCAwLCBmdW5jdGlvbiAoZm9ybWF0KSB7XG4gICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLndlZWtkYXlzU2hvcnQodGhpcywgZm9ybWF0KTtcbn0pO1xuXG5hZGRGb3JtYXRUb2tlbignZGRkZCcsIDAsIDAsIGZ1bmN0aW9uIChmb3JtYXQpIHtcbiAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkud2Vla2RheXModGhpcywgZm9ybWF0KTtcbn0pO1xuXG5hZGRGb3JtYXRUb2tlbignZScsIDAsIDAsICd3ZWVrZGF5Jyk7XG5hZGRGb3JtYXRUb2tlbignRScsIDAsIDAsICdpc29XZWVrZGF5Jyk7XG5cbi8vIEFMSUFTRVNcblxuYWRkVW5pdEFsaWFzKCdkYXknLCAnZCcpO1xuYWRkVW5pdEFsaWFzKCd3ZWVrZGF5JywgJ2UnKTtcbmFkZFVuaXRBbGlhcygnaXNvV2Vla2RheScsICdFJyk7XG5cbi8vIFBSSU9SSVRZXG5hZGRVbml0UHJpb3JpdHkoJ2RheScsIDExKTtcbmFkZFVuaXRQcmlvcml0eSgnd2Vla2RheScsIDExKTtcbmFkZFVuaXRQcmlvcml0eSgnaXNvV2Vla2RheScsIDExKTtcblxuLy8gUEFSU0lOR1xuXG5hZGRSZWdleFRva2VuKCdkJywgICAgbWF0Y2gxdG8yKTtcbmFkZFJlZ2V4VG9rZW4oJ2UnLCAgICBtYXRjaDF0bzIpO1xuYWRkUmVnZXhUb2tlbignRScsICAgIG1hdGNoMXRvMik7XG5hZGRSZWdleFRva2VuKCdkZCcsICAgZnVuY3Rpb24gKGlzU3RyaWN0LCBsb2NhbGUpIHtcbiAgICByZXR1cm4gbG9jYWxlLndlZWtkYXlzTWluUmVnZXgoaXNTdHJpY3QpO1xufSk7XG5hZGRSZWdleFRva2VuKCdkZGQnLCAgIGZ1bmN0aW9uIChpc1N0cmljdCwgbG9jYWxlKSB7XG4gICAgcmV0dXJuIGxvY2FsZS53ZWVrZGF5c1Nob3J0UmVnZXgoaXNTdHJpY3QpO1xufSk7XG5hZGRSZWdleFRva2VuKCdkZGRkJywgICBmdW5jdGlvbiAoaXNTdHJpY3QsIGxvY2FsZSkge1xuICAgIHJldHVybiBsb2NhbGUud2Vla2RheXNSZWdleChpc1N0cmljdCk7XG59KTtcblxuYWRkV2Vla1BhcnNlVG9rZW4oWydkZCcsICdkZGQnLCAnZGRkZCddLCBmdW5jdGlvbiAoaW5wdXQsIHdlZWssIGNvbmZpZywgdG9rZW4pIHtcbiAgICB2YXIgd2Vla2RheSA9IGNvbmZpZy5fbG9jYWxlLndlZWtkYXlzUGFyc2UoaW5wdXQsIHRva2VuLCBjb25maWcuX3N0cmljdCk7XG4gICAgLy8gaWYgd2UgZGlkbid0IGdldCBhIHdlZWtkYXkgbmFtZSwgbWFyayB0aGUgZGF0ZSBhcyBpbnZhbGlkXG4gICAgaWYgKHdlZWtkYXkgIT0gbnVsbCkge1xuICAgICAgICB3ZWVrLmQgPSB3ZWVrZGF5O1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmludmFsaWRXZWVrZGF5ID0gaW5wdXQ7XG4gICAgfVxufSk7XG5cbmFkZFdlZWtQYXJzZVRva2VuKFsnZCcsICdlJywgJ0UnXSwgZnVuY3Rpb24gKGlucHV0LCB3ZWVrLCBjb25maWcsIHRva2VuKSB7XG4gICAgd2Vla1t0b2tlbl0gPSB0b0ludChpbnB1dCk7XG59KTtcblxuLy8gSEVMUEVSU1xuXG5mdW5jdGlvbiBwYXJzZVdlZWtkYXkoaW5wdXQsIGxvY2FsZSkge1xuICAgIGlmICh0eXBlb2YgaW5wdXQgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiBpbnB1dDtcbiAgICB9XG5cbiAgICBpZiAoIWlzTmFOKGlucHV0KSkge1xuICAgICAgICByZXR1cm4gcGFyc2VJbnQoaW5wdXQsIDEwKTtcbiAgICB9XG5cbiAgICBpbnB1dCA9IGxvY2FsZS53ZWVrZGF5c1BhcnNlKGlucHV0KTtcbiAgICBpZiAodHlwZW9mIGlucHV0ID09PSAnbnVtYmVyJykge1xuICAgICAgICByZXR1cm4gaW5wdXQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIHBhcnNlSXNvV2Vla2RheShpbnB1dCwgbG9jYWxlKSB7XG4gICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS53ZWVrZGF5c1BhcnNlKGlucHV0KSAlIDcgfHwgNztcbiAgICB9XG4gICAgcmV0dXJuIGlzTmFOKGlucHV0KSA/IG51bGwgOiBpbnB1dDtcbn1cblxuLy8gTE9DQUxFU1xuXG52YXIgZGVmYXVsdExvY2FsZVdlZWtkYXlzID0gJ1N1bmRheV9Nb25kYXlfVHVlc2RheV9XZWRuZXNkYXlfVGh1cnNkYXlfRnJpZGF5X1NhdHVyZGF5Jy5zcGxpdCgnXycpO1xuZnVuY3Rpb24gbG9jYWxlV2Vla2RheXMgKG0sIGZvcm1hdCkge1xuICAgIGlmICghbSkge1xuICAgICAgICByZXR1cm4gaXNBcnJheSh0aGlzLl93ZWVrZGF5cykgPyB0aGlzLl93ZWVrZGF5cyA6XG4gICAgICAgICAgICB0aGlzLl93ZWVrZGF5c1snc3RhbmRhbG9uZSddO1xuICAgIH1cbiAgICByZXR1cm4gaXNBcnJheSh0aGlzLl93ZWVrZGF5cykgPyB0aGlzLl93ZWVrZGF5c1ttLmRheSgpXSA6XG4gICAgICAgIHRoaXMuX3dlZWtkYXlzW3RoaXMuX3dlZWtkYXlzLmlzRm9ybWF0LnRlc3QoZm9ybWF0KSA/ICdmb3JtYXQnIDogJ3N0YW5kYWxvbmUnXVttLmRheSgpXTtcbn1cblxudmFyIGRlZmF1bHRMb2NhbGVXZWVrZGF5c1Nob3J0ID0gJ1N1bl9Nb25fVHVlX1dlZF9UaHVfRnJpX1NhdCcuc3BsaXQoJ18nKTtcbmZ1bmN0aW9uIGxvY2FsZVdlZWtkYXlzU2hvcnQgKG0pIHtcbiAgICByZXR1cm4gKG0pID8gdGhpcy5fd2Vla2RheXNTaG9ydFttLmRheSgpXSA6IHRoaXMuX3dlZWtkYXlzU2hvcnQ7XG59XG5cbnZhciBkZWZhdWx0TG9jYWxlV2Vla2RheXNNaW4gPSAnU3VfTW9fVHVfV2VfVGhfRnJfU2EnLnNwbGl0KCdfJyk7XG5mdW5jdGlvbiBsb2NhbGVXZWVrZGF5c01pbiAobSkge1xuICAgIHJldHVybiAobSkgPyB0aGlzLl93ZWVrZGF5c01pblttLmRheSgpXSA6IHRoaXMuX3dlZWtkYXlzTWluO1xufVxuXG5mdW5jdGlvbiBoYW5kbGVTdHJpY3RQYXJzZSQxKHdlZWtkYXlOYW1lLCBmb3JtYXQsIHN0cmljdCkge1xuICAgIHZhciBpLCBpaSwgbW9tLCBsbGMgPSB3ZWVrZGF5TmFtZS50b0xvY2FsZUxvd2VyQ2FzZSgpO1xuICAgIGlmICghdGhpcy5fd2Vla2RheXNQYXJzZSkge1xuICAgICAgICB0aGlzLl93ZWVrZGF5c1BhcnNlID0gW107XG4gICAgICAgIHRoaXMuX3Nob3J0V2Vla2RheXNQYXJzZSA9IFtdO1xuICAgICAgICB0aGlzLl9taW5XZWVrZGF5c1BhcnNlID0gW107XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IDc7ICsraSkge1xuICAgICAgICAgICAgbW9tID0gY3JlYXRlVVRDKFsyMDAwLCAxXSkuZGF5KGkpO1xuICAgICAgICAgICAgdGhpcy5fbWluV2Vla2RheXNQYXJzZVtpXSA9IHRoaXMud2Vla2RheXNNaW4obW9tLCAnJykudG9Mb2NhbGVMb3dlckNhc2UoKTtcbiAgICAgICAgICAgIHRoaXMuX3Nob3J0V2Vla2RheXNQYXJzZVtpXSA9IHRoaXMud2Vla2RheXNTaG9ydChtb20sICcnKS50b0xvY2FsZUxvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNQYXJzZVtpXSA9IHRoaXMud2Vla2RheXMobW9tLCAnJykudG9Mb2NhbGVMb3dlckNhc2UoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmIChzdHJpY3QpIHtcbiAgICAgICAgaWYgKGZvcm1hdCA9PT0gJ2RkZGQnKSB7XG4gICAgICAgICAgICBpaSA9IGluZGV4T2YkMS5jYWxsKHRoaXMuX3dlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsO1xuICAgICAgICB9IGVsc2UgaWYgKGZvcm1hdCA9PT0gJ2RkZCcpIHtcbiAgICAgICAgICAgIGlpID0gaW5kZXhPZiQxLmNhbGwodGhpcy5fc2hvcnRXZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlpID0gaW5kZXhPZiQxLmNhbGwodGhpcy5fbWluV2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoZm9ybWF0ID09PSAnZGRkZCcpIHtcbiAgICAgICAgICAgIGlpID0gaW5kZXhPZiQxLmNhbGwodGhpcy5fd2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgIGlmIChpaSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpaSA9IGluZGV4T2YkMS5jYWxsKHRoaXMuX3Nob3J0V2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgIGlmIChpaSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpaSA9IGluZGV4T2YkMS5jYWxsKHRoaXMuX21pbldlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsO1xuICAgICAgICB9IGVsc2UgaWYgKGZvcm1hdCA9PT0gJ2RkZCcpIHtcbiAgICAgICAgICAgIGlpID0gaW5kZXhPZiQxLmNhbGwodGhpcy5fc2hvcnRXZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgaWYgKGlpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlpID0gaW5kZXhPZiQxLmNhbGwodGhpcy5fd2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgIGlmIChpaSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpaSA9IGluZGV4T2YkMS5jYWxsKHRoaXMuX21pbldlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWkgPSBpbmRleE9mJDEuY2FsbCh0aGlzLl9taW5XZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgaWYgKGlpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlpID0gaW5kZXhPZiQxLmNhbGwodGhpcy5fd2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgIGlmIChpaSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpaSA9IGluZGV4T2YkMS5jYWxsKHRoaXMuX3Nob3J0V2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIGxvY2FsZVdlZWtkYXlzUGFyc2UgKHdlZWtkYXlOYW1lLCBmb3JtYXQsIHN0cmljdCkge1xuICAgIHZhciBpLCBtb20sIHJlZ2V4O1xuXG4gICAgaWYgKHRoaXMuX3dlZWtkYXlzUGFyc2VFeGFjdCkge1xuICAgICAgICByZXR1cm4gaGFuZGxlU3RyaWN0UGFyc2UkMS5jYWxsKHRoaXMsIHdlZWtkYXlOYW1lLCBmb3JtYXQsIHN0cmljdCk7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLl93ZWVrZGF5c1BhcnNlKSB7XG4gICAgICAgIHRoaXMuX3dlZWtkYXlzUGFyc2UgPSBbXTtcbiAgICAgICAgdGhpcy5fbWluV2Vla2RheXNQYXJzZSA9IFtdO1xuICAgICAgICB0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2UgPSBbXTtcbiAgICAgICAgdGhpcy5fZnVsbFdlZWtkYXlzUGFyc2UgPSBbXTtcbiAgICB9XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgNzsgaSsrKSB7XG4gICAgICAgIC8vIG1ha2UgdGhlIHJlZ2V4IGlmIHdlIGRvbid0IGhhdmUgaXQgYWxyZWFkeVxuXG4gICAgICAgIG1vbSA9IGNyZWF0ZVVUQyhbMjAwMCwgMV0pLmRheShpKTtcbiAgICAgICAgaWYgKHN0cmljdCAmJiAhdGhpcy5fZnVsbFdlZWtkYXlzUGFyc2VbaV0pIHtcbiAgICAgICAgICAgIHRoaXMuX2Z1bGxXZWVrZGF5c1BhcnNlW2ldID0gbmV3IFJlZ0V4cCgnXicgKyB0aGlzLndlZWtkYXlzKG1vbSwgJycpLnJlcGxhY2UoJy4nLCAnXFwuPycpICsgJyQnLCAnaScpO1xuICAgICAgICAgICAgdGhpcy5fc2hvcnRXZWVrZGF5c1BhcnNlW2ldID0gbmV3IFJlZ0V4cCgnXicgKyB0aGlzLndlZWtkYXlzU2hvcnQobW9tLCAnJykucmVwbGFjZSgnLicsICdcXC4/JykgKyAnJCcsICdpJyk7XG4gICAgICAgICAgICB0aGlzLl9taW5XZWVrZGF5c1BhcnNlW2ldID0gbmV3IFJlZ0V4cCgnXicgKyB0aGlzLndlZWtkYXlzTWluKG1vbSwgJycpLnJlcGxhY2UoJy4nLCAnXFwuPycpICsgJyQnLCAnaScpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5fd2Vla2RheXNQYXJzZVtpXSkge1xuICAgICAgICAgICAgcmVnZXggPSAnXicgKyB0aGlzLndlZWtkYXlzKG1vbSwgJycpICsgJ3xeJyArIHRoaXMud2Vla2RheXNTaG9ydChtb20sICcnKSArICd8XicgKyB0aGlzLndlZWtkYXlzTWluKG1vbSwgJycpO1xuICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNQYXJzZVtpXSA9IG5ldyBSZWdFeHAocmVnZXgucmVwbGFjZSgnLicsICcnKSwgJ2knKTtcbiAgICAgICAgfVxuICAgICAgICAvLyB0ZXN0IHRoZSByZWdleFxuICAgICAgICBpZiAoc3RyaWN0ICYmIGZvcm1hdCA9PT0gJ2RkZGQnICYmIHRoaXMuX2Z1bGxXZWVrZGF5c1BhcnNlW2ldLnRlc3Qod2Vla2RheU5hbWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgfSBlbHNlIGlmIChzdHJpY3QgJiYgZm9ybWF0ID09PSAnZGRkJyAmJiB0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2VbaV0udGVzdCh3ZWVrZGF5TmFtZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICB9IGVsc2UgaWYgKHN0cmljdCAmJiBmb3JtYXQgPT09ICdkZCcgJiYgdGhpcy5fbWluV2Vla2RheXNQYXJzZVtpXS50ZXN0KHdlZWtkYXlOYW1lKSkge1xuICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgIH0gZWxzZSBpZiAoIXN0cmljdCAmJiB0aGlzLl93ZWVrZGF5c1BhcnNlW2ldLnRlc3Qod2Vla2RheU5hbWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuLy8gTU9NRU5UU1xuXG5mdW5jdGlvbiBnZXRTZXREYXlPZldlZWsgKGlucHV0KSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICByZXR1cm4gaW5wdXQgIT0gbnVsbCA/IHRoaXMgOiBOYU47XG4gICAgfVxuICAgIHZhciBkYXkgPSB0aGlzLl9pc1VUQyA/IHRoaXMuX2QuZ2V0VVRDRGF5KCkgOiB0aGlzLl9kLmdldERheSgpO1xuICAgIGlmIChpbnB1dCAhPSBudWxsKSB7XG4gICAgICAgIGlucHV0ID0gcGFyc2VXZWVrZGF5KGlucHV0LCB0aGlzLmxvY2FsZURhdGEoKSk7XG4gICAgICAgIHJldHVybiB0aGlzLmFkZChpbnB1dCAtIGRheSwgJ2QnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZGF5O1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZ2V0U2V0TG9jYWxlRGF5T2ZXZWVrIChpbnB1dCkge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0ICE9IG51bGwgPyB0aGlzIDogTmFOO1xuICAgIH1cbiAgICB2YXIgd2Vla2RheSA9ICh0aGlzLmRheSgpICsgNyAtIHRoaXMubG9jYWxlRGF0YSgpLl93ZWVrLmRvdykgJSA3O1xuICAgIHJldHVybiBpbnB1dCA9PSBudWxsID8gd2Vla2RheSA6IHRoaXMuYWRkKGlucHV0IC0gd2Vla2RheSwgJ2QnKTtcbn1cblxuZnVuY3Rpb24gZ2V0U2V0SVNPRGF5T2ZXZWVrIChpbnB1dCkge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0ICE9IG51bGwgPyB0aGlzIDogTmFOO1xuICAgIH1cblxuICAgIC8vIGJlaGF2ZXMgdGhlIHNhbWUgYXMgbW9tZW50I2RheSBleGNlcHRcbiAgICAvLyBhcyBhIGdldHRlciwgcmV0dXJucyA3IGluc3RlYWQgb2YgMCAoMS03IHJhbmdlIGluc3RlYWQgb2YgMC02KVxuICAgIC8vIGFzIGEgc2V0dGVyLCBzdW5kYXkgc2hvdWxkIGJlbG9uZyB0byB0aGUgcHJldmlvdXMgd2Vlay5cblxuICAgIGlmIChpbnB1dCAhPSBudWxsKSB7XG4gICAgICAgIHZhciB3ZWVrZGF5ID0gcGFyc2VJc29XZWVrZGF5KGlucHV0LCB0aGlzLmxvY2FsZURhdGEoKSk7XG4gICAgICAgIHJldHVybiB0aGlzLmRheSh0aGlzLmRheSgpICUgNyA/IHdlZWtkYXkgOiB3ZWVrZGF5IC0gNyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF5KCkgfHwgNztcbiAgICB9XG59XG5cbnZhciBkZWZhdWx0V2Vla2RheXNSZWdleCA9IG1hdGNoV29yZDtcbmZ1bmN0aW9uIHdlZWtkYXlzUmVnZXggKGlzU3RyaWN0KSB7XG4gICAgaWYgKHRoaXMuX3dlZWtkYXlzUGFyc2VFeGFjdCkge1xuICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ193ZWVrZGF5c1JlZ2V4JykpIHtcbiAgICAgICAgICAgIGNvbXB1dGVXZWVrZGF5c1BhcnNlLmNhbGwodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzU3RyaWN0KSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNTdHJpY3RSZWdleDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c1JlZ2V4O1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfd2Vla2RheXNSZWdleCcpKSB7XG4gICAgICAgICAgICB0aGlzLl93ZWVrZGF5c1JlZ2V4ID0gZGVmYXVsdFdlZWtkYXlzUmVnZXg7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWtkYXlzU3RyaWN0UmVnZXggJiYgaXNTdHJpY3QgP1xuICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNTdHJpY3RSZWdleCA6IHRoaXMuX3dlZWtkYXlzUmVnZXg7XG4gICAgfVxufVxuXG52YXIgZGVmYXVsdFdlZWtkYXlzU2hvcnRSZWdleCA9IG1hdGNoV29yZDtcbmZ1bmN0aW9uIHdlZWtkYXlzU2hvcnRSZWdleCAoaXNTdHJpY3QpIHtcbiAgICBpZiAodGhpcy5fd2Vla2RheXNQYXJzZUV4YWN0KSB7XG4gICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX3dlZWtkYXlzUmVnZXgnKSkge1xuICAgICAgICAgICAgY29tcHV0ZVdlZWtkYXlzUGFyc2UuY2FsbCh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNTdHJpY3QpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c1Nob3J0U3RyaWN0UmVnZXg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNTaG9ydFJlZ2V4O1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfd2Vla2RheXNTaG9ydFJlZ2V4JykpIHtcbiAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzU2hvcnRSZWdleCA9IGRlZmF1bHRXZWVrZGF5c1Nob3J0UmVnZXg7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWtkYXlzU2hvcnRTdHJpY3RSZWdleCAmJiBpc1N0cmljdCA/XG4gICAgICAgICAgICB0aGlzLl93ZWVrZGF5c1Nob3J0U3RyaWN0UmVnZXggOiB0aGlzLl93ZWVrZGF5c1Nob3J0UmVnZXg7XG4gICAgfVxufVxuXG52YXIgZGVmYXVsdFdlZWtkYXlzTWluUmVnZXggPSBtYXRjaFdvcmQ7XG5mdW5jdGlvbiB3ZWVrZGF5c01pblJlZ2V4IChpc1N0cmljdCkge1xuICAgIGlmICh0aGlzLl93ZWVrZGF5c1BhcnNlRXhhY3QpIHtcbiAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfd2Vla2RheXNSZWdleCcpKSB7XG4gICAgICAgICAgICBjb21wdXRlV2Vla2RheXNQYXJzZS5jYWxsKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1N0cmljdCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWtkYXlzTWluU3RyaWN0UmVnZXg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNNaW5SZWdleDtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX3dlZWtkYXlzTWluUmVnZXgnKSkge1xuICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNNaW5SZWdleCA9IGRlZmF1bHRXZWVrZGF5c01pblJlZ2V4O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c01pblN0cmljdFJlZ2V4ICYmIGlzU3RyaWN0ID9cbiAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzTWluU3RyaWN0UmVnZXggOiB0aGlzLl93ZWVrZGF5c01pblJlZ2V4O1xuICAgIH1cbn1cblxuXG5mdW5jdGlvbiBjb21wdXRlV2Vla2RheXNQYXJzZSAoKSB7XG4gICAgZnVuY3Rpb24gY21wTGVuUmV2KGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIGIubGVuZ3RoIC0gYS5sZW5ndGg7XG4gICAgfVxuXG4gICAgdmFyIG1pblBpZWNlcyA9IFtdLCBzaG9ydFBpZWNlcyA9IFtdLCBsb25nUGllY2VzID0gW10sIG1peGVkUGllY2VzID0gW10sXG4gICAgICAgIGksIG1vbSwgbWlucCwgc2hvcnRwLCBsb25ncDtcbiAgICBmb3IgKGkgPSAwOyBpIDwgNzsgaSsrKSB7XG4gICAgICAgIC8vIG1ha2UgdGhlIHJlZ2V4IGlmIHdlIGRvbid0IGhhdmUgaXQgYWxyZWFkeVxuICAgICAgICBtb20gPSBjcmVhdGVVVEMoWzIwMDAsIDFdKS5kYXkoaSk7XG4gICAgICAgIG1pbnAgPSB0aGlzLndlZWtkYXlzTWluKG1vbSwgJycpO1xuICAgICAgICBzaG9ydHAgPSB0aGlzLndlZWtkYXlzU2hvcnQobW9tLCAnJyk7XG4gICAgICAgIGxvbmdwID0gdGhpcy53ZWVrZGF5cyhtb20sICcnKTtcbiAgICAgICAgbWluUGllY2VzLnB1c2gobWlucCk7XG4gICAgICAgIHNob3J0UGllY2VzLnB1c2goc2hvcnRwKTtcbiAgICAgICAgbG9uZ1BpZWNlcy5wdXNoKGxvbmdwKTtcbiAgICAgICAgbWl4ZWRQaWVjZXMucHVzaChtaW5wKTtcbiAgICAgICAgbWl4ZWRQaWVjZXMucHVzaChzaG9ydHApO1xuICAgICAgICBtaXhlZFBpZWNlcy5wdXNoKGxvbmdwKTtcbiAgICB9XG4gICAgLy8gU29ydGluZyBtYWtlcyBzdXJlIGlmIG9uZSB3ZWVrZGF5IChvciBhYmJyKSBpcyBhIHByZWZpeCBvZiBhbm90aGVyIGl0XG4gICAgLy8gd2lsbCBtYXRjaCB0aGUgbG9uZ2VyIHBpZWNlLlxuICAgIG1pblBpZWNlcy5zb3J0KGNtcExlblJldik7XG4gICAgc2hvcnRQaWVjZXMuc29ydChjbXBMZW5SZXYpO1xuICAgIGxvbmdQaWVjZXMuc29ydChjbXBMZW5SZXYpO1xuICAgIG1peGVkUGllY2VzLnNvcnQoY21wTGVuUmV2KTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgNzsgaSsrKSB7XG4gICAgICAgIHNob3J0UGllY2VzW2ldID0gcmVnZXhFc2NhcGUoc2hvcnRQaWVjZXNbaV0pO1xuICAgICAgICBsb25nUGllY2VzW2ldID0gcmVnZXhFc2NhcGUobG9uZ1BpZWNlc1tpXSk7XG4gICAgICAgIG1peGVkUGllY2VzW2ldID0gcmVnZXhFc2NhcGUobWl4ZWRQaWVjZXNbaV0pO1xuICAgIH1cblxuICAgIHRoaXMuX3dlZWtkYXlzUmVnZXggPSBuZXcgUmVnRXhwKCdeKCcgKyBtaXhlZFBpZWNlcy5qb2luKCd8JykgKyAnKScsICdpJyk7XG4gICAgdGhpcy5fd2Vla2RheXNTaG9ydFJlZ2V4ID0gdGhpcy5fd2Vla2RheXNSZWdleDtcbiAgICB0aGlzLl93ZWVrZGF5c01pblJlZ2V4ID0gdGhpcy5fd2Vla2RheXNSZWdleDtcblxuICAgIHRoaXMuX3dlZWtkYXlzU3RyaWN0UmVnZXggPSBuZXcgUmVnRXhwKCdeKCcgKyBsb25nUGllY2VzLmpvaW4oJ3wnKSArICcpJywgJ2knKTtcbiAgICB0aGlzLl93ZWVrZGF5c1Nob3J0U3RyaWN0UmVnZXggPSBuZXcgUmVnRXhwKCdeKCcgKyBzaG9ydFBpZWNlcy5qb2luKCd8JykgKyAnKScsICdpJyk7XG4gICAgdGhpcy5fd2Vla2RheXNNaW5TdHJpY3RSZWdleCA9IG5ldyBSZWdFeHAoJ14oJyArIG1pblBpZWNlcy5qb2luKCd8JykgKyAnKScsICdpJyk7XG59XG5cbi8vIEZPUk1BVFRJTkdcblxuZnVuY3Rpb24gaEZvcm1hdCgpIHtcbiAgICByZXR1cm4gdGhpcy5ob3VycygpICUgMTIgfHwgMTI7XG59XG5cbmZ1bmN0aW9uIGtGb3JtYXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuaG91cnMoKSB8fCAyNDtcbn1cblxuYWRkRm9ybWF0VG9rZW4oJ0gnLCBbJ0hIJywgMl0sIDAsICdob3VyJyk7XG5hZGRGb3JtYXRUb2tlbignaCcsIFsnaGgnLCAyXSwgMCwgaEZvcm1hdCk7XG5hZGRGb3JtYXRUb2tlbignaycsIFsna2snLCAyXSwgMCwga0Zvcm1hdCk7XG5cbmFkZEZvcm1hdFRva2VuKCdobW0nLCAwLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICcnICsgaEZvcm1hdC5hcHBseSh0aGlzKSArIHplcm9GaWxsKHRoaXMubWludXRlcygpLCAyKTtcbn0pO1xuXG5hZGRGb3JtYXRUb2tlbignaG1tc3MnLCAwLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICcnICsgaEZvcm1hdC5hcHBseSh0aGlzKSArIHplcm9GaWxsKHRoaXMubWludXRlcygpLCAyKSArXG4gICAgICAgIHplcm9GaWxsKHRoaXMuc2Vjb25kcygpLCAyKTtcbn0pO1xuXG5hZGRGb3JtYXRUb2tlbignSG1tJywgMCwgMCwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAnJyArIHRoaXMuaG91cnMoKSArIHplcm9GaWxsKHRoaXMubWludXRlcygpLCAyKTtcbn0pO1xuXG5hZGRGb3JtYXRUb2tlbignSG1tc3MnLCAwLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICcnICsgdGhpcy5ob3VycygpICsgemVyb0ZpbGwodGhpcy5taW51dGVzKCksIDIpICtcbiAgICAgICAgemVyb0ZpbGwodGhpcy5zZWNvbmRzKCksIDIpO1xufSk7XG5cbmZ1bmN0aW9uIG1lcmlkaWVtICh0b2tlbiwgbG93ZXJjYXNlKSB7XG4gICAgYWRkRm9ybWF0VG9rZW4odG9rZW4sIDAsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLm1lcmlkaWVtKHRoaXMuaG91cnMoKSwgdGhpcy5taW51dGVzKCksIGxvd2VyY2FzZSk7XG4gICAgfSk7XG59XG5cbm1lcmlkaWVtKCdhJywgdHJ1ZSk7XG5tZXJpZGllbSgnQScsIGZhbHNlKTtcblxuLy8gQUxJQVNFU1xuXG5hZGRVbml0QWxpYXMoJ2hvdXInLCAnaCcpO1xuXG4vLyBQUklPUklUWVxuYWRkVW5pdFByaW9yaXR5KCdob3VyJywgMTMpO1xuXG4vLyBQQVJTSU5HXG5cbmZ1bmN0aW9uIG1hdGNoTWVyaWRpZW0gKGlzU3RyaWN0LCBsb2NhbGUpIHtcbiAgICByZXR1cm4gbG9jYWxlLl9tZXJpZGllbVBhcnNlO1xufVxuXG5hZGRSZWdleFRva2VuKCdhJywgIG1hdGNoTWVyaWRpZW0pO1xuYWRkUmVnZXhUb2tlbignQScsICBtYXRjaE1lcmlkaWVtKTtcbmFkZFJlZ2V4VG9rZW4oJ0gnLCAgbWF0Y2gxdG8yKTtcbmFkZFJlZ2V4VG9rZW4oJ2gnLCAgbWF0Y2gxdG8yKTtcbmFkZFJlZ2V4VG9rZW4oJ2snLCAgbWF0Y2gxdG8yKTtcbmFkZFJlZ2V4VG9rZW4oJ0hIJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuYWRkUmVnZXhUb2tlbignaGgnLCBtYXRjaDF0bzIsIG1hdGNoMik7XG5hZGRSZWdleFRva2VuKCdraycsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcblxuYWRkUmVnZXhUb2tlbignaG1tJywgbWF0Y2gzdG80KTtcbmFkZFJlZ2V4VG9rZW4oJ2htbXNzJywgbWF0Y2g1dG82KTtcbmFkZFJlZ2V4VG9rZW4oJ0htbScsIG1hdGNoM3RvNCk7XG5hZGRSZWdleFRva2VuKCdIbW1zcycsIG1hdGNoNXRvNik7XG5cbmFkZFBhcnNlVG9rZW4oWydIJywgJ0hIJ10sIEhPVVIpO1xuYWRkUGFyc2VUb2tlbihbJ2snLCAna2snXSwgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgdmFyIGtJbnB1dCA9IHRvSW50KGlucHV0KTtcbiAgICBhcnJheVtIT1VSXSA9IGtJbnB1dCA9PT0gMjQgPyAwIDoga0lucHV0O1xufSk7XG5hZGRQYXJzZVRva2VuKFsnYScsICdBJ10sIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgIGNvbmZpZy5faXNQbSA9IGNvbmZpZy5fbG9jYWxlLmlzUE0oaW5wdXQpO1xuICAgIGNvbmZpZy5fbWVyaWRpZW0gPSBpbnB1dDtcbn0pO1xuYWRkUGFyc2VUb2tlbihbJ2gnLCAnaGgnXSwgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgYXJyYXlbSE9VUl0gPSB0b0ludChpbnB1dCk7XG4gICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuYmlnSG91ciA9IHRydWU7XG59KTtcbmFkZFBhcnNlVG9rZW4oJ2htbScsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgIHZhciBwb3MgPSBpbnB1dC5sZW5ndGggLSAyO1xuICAgIGFycmF5W0hPVVJdID0gdG9JbnQoaW5wdXQuc3Vic3RyKDAsIHBvcykpO1xuICAgIGFycmF5W01JTlVURV0gPSB0b0ludChpbnB1dC5zdWJzdHIocG9zKSk7XG4gICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuYmlnSG91ciA9IHRydWU7XG59KTtcbmFkZFBhcnNlVG9rZW4oJ2htbXNzJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgdmFyIHBvczEgPSBpbnB1dC5sZW5ndGggLSA0O1xuICAgIHZhciBwb3MyID0gaW5wdXQubGVuZ3RoIC0gMjtcbiAgICBhcnJheVtIT1VSXSA9IHRvSW50KGlucHV0LnN1YnN0cigwLCBwb3MxKSk7XG4gICAgYXJyYXlbTUlOVVRFXSA9IHRvSW50KGlucHV0LnN1YnN0cihwb3MxLCAyKSk7XG4gICAgYXJyYXlbU0VDT05EXSA9IHRvSW50KGlucHV0LnN1YnN0cihwb3MyKSk7XG4gICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuYmlnSG91ciA9IHRydWU7XG59KTtcbmFkZFBhcnNlVG9rZW4oJ0htbScsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgIHZhciBwb3MgPSBpbnB1dC5sZW5ndGggLSAyO1xuICAgIGFycmF5W0hPVVJdID0gdG9JbnQoaW5wdXQuc3Vic3RyKDAsIHBvcykpO1xuICAgIGFycmF5W01JTlVURV0gPSB0b0ludChpbnB1dC5zdWJzdHIocG9zKSk7XG59KTtcbmFkZFBhcnNlVG9rZW4oJ0htbXNzJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgdmFyIHBvczEgPSBpbnB1dC5sZW5ndGggLSA0O1xuICAgIHZhciBwb3MyID0gaW5wdXQubGVuZ3RoIC0gMjtcbiAgICBhcnJheVtIT1VSXSA9IHRvSW50KGlucHV0LnN1YnN0cigwLCBwb3MxKSk7XG4gICAgYXJyYXlbTUlOVVRFXSA9IHRvSW50KGlucHV0LnN1YnN0cihwb3MxLCAyKSk7XG4gICAgYXJyYXlbU0VDT05EXSA9IHRvSW50KGlucHV0LnN1YnN0cihwb3MyKSk7XG59KTtcblxuLy8gTE9DQUxFU1xuXG5mdW5jdGlvbiBsb2NhbGVJc1BNIChpbnB1dCkge1xuICAgIC8vIElFOCBRdWlya3MgTW9kZSAmIElFNyBTdGFuZGFyZHMgTW9kZSBkbyBub3QgYWxsb3cgYWNjZXNzaW5nIHN0cmluZ3MgbGlrZSBhcnJheXNcbiAgICAvLyBVc2luZyBjaGFyQXQgc2hvdWxkIGJlIG1vcmUgY29tcGF0aWJsZS5cbiAgICByZXR1cm4gKChpbnB1dCArICcnKS50b0xvd2VyQ2FzZSgpLmNoYXJBdCgwKSA9PT0gJ3AnKTtcbn1cblxudmFyIGRlZmF1bHRMb2NhbGVNZXJpZGllbVBhcnNlID0gL1thcF1cXC4/bT9cXC4/L2k7XG5mdW5jdGlvbiBsb2NhbGVNZXJpZGllbSAoaG91cnMsIG1pbnV0ZXMsIGlzTG93ZXIpIHtcbiAgICBpZiAoaG91cnMgPiAxMSkge1xuICAgICAgICByZXR1cm4gaXNMb3dlciA/ICdwbScgOiAnUE0nO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBpc0xvd2VyID8gJ2FtJyA6ICdBTSc7XG4gICAgfVxufVxuXG5cbi8vIE1PTUVOVFNcblxuLy8gU2V0dGluZyB0aGUgaG91ciBzaG91bGQga2VlcCB0aGUgdGltZSwgYmVjYXVzZSB0aGUgdXNlciBleHBsaWNpdGx5XG4vLyBzcGVjaWZpZWQgd2hpY2ggaG91ciBoZSB3YW50cy4gU28gdHJ5aW5nIHRvIG1haW50YWluIHRoZSBzYW1lIGhvdXIgKGluXG4vLyBhIG5ldyB0aW1lem9uZSkgbWFrZXMgc2Vuc2UuIEFkZGluZy9zdWJ0cmFjdGluZyBob3VycyBkb2VzIG5vdCBmb2xsb3dcbi8vIHRoaXMgcnVsZS5cbnZhciBnZXRTZXRIb3VyID0gbWFrZUdldFNldCgnSG91cnMnLCB0cnVlKTtcblxuLy8gbW9udGhzXG4vLyB3ZWVrXG4vLyB3ZWVrZGF5c1xuLy8gbWVyaWRpZW1cbnZhciBiYXNlQ29uZmlnID0ge1xuICAgIGNhbGVuZGFyOiBkZWZhdWx0Q2FsZW5kYXIsXG4gICAgbG9uZ0RhdGVGb3JtYXQ6IGRlZmF1bHRMb25nRGF0ZUZvcm1hdCxcbiAgICBpbnZhbGlkRGF0ZTogZGVmYXVsdEludmFsaWREYXRlLFxuICAgIG9yZGluYWw6IGRlZmF1bHRPcmRpbmFsLFxuICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IGRlZmF1bHREYXlPZk1vbnRoT3JkaW5hbFBhcnNlLFxuICAgIHJlbGF0aXZlVGltZTogZGVmYXVsdFJlbGF0aXZlVGltZSxcblxuICAgIG1vbnRoczogZGVmYXVsdExvY2FsZU1vbnRocyxcbiAgICBtb250aHNTaG9ydDogZGVmYXVsdExvY2FsZU1vbnRoc1Nob3J0LFxuXG4gICAgd2VlazogZGVmYXVsdExvY2FsZVdlZWssXG5cbiAgICB3ZWVrZGF5czogZGVmYXVsdExvY2FsZVdlZWtkYXlzLFxuICAgIHdlZWtkYXlzTWluOiBkZWZhdWx0TG9jYWxlV2Vla2RheXNNaW4sXG4gICAgd2Vla2RheXNTaG9ydDogZGVmYXVsdExvY2FsZVdlZWtkYXlzU2hvcnQsXG5cbiAgICBtZXJpZGllbVBhcnNlOiBkZWZhdWx0TG9jYWxlTWVyaWRpZW1QYXJzZVxufTtcblxuLy8gaW50ZXJuYWwgc3RvcmFnZSBmb3IgbG9jYWxlIGNvbmZpZyBmaWxlc1xudmFyIGxvY2FsZXMgPSB7fTtcbnZhciBsb2NhbGVGYW1pbGllcyA9IHt9O1xudmFyIGdsb2JhbExvY2FsZTtcblxuZnVuY3Rpb24gbm9ybWFsaXplTG9jYWxlKGtleSkge1xuICAgIHJldHVybiBrZXkgPyBrZXkudG9Mb3dlckNhc2UoKS5yZXBsYWNlKCdfJywgJy0nKSA6IGtleTtcbn1cblxuLy8gcGljayB0aGUgbG9jYWxlIGZyb20gdGhlIGFycmF5XG4vLyB0cnkgWydlbi1hdScsICdlbi1nYiddIGFzICdlbi1hdScsICdlbi1nYicsICdlbicsIGFzIGluIG1vdmUgdGhyb3VnaCB0aGUgbGlzdCB0cnlpbmcgZWFjaFxuLy8gc3Vic3RyaW5nIGZyb20gbW9zdCBzcGVjaWZpYyB0byBsZWFzdCwgYnV0IG1vdmUgdG8gdGhlIG5leHQgYXJyYXkgaXRlbSBpZiBpdCdzIGEgbW9yZSBzcGVjaWZpYyB2YXJpYW50IHRoYW4gdGhlIGN1cnJlbnQgcm9vdFxuZnVuY3Rpb24gY2hvb3NlTG9jYWxlKG5hbWVzKSB7XG4gICAgdmFyIGkgPSAwLCBqLCBuZXh0LCBsb2NhbGUsIHNwbGl0O1xuXG4gICAgd2hpbGUgKGkgPCBuYW1lcy5sZW5ndGgpIHtcbiAgICAgICAgc3BsaXQgPSBub3JtYWxpemVMb2NhbGUobmFtZXNbaV0pLnNwbGl0KCctJyk7XG4gICAgICAgIGogPSBzcGxpdC5sZW5ndGg7XG4gICAgICAgIG5leHQgPSBub3JtYWxpemVMb2NhbGUobmFtZXNbaSArIDFdKTtcbiAgICAgICAgbmV4dCA9IG5leHQgPyBuZXh0LnNwbGl0KCctJykgOiBudWxsO1xuICAgICAgICB3aGlsZSAoaiA+IDApIHtcbiAgICAgICAgICAgIGxvY2FsZSA9IGxvYWRMb2NhbGUoc3BsaXQuc2xpY2UoMCwgaikuam9pbignLScpKTtcbiAgICAgICAgICAgIGlmIChsb2NhbGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbG9jYWxlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG5leHQgJiYgbmV4dC5sZW5ndGggPj0gaiAmJiBjb21wYXJlQXJyYXlzKHNwbGl0LCBuZXh0LCB0cnVlKSA+PSBqIC0gMSkge1xuICAgICAgICAgICAgICAgIC8vdGhlIG5leHQgYXJyYXkgaXRlbSBpcyBiZXR0ZXIgdGhhbiBhIHNoYWxsb3dlciBzdWJzdHJpbmcgb2YgdGhpcyBvbmVcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGotLTtcbiAgICAgICAgfVxuICAgICAgICBpKys7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufVxuXG5mdW5jdGlvbiBsb2FkTG9jYWxlKG5hbWUpIHtcbiAgICB2YXIgb2xkTG9jYWxlID0gbnVsbDtcbiAgICAvLyBUT0RPOiBGaW5kIGEgYmV0dGVyIHdheSB0byByZWdpc3RlciBhbmQgbG9hZCBhbGwgdGhlIGxvY2FsZXMgaW4gTm9kZVxuICAgIGlmICghbG9jYWxlc1tuYW1lXSAmJiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcpICYmXG4gICAgICAgICAgICBtb2R1bGUgJiYgbW9kdWxlLmV4cG9ydHMpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIG9sZExvY2FsZSA9IGdsb2JhbExvY2FsZS5fYWJicjtcbiAgICAgICAgICAgIHJlcXVpcmUoJy4vbG9jYWxlLycgKyBuYW1lKTtcbiAgICAgICAgICAgIC8vIGJlY2F1c2UgZGVmaW5lTG9jYWxlIGN1cnJlbnRseSBhbHNvIHNldHMgdGhlIGdsb2JhbCBsb2NhbGUsIHdlXG4gICAgICAgICAgICAvLyB3YW50IHRvIHVuZG8gdGhhdCBmb3IgbGF6eSBsb2FkZWQgbG9jYWxlc1xuICAgICAgICAgICAgZ2V0U2V0R2xvYmFsTG9jYWxlKG9sZExvY2FsZSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgfVxuICAgIH1cbiAgICByZXR1cm4gbG9jYWxlc1tuYW1lXTtcbn1cblxuLy8gVGhpcyBmdW5jdGlvbiB3aWxsIGxvYWQgbG9jYWxlIGFuZCB0aGVuIHNldCB0aGUgZ2xvYmFsIGxvY2FsZS4gIElmXG4vLyBubyBhcmd1bWVudHMgYXJlIHBhc3NlZCBpbiwgaXQgd2lsbCBzaW1wbHkgcmV0dXJuIHRoZSBjdXJyZW50IGdsb2JhbFxuLy8gbG9jYWxlIGtleS5cbmZ1bmN0aW9uIGdldFNldEdsb2JhbExvY2FsZSAoa2V5LCB2YWx1ZXMpIHtcbiAgICB2YXIgZGF0YTtcbiAgICBpZiAoa2V5KSB7XG4gICAgICAgIGlmIChpc1VuZGVmaW5lZCh2YWx1ZXMpKSB7XG4gICAgICAgICAgICBkYXRhID0gZ2V0TG9jYWxlKGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBkYXRhID0gZGVmaW5lTG9jYWxlKGtleSwgdmFsdWVzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgICAgICAvLyBtb21lbnQuZHVyYXRpb24uX2xvY2FsZSA9IG1vbWVudC5fbG9jYWxlID0gZGF0YTtcbiAgICAgICAgICAgIGdsb2JhbExvY2FsZSA9IGRhdGE7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZ2xvYmFsTG9jYWxlLl9hYmJyO1xufVxuXG5mdW5jdGlvbiBkZWZpbmVMb2NhbGUgKG5hbWUsIGNvbmZpZykge1xuICAgIGlmIChjb25maWcgIT09IG51bGwpIHtcbiAgICAgICAgdmFyIHBhcmVudENvbmZpZyA9IGJhc2VDb25maWc7XG4gICAgICAgIGNvbmZpZy5hYmJyID0gbmFtZTtcbiAgICAgICAgaWYgKGxvY2FsZXNbbmFtZV0gIT0gbnVsbCkge1xuICAgICAgICAgICAgZGVwcmVjYXRlU2ltcGxlKCdkZWZpbmVMb2NhbGVPdmVycmlkZScsXG4gICAgICAgICAgICAgICAgICAgICd1c2UgbW9tZW50LnVwZGF0ZUxvY2FsZShsb2NhbGVOYW1lLCBjb25maWcpIHRvIGNoYW5nZSAnICtcbiAgICAgICAgICAgICAgICAgICAgJ2FuIGV4aXN0aW5nIGxvY2FsZS4gbW9tZW50LmRlZmluZUxvY2FsZShsb2NhbGVOYW1lLCAnICtcbiAgICAgICAgICAgICAgICAgICAgJ2NvbmZpZykgc2hvdWxkIG9ubHkgYmUgdXNlZCBmb3IgY3JlYXRpbmcgYSBuZXcgbG9jYWxlICcgK1xuICAgICAgICAgICAgICAgICAgICAnU2VlIGh0dHA6Ly9tb21lbnRqcy5jb20vZ3VpZGVzLyMvd2FybmluZ3MvZGVmaW5lLWxvY2FsZS8gZm9yIG1vcmUgaW5mby4nKTtcbiAgICAgICAgICAgIHBhcmVudENvbmZpZyA9IGxvY2FsZXNbbmFtZV0uX2NvbmZpZztcbiAgICAgICAgfSBlbHNlIGlmIChjb25maWcucGFyZW50TG9jYWxlICE9IG51bGwpIHtcbiAgICAgICAgICAgIGlmIChsb2NhbGVzW2NvbmZpZy5wYXJlbnRMb2NhbGVdICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBwYXJlbnRDb25maWcgPSBsb2NhbGVzW2NvbmZpZy5wYXJlbnRMb2NhbGVdLl9jb25maWc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICghbG9jYWxlRmFtaWxpZXNbY29uZmlnLnBhcmVudExvY2FsZV0pIHtcbiAgICAgICAgICAgICAgICAgICAgbG9jYWxlRmFtaWxpZXNbY29uZmlnLnBhcmVudExvY2FsZV0gPSBbXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbG9jYWxlRmFtaWxpZXNbY29uZmlnLnBhcmVudExvY2FsZV0ucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZzogY29uZmlnXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbG9jYWxlc1tuYW1lXSA9IG5ldyBMb2NhbGUobWVyZ2VDb25maWdzKHBhcmVudENvbmZpZywgY29uZmlnKSk7XG5cbiAgICAgICAgaWYgKGxvY2FsZUZhbWlsaWVzW25hbWVdKSB7XG4gICAgICAgICAgICBsb2NhbGVGYW1pbGllc1tuYW1lXS5mb3JFYWNoKGZ1bmN0aW9uICh4KSB7XG4gICAgICAgICAgICAgICAgZGVmaW5lTG9jYWxlKHgubmFtZSwgeC5jb25maWcpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBiYWNrd2FyZHMgY29tcGF0IGZvciBub3c6IGFsc28gc2V0IHRoZSBsb2NhbGVcbiAgICAgICAgLy8gbWFrZSBzdXJlIHdlIHNldCB0aGUgbG9jYWxlIEFGVEVSIGFsbCBjaGlsZCBsb2NhbGVzIGhhdmUgYmVlblxuICAgICAgICAvLyBjcmVhdGVkLCBzbyB3ZSB3b24ndCBlbmQgdXAgd2l0aCB0aGUgY2hpbGQgbG9jYWxlIHNldC5cbiAgICAgICAgZ2V0U2V0R2xvYmFsTG9jYWxlKG5hbWUpO1xuXG5cbiAgICAgICAgcmV0dXJuIGxvY2FsZXNbbmFtZV07XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gdXNlZnVsIGZvciB0ZXN0aW5nXG4gICAgICAgIGRlbGV0ZSBsb2NhbGVzW25hbWVdO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUxvY2FsZShuYW1lLCBjb25maWcpIHtcbiAgICBpZiAoY29uZmlnICE9IG51bGwpIHtcbiAgICAgICAgdmFyIGxvY2FsZSwgcGFyZW50Q29uZmlnID0gYmFzZUNvbmZpZztcbiAgICAgICAgLy8gTUVSR0VcbiAgICAgICAgaWYgKGxvY2FsZXNbbmFtZV0gIT0gbnVsbCkge1xuICAgICAgICAgICAgcGFyZW50Q29uZmlnID0gbG9jYWxlc1tuYW1lXS5fY29uZmlnO1xuICAgICAgICB9XG4gICAgICAgIGNvbmZpZyA9IG1lcmdlQ29uZmlncyhwYXJlbnRDb25maWcsIGNvbmZpZyk7XG4gICAgICAgIGxvY2FsZSA9IG5ldyBMb2NhbGUoY29uZmlnKTtcbiAgICAgICAgbG9jYWxlLnBhcmVudExvY2FsZSA9IGxvY2FsZXNbbmFtZV07XG4gICAgICAgIGxvY2FsZXNbbmFtZV0gPSBsb2NhbGU7XG5cbiAgICAgICAgLy8gYmFja3dhcmRzIGNvbXBhdCBmb3Igbm93OiBhbHNvIHNldCB0aGUgbG9jYWxlXG4gICAgICAgIGdldFNldEdsb2JhbExvY2FsZShuYW1lKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyBwYXNzIG51bGwgZm9yIGNvbmZpZyB0byB1bnVwZGF0ZSwgdXNlZnVsIGZvciB0ZXN0c1xuICAgICAgICBpZiAobG9jYWxlc1tuYW1lXSAhPSBudWxsKSB7XG4gICAgICAgICAgICBpZiAobG9jYWxlc1tuYW1lXS5wYXJlbnRMb2NhbGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGxvY2FsZXNbbmFtZV0gPSBsb2NhbGVzW25hbWVdLnBhcmVudExvY2FsZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobG9jYWxlc1tuYW1lXSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlIGxvY2FsZXNbbmFtZV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGxvY2FsZXNbbmFtZV07XG59XG5cbi8vIHJldHVybnMgbG9jYWxlIGRhdGFcbmZ1bmN0aW9uIGdldExvY2FsZSAoa2V5KSB7XG4gICAgdmFyIGxvY2FsZTtcblxuICAgIGlmIChrZXkgJiYga2V5Ll9sb2NhbGUgJiYga2V5Ll9sb2NhbGUuX2FiYnIpIHtcbiAgICAgICAga2V5ID0ga2V5Ll9sb2NhbGUuX2FiYnI7XG4gICAgfVxuXG4gICAgaWYgKCFrZXkpIHtcbiAgICAgICAgcmV0dXJuIGdsb2JhbExvY2FsZTtcbiAgICB9XG5cbiAgICBpZiAoIWlzQXJyYXkoa2V5KSkge1xuICAgICAgICAvL3Nob3J0LWNpcmN1aXQgZXZlcnl0aGluZyBlbHNlXG4gICAgICAgIGxvY2FsZSA9IGxvYWRMb2NhbGUoa2V5KTtcbiAgICAgICAgaWYgKGxvY2FsZSkge1xuICAgICAgICAgICAgcmV0dXJuIGxvY2FsZTtcbiAgICAgICAgfVxuICAgICAgICBrZXkgPSBba2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2hvb3NlTG9jYWxlKGtleSk7XG59XG5cbmZ1bmN0aW9uIGxpc3RMb2NhbGVzKCkge1xuICAgIHJldHVybiBrZXlzJDEobG9jYWxlcyk7XG59XG5cbmZ1bmN0aW9uIGNoZWNrT3ZlcmZsb3cgKG0pIHtcbiAgICB2YXIgb3ZlcmZsb3c7XG4gICAgdmFyIGEgPSBtLl9hO1xuXG4gICAgaWYgKGEgJiYgZ2V0UGFyc2luZ0ZsYWdzKG0pLm92ZXJmbG93ID09PSAtMikge1xuICAgICAgICBvdmVyZmxvdyA9XG4gICAgICAgICAgICBhW01PTlRIXSAgICAgICA8IDAgfHwgYVtNT05USF0gICAgICAgPiAxMSAgPyBNT05USCA6XG4gICAgICAgICAgICBhW0RBVEVdICAgICAgICA8IDEgfHwgYVtEQVRFXSAgICAgICAgPiBkYXlzSW5Nb250aChhW1lFQVJdLCBhW01PTlRIXSkgPyBEQVRFIDpcbiAgICAgICAgICAgIGFbSE9VUl0gICAgICAgIDwgMCB8fCBhW0hPVVJdICAgICAgICA+IDI0IHx8IChhW0hPVVJdID09PSAyNCAmJiAoYVtNSU5VVEVdICE9PSAwIHx8IGFbU0VDT05EXSAhPT0gMCB8fCBhW01JTExJU0VDT05EXSAhPT0gMCkpID8gSE9VUiA6XG4gICAgICAgICAgICBhW01JTlVURV0gICAgICA8IDAgfHwgYVtNSU5VVEVdICAgICAgPiA1OSAgPyBNSU5VVEUgOlxuICAgICAgICAgICAgYVtTRUNPTkRdICAgICAgPCAwIHx8IGFbU0VDT05EXSAgICAgID4gNTkgID8gU0VDT05EIDpcbiAgICAgICAgICAgIGFbTUlMTElTRUNPTkRdIDwgMCB8fCBhW01JTExJU0VDT05EXSA+IDk5OSA/IE1JTExJU0VDT05EIDpcbiAgICAgICAgICAgIC0xO1xuXG4gICAgICAgIGlmIChnZXRQYXJzaW5nRmxhZ3MobSkuX292ZXJmbG93RGF5T2ZZZWFyICYmIChvdmVyZmxvdyA8IFlFQVIgfHwgb3ZlcmZsb3cgPiBEQVRFKSkge1xuICAgICAgICAgICAgb3ZlcmZsb3cgPSBEQVRFO1xuICAgICAgICB9XG4gICAgICAgIGlmIChnZXRQYXJzaW5nRmxhZ3MobSkuX292ZXJmbG93V2Vla3MgJiYgb3ZlcmZsb3cgPT09IC0xKSB7XG4gICAgICAgICAgICBvdmVyZmxvdyA9IFdFRUs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGdldFBhcnNpbmdGbGFncyhtKS5fb3ZlcmZsb3dXZWVrZGF5ICYmIG92ZXJmbG93ID09PSAtMSkge1xuICAgICAgICAgICAgb3ZlcmZsb3cgPSBXRUVLREFZO1xuICAgICAgICB9XG5cbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKG0pLm92ZXJmbG93ID0gb3ZlcmZsb3c7XG4gICAgfVxuXG4gICAgcmV0dXJuIG07XG59XG5cbi8vIGlzbyA4NjAxIHJlZ2V4XG4vLyAwMDAwLTAwLTAwIDAwMDAtVzAwIG9yIDAwMDAtVzAwLTAgKyBUICsgMDAgb3IgMDA6MDAgb3IgMDA6MDA6MDAgb3IgMDA6MDA6MDAuMDAwICsgKzAwOjAwIG9yICswMDAwIG9yICswMClcbnZhciBleHRlbmRlZElzb1JlZ2V4ID0gL15cXHMqKCg/OlsrLV1cXGR7Nn18XFxkezR9KS0oPzpcXGRcXGQtXFxkXFxkfFdcXGRcXGQtXFxkfFdcXGRcXGR8XFxkXFxkXFxkfFxcZFxcZCkpKD86KFR8ICkoXFxkXFxkKD86OlxcZFxcZCg/OjpcXGRcXGQoPzpbLixdXFxkKyk/KT8pPykoW1xcK1xcLV1cXGRcXGQoPzo6P1xcZFxcZCk/fFxccypaKT8pPyQvO1xudmFyIGJhc2ljSXNvUmVnZXggPSAvXlxccyooKD86WystXVxcZHs2fXxcXGR7NH0pKD86XFxkXFxkXFxkXFxkfFdcXGRcXGRcXGR8V1xcZFxcZHxcXGRcXGRcXGR8XFxkXFxkKSkoPzooVHwgKShcXGRcXGQoPzpcXGRcXGQoPzpcXGRcXGQoPzpbLixdXFxkKyk/KT8pPykoW1xcK1xcLV1cXGRcXGQoPzo6P1xcZFxcZCk/fFxccypaKT8pPyQvO1xuXG52YXIgdHpSZWdleCA9IC9afFsrLV1cXGRcXGQoPzo6P1xcZFxcZCk/LztcblxudmFyIGlzb0RhdGVzID0gW1xuICAgIFsnWVlZWVlZLU1NLUREJywgL1srLV1cXGR7Nn0tXFxkXFxkLVxcZFxcZC9dLFxuICAgIFsnWVlZWS1NTS1ERCcsIC9cXGR7NH0tXFxkXFxkLVxcZFxcZC9dLFxuICAgIFsnR0dHRy1bV11XVy1FJywgL1xcZHs0fS1XXFxkXFxkLVxcZC9dLFxuICAgIFsnR0dHRy1bV11XVycsIC9cXGR7NH0tV1xcZFxcZC8sIGZhbHNlXSxcbiAgICBbJ1lZWVktREREJywgL1xcZHs0fS1cXGR7M30vXSxcbiAgICBbJ1lZWVktTU0nLCAvXFxkezR9LVxcZFxcZC8sIGZhbHNlXSxcbiAgICBbJ1lZWVlZWU1NREQnLCAvWystXVxcZHsxMH0vXSxcbiAgICBbJ1lZWVlNTUREJywgL1xcZHs4fS9dLFxuICAgIC8vIFlZWVlNTSBpcyBOT1QgYWxsb3dlZCBieSB0aGUgc3RhbmRhcmRcbiAgICBbJ0dHR0dbV11XV0UnLCAvXFxkezR9V1xcZHszfS9dLFxuICAgIFsnR0dHR1tXXVdXJywgL1xcZHs0fVdcXGR7Mn0vLCBmYWxzZV0sXG4gICAgWydZWVlZREREJywgL1xcZHs3fS9dXG5dO1xuXG4vLyBpc28gdGltZSBmb3JtYXRzIGFuZCByZWdleGVzXG52YXIgaXNvVGltZXMgPSBbXG4gICAgWydISDptbTpzcy5TU1NTJywgL1xcZFxcZDpcXGRcXGQ6XFxkXFxkXFwuXFxkKy9dLFxuICAgIFsnSEg6bW06c3MsU1NTUycsIC9cXGRcXGQ6XFxkXFxkOlxcZFxcZCxcXGQrL10sXG4gICAgWydISDptbTpzcycsIC9cXGRcXGQ6XFxkXFxkOlxcZFxcZC9dLFxuICAgIFsnSEg6bW0nLCAvXFxkXFxkOlxcZFxcZC9dLFxuICAgIFsnSEhtbXNzLlNTU1MnLCAvXFxkXFxkXFxkXFxkXFxkXFxkXFwuXFxkKy9dLFxuICAgIFsnSEhtbXNzLFNTU1MnLCAvXFxkXFxkXFxkXFxkXFxkXFxkLFxcZCsvXSxcbiAgICBbJ0hIbW1zcycsIC9cXGRcXGRcXGRcXGRcXGRcXGQvXSxcbiAgICBbJ0hIbW0nLCAvXFxkXFxkXFxkXFxkL10sXG4gICAgWydISCcsIC9cXGRcXGQvXVxuXTtcblxudmFyIGFzcE5ldEpzb25SZWdleCA9IC9eXFwvP0RhdGVcXCgoXFwtP1xcZCspL2k7XG5cbi8vIGRhdGUgZnJvbSBpc28gZm9ybWF0XG5mdW5jdGlvbiBjb25maWdGcm9tSVNPKGNvbmZpZykge1xuICAgIHZhciBpLCBsLFxuICAgICAgICBzdHJpbmcgPSBjb25maWcuX2ksXG4gICAgICAgIG1hdGNoID0gZXh0ZW5kZWRJc29SZWdleC5leGVjKHN0cmluZykgfHwgYmFzaWNJc29SZWdleC5leGVjKHN0cmluZyksXG4gICAgICAgIGFsbG93VGltZSwgZGF0ZUZvcm1hdCwgdGltZUZvcm1hdCwgdHpGb3JtYXQ7XG5cbiAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuaXNvID0gdHJ1ZTtcblxuICAgICAgICBmb3IgKGkgPSAwLCBsID0gaXNvRGF0ZXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoaXNvRGF0ZXNbaV1bMV0uZXhlYyhtYXRjaFsxXSkpIHtcbiAgICAgICAgICAgICAgICBkYXRlRm9ybWF0ID0gaXNvRGF0ZXNbaV1bMF07XG4gICAgICAgICAgICAgICAgYWxsb3dUaW1lID0gaXNvRGF0ZXNbaV1bMl0gIT09IGZhbHNlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRlRm9ybWF0ID09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbmZpZy5faXNWYWxpZCA9IGZhbHNlO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtYXRjaFszXSkge1xuICAgICAgICAgICAgZm9yIChpID0gMCwgbCA9IGlzb1RpbWVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmIChpc29UaW1lc1tpXVsxXS5leGVjKG1hdGNoWzNdKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBtYXRjaFsyXSBzaG91bGQgYmUgJ1QnIG9yIHNwYWNlXG4gICAgICAgICAgICAgICAgICAgIHRpbWVGb3JtYXQgPSAobWF0Y2hbMl0gfHwgJyAnKSArIGlzb1RpbWVzW2ldWzBdO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGltZUZvcm1hdCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgY29uZmlnLl9pc1ZhbGlkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghYWxsb3dUaW1lICYmIHRpbWVGb3JtYXQgIT0gbnVsbCkge1xuICAgICAgICAgICAgY29uZmlnLl9pc1ZhbGlkID0gZmFsc2U7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1hdGNoWzRdKSB7XG4gICAgICAgICAgICBpZiAodHpSZWdleC5leGVjKG1hdGNoWzRdKSkge1xuICAgICAgICAgICAgICAgIHR6Rm9ybWF0ID0gJ1onO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25maWcuX2lzVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uZmlnLl9mID0gZGF0ZUZvcm1hdCArICh0aW1lRm9ybWF0IHx8ICcnKSArICh0ekZvcm1hdCB8fCAnJyk7XG4gICAgICAgIGNvbmZpZ0Zyb21TdHJpbmdBbmRGb3JtYXQoY29uZmlnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBjb25maWcuX2lzVmFsaWQgPSBmYWxzZTtcbiAgICB9XG59XG5cbi8vIFJGQyAyODIyIHJlZ2V4OiBGb3IgZGV0YWlscyBzZWUgaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzI4MjIjc2VjdGlvbi0zLjNcbnZhciBiYXNpY1JmY1JlZ2V4ID0gL14oKD86TW9ufFR1ZXxXZWR8VGh1fEZyaXxTYXR8U3VuKSw/XFxzKT8oXFxkP1xcZFxccyg/OkphbnxGZWJ8TWFyfEFwcnxNYXl8SnVufEp1bHxBdWd8U2VwfE9jdHxOb3Z8RGVjKVxccyg/OlxcZFxcZCk/XFxkXFxkXFxzKShcXGRcXGQ6XFxkXFxkKShcXDpcXGRcXGQpPyhcXHMoPzpVVHxHTVR8W0VDTVBdW1NEXVR8W0EtSUstWmEtaWstel18WystXVxcZHs0fSkpJC87XG5cbi8vIGRhdGUgYW5kIHRpbWUgZnJvbSByZWYgMjgyMiBmb3JtYXRcbmZ1bmN0aW9uIGNvbmZpZ0Zyb21SRkMyODIyKGNvbmZpZykge1xuICAgIHZhciBzdHJpbmcsIG1hdGNoLCBkYXlGb3JtYXQsXG4gICAgICAgIGRhdGVGb3JtYXQsIHRpbWVGb3JtYXQsIHR6Rm9ybWF0O1xuICAgIHZhciB0aW1lem9uZXMgPSB7XG4gICAgICAgICcgR01UJzogJyArMDAwMCcsXG4gICAgICAgICcgRURUJzogJyAtMDQwMCcsXG4gICAgICAgICcgRVNUJzogJyAtMDUwMCcsXG4gICAgICAgICcgQ0RUJzogJyAtMDUwMCcsXG4gICAgICAgICcgQ1NUJzogJyAtMDYwMCcsXG4gICAgICAgICcgTURUJzogJyAtMDYwMCcsXG4gICAgICAgICcgTVNUJzogJyAtMDcwMCcsXG4gICAgICAgICcgUERUJzogJyAtMDcwMCcsXG4gICAgICAgICcgUFNUJzogJyAtMDgwMCdcbiAgICB9O1xuICAgIHZhciBtaWxpdGFyeSA9ICdZWFdWVVRTUlFQT05aQUJDREVGR0hJS0xNJztcbiAgICB2YXIgdGltZXpvbmUsIHRpbWV6b25lSW5kZXg7XG5cbiAgICBzdHJpbmcgPSBjb25maWcuX2lcbiAgICAgICAgLnJlcGxhY2UoL1xcKFteXFwpXSpcXCl8W1xcblxcdF0vZywgJyAnKSAvLyBSZW1vdmUgY29tbWVudHMgYW5kIGZvbGRpbmcgd2hpdGVzcGFjZVxuICAgICAgICAucmVwbGFjZSgvKFxcc1xccyspL2csICcgJykgLy8gUmVwbGFjZSBtdWx0aXBsZS1zcGFjZXMgd2l0aCBhIHNpbmdsZSBzcGFjZVxuICAgICAgICAucmVwbGFjZSgvXlxcc3xcXHMkL2csICcnKTsgLy8gUmVtb3ZlIGxlYWRpbmcgYW5kIHRyYWlsaW5nIHNwYWNlc1xuICAgIG1hdGNoID0gYmFzaWNSZmNSZWdleC5leGVjKHN0cmluZyk7XG5cbiAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgZGF5Rm9ybWF0ID0gbWF0Y2hbMV0gPyAnZGRkJyArICgobWF0Y2hbMV0ubGVuZ3RoID09PSA1KSA/ICcsICcgOiAnICcpIDogJyc7XG4gICAgICAgIGRhdGVGb3JtYXQgPSAnRCBNTU0gJyArICgobWF0Y2hbMl0ubGVuZ3RoID4gMTApID8gJ1lZWVkgJyA6ICdZWSAnKTtcbiAgICAgICAgdGltZUZvcm1hdCA9ICdISDptbScgKyAobWF0Y2hbNF0gPyAnOnNzJyA6ICcnKTtcblxuICAgICAgICAvLyBUT0RPOiBSZXBsYWNlIHRoZSB2YW5pbGxhIEpTIERhdGUgb2JqZWN0IHdpdGggYW4gaW5kZXBlbnRlbnQgZGF5LW9mLXdlZWsgY2hlY2suXG4gICAgICAgIGlmIChtYXRjaFsxXSkgeyAvLyBkYXkgb2Ygd2VlayBnaXZlblxuICAgICAgICAgICAgdmFyIG1vbWVudERhdGUgPSBuZXcgRGF0ZShtYXRjaFsyXSk7XG4gICAgICAgICAgICB2YXIgbW9tZW50RGF5ID0gWydTdW4nLCdNb24nLCdUdWUnLCdXZWQnLCdUaHUnLCdGcmknLCdTYXQnXVttb21lbnREYXRlLmdldERheSgpXTtcblxuICAgICAgICAgICAgaWYgKG1hdGNoWzFdLnN1YnN0cigwLDMpICE9PSBtb21lbnREYXkpIHtcbiAgICAgICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS53ZWVrZGF5TWlzbWF0Y2ggPSB0cnVlO1xuICAgICAgICAgICAgICAgIGNvbmZpZy5faXNWYWxpZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHN3aXRjaCAobWF0Y2hbNV0ubGVuZ3RoKSB7XG4gICAgICAgICAgICBjYXNlIDI6IC8vIG1pbGl0YXJ5XG4gICAgICAgICAgICAgICAgaWYgKHRpbWV6b25lSW5kZXggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgdGltZXpvbmUgPSAnICswMDAwJztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aW1lem9uZUluZGV4ID0gbWlsaXRhcnkuaW5kZXhPZihtYXRjaFs1XVsxXS50b1VwcGVyQ2FzZSgpKSAtIDEyO1xuICAgICAgICAgICAgICAgICAgICB0aW1lem9uZSA9ICgodGltZXpvbmVJbmRleCA8IDApID8gJyAtJyA6ICcgKycpICtcbiAgICAgICAgICAgICAgICAgICAgICAgICgoJycgKyB0aW1lem9uZUluZGV4KS5yZXBsYWNlKC9eLT8vLCAnMCcpKS5tYXRjaCgvLi4kLylbMF0gKyAnMDAnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgNDogLy8gWm9uZVxuICAgICAgICAgICAgICAgIHRpbWV6b25lID0gdGltZXpvbmVzW21hdGNoWzVdXTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6IC8vIFVUIG9yICsvLTk5OTlcbiAgICAgICAgICAgICAgICB0aW1lem9uZSA9IHRpbWV6b25lc1snIEdNVCddO1xuICAgICAgICB9XG4gICAgICAgIG1hdGNoWzVdID0gdGltZXpvbmU7XG4gICAgICAgIGNvbmZpZy5faSA9IG1hdGNoLnNwbGljZSgxKS5qb2luKCcnKTtcbiAgICAgICAgdHpGb3JtYXQgPSAnIFpaJztcbiAgICAgICAgY29uZmlnLl9mID0gZGF5Rm9ybWF0ICsgZGF0ZUZvcm1hdCArIHRpbWVGb3JtYXQgKyB0ekZvcm1hdDtcbiAgICAgICAgY29uZmlnRnJvbVN0cmluZ0FuZEZvcm1hdChjb25maWcpO1xuICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5yZmMyODIyID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBjb25maWcuX2lzVmFsaWQgPSBmYWxzZTtcbiAgICB9XG59XG5cbi8vIGRhdGUgZnJvbSBpc28gZm9ybWF0IG9yIGZhbGxiYWNrXG5mdW5jdGlvbiBjb25maWdGcm9tU3RyaW5nKGNvbmZpZykge1xuICAgIHZhciBtYXRjaGVkID0gYXNwTmV0SnNvblJlZ2V4LmV4ZWMoY29uZmlnLl9pKTtcblxuICAgIGlmIChtYXRjaGVkICE9PSBudWxsKSB7XG4gICAgICAgIGNvbmZpZy5fZCA9IG5ldyBEYXRlKCttYXRjaGVkWzFdKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbmZpZ0Zyb21JU08oY29uZmlnKTtcbiAgICBpZiAoY29uZmlnLl9pc1ZhbGlkID09PSBmYWxzZSkge1xuICAgICAgICBkZWxldGUgY29uZmlnLl9pc1ZhbGlkO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25maWdGcm9tUkZDMjgyMihjb25maWcpO1xuICAgIGlmIChjb25maWcuX2lzVmFsaWQgPT09IGZhbHNlKSB7XG4gICAgICAgIGRlbGV0ZSBjb25maWcuX2lzVmFsaWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIEZpbmFsIGF0dGVtcHQsIHVzZSBJbnB1dCBGYWxsYmFja1xuICAgIGhvb2tzLmNyZWF0ZUZyb21JbnB1dEZhbGxiYWNrKGNvbmZpZyk7XG59XG5cbmhvb2tzLmNyZWF0ZUZyb21JbnB1dEZhbGxiYWNrID0gZGVwcmVjYXRlKFxuICAgICd2YWx1ZSBwcm92aWRlZCBpcyBub3QgaW4gYSByZWNvZ25pemVkIFJGQzI4MjIgb3IgSVNPIGZvcm1hdC4gbW9tZW50IGNvbnN0cnVjdGlvbiBmYWxscyBiYWNrIHRvIGpzIERhdGUoKSwgJyArXG4gICAgJ3doaWNoIGlzIG5vdCByZWxpYWJsZSBhY3Jvc3MgYWxsIGJyb3dzZXJzIGFuZCB2ZXJzaW9ucy4gTm9uIFJGQzI4MjIvSVNPIGRhdGUgZm9ybWF0cyBhcmUgJyArXG4gICAgJ2Rpc2NvdXJhZ2VkIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gYW4gdXBjb21pbmcgbWFqb3IgcmVsZWFzZS4gUGxlYXNlIHJlZmVyIHRvICcgK1xuICAgICdodHRwOi8vbW9tZW50anMuY29tL2d1aWRlcy8jL3dhcm5pbmdzL2pzLWRhdGUvIGZvciBtb3JlIGluZm8uJyxcbiAgICBmdW5jdGlvbiAoY29uZmlnKSB7XG4gICAgICAgIGNvbmZpZy5fZCA9IG5ldyBEYXRlKGNvbmZpZy5faSArIChjb25maWcuX3VzZVVUQyA/ICcgVVRDJyA6ICcnKSk7XG4gICAgfVxuKTtcblxuLy8gUGljayB0aGUgZmlyc3QgZGVmaW5lZCBvZiB0d28gb3IgdGhyZWUgYXJndW1lbnRzLlxuZnVuY3Rpb24gZGVmYXVsdHMoYSwgYiwgYykge1xuICAgIGlmIChhICE9IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGE7XG4gICAgfVxuICAgIGlmIChiICE9IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGI7XG4gICAgfVxuICAgIHJldHVybiBjO1xufVxuXG5mdW5jdGlvbiBjdXJyZW50RGF0ZUFycmF5KGNvbmZpZykge1xuICAgIC8vIGhvb2tzIGlzIGFjdHVhbGx5IHRoZSBleHBvcnRlZCBtb21lbnQgb2JqZWN0XG4gICAgdmFyIG5vd1ZhbHVlID0gbmV3IERhdGUoaG9va3Mubm93KCkpO1xuICAgIGlmIChjb25maWcuX3VzZVVUQykge1xuICAgICAgICByZXR1cm4gW25vd1ZhbHVlLmdldFVUQ0Z1bGxZZWFyKCksIG5vd1ZhbHVlLmdldFVUQ01vbnRoKCksIG5vd1ZhbHVlLmdldFVUQ0RhdGUoKV07XG4gICAgfVxuICAgIHJldHVybiBbbm93VmFsdWUuZ2V0RnVsbFllYXIoKSwgbm93VmFsdWUuZ2V0TW9udGgoKSwgbm93VmFsdWUuZ2V0RGF0ZSgpXTtcbn1cblxuLy8gY29udmVydCBhbiBhcnJheSB0byBhIGRhdGUuXG4vLyB0aGUgYXJyYXkgc2hvdWxkIG1pcnJvciB0aGUgcGFyYW1ldGVycyBiZWxvd1xuLy8gbm90ZTogYWxsIHZhbHVlcyBwYXN0IHRoZSB5ZWFyIGFyZSBvcHRpb25hbCBhbmQgd2lsbCBkZWZhdWx0IHRvIHRoZSBsb3dlc3QgcG9zc2libGUgdmFsdWUuXG4vLyBbeWVhciwgbW9udGgsIGRheSAsIGhvdXIsIG1pbnV0ZSwgc2Vjb25kLCBtaWxsaXNlY29uZF1cbmZ1bmN0aW9uIGNvbmZpZ0Zyb21BcnJheSAoY29uZmlnKSB7XG4gICAgdmFyIGksIGRhdGUsIGlucHV0ID0gW10sIGN1cnJlbnREYXRlLCB5ZWFyVG9Vc2U7XG5cbiAgICBpZiAoY29uZmlnLl9kKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjdXJyZW50RGF0ZSA9IGN1cnJlbnREYXRlQXJyYXkoY29uZmlnKTtcblxuICAgIC8vY29tcHV0ZSBkYXkgb2YgdGhlIHllYXIgZnJvbSB3ZWVrcyBhbmQgd2Vla2RheXNcbiAgICBpZiAoY29uZmlnLl93ICYmIGNvbmZpZy5fYVtEQVRFXSA9PSBudWxsICYmIGNvbmZpZy5fYVtNT05USF0gPT0gbnVsbCkge1xuICAgICAgICBkYXlPZlllYXJGcm9tV2Vla0luZm8oY29uZmlnKTtcbiAgICB9XG5cbiAgICAvL2lmIHRoZSBkYXkgb2YgdGhlIHllYXIgaXMgc2V0LCBmaWd1cmUgb3V0IHdoYXQgaXQgaXNcbiAgICBpZiAoY29uZmlnLl9kYXlPZlllYXIgIT0gbnVsbCkge1xuICAgICAgICB5ZWFyVG9Vc2UgPSBkZWZhdWx0cyhjb25maWcuX2FbWUVBUl0sIGN1cnJlbnREYXRlW1lFQVJdKTtcblxuICAgICAgICBpZiAoY29uZmlnLl9kYXlPZlllYXIgPiBkYXlzSW5ZZWFyKHllYXJUb1VzZSkgfHwgY29uZmlnLl9kYXlPZlllYXIgPT09IDApIHtcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLl9vdmVyZmxvd0RheU9mWWVhciA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBkYXRlID0gY3JlYXRlVVRDRGF0ZSh5ZWFyVG9Vc2UsIDAsIGNvbmZpZy5fZGF5T2ZZZWFyKTtcbiAgICAgICAgY29uZmlnLl9hW01PTlRIXSA9IGRhdGUuZ2V0VVRDTW9udGgoKTtcbiAgICAgICAgY29uZmlnLl9hW0RBVEVdID0gZGF0ZS5nZXRVVENEYXRlKCk7XG4gICAgfVxuXG4gICAgLy8gRGVmYXVsdCB0byBjdXJyZW50IGRhdGUuXG4gICAgLy8gKiBpZiBubyB5ZWFyLCBtb250aCwgZGF5IG9mIG1vbnRoIGFyZSBnaXZlbiwgZGVmYXVsdCB0byB0b2RheVxuICAgIC8vICogaWYgZGF5IG9mIG1vbnRoIGlzIGdpdmVuLCBkZWZhdWx0IG1vbnRoIGFuZCB5ZWFyXG4gICAgLy8gKiBpZiBtb250aCBpcyBnaXZlbiwgZGVmYXVsdCBvbmx5IHllYXJcbiAgICAvLyAqIGlmIHllYXIgaXMgZ2l2ZW4sIGRvbid0IGRlZmF1bHQgYW55dGhpbmdcbiAgICBmb3IgKGkgPSAwOyBpIDwgMyAmJiBjb25maWcuX2FbaV0gPT0gbnVsbDsgKytpKSB7XG4gICAgICAgIGNvbmZpZy5fYVtpXSA9IGlucHV0W2ldID0gY3VycmVudERhdGVbaV07XG4gICAgfVxuXG4gICAgLy8gWmVybyBvdXQgd2hhdGV2ZXIgd2FzIG5vdCBkZWZhdWx0ZWQsIGluY2x1ZGluZyB0aW1lXG4gICAgZm9yICg7IGkgPCA3OyBpKyspIHtcbiAgICAgICAgY29uZmlnLl9hW2ldID0gaW5wdXRbaV0gPSAoY29uZmlnLl9hW2ldID09IG51bGwpID8gKGkgPT09IDIgPyAxIDogMCkgOiBjb25maWcuX2FbaV07XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgZm9yIDI0OjAwOjAwLjAwMFxuICAgIGlmIChjb25maWcuX2FbSE9VUl0gPT09IDI0ICYmXG4gICAgICAgICAgICBjb25maWcuX2FbTUlOVVRFXSA9PT0gMCAmJlxuICAgICAgICAgICAgY29uZmlnLl9hW1NFQ09ORF0gPT09IDAgJiZcbiAgICAgICAgICAgIGNvbmZpZy5fYVtNSUxMSVNFQ09ORF0gPT09IDApIHtcbiAgICAgICAgY29uZmlnLl9uZXh0RGF5ID0gdHJ1ZTtcbiAgICAgICAgY29uZmlnLl9hW0hPVVJdID0gMDtcbiAgICB9XG5cbiAgICBjb25maWcuX2QgPSAoY29uZmlnLl91c2VVVEMgPyBjcmVhdGVVVENEYXRlIDogY3JlYXRlRGF0ZSkuYXBwbHkobnVsbCwgaW5wdXQpO1xuICAgIC8vIEFwcGx5IHRpbWV6b25lIG9mZnNldCBmcm9tIGlucHV0LiBUaGUgYWN0dWFsIHV0Y09mZnNldCBjYW4gYmUgY2hhbmdlZFxuICAgIC8vIHdpdGggcGFyc2Vab25lLlxuICAgIGlmIChjb25maWcuX3R6bSAhPSBudWxsKSB7XG4gICAgICAgIGNvbmZpZy5fZC5zZXRVVENNaW51dGVzKGNvbmZpZy5fZC5nZXRVVENNaW51dGVzKCkgLSBjb25maWcuX3R6bSk7XG4gICAgfVxuXG4gICAgaWYgKGNvbmZpZy5fbmV4dERheSkge1xuICAgICAgICBjb25maWcuX2FbSE9VUl0gPSAyNDtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRheU9mWWVhckZyb21XZWVrSW5mbyhjb25maWcpIHtcbiAgICB2YXIgdywgd2Vla1llYXIsIHdlZWssIHdlZWtkYXksIGRvdywgZG95LCB0ZW1wLCB3ZWVrZGF5T3ZlcmZsb3c7XG5cbiAgICB3ID0gY29uZmlnLl93O1xuICAgIGlmICh3LkdHICE9IG51bGwgfHwgdy5XICE9IG51bGwgfHwgdy5FICE9IG51bGwpIHtcbiAgICAgICAgZG93ID0gMTtcbiAgICAgICAgZG95ID0gNDtcblxuICAgICAgICAvLyBUT0RPOiBXZSBuZWVkIHRvIHRha2UgdGhlIGN1cnJlbnQgaXNvV2Vla1llYXIsIGJ1dCB0aGF0IGRlcGVuZHMgb25cbiAgICAgICAgLy8gaG93IHdlIGludGVycHJldCBub3cgKGxvY2FsLCB1dGMsIGZpeGVkIG9mZnNldCkuIFNvIGNyZWF0ZVxuICAgICAgICAvLyBhIG5vdyB2ZXJzaW9uIG9mIGN1cnJlbnQgY29uZmlnICh0YWtlIGxvY2FsL3V0Yy9vZmZzZXQgZmxhZ3MsIGFuZFxuICAgICAgICAvLyBjcmVhdGUgbm93KS5cbiAgICAgICAgd2Vla1llYXIgPSBkZWZhdWx0cyh3LkdHLCBjb25maWcuX2FbWUVBUl0sIHdlZWtPZlllYXIoY3JlYXRlTG9jYWwoKSwgMSwgNCkueWVhcik7XG4gICAgICAgIHdlZWsgPSBkZWZhdWx0cyh3LlcsIDEpO1xuICAgICAgICB3ZWVrZGF5ID0gZGVmYXVsdHMody5FLCAxKTtcbiAgICAgICAgaWYgKHdlZWtkYXkgPCAxIHx8IHdlZWtkYXkgPiA3KSB7XG4gICAgICAgICAgICB3ZWVrZGF5T3ZlcmZsb3cgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZG93ID0gY29uZmlnLl9sb2NhbGUuX3dlZWsuZG93O1xuICAgICAgICBkb3kgPSBjb25maWcuX2xvY2FsZS5fd2Vlay5kb3k7XG5cbiAgICAgICAgdmFyIGN1cldlZWsgPSB3ZWVrT2ZZZWFyKGNyZWF0ZUxvY2FsKCksIGRvdywgZG95KTtcblxuICAgICAgICB3ZWVrWWVhciA9IGRlZmF1bHRzKHcuZ2csIGNvbmZpZy5fYVtZRUFSXSwgY3VyV2Vlay55ZWFyKTtcblxuICAgICAgICAvLyBEZWZhdWx0IHRvIGN1cnJlbnQgd2Vlay5cbiAgICAgICAgd2VlayA9IGRlZmF1bHRzKHcudywgY3VyV2Vlay53ZWVrKTtcblxuICAgICAgICBpZiAody5kICE9IG51bGwpIHtcbiAgICAgICAgICAgIC8vIHdlZWtkYXkgLS0gbG93IGRheSBudW1iZXJzIGFyZSBjb25zaWRlcmVkIG5leHQgd2Vla1xuICAgICAgICAgICAgd2Vla2RheSA9IHcuZDtcbiAgICAgICAgICAgIGlmICh3ZWVrZGF5IDwgMCB8fCB3ZWVrZGF5ID4gNikge1xuICAgICAgICAgICAgICAgIHdlZWtkYXlPdmVyZmxvdyA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAody5lICE9IG51bGwpIHtcbiAgICAgICAgICAgIC8vIGxvY2FsIHdlZWtkYXkgLS0gY291bnRpbmcgc3RhcnRzIGZyb20gYmVnaW5pbmcgb2Ygd2Vla1xuICAgICAgICAgICAgd2Vla2RheSA9IHcuZSArIGRvdztcbiAgICAgICAgICAgIGlmICh3LmUgPCAwIHx8IHcuZSA+IDYpIHtcbiAgICAgICAgICAgICAgICB3ZWVrZGF5T3ZlcmZsb3cgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gZGVmYXVsdCB0byBiZWdpbmluZyBvZiB3ZWVrXG4gICAgICAgICAgICB3ZWVrZGF5ID0gZG93O1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmICh3ZWVrIDwgMSB8fCB3ZWVrID4gd2Vla3NJblllYXIod2Vla1llYXIsIGRvdywgZG95KSkge1xuICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5fb3ZlcmZsb3dXZWVrcyA9IHRydWU7XG4gICAgfSBlbHNlIGlmICh3ZWVrZGF5T3ZlcmZsb3cgIT0gbnVsbCkge1xuICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5fb3ZlcmZsb3dXZWVrZGF5ID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0ZW1wID0gZGF5T2ZZZWFyRnJvbVdlZWtzKHdlZWtZZWFyLCB3ZWVrLCB3ZWVrZGF5LCBkb3csIGRveSk7XG4gICAgICAgIGNvbmZpZy5fYVtZRUFSXSA9IHRlbXAueWVhcjtcbiAgICAgICAgY29uZmlnLl9kYXlPZlllYXIgPSB0ZW1wLmRheU9mWWVhcjtcbiAgICB9XG59XG5cbi8vIGNvbnN0YW50IHRoYXQgcmVmZXJzIHRvIHRoZSBJU08gc3RhbmRhcmRcbmhvb2tzLklTT184NjAxID0gZnVuY3Rpb24gKCkge307XG5cbi8vIGNvbnN0YW50IHRoYXQgcmVmZXJzIHRvIHRoZSBSRkMgMjgyMiBmb3JtXG5ob29rcy5SRkNfMjgyMiA9IGZ1bmN0aW9uICgpIHt9O1xuXG4vLyBkYXRlIGZyb20gc3RyaW5nIGFuZCBmb3JtYXQgc3RyaW5nXG5mdW5jdGlvbiBjb25maWdGcm9tU3RyaW5nQW5kRm9ybWF0KGNvbmZpZykge1xuICAgIC8vIFRPRE86IE1vdmUgdGhpcyB0byBhbm90aGVyIHBhcnQgb2YgdGhlIGNyZWF0aW9uIGZsb3cgdG8gcHJldmVudCBjaXJjdWxhciBkZXBzXG4gICAgaWYgKGNvbmZpZy5fZiA9PT0gaG9va3MuSVNPXzg2MDEpIHtcbiAgICAgICAgY29uZmlnRnJvbUlTTyhjb25maWcpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChjb25maWcuX2YgPT09IGhvb2tzLlJGQ18yODIyKSB7XG4gICAgICAgIGNvbmZpZ0Zyb21SRkMyODIyKGNvbmZpZyk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uZmlnLl9hID0gW107XG4gICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuZW1wdHkgPSB0cnVlO1xuXG4gICAgLy8gVGhpcyBhcnJheSBpcyB1c2VkIHRvIG1ha2UgYSBEYXRlLCBlaXRoZXIgd2l0aCBgbmV3IERhdGVgIG9yIGBEYXRlLlVUQ2BcbiAgICB2YXIgc3RyaW5nID0gJycgKyBjb25maWcuX2ksXG4gICAgICAgIGksIHBhcnNlZElucHV0LCB0b2tlbnMsIHRva2VuLCBza2lwcGVkLFxuICAgICAgICBzdHJpbmdMZW5ndGggPSBzdHJpbmcubGVuZ3RoLFxuICAgICAgICB0b3RhbFBhcnNlZElucHV0TGVuZ3RoID0gMDtcblxuICAgIHRva2VucyA9IGV4cGFuZEZvcm1hdChjb25maWcuX2YsIGNvbmZpZy5fbG9jYWxlKS5tYXRjaChmb3JtYXR0aW5nVG9rZW5zKSB8fCBbXTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdG9rZW4gPSB0b2tlbnNbaV07XG4gICAgICAgIHBhcnNlZElucHV0ID0gKHN0cmluZy5tYXRjaChnZXRQYXJzZVJlZ2V4Rm9yVG9rZW4odG9rZW4sIGNvbmZpZykpIHx8IFtdKVswXTtcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ3Rva2VuJywgdG9rZW4sICdwYXJzZWRJbnB1dCcsIHBhcnNlZElucHV0LFxuICAgICAgICAvLyAgICAgICAgICdyZWdleCcsIGdldFBhcnNlUmVnZXhGb3JUb2tlbih0b2tlbiwgY29uZmlnKSk7XG4gICAgICAgIGlmIChwYXJzZWRJbnB1dCkge1xuICAgICAgICAgICAgc2tpcHBlZCA9IHN0cmluZy5zdWJzdHIoMCwgc3RyaW5nLmluZGV4T2YocGFyc2VkSW5wdXQpKTtcbiAgICAgICAgICAgIGlmIChza2lwcGVkLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS51bnVzZWRJbnB1dC5wdXNoKHNraXBwZWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3RyaW5nID0gc3RyaW5nLnNsaWNlKHN0cmluZy5pbmRleE9mKHBhcnNlZElucHV0KSArIHBhcnNlZElucHV0Lmxlbmd0aCk7XG4gICAgICAgICAgICB0b3RhbFBhcnNlZElucHV0TGVuZ3RoICs9IHBhcnNlZElucHV0Lmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICAvLyBkb24ndCBwYXJzZSBpZiBpdCdzIG5vdCBhIGtub3duIHRva2VuXG4gICAgICAgIGlmIChmb3JtYXRUb2tlbkZ1bmN0aW9uc1t0b2tlbl0pIHtcbiAgICAgICAgICAgIGlmIChwYXJzZWRJbnB1dCkge1xuICAgICAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmVtcHR5ID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS51bnVzZWRUb2tlbnMucHVzaCh0b2tlbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhZGRUaW1lVG9BcnJheUZyb21Ub2tlbih0b2tlbiwgcGFyc2VkSW5wdXQsIGNvbmZpZyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoY29uZmlnLl9zdHJpY3QgJiYgIXBhcnNlZElucHV0KSB7XG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS51bnVzZWRUb2tlbnMucHVzaCh0b2tlbik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBhZGQgcmVtYWluaW5nIHVucGFyc2VkIGlucHV0IGxlbmd0aCB0byB0aGUgc3RyaW5nXG4gICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuY2hhcnNMZWZ0T3ZlciA9IHN0cmluZ0xlbmd0aCAtIHRvdGFsUGFyc2VkSW5wdXRMZW5ndGg7XG4gICAgaWYgKHN0cmluZy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLnVudXNlZElucHV0LnB1c2goc3RyaW5nKTtcbiAgICB9XG5cbiAgICAvLyBjbGVhciBfMTJoIGZsYWcgaWYgaG91ciBpcyA8PSAxMlxuICAgIGlmIChjb25maWcuX2FbSE9VUl0gPD0gMTIgJiZcbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuYmlnSG91ciA9PT0gdHJ1ZSAmJlxuICAgICAgICBjb25maWcuX2FbSE9VUl0gPiAwKSB7XG4gICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmJpZ0hvdXIgPSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykucGFyc2VkRGF0ZVBhcnRzID0gY29uZmlnLl9hLnNsaWNlKDApO1xuICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLm1lcmlkaWVtID0gY29uZmlnLl9tZXJpZGllbTtcbiAgICAvLyBoYW5kbGUgbWVyaWRpZW1cbiAgICBjb25maWcuX2FbSE9VUl0gPSBtZXJpZGllbUZpeFdyYXAoY29uZmlnLl9sb2NhbGUsIGNvbmZpZy5fYVtIT1VSXSwgY29uZmlnLl9tZXJpZGllbSk7XG5cbiAgICBjb25maWdGcm9tQXJyYXkoY29uZmlnKTtcbiAgICBjaGVja092ZXJmbG93KGNvbmZpZyk7XG59XG5cblxuZnVuY3Rpb24gbWVyaWRpZW1GaXhXcmFwIChsb2NhbGUsIGhvdXIsIG1lcmlkaWVtKSB7XG4gICAgdmFyIGlzUG07XG5cbiAgICBpZiAobWVyaWRpZW0gPT0gbnVsbCkge1xuICAgICAgICAvLyBub3RoaW5nIHRvIGRvXG4gICAgICAgIHJldHVybiBob3VyO1xuICAgIH1cbiAgICBpZiAobG9jYWxlLm1lcmlkaWVtSG91ciAhPSBudWxsKSB7XG4gICAgICAgIHJldHVybiBsb2NhbGUubWVyaWRpZW1Ib3VyKGhvdXIsIG1lcmlkaWVtKTtcbiAgICB9IGVsc2UgaWYgKGxvY2FsZS5pc1BNICE9IG51bGwpIHtcbiAgICAgICAgLy8gRmFsbGJhY2tcbiAgICAgICAgaXNQbSA9IGxvY2FsZS5pc1BNKG1lcmlkaWVtKTtcbiAgICAgICAgaWYgKGlzUG0gJiYgaG91ciA8IDEyKSB7XG4gICAgICAgICAgICBob3VyICs9IDEyO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNQbSAmJiBob3VyID09PSAxMikge1xuICAgICAgICAgICAgaG91ciA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gdGhpcyBpcyBub3Qgc3VwcG9zZWQgdG8gaGFwcGVuXG4gICAgICAgIHJldHVybiBob3VyO1xuICAgIH1cbn1cblxuLy8gZGF0ZSBmcm9tIHN0cmluZyBhbmQgYXJyYXkgb2YgZm9ybWF0IHN0cmluZ3NcbmZ1bmN0aW9uIGNvbmZpZ0Zyb21TdHJpbmdBbmRBcnJheShjb25maWcpIHtcbiAgICB2YXIgdGVtcENvbmZpZyxcbiAgICAgICAgYmVzdE1vbWVudCxcblxuICAgICAgICBzY29yZVRvQmVhdCxcbiAgICAgICAgaSxcbiAgICAgICAgY3VycmVudFNjb3JlO1xuXG4gICAgaWYgKGNvbmZpZy5fZi5sZW5ndGggPT09IDApIHtcbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuaW52YWxpZEZvcm1hdCA9IHRydWU7XG4gICAgICAgIGNvbmZpZy5fZCA9IG5ldyBEYXRlKE5hTik7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgY29uZmlnLl9mLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGN1cnJlbnRTY29yZSA9IDA7XG4gICAgICAgIHRlbXBDb25maWcgPSBjb3B5Q29uZmlnKHt9LCBjb25maWcpO1xuICAgICAgICBpZiAoY29uZmlnLl91c2VVVEMgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGVtcENvbmZpZy5fdXNlVVRDID0gY29uZmlnLl91c2VVVEM7XG4gICAgICAgIH1cbiAgICAgICAgdGVtcENvbmZpZy5fZiA9IGNvbmZpZy5fZltpXTtcbiAgICAgICAgY29uZmlnRnJvbVN0cmluZ0FuZEZvcm1hdCh0ZW1wQ29uZmlnKTtcblxuICAgICAgICBpZiAoIWlzVmFsaWQodGVtcENvbmZpZykpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gaWYgdGhlcmUgaXMgYW55IGlucHV0IHRoYXQgd2FzIG5vdCBwYXJzZWQgYWRkIGEgcGVuYWx0eSBmb3IgdGhhdCBmb3JtYXRcbiAgICAgICAgY3VycmVudFNjb3JlICs9IGdldFBhcnNpbmdGbGFncyh0ZW1wQ29uZmlnKS5jaGFyc0xlZnRPdmVyO1xuXG4gICAgICAgIC8vb3IgdG9rZW5zXG4gICAgICAgIGN1cnJlbnRTY29yZSArPSBnZXRQYXJzaW5nRmxhZ3ModGVtcENvbmZpZykudW51c2VkVG9rZW5zLmxlbmd0aCAqIDEwO1xuXG4gICAgICAgIGdldFBhcnNpbmdGbGFncyh0ZW1wQ29uZmlnKS5zY29yZSA9IGN1cnJlbnRTY29yZTtcblxuICAgICAgICBpZiAoc2NvcmVUb0JlYXQgPT0gbnVsbCB8fCBjdXJyZW50U2NvcmUgPCBzY29yZVRvQmVhdCkge1xuICAgICAgICAgICAgc2NvcmVUb0JlYXQgPSBjdXJyZW50U2NvcmU7XG4gICAgICAgICAgICBiZXN0TW9tZW50ID0gdGVtcENvbmZpZztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGV4dGVuZChjb25maWcsIGJlc3RNb21lbnQgfHwgdGVtcENvbmZpZyk7XG59XG5cbmZ1bmN0aW9uIGNvbmZpZ0Zyb21PYmplY3QoY29uZmlnKSB7XG4gICAgaWYgKGNvbmZpZy5fZCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGkgPSBub3JtYWxpemVPYmplY3RVbml0cyhjb25maWcuX2kpO1xuICAgIGNvbmZpZy5fYSA9IG1hcChbaS55ZWFyLCBpLm1vbnRoLCBpLmRheSB8fCBpLmRhdGUsIGkuaG91ciwgaS5taW51dGUsIGkuc2Vjb25kLCBpLm1pbGxpc2Vjb25kXSwgZnVuY3Rpb24gKG9iaikge1xuICAgICAgICByZXR1cm4gb2JqICYmIHBhcnNlSW50KG9iaiwgMTApO1xuICAgIH0pO1xuXG4gICAgY29uZmlnRnJvbUFycmF5KGNvbmZpZyk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUZyb21Db25maWcgKGNvbmZpZykge1xuICAgIHZhciByZXMgPSBuZXcgTW9tZW50KGNoZWNrT3ZlcmZsb3cocHJlcGFyZUNvbmZpZyhjb25maWcpKSk7XG4gICAgaWYgKHJlcy5fbmV4dERheSkge1xuICAgICAgICAvLyBBZGRpbmcgaXMgc21hcnQgZW5vdWdoIGFyb3VuZCBEU1RcbiAgICAgICAgcmVzLmFkZCgxLCAnZCcpO1xuICAgICAgICByZXMuX25leHREYXkgPSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcztcbn1cblxuZnVuY3Rpb24gcHJlcGFyZUNvbmZpZyAoY29uZmlnKSB7XG4gICAgdmFyIGlucHV0ID0gY29uZmlnLl9pLFxuICAgICAgICBmb3JtYXQgPSBjb25maWcuX2Y7XG5cbiAgICBjb25maWcuX2xvY2FsZSA9IGNvbmZpZy5fbG9jYWxlIHx8IGdldExvY2FsZShjb25maWcuX2wpO1xuXG4gICAgaWYgKGlucHV0ID09PSBudWxsIHx8IChmb3JtYXQgPT09IHVuZGVmaW5lZCAmJiBpbnB1dCA9PT0gJycpKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVJbnZhbGlkKHtudWxsSW5wdXQ6IHRydWV9KTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJykge1xuICAgICAgICBjb25maWcuX2kgPSBpbnB1dCA9IGNvbmZpZy5fbG9jYWxlLnByZXBhcnNlKGlucHV0KTtcbiAgICB9XG5cbiAgICBpZiAoaXNNb21lbnQoaW5wdXQpKSB7XG4gICAgICAgIHJldHVybiBuZXcgTW9tZW50KGNoZWNrT3ZlcmZsb3coaW5wdXQpKTtcbiAgICB9IGVsc2UgaWYgKGlzRGF0ZShpbnB1dCkpIHtcbiAgICAgICAgY29uZmlnLl9kID0gaW5wdXQ7XG4gICAgfSBlbHNlIGlmIChpc0FycmF5KGZvcm1hdCkpIHtcbiAgICAgICAgY29uZmlnRnJvbVN0cmluZ0FuZEFycmF5KGNvbmZpZyk7XG4gICAgfSBlbHNlIGlmIChmb3JtYXQpIHtcbiAgICAgICAgY29uZmlnRnJvbVN0cmluZ0FuZEZvcm1hdChjb25maWcpO1xuICAgIH0gIGVsc2Uge1xuICAgICAgICBjb25maWdGcm9tSW5wdXQoY29uZmlnKTtcbiAgICB9XG5cbiAgICBpZiAoIWlzVmFsaWQoY29uZmlnKSkge1xuICAgICAgICBjb25maWcuX2QgPSBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBjb25maWc7XG59XG5cbmZ1bmN0aW9uIGNvbmZpZ0Zyb21JbnB1dChjb25maWcpIHtcbiAgICB2YXIgaW5wdXQgPSBjb25maWcuX2k7XG4gICAgaWYgKGlzVW5kZWZpbmVkKGlucHV0KSkge1xuICAgICAgICBjb25maWcuX2QgPSBuZXcgRGF0ZShob29rcy5ub3coKSk7XG4gICAgfSBlbHNlIGlmIChpc0RhdGUoaW5wdXQpKSB7XG4gICAgICAgIGNvbmZpZy5fZCA9IG5ldyBEYXRlKGlucHV0LnZhbHVlT2YoKSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGNvbmZpZ0Zyb21TdHJpbmcoY29uZmlnKTtcbiAgICB9IGVsc2UgaWYgKGlzQXJyYXkoaW5wdXQpKSB7XG4gICAgICAgIGNvbmZpZy5fYSA9IG1hcChpbnB1dC5zbGljZSgwKSwgZnVuY3Rpb24gKG9iaikge1xuICAgICAgICAgICAgcmV0dXJuIHBhcnNlSW50KG9iaiwgMTApO1xuICAgICAgICB9KTtcbiAgICAgICAgY29uZmlnRnJvbUFycmF5KGNvbmZpZyk7XG4gICAgfSBlbHNlIGlmIChpc09iamVjdChpbnB1dCkpIHtcbiAgICAgICAgY29uZmlnRnJvbU9iamVjdChjb25maWcpO1xuICAgIH0gZWxzZSBpZiAoaXNOdW1iZXIoaW5wdXQpKSB7XG4gICAgICAgIC8vIGZyb20gbWlsbGlzZWNvbmRzXG4gICAgICAgIGNvbmZpZy5fZCA9IG5ldyBEYXRlKGlucHV0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBob29rcy5jcmVhdGVGcm9tSW5wdXRGYWxsYmFjayhjb25maWcpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlTG9jYWxPclVUQyAoaW5wdXQsIGZvcm1hdCwgbG9jYWxlLCBzdHJpY3QsIGlzVVRDKSB7XG4gICAgdmFyIGMgPSB7fTtcblxuICAgIGlmIChsb2NhbGUgPT09IHRydWUgfHwgbG9jYWxlID09PSBmYWxzZSkge1xuICAgICAgICBzdHJpY3QgPSBsb2NhbGU7XG4gICAgICAgIGxvY2FsZSA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBpZiAoKGlzT2JqZWN0KGlucHV0KSAmJiBpc09iamVjdEVtcHR5KGlucHV0KSkgfHxcbiAgICAgICAgICAgIChpc0FycmF5KGlucHV0KSAmJiBpbnB1dC5sZW5ndGggPT09IDApKSB7XG4gICAgICAgIGlucHV0ID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICAvLyBvYmplY3QgY29uc3RydWN0aW9uIG11c3QgYmUgZG9uZSB0aGlzIHdheS5cbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vbW9tZW50L21vbWVudC9pc3N1ZXMvMTQyM1xuICAgIGMuX2lzQU1vbWVudE9iamVjdCA9IHRydWU7XG4gICAgYy5fdXNlVVRDID0gYy5faXNVVEMgPSBpc1VUQztcbiAgICBjLl9sID0gbG9jYWxlO1xuICAgIGMuX2kgPSBpbnB1dDtcbiAgICBjLl9mID0gZm9ybWF0O1xuICAgIGMuX3N0cmljdCA9IHN0cmljdDtcblxuICAgIHJldHVybiBjcmVhdGVGcm9tQ29uZmlnKGMpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVMb2NhbCAoaW5wdXQsIGZvcm1hdCwgbG9jYWxlLCBzdHJpY3QpIHtcbiAgICByZXR1cm4gY3JlYXRlTG9jYWxPclVUQyhpbnB1dCwgZm9ybWF0LCBsb2NhbGUsIHN0cmljdCwgZmFsc2UpO1xufVxuXG52YXIgcHJvdG90eXBlTWluID0gZGVwcmVjYXRlKFxuICAgICdtb21lbnQoKS5taW4gaXMgZGVwcmVjYXRlZCwgdXNlIG1vbWVudC5tYXggaW5zdGVhZC4gaHR0cDovL21vbWVudGpzLmNvbS9ndWlkZXMvIy93YXJuaW5ncy9taW4tbWF4LycsXG4gICAgZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgb3RoZXIgPSBjcmVhdGVMb2NhbC5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgICAgICBpZiAodGhpcy5pc1ZhbGlkKCkgJiYgb3RoZXIuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gb3RoZXIgPCB0aGlzID8gdGhpcyA6IG90aGVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUludmFsaWQoKTtcbiAgICAgICAgfVxuICAgIH1cbik7XG5cbnZhciBwcm90b3R5cGVNYXggPSBkZXByZWNhdGUoXG4gICAgJ21vbWVudCgpLm1heCBpcyBkZXByZWNhdGVkLCB1c2UgbW9tZW50Lm1pbiBpbnN0ZWFkLiBodHRwOi8vbW9tZW50anMuY29tL2d1aWRlcy8jL3dhcm5pbmdzL21pbi1tYXgvJyxcbiAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBvdGhlciA9IGNyZWF0ZUxvY2FsLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgICAgIGlmICh0aGlzLmlzVmFsaWQoKSAmJiBvdGhlci5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBvdGhlciA+IHRoaXMgPyB0aGlzIDogb3RoZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlSW52YWxpZCgpO1xuICAgICAgICB9XG4gICAgfVxuKTtcblxuLy8gUGljayBhIG1vbWVudCBtIGZyb20gbW9tZW50cyBzbyB0aGF0IG1bZm5dKG90aGVyKSBpcyB0cnVlIGZvciBhbGxcbi8vIG90aGVyLiBUaGlzIHJlbGllcyBvbiB0aGUgZnVuY3Rpb24gZm4gdG8gYmUgdHJhbnNpdGl2ZS5cbi8vXG4vLyBtb21lbnRzIHNob3VsZCBlaXRoZXIgYmUgYW4gYXJyYXkgb2YgbW9tZW50IG9iamVjdHMgb3IgYW4gYXJyYXksIHdob3NlXG4vLyBmaXJzdCBlbGVtZW50IGlzIGFuIGFycmF5IG9mIG1vbWVudCBvYmplY3RzLlxuZnVuY3Rpb24gcGlja0J5KGZuLCBtb21lbnRzKSB7XG4gICAgdmFyIHJlcywgaTtcbiAgICBpZiAobW9tZW50cy5sZW5ndGggPT09IDEgJiYgaXNBcnJheShtb21lbnRzWzBdKSkge1xuICAgICAgICBtb21lbnRzID0gbW9tZW50c1swXTtcbiAgICB9XG4gICAgaWYgKCFtb21lbnRzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gY3JlYXRlTG9jYWwoKTtcbiAgICB9XG4gICAgcmVzID0gbW9tZW50c1swXTtcbiAgICBmb3IgKGkgPSAxOyBpIDwgbW9tZW50cy5sZW5ndGg7ICsraSkge1xuICAgICAgICBpZiAoIW1vbWVudHNbaV0uaXNWYWxpZCgpIHx8IG1vbWVudHNbaV1bZm5dKHJlcykpIHtcbiAgICAgICAgICAgIHJlcyA9IG1vbWVudHNbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbn1cblxuLy8gVE9ETzogVXNlIFtdLnNvcnQgaW5zdGVhZD9cbmZ1bmN0aW9uIG1pbiAoKSB7XG4gICAgdmFyIGFyZ3MgPSBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMCk7XG5cbiAgICByZXR1cm4gcGlja0J5KCdpc0JlZm9yZScsIGFyZ3MpO1xufVxuXG5mdW5jdGlvbiBtYXggKCkge1xuICAgIHZhciBhcmdzID0gW10uc2xpY2UuY2FsbChhcmd1bWVudHMsIDApO1xuXG4gICAgcmV0dXJuIHBpY2tCeSgnaXNBZnRlcicsIGFyZ3MpO1xufVxuXG52YXIgbm93ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBEYXRlLm5vdyA/IERhdGUubm93KCkgOiArKG5ldyBEYXRlKCkpO1xufTtcblxudmFyIG9yZGVyaW5nID0gWyd5ZWFyJywgJ3F1YXJ0ZXInLCAnbW9udGgnLCAnd2VlaycsICdkYXknLCAnaG91cicsICdtaW51dGUnLCAnc2Vjb25kJywgJ21pbGxpc2Vjb25kJ107XG5cbmZ1bmN0aW9uIGlzRHVyYXRpb25WYWxpZChtKSB7XG4gICAgZm9yICh2YXIga2V5IGluIG0pIHtcbiAgICAgICAgaWYgKCEob3JkZXJpbmcuaW5kZXhPZihrZXkpICE9PSAtMSAmJiAobVtrZXldID09IG51bGwgfHwgIWlzTmFOKG1ba2V5XSkpKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHVuaXRIYXNEZWNpbWFsID0gZmFsc2U7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvcmRlcmluZy5sZW5ndGg7ICsraSkge1xuICAgICAgICBpZiAobVtvcmRlcmluZ1tpXV0pIHtcbiAgICAgICAgICAgIGlmICh1bml0SGFzRGVjaW1hbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsgLy8gb25seSBhbGxvdyBub24taW50ZWdlcnMgZm9yIHNtYWxsZXN0IHVuaXRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChwYXJzZUZsb2F0KG1bb3JkZXJpbmdbaV1dKSAhPT0gdG9JbnQobVtvcmRlcmluZ1tpXV0pKSB7XG4gICAgICAgICAgICAgICAgdW5pdEhhc0RlY2ltYWwgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIGlzVmFsaWQkMSgpIHtcbiAgICByZXR1cm4gdGhpcy5faXNWYWxpZDtcbn1cblxuZnVuY3Rpb24gY3JlYXRlSW52YWxpZCQxKCkge1xuICAgIHJldHVybiBjcmVhdGVEdXJhdGlvbihOYU4pO1xufVxuXG5mdW5jdGlvbiBEdXJhdGlvbiAoZHVyYXRpb24pIHtcbiAgICB2YXIgbm9ybWFsaXplZElucHV0ID0gbm9ybWFsaXplT2JqZWN0VW5pdHMoZHVyYXRpb24pLFxuICAgICAgICB5ZWFycyA9IG5vcm1hbGl6ZWRJbnB1dC55ZWFyIHx8IDAsXG4gICAgICAgIHF1YXJ0ZXJzID0gbm9ybWFsaXplZElucHV0LnF1YXJ0ZXIgfHwgMCxcbiAgICAgICAgbW9udGhzID0gbm9ybWFsaXplZElucHV0Lm1vbnRoIHx8IDAsXG4gICAgICAgIHdlZWtzID0gbm9ybWFsaXplZElucHV0LndlZWsgfHwgMCxcbiAgICAgICAgZGF5cyA9IG5vcm1hbGl6ZWRJbnB1dC5kYXkgfHwgMCxcbiAgICAgICAgaG91cnMgPSBub3JtYWxpemVkSW5wdXQuaG91ciB8fCAwLFxuICAgICAgICBtaW51dGVzID0gbm9ybWFsaXplZElucHV0Lm1pbnV0ZSB8fCAwLFxuICAgICAgICBzZWNvbmRzID0gbm9ybWFsaXplZElucHV0LnNlY29uZCB8fCAwLFxuICAgICAgICBtaWxsaXNlY29uZHMgPSBub3JtYWxpemVkSW5wdXQubWlsbGlzZWNvbmQgfHwgMDtcblxuICAgIHRoaXMuX2lzVmFsaWQgPSBpc0R1cmF0aW9uVmFsaWQobm9ybWFsaXplZElucHV0KTtcblxuICAgIC8vIHJlcHJlc2VudGF0aW9uIGZvciBkYXRlQWRkUmVtb3ZlXG4gICAgdGhpcy5fbWlsbGlzZWNvbmRzID0gK21pbGxpc2Vjb25kcyArXG4gICAgICAgIHNlY29uZHMgKiAxZTMgKyAvLyAxMDAwXG4gICAgICAgIG1pbnV0ZXMgKiA2ZTQgKyAvLyAxMDAwICogNjBcbiAgICAgICAgaG91cnMgKiAxMDAwICogNjAgKiA2MDsgLy91c2luZyAxMDAwICogNjAgKiA2MCBpbnN0ZWFkIG9mIDM2ZTUgdG8gYXZvaWQgZmxvYXRpbmcgcG9pbnQgcm91bmRpbmcgZXJyb3JzIGh0dHBzOi8vZ2l0aHViLmNvbS9tb21lbnQvbW9tZW50L2lzc3Vlcy8yOTc4XG4gICAgLy8gQmVjYXVzZSBvZiBkYXRlQWRkUmVtb3ZlIHRyZWF0cyAyNCBob3VycyBhcyBkaWZmZXJlbnQgZnJvbSBhXG4gICAgLy8gZGF5IHdoZW4gd29ya2luZyBhcm91bmQgRFNULCB3ZSBuZWVkIHRvIHN0b3JlIHRoZW0gc2VwYXJhdGVseVxuICAgIHRoaXMuX2RheXMgPSArZGF5cyArXG4gICAgICAgIHdlZWtzICogNztcbiAgICAvLyBJdCBpcyBpbXBvc3NpYmxlIHRyYW5zbGF0ZSBtb250aHMgaW50byBkYXlzIHdpdGhvdXQga25vd2luZ1xuICAgIC8vIHdoaWNoIG1vbnRocyB5b3UgYXJlIGFyZSB0YWxraW5nIGFib3V0LCBzbyB3ZSBoYXZlIHRvIHN0b3JlXG4gICAgLy8gaXQgc2VwYXJhdGVseS5cbiAgICB0aGlzLl9tb250aHMgPSArbW9udGhzICtcbiAgICAgICAgcXVhcnRlcnMgKiAzICtcbiAgICAgICAgeWVhcnMgKiAxMjtcblxuICAgIHRoaXMuX2RhdGEgPSB7fTtcblxuICAgIHRoaXMuX2xvY2FsZSA9IGdldExvY2FsZSgpO1xuXG4gICAgdGhpcy5fYnViYmxlKCk7XG59XG5cbmZ1bmN0aW9uIGlzRHVyYXRpb24gKG9iaikge1xuICAgIHJldHVybiBvYmogaW5zdGFuY2VvZiBEdXJhdGlvbjtcbn1cblxuZnVuY3Rpb24gYWJzUm91bmQgKG51bWJlcikge1xuICAgIGlmIChudW1iZXIgPCAwKSB7XG4gICAgICAgIHJldHVybiBNYXRoLnJvdW5kKC0xICogbnVtYmVyKSAqIC0xO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBNYXRoLnJvdW5kKG51bWJlcik7XG4gICAgfVxufVxuXG4vLyBGT1JNQVRUSU5HXG5cbmZ1bmN0aW9uIG9mZnNldCAodG9rZW4sIHNlcGFyYXRvcikge1xuICAgIGFkZEZvcm1hdFRva2VuKHRva2VuLCAwLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBvZmZzZXQgPSB0aGlzLnV0Y09mZnNldCgpO1xuICAgICAgICB2YXIgc2lnbiA9ICcrJztcbiAgICAgICAgaWYgKG9mZnNldCA8IDApIHtcbiAgICAgICAgICAgIG9mZnNldCA9IC1vZmZzZXQ7XG4gICAgICAgICAgICBzaWduID0gJy0nO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzaWduICsgemVyb0ZpbGwofn4ob2Zmc2V0IC8gNjApLCAyKSArIHNlcGFyYXRvciArIHplcm9GaWxsKH5+KG9mZnNldCkgJSA2MCwgMik7XG4gICAgfSk7XG59XG5cbm9mZnNldCgnWicsICc6Jyk7XG5vZmZzZXQoJ1paJywgJycpO1xuXG4vLyBQQVJTSU5HXG5cbmFkZFJlZ2V4VG9rZW4oJ1onLCAgbWF0Y2hTaG9ydE9mZnNldCk7XG5hZGRSZWdleFRva2VuKCdaWicsIG1hdGNoU2hvcnRPZmZzZXQpO1xuYWRkUGFyc2VUb2tlbihbJ1onLCAnWlonXSwgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgY29uZmlnLl91c2VVVEMgPSB0cnVlO1xuICAgIGNvbmZpZy5fdHptID0gb2Zmc2V0RnJvbVN0cmluZyhtYXRjaFNob3J0T2Zmc2V0LCBpbnB1dCk7XG59KTtcblxuLy8gSEVMUEVSU1xuXG4vLyB0aW1lem9uZSBjaHVua2VyXG4vLyAnKzEwOjAwJyA+IFsnMTAnLCAgJzAwJ11cbi8vICctMTUzMCcgID4gWyctMTUnLCAnMzAnXVxudmFyIGNodW5rT2Zmc2V0ID0gLyhbXFwrXFwtXXxcXGRcXGQpL2dpO1xuXG5mdW5jdGlvbiBvZmZzZXRGcm9tU3RyaW5nKG1hdGNoZXIsIHN0cmluZykge1xuICAgIHZhciBtYXRjaGVzID0gKHN0cmluZyB8fCAnJykubWF0Y2gobWF0Y2hlcik7XG5cbiAgICBpZiAobWF0Y2hlcyA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgY2h1bmsgICA9IG1hdGNoZXNbbWF0Y2hlcy5sZW5ndGggLSAxXSB8fCBbXTtcbiAgICB2YXIgcGFydHMgICA9IChjaHVuayArICcnKS5tYXRjaChjaHVua09mZnNldCkgfHwgWyctJywgMCwgMF07XG4gICAgdmFyIG1pbnV0ZXMgPSArKHBhcnRzWzFdICogNjApICsgdG9JbnQocGFydHNbMl0pO1xuXG4gICAgcmV0dXJuIG1pbnV0ZXMgPT09IDAgP1xuICAgICAgMCA6XG4gICAgICBwYXJ0c1swXSA9PT0gJysnID8gbWludXRlcyA6IC1taW51dGVzO1xufVxuXG4vLyBSZXR1cm4gYSBtb21lbnQgZnJvbSBpbnB1dCwgdGhhdCBpcyBsb2NhbC91dGMvem9uZSBlcXVpdmFsZW50IHRvIG1vZGVsLlxuZnVuY3Rpb24gY2xvbmVXaXRoT2Zmc2V0KGlucHV0LCBtb2RlbCkge1xuICAgIHZhciByZXMsIGRpZmY7XG4gICAgaWYgKG1vZGVsLl9pc1VUQykge1xuICAgICAgICByZXMgPSBtb2RlbC5jbG9uZSgpO1xuICAgICAgICBkaWZmID0gKGlzTW9tZW50KGlucHV0KSB8fCBpc0RhdGUoaW5wdXQpID8gaW5wdXQudmFsdWVPZigpIDogY3JlYXRlTG9jYWwoaW5wdXQpLnZhbHVlT2YoKSkgLSByZXMudmFsdWVPZigpO1xuICAgICAgICAvLyBVc2UgbG93LWxldmVsIGFwaSwgYmVjYXVzZSB0aGlzIGZuIGlzIGxvdy1sZXZlbCBhcGkuXG4gICAgICAgIHJlcy5fZC5zZXRUaW1lKHJlcy5fZC52YWx1ZU9mKCkgKyBkaWZmKTtcbiAgICAgICAgaG9va3MudXBkYXRlT2Zmc2V0KHJlcywgZmFsc2UpO1xuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVMb2NhbChpbnB1dCkubG9jYWwoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGdldERhdGVPZmZzZXQgKG0pIHtcbiAgICAvLyBPbiBGaXJlZm94LjI0IERhdGUjZ2V0VGltZXpvbmVPZmZzZXQgcmV0dXJucyBhIGZsb2F0aW5nIHBvaW50LlxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tb21lbnQvbW9tZW50L3B1bGwvMTg3MVxuICAgIHJldHVybiAtTWF0aC5yb3VuZChtLl9kLmdldFRpbWV6b25lT2Zmc2V0KCkgLyAxNSkgKiAxNTtcbn1cblxuLy8gSE9PS1NcblxuLy8gVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGNhbGxlZCB3aGVuZXZlciBhIG1vbWVudCBpcyBtdXRhdGVkLlxuLy8gSXQgaXMgaW50ZW5kZWQgdG8ga2VlcCB0aGUgb2Zmc2V0IGluIHN5bmMgd2l0aCB0aGUgdGltZXpvbmUuXG5ob29rcy51cGRhdGVPZmZzZXQgPSBmdW5jdGlvbiAoKSB7fTtcblxuLy8gTU9NRU5UU1xuXG4vLyBrZWVwTG9jYWxUaW1lID0gdHJ1ZSBtZWFucyBvbmx5IGNoYW5nZSB0aGUgdGltZXpvbmUsIHdpdGhvdXRcbi8vIGFmZmVjdGluZyB0aGUgbG9jYWwgaG91ci4gU28gNTozMToyNiArMDMwMCAtLVt1dGNPZmZzZXQoMiwgdHJ1ZSldLS0+XG4vLyA1OjMxOjI2ICswMjAwIEl0IGlzIHBvc3NpYmxlIHRoYXQgNTozMToyNiBkb2Vzbid0IGV4aXN0IHdpdGggb2Zmc2V0XG4vLyArMDIwMCwgc28gd2UgYWRqdXN0IHRoZSB0aW1lIGFzIG5lZWRlZCwgdG8gYmUgdmFsaWQuXG4vL1xuLy8gS2VlcGluZyB0aGUgdGltZSBhY3R1YWxseSBhZGRzL3N1YnRyYWN0cyAob25lIGhvdXIpXG4vLyBmcm9tIHRoZSBhY3R1YWwgcmVwcmVzZW50ZWQgdGltZS4gVGhhdCBpcyB3aHkgd2UgY2FsbCB1cGRhdGVPZmZzZXRcbi8vIGEgc2Vjb25kIHRpbWUuIEluIGNhc2UgaXQgd2FudHMgdXMgdG8gY2hhbmdlIHRoZSBvZmZzZXQgYWdhaW5cbi8vIF9jaGFuZ2VJblByb2dyZXNzID09IHRydWUgY2FzZSwgdGhlbiB3ZSBoYXZlIHRvIGFkanVzdCwgYmVjYXVzZVxuLy8gdGhlcmUgaXMgbm8gc3VjaCB0aW1lIGluIHRoZSBnaXZlbiB0aW1lem9uZS5cbmZ1bmN0aW9uIGdldFNldE9mZnNldCAoaW5wdXQsIGtlZXBMb2NhbFRpbWUsIGtlZXBNaW51dGVzKSB7XG4gICAgdmFyIG9mZnNldCA9IHRoaXMuX29mZnNldCB8fCAwLFxuICAgICAgICBsb2NhbEFkanVzdDtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgIHJldHVybiBpbnB1dCAhPSBudWxsID8gdGhpcyA6IE5hTjtcbiAgICB9XG4gICAgaWYgKGlucHV0ICE9IG51bGwpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGlucHV0ID0gb2Zmc2V0RnJvbVN0cmluZyhtYXRjaFNob3J0T2Zmc2V0LCBpbnB1dCk7XG4gICAgICAgICAgICBpZiAoaW5wdXQgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChNYXRoLmFicyhpbnB1dCkgPCAxNiAmJiAha2VlcE1pbnV0ZXMpIHtcbiAgICAgICAgICAgIGlucHV0ID0gaW5wdXQgKiA2MDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuX2lzVVRDICYmIGtlZXBMb2NhbFRpbWUpIHtcbiAgICAgICAgICAgIGxvY2FsQWRqdXN0ID0gZ2V0RGF0ZU9mZnNldCh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9vZmZzZXQgPSBpbnB1dDtcbiAgICAgICAgdGhpcy5faXNVVEMgPSB0cnVlO1xuICAgICAgICBpZiAobG9jYWxBZGp1c3QgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5hZGQobG9jYWxBZGp1c3QsICdtJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9mZnNldCAhPT0gaW5wdXQpIHtcbiAgICAgICAgICAgIGlmICgha2VlcExvY2FsVGltZSB8fCB0aGlzLl9jaGFuZ2VJblByb2dyZXNzKSB7XG4gICAgICAgICAgICAgICAgYWRkU3VidHJhY3QodGhpcywgY3JlYXRlRHVyYXRpb24oaW5wdXQgLSBvZmZzZXQsICdtJyksIDEsIGZhbHNlKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIXRoaXMuX2NoYW5nZUluUHJvZ3Jlc3MpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9jaGFuZ2VJblByb2dyZXNzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBob29rcy51cGRhdGVPZmZzZXQodGhpcywgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5fY2hhbmdlSW5Qcm9ncmVzcyA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzVVRDID8gb2Zmc2V0IDogZ2V0RGF0ZU9mZnNldCh0aGlzKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGdldFNldFpvbmUgKGlucHV0LCBrZWVwTG9jYWxUaW1lKSB7XG4gICAgaWYgKGlucHV0ICE9IG51bGwpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpbnB1dCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGlucHV0ID0gLWlucHV0O1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy51dGNPZmZzZXQoaW5wdXQsIGtlZXBMb2NhbFRpbWUpO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiAtdGhpcy51dGNPZmZzZXQoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHNldE9mZnNldFRvVVRDIChrZWVwTG9jYWxUaW1lKSB7XG4gICAgcmV0dXJuIHRoaXMudXRjT2Zmc2V0KDAsIGtlZXBMb2NhbFRpbWUpO1xufVxuXG5mdW5jdGlvbiBzZXRPZmZzZXRUb0xvY2FsIChrZWVwTG9jYWxUaW1lKSB7XG4gICAgaWYgKHRoaXMuX2lzVVRDKSB7XG4gICAgICAgIHRoaXMudXRjT2Zmc2V0KDAsIGtlZXBMb2NhbFRpbWUpO1xuICAgICAgICB0aGlzLl9pc1VUQyA9IGZhbHNlO1xuXG4gICAgICAgIGlmIChrZWVwTG9jYWxUaW1lKSB7XG4gICAgICAgICAgICB0aGlzLnN1YnRyYWN0KGdldERhdGVPZmZzZXQodGhpcyksICdtJyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIHNldE9mZnNldFRvUGFyc2VkT2Zmc2V0ICgpIHtcbiAgICBpZiAodGhpcy5fdHptICE9IG51bGwpIHtcbiAgICAgICAgdGhpcy51dGNPZmZzZXQodGhpcy5fdHptLCBmYWxzZSwgdHJ1ZSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgdGhpcy5faSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdmFyIHRab25lID0gb2Zmc2V0RnJvbVN0cmluZyhtYXRjaE9mZnNldCwgdGhpcy5faSk7XG4gICAgICAgIGlmICh0Wm9uZSAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLnV0Y09mZnNldCh0Wm9uZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnV0Y09mZnNldCgwLCB0cnVlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gaGFzQWxpZ25lZEhvdXJPZmZzZXQgKGlucHV0KSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlucHV0ID0gaW5wdXQgPyBjcmVhdGVMb2NhbChpbnB1dCkudXRjT2Zmc2V0KCkgOiAwO1xuXG4gICAgcmV0dXJuICh0aGlzLnV0Y09mZnNldCgpIC0gaW5wdXQpICUgNjAgPT09IDA7XG59XG5cbmZ1bmN0aW9uIGlzRGF5bGlnaHRTYXZpbmdUaW1lICgpIHtcbiAgICByZXR1cm4gKFxuICAgICAgICB0aGlzLnV0Y09mZnNldCgpID4gdGhpcy5jbG9uZSgpLm1vbnRoKDApLnV0Y09mZnNldCgpIHx8XG4gICAgICAgIHRoaXMudXRjT2Zmc2V0KCkgPiB0aGlzLmNsb25lKCkubW9udGgoNSkudXRjT2Zmc2V0KClcbiAgICApO1xufVxuXG5mdW5jdGlvbiBpc0RheWxpZ2h0U2F2aW5nVGltZVNoaWZ0ZWQgKCkge1xuICAgIGlmICghaXNVbmRlZmluZWQodGhpcy5faXNEU1RTaGlmdGVkKSkge1xuICAgICAgICByZXR1cm4gdGhpcy5faXNEU1RTaGlmdGVkO1xuICAgIH1cblxuICAgIHZhciBjID0ge307XG5cbiAgICBjb3B5Q29uZmlnKGMsIHRoaXMpO1xuICAgIGMgPSBwcmVwYXJlQ29uZmlnKGMpO1xuXG4gICAgaWYgKGMuX2EpIHtcbiAgICAgICAgdmFyIG90aGVyID0gYy5faXNVVEMgPyBjcmVhdGVVVEMoYy5fYSkgOiBjcmVhdGVMb2NhbChjLl9hKTtcbiAgICAgICAgdGhpcy5faXNEU1RTaGlmdGVkID0gdGhpcy5pc1ZhbGlkKCkgJiZcbiAgICAgICAgICAgIGNvbXBhcmVBcnJheXMoYy5fYSwgb3RoZXIudG9BcnJheSgpKSA+IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5faXNEU1RTaGlmdGVkID0gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX2lzRFNUU2hpZnRlZDtcbn1cblxuZnVuY3Rpb24gaXNMb2NhbCAoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCgpID8gIXRoaXMuX2lzVVRDIDogZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzVXRjT2Zmc2V0ICgpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkKCkgPyB0aGlzLl9pc1VUQyA6IGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc1V0YyAoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCgpID8gdGhpcy5faXNVVEMgJiYgdGhpcy5fb2Zmc2V0ID09PSAwIDogZmFsc2U7XG59XG5cbi8vIEFTUC5ORVQganNvbiBkYXRlIGZvcm1hdCByZWdleFxudmFyIGFzcE5ldFJlZ2V4ID0gL14oXFwtKT8oPzooXFxkKilbLiBdKT8oXFxkKylcXDooXFxkKykoPzpcXDooXFxkKykoXFwuXFxkKik/KT8kLztcblxuLy8gZnJvbSBodHRwOi8vZG9jcy5jbG9zdXJlLWxpYnJhcnkuZ29vZ2xlY29kZS5jb20vZ2l0L2Nsb3N1cmVfZ29vZ19kYXRlX2RhdGUuanMuc291cmNlLmh0bWxcbi8vIHNvbWV3aGF0IG1vcmUgaW4gbGluZSB3aXRoIDQuNC4zLjIgMjAwNCBzcGVjLCBidXQgYWxsb3dzIGRlY2ltYWwgYW55d2hlcmVcbi8vIGFuZCBmdXJ0aGVyIG1vZGlmaWVkIHRvIGFsbG93IGZvciBzdHJpbmdzIGNvbnRhaW5pbmcgYm90aCB3ZWVrIGFuZCBkYXlcbnZhciBpc29SZWdleCA9IC9eKC0pP1AoPzooLT9bMC05LC5dKilZKT8oPzooLT9bMC05LC5dKilNKT8oPzooLT9bMC05LC5dKilXKT8oPzooLT9bMC05LC5dKilEKT8oPzpUKD86KC0/WzAtOSwuXSopSCk/KD86KC0/WzAtOSwuXSopTSk/KD86KC0/WzAtOSwuXSopUyk/KT8kLztcblxuZnVuY3Rpb24gY3JlYXRlRHVyYXRpb24gKGlucHV0LCBrZXkpIHtcbiAgICB2YXIgZHVyYXRpb24gPSBpbnB1dCxcbiAgICAgICAgLy8gbWF0Y2hpbmcgYWdhaW5zdCByZWdleHAgaXMgZXhwZW5zaXZlLCBkbyBpdCBvbiBkZW1hbmRcbiAgICAgICAgbWF0Y2ggPSBudWxsLFxuICAgICAgICBzaWduLFxuICAgICAgICByZXQsXG4gICAgICAgIGRpZmZSZXM7XG5cbiAgICBpZiAoaXNEdXJhdGlvbihpbnB1dCkpIHtcbiAgICAgICAgZHVyYXRpb24gPSB7XG4gICAgICAgICAgICBtcyA6IGlucHV0Ll9taWxsaXNlY29uZHMsXG4gICAgICAgICAgICBkICA6IGlucHV0Ll9kYXlzLFxuICAgICAgICAgICAgTSAgOiBpbnB1dC5fbW9udGhzXG4gICAgICAgIH07XG4gICAgfSBlbHNlIGlmIChpc051bWJlcihpbnB1dCkpIHtcbiAgICAgICAgZHVyYXRpb24gPSB7fTtcbiAgICAgICAgaWYgKGtleSkge1xuICAgICAgICAgICAgZHVyYXRpb25ba2V5XSA9IGlucHV0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZHVyYXRpb24ubWlsbGlzZWNvbmRzID0gaW5wdXQ7XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCEhKG1hdGNoID0gYXNwTmV0UmVnZXguZXhlYyhpbnB1dCkpKSB7XG4gICAgICAgIHNpZ24gPSAobWF0Y2hbMV0gPT09ICctJykgPyAtMSA6IDE7XG4gICAgICAgIGR1cmF0aW9uID0ge1xuICAgICAgICAgICAgeSAgOiAwLFxuICAgICAgICAgICAgZCAgOiB0b0ludChtYXRjaFtEQVRFXSkgICAgICAgICAgICAgICAgICAgICAgICAgKiBzaWduLFxuICAgICAgICAgICAgaCAgOiB0b0ludChtYXRjaFtIT1VSXSkgICAgICAgICAgICAgICAgICAgICAgICAgKiBzaWduLFxuICAgICAgICAgICAgbSAgOiB0b0ludChtYXRjaFtNSU5VVEVdKSAgICAgICAgICAgICAgICAgICAgICAgKiBzaWduLFxuICAgICAgICAgICAgcyAgOiB0b0ludChtYXRjaFtTRUNPTkRdKSAgICAgICAgICAgICAgICAgICAgICAgKiBzaWduLFxuICAgICAgICAgICAgbXMgOiB0b0ludChhYnNSb3VuZChtYXRjaFtNSUxMSVNFQ09ORF0gKiAxMDAwKSkgKiBzaWduIC8vIHRoZSBtaWxsaXNlY29uZCBkZWNpbWFsIHBvaW50IGlzIGluY2x1ZGVkIGluIHRoZSBtYXRjaFxuICAgICAgICB9O1xuICAgIH0gZWxzZSBpZiAoISEobWF0Y2ggPSBpc29SZWdleC5leGVjKGlucHV0KSkpIHtcbiAgICAgICAgc2lnbiA9IChtYXRjaFsxXSA9PT0gJy0nKSA/IC0xIDogMTtcbiAgICAgICAgZHVyYXRpb24gPSB7XG4gICAgICAgICAgICB5IDogcGFyc2VJc28obWF0Y2hbMl0sIHNpZ24pLFxuICAgICAgICAgICAgTSA6IHBhcnNlSXNvKG1hdGNoWzNdLCBzaWduKSxcbiAgICAgICAgICAgIHcgOiBwYXJzZUlzbyhtYXRjaFs0XSwgc2lnbiksXG4gICAgICAgICAgICBkIDogcGFyc2VJc28obWF0Y2hbNV0sIHNpZ24pLFxuICAgICAgICAgICAgaCA6IHBhcnNlSXNvKG1hdGNoWzZdLCBzaWduKSxcbiAgICAgICAgICAgIG0gOiBwYXJzZUlzbyhtYXRjaFs3XSwgc2lnbiksXG4gICAgICAgICAgICBzIDogcGFyc2VJc28obWF0Y2hbOF0sIHNpZ24pXG4gICAgICAgIH07XG4gICAgfSBlbHNlIGlmIChkdXJhdGlvbiA9PSBudWxsKSB7Ly8gY2hlY2tzIGZvciBudWxsIG9yIHVuZGVmaW5lZFxuICAgICAgICBkdXJhdGlvbiA9IHt9O1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGR1cmF0aW9uID09PSAnb2JqZWN0JyAmJiAoJ2Zyb20nIGluIGR1cmF0aW9uIHx8ICd0bycgaW4gZHVyYXRpb24pKSB7XG4gICAgICAgIGRpZmZSZXMgPSBtb21lbnRzRGlmZmVyZW5jZShjcmVhdGVMb2NhbChkdXJhdGlvbi5mcm9tKSwgY3JlYXRlTG9jYWwoZHVyYXRpb24udG8pKTtcblxuICAgICAgICBkdXJhdGlvbiA9IHt9O1xuICAgICAgICBkdXJhdGlvbi5tcyA9IGRpZmZSZXMubWlsbGlzZWNvbmRzO1xuICAgICAgICBkdXJhdGlvbi5NID0gZGlmZlJlcy5tb250aHM7XG4gICAgfVxuXG4gICAgcmV0ID0gbmV3IER1cmF0aW9uKGR1cmF0aW9uKTtcblxuICAgIGlmIChpc0R1cmF0aW9uKGlucHV0KSAmJiBoYXNPd25Qcm9wKGlucHV0LCAnX2xvY2FsZScpKSB7XG4gICAgICAgIHJldC5fbG9jYWxlID0gaW5wdXQuX2xvY2FsZTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmV0O1xufVxuXG5jcmVhdGVEdXJhdGlvbi5mbiA9IER1cmF0aW9uLnByb3RvdHlwZTtcbmNyZWF0ZUR1cmF0aW9uLmludmFsaWQgPSBjcmVhdGVJbnZhbGlkJDE7XG5cbmZ1bmN0aW9uIHBhcnNlSXNvIChpbnAsIHNpZ24pIHtcbiAgICAvLyBXZSdkIG5vcm1hbGx5IHVzZSB+fmlucCBmb3IgdGhpcywgYnV0IHVuZm9ydHVuYXRlbHkgaXQgYWxzb1xuICAgIC8vIGNvbnZlcnRzIGZsb2F0cyB0byBpbnRzLlxuICAgIC8vIGlucCBtYXkgYmUgdW5kZWZpbmVkLCBzbyBjYXJlZnVsIGNhbGxpbmcgcmVwbGFjZSBvbiBpdC5cbiAgICB2YXIgcmVzID0gaW5wICYmIHBhcnNlRmxvYXQoaW5wLnJlcGxhY2UoJywnLCAnLicpKTtcbiAgICAvLyBhcHBseSBzaWduIHdoaWxlIHdlJ3JlIGF0IGl0XG4gICAgcmV0dXJuIChpc05hTihyZXMpID8gMCA6IHJlcykgKiBzaWduO1xufVxuXG5mdW5jdGlvbiBwb3NpdGl2ZU1vbWVudHNEaWZmZXJlbmNlKGJhc2UsIG90aGVyKSB7XG4gICAgdmFyIHJlcyA9IHttaWxsaXNlY29uZHM6IDAsIG1vbnRoczogMH07XG5cbiAgICByZXMubW9udGhzID0gb3RoZXIubW9udGgoKSAtIGJhc2UubW9udGgoKSArXG4gICAgICAgIChvdGhlci55ZWFyKCkgLSBiYXNlLnllYXIoKSkgKiAxMjtcbiAgICBpZiAoYmFzZS5jbG9uZSgpLmFkZChyZXMubW9udGhzLCAnTScpLmlzQWZ0ZXIob3RoZXIpKSB7XG4gICAgICAgIC0tcmVzLm1vbnRocztcbiAgICB9XG5cbiAgICByZXMubWlsbGlzZWNvbmRzID0gK290aGVyIC0gKyhiYXNlLmNsb25lKCkuYWRkKHJlcy5tb250aHMsICdNJykpO1xuXG4gICAgcmV0dXJuIHJlcztcbn1cblxuZnVuY3Rpb24gbW9tZW50c0RpZmZlcmVuY2UoYmFzZSwgb3RoZXIpIHtcbiAgICB2YXIgcmVzO1xuICAgIGlmICghKGJhc2UuaXNWYWxpZCgpICYmIG90aGVyLmlzVmFsaWQoKSkpIHtcbiAgICAgICAgcmV0dXJuIHttaWxsaXNlY29uZHM6IDAsIG1vbnRoczogMH07XG4gICAgfVxuXG4gICAgb3RoZXIgPSBjbG9uZVdpdGhPZmZzZXQob3RoZXIsIGJhc2UpO1xuICAgIGlmIChiYXNlLmlzQmVmb3JlKG90aGVyKSkge1xuICAgICAgICByZXMgPSBwb3NpdGl2ZU1vbWVudHNEaWZmZXJlbmNlKGJhc2UsIG90aGVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXMgPSBwb3NpdGl2ZU1vbWVudHNEaWZmZXJlbmNlKG90aGVyLCBiYXNlKTtcbiAgICAgICAgcmVzLm1pbGxpc2Vjb25kcyA9IC1yZXMubWlsbGlzZWNvbmRzO1xuICAgICAgICByZXMubW9udGhzID0gLXJlcy5tb250aHM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcztcbn1cblxuLy8gVE9ETzogcmVtb3ZlICduYW1lJyBhcmcgYWZ0ZXIgZGVwcmVjYXRpb24gaXMgcmVtb3ZlZFxuZnVuY3Rpb24gY3JlYXRlQWRkZXIoZGlyZWN0aW9uLCBuYW1lKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICh2YWwsIHBlcmlvZCkge1xuICAgICAgICB2YXIgZHVyLCB0bXA7XG4gICAgICAgIC8vaW52ZXJ0IHRoZSBhcmd1bWVudHMsIGJ1dCBjb21wbGFpbiBhYm91dCBpdFxuICAgICAgICBpZiAocGVyaW9kICE9PSBudWxsICYmICFpc05hTigrcGVyaW9kKSkge1xuICAgICAgICAgICAgZGVwcmVjYXRlU2ltcGxlKG5hbWUsICdtb21lbnQoKS4nICsgbmFtZSAgKyAnKHBlcmlvZCwgbnVtYmVyKSBpcyBkZXByZWNhdGVkLiBQbGVhc2UgdXNlIG1vbWVudCgpLicgKyBuYW1lICsgJyhudW1iZXIsIHBlcmlvZCkuICcgK1xuICAgICAgICAgICAgJ1NlZSBodHRwOi8vbW9tZW50anMuY29tL2d1aWRlcy8jL3dhcm5pbmdzL2FkZC1pbnZlcnRlZC1wYXJhbS8gZm9yIG1vcmUgaW5mby4nKTtcbiAgICAgICAgICAgIHRtcCA9IHZhbDsgdmFsID0gcGVyaW9kOyBwZXJpb2QgPSB0bXA7XG4gICAgICAgIH1cblxuICAgICAgICB2YWwgPSB0eXBlb2YgdmFsID09PSAnc3RyaW5nJyA/ICt2YWwgOiB2YWw7XG4gICAgICAgIGR1ciA9IGNyZWF0ZUR1cmF0aW9uKHZhbCwgcGVyaW9kKTtcbiAgICAgICAgYWRkU3VidHJhY3QodGhpcywgZHVyLCBkaXJlY3Rpb24pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xufVxuXG5mdW5jdGlvbiBhZGRTdWJ0cmFjdCAobW9tLCBkdXJhdGlvbiwgaXNBZGRpbmcsIHVwZGF0ZU9mZnNldCkge1xuICAgIHZhciBtaWxsaXNlY29uZHMgPSBkdXJhdGlvbi5fbWlsbGlzZWNvbmRzLFxuICAgICAgICBkYXlzID0gYWJzUm91bmQoZHVyYXRpb24uX2RheXMpLFxuICAgICAgICBtb250aHMgPSBhYnNSb3VuZChkdXJhdGlvbi5fbW9udGhzKTtcblxuICAgIGlmICghbW9tLmlzVmFsaWQoKSkge1xuICAgICAgICAvLyBObyBvcFxuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdXBkYXRlT2Zmc2V0ID0gdXBkYXRlT2Zmc2V0ID09IG51bGwgPyB0cnVlIDogdXBkYXRlT2Zmc2V0O1xuXG4gICAgaWYgKG1pbGxpc2Vjb25kcykge1xuICAgICAgICBtb20uX2Quc2V0VGltZShtb20uX2QudmFsdWVPZigpICsgbWlsbGlzZWNvbmRzICogaXNBZGRpbmcpO1xuICAgIH1cbiAgICBpZiAoZGF5cykge1xuICAgICAgICBzZXQkMShtb20sICdEYXRlJywgZ2V0KG1vbSwgJ0RhdGUnKSArIGRheXMgKiBpc0FkZGluZyk7XG4gICAgfVxuICAgIGlmIChtb250aHMpIHtcbiAgICAgICAgc2V0TW9udGgobW9tLCBnZXQobW9tLCAnTW9udGgnKSArIG1vbnRocyAqIGlzQWRkaW5nKTtcbiAgICB9XG4gICAgaWYgKHVwZGF0ZU9mZnNldCkge1xuICAgICAgICBob29rcy51cGRhdGVPZmZzZXQobW9tLCBkYXlzIHx8IG1vbnRocyk7XG4gICAgfVxufVxuXG52YXIgYWRkICAgICAgPSBjcmVhdGVBZGRlcigxLCAnYWRkJyk7XG52YXIgc3VidHJhY3QgPSBjcmVhdGVBZGRlcigtMSwgJ3N1YnRyYWN0Jyk7XG5cbmZ1bmN0aW9uIGdldENhbGVuZGFyRm9ybWF0KG15TW9tZW50LCBub3cpIHtcbiAgICB2YXIgZGlmZiA9IG15TW9tZW50LmRpZmYobm93LCAnZGF5cycsIHRydWUpO1xuICAgIHJldHVybiBkaWZmIDwgLTYgPyAnc2FtZUVsc2UnIDpcbiAgICAgICAgICAgIGRpZmYgPCAtMSA/ICdsYXN0V2VlaycgOlxuICAgICAgICAgICAgZGlmZiA8IDAgPyAnbGFzdERheScgOlxuICAgICAgICAgICAgZGlmZiA8IDEgPyAnc2FtZURheScgOlxuICAgICAgICAgICAgZGlmZiA8IDIgPyAnbmV4dERheScgOlxuICAgICAgICAgICAgZGlmZiA8IDcgPyAnbmV4dFdlZWsnIDogJ3NhbWVFbHNlJztcbn1cblxuZnVuY3Rpb24gY2FsZW5kYXIkMSAodGltZSwgZm9ybWF0cykge1xuICAgIC8vIFdlIHdhbnQgdG8gY29tcGFyZSB0aGUgc3RhcnQgb2YgdG9kYXksIHZzIHRoaXMuXG4gICAgLy8gR2V0dGluZyBzdGFydC1vZi10b2RheSBkZXBlbmRzIG9uIHdoZXRoZXIgd2UncmUgbG9jYWwvdXRjL29mZnNldCBvciBub3QuXG4gICAgdmFyIG5vdyA9IHRpbWUgfHwgY3JlYXRlTG9jYWwoKSxcbiAgICAgICAgc29kID0gY2xvbmVXaXRoT2Zmc2V0KG5vdywgdGhpcykuc3RhcnRPZignZGF5JyksXG4gICAgICAgIGZvcm1hdCA9IGhvb2tzLmNhbGVuZGFyRm9ybWF0KHRoaXMsIHNvZCkgfHwgJ3NhbWVFbHNlJztcblxuICAgIHZhciBvdXRwdXQgPSBmb3JtYXRzICYmIChpc0Z1bmN0aW9uKGZvcm1hdHNbZm9ybWF0XSkgPyBmb3JtYXRzW2Zvcm1hdF0uY2FsbCh0aGlzLCBub3cpIDogZm9ybWF0c1tmb3JtYXRdKTtcblxuICAgIHJldHVybiB0aGlzLmZvcm1hdChvdXRwdXQgfHwgdGhpcy5sb2NhbGVEYXRhKCkuY2FsZW5kYXIoZm9ybWF0LCB0aGlzLCBjcmVhdGVMb2NhbChub3cpKSk7XG59XG5cbmZ1bmN0aW9uIGNsb25lICgpIHtcbiAgICByZXR1cm4gbmV3IE1vbWVudCh0aGlzKTtcbn1cblxuZnVuY3Rpb24gaXNBZnRlciAoaW5wdXQsIHVuaXRzKSB7XG4gICAgdmFyIGxvY2FsSW5wdXQgPSBpc01vbWVudChpbnB1dCkgPyBpbnB1dCA6IGNyZWF0ZUxvY2FsKGlucHV0KTtcbiAgICBpZiAoISh0aGlzLmlzVmFsaWQoKSAmJiBsb2NhbElucHV0LmlzVmFsaWQoKSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKCFpc1VuZGVmaW5lZCh1bml0cykgPyB1bml0cyA6ICdtaWxsaXNlY29uZCcpO1xuICAgIGlmICh1bml0cyA9PT0gJ21pbGxpc2Vjb25kJykge1xuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZU9mKCkgPiBsb2NhbElucHV0LnZhbHVlT2YoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbG9jYWxJbnB1dC52YWx1ZU9mKCkgPCB0aGlzLmNsb25lKCkuc3RhcnRPZih1bml0cykudmFsdWVPZigpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gaXNCZWZvcmUgKGlucHV0LCB1bml0cykge1xuICAgIHZhciBsb2NhbElucHV0ID0gaXNNb21lbnQoaW5wdXQpID8gaW5wdXQgOiBjcmVhdGVMb2NhbChpbnB1dCk7XG4gICAgaWYgKCEodGhpcy5pc1ZhbGlkKCkgJiYgbG9jYWxJbnB1dC5pc1ZhbGlkKCkpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyghaXNVbmRlZmluZWQodW5pdHMpID8gdW5pdHMgOiAnbWlsbGlzZWNvbmQnKTtcbiAgICBpZiAodW5pdHMgPT09ICdtaWxsaXNlY29uZCcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWVPZigpIDwgbG9jYWxJbnB1dC52YWx1ZU9mKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5lbmRPZih1bml0cykudmFsdWVPZigpIDwgbG9jYWxJbnB1dC52YWx1ZU9mKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBpc0JldHdlZW4gKGZyb20sIHRvLCB1bml0cywgaW5jbHVzaXZpdHkpIHtcbiAgICBpbmNsdXNpdml0eSA9IGluY2x1c2l2aXR5IHx8ICcoKSc7XG4gICAgcmV0dXJuIChpbmNsdXNpdml0eVswXSA9PT0gJygnID8gdGhpcy5pc0FmdGVyKGZyb20sIHVuaXRzKSA6ICF0aGlzLmlzQmVmb3JlKGZyb20sIHVuaXRzKSkgJiZcbiAgICAgICAgKGluY2x1c2l2aXR5WzFdID09PSAnKScgPyB0aGlzLmlzQmVmb3JlKHRvLCB1bml0cykgOiAhdGhpcy5pc0FmdGVyKHRvLCB1bml0cykpO1xufVxuXG5mdW5jdGlvbiBpc1NhbWUgKGlucHV0LCB1bml0cykge1xuICAgIHZhciBsb2NhbElucHV0ID0gaXNNb21lbnQoaW5wdXQpID8gaW5wdXQgOiBjcmVhdGVMb2NhbChpbnB1dCksXG4gICAgICAgIGlucHV0TXM7XG4gICAgaWYgKCEodGhpcy5pc1ZhbGlkKCkgJiYgbG9jYWxJbnB1dC5pc1ZhbGlkKCkpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cyB8fCAnbWlsbGlzZWNvbmQnKTtcbiAgICBpZiAodW5pdHMgPT09ICdtaWxsaXNlY29uZCcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWVPZigpID09PSBsb2NhbElucHV0LnZhbHVlT2YoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBpbnB1dE1zID0gbG9jYWxJbnB1dC52YWx1ZU9mKCk7XG4gICAgICAgIHJldHVybiB0aGlzLmNsb25lKCkuc3RhcnRPZih1bml0cykudmFsdWVPZigpIDw9IGlucHV0TXMgJiYgaW5wdXRNcyA8PSB0aGlzLmNsb25lKCkuZW5kT2YodW5pdHMpLnZhbHVlT2YoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGlzU2FtZU9yQWZ0ZXIgKGlucHV0LCB1bml0cykge1xuICAgIHJldHVybiB0aGlzLmlzU2FtZShpbnB1dCwgdW5pdHMpIHx8IHRoaXMuaXNBZnRlcihpbnB1dCx1bml0cyk7XG59XG5cbmZ1bmN0aW9uIGlzU2FtZU9yQmVmb3JlIChpbnB1dCwgdW5pdHMpIHtcbiAgICByZXR1cm4gdGhpcy5pc1NhbWUoaW5wdXQsIHVuaXRzKSB8fCB0aGlzLmlzQmVmb3JlKGlucHV0LHVuaXRzKTtcbn1cblxuZnVuY3Rpb24gZGlmZiAoaW5wdXQsIHVuaXRzLCBhc0Zsb2F0KSB7XG4gICAgdmFyIHRoYXQsXG4gICAgICAgIHpvbmVEZWx0YSxcbiAgICAgICAgZGVsdGEsIG91dHB1dDtcblxuICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgcmV0dXJuIE5hTjtcbiAgICB9XG5cbiAgICB0aGF0ID0gY2xvbmVXaXRoT2Zmc2V0KGlucHV0LCB0aGlzKTtcblxuICAgIGlmICghdGhhdC5pc1ZhbGlkKCkpIHtcbiAgICAgICAgcmV0dXJuIE5hTjtcbiAgICB9XG5cbiAgICB6b25lRGVsdGEgPSAodGhhdC51dGNPZmZzZXQoKSAtIHRoaXMudXRjT2Zmc2V0KCkpICogNmU0O1xuXG4gICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cyk7XG5cbiAgICBpZiAodW5pdHMgPT09ICd5ZWFyJyB8fCB1bml0cyA9PT0gJ21vbnRoJyB8fCB1bml0cyA9PT0gJ3F1YXJ0ZXInKSB7XG4gICAgICAgIG91dHB1dCA9IG1vbnRoRGlmZih0aGlzLCB0aGF0KTtcbiAgICAgICAgaWYgKHVuaXRzID09PSAncXVhcnRlcicpIHtcbiAgICAgICAgICAgIG91dHB1dCA9IG91dHB1dCAvIDM7XG4gICAgICAgIH0gZWxzZSBpZiAodW5pdHMgPT09ICd5ZWFyJykge1xuICAgICAgICAgICAgb3V0cHV0ID0gb3V0cHV0IC8gMTI7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBkZWx0YSA9IHRoaXMgLSB0aGF0O1xuICAgICAgICBvdXRwdXQgPSB1bml0cyA9PT0gJ3NlY29uZCcgPyBkZWx0YSAvIDFlMyA6IC8vIDEwMDBcbiAgICAgICAgICAgIHVuaXRzID09PSAnbWludXRlJyA/IGRlbHRhIC8gNmU0IDogLy8gMTAwMCAqIDYwXG4gICAgICAgICAgICB1bml0cyA9PT0gJ2hvdXInID8gZGVsdGEgLyAzNmU1IDogLy8gMTAwMCAqIDYwICogNjBcbiAgICAgICAgICAgIHVuaXRzID09PSAnZGF5JyA/IChkZWx0YSAtIHpvbmVEZWx0YSkgLyA4NjRlNSA6IC8vIDEwMDAgKiA2MCAqIDYwICogMjQsIG5lZ2F0ZSBkc3RcbiAgICAgICAgICAgIHVuaXRzID09PSAnd2VlaycgPyAoZGVsdGEgLSB6b25lRGVsdGEpIC8gNjA0OGU1IDogLy8gMTAwMCAqIDYwICogNjAgKiAyNCAqIDcsIG5lZ2F0ZSBkc3RcbiAgICAgICAgICAgIGRlbHRhO1xuICAgIH1cbiAgICByZXR1cm4gYXNGbG9hdCA/IG91dHB1dCA6IGFic0Zsb29yKG91dHB1dCk7XG59XG5cbmZ1bmN0aW9uIG1vbnRoRGlmZiAoYSwgYikge1xuICAgIC8vIGRpZmZlcmVuY2UgaW4gbW9udGhzXG4gICAgdmFyIHdob2xlTW9udGhEaWZmID0gKChiLnllYXIoKSAtIGEueWVhcigpKSAqIDEyKSArIChiLm1vbnRoKCkgLSBhLm1vbnRoKCkpLFxuICAgICAgICAvLyBiIGlzIGluIChhbmNob3IgLSAxIG1vbnRoLCBhbmNob3IgKyAxIG1vbnRoKVxuICAgICAgICBhbmNob3IgPSBhLmNsb25lKCkuYWRkKHdob2xlTW9udGhEaWZmLCAnbW9udGhzJyksXG4gICAgICAgIGFuY2hvcjIsIGFkanVzdDtcblxuICAgIGlmIChiIC0gYW5jaG9yIDwgMCkge1xuICAgICAgICBhbmNob3IyID0gYS5jbG9uZSgpLmFkZCh3aG9sZU1vbnRoRGlmZiAtIDEsICdtb250aHMnKTtcbiAgICAgICAgLy8gbGluZWFyIGFjcm9zcyB0aGUgbW9udGhcbiAgICAgICAgYWRqdXN0ID0gKGIgLSBhbmNob3IpIC8gKGFuY2hvciAtIGFuY2hvcjIpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGFuY2hvcjIgPSBhLmNsb25lKCkuYWRkKHdob2xlTW9udGhEaWZmICsgMSwgJ21vbnRocycpO1xuICAgICAgICAvLyBsaW5lYXIgYWNyb3NzIHRoZSBtb250aFxuICAgICAgICBhZGp1c3QgPSAoYiAtIGFuY2hvcikgLyAoYW5jaG9yMiAtIGFuY2hvcik7XG4gICAgfVxuXG4gICAgLy9jaGVjayBmb3IgbmVnYXRpdmUgemVybywgcmV0dXJuIHplcm8gaWYgbmVnYXRpdmUgemVyb1xuICAgIHJldHVybiAtKHdob2xlTW9udGhEaWZmICsgYWRqdXN0KSB8fCAwO1xufVxuXG5ob29rcy5kZWZhdWx0Rm9ybWF0ID0gJ1lZWVktTU0tRERUSEg6bW06c3NaJztcbmhvb2tzLmRlZmF1bHRGb3JtYXRVdGMgPSAnWVlZWS1NTS1ERFRISDptbTpzc1taXSc7XG5cbmZ1bmN0aW9uIHRvU3RyaW5nICgpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmxvY2FsZSgnZW4nKS5mb3JtYXQoJ2RkZCBNTU0gREQgWVlZWSBISDptbTpzcyBbR01UXVpaJyk7XG59XG5cbmZ1bmN0aW9uIHRvSVNPU3RyaW5nKCkge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHZhciBtID0gdGhpcy5jbG9uZSgpLnV0YygpO1xuICAgIGlmIChtLnllYXIoKSA8IDAgfHwgbS55ZWFyKCkgPiA5OTk5KSB7XG4gICAgICAgIHJldHVybiBmb3JtYXRNb21lbnQobSwgJ1lZWVlZWS1NTS1ERFtUXUhIOm1tOnNzLlNTU1taXScpO1xuICAgIH1cbiAgICBpZiAoaXNGdW5jdGlvbihEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZykpIHtcbiAgICAgICAgLy8gbmF0aXZlIGltcGxlbWVudGF0aW9uIGlzIH41MHggZmFzdGVyLCB1c2UgaXQgd2hlbiB3ZSBjYW5cbiAgICAgICAgcmV0dXJuIHRoaXMudG9EYXRlKCkudG9JU09TdHJpbmcoKTtcbiAgICB9XG4gICAgcmV0dXJuIGZvcm1hdE1vbWVudChtLCAnWVlZWS1NTS1ERFtUXUhIOm1tOnNzLlNTU1taXScpO1xufVxuXG4vKipcbiAqIFJldHVybiBhIGh1bWFuIHJlYWRhYmxlIHJlcHJlc2VudGF0aW9uIG9mIGEgbW9tZW50IHRoYXQgY2FuXG4gKiBhbHNvIGJlIGV2YWx1YXRlZCB0byBnZXQgYSBuZXcgbW9tZW50IHdoaWNoIGlzIHRoZSBzYW1lXG4gKlxuICogQGxpbmsgaHR0cHM6Ly9ub2RlanMub3JnL2Rpc3QvbGF0ZXN0L2RvY3MvYXBpL3V0aWwuaHRtbCN1dGlsX2N1c3RvbV9pbnNwZWN0X2Z1bmN0aW9uX29uX29iamVjdHNcbiAqL1xuZnVuY3Rpb24gaW5zcGVjdCAoKSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICByZXR1cm4gJ21vbWVudC5pbnZhbGlkKC8qICcgKyB0aGlzLl9pICsgJyAqLyknO1xuICAgIH1cbiAgICB2YXIgZnVuYyA9ICdtb21lbnQnO1xuICAgIHZhciB6b25lID0gJyc7XG4gICAgaWYgKCF0aGlzLmlzTG9jYWwoKSkge1xuICAgICAgICBmdW5jID0gdGhpcy51dGNPZmZzZXQoKSA9PT0gMCA/ICdtb21lbnQudXRjJyA6ICdtb21lbnQucGFyc2Vab25lJztcbiAgICAgICAgem9uZSA9ICdaJztcbiAgICB9XG4gICAgdmFyIHByZWZpeCA9ICdbJyArIGZ1bmMgKyAnKFwiXSc7XG4gICAgdmFyIHllYXIgPSAoMCA8PSB0aGlzLnllYXIoKSAmJiB0aGlzLnllYXIoKSA8PSA5OTk5KSA/ICdZWVlZJyA6ICdZWVlZWVknO1xuICAgIHZhciBkYXRldGltZSA9ICctTU0tRERbVF1ISDptbTpzcy5TU1MnO1xuICAgIHZhciBzdWZmaXggPSB6b25lICsgJ1tcIildJztcblxuICAgIHJldHVybiB0aGlzLmZvcm1hdChwcmVmaXggKyB5ZWFyICsgZGF0ZXRpbWUgKyBzdWZmaXgpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXQgKGlucHV0U3RyaW5nKSB7XG4gICAgaWYgKCFpbnB1dFN0cmluZykge1xuICAgICAgICBpbnB1dFN0cmluZyA9IHRoaXMuaXNVdGMoKSA/IGhvb2tzLmRlZmF1bHRGb3JtYXRVdGMgOiBob29rcy5kZWZhdWx0Rm9ybWF0O1xuICAgIH1cbiAgICB2YXIgb3V0cHV0ID0gZm9ybWF0TW9tZW50KHRoaXMsIGlucHV0U3RyaW5nKTtcbiAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkucG9zdGZvcm1hdChvdXRwdXQpO1xufVxuXG5mdW5jdGlvbiBmcm9tICh0aW1lLCB3aXRob3V0U3VmZml4KSB7XG4gICAgaWYgKHRoaXMuaXNWYWxpZCgpICYmXG4gICAgICAgICAgICAoKGlzTW9tZW50KHRpbWUpICYmIHRpbWUuaXNWYWxpZCgpKSB8fFxuICAgICAgICAgICAgIGNyZWF0ZUxvY2FsKHRpbWUpLmlzVmFsaWQoKSkpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUR1cmF0aW9uKHt0bzogdGhpcywgZnJvbTogdGltZX0pLmxvY2FsZSh0aGlzLmxvY2FsZSgpKS5odW1hbml6ZSghd2l0aG91dFN1ZmZpeCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLmludmFsaWREYXRlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBmcm9tTm93ICh3aXRob3V0U3VmZml4KSB7XG4gICAgcmV0dXJuIHRoaXMuZnJvbShjcmVhdGVMb2NhbCgpLCB3aXRob3V0U3VmZml4KTtcbn1cblxuZnVuY3Rpb24gdG8gKHRpbWUsIHdpdGhvdXRTdWZmaXgpIHtcbiAgICBpZiAodGhpcy5pc1ZhbGlkKCkgJiZcbiAgICAgICAgICAgICgoaXNNb21lbnQodGltZSkgJiYgdGltZS5pc1ZhbGlkKCkpIHx8XG4gICAgICAgICAgICAgY3JlYXRlTG9jYWwodGltZSkuaXNWYWxpZCgpKSkge1xuICAgICAgICByZXR1cm4gY3JlYXRlRHVyYXRpb24oe2Zyb206IHRoaXMsIHRvOiB0aW1lfSkubG9jYWxlKHRoaXMubG9jYWxlKCkpLmh1bWFuaXplKCF3aXRob3V0U3VmZml4KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkuaW52YWxpZERhdGUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHRvTm93ICh3aXRob3V0U3VmZml4KSB7XG4gICAgcmV0dXJuIHRoaXMudG8oY3JlYXRlTG9jYWwoKSwgd2l0aG91dFN1ZmZpeCk7XG59XG5cbi8vIElmIHBhc3NlZCBhIGxvY2FsZSBrZXksIGl0IHdpbGwgc2V0IHRoZSBsb2NhbGUgZm9yIHRoaXNcbi8vIGluc3RhbmNlLiAgT3RoZXJ3aXNlLCBpdCB3aWxsIHJldHVybiB0aGUgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vIHZhcmlhYmxlcyBmb3IgdGhpcyBpbnN0YW5jZS5cbmZ1bmN0aW9uIGxvY2FsZSAoa2V5KSB7XG4gICAgdmFyIG5ld0xvY2FsZURhdGE7XG5cbiAgICBpZiAoa2V5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xvY2FsZS5fYWJicjtcbiAgICB9IGVsc2Uge1xuICAgICAgICBuZXdMb2NhbGVEYXRhID0gZ2V0TG9jYWxlKGtleSk7XG4gICAgICAgIGlmIChuZXdMb2NhbGVEYXRhICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuX2xvY2FsZSA9IG5ld0xvY2FsZURhdGE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxufVxuXG52YXIgbGFuZyA9IGRlcHJlY2F0ZShcbiAgICAnbW9tZW50KCkubGFuZygpIGlzIGRlcHJlY2F0ZWQuIEluc3RlYWQsIHVzZSBtb21lbnQoKS5sb2NhbGVEYXRhKCkgdG8gZ2V0IHRoZSBsYW5ndWFnZSBjb25maWd1cmF0aW9uLiBVc2UgbW9tZW50KCkubG9jYWxlKCkgdG8gY2hhbmdlIGxhbmd1YWdlcy4nLFxuICAgIGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKGtleSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGUoa2V5KTtcbiAgICAgICAgfVxuICAgIH1cbik7XG5cbmZ1bmN0aW9uIGxvY2FsZURhdGEgKCkge1xuICAgIHJldHVybiB0aGlzLl9sb2NhbGU7XG59XG5cbmZ1bmN0aW9uIHN0YXJ0T2YgKHVuaXRzKSB7XG4gICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cyk7XG4gICAgLy8gdGhlIGZvbGxvd2luZyBzd2l0Y2ggaW50ZW50aW9uYWxseSBvbWl0cyBicmVhayBrZXl3b3Jkc1xuICAgIC8vIHRvIHV0aWxpemUgZmFsbGluZyB0aHJvdWdoIHRoZSBjYXNlcy5cbiAgICBzd2l0Y2ggKHVuaXRzKSB7XG4gICAgICAgIGNhc2UgJ3llYXInOlxuICAgICAgICAgICAgdGhpcy5tb250aCgwKTtcbiAgICAgICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgICAgY2FzZSAncXVhcnRlcic6XG4gICAgICAgIGNhc2UgJ21vbnRoJzpcbiAgICAgICAgICAgIHRoaXMuZGF0ZSgxKTtcbiAgICAgICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgICAgY2FzZSAnd2Vlayc6XG4gICAgICAgIGNhc2UgJ2lzb1dlZWsnOlxuICAgICAgICBjYXNlICdkYXknOlxuICAgICAgICBjYXNlICdkYXRlJzpcbiAgICAgICAgICAgIHRoaXMuaG91cnMoMCk7XG4gICAgICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICAgIGNhc2UgJ2hvdXInOlxuICAgICAgICAgICAgdGhpcy5taW51dGVzKDApO1xuICAgICAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgICBjYXNlICdtaW51dGUnOlxuICAgICAgICAgICAgdGhpcy5zZWNvbmRzKDApO1xuICAgICAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgICBjYXNlICdzZWNvbmQnOlxuICAgICAgICAgICAgdGhpcy5taWxsaXNlY29uZHMoMCk7XG4gICAgfVxuXG4gICAgLy8gd2Vla3MgYXJlIGEgc3BlY2lhbCBjYXNlXG4gICAgaWYgKHVuaXRzID09PSAnd2VlaycpIHtcbiAgICAgICAgdGhpcy53ZWVrZGF5KDApO1xuICAgIH1cbiAgICBpZiAodW5pdHMgPT09ICdpc29XZWVrJykge1xuICAgICAgICB0aGlzLmlzb1dlZWtkYXkoMSk7XG4gICAgfVxuXG4gICAgLy8gcXVhcnRlcnMgYXJlIGFsc28gc3BlY2lhbFxuICAgIGlmICh1bml0cyA9PT0gJ3F1YXJ0ZXInKSB7XG4gICAgICAgIHRoaXMubW9udGgoTWF0aC5mbG9vcih0aGlzLm1vbnRoKCkgLyAzKSAqIDMpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiBlbmRPZiAodW5pdHMpIHtcbiAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKTtcbiAgICBpZiAodW5pdHMgPT09IHVuZGVmaW5lZCB8fCB1bml0cyA9PT0gJ21pbGxpc2Vjb25kJykge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyAnZGF0ZScgaXMgYW4gYWxpYXMgZm9yICdkYXknLCBzbyBpdCBzaG91bGQgYmUgY29uc2lkZXJlZCBhcyBzdWNoLlxuICAgIGlmICh1bml0cyA9PT0gJ2RhdGUnKSB7XG4gICAgICAgIHVuaXRzID0gJ2RheSc7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RhcnRPZih1bml0cykuYWRkKDEsICh1bml0cyA9PT0gJ2lzb1dlZWsnID8gJ3dlZWsnIDogdW5pdHMpKS5zdWJ0cmFjdCgxLCAnbXMnKTtcbn1cblxuZnVuY3Rpb24gdmFsdWVPZiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2QudmFsdWVPZigpIC0gKCh0aGlzLl9vZmZzZXQgfHwgMCkgKiA2MDAwMCk7XG59XG5cbmZ1bmN0aW9uIHVuaXggKCkge1xuICAgIHJldHVybiBNYXRoLmZsb29yKHRoaXMudmFsdWVPZigpIC8gMTAwMCk7XG59XG5cbmZ1bmN0aW9uIHRvRGF0ZSAoKSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKHRoaXMudmFsdWVPZigpKTtcbn1cblxuZnVuY3Rpb24gdG9BcnJheSAoKSB7XG4gICAgdmFyIG0gPSB0aGlzO1xuICAgIHJldHVybiBbbS55ZWFyKCksIG0ubW9udGgoKSwgbS5kYXRlKCksIG0uaG91cigpLCBtLm1pbnV0ZSgpLCBtLnNlY29uZCgpLCBtLm1pbGxpc2Vjb25kKCldO1xufVxuXG5mdW5jdGlvbiB0b09iamVjdCAoKSB7XG4gICAgdmFyIG0gPSB0aGlzO1xuICAgIHJldHVybiB7XG4gICAgICAgIHllYXJzOiBtLnllYXIoKSxcbiAgICAgICAgbW9udGhzOiBtLm1vbnRoKCksXG4gICAgICAgIGRhdGU6IG0uZGF0ZSgpLFxuICAgICAgICBob3VyczogbS5ob3VycygpLFxuICAgICAgICBtaW51dGVzOiBtLm1pbnV0ZXMoKSxcbiAgICAgICAgc2Vjb25kczogbS5zZWNvbmRzKCksXG4gICAgICAgIG1pbGxpc2Vjb25kczogbS5taWxsaXNlY29uZHMoKVxuICAgIH07XG59XG5cbmZ1bmN0aW9uIHRvSlNPTiAoKSB7XG4gICAgLy8gbmV3IERhdGUoTmFOKS50b0pTT04oKSA9PT0gbnVsbFxuICAgIHJldHVybiB0aGlzLmlzVmFsaWQoKSA/IHRoaXMudG9JU09TdHJpbmcoKSA6IG51bGw7XG59XG5cbmZ1bmN0aW9uIGlzVmFsaWQkMiAoKSB7XG4gICAgcmV0dXJuIGlzVmFsaWQodGhpcyk7XG59XG5cbmZ1bmN0aW9uIHBhcnNpbmdGbGFncyAoKSB7XG4gICAgcmV0dXJuIGV4dGVuZCh7fSwgZ2V0UGFyc2luZ0ZsYWdzKHRoaXMpKTtcbn1cblxuZnVuY3Rpb24gaW52YWxpZEF0ICgpIHtcbiAgICByZXR1cm4gZ2V0UGFyc2luZ0ZsYWdzKHRoaXMpLm92ZXJmbG93O1xufVxuXG5mdW5jdGlvbiBjcmVhdGlvbkRhdGEoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgaW5wdXQ6IHRoaXMuX2ksXG4gICAgICAgIGZvcm1hdDogdGhpcy5fZixcbiAgICAgICAgbG9jYWxlOiB0aGlzLl9sb2NhbGUsXG4gICAgICAgIGlzVVRDOiB0aGlzLl9pc1VUQyxcbiAgICAgICAgc3RyaWN0OiB0aGlzLl9zdHJpY3RcbiAgICB9O1xufVxuXG4vLyBGT1JNQVRUSU5HXG5cbmFkZEZvcm1hdFRva2VuKDAsIFsnZ2cnLCAyXSwgMCwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLndlZWtZZWFyKCkgJSAxMDA7XG59KTtcblxuYWRkRm9ybWF0VG9rZW4oMCwgWydHRycsIDJdLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNvV2Vla1llYXIoKSAlIDEwMDtcbn0pO1xuXG5mdW5jdGlvbiBhZGRXZWVrWWVhckZvcm1hdFRva2VuICh0b2tlbiwgZ2V0dGVyKSB7XG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgW3Rva2VuLCB0b2tlbi5sZW5ndGhdLCAwLCBnZXR0ZXIpO1xufVxuXG5hZGRXZWVrWWVhckZvcm1hdFRva2VuKCdnZ2dnJywgICAgICd3ZWVrWWVhcicpO1xuYWRkV2Vla1llYXJGb3JtYXRUb2tlbignZ2dnZ2cnLCAgICAnd2Vla1llYXInKTtcbmFkZFdlZWtZZWFyRm9ybWF0VG9rZW4oJ0dHR0cnLCAgJ2lzb1dlZWtZZWFyJyk7XG5hZGRXZWVrWWVhckZvcm1hdFRva2VuKCdHR0dHRycsICdpc29XZWVrWWVhcicpO1xuXG4vLyBBTElBU0VTXG5cbmFkZFVuaXRBbGlhcygnd2Vla1llYXInLCAnZ2cnKTtcbmFkZFVuaXRBbGlhcygnaXNvV2Vla1llYXInLCAnR0cnKTtcblxuLy8gUFJJT1JJVFlcblxuYWRkVW5pdFByaW9yaXR5KCd3ZWVrWWVhcicsIDEpO1xuYWRkVW5pdFByaW9yaXR5KCdpc29XZWVrWWVhcicsIDEpO1xuXG5cbi8vIFBBUlNJTkdcblxuYWRkUmVnZXhUb2tlbignRycsICAgICAgbWF0Y2hTaWduZWQpO1xuYWRkUmVnZXhUb2tlbignZycsICAgICAgbWF0Y2hTaWduZWQpO1xuYWRkUmVnZXhUb2tlbignR0cnLCAgICAgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuYWRkUmVnZXhUb2tlbignZ2cnLCAgICAgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuYWRkUmVnZXhUb2tlbignR0dHRycsICAgbWF0Y2gxdG80LCBtYXRjaDQpO1xuYWRkUmVnZXhUb2tlbignZ2dnZycsICAgbWF0Y2gxdG80LCBtYXRjaDQpO1xuYWRkUmVnZXhUb2tlbignR0dHR0cnLCAgbWF0Y2gxdG82LCBtYXRjaDYpO1xuYWRkUmVnZXhUb2tlbignZ2dnZ2cnLCAgbWF0Y2gxdG82LCBtYXRjaDYpO1xuXG5hZGRXZWVrUGFyc2VUb2tlbihbJ2dnZ2cnLCAnZ2dnZ2cnLCAnR0dHRycsICdHR0dHRyddLCBmdW5jdGlvbiAoaW5wdXQsIHdlZWssIGNvbmZpZywgdG9rZW4pIHtcbiAgICB3ZWVrW3Rva2VuLnN1YnN0cigwLCAyKV0gPSB0b0ludChpbnB1dCk7XG59KTtcblxuYWRkV2Vla1BhcnNlVG9rZW4oWydnZycsICdHRyddLCBmdW5jdGlvbiAoaW5wdXQsIHdlZWssIGNvbmZpZywgdG9rZW4pIHtcbiAgICB3ZWVrW3Rva2VuXSA9IGhvb2tzLnBhcnNlVHdvRGlnaXRZZWFyKGlucHV0KTtcbn0pO1xuXG4vLyBNT01FTlRTXG5cbmZ1bmN0aW9uIGdldFNldFdlZWtZZWFyIChpbnB1dCkge1xuICAgIHJldHVybiBnZXRTZXRXZWVrWWVhckhlbHBlci5jYWxsKHRoaXMsXG4gICAgICAgICAgICBpbnB1dCxcbiAgICAgICAgICAgIHRoaXMud2VlaygpLFxuICAgICAgICAgICAgdGhpcy53ZWVrZGF5KCksXG4gICAgICAgICAgICB0aGlzLmxvY2FsZURhdGEoKS5fd2Vlay5kb3csXG4gICAgICAgICAgICB0aGlzLmxvY2FsZURhdGEoKS5fd2Vlay5kb3kpO1xufVxuXG5mdW5jdGlvbiBnZXRTZXRJU09XZWVrWWVhciAoaW5wdXQpIHtcbiAgICByZXR1cm4gZ2V0U2V0V2Vla1llYXJIZWxwZXIuY2FsbCh0aGlzLFxuICAgICAgICAgICAgaW5wdXQsIHRoaXMuaXNvV2VlaygpLCB0aGlzLmlzb1dlZWtkYXkoKSwgMSwgNCk7XG59XG5cbmZ1bmN0aW9uIGdldElTT1dlZWtzSW5ZZWFyICgpIHtcbiAgICByZXR1cm4gd2Vla3NJblllYXIodGhpcy55ZWFyKCksIDEsIDQpO1xufVxuXG5mdW5jdGlvbiBnZXRXZWVrc0luWWVhciAoKSB7XG4gICAgdmFyIHdlZWtJbmZvID0gdGhpcy5sb2NhbGVEYXRhKCkuX3dlZWs7XG4gICAgcmV0dXJuIHdlZWtzSW5ZZWFyKHRoaXMueWVhcigpLCB3ZWVrSW5mby5kb3csIHdlZWtJbmZvLmRveSk7XG59XG5cbmZ1bmN0aW9uIGdldFNldFdlZWtZZWFySGVscGVyKGlucHV0LCB3ZWVrLCB3ZWVrZGF5LCBkb3csIGRveSkge1xuICAgIHZhciB3ZWVrc1RhcmdldDtcbiAgICBpZiAoaW5wdXQgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gd2Vla09mWWVhcih0aGlzLCBkb3csIGRveSkueWVhcjtcbiAgICB9IGVsc2Uge1xuICAgICAgICB3ZWVrc1RhcmdldCA9IHdlZWtzSW5ZZWFyKGlucHV0LCBkb3csIGRveSk7XG4gICAgICAgIGlmICh3ZWVrID4gd2Vla3NUYXJnZXQpIHtcbiAgICAgICAgICAgIHdlZWsgPSB3ZWVrc1RhcmdldDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2V0V2Vla0FsbC5jYWxsKHRoaXMsIGlucHV0LCB3ZWVrLCB3ZWVrZGF5LCBkb3csIGRveSk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBzZXRXZWVrQWxsKHdlZWtZZWFyLCB3ZWVrLCB3ZWVrZGF5LCBkb3csIGRveSkge1xuICAgIHZhciBkYXlPZlllYXJEYXRhID0gZGF5T2ZZZWFyRnJvbVdlZWtzKHdlZWtZZWFyLCB3ZWVrLCB3ZWVrZGF5LCBkb3csIGRveSksXG4gICAgICAgIGRhdGUgPSBjcmVhdGVVVENEYXRlKGRheU9mWWVhckRhdGEueWVhciwgMCwgZGF5T2ZZZWFyRGF0YS5kYXlPZlllYXIpO1xuXG4gICAgdGhpcy55ZWFyKGRhdGUuZ2V0VVRDRnVsbFllYXIoKSk7XG4gICAgdGhpcy5tb250aChkYXRlLmdldFVUQ01vbnRoKCkpO1xuICAgIHRoaXMuZGF0ZShkYXRlLmdldFVUQ0RhdGUoKSk7XG4gICAgcmV0dXJuIHRoaXM7XG59XG5cbi8vIEZPUk1BVFRJTkdcblxuYWRkRm9ybWF0VG9rZW4oJ1EnLCAwLCAnUW8nLCAncXVhcnRlcicpO1xuXG4vLyBBTElBU0VTXG5cbmFkZFVuaXRBbGlhcygncXVhcnRlcicsICdRJyk7XG5cbi8vIFBSSU9SSVRZXG5cbmFkZFVuaXRQcmlvcml0eSgncXVhcnRlcicsIDcpO1xuXG4vLyBQQVJTSU5HXG5cbmFkZFJlZ2V4VG9rZW4oJ1EnLCBtYXRjaDEpO1xuYWRkUGFyc2VUb2tlbignUScsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXkpIHtcbiAgICBhcnJheVtNT05USF0gPSAodG9JbnQoaW5wdXQpIC0gMSkgKiAzO1xufSk7XG5cbi8vIE1PTUVOVFNcblxuZnVuY3Rpb24gZ2V0U2V0UXVhcnRlciAoaW5wdXQpIHtcbiAgICByZXR1cm4gaW5wdXQgPT0gbnVsbCA/IE1hdGguY2VpbCgodGhpcy5tb250aCgpICsgMSkgLyAzKSA6IHRoaXMubW9udGgoKGlucHV0IC0gMSkgKiAzICsgdGhpcy5tb250aCgpICUgMyk7XG59XG5cbi8vIEZPUk1BVFRJTkdcblxuYWRkRm9ybWF0VG9rZW4oJ0QnLCBbJ0REJywgMl0sICdEbycsICdkYXRlJyk7XG5cbi8vIEFMSUFTRVNcblxuYWRkVW5pdEFsaWFzKCdkYXRlJywgJ0QnKTtcblxuLy8gUFJJT1JPSVRZXG5hZGRVbml0UHJpb3JpdHkoJ2RhdGUnLCA5KTtcblxuLy8gUEFSU0lOR1xuXG5hZGRSZWdleFRva2VuKCdEJywgIG1hdGNoMXRvMik7XG5hZGRSZWdleFRva2VuKCdERCcsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbmFkZFJlZ2V4VG9rZW4oJ0RvJywgZnVuY3Rpb24gKGlzU3RyaWN0LCBsb2NhbGUpIHtcbiAgICAvLyBUT0RPOiBSZW1vdmUgXCJvcmRpbmFsUGFyc2VcIiBmYWxsYmFjayBpbiBuZXh0IG1ham9yIHJlbGVhc2UuXG4gICAgcmV0dXJuIGlzU3RyaWN0ID9cbiAgICAgIChsb2NhbGUuX2RheU9mTW9udGhPcmRpbmFsUGFyc2UgfHwgbG9jYWxlLl9vcmRpbmFsUGFyc2UpIDpcbiAgICAgIGxvY2FsZS5fZGF5T2ZNb250aE9yZGluYWxQYXJzZUxlbmllbnQ7XG59KTtcblxuYWRkUGFyc2VUb2tlbihbJ0QnLCAnREQnXSwgREFURSk7XG5hZGRQYXJzZVRva2VuKCdEbycsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXkpIHtcbiAgICBhcnJheVtEQVRFXSA9IHRvSW50KGlucHV0Lm1hdGNoKG1hdGNoMXRvMilbMF0sIDEwKTtcbn0pO1xuXG4vLyBNT01FTlRTXG5cbnZhciBnZXRTZXREYXlPZk1vbnRoID0gbWFrZUdldFNldCgnRGF0ZScsIHRydWUpO1xuXG4vLyBGT1JNQVRUSU5HXG5cbmFkZEZvcm1hdFRva2VuKCdEREQnLCBbJ0REREQnLCAzXSwgJ0RERG8nLCAnZGF5T2ZZZWFyJyk7XG5cbi8vIEFMSUFTRVNcblxuYWRkVW5pdEFsaWFzKCdkYXlPZlllYXInLCAnREREJyk7XG5cbi8vIFBSSU9SSVRZXG5hZGRVbml0UHJpb3JpdHkoJ2RheU9mWWVhcicsIDQpO1xuXG4vLyBQQVJTSU5HXG5cbmFkZFJlZ2V4VG9rZW4oJ0RERCcsICBtYXRjaDF0bzMpO1xuYWRkUmVnZXhUb2tlbignRERERCcsIG1hdGNoMyk7XG5hZGRQYXJzZVRva2VuKFsnREREJywgJ0REREQnXSwgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgY29uZmlnLl9kYXlPZlllYXIgPSB0b0ludChpbnB1dCk7XG59KTtcblxuLy8gSEVMUEVSU1xuXG4vLyBNT01FTlRTXG5cbmZ1bmN0aW9uIGdldFNldERheU9mWWVhciAoaW5wdXQpIHtcbiAgICB2YXIgZGF5T2ZZZWFyID0gTWF0aC5yb3VuZCgodGhpcy5jbG9uZSgpLnN0YXJ0T2YoJ2RheScpIC0gdGhpcy5jbG9uZSgpLnN0YXJ0T2YoJ3llYXInKSkgLyA4NjRlNSkgKyAxO1xuICAgIHJldHVybiBpbnB1dCA9PSBudWxsID8gZGF5T2ZZZWFyIDogdGhpcy5hZGQoKGlucHV0IC0gZGF5T2ZZZWFyKSwgJ2QnKTtcbn1cblxuLy8gRk9STUFUVElOR1xuXG5hZGRGb3JtYXRUb2tlbignbScsIFsnbW0nLCAyXSwgMCwgJ21pbnV0ZScpO1xuXG4vLyBBTElBU0VTXG5cbmFkZFVuaXRBbGlhcygnbWludXRlJywgJ20nKTtcblxuLy8gUFJJT1JJVFlcblxuYWRkVW5pdFByaW9yaXR5KCdtaW51dGUnLCAxNCk7XG5cbi8vIFBBUlNJTkdcblxuYWRkUmVnZXhUb2tlbignbScsICBtYXRjaDF0bzIpO1xuYWRkUmVnZXhUb2tlbignbW0nLCBtYXRjaDF0bzIsIG1hdGNoMik7XG5hZGRQYXJzZVRva2VuKFsnbScsICdtbSddLCBNSU5VVEUpO1xuXG4vLyBNT01FTlRTXG5cbnZhciBnZXRTZXRNaW51dGUgPSBtYWtlR2V0U2V0KCdNaW51dGVzJywgZmFsc2UpO1xuXG4vLyBGT1JNQVRUSU5HXG5cbmFkZEZvcm1hdFRva2VuKCdzJywgWydzcycsIDJdLCAwLCAnc2Vjb25kJyk7XG5cbi8vIEFMSUFTRVNcblxuYWRkVW5pdEFsaWFzKCdzZWNvbmQnLCAncycpO1xuXG4vLyBQUklPUklUWVxuXG5hZGRVbml0UHJpb3JpdHkoJ3NlY29uZCcsIDE1KTtcblxuLy8gUEFSU0lOR1xuXG5hZGRSZWdleFRva2VuKCdzJywgIG1hdGNoMXRvMik7XG5hZGRSZWdleFRva2VuKCdzcycsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbmFkZFBhcnNlVG9rZW4oWydzJywgJ3NzJ10sIFNFQ09ORCk7XG5cbi8vIE1PTUVOVFNcblxudmFyIGdldFNldFNlY29uZCA9IG1ha2VHZXRTZXQoJ1NlY29uZHMnLCBmYWxzZSk7XG5cbi8vIEZPUk1BVFRJTkdcblxuYWRkRm9ybWF0VG9rZW4oJ1MnLCAwLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIH5+KHRoaXMubWlsbGlzZWNvbmQoKSAvIDEwMCk7XG59KTtcblxuYWRkRm9ybWF0VG9rZW4oMCwgWydTUycsIDJdLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIH5+KHRoaXMubWlsbGlzZWNvbmQoKSAvIDEwKTtcbn0pO1xuXG5hZGRGb3JtYXRUb2tlbigwLCBbJ1NTUycsIDNdLCAwLCAnbWlsbGlzZWNvbmQnKTtcbmFkZEZvcm1hdFRva2VuKDAsIFsnU1NTUycsIDRdLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMubWlsbGlzZWNvbmQoKSAqIDEwO1xufSk7XG5hZGRGb3JtYXRUb2tlbigwLCBbJ1NTU1NTJywgNV0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5taWxsaXNlY29uZCgpICogMTAwO1xufSk7XG5hZGRGb3JtYXRUb2tlbigwLCBbJ1NTU1NTUycsIDZdLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMubWlsbGlzZWNvbmQoKSAqIDEwMDA7XG59KTtcbmFkZEZvcm1hdFRva2VuKDAsIFsnU1NTU1NTUycsIDddLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMubWlsbGlzZWNvbmQoKSAqIDEwMDAwO1xufSk7XG5hZGRGb3JtYXRUb2tlbigwLCBbJ1NTU1NTU1NTJywgOF0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5taWxsaXNlY29uZCgpICogMTAwMDAwO1xufSk7XG5hZGRGb3JtYXRUb2tlbigwLCBbJ1NTU1NTU1NTUycsIDldLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMubWlsbGlzZWNvbmQoKSAqIDEwMDAwMDA7XG59KTtcblxuXG4vLyBBTElBU0VTXG5cbmFkZFVuaXRBbGlhcygnbWlsbGlzZWNvbmQnLCAnbXMnKTtcblxuLy8gUFJJT1JJVFlcblxuYWRkVW5pdFByaW9yaXR5KCdtaWxsaXNlY29uZCcsIDE2KTtcblxuLy8gUEFSU0lOR1xuXG5hZGRSZWdleFRva2VuKCdTJywgICAgbWF0Y2gxdG8zLCBtYXRjaDEpO1xuYWRkUmVnZXhUb2tlbignU1MnLCAgIG1hdGNoMXRvMywgbWF0Y2gyKTtcbmFkZFJlZ2V4VG9rZW4oJ1NTUycsICBtYXRjaDF0bzMsIG1hdGNoMyk7XG5cbnZhciB0b2tlbjtcbmZvciAodG9rZW4gPSAnU1NTUyc7IHRva2VuLmxlbmd0aCA8PSA5OyB0b2tlbiArPSAnUycpIHtcbiAgICBhZGRSZWdleFRva2VuKHRva2VuLCBtYXRjaFVuc2lnbmVkKTtcbn1cblxuZnVuY3Rpb24gcGFyc2VNcyhpbnB1dCwgYXJyYXkpIHtcbiAgICBhcnJheVtNSUxMSVNFQ09ORF0gPSB0b0ludCgoJzAuJyArIGlucHV0KSAqIDEwMDApO1xufVxuXG5mb3IgKHRva2VuID0gJ1MnOyB0b2tlbi5sZW5ndGggPD0gOTsgdG9rZW4gKz0gJ1MnKSB7XG4gICAgYWRkUGFyc2VUb2tlbih0b2tlbiwgcGFyc2VNcyk7XG59XG4vLyBNT01FTlRTXG5cbnZhciBnZXRTZXRNaWxsaXNlY29uZCA9IG1ha2VHZXRTZXQoJ01pbGxpc2Vjb25kcycsIGZhbHNlKTtcblxuLy8gRk9STUFUVElOR1xuXG5hZGRGb3JtYXRUb2tlbigneicsICAwLCAwLCAnem9uZUFiYnInKTtcbmFkZEZvcm1hdFRva2VuKCd6eicsIDAsIDAsICd6b25lTmFtZScpO1xuXG4vLyBNT01FTlRTXG5cbmZ1bmN0aW9uIGdldFpvbmVBYmJyICgpIHtcbiAgICByZXR1cm4gdGhpcy5faXNVVEMgPyAnVVRDJyA6ICcnO1xufVxuXG5mdW5jdGlvbiBnZXRab25lTmFtZSAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2lzVVRDID8gJ0Nvb3JkaW5hdGVkIFVuaXZlcnNhbCBUaW1lJyA6ICcnO1xufVxuXG52YXIgcHJvdG8gPSBNb21lbnQucHJvdG90eXBlO1xuXG5wcm90by5hZGQgICAgICAgICAgICAgICA9IGFkZDtcbnByb3RvLmNhbGVuZGFyICAgICAgICAgID0gY2FsZW5kYXIkMTtcbnByb3RvLmNsb25lICAgICAgICAgICAgID0gY2xvbmU7XG5wcm90by5kaWZmICAgICAgICAgICAgICA9IGRpZmY7XG5wcm90by5lbmRPZiAgICAgICAgICAgICA9IGVuZE9mO1xucHJvdG8uZm9ybWF0ICAgICAgICAgICAgPSBmb3JtYXQ7XG5wcm90by5mcm9tICAgICAgICAgICAgICA9IGZyb207XG5wcm90by5mcm9tTm93ICAgICAgICAgICA9IGZyb21Ob3c7XG5wcm90by50byAgICAgICAgICAgICAgICA9IHRvO1xucHJvdG8udG9Ob3cgICAgICAgICAgICAgPSB0b05vdztcbnByb3RvLmdldCAgICAgICAgICAgICAgID0gc3RyaW5nR2V0O1xucHJvdG8uaW52YWxpZEF0ICAgICAgICAgPSBpbnZhbGlkQXQ7XG5wcm90by5pc0FmdGVyICAgICAgICAgICA9IGlzQWZ0ZXI7XG5wcm90by5pc0JlZm9yZSAgICAgICAgICA9IGlzQmVmb3JlO1xucHJvdG8uaXNCZXR3ZWVuICAgICAgICAgPSBpc0JldHdlZW47XG5wcm90by5pc1NhbWUgICAgICAgICAgICA9IGlzU2FtZTtcbnByb3RvLmlzU2FtZU9yQWZ0ZXIgICAgID0gaXNTYW1lT3JBZnRlcjtcbnByb3RvLmlzU2FtZU9yQmVmb3JlICAgID0gaXNTYW1lT3JCZWZvcmU7XG5wcm90by5pc1ZhbGlkICAgICAgICAgICA9IGlzVmFsaWQkMjtcbnByb3RvLmxhbmcgICAgICAgICAgICAgID0gbGFuZztcbnByb3RvLmxvY2FsZSAgICAgICAgICAgID0gbG9jYWxlO1xucHJvdG8ubG9jYWxlRGF0YSAgICAgICAgPSBsb2NhbGVEYXRhO1xucHJvdG8ubWF4ICAgICAgICAgICAgICAgPSBwcm90b3R5cGVNYXg7XG5wcm90by5taW4gICAgICAgICAgICAgICA9IHByb3RvdHlwZU1pbjtcbnByb3RvLnBhcnNpbmdGbGFncyAgICAgID0gcGFyc2luZ0ZsYWdzO1xucHJvdG8uc2V0ICAgICAgICAgICAgICAgPSBzdHJpbmdTZXQ7XG5wcm90by5zdGFydE9mICAgICAgICAgICA9IHN0YXJ0T2Y7XG5wcm90by5zdWJ0cmFjdCAgICAgICAgICA9IHN1YnRyYWN0O1xucHJvdG8udG9BcnJheSAgICAgICAgICAgPSB0b0FycmF5O1xucHJvdG8udG9PYmplY3QgICAgICAgICAgPSB0b09iamVjdDtcbnByb3RvLnRvRGF0ZSAgICAgICAgICAgID0gdG9EYXRlO1xucHJvdG8udG9JU09TdHJpbmcgICAgICAgPSB0b0lTT1N0cmluZztcbnByb3RvLmluc3BlY3QgICAgICAgICAgID0gaW5zcGVjdDtcbnByb3RvLnRvSlNPTiAgICAgICAgICAgID0gdG9KU09OO1xucHJvdG8udG9TdHJpbmcgICAgICAgICAgPSB0b1N0cmluZztcbnByb3RvLnVuaXggICAgICAgICAgICAgID0gdW5peDtcbnByb3RvLnZhbHVlT2YgICAgICAgICAgID0gdmFsdWVPZjtcbnByb3RvLmNyZWF0aW9uRGF0YSAgICAgID0gY3JlYXRpb25EYXRhO1xuXG4vLyBZZWFyXG5wcm90by55ZWFyICAgICAgID0gZ2V0U2V0WWVhcjtcbnByb3RvLmlzTGVhcFllYXIgPSBnZXRJc0xlYXBZZWFyO1xuXG4vLyBXZWVrIFllYXJcbnByb3RvLndlZWtZZWFyICAgID0gZ2V0U2V0V2Vla1llYXI7XG5wcm90by5pc29XZWVrWWVhciA9IGdldFNldElTT1dlZWtZZWFyO1xuXG4vLyBRdWFydGVyXG5wcm90by5xdWFydGVyID0gcHJvdG8ucXVhcnRlcnMgPSBnZXRTZXRRdWFydGVyO1xuXG4vLyBNb250aFxucHJvdG8ubW9udGggICAgICAgPSBnZXRTZXRNb250aDtcbnByb3RvLmRheXNJbk1vbnRoID0gZ2V0RGF5c0luTW9udGg7XG5cbi8vIFdlZWtcbnByb3RvLndlZWsgICAgICAgICAgID0gcHJvdG8ud2Vla3MgICAgICAgID0gZ2V0U2V0V2VlaztcbnByb3RvLmlzb1dlZWsgICAgICAgID0gcHJvdG8uaXNvV2Vla3MgICAgID0gZ2V0U2V0SVNPV2VlaztcbnByb3RvLndlZWtzSW5ZZWFyICAgID0gZ2V0V2Vla3NJblllYXI7XG5wcm90by5pc29XZWVrc0luWWVhciA9IGdldElTT1dlZWtzSW5ZZWFyO1xuXG4vLyBEYXlcbnByb3RvLmRhdGUgICAgICAgPSBnZXRTZXREYXlPZk1vbnRoO1xucHJvdG8uZGF5ICAgICAgICA9IHByb3RvLmRheXMgICAgICAgICAgICAgPSBnZXRTZXREYXlPZldlZWs7XG5wcm90by53ZWVrZGF5ICAgID0gZ2V0U2V0TG9jYWxlRGF5T2ZXZWVrO1xucHJvdG8uaXNvV2Vla2RheSA9IGdldFNldElTT0RheU9mV2VlaztcbnByb3RvLmRheU9mWWVhciAgPSBnZXRTZXREYXlPZlllYXI7XG5cbi8vIEhvdXJcbnByb3RvLmhvdXIgPSBwcm90by5ob3VycyA9IGdldFNldEhvdXI7XG5cbi8vIE1pbnV0ZVxucHJvdG8ubWludXRlID0gcHJvdG8ubWludXRlcyA9IGdldFNldE1pbnV0ZTtcblxuLy8gU2Vjb25kXG5wcm90by5zZWNvbmQgPSBwcm90by5zZWNvbmRzID0gZ2V0U2V0U2Vjb25kO1xuXG4vLyBNaWxsaXNlY29uZFxucHJvdG8ubWlsbGlzZWNvbmQgPSBwcm90by5taWxsaXNlY29uZHMgPSBnZXRTZXRNaWxsaXNlY29uZDtcblxuLy8gT2Zmc2V0XG5wcm90by51dGNPZmZzZXQgICAgICAgICAgICA9IGdldFNldE9mZnNldDtcbnByb3RvLnV0YyAgICAgICAgICAgICAgICAgID0gc2V0T2Zmc2V0VG9VVEM7XG5wcm90by5sb2NhbCAgICAgICAgICAgICAgICA9IHNldE9mZnNldFRvTG9jYWw7XG5wcm90by5wYXJzZVpvbmUgICAgICAgICAgICA9IHNldE9mZnNldFRvUGFyc2VkT2Zmc2V0O1xucHJvdG8uaGFzQWxpZ25lZEhvdXJPZmZzZXQgPSBoYXNBbGlnbmVkSG91ck9mZnNldDtcbnByb3RvLmlzRFNUICAgICAgICAgICAgICAgID0gaXNEYXlsaWdodFNhdmluZ1RpbWU7XG5wcm90by5pc0xvY2FsICAgICAgICAgICAgICA9IGlzTG9jYWw7XG5wcm90by5pc1V0Y09mZnNldCAgICAgICAgICA9IGlzVXRjT2Zmc2V0O1xucHJvdG8uaXNVdGMgICAgICAgICAgICAgICAgPSBpc1V0YztcbnByb3RvLmlzVVRDICAgICAgICAgICAgICAgID0gaXNVdGM7XG5cbi8vIFRpbWV6b25lXG5wcm90by56b25lQWJiciA9IGdldFpvbmVBYmJyO1xucHJvdG8uem9uZU5hbWUgPSBnZXRab25lTmFtZTtcblxuLy8gRGVwcmVjYXRpb25zXG5wcm90by5kYXRlcyAgPSBkZXByZWNhdGUoJ2RhdGVzIGFjY2Vzc29yIGlzIGRlcHJlY2F0ZWQuIFVzZSBkYXRlIGluc3RlYWQuJywgZ2V0U2V0RGF5T2ZNb250aCk7XG5wcm90by5tb250aHMgPSBkZXByZWNhdGUoJ21vbnRocyBhY2Nlc3NvciBpcyBkZXByZWNhdGVkLiBVc2UgbW9udGggaW5zdGVhZCcsIGdldFNldE1vbnRoKTtcbnByb3RvLnllYXJzICA9IGRlcHJlY2F0ZSgneWVhcnMgYWNjZXNzb3IgaXMgZGVwcmVjYXRlZC4gVXNlIHllYXIgaW5zdGVhZCcsIGdldFNldFllYXIpO1xucHJvdG8uem9uZSAgID0gZGVwcmVjYXRlKCdtb21lbnQoKS56b25lIGlzIGRlcHJlY2F0ZWQsIHVzZSBtb21lbnQoKS51dGNPZmZzZXQgaW5zdGVhZC4gaHR0cDovL21vbWVudGpzLmNvbS9ndWlkZXMvIy93YXJuaW5ncy96b25lLycsIGdldFNldFpvbmUpO1xucHJvdG8uaXNEU1RTaGlmdGVkID0gZGVwcmVjYXRlKCdpc0RTVFNoaWZ0ZWQgaXMgZGVwcmVjYXRlZC4gU2VlIGh0dHA6Ly9tb21lbnRqcy5jb20vZ3VpZGVzLyMvd2FybmluZ3MvZHN0LXNoaWZ0ZWQvIGZvciBtb3JlIGluZm9ybWF0aW9uJywgaXNEYXlsaWdodFNhdmluZ1RpbWVTaGlmdGVkKTtcblxuZnVuY3Rpb24gY3JlYXRlVW5peCAoaW5wdXQpIHtcbiAgICByZXR1cm4gY3JlYXRlTG9jYWwoaW5wdXQgKiAxMDAwKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlSW5ab25lICgpIHtcbiAgICByZXR1cm4gY3JlYXRlTG9jYWwuYXBwbHkobnVsbCwgYXJndW1lbnRzKS5wYXJzZVpvbmUoKTtcbn1cblxuZnVuY3Rpb24gcHJlUGFyc2VQb3N0Rm9ybWF0IChzdHJpbmcpIHtcbiAgICByZXR1cm4gc3RyaW5nO1xufVxuXG52YXIgcHJvdG8kMSA9IExvY2FsZS5wcm90b3R5cGU7XG5cbnByb3RvJDEuY2FsZW5kYXIgICAgICAgID0gY2FsZW5kYXI7XG5wcm90byQxLmxvbmdEYXRlRm9ybWF0ICA9IGxvbmdEYXRlRm9ybWF0O1xucHJvdG8kMS5pbnZhbGlkRGF0ZSAgICAgPSBpbnZhbGlkRGF0ZTtcbnByb3RvJDEub3JkaW5hbCAgICAgICAgID0gb3JkaW5hbDtcbnByb3RvJDEucHJlcGFyc2UgICAgICAgID0gcHJlUGFyc2VQb3N0Rm9ybWF0O1xucHJvdG8kMS5wb3N0Zm9ybWF0ICAgICAgPSBwcmVQYXJzZVBvc3RGb3JtYXQ7XG5wcm90byQxLnJlbGF0aXZlVGltZSAgICA9IHJlbGF0aXZlVGltZTtcbnByb3RvJDEucGFzdEZ1dHVyZSAgICAgID0gcGFzdEZ1dHVyZTtcbnByb3RvJDEuc2V0ICAgICAgICAgICAgID0gc2V0O1xuXG4vLyBNb250aFxucHJvdG8kMS5tb250aHMgICAgICAgICAgICA9ICAgICAgICBsb2NhbGVNb250aHM7XG5wcm90byQxLm1vbnRoc1Nob3J0ICAgICAgID0gICAgICAgIGxvY2FsZU1vbnRoc1Nob3J0O1xucHJvdG8kMS5tb250aHNQYXJzZSAgICAgICA9ICAgICAgICBsb2NhbGVNb250aHNQYXJzZTtcbnByb3RvJDEubW9udGhzUmVnZXggICAgICAgPSBtb250aHNSZWdleDtcbnByb3RvJDEubW9udGhzU2hvcnRSZWdleCAgPSBtb250aHNTaG9ydFJlZ2V4O1xuXG4vLyBXZWVrXG5wcm90byQxLndlZWsgPSBsb2NhbGVXZWVrO1xucHJvdG8kMS5maXJzdERheU9mWWVhciA9IGxvY2FsZUZpcnN0RGF5T2ZZZWFyO1xucHJvdG8kMS5maXJzdERheU9mV2VlayA9IGxvY2FsZUZpcnN0RGF5T2ZXZWVrO1xuXG4vLyBEYXkgb2YgV2Vla1xucHJvdG8kMS53ZWVrZGF5cyAgICAgICA9ICAgICAgICBsb2NhbGVXZWVrZGF5cztcbnByb3RvJDEud2Vla2RheXNNaW4gICAgPSAgICAgICAgbG9jYWxlV2Vla2RheXNNaW47XG5wcm90byQxLndlZWtkYXlzU2hvcnQgID0gICAgICAgIGxvY2FsZVdlZWtkYXlzU2hvcnQ7XG5wcm90byQxLndlZWtkYXlzUGFyc2UgID0gICAgICAgIGxvY2FsZVdlZWtkYXlzUGFyc2U7XG5cbnByb3RvJDEud2Vla2RheXNSZWdleCAgICAgICA9ICAgICAgICB3ZWVrZGF5c1JlZ2V4O1xucHJvdG8kMS53ZWVrZGF5c1Nob3J0UmVnZXggID0gICAgICAgIHdlZWtkYXlzU2hvcnRSZWdleDtcbnByb3RvJDEud2Vla2RheXNNaW5SZWdleCAgICA9ICAgICAgICB3ZWVrZGF5c01pblJlZ2V4O1xuXG4vLyBIb3Vyc1xucHJvdG8kMS5pc1BNID0gbG9jYWxlSXNQTTtcbnByb3RvJDEubWVyaWRpZW0gPSBsb2NhbGVNZXJpZGllbTtcblxuZnVuY3Rpb24gZ2V0JDEgKGZvcm1hdCwgaW5kZXgsIGZpZWxkLCBzZXR0ZXIpIHtcbiAgICB2YXIgbG9jYWxlID0gZ2V0TG9jYWxlKCk7XG4gICAgdmFyIHV0YyA9IGNyZWF0ZVVUQygpLnNldChzZXR0ZXIsIGluZGV4KTtcbiAgICByZXR1cm4gbG9jYWxlW2ZpZWxkXSh1dGMsIGZvcm1hdCk7XG59XG5cbmZ1bmN0aW9uIGxpc3RNb250aHNJbXBsIChmb3JtYXQsIGluZGV4LCBmaWVsZCkge1xuICAgIGlmIChpc051bWJlcihmb3JtYXQpKSB7XG4gICAgICAgIGluZGV4ID0gZm9ybWF0O1xuICAgICAgICBmb3JtYXQgPSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgZm9ybWF0ID0gZm9ybWF0IHx8ICcnO1xuXG4gICAgaWYgKGluZGV4ICE9IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGdldCQxKGZvcm1hdCwgaW5kZXgsIGZpZWxkLCAnbW9udGgnKTtcbiAgICB9XG5cbiAgICB2YXIgaTtcbiAgICB2YXIgb3V0ID0gW107XG4gICAgZm9yIChpID0gMDsgaSA8IDEyOyBpKyspIHtcbiAgICAgICAgb3V0W2ldID0gZ2V0JDEoZm9ybWF0LCBpLCBmaWVsZCwgJ21vbnRoJyk7XG4gICAgfVxuICAgIHJldHVybiBvdXQ7XG59XG5cbi8vICgpXG4vLyAoNSlcbi8vIChmbXQsIDUpXG4vLyAoZm10KVxuLy8gKHRydWUpXG4vLyAodHJ1ZSwgNSlcbi8vICh0cnVlLCBmbXQsIDUpXG4vLyAodHJ1ZSwgZm10KVxuZnVuY3Rpb24gbGlzdFdlZWtkYXlzSW1wbCAobG9jYWxlU29ydGVkLCBmb3JtYXQsIGluZGV4LCBmaWVsZCkge1xuICAgIGlmICh0eXBlb2YgbG9jYWxlU29ydGVkID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgaWYgKGlzTnVtYmVyKGZvcm1hdCkpIHtcbiAgICAgICAgICAgIGluZGV4ID0gZm9ybWF0O1xuICAgICAgICAgICAgZm9ybWF0ID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9ybWF0ID0gZm9ybWF0IHx8ICcnO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGZvcm1hdCA9IGxvY2FsZVNvcnRlZDtcbiAgICAgICAgaW5kZXggPSBmb3JtYXQ7XG4gICAgICAgIGxvY2FsZVNvcnRlZCA9IGZhbHNlO1xuXG4gICAgICAgIGlmIChpc051bWJlcihmb3JtYXQpKSB7XG4gICAgICAgICAgICBpbmRleCA9IGZvcm1hdDtcbiAgICAgICAgICAgIGZvcm1hdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvcm1hdCA9IGZvcm1hdCB8fCAnJztcbiAgICB9XG5cbiAgICB2YXIgbG9jYWxlID0gZ2V0TG9jYWxlKCksXG4gICAgICAgIHNoaWZ0ID0gbG9jYWxlU29ydGVkID8gbG9jYWxlLl93ZWVrLmRvdyA6IDA7XG5cbiAgICBpZiAoaW5kZXggIT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gZ2V0JDEoZm9ybWF0LCAoaW5kZXggKyBzaGlmdCkgJSA3LCBmaWVsZCwgJ2RheScpO1xuICAgIH1cblxuICAgIHZhciBpO1xuICAgIHZhciBvdXQgPSBbXTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgNzsgaSsrKSB7XG4gICAgICAgIG91dFtpXSA9IGdldCQxKGZvcm1hdCwgKGkgKyBzaGlmdCkgJSA3LCBmaWVsZCwgJ2RheScpO1xuICAgIH1cbiAgICByZXR1cm4gb3V0O1xufVxuXG5mdW5jdGlvbiBsaXN0TW9udGhzIChmb3JtYXQsIGluZGV4KSB7XG4gICAgcmV0dXJuIGxpc3RNb250aHNJbXBsKGZvcm1hdCwgaW5kZXgsICdtb250aHMnKTtcbn1cblxuZnVuY3Rpb24gbGlzdE1vbnRoc1Nob3J0IChmb3JtYXQsIGluZGV4KSB7XG4gICAgcmV0dXJuIGxpc3RNb250aHNJbXBsKGZvcm1hdCwgaW5kZXgsICdtb250aHNTaG9ydCcpO1xufVxuXG5mdW5jdGlvbiBsaXN0V2Vla2RheXMgKGxvY2FsZVNvcnRlZCwgZm9ybWF0LCBpbmRleCkge1xuICAgIHJldHVybiBsaXN0V2Vla2RheXNJbXBsKGxvY2FsZVNvcnRlZCwgZm9ybWF0LCBpbmRleCwgJ3dlZWtkYXlzJyk7XG59XG5cbmZ1bmN0aW9uIGxpc3RXZWVrZGF5c1Nob3J0IChsb2NhbGVTb3J0ZWQsIGZvcm1hdCwgaW5kZXgpIHtcbiAgICByZXR1cm4gbGlzdFdlZWtkYXlzSW1wbChsb2NhbGVTb3J0ZWQsIGZvcm1hdCwgaW5kZXgsICd3ZWVrZGF5c1Nob3J0Jyk7XG59XG5cbmZ1bmN0aW9uIGxpc3RXZWVrZGF5c01pbiAobG9jYWxlU29ydGVkLCBmb3JtYXQsIGluZGV4KSB7XG4gICAgcmV0dXJuIGxpc3RXZWVrZGF5c0ltcGwobG9jYWxlU29ydGVkLCBmb3JtYXQsIGluZGV4LCAnd2Vla2RheXNNaW4nKTtcbn1cblxuZ2V0U2V0R2xvYmFsTG9jYWxlKCdlbicsIHtcbiAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0odGh8c3R8bmR8cmQpLyxcbiAgICBvcmRpbmFsIDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICB2YXIgYiA9IG51bWJlciAlIDEwLFxuICAgICAgICAgICAgb3V0cHV0ID0gKHRvSW50KG51bWJlciAlIDEwMCAvIDEwKSA9PT0gMSkgPyAndGgnIDpcbiAgICAgICAgICAgIChiID09PSAxKSA/ICdzdCcgOlxuICAgICAgICAgICAgKGIgPT09IDIpID8gJ25kJyA6XG4gICAgICAgICAgICAoYiA9PT0gMykgPyAncmQnIDogJ3RoJztcbiAgICAgICAgcmV0dXJuIG51bWJlciArIG91dHB1dDtcbiAgICB9XG59KTtcblxuLy8gU2lkZSBlZmZlY3QgaW1wb3J0c1xuaG9va3MubGFuZyA9IGRlcHJlY2F0ZSgnbW9tZW50LmxhbmcgaXMgZGVwcmVjYXRlZC4gVXNlIG1vbWVudC5sb2NhbGUgaW5zdGVhZC4nLCBnZXRTZXRHbG9iYWxMb2NhbGUpO1xuaG9va3MubGFuZ0RhdGEgPSBkZXByZWNhdGUoJ21vbWVudC5sYW5nRGF0YSBpcyBkZXByZWNhdGVkLiBVc2UgbW9tZW50LmxvY2FsZURhdGEgaW5zdGVhZC4nLCBnZXRMb2NhbGUpO1xuXG52YXIgbWF0aEFicyA9IE1hdGguYWJzO1xuXG5mdW5jdGlvbiBhYnMgKCkge1xuICAgIHZhciBkYXRhICAgICAgICAgICA9IHRoaXMuX2RhdGE7XG5cbiAgICB0aGlzLl9taWxsaXNlY29uZHMgPSBtYXRoQWJzKHRoaXMuX21pbGxpc2Vjb25kcyk7XG4gICAgdGhpcy5fZGF5cyAgICAgICAgID0gbWF0aEFicyh0aGlzLl9kYXlzKTtcbiAgICB0aGlzLl9tb250aHMgICAgICAgPSBtYXRoQWJzKHRoaXMuX21vbnRocyk7XG5cbiAgICBkYXRhLm1pbGxpc2Vjb25kcyAgPSBtYXRoQWJzKGRhdGEubWlsbGlzZWNvbmRzKTtcbiAgICBkYXRhLnNlY29uZHMgICAgICAgPSBtYXRoQWJzKGRhdGEuc2Vjb25kcyk7XG4gICAgZGF0YS5taW51dGVzICAgICAgID0gbWF0aEFicyhkYXRhLm1pbnV0ZXMpO1xuICAgIGRhdGEuaG91cnMgICAgICAgICA9IG1hdGhBYnMoZGF0YS5ob3Vycyk7XG4gICAgZGF0YS5tb250aHMgICAgICAgID0gbWF0aEFicyhkYXRhLm1vbnRocyk7XG4gICAgZGF0YS55ZWFycyAgICAgICAgID0gbWF0aEFicyhkYXRhLnllYXJzKTtcblxuICAgIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiBhZGRTdWJ0cmFjdCQxIChkdXJhdGlvbiwgaW5wdXQsIHZhbHVlLCBkaXJlY3Rpb24pIHtcbiAgICB2YXIgb3RoZXIgPSBjcmVhdGVEdXJhdGlvbihpbnB1dCwgdmFsdWUpO1xuXG4gICAgZHVyYXRpb24uX21pbGxpc2Vjb25kcyArPSBkaXJlY3Rpb24gKiBvdGhlci5fbWlsbGlzZWNvbmRzO1xuICAgIGR1cmF0aW9uLl9kYXlzICAgICAgICAgKz0gZGlyZWN0aW9uICogb3RoZXIuX2RheXM7XG4gICAgZHVyYXRpb24uX21vbnRocyAgICAgICArPSBkaXJlY3Rpb24gKiBvdGhlci5fbW9udGhzO1xuXG4gICAgcmV0dXJuIGR1cmF0aW9uLl9idWJibGUoKTtcbn1cblxuLy8gc3VwcG9ydHMgb25seSAyLjAtc3R5bGUgYWRkKDEsICdzJykgb3IgYWRkKGR1cmF0aW9uKVxuZnVuY3Rpb24gYWRkJDEgKGlucHV0LCB2YWx1ZSkge1xuICAgIHJldHVybiBhZGRTdWJ0cmFjdCQxKHRoaXMsIGlucHV0LCB2YWx1ZSwgMSk7XG59XG5cbi8vIHN1cHBvcnRzIG9ubHkgMi4wLXN0eWxlIHN1YnRyYWN0KDEsICdzJykgb3Igc3VidHJhY3QoZHVyYXRpb24pXG5mdW5jdGlvbiBzdWJ0cmFjdCQxIChpbnB1dCwgdmFsdWUpIHtcbiAgICByZXR1cm4gYWRkU3VidHJhY3QkMSh0aGlzLCBpbnB1dCwgdmFsdWUsIC0xKTtcbn1cblxuZnVuY3Rpb24gYWJzQ2VpbCAobnVtYmVyKSB7XG4gICAgaWYgKG51bWJlciA8IDApIHtcbiAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IobnVtYmVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gTWF0aC5jZWlsKG51bWJlcik7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBidWJibGUgKCkge1xuICAgIHZhciBtaWxsaXNlY29uZHMgPSB0aGlzLl9taWxsaXNlY29uZHM7XG4gICAgdmFyIGRheXMgICAgICAgICA9IHRoaXMuX2RheXM7XG4gICAgdmFyIG1vbnRocyAgICAgICA9IHRoaXMuX21vbnRocztcbiAgICB2YXIgZGF0YSAgICAgICAgID0gdGhpcy5fZGF0YTtcbiAgICB2YXIgc2Vjb25kcywgbWludXRlcywgaG91cnMsIHllYXJzLCBtb250aHNGcm9tRGF5cztcblxuICAgIC8vIGlmIHdlIGhhdmUgYSBtaXggb2YgcG9zaXRpdmUgYW5kIG5lZ2F0aXZlIHZhbHVlcywgYnViYmxlIGRvd24gZmlyc3RcbiAgICAvLyBjaGVjazogaHR0cHM6Ly9naXRodWIuY29tL21vbWVudC9tb21lbnQvaXNzdWVzLzIxNjZcbiAgICBpZiAoISgobWlsbGlzZWNvbmRzID49IDAgJiYgZGF5cyA+PSAwICYmIG1vbnRocyA+PSAwKSB8fFxuICAgICAgICAgICAgKG1pbGxpc2Vjb25kcyA8PSAwICYmIGRheXMgPD0gMCAmJiBtb250aHMgPD0gMCkpKSB7XG4gICAgICAgIG1pbGxpc2Vjb25kcyArPSBhYnNDZWlsKG1vbnRoc1RvRGF5cyhtb250aHMpICsgZGF5cykgKiA4NjRlNTtcbiAgICAgICAgZGF5cyA9IDA7XG4gICAgICAgIG1vbnRocyA9IDA7XG4gICAgfVxuXG4gICAgLy8gVGhlIGZvbGxvd2luZyBjb2RlIGJ1YmJsZXMgdXAgdmFsdWVzLCBzZWUgdGhlIHRlc3RzIGZvclxuICAgIC8vIGV4YW1wbGVzIG9mIHdoYXQgdGhhdCBtZWFucy5cbiAgICBkYXRhLm1pbGxpc2Vjb25kcyA9IG1pbGxpc2Vjb25kcyAlIDEwMDA7XG5cbiAgICBzZWNvbmRzICAgICAgICAgICA9IGFic0Zsb29yKG1pbGxpc2Vjb25kcyAvIDEwMDApO1xuICAgIGRhdGEuc2Vjb25kcyAgICAgID0gc2Vjb25kcyAlIDYwO1xuXG4gICAgbWludXRlcyAgICAgICAgICAgPSBhYnNGbG9vcihzZWNvbmRzIC8gNjApO1xuICAgIGRhdGEubWludXRlcyAgICAgID0gbWludXRlcyAlIDYwO1xuXG4gICAgaG91cnMgICAgICAgICAgICAgPSBhYnNGbG9vcihtaW51dGVzIC8gNjApO1xuICAgIGRhdGEuaG91cnMgICAgICAgID0gaG91cnMgJSAyNDtcblxuICAgIGRheXMgKz0gYWJzRmxvb3IoaG91cnMgLyAyNCk7XG5cbiAgICAvLyBjb252ZXJ0IGRheXMgdG8gbW9udGhzXG4gICAgbW9udGhzRnJvbURheXMgPSBhYnNGbG9vcihkYXlzVG9Nb250aHMoZGF5cykpO1xuICAgIG1vbnRocyArPSBtb250aHNGcm9tRGF5cztcbiAgICBkYXlzIC09IGFic0NlaWwobW9udGhzVG9EYXlzKG1vbnRoc0Zyb21EYXlzKSk7XG5cbiAgICAvLyAxMiBtb250aHMgLT4gMSB5ZWFyXG4gICAgeWVhcnMgPSBhYnNGbG9vcihtb250aHMgLyAxMik7XG4gICAgbW9udGhzICU9IDEyO1xuXG4gICAgZGF0YS5kYXlzICAgPSBkYXlzO1xuICAgIGRhdGEubW9udGhzID0gbW9udGhzO1xuICAgIGRhdGEueWVhcnMgID0geWVhcnM7XG5cbiAgICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gZGF5c1RvTW9udGhzIChkYXlzKSB7XG4gICAgLy8gNDAwIHllYXJzIGhhdmUgMTQ2MDk3IGRheXMgKHRha2luZyBpbnRvIGFjY291bnQgbGVhcCB5ZWFyIHJ1bGVzKVxuICAgIC8vIDQwMCB5ZWFycyBoYXZlIDEyIG1vbnRocyA9PT0gNDgwMFxuICAgIHJldHVybiBkYXlzICogNDgwMCAvIDE0NjA5Nztcbn1cblxuZnVuY3Rpb24gbW9udGhzVG9EYXlzIChtb250aHMpIHtcbiAgICAvLyB0aGUgcmV2ZXJzZSBvZiBkYXlzVG9Nb250aHNcbiAgICByZXR1cm4gbW9udGhzICogMTQ2MDk3IC8gNDgwMDtcbn1cblxuZnVuY3Rpb24gYXMgKHVuaXRzKSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICByZXR1cm4gTmFOO1xuICAgIH1cbiAgICB2YXIgZGF5cztcbiAgICB2YXIgbW9udGhzO1xuICAgIHZhciBtaWxsaXNlY29uZHMgPSB0aGlzLl9taWxsaXNlY29uZHM7XG5cbiAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKTtcblxuICAgIGlmICh1bml0cyA9PT0gJ21vbnRoJyB8fCB1bml0cyA9PT0gJ3llYXInKSB7XG4gICAgICAgIGRheXMgICA9IHRoaXMuX2RheXMgICArIG1pbGxpc2Vjb25kcyAvIDg2NGU1O1xuICAgICAgICBtb250aHMgPSB0aGlzLl9tb250aHMgKyBkYXlzVG9Nb250aHMoZGF5cyk7XG4gICAgICAgIHJldHVybiB1bml0cyA9PT0gJ21vbnRoJyA/IG1vbnRocyA6IG1vbnRocyAvIDEyO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGhhbmRsZSBtaWxsaXNlY29uZHMgc2VwYXJhdGVseSBiZWNhdXNlIG9mIGZsb2F0aW5nIHBvaW50IG1hdGggZXJyb3JzIChpc3N1ZSAjMTg2NylcbiAgICAgICAgZGF5cyA9IHRoaXMuX2RheXMgKyBNYXRoLnJvdW5kKG1vbnRoc1RvRGF5cyh0aGlzLl9tb250aHMpKTtcbiAgICAgICAgc3dpdGNoICh1bml0cykge1xuICAgICAgICAgICAgY2FzZSAnd2VlaycgICA6IHJldHVybiBkYXlzIC8gNyAgICAgKyBtaWxsaXNlY29uZHMgLyA2MDQ4ZTU7XG4gICAgICAgICAgICBjYXNlICdkYXknICAgIDogcmV0dXJuIGRheXMgICAgICAgICArIG1pbGxpc2Vjb25kcyAvIDg2NGU1O1xuICAgICAgICAgICAgY2FzZSAnaG91cicgICA6IHJldHVybiBkYXlzICogMjQgICAgKyBtaWxsaXNlY29uZHMgLyAzNmU1O1xuICAgICAgICAgICAgY2FzZSAnbWludXRlJyA6IHJldHVybiBkYXlzICogMTQ0MCAgKyBtaWxsaXNlY29uZHMgLyA2ZTQ7XG4gICAgICAgICAgICBjYXNlICdzZWNvbmQnIDogcmV0dXJuIGRheXMgKiA4NjQwMCArIG1pbGxpc2Vjb25kcyAvIDEwMDA7XG4gICAgICAgICAgICAvLyBNYXRoLmZsb29yIHByZXZlbnRzIGZsb2F0aW5nIHBvaW50IG1hdGggZXJyb3JzIGhlcmVcbiAgICAgICAgICAgIGNhc2UgJ21pbGxpc2Vjb25kJzogcmV0dXJuIE1hdGguZmxvb3IoZGF5cyAqIDg2NGU1KSArIG1pbGxpc2Vjb25kcztcbiAgICAgICAgICAgIGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvcignVW5rbm93biB1bml0ICcgKyB1bml0cyk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8vIFRPRE86IFVzZSB0aGlzLmFzKCdtcycpP1xuZnVuY3Rpb24gdmFsdWVPZiQxICgpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgIHJldHVybiBOYU47XG4gICAgfVxuICAgIHJldHVybiAoXG4gICAgICAgIHRoaXMuX21pbGxpc2Vjb25kcyArXG4gICAgICAgIHRoaXMuX2RheXMgKiA4NjRlNSArXG4gICAgICAgICh0aGlzLl9tb250aHMgJSAxMikgKiAyNTkyZTYgK1xuICAgICAgICB0b0ludCh0aGlzLl9tb250aHMgLyAxMikgKiAzMTUzNmU2XG4gICAgKTtcbn1cblxuZnVuY3Rpb24gbWFrZUFzIChhbGlhcykge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFzKGFsaWFzKTtcbiAgICB9O1xufVxuXG52YXIgYXNNaWxsaXNlY29uZHMgPSBtYWtlQXMoJ21zJyk7XG52YXIgYXNTZWNvbmRzICAgICAgPSBtYWtlQXMoJ3MnKTtcbnZhciBhc01pbnV0ZXMgICAgICA9IG1ha2VBcygnbScpO1xudmFyIGFzSG91cnMgICAgICAgID0gbWFrZUFzKCdoJyk7XG52YXIgYXNEYXlzICAgICAgICAgPSBtYWtlQXMoJ2QnKTtcbnZhciBhc1dlZWtzICAgICAgICA9IG1ha2VBcygndycpO1xudmFyIGFzTW9udGhzICAgICAgID0gbWFrZUFzKCdNJyk7XG52YXIgYXNZZWFycyAgICAgICAgPSBtYWtlQXMoJ3knKTtcblxuZnVuY3Rpb24gZ2V0JDIgKHVuaXRzKSB7XG4gICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cyk7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCgpID8gdGhpc1t1bml0cyArICdzJ10oKSA6IE5hTjtcbn1cblxuZnVuY3Rpb24gbWFrZUdldHRlcihuYW1lKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNWYWxpZCgpID8gdGhpcy5fZGF0YVtuYW1lXSA6IE5hTjtcbiAgICB9O1xufVxuXG52YXIgbWlsbGlzZWNvbmRzID0gbWFrZUdldHRlcignbWlsbGlzZWNvbmRzJyk7XG52YXIgc2Vjb25kcyAgICAgID0gbWFrZUdldHRlcignc2Vjb25kcycpO1xudmFyIG1pbnV0ZXMgICAgICA9IG1ha2VHZXR0ZXIoJ21pbnV0ZXMnKTtcbnZhciBob3VycyAgICAgICAgPSBtYWtlR2V0dGVyKCdob3VycycpO1xudmFyIGRheXMgICAgICAgICA9IG1ha2VHZXR0ZXIoJ2RheXMnKTtcbnZhciBtb250aHMgICAgICAgPSBtYWtlR2V0dGVyKCdtb250aHMnKTtcbnZhciB5ZWFycyAgICAgICAgPSBtYWtlR2V0dGVyKCd5ZWFycycpO1xuXG5mdW5jdGlvbiB3ZWVrcyAoKSB7XG4gICAgcmV0dXJuIGFic0Zsb29yKHRoaXMuZGF5cygpIC8gNyk7XG59XG5cbnZhciByb3VuZCA9IE1hdGgucm91bmQ7XG52YXIgdGhyZXNob2xkcyA9IHtcbiAgICBzczogNDQsICAgICAgICAgLy8gYSBmZXcgc2Vjb25kcyB0byBzZWNvbmRzXG4gICAgcyA6IDQ1LCAgICAgICAgIC8vIHNlY29uZHMgdG8gbWludXRlXG4gICAgbSA6IDQ1LCAgICAgICAgIC8vIG1pbnV0ZXMgdG8gaG91clxuICAgIGggOiAyMiwgICAgICAgICAvLyBob3VycyB0byBkYXlcbiAgICBkIDogMjYsICAgICAgICAgLy8gZGF5cyB0byBtb250aFxuICAgIE0gOiAxMSAgICAgICAgICAvLyBtb250aHMgdG8geWVhclxufTtcblxuLy8gaGVscGVyIGZ1bmN0aW9uIGZvciBtb21lbnQuZm4uZnJvbSwgbW9tZW50LmZuLmZyb21Ob3csIGFuZCBtb21lbnQuZHVyYXRpb24uZm4uaHVtYW5pemVcbmZ1bmN0aW9uIHN1YnN0aXR1dGVUaW1lQWdvKHN0cmluZywgbnVtYmVyLCB3aXRob3V0U3VmZml4LCBpc0Z1dHVyZSwgbG9jYWxlKSB7XG4gICAgcmV0dXJuIGxvY2FsZS5yZWxhdGl2ZVRpbWUobnVtYmVyIHx8IDEsICEhd2l0aG91dFN1ZmZpeCwgc3RyaW5nLCBpc0Z1dHVyZSk7XG59XG5cbmZ1bmN0aW9uIHJlbGF0aXZlVGltZSQxIChwb3NOZWdEdXJhdGlvbiwgd2l0aG91dFN1ZmZpeCwgbG9jYWxlKSB7XG4gICAgdmFyIGR1cmF0aW9uID0gY3JlYXRlRHVyYXRpb24ocG9zTmVnRHVyYXRpb24pLmFicygpO1xuICAgIHZhciBzZWNvbmRzICA9IHJvdW5kKGR1cmF0aW9uLmFzKCdzJykpO1xuICAgIHZhciBtaW51dGVzICA9IHJvdW5kKGR1cmF0aW9uLmFzKCdtJykpO1xuICAgIHZhciBob3VycyAgICA9IHJvdW5kKGR1cmF0aW9uLmFzKCdoJykpO1xuICAgIHZhciBkYXlzICAgICA9IHJvdW5kKGR1cmF0aW9uLmFzKCdkJykpO1xuICAgIHZhciBtb250aHMgICA9IHJvdW5kKGR1cmF0aW9uLmFzKCdNJykpO1xuICAgIHZhciB5ZWFycyAgICA9IHJvdW5kKGR1cmF0aW9uLmFzKCd5JykpO1xuXG4gICAgdmFyIGEgPSBzZWNvbmRzIDw9IHRocmVzaG9sZHMuc3MgJiYgWydzJywgc2Vjb25kc10gIHx8XG4gICAgICAgICAgICBzZWNvbmRzIDwgdGhyZXNob2xkcy5zICAgJiYgWydzcycsIHNlY29uZHNdIHx8XG4gICAgICAgICAgICBtaW51dGVzIDw9IDEgICAgICAgICAgICAgJiYgWydtJ10gICAgICAgICAgIHx8XG4gICAgICAgICAgICBtaW51dGVzIDwgdGhyZXNob2xkcy5tICAgJiYgWydtbScsIG1pbnV0ZXNdIHx8XG4gICAgICAgICAgICBob3VycyAgIDw9IDEgICAgICAgICAgICAgJiYgWydoJ10gICAgICAgICAgIHx8XG4gICAgICAgICAgICBob3VycyAgIDwgdGhyZXNob2xkcy5oICAgJiYgWydoaCcsIGhvdXJzXSAgIHx8XG4gICAgICAgICAgICBkYXlzICAgIDw9IDEgICAgICAgICAgICAgJiYgWydkJ10gICAgICAgICAgIHx8XG4gICAgICAgICAgICBkYXlzICAgIDwgdGhyZXNob2xkcy5kICAgJiYgWydkZCcsIGRheXNdICAgIHx8XG4gICAgICAgICAgICBtb250aHMgIDw9IDEgICAgICAgICAgICAgJiYgWydNJ10gICAgICAgICAgIHx8XG4gICAgICAgICAgICBtb250aHMgIDwgdGhyZXNob2xkcy5NICAgJiYgWydNTScsIG1vbnRoc10gIHx8XG4gICAgICAgICAgICB5ZWFycyAgIDw9IDEgICAgICAgICAgICAgJiYgWyd5J10gICAgICAgICAgIHx8IFsneXknLCB5ZWFyc107XG5cbiAgICBhWzJdID0gd2l0aG91dFN1ZmZpeDtcbiAgICBhWzNdID0gK3Bvc05lZ0R1cmF0aW9uID4gMDtcbiAgICBhWzRdID0gbG9jYWxlO1xuICAgIHJldHVybiBzdWJzdGl0dXRlVGltZUFnby5hcHBseShudWxsLCBhKTtcbn1cblxuLy8gVGhpcyBmdW5jdGlvbiBhbGxvd3MgeW91IHRvIHNldCB0aGUgcm91bmRpbmcgZnVuY3Rpb24gZm9yIHJlbGF0aXZlIHRpbWUgc3RyaW5nc1xuZnVuY3Rpb24gZ2V0U2V0UmVsYXRpdmVUaW1lUm91bmRpbmcgKHJvdW5kaW5nRnVuY3Rpb24pIHtcbiAgICBpZiAocm91bmRpbmdGdW5jdGlvbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiByb3VuZDtcbiAgICB9XG4gICAgaWYgKHR5cGVvZihyb3VuZGluZ0Z1bmN0aW9uKSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByb3VuZCA9IHJvdW5kaW5nRnVuY3Rpb247XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbi8vIFRoaXMgZnVuY3Rpb24gYWxsb3dzIHlvdSB0byBzZXQgYSB0aHJlc2hvbGQgZm9yIHJlbGF0aXZlIHRpbWUgc3RyaW5nc1xuZnVuY3Rpb24gZ2V0U2V0UmVsYXRpdmVUaW1lVGhyZXNob2xkICh0aHJlc2hvbGQsIGxpbWl0KSB7XG4gICAgaWYgKHRocmVzaG9sZHNbdGhyZXNob2xkXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKGxpbWl0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHRocmVzaG9sZHNbdGhyZXNob2xkXTtcbiAgICB9XG4gICAgdGhyZXNob2xkc1t0aHJlc2hvbGRdID0gbGltaXQ7XG4gICAgaWYgKHRocmVzaG9sZCA9PT0gJ3MnKSB7XG4gICAgICAgIHRocmVzaG9sZHMuc3MgPSBsaW1pdCAtIDE7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBodW1hbml6ZSAod2l0aFN1ZmZpeCkge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLmludmFsaWREYXRlKCk7XG4gICAgfVxuXG4gICAgdmFyIGxvY2FsZSA9IHRoaXMubG9jYWxlRGF0YSgpO1xuICAgIHZhciBvdXRwdXQgPSByZWxhdGl2ZVRpbWUkMSh0aGlzLCAhd2l0aFN1ZmZpeCwgbG9jYWxlKTtcblxuICAgIGlmICh3aXRoU3VmZml4KSB7XG4gICAgICAgIG91dHB1dCA9IGxvY2FsZS5wYXN0RnV0dXJlKCt0aGlzLCBvdXRwdXQpO1xuICAgIH1cblxuICAgIHJldHVybiBsb2NhbGUucG9zdGZvcm1hdChvdXRwdXQpO1xufVxuXG52YXIgYWJzJDEgPSBNYXRoLmFicztcblxuZnVuY3Rpb24gdG9JU09TdHJpbmckMSgpIHtcbiAgICAvLyBmb3IgSVNPIHN0cmluZ3Mgd2UgZG8gbm90IHVzZSB0aGUgbm9ybWFsIGJ1YmJsaW5nIHJ1bGVzOlxuICAgIC8vICAqIG1pbGxpc2Vjb25kcyBidWJibGUgdXAgdW50aWwgdGhleSBiZWNvbWUgaG91cnNcbiAgICAvLyAgKiBkYXlzIGRvIG5vdCBidWJibGUgYXQgYWxsXG4gICAgLy8gICogbW9udGhzIGJ1YmJsZSB1cCB1bnRpbCB0aGV5IGJlY29tZSB5ZWFyc1xuICAgIC8vIFRoaXMgaXMgYmVjYXVzZSB0aGVyZSBpcyBubyBjb250ZXh0LWZyZWUgY29udmVyc2lvbiBiZXR3ZWVuIGhvdXJzIGFuZCBkYXlzXG4gICAgLy8gKHRoaW5rIG9mIGNsb2NrIGNoYW5nZXMpXG4gICAgLy8gYW5kIGFsc28gbm90IGJldHdlZW4gZGF5cyBhbmQgbW9udGhzICgyOC0zMSBkYXlzIHBlciBtb250aClcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS5pbnZhbGlkRGF0ZSgpO1xuICAgIH1cblxuICAgIHZhciBzZWNvbmRzID0gYWJzJDEodGhpcy5fbWlsbGlzZWNvbmRzKSAvIDEwMDA7XG4gICAgdmFyIGRheXMgICAgICAgICA9IGFicyQxKHRoaXMuX2RheXMpO1xuICAgIHZhciBtb250aHMgICAgICAgPSBhYnMkMSh0aGlzLl9tb250aHMpO1xuICAgIHZhciBtaW51dGVzLCBob3VycywgeWVhcnM7XG5cbiAgICAvLyAzNjAwIHNlY29uZHMgLT4gNjAgbWludXRlcyAtPiAxIGhvdXJcbiAgICBtaW51dGVzICAgICAgICAgICA9IGFic0Zsb29yKHNlY29uZHMgLyA2MCk7XG4gICAgaG91cnMgICAgICAgICAgICAgPSBhYnNGbG9vcihtaW51dGVzIC8gNjApO1xuICAgIHNlY29uZHMgJT0gNjA7XG4gICAgbWludXRlcyAlPSA2MDtcblxuICAgIC8vIDEyIG1vbnRocyAtPiAxIHllYXJcbiAgICB5ZWFycyAgPSBhYnNGbG9vcihtb250aHMgLyAxMik7XG4gICAgbW9udGhzICU9IDEyO1xuXG5cbiAgICAvLyBpbnNwaXJlZCBieSBodHRwczovL2dpdGh1Yi5jb20vZG9yZGlsbGUvbW9tZW50LWlzb2R1cmF0aW9uL2Jsb2IvbWFzdGVyL21vbWVudC5pc29kdXJhdGlvbi5qc1xuICAgIHZhciBZID0geWVhcnM7XG4gICAgdmFyIE0gPSBtb250aHM7XG4gICAgdmFyIEQgPSBkYXlzO1xuICAgIHZhciBoID0gaG91cnM7XG4gICAgdmFyIG0gPSBtaW51dGVzO1xuICAgIHZhciBzID0gc2Vjb25kcztcbiAgICB2YXIgdG90YWwgPSB0aGlzLmFzU2Vjb25kcygpO1xuXG4gICAgaWYgKCF0b3RhbCkge1xuICAgICAgICAvLyB0aGlzIGlzIHRoZSBzYW1lIGFzIEMjJ3MgKE5vZGEpIGFuZCBweXRob24gKGlzb2RhdGUpLi4uXG4gICAgICAgIC8vIGJ1dCBub3Qgb3RoZXIgSlMgKGdvb2cuZGF0ZSlcbiAgICAgICAgcmV0dXJuICdQMEQnO1xuICAgIH1cblxuICAgIHJldHVybiAodG90YWwgPCAwID8gJy0nIDogJycpICtcbiAgICAgICAgJ1AnICtcbiAgICAgICAgKFkgPyBZICsgJ1knIDogJycpICtcbiAgICAgICAgKE0gPyBNICsgJ00nIDogJycpICtcbiAgICAgICAgKEQgPyBEICsgJ0QnIDogJycpICtcbiAgICAgICAgKChoIHx8IG0gfHwgcykgPyAnVCcgOiAnJykgK1xuICAgICAgICAoaCA/IGggKyAnSCcgOiAnJykgK1xuICAgICAgICAobSA/IG0gKyAnTScgOiAnJykgK1xuICAgICAgICAocyA/IHMgKyAnUycgOiAnJyk7XG59XG5cbnZhciBwcm90byQyID0gRHVyYXRpb24ucHJvdG90eXBlO1xuXG5wcm90byQyLmlzVmFsaWQgICAgICAgID0gaXNWYWxpZCQxO1xucHJvdG8kMi5hYnMgICAgICAgICAgICA9IGFicztcbnByb3RvJDIuYWRkICAgICAgICAgICAgPSBhZGQkMTtcbnByb3RvJDIuc3VidHJhY3QgICAgICAgPSBzdWJ0cmFjdCQxO1xucHJvdG8kMi5hcyAgICAgICAgICAgICA9IGFzO1xucHJvdG8kMi5hc01pbGxpc2Vjb25kcyA9IGFzTWlsbGlzZWNvbmRzO1xucHJvdG8kMi5hc1NlY29uZHMgICAgICA9IGFzU2Vjb25kcztcbnByb3RvJDIuYXNNaW51dGVzICAgICAgPSBhc01pbnV0ZXM7XG5wcm90byQyLmFzSG91cnMgICAgICAgID0gYXNIb3VycztcbnByb3RvJDIuYXNEYXlzICAgICAgICAgPSBhc0RheXM7XG5wcm90byQyLmFzV2Vla3MgICAgICAgID0gYXNXZWVrcztcbnByb3RvJDIuYXNNb250aHMgICAgICAgPSBhc01vbnRocztcbnByb3RvJDIuYXNZZWFycyAgICAgICAgPSBhc1llYXJzO1xucHJvdG8kMi52YWx1ZU9mICAgICAgICA9IHZhbHVlT2YkMTtcbnByb3RvJDIuX2J1YmJsZSAgICAgICAgPSBidWJibGU7XG5wcm90byQyLmdldCAgICAgICAgICAgID0gZ2V0JDI7XG5wcm90byQyLm1pbGxpc2Vjb25kcyAgID0gbWlsbGlzZWNvbmRzO1xucHJvdG8kMi5zZWNvbmRzICAgICAgICA9IHNlY29uZHM7XG5wcm90byQyLm1pbnV0ZXMgICAgICAgID0gbWludXRlcztcbnByb3RvJDIuaG91cnMgICAgICAgICAgPSBob3VycztcbnByb3RvJDIuZGF5cyAgICAgICAgICAgPSBkYXlzO1xucHJvdG8kMi53ZWVrcyAgICAgICAgICA9IHdlZWtzO1xucHJvdG8kMi5tb250aHMgICAgICAgICA9IG1vbnRocztcbnByb3RvJDIueWVhcnMgICAgICAgICAgPSB5ZWFycztcbnByb3RvJDIuaHVtYW5pemUgICAgICAgPSBodW1hbml6ZTtcbnByb3RvJDIudG9JU09TdHJpbmcgICAgPSB0b0lTT1N0cmluZyQxO1xucHJvdG8kMi50b1N0cmluZyAgICAgICA9IHRvSVNPU3RyaW5nJDE7XG5wcm90byQyLnRvSlNPTiAgICAgICAgID0gdG9JU09TdHJpbmckMTtcbnByb3RvJDIubG9jYWxlICAgICAgICAgPSBsb2NhbGU7XG5wcm90byQyLmxvY2FsZURhdGEgICAgID0gbG9jYWxlRGF0YTtcblxuLy8gRGVwcmVjYXRpb25zXG5wcm90byQyLnRvSXNvU3RyaW5nID0gZGVwcmVjYXRlKCd0b0lzb1N0cmluZygpIGlzIGRlcHJlY2F0ZWQuIFBsZWFzZSB1c2UgdG9JU09TdHJpbmcoKSBpbnN0ZWFkIChub3RpY2UgdGhlIGNhcGl0YWxzKScsIHRvSVNPU3RyaW5nJDEpO1xucHJvdG8kMi5sYW5nID0gbGFuZztcblxuLy8gU2lkZSBlZmZlY3QgaW1wb3J0c1xuXG4vLyBGT1JNQVRUSU5HXG5cbmFkZEZvcm1hdFRva2VuKCdYJywgMCwgMCwgJ3VuaXgnKTtcbmFkZEZvcm1hdFRva2VuKCd4JywgMCwgMCwgJ3ZhbHVlT2YnKTtcblxuLy8gUEFSU0lOR1xuXG5hZGRSZWdleFRva2VuKCd4JywgbWF0Y2hTaWduZWQpO1xuYWRkUmVnZXhUb2tlbignWCcsIG1hdGNoVGltZXN0YW1wKTtcbmFkZFBhcnNlVG9rZW4oJ1gnLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICBjb25maWcuX2QgPSBuZXcgRGF0ZShwYXJzZUZsb2F0KGlucHV0LCAxMCkgKiAxMDAwKTtcbn0pO1xuYWRkUGFyc2VUb2tlbigneCcsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgIGNvbmZpZy5fZCA9IG5ldyBEYXRlKHRvSW50KGlucHV0KSk7XG59KTtcblxuLy8gU2lkZSBlZmZlY3QgaW1wb3J0c1xuXG5cbmhvb2tzLnZlcnNpb24gPSAnMi4xOC4xJztcblxuc2V0SG9va0NhbGxiYWNrKGNyZWF0ZUxvY2FsKTtcblxuaG9va3MuZm4gICAgICAgICAgICAgICAgICAgID0gcHJvdG87XG5ob29rcy5taW4gICAgICAgICAgICAgICAgICAgPSBtaW47XG5ob29rcy5tYXggICAgICAgICAgICAgICAgICAgPSBtYXg7XG5ob29rcy5ub3cgICAgICAgICAgICAgICAgICAgPSBub3c7XG5ob29rcy51dGMgICAgICAgICAgICAgICAgICAgPSBjcmVhdGVVVEM7XG5ob29rcy51bml4ICAgICAgICAgICAgICAgICAgPSBjcmVhdGVVbml4O1xuaG9va3MubW9udGhzICAgICAgICAgICAgICAgID0gbGlzdE1vbnRocztcbmhvb2tzLmlzRGF0ZSAgICAgICAgICAgICAgICA9IGlzRGF0ZTtcbmhvb2tzLmxvY2FsZSAgICAgICAgICAgICAgICA9IGdldFNldEdsb2JhbExvY2FsZTtcbmhvb2tzLmludmFsaWQgICAgICAgICAgICAgICA9IGNyZWF0ZUludmFsaWQ7XG5ob29rcy5kdXJhdGlvbiAgICAgICAgICAgICAgPSBjcmVhdGVEdXJhdGlvbjtcbmhvb2tzLmlzTW9tZW50ICAgICAgICAgICAgICA9IGlzTW9tZW50O1xuaG9va3Mud2Vla2RheXMgICAgICAgICAgICAgID0gbGlzdFdlZWtkYXlzO1xuaG9va3MucGFyc2Vab25lICAgICAgICAgICAgID0gY3JlYXRlSW5ab25lO1xuaG9va3MubG9jYWxlRGF0YSAgICAgICAgICAgID0gZ2V0TG9jYWxlO1xuaG9va3MuaXNEdXJhdGlvbiAgICAgICAgICAgID0gaXNEdXJhdGlvbjtcbmhvb2tzLm1vbnRoc1Nob3J0ICAgICAgICAgICA9IGxpc3RNb250aHNTaG9ydDtcbmhvb2tzLndlZWtkYXlzTWluICAgICAgICAgICA9IGxpc3RXZWVrZGF5c01pbjtcbmhvb2tzLmRlZmluZUxvY2FsZSAgICAgICAgICA9IGRlZmluZUxvY2FsZTtcbmhvb2tzLnVwZGF0ZUxvY2FsZSAgICAgICAgICA9IHVwZGF0ZUxvY2FsZTtcbmhvb2tzLmxvY2FsZXMgICAgICAgICAgICAgICA9IGxpc3RMb2NhbGVzO1xuaG9va3Mud2Vla2RheXNTaG9ydCAgICAgICAgID0gbGlzdFdlZWtkYXlzU2hvcnQ7XG5ob29rcy5ub3JtYWxpemVVbml0cyAgICAgICAgPSBub3JtYWxpemVVbml0cztcbmhvb2tzLnJlbGF0aXZlVGltZVJvdW5kaW5nID0gZ2V0U2V0UmVsYXRpdmVUaW1lUm91bmRpbmc7XG5ob29rcy5yZWxhdGl2ZVRpbWVUaHJlc2hvbGQgPSBnZXRTZXRSZWxhdGl2ZVRpbWVUaHJlc2hvbGQ7XG5ob29rcy5jYWxlbmRhckZvcm1hdCAgICAgICAgPSBnZXRDYWxlbmRhckZvcm1hdDtcbmhvb2tzLnByb3RvdHlwZSAgICAgICAgICAgICA9IHByb3RvO1xuXG5yZXR1cm4gaG9va3M7XG5cbn0pKSk7XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBSZWFjdElzID0gcmVxdWlyZSgncmVhY3QtaXMnKTtcblxuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBkZXZlbG9wbWVudCBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICB2YXIgdGhyb3dPbkRpcmVjdEFjY2VzcyA9IHRydWU7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFR5cGVDaGVja2VycycpKFJlYWN0SXMuaXNFbGVtZW50LCB0aHJvd09uRGlyZWN0QWNjZXNzKTtcbn0gZWxzZSB7XG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IHByb2R1Y3Rpb24gYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcycpKCk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIm1vZHVsZS5leHBvcnRzID0ge1xuICBESVNQTEFZX0ZPUk1BVDogJ0wnLFxuICBJU09fRk9STUFUOiAnWVlZWS1NTS1ERCcsXG4gIElTT19NT05USF9GT1JNQVQ6ICdZWVlZLU1NJyxcblxuICBTVEFSVF9EQVRFOiAnc3RhcnREYXRlJyxcbiAgRU5EX0RBVEU6ICdlbmREYXRlJyxcblxuICBIT1JJWk9OVEFMX09SSUVOVEFUSU9OOiAnaG9yaXpvbnRhbCcsXG4gIFZFUlRJQ0FMX09SSUVOVEFUSU9OOiAndmVydGljYWwnLFxuICBWRVJUSUNBTF9TQ1JPTExBQkxFOiAndmVydGljYWxTY3JvbGxhYmxlJyxcblxuICBBTkNIT1JfTEVGVDogJ2xlZnQnLFxuICBBTkNIT1JfUklHSFQ6ICdyaWdodCcsXG5cbiAgREFZX1NJWkU6IDM5LFxuICBCTE9DS0VEX01PRElGSUVSOiAnYmxvY2tlZCcsXG4gIFdFRUtEQVlTOiBbMCwgMSwgMiwgMywgNCwgNSwgNl0sXG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogU2ltaWxhciB0byBpbnZhcmlhbnQgYnV0IG9ubHkgbG9ncyBhIHdhcm5pbmcgaWYgdGhlIGNvbmRpdGlvbiBpcyBub3QgbWV0LlxuICogVGhpcyBjYW4gYmUgdXNlZCB0byBsb2cgaXNzdWVzIGluIGRldmVsb3BtZW50IGVudmlyb25tZW50cyBpbiBjcml0aWNhbFxuICogcGF0aHMuIFJlbW92aW5nIHRoZSBsb2dnaW5nIGNvZGUgZm9yIHByb2R1Y3Rpb24gZW52aXJvbm1lbnRzIHdpbGwga2VlcCB0aGVcbiAqIHNhbWUgbG9naWMgYW5kIGZvbGxvdyB0aGUgc2FtZSBjb2RlIHBhdGhzLlxuICovXG5cbnZhciBfX0RFVl9fID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJztcblxudmFyIHdhcm5pbmcgPSBmdW5jdGlvbigpIHt9O1xuXG5pZiAoX19ERVZfXykge1xuICB2YXIgcHJpbnRXYXJuaW5nID0gZnVuY3Rpb24gcHJpbnRXYXJuaW5nKGZvcm1hdCwgYXJncykge1xuICAgIHZhciBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIGFyZ3MgPSBuZXcgQXJyYXkobGVuID4gMSA/IGxlbiAtIDEgOiAwKTtcbiAgICBmb3IgKHZhciBrZXkgPSAxOyBrZXkgPCBsZW47IGtleSsrKSB7XG4gICAgICBhcmdzW2tleSAtIDFdID0gYXJndW1lbnRzW2tleV07XG4gICAgfVxuICAgIHZhciBhcmdJbmRleCA9IDA7XG4gICAgdmFyIG1lc3NhZ2UgPSAnV2FybmluZzogJyArXG4gICAgICBmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBhcmdzW2FyZ0luZGV4KytdO1xuICAgICAgfSk7XG4gICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIC8vIC0tLSBXZWxjb21lIHRvIGRlYnVnZ2luZyBSZWFjdCAtLS1cbiAgICAgIC8vIFRoaXMgZXJyb3Igd2FzIHRocm93biBhcyBhIGNvbnZlbmllbmNlIHNvIHRoYXQgeW91IGNhbiB1c2UgdGhpcyBzdGFja1xuICAgICAgLy8gdG8gZmluZCB0aGUgY2FsbHNpdGUgdGhhdCBjYXVzZWQgdGhpcyB3YXJuaW5nIHRvIGZpcmUuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgfSBjYXRjaCAoeCkge31cbiAgfVxuXG4gIHdhcm5pbmcgPSBmdW5jdGlvbihjb25kaXRpb24sIGZvcm1hdCwgYXJncykge1xuICAgIHZhciBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIGFyZ3MgPSBuZXcgQXJyYXkobGVuID4gMiA/IGxlbiAtIDIgOiAwKTtcbiAgICBmb3IgKHZhciBrZXkgPSAyOyBrZXkgPCBsZW47IGtleSsrKSB7XG4gICAgICBhcmdzW2tleSAtIDJdID0gYXJndW1lbnRzW2tleV07XG4gICAgfVxuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICdgd2FybmluZyhjb25kaXRpb24sIGZvcm1hdCwgLi4uYXJncylgIHJlcXVpcmVzIGEgd2FybmluZyAnICtcbiAgICAgICAgICAnbWVzc2FnZSBhcmd1bWVudCdcbiAgICAgICk7XG4gICAgfVxuICAgIGlmICghY29uZGl0aW9uKSB7XG4gICAgICBwcmludFdhcm5pbmcuYXBwbHkobnVsbCwgW2Zvcm1hdF0uY29uY2F0KGFyZ3MpKTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gd2FybmluZztcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFVzZSBpbnZhcmlhbnQoKSB0byBhc3NlcnQgc3RhdGUgd2hpY2ggeW91ciBwcm9ncmFtIGFzc3VtZXMgdG8gYmUgdHJ1ZS5cbiAqXG4gKiBQcm92aWRlIHNwcmludGYtc3R5bGUgZm9ybWF0IChvbmx5ICVzIGlzIHN1cHBvcnRlZCkgYW5kIGFyZ3VtZW50c1xuICogdG8gcHJvdmlkZSBpbmZvcm1hdGlvbiBhYm91dCB3aGF0IGJyb2tlIGFuZCB3aGF0IHlvdSB3ZXJlXG4gKiBleHBlY3RpbmcuXG4gKlxuICogVGhlIGludmFyaWFudCBtZXNzYWdlIHdpbGwgYmUgc3RyaXBwZWQgaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBpbnZhcmlhbnRcbiAqIHdpbGwgcmVtYWluIHRvIGVuc3VyZSBsb2dpYyBkb2VzIG5vdCBkaWZmZXIgaW4gcHJvZHVjdGlvbi5cbiAqL1xuXG52YXIgaW52YXJpYW50ID0gZnVuY3Rpb24oY29uZGl0aW9uLCBmb3JtYXQsIGEsIGIsIGMsIGQsIGUsIGYpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignaW52YXJpYW50IHJlcXVpcmVzIGFuIGVycm9yIG1lc3NhZ2UgYXJndW1lbnQnKTtcbiAgICB9XG4gIH1cblxuICBpZiAoIWNvbmRpdGlvbikge1xuICAgIHZhciBlcnJvcjtcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGVycm9yID0gbmV3IEVycm9yKFxuICAgICAgICAnTWluaWZpZWQgZXhjZXB0aW9uIG9jY3VycmVkOyB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgJyArXG4gICAgICAgICdmb3IgdGhlIGZ1bGwgZXJyb3IgbWVzc2FnZSBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLidcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhcmdzID0gW2EsIGIsIGMsIGQsIGUsIGZdO1xuICAgICAgdmFyIGFyZ0luZGV4ID0gMDtcbiAgICAgIGVycm9yID0gbmV3IEVycm9yKFxuICAgICAgICBmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24oKSB7IHJldHVybiBhcmdzW2FyZ0luZGV4KytdOyB9KVxuICAgICAgKTtcbiAgICAgIGVycm9yLm5hbWUgPSAnSW52YXJpYW50IFZpb2xhdGlvbic7XG4gICAgfVxuXG4gICAgZXJyb3IuZnJhbWVzVG9Qb3AgPSAxOyAvLyB3ZSBkb24ndCBjYXJlIGFib3V0IGludmFyaWFudCdzIG93biBmcmFtZVxuICAgIHRocm93IGVycm9yO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGludmFyaWFudDtcbiIsIm1vZHVsZS5leHBvcnRzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJyA/IHJlcXVpcmUoJy4vYnVpbGQvbW9ja3MnKSA6IHJlcXVpcmUoJy4vYnVpbGQnKTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbnZhciBjbG9zZURhdGVQaWNrZXIgPSAnQ2xvc2UnO1xudmFyIGZvY3VzU3RhcnREYXRlID0gJ0ludGVyYWN0IHdpdGggdGhlIGNhbGVuZGFyIGFuZCBhZGQgdGhlIGNoZWNrLWluIGRhdGUgZm9yIHlvdXIgdHJpcC4nO1xudmFyIGNsZWFyRGF0ZSA9ICdDbGVhciBEYXRlJztcbnZhciBjbGVhckRhdGVzID0gJ0NsZWFyIERhdGVzJztcbnZhciBqdW1wVG9QcmV2TW9udGggPSAnTW92ZSBiYWNrd2FyZCB0byBzd2l0Y2ggdG8gdGhlIHByZXZpb3VzIG1vbnRoJztcbnZhciBqdW1wVG9OZXh0TW9udGggPSAnTW92ZSBmb3J3YXJkIHRvIHN3aXRjaCB0byB0aGUgbmV4dCBtb250aCc7XG52YXIga2V5Ym9hcmRTaG9ydGN1dHMgPSAnS2V5Ym9hcmQgU2hvcnRjdXRzJztcbnZhciBzaG93S2V5Ym9hcmRTaG9ydGN1dHNQYW5lbCA9ICdPcGVuIHRoZSBrZXlib2FyZCBzaG9ydGN1dHMgcGFuZWwnO1xudmFyIGhpZGVLZXlib2FyZFNob3J0Y3V0c1BhbmVsID0gJ0Nsb3NlIHRoZSBzaG9ydGN1dHMgcGFuZWwnO1xudmFyIG9wZW5UaGlzUGFuZWwgPSAnT3BlbiB0aGlzIHBhbmVsJztcbnZhciBlbnRlcktleSA9ICdFbnRlciBrZXknO1xudmFyIGxlZnRBcnJvd1JpZ2h0QXJyb3cgPSAnUmlnaHQgYW5kIGxlZnQgYXJyb3cga2V5cyc7XG52YXIgdXBBcnJvd0Rvd25BcnJvdyA9ICd1cCBhbmQgZG93biBhcnJvdyBrZXlzJztcbnZhciBwYWdlVXBQYWdlRG93biA9ICdwYWdlIHVwIGFuZCBwYWdlIGRvd24ga2V5cyc7XG52YXIgaG9tZUVuZCA9ICdIb21lIGFuZCBlbmQga2V5cyc7XG52YXIgZXNjYXBlID0gJ0VzY2FwZSBrZXknO1xudmFyIHF1ZXN0aW9uTWFyayA9ICdRdWVzdGlvbiBtYXJrJztcbnZhciBzZWxlY3RGb2N1c2VkRGF0ZSA9ICdTZWxlY3QgdGhlIGRhdGUgaW4gZm9jdXMnO1xudmFyIG1vdmVGb2N1c0J5T25lRGF5ID0gJ01vdmUgYmFja3dhcmQgKGxlZnQpIGFuZCBmb3J3YXJkIChyaWdodCkgYnkgb25lIGRheSc7XG52YXIgbW92ZUZvY3VzQnlPbmVXZWVrID0gJ01vdmUgYmFja3dhcmQgKHVwKSBhbmQgZm9yd2FyZCAoZG93bikgYnkgb25lIHdlZWsnO1xudmFyIG1vdmVGb2N1c0J5T25lTW9udGggPSAnU3dpdGNoIG1vbnRocyc7XG52YXIgbW92ZUZvY3VzdG9TdGFydEFuZEVuZE9mV2VlayA9ICdHbyB0byB0aGUgZmlyc3Qgb3IgbGFzdCBkYXkgb2YgYSB3ZWVrJztcbnZhciByZXR1cm5Gb2N1c1RvSW5wdXQgPSAnUmV0dXJuIHRvIHRoZSBkYXRlIGlucHV0IGZpZWxkJztcbnZhciBrZXlib2FyZE5hdmlnYXRpb25JbnN0cnVjdGlvbnMgPSAnUHJlc3MgdGhlIGRvd24gYXJyb3cga2V5IHRvIGludGVyYWN0IHdpdGggdGhlIGNhbGVuZGFyIGFuZFxcbiAgc2VsZWN0IGEgZGF0ZS4gUHJlc3MgdGhlIHF1ZXN0aW9uIG1hcmsga2V5IHRvIGdldCB0aGUga2V5Ym9hcmQgc2hvcnRjdXRzIGZvciBjaGFuZ2luZyBkYXRlcy4nO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2FtZWxjYXNlXG52YXIgY2hvb3NlQXZhaWxhYmxlU3RhcnREYXRlID0gZnVuY3Rpb24gY2hvb3NlQXZhaWxhYmxlU3RhcnREYXRlKF9yZWYpIHtcbiAgdmFyIGRhdGUgPSBfcmVmLmRhdGU7XG4gIHJldHVybiAnQ2hvb3NlICcgKyBTdHJpbmcoZGF0ZSkgKyAnIGFzIHlvdXIgY2hlY2staW4gZGF0ZS4gSXRcXCdzIGF2YWlsYWJsZS4nO1xufTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNhbWVsY2FzZVxudmFyIGNob29zZUF2YWlsYWJsZUVuZERhdGUgPSBmdW5jdGlvbiBjaG9vc2VBdmFpbGFibGVFbmREYXRlKF9yZWYyKSB7XG4gIHZhciBkYXRlID0gX3JlZjIuZGF0ZTtcbiAgcmV0dXJuICdDaG9vc2UgJyArIFN0cmluZyhkYXRlKSArICcgYXMgeW91ciBjaGVjay1vdXQgZGF0ZS4gSXRcXCdzIGF2YWlsYWJsZS4nO1xufTtcbnZhciBjaG9vc2VBdmFpbGFibGVEYXRlID0gZnVuY3Rpb24gY2hvb3NlQXZhaWxhYmxlRGF0ZShfcmVmMykge1xuICB2YXIgZGF0ZSA9IF9yZWYzLmRhdGU7XG4gIHJldHVybiBkYXRlO1xufTtcbnZhciBkYXRlSXNVbmF2YWlsYWJsZSA9IGZ1bmN0aW9uIGRhdGVJc1VuYXZhaWxhYmxlKF9yZWY0KSB7XG4gIHZhciBkYXRlID0gX3JlZjQuZGF0ZTtcbiAgcmV0dXJuICdOb3QgYXZhaWxhYmxlLiAnICsgU3RyaW5nKGRhdGUpO1xufTtcblxuZXhwb3J0c1snZGVmYXVsdCddID0ge1xuICBjbG9zZURhdGVQaWNrZXI6IGNsb3NlRGF0ZVBpY2tlcixcbiAgZm9jdXNTdGFydERhdGU6IGZvY3VzU3RhcnREYXRlLFxuICBjbGVhckRhdGU6IGNsZWFyRGF0ZSxcbiAgY2xlYXJEYXRlczogY2xlYXJEYXRlcyxcbiAganVtcFRvUHJldk1vbnRoOiBqdW1wVG9QcmV2TW9udGgsXG4gIGp1bXBUb05leHRNb250aDoganVtcFRvTmV4dE1vbnRoLFxuICBrZXlib2FyZFNob3J0Y3V0czoga2V5Ym9hcmRTaG9ydGN1dHMsXG4gIHNob3dLZXlib2FyZFNob3J0Y3V0c1BhbmVsOiBzaG93S2V5Ym9hcmRTaG9ydGN1dHNQYW5lbCxcbiAgaGlkZUtleWJvYXJkU2hvcnRjdXRzUGFuZWw6IGhpZGVLZXlib2FyZFNob3J0Y3V0c1BhbmVsLFxuICBvcGVuVGhpc1BhbmVsOiBvcGVuVGhpc1BhbmVsLFxuICBlbnRlcktleTogZW50ZXJLZXksXG4gIGxlZnRBcnJvd1JpZ2h0QXJyb3c6IGxlZnRBcnJvd1JpZ2h0QXJyb3csXG4gIHVwQXJyb3dEb3duQXJyb3c6IHVwQXJyb3dEb3duQXJyb3csXG4gIHBhZ2VVcFBhZ2VEb3duOiBwYWdlVXBQYWdlRG93bixcbiAgaG9tZUVuZDogaG9tZUVuZCxcbiAgZXNjYXBlOiBlc2NhcGUsXG4gIHF1ZXN0aW9uTWFyazogcXVlc3Rpb25NYXJrLFxuICBzZWxlY3RGb2N1c2VkRGF0ZTogc2VsZWN0Rm9jdXNlZERhdGUsXG4gIG1vdmVGb2N1c0J5T25lRGF5OiBtb3ZlRm9jdXNCeU9uZURheSxcbiAgbW92ZUZvY3VzQnlPbmVXZWVrOiBtb3ZlRm9jdXNCeU9uZVdlZWssXG4gIG1vdmVGb2N1c0J5T25lTW9udGg6IG1vdmVGb2N1c0J5T25lTW9udGgsXG4gIG1vdmVGb2N1c3RvU3RhcnRBbmRFbmRPZldlZWs6IG1vdmVGb2N1c3RvU3RhcnRBbmRFbmRPZldlZWssXG4gIHJldHVybkZvY3VzVG9JbnB1dDogcmV0dXJuRm9jdXNUb0lucHV0LFxuICBrZXlib2FyZE5hdmlnYXRpb25JbnN0cnVjdGlvbnM6IGtleWJvYXJkTmF2aWdhdGlvbkluc3RydWN0aW9ucyxcblxuICBjaG9vc2VBdmFpbGFibGVTdGFydERhdGU6IGNob29zZUF2YWlsYWJsZVN0YXJ0RGF0ZSxcbiAgY2hvb3NlQXZhaWxhYmxlRW5kRGF0ZTogY2hvb3NlQXZhaWxhYmxlRW5kRGF0ZSxcbiAgZGF0ZUlzVW5hdmFpbGFibGU6IGRhdGVJc1VuYXZhaWxhYmxlXG59O1xudmFyIERhdGVSYW5nZVBpY2tlclBocmFzZXMgPSBleHBvcnRzLkRhdGVSYW5nZVBpY2tlclBocmFzZXMgPSB7XG4gIGNsb3NlRGF0ZVBpY2tlcjogY2xvc2VEYXRlUGlja2VyLFxuICBjbGVhckRhdGVzOiBjbGVhckRhdGVzLFxuICBmb2N1c1N0YXJ0RGF0ZTogZm9jdXNTdGFydERhdGUsXG4gIGp1bXBUb1ByZXZNb250aDoganVtcFRvUHJldk1vbnRoLFxuICBqdW1wVG9OZXh0TW9udGg6IGp1bXBUb05leHRNb250aCxcbiAga2V5Ym9hcmRTaG9ydGN1dHM6IGtleWJvYXJkU2hvcnRjdXRzLFxuICBzaG93S2V5Ym9hcmRTaG9ydGN1dHNQYW5lbDogc2hvd0tleWJvYXJkU2hvcnRjdXRzUGFuZWwsXG4gIGhpZGVLZXlib2FyZFNob3J0Y3V0c1BhbmVsOiBoaWRlS2V5Ym9hcmRTaG9ydGN1dHNQYW5lbCxcbiAgb3BlblRoaXNQYW5lbDogb3BlblRoaXNQYW5lbCxcbiAgZW50ZXJLZXk6IGVudGVyS2V5LFxuICBsZWZ0QXJyb3dSaWdodEFycm93OiBsZWZ0QXJyb3dSaWdodEFycm93LFxuICB1cEFycm93RG93bkFycm93OiB1cEFycm93RG93bkFycm93LFxuICBwYWdlVXBQYWdlRG93bjogcGFnZVVwUGFnZURvd24sXG4gIGhvbWVFbmQ6IGhvbWVFbmQsXG4gIGVzY2FwZTogZXNjYXBlLFxuICBxdWVzdGlvbk1hcms6IHF1ZXN0aW9uTWFyayxcbiAgc2VsZWN0Rm9jdXNlZERhdGU6IHNlbGVjdEZvY3VzZWREYXRlLFxuICBtb3ZlRm9jdXNCeU9uZURheTogbW92ZUZvY3VzQnlPbmVEYXksXG4gIG1vdmVGb2N1c0J5T25lV2VlazogbW92ZUZvY3VzQnlPbmVXZWVrLFxuICBtb3ZlRm9jdXNCeU9uZU1vbnRoOiBtb3ZlRm9jdXNCeU9uZU1vbnRoLFxuICBtb3ZlRm9jdXN0b1N0YXJ0QW5kRW5kT2ZXZWVrOiBtb3ZlRm9jdXN0b1N0YXJ0QW5kRW5kT2ZXZWVrLFxuICByZXR1cm5Gb2N1c1RvSW5wdXQ6IHJldHVybkZvY3VzVG9JbnB1dCxcbiAga2V5Ym9hcmROYXZpZ2F0aW9uSW5zdHJ1Y3Rpb25zOiBrZXlib2FyZE5hdmlnYXRpb25JbnN0cnVjdGlvbnMsXG4gIGNob29zZUF2YWlsYWJsZVN0YXJ0RGF0ZTogY2hvb3NlQXZhaWxhYmxlU3RhcnREYXRlLFxuICBjaG9vc2VBdmFpbGFibGVFbmREYXRlOiBjaG9vc2VBdmFpbGFibGVFbmREYXRlLFxuICBkYXRlSXNVbmF2YWlsYWJsZTogZGF0ZUlzVW5hdmFpbGFibGVcbn07XG5cbnZhciBEYXRlUmFuZ2VQaWNrZXJJbnB1dFBocmFzZXMgPSBleHBvcnRzLkRhdGVSYW5nZVBpY2tlcklucHV0UGhyYXNlcyA9IHtcbiAgZm9jdXNTdGFydERhdGU6IGZvY3VzU3RhcnREYXRlLFxuICBjbGVhckRhdGVzOiBjbGVhckRhdGVzLFxuICBrZXlib2FyZE5hdmlnYXRpb25JbnN0cnVjdGlvbnM6IGtleWJvYXJkTmF2aWdhdGlvbkluc3RydWN0aW9uc1xufTtcblxudmFyIFNpbmdsZURhdGVQaWNrZXJQaHJhc2VzID0gZXhwb3J0cy5TaW5nbGVEYXRlUGlja2VyUGhyYXNlcyA9IHtcbiAgY2xvc2VEYXRlUGlja2VyOiBjbG9zZURhdGVQaWNrZXIsXG4gIGNsZWFyRGF0ZTogY2xlYXJEYXRlLFxuICBqdW1wVG9QcmV2TW9udGg6IGp1bXBUb1ByZXZNb250aCxcbiAganVtcFRvTmV4dE1vbnRoOiBqdW1wVG9OZXh0TW9udGgsXG4gIGtleWJvYXJkU2hvcnRjdXRzOiBrZXlib2FyZFNob3J0Y3V0cyxcbiAgc2hvd0tleWJvYXJkU2hvcnRjdXRzUGFuZWw6IHNob3dLZXlib2FyZFNob3J0Y3V0c1BhbmVsLFxuICBoaWRlS2V5Ym9hcmRTaG9ydGN1dHNQYW5lbDogaGlkZUtleWJvYXJkU2hvcnRjdXRzUGFuZWwsXG4gIG9wZW5UaGlzUGFuZWw6IG9wZW5UaGlzUGFuZWwsXG4gIGVudGVyS2V5OiBlbnRlcktleSxcbiAgbGVmdEFycm93UmlnaHRBcnJvdzogbGVmdEFycm93UmlnaHRBcnJvdyxcbiAgdXBBcnJvd0Rvd25BcnJvdzogdXBBcnJvd0Rvd25BcnJvdyxcbiAgcGFnZVVwUGFnZURvd246IHBhZ2VVcFBhZ2VEb3duLFxuICBob21lRW5kOiBob21lRW5kLFxuICBlc2NhcGU6IGVzY2FwZSxcbiAgcXVlc3Rpb25NYXJrOiBxdWVzdGlvbk1hcmssXG4gIHNlbGVjdEZvY3VzZWREYXRlOiBzZWxlY3RGb2N1c2VkRGF0ZSxcbiAgbW92ZUZvY3VzQnlPbmVEYXk6IG1vdmVGb2N1c0J5T25lRGF5LFxuICBtb3ZlRm9jdXNCeU9uZVdlZWs6IG1vdmVGb2N1c0J5T25lV2VlayxcbiAgbW92ZUZvY3VzQnlPbmVNb250aDogbW92ZUZvY3VzQnlPbmVNb250aCxcbiAgbW92ZUZvY3VzdG9TdGFydEFuZEVuZE9mV2VlazogbW92ZUZvY3VzdG9TdGFydEFuZEVuZE9mV2VlayxcbiAgcmV0dXJuRm9jdXNUb0lucHV0OiByZXR1cm5Gb2N1c1RvSW5wdXQsXG4gIGtleWJvYXJkTmF2aWdhdGlvbkluc3RydWN0aW9uczoga2V5Ym9hcmROYXZpZ2F0aW9uSW5zdHJ1Y3Rpb25zLFxuICBjaG9vc2VBdmFpbGFibGVEYXRlOiBjaG9vc2VBdmFpbGFibGVEYXRlLFxuICBkYXRlSXNVbmF2YWlsYWJsZTogZGF0ZUlzVW5hdmFpbGFibGVcbn07XG5cbnZhciBTaW5nbGVEYXRlUGlja2VySW5wdXRQaHJhc2VzID0gZXhwb3J0cy5TaW5nbGVEYXRlUGlja2VySW5wdXRQaHJhc2VzID0ge1xuICBjbGVhckRhdGU6IGNsZWFyRGF0ZSxcbiAga2V5Ym9hcmROYXZpZ2F0aW9uSW5zdHJ1Y3Rpb25zOiBrZXlib2FyZE5hdmlnYXRpb25JbnN0cnVjdGlvbnNcbn07XG5cbnZhciBEYXlQaWNrZXJQaHJhc2VzID0gZXhwb3J0cy5EYXlQaWNrZXJQaHJhc2VzID0ge1xuICBqdW1wVG9QcmV2TW9udGg6IGp1bXBUb1ByZXZNb250aCxcbiAganVtcFRvTmV4dE1vbnRoOiBqdW1wVG9OZXh0TW9udGgsXG4gIGtleWJvYXJkU2hvcnRjdXRzOiBrZXlib2FyZFNob3J0Y3V0cyxcbiAgc2hvd0tleWJvYXJkU2hvcnRjdXRzUGFuZWw6IHNob3dLZXlib2FyZFNob3J0Y3V0c1BhbmVsLFxuICBoaWRlS2V5Ym9hcmRTaG9ydGN1dHNQYW5lbDogaGlkZUtleWJvYXJkU2hvcnRjdXRzUGFuZWwsXG4gIG9wZW5UaGlzUGFuZWw6IG9wZW5UaGlzUGFuZWwsXG4gIGVudGVyS2V5OiBlbnRlcktleSxcbiAgbGVmdEFycm93UmlnaHRBcnJvdzogbGVmdEFycm93UmlnaHRBcnJvdyxcbiAgdXBBcnJvd0Rvd25BcnJvdzogdXBBcnJvd0Rvd25BcnJvdyxcbiAgcGFnZVVwUGFnZURvd246IHBhZ2VVcFBhZ2VEb3duLFxuICBob21lRW5kOiBob21lRW5kLFxuICBlc2NhcGU6IGVzY2FwZSxcbiAgcXVlc3Rpb25NYXJrOiBxdWVzdGlvbk1hcmssXG4gIHNlbGVjdEZvY3VzZWREYXRlOiBzZWxlY3RGb2N1c2VkRGF0ZSxcbiAgbW92ZUZvY3VzQnlPbmVEYXk6IG1vdmVGb2N1c0J5T25lRGF5LFxuICBtb3ZlRm9jdXNCeU9uZVdlZWs6IG1vdmVGb2N1c0J5T25lV2VlayxcbiAgbW92ZUZvY3VzQnlPbmVNb250aDogbW92ZUZvY3VzQnlPbmVNb250aCxcbiAgbW92ZUZvY3VzdG9TdGFydEFuZEVuZE9mV2VlazogbW92ZUZvY3VzdG9TdGFydEFuZEVuZE9mV2VlayxcbiAgcmV0dXJuRm9jdXNUb0lucHV0OiByZXR1cm5Gb2N1c1RvSW5wdXQsXG4gIGNob29zZUF2YWlsYWJsZVN0YXJ0RGF0ZTogY2hvb3NlQXZhaWxhYmxlU3RhcnREYXRlLFxuICBjaG9vc2VBdmFpbGFibGVFbmREYXRlOiBjaG9vc2VBdmFpbGFibGVFbmREYXRlLFxuICBjaG9vc2VBdmFpbGFibGVEYXRlOiBjaG9vc2VBdmFpbGFibGVEYXRlLFxuICBkYXRlSXNVbmF2YWlsYWJsZTogZGF0ZUlzVW5hdmFpbGFibGVcbn07XG5cbnZhciBEYXlQaWNrZXJLZXlib2FyZFNob3J0Y3V0c1BocmFzZXMgPSBleHBvcnRzLkRheVBpY2tlcktleWJvYXJkU2hvcnRjdXRzUGhyYXNlcyA9IHtcbiAga2V5Ym9hcmRTaG9ydGN1dHM6IGtleWJvYXJkU2hvcnRjdXRzLFxuICBzaG93S2V5Ym9hcmRTaG9ydGN1dHNQYW5lbDogc2hvd0tleWJvYXJkU2hvcnRjdXRzUGFuZWwsXG4gIGhpZGVLZXlib2FyZFNob3J0Y3V0c1BhbmVsOiBoaWRlS2V5Ym9hcmRTaG9ydGN1dHNQYW5lbCxcbiAgb3BlblRoaXNQYW5lbDogb3BlblRoaXNQYW5lbCxcbiAgZW50ZXJLZXk6IGVudGVyS2V5LFxuICBsZWZ0QXJyb3dSaWdodEFycm93OiBsZWZ0QXJyb3dSaWdodEFycm93LFxuICB1cEFycm93RG93bkFycm93OiB1cEFycm93RG93bkFycm93LFxuICBwYWdlVXBQYWdlRG93bjogcGFnZVVwUGFnZURvd24sXG4gIGhvbWVFbmQ6IGhvbWVFbmQsXG4gIGVzY2FwZTogZXNjYXBlLFxuICBxdWVzdGlvbk1hcms6IHF1ZXN0aW9uTWFyayxcbiAgc2VsZWN0Rm9jdXNlZERhdGU6IHNlbGVjdEZvY3VzZWREYXRlLFxuICBtb3ZlRm9jdXNCeU9uZURheTogbW92ZUZvY3VzQnlPbmVEYXksXG4gIG1vdmVGb2N1c0J5T25lV2VlazogbW92ZUZvY3VzQnlPbmVXZWVrLFxuICBtb3ZlRm9jdXNCeU9uZU1vbnRoOiBtb3ZlRm9jdXNCeU9uZU1vbnRoLFxuICBtb3ZlRm9jdXN0b1N0YXJ0QW5kRW5kT2ZXZWVrOiBtb3ZlRm9jdXN0b1N0YXJ0QW5kRW5kT2ZXZWVrLFxuICByZXR1cm5Gb2N1c1RvSW5wdXQ6IHJldHVybkZvY3VzVG9JbnB1dFxufTtcblxudmFyIERheVBpY2tlck5hdmlnYXRpb25QaHJhc2VzID0gZXhwb3J0cy5EYXlQaWNrZXJOYXZpZ2F0aW9uUGhyYXNlcyA9IHtcbiAganVtcFRvUHJldk1vbnRoOiBqdW1wVG9QcmV2TW9udGgsXG4gIGp1bXBUb05leHRNb250aDoganVtcFRvTmV4dE1vbnRoXG59O1xuXG52YXIgQ2FsZW5kYXJEYXlQaHJhc2VzID0gZXhwb3J0cy5DYWxlbmRhckRheVBocmFzZXMgPSB7XG4gIGNob29zZUF2YWlsYWJsZURhdGU6IGNob29zZUF2YWlsYWJsZURhdGUsXG4gIGRhdGVJc1VuYXZhaWxhYmxlOiBkYXRlSXNVbmF2YWlsYWJsZVxufTsiLCJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1snZGVmYXVsdCddID0gZ2V0UGhyYXNlUHJvcFR5cGVzO1xuXG52YXIgX29iamVjdCA9IHJlcXVpcmUoJ29iamVjdC5hc3NpZ24nKTtcblxudmFyIF9vYmplY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfb2JqZWN0KTtcblxudmFyIF9wcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5cbnZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxuZnVuY3Rpb24gZ2V0UGhyYXNlUHJvcFR5cGVzKGRlZmF1bHRQaHJhc2VzKSB7XG4gIHJldHVybiBPYmplY3Qua2V5cyhkZWZhdWx0UGhyYXNlcykucmVkdWNlKGZ1bmN0aW9uIChwaHJhc2VzLCBrZXkpIHtcbiAgICByZXR1cm4gKDAsIF9vYmplY3QyWydkZWZhdWx0J10pKHt9LCBwaHJhc2VzLCBfZGVmaW5lUHJvcGVydHkoe30sIGtleSwgX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5vbmVPZlR5cGUoW19wcm9wVHlwZXMyWydkZWZhdWx0J10uc3RyaW5nLCBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmZ1bmMsIF9wcm9wVHlwZXMyWydkZWZhdWx0J10ubm9kZV0pKSk7XG4gIH0sIHt9KTtcbn0iLCIvKiFcbiAgQ29weXJpZ2h0IChjKSAyMDE3IEplZCBXYXRzb24uXG4gIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZSAoTUlUKSwgc2VlXG4gIGh0dHA6Ly9qZWR3YXRzb24uZ2l0aHViLmlvL2NsYXNzbmFtZXNcbiovXG4vKiBnbG9iYWwgZGVmaW5lICovXG5cbihmdW5jdGlvbiAoKSB7XG5cdCd1c2Ugc3RyaWN0JztcblxuXHR2YXIgaGFzT3duID0ge30uaGFzT3duUHJvcGVydHk7XG5cblx0ZnVuY3Rpb24gY2xhc3NOYW1lcyAoKSB7XG5cdFx0dmFyIGNsYXNzZXMgPSBbXTtcblxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgYXJnID0gYXJndW1lbnRzW2ldO1xuXHRcdFx0aWYgKCFhcmcpIGNvbnRpbnVlO1xuXG5cdFx0XHR2YXIgYXJnVHlwZSA9IHR5cGVvZiBhcmc7XG5cblx0XHRcdGlmIChhcmdUeXBlID09PSAnc3RyaW5nJyB8fCBhcmdUeXBlID09PSAnbnVtYmVyJykge1xuXHRcdFx0XHRjbGFzc2VzLnB1c2goYXJnKTtcblx0XHRcdH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShhcmcpICYmIGFyZy5sZW5ndGgpIHtcblx0XHRcdFx0dmFyIGlubmVyID0gY2xhc3NOYW1lcy5hcHBseShudWxsLCBhcmcpO1xuXHRcdFx0XHRpZiAoaW5uZXIpIHtcblx0XHRcdFx0XHRjbGFzc2VzLnB1c2goaW5uZXIpO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2UgaWYgKGFyZ1R5cGUgPT09ICdvYmplY3QnKSB7XG5cdFx0XHRcdGZvciAodmFyIGtleSBpbiBhcmcpIHtcblx0XHRcdFx0XHRpZiAoaGFzT3duLmNhbGwoYXJnLCBrZXkpICYmIGFyZ1trZXldKSB7XG5cdFx0XHRcdFx0XHRjbGFzc2VzLnB1c2goa2V5KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gY2xhc3Nlcy5qb2luKCcgJyk7XG5cdH1cblxuXHRpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcblx0XHRjbGFzc05hbWVzLmRlZmF1bHQgPSBjbGFzc05hbWVzO1xuXHRcdG1vZHVsZS5leHBvcnRzID0gY2xhc3NOYW1lcztcblx0fSBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBkZWZpbmUuYW1kID09PSAnb2JqZWN0JyAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0Ly8gcmVnaXN0ZXIgYXMgJ2NsYXNzbmFtZXMnLCBjb25zaXN0ZW50IHdpdGggbnBtIHBhY2thZ2UgbmFtZVxuXHRcdGRlZmluZSgnY2xhc3NuYW1lcycsIFtdLCBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZXR1cm4gY2xhc3NOYW1lcztcblx0XHR9KTtcblx0fSBlbHNlIHtcblx0XHR3aW5kb3cuY2xhc3NOYW1lcyA9IGNsYXNzTmFtZXM7XG5cdH1cbn0oKSk7XG4iLCJ2YXIgbW9tZW50ID0gcmVxdWlyZSgnbW9tZW50Jyk7XG52YXIgbW9tZW50VmFsaWRhdGlvbldyYXBwZXIgPSByZXF1aXJlKCcuL21vbWVudC12YWxpZGF0aW9uLXdyYXBwZXInKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9jb3JlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXG4gIG1vbWVudE9iaiA6IGNvcmUuY3JlYXRlTW9tZW50Q2hlY2tlcihcbiAgICAnb2JqZWN0JyxcbiAgICBmdW5jdGlvbihvYmopIHtcbiAgICAgIHJldHVybiB0eXBlb2Ygb2JqID09PSAnb2JqZWN0JztcbiAgICB9LFxuICAgIGZ1bmN0aW9uIGlzVmFsaWQodmFsdWUpIHtcbiAgICAgIHJldHVybiBtb21lbnRWYWxpZGF0aW9uV3JhcHBlci5pc1ZhbGlkTW9tZW50KHZhbHVlKTtcbiAgICB9LFxuICAgICdNb21lbnQnXG4gICksXG5cbiAgbW9tZW50U3RyaW5nIDogY29yZS5jcmVhdGVNb21lbnRDaGVja2VyKFxuICAgICdzdHJpbmcnLFxuICAgIGZ1bmN0aW9uKHN0cikge1xuICAgICAgcmV0dXJuIHR5cGVvZiBzdHIgPT09ICdzdHJpbmcnO1xuICAgIH0sXG4gICAgZnVuY3Rpb24gaXNWYWxpZCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIG1vbWVudFZhbGlkYXRpb25XcmFwcGVyLmlzVmFsaWRNb21lbnQobW9tZW50KHZhbHVlKSk7XG4gICAgfSxcbiAgICAnTW9tZW50J1xuICApLFxuXG4gIG1vbWVudER1cmF0aW9uT2JqIDogY29yZS5jcmVhdGVNb21lbnRDaGVja2VyKFxuICAgICdvYmplY3QnLFxuICAgIGZ1bmN0aW9uKG9iaikge1xuICAgICAgcmV0dXJuIHR5cGVvZiBvYmogPT09ICdvYmplY3QnO1xuICAgIH0sXG4gICAgZnVuY3Rpb24gaXNWYWxpZCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIG1vbWVudC5pc0R1cmF0aW9uKHZhbHVlKTtcbiAgICB9LFxuICAgICdEdXJhdGlvbidcbiAgKSxcblxufTtcbiIsIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfcHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xuXG52YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG52YXIgX2NvbnN0YW50cyA9IHJlcXVpcmUoJy4uLy4uL2NvbnN0YW50cycpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IF9wcm9wVHlwZXMyWydkZWZhdWx0J10ub25lT2YoX2NvbnN0YW50cy5XRUVLREFZUyk7IiwiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IGlzVG91Y2hEZXZpY2U7XG5mdW5jdGlvbiBpc1RvdWNoRGV2aWNlKCkge1xuICByZXR1cm4gISEodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgKCdvbnRvdWNoc3RhcnQnIGluIHdpbmRvdyB8fCB3aW5kb3cuRG9jdW1lbnRUb3VjaCAmJiB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICYmIGRvY3VtZW50IGluc3RhbmNlb2Ygd2luZG93LkRvY3VtZW50VG91Y2gpKSB8fCAhISh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiAobmF2aWdhdG9yLm1heFRvdWNoUG9pbnRzIHx8IG5hdmlnYXRvci5tc01heFRvdWNoUG9pbnRzKSk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1snZGVmYXVsdCddID0gdG9JU09EYXRlU3RyaW5nO1xuXG52YXIgX21vbWVudCA9IHJlcXVpcmUoJ21vbWVudCcpO1xuXG52YXIgX21vbWVudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9tb21lbnQpO1xuXG52YXIgX3RvTW9tZW50T2JqZWN0ID0gcmVxdWlyZSgnLi90b01vbWVudE9iamVjdCcpO1xuXG52YXIgX3RvTW9tZW50T2JqZWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3RvTW9tZW50T2JqZWN0KTtcblxudmFyIF9jb25zdGFudHMgPSByZXF1aXJlKCcuLi8uLi9jb25zdGFudHMnKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG5mdW5jdGlvbiB0b0lTT0RhdGVTdHJpbmcoZGF0ZSwgY3VycmVudEZvcm1hdCkge1xuICB2YXIgZGF0ZU9iaiA9IF9tb21lbnQyWydkZWZhdWx0J10uaXNNb21lbnQoZGF0ZSkgPyBkYXRlIDogKDAsIF90b01vbWVudE9iamVjdDJbJ2RlZmF1bHQnXSkoZGF0ZSwgY3VycmVudEZvcm1hdCk7XG4gIGlmICghZGF0ZU9iaikgcmV0dXJuIG51bGw7XG5cbiAgcmV0dXJuIGRhdGVPYmouZm9ybWF0KF9jb25zdGFudHMuSVNPX0ZPUk1BVCk7XG59IiwiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IHRvTW9tZW50T2JqZWN0O1xuXG52YXIgX21vbWVudCA9IHJlcXVpcmUoJ21vbWVudCcpO1xuXG52YXIgX21vbWVudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9tb21lbnQpO1xuXG52YXIgX2NvbnN0YW50cyA9IHJlcXVpcmUoJy4uLy4uL2NvbnN0YW50cycpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIHRvTW9tZW50T2JqZWN0KGRhdGVTdHJpbmcsIGN1c3RvbUZvcm1hdCkge1xuICB2YXIgZGF0ZUZvcm1hdHMgPSBjdXN0b21Gb3JtYXQgPyBbY3VzdG9tRm9ybWF0LCBfY29uc3RhbnRzLkRJU1BMQVlfRk9STUFULCBfY29uc3RhbnRzLklTT19GT1JNQVRdIDogW19jb25zdGFudHMuRElTUExBWV9GT1JNQVQsIF9jb25zdGFudHMuSVNPX0ZPUk1BVF07XG5cbiAgdmFyIGRhdGUgPSAoMCwgX21vbWVudDJbJ2RlZmF1bHQnXSkoZGF0ZVN0cmluZywgZGF0ZUZvcm1hdHMsIHRydWUpO1xuICByZXR1cm4gZGF0ZS5pc1ZhbGlkKCkgPyBkYXRlLmhvdXIoMTIpIDogbnVsbDtcbn0iLCJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX3Byb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxudmFyIF9jb25zdGFudHMgPSByZXF1aXJlKCcuLi8uLi9jb25zdGFudHMnKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG5leHBvcnRzWydkZWZhdWx0J10gPSBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLm9uZU9mKFtfY29uc3RhbnRzLkhPUklaT05UQUxfT1JJRU5UQVRJT04sIF9jb25zdGFudHMuVkVSVElDQUxfT1JJRU5UQVRJT04sIF9jb25zdGFudHMuVkVSVElDQUxfU0NST0xMQUJMRV0pOyIsIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzWydkZWZhdWx0J10gPSBpc1NhbWVEYXk7XG5cbnZhciBfbW9tZW50ID0gcmVxdWlyZSgnbW9tZW50Jyk7XG5cbnZhciBfbW9tZW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX21vbWVudCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxuZnVuY3Rpb24gaXNTYW1lRGF5KGEsIGIpIHtcbiAgaWYgKCFfbW9tZW50MlsnZGVmYXVsdCddLmlzTW9tZW50KGEpIHx8ICFfbW9tZW50MlsnZGVmYXVsdCddLmlzTW9tZW50KGIpKSByZXR1cm4gZmFsc2U7XG4gIC8vIENvbXBhcmUgbGVhc3Qgc2lnbmlmaWNhbnQsIG1vc3QgbGlrZWx5IHRvIGNoYW5nZSB1bml0cyBmaXJzdFxuICAvLyBNb21lbnQncyBpc1NhbWUgY2xvbmVzIG1vbWVudCBpbnB1dHMgYW5kIGlzIGEgdGFkIHNsb3dcbiAgcmV0dXJuIGEuZGF0ZSgpID09PSBiLmRhdGUoKSAmJiBhLm1vbnRoKCkgPT09IGIubW9udGgoKSAmJiBhLnllYXIoKSA9PT0gYi55ZWFyKCk7XG59IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIHNoYWxsb3dDb21wYXJlXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgc2hhbGxvd0VxdWFsID0gcmVxdWlyZSgnZmJqcy9saWIvc2hhbGxvd0VxdWFsJyk7XG5cbi8qKlxuICogRG9lcyBhIHNoYWxsb3cgY29tcGFyaXNvbiBmb3IgcHJvcHMgYW5kIHN0YXRlLlxuICogU2VlIFJlYWN0Q29tcG9uZW50V2l0aFB1cmVSZW5kZXJNaXhpblxuICogU2VlIGFsc28gaHR0cHM6Ly9mYWNlYm9vay5naXRodWIuaW8vcmVhY3QvZG9jcy9zaGFsbG93LWNvbXBhcmUuaHRtbFxuICovXG5mdW5jdGlvbiBzaGFsbG93Q29tcGFyZShpbnN0YW5jZSwgbmV4dFByb3BzLCBuZXh0U3RhdGUpIHtcbiAgcmV0dXJuIChcbiAgICAhc2hhbGxvd0VxdWFsKGluc3RhbmNlLnByb3BzLCBuZXh0UHJvcHMpIHx8XG4gICAgIXNoYWxsb3dFcXVhbChpbnN0YW5jZS5zdGF0ZSwgbmV4dFN0YXRlKVxuICApO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNoYWxsb3dDb21wYXJlO1xuIiwiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IGlzSW5jbHVzaXZlbHlBZnRlckRheTtcblxudmFyIF9tb21lbnQgPSByZXF1aXJlKCdtb21lbnQnKTtcblxudmFyIF9tb21lbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfbW9tZW50KTtcblxudmFyIF9pc0JlZm9yZURheSA9IHJlcXVpcmUoJy4vaXNCZWZvcmVEYXknKTtcblxudmFyIF9pc0JlZm9yZURheTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pc0JlZm9yZURheSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxuZnVuY3Rpb24gaXNJbmNsdXNpdmVseUFmdGVyRGF5KGEsIGIpIHtcbiAgaWYgKCFfbW9tZW50MlsnZGVmYXVsdCddLmlzTW9tZW50KGEpIHx8ICFfbW9tZW50MlsnZGVmYXVsdCddLmlzTW9tZW50KGIpKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiAhKDAsIF9pc0JlZm9yZURheTJbJ2RlZmF1bHQnXSkoYSwgYik7XG59IiwiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IGlzQmVmb3JlRGF5O1xuXG52YXIgX21vbWVudCA9IHJlcXVpcmUoJ21vbWVudCcpO1xuXG52YXIgX21vbWVudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9tb21lbnQpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIGlzQmVmb3JlRGF5KGEsIGIpIHtcbiAgaWYgKCFfbW9tZW50MlsnZGVmYXVsdCddLmlzTW9tZW50KGEpIHx8ICFfbW9tZW50MlsnZGVmYXVsdCddLmlzTW9tZW50KGIpKSByZXR1cm4gZmFsc2U7XG5cbiAgdmFyIGFZZWFyID0gYS55ZWFyKCk7XG4gIHZhciBhTW9udGggPSBhLm1vbnRoKCk7XG5cbiAgdmFyIGJZZWFyID0gYi55ZWFyKCk7XG4gIHZhciBiTW9udGggPSBiLm1vbnRoKCk7XG5cbiAgdmFyIGlzU2FtZVllYXIgPSBhWWVhciA9PT0gYlllYXI7XG4gIHZhciBpc1NhbWVNb250aCA9IGFNb250aCA9PT0gYk1vbnRoO1xuXG4gIGlmIChpc1NhbWVZZWFyICYmIGlzU2FtZU1vbnRoKSByZXR1cm4gYS5kYXRlKCkgPCBiLmRhdGUoKTtcbiAgaWYgKGlzU2FtZVllYXIpIHJldHVybiBhTW9udGggPCBiTW9udGg7XG4gIHJldHVybiBhWWVhciA8IGJZZWFyO1xufSIsIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzWydkZWZhdWx0J10gPSBpc0FmdGVyRGF5O1xuXG52YXIgX21vbWVudCA9IHJlcXVpcmUoJ21vbWVudCcpO1xuXG52YXIgX21vbWVudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9tb21lbnQpO1xuXG52YXIgX2lzQmVmb3JlRGF5ID0gcmVxdWlyZSgnLi9pc0JlZm9yZURheScpO1xuXG52YXIgX2lzQmVmb3JlRGF5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2lzQmVmb3JlRGF5KTtcblxudmFyIF9pc1NhbWVEYXkgPSByZXF1aXJlKCcuL2lzU2FtZURheScpO1xuXG52YXIgX2lzU2FtZURheTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pc1NhbWVEYXkpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIGlzQWZ0ZXJEYXkoYSwgYikge1xuICBpZiAoIV9tb21lbnQyWydkZWZhdWx0J10uaXNNb21lbnQoYSkgfHwgIV9tb21lbnQyWydkZWZhdWx0J10uaXNNb21lbnQoYikpIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuICEoMCwgX2lzQmVmb3JlRGF5MlsnZGVmYXVsdCddKShhLCBiKSAmJiAhKDAsIF9pc1NhbWVEYXkyWydkZWZhdWx0J10pKGEsIGIpO1xufSIsImltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5cbmV4cG9ydCB2YXIgc3Vic2NyaXB0aW9uU2hhcGUgPSBQcm9wVHlwZXMuc2hhcGUoe1xuICB0cnlTdWJzY3JpYmU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIHRyeVVuc3Vic2NyaWJlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBub3RpZnlOZXN0ZWRTdWJzOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBpc1N1YnNjcmliZWQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbn0pO1xuXG5leHBvcnQgdmFyIHN0b3JlU2hhcGUgPSBQcm9wVHlwZXMuc2hhcGUoe1xuICBzdWJzY3JpYmU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIGRpc3BhdGNoOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBnZXRTdGF0ZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxufSk7IiwiZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5pbXBvcnQgeyBDb21wb25lbnQsIENoaWxkcmVuIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IHN0b3JlU2hhcGUsIHN1YnNjcmlwdGlvblNoYXBlIH0gZnJvbSAnLi4vdXRpbHMvUHJvcFR5cGVzJztcbmltcG9ydCB3YXJuaW5nIGZyb20gJy4uL3V0aWxzL3dhcm5pbmcnO1xuXG52YXIgZGlkV2FybkFib3V0UmVjZWl2aW5nU3RvcmUgPSBmYWxzZTtcbmZ1bmN0aW9uIHdhcm5BYm91dFJlY2VpdmluZ1N0b3JlKCkge1xuICBpZiAoZGlkV2FybkFib3V0UmVjZWl2aW5nU3RvcmUpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgZGlkV2FybkFib3V0UmVjZWl2aW5nU3RvcmUgPSB0cnVlO1xuXG4gIHdhcm5pbmcoJzxQcm92aWRlcj4gZG9lcyBub3Qgc3VwcG9ydCBjaGFuZ2luZyBgc3RvcmVgIG9uIHRoZSBmbHkuICcgKyAnSXQgaXMgbW9zdCBsaWtlbHkgdGhhdCB5b3Ugc2VlIHRoaXMgZXJyb3IgYmVjYXVzZSB5b3UgdXBkYXRlZCB0byAnICsgJ1JlZHV4IDIueCBhbmQgUmVhY3QgUmVkdXggMi54IHdoaWNoIG5vIGxvbmdlciBob3QgcmVsb2FkIHJlZHVjZXJzICcgKyAnYXV0b21hdGljYWxseS4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdGpzL3JlYWN0LXJlZHV4L3JlbGVhc2VzLycgKyAndGFnL3YyLjAuMCBmb3IgdGhlIG1pZ3JhdGlvbiBpbnN0cnVjdGlvbnMuJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVQcm92aWRlcigpIHtcbiAgdmFyIF9Qcm92aWRlciRjaGlsZENvbnRleDtcblxuICB2YXIgc3RvcmVLZXkgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6ICdzdG9yZSc7XG4gIHZhciBzdWJLZXkgPSBhcmd1bWVudHNbMV07XG5cbiAgdmFyIHN1YnNjcmlwdGlvbktleSA9IHN1YktleSB8fCBzdG9yZUtleSArICdTdWJzY3JpcHRpb24nO1xuXG4gIHZhciBQcm92aWRlciA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gICAgX2luaGVyaXRzKFByb3ZpZGVyLCBfQ29tcG9uZW50KTtcblxuICAgIFByb3ZpZGVyLnByb3RvdHlwZS5nZXRDaGlsZENvbnRleHQgPSBmdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKSB7XG4gICAgICB2YXIgX3JlZjtcblxuICAgICAgcmV0dXJuIF9yZWYgPSB7fSwgX3JlZltzdG9yZUtleV0gPSB0aGlzW3N0b3JlS2V5XSwgX3JlZltzdWJzY3JpcHRpb25LZXldID0gbnVsbCwgX3JlZjtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gUHJvdmlkZXIocHJvcHMsIGNvbnRleHQpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQcm92aWRlcik7XG5cbiAgICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9Db21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcywgY29udGV4dCkpO1xuXG4gICAgICBfdGhpc1tzdG9yZUtleV0gPSBwcm9wcy5zdG9yZTtcbiAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG5cbiAgICBQcm92aWRlci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgcmV0dXJuIENoaWxkcmVuLm9ubHkodGhpcy5wcm9wcy5jaGlsZHJlbik7XG4gICAgfTtcblxuICAgIHJldHVybiBQcm92aWRlcjtcbiAgfShDb21wb25lbnQpO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgUHJvdmlkZXIucHJvdG90eXBlLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiAobmV4dFByb3BzKSB7XG4gICAgICBpZiAodGhpc1tzdG9yZUtleV0gIT09IG5leHRQcm9wcy5zdG9yZSkge1xuICAgICAgICB3YXJuQWJvdXRSZWNlaXZpbmdTdG9yZSgpO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICBQcm92aWRlci5wcm9wVHlwZXMgPSB7XG4gICAgc3RvcmU6IHN0b3JlU2hhcGUuaXNSZXF1aXJlZCxcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLmVsZW1lbnQuaXNSZXF1aXJlZFxuICB9O1xuICBQcm92aWRlci5jaGlsZENvbnRleHRUeXBlcyA9IChfUHJvdmlkZXIkY2hpbGRDb250ZXggPSB7fSwgX1Byb3ZpZGVyJGNoaWxkQ29udGV4W3N0b3JlS2V5XSA9IHN0b3JlU2hhcGUuaXNSZXF1aXJlZCwgX1Byb3ZpZGVyJGNoaWxkQ29udGV4W3N1YnNjcmlwdGlvbktleV0gPSBzdWJzY3JpcHRpb25TaGFwZSwgX1Byb3ZpZGVyJGNoaWxkQ29udGV4KTtcbiAgUHJvdmlkZXIuZGlzcGxheU5hbWUgPSAnUHJvdmlkZXInO1xuXG4gIHJldHVybiBQcm92aWRlcjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlUHJvdmlkZXIoKTsiLCJmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG4vLyBlbmNhcHN1bGF0ZXMgdGhlIHN1YnNjcmlwdGlvbiBsb2dpYyBmb3IgY29ubmVjdGluZyBhIGNvbXBvbmVudCB0byB0aGUgcmVkdXggc3RvcmUsIGFzXG4vLyB3ZWxsIGFzIG5lc3Rpbmcgc3Vic2NyaXB0aW9ucyBvZiBkZXNjZW5kYW50IGNvbXBvbmVudHMsIHNvIHRoYXQgd2UgY2FuIGVuc3VyZSB0aGVcbi8vIGFuY2VzdG9yIGNvbXBvbmVudHMgcmUtcmVuZGVyIGJlZm9yZSBkZXNjZW5kYW50c1xuXG52YXIgQ0xFQVJFRCA9IG51bGw7XG52YXIgbnVsbExpc3RlbmVycyA9IHtcbiAgbm90aWZ5OiBmdW5jdGlvbiBub3RpZnkoKSB7fVxufTtcblxuZnVuY3Rpb24gY3JlYXRlTGlzdGVuZXJDb2xsZWN0aW9uKCkge1xuICAvLyB0aGUgY3VycmVudC9uZXh0IHBhdHRlcm4gaXMgY29waWVkIGZyb20gcmVkdXgncyBjcmVhdGVTdG9yZSBjb2RlLlxuICAvLyBUT0RPOiByZWZhY3RvcitleHBvc2UgdGhhdCBjb2RlIHRvIGJlIHJldXNhYmxlIGhlcmU/XG4gIHZhciBjdXJyZW50ID0gW107XG4gIHZhciBuZXh0ID0gW107XG5cbiAgcmV0dXJuIHtcbiAgICBjbGVhcjogZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgICBuZXh0ID0gQ0xFQVJFRDtcbiAgICAgIGN1cnJlbnQgPSBDTEVBUkVEO1xuICAgIH0sXG4gICAgbm90aWZ5OiBmdW5jdGlvbiBub3RpZnkoKSB7XG4gICAgICB2YXIgbGlzdGVuZXJzID0gY3VycmVudCA9IG5leHQ7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3RlbmVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICBsaXN0ZW5lcnNbaV0oKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHN1YnNjcmliZTogZnVuY3Rpb24gc3Vic2NyaWJlKGxpc3RlbmVyKSB7XG4gICAgICB2YXIgaXNTdWJzY3JpYmVkID0gdHJ1ZTtcbiAgICAgIGlmIChuZXh0ID09PSBjdXJyZW50KSBuZXh0ID0gY3VycmVudC5zbGljZSgpO1xuICAgICAgbmV4dC5wdXNoKGxpc3RlbmVyKTtcblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkge1xuICAgICAgICBpZiAoIWlzU3Vic2NyaWJlZCB8fCBjdXJyZW50ID09PSBDTEVBUkVEKSByZXR1cm47XG4gICAgICAgIGlzU3Vic2NyaWJlZCA9IGZhbHNlO1xuXG4gICAgICAgIGlmIChuZXh0ID09PSBjdXJyZW50KSBuZXh0ID0gY3VycmVudC5zbGljZSgpO1xuICAgICAgICBuZXh0LnNwbGljZShuZXh0LmluZGV4T2YobGlzdGVuZXIpLCAxKTtcbiAgICAgIH07XG4gICAgfVxuICB9O1xufVxuXG52YXIgU3Vic2NyaXB0aW9uID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTdWJzY3JpcHRpb24oc3RvcmUsIHBhcmVudFN1Yiwgb25TdGF0ZUNoYW5nZSkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTdWJzY3JpcHRpb24pO1xuXG4gICAgdGhpcy5zdG9yZSA9IHN0b3JlO1xuICAgIHRoaXMucGFyZW50U3ViID0gcGFyZW50U3ViO1xuICAgIHRoaXMub25TdGF0ZUNoYW5nZSA9IG9uU3RhdGVDaGFuZ2U7XG4gICAgdGhpcy51bnN1YnNjcmliZSA9IG51bGw7XG4gICAgdGhpcy5saXN0ZW5lcnMgPSBudWxsTGlzdGVuZXJzO1xuICB9XG5cbiAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS5hZGROZXN0ZWRTdWIgPSBmdW5jdGlvbiBhZGROZXN0ZWRTdWIobGlzdGVuZXIpIHtcbiAgICB0aGlzLnRyeVN1YnNjcmliZSgpO1xuICAgIHJldHVybiB0aGlzLmxpc3RlbmVycy5zdWJzY3JpYmUobGlzdGVuZXIpO1xuICB9O1xuXG4gIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUubm90aWZ5TmVzdGVkU3VicyA9IGZ1bmN0aW9uIG5vdGlmeU5lc3RlZFN1YnMoKSB7XG4gICAgdGhpcy5saXN0ZW5lcnMubm90aWZ5KCk7XG4gIH07XG5cbiAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS5pc1N1YnNjcmliZWQgPSBmdW5jdGlvbiBpc1N1YnNjcmliZWQoKSB7XG4gICAgcmV0dXJuIEJvb2xlYW4odGhpcy51bnN1YnNjcmliZSk7XG4gIH07XG5cbiAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS50cnlTdWJzY3JpYmUgPSBmdW5jdGlvbiB0cnlTdWJzY3JpYmUoKSB7XG4gICAgaWYgKCF0aGlzLnVuc3Vic2NyaWJlKSB7XG4gICAgICB0aGlzLnVuc3Vic2NyaWJlID0gdGhpcy5wYXJlbnRTdWIgPyB0aGlzLnBhcmVudFN1Yi5hZGROZXN0ZWRTdWIodGhpcy5vblN0YXRlQ2hhbmdlKSA6IHRoaXMuc3RvcmUuc3Vic2NyaWJlKHRoaXMub25TdGF0ZUNoYW5nZSk7XG5cbiAgICAgIHRoaXMubGlzdGVuZXJzID0gY3JlYXRlTGlzdGVuZXJDb2xsZWN0aW9uKCk7XG4gICAgfVxuICB9O1xuXG4gIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUudHJ5VW5zdWJzY3JpYmUgPSBmdW5jdGlvbiB0cnlVbnN1YnNjcmliZSgpIHtcbiAgICBpZiAodGhpcy51bnN1YnNjcmliZSkge1xuICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgdGhpcy51bnN1YnNjcmliZSA9IG51bGw7XG4gICAgICB0aGlzLmxpc3RlbmVycy5jbGVhcigpO1xuICAgICAgdGhpcy5saXN0ZW5lcnMgPSBudWxsTGlzdGVuZXJzO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gU3Vic2NyaXB0aW9uO1xufSgpO1xuXG5leHBvcnQgeyBTdWJzY3JpcHRpb24gYXMgZGVmYXVsdCB9OyIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5pbXBvcnQgaG9pc3RTdGF0aWNzIGZyb20gJ2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAnaW52YXJpYW50JztcbmltcG9ydCB7IENvbXBvbmVudCwgY3JlYXRlRWxlbWVudCB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IFN1YnNjcmlwdGlvbiBmcm9tICcuLi91dGlscy9TdWJzY3JpcHRpb24nO1xuaW1wb3J0IHsgc3RvcmVTaGFwZSwgc3Vic2NyaXB0aW9uU2hhcGUgfSBmcm9tICcuLi91dGlscy9Qcm9wVHlwZXMnO1xuXG52YXIgaG90UmVsb2FkaW5nVmVyc2lvbiA9IDA7XG52YXIgZHVtbXlTdGF0ZSA9IHt9O1xuZnVuY3Rpb24gbm9vcCgpIHt9XG5mdW5jdGlvbiBtYWtlU2VsZWN0b3JTdGF0ZWZ1bChzb3VyY2VTZWxlY3Rvciwgc3RvcmUpIHtcbiAgLy8gd3JhcCB0aGUgc2VsZWN0b3IgaW4gYW4gb2JqZWN0IHRoYXQgdHJhY2tzIGl0cyByZXN1bHRzIGJldHdlZW4gcnVucy5cbiAgdmFyIHNlbGVjdG9yID0ge1xuICAgIHJ1bjogZnVuY3Rpb24gcnVuQ29tcG9uZW50U2VsZWN0b3IocHJvcHMpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBuZXh0UHJvcHMgPSBzb3VyY2VTZWxlY3RvcihzdG9yZS5nZXRTdGF0ZSgpLCBwcm9wcyk7XG4gICAgICAgIGlmIChuZXh0UHJvcHMgIT09IHNlbGVjdG9yLnByb3BzIHx8IHNlbGVjdG9yLmVycm9yKSB7XG4gICAgICAgICAgc2VsZWN0b3Iuc2hvdWxkQ29tcG9uZW50VXBkYXRlID0gdHJ1ZTtcbiAgICAgICAgICBzZWxlY3Rvci5wcm9wcyA9IG5leHRQcm9wcztcbiAgICAgICAgICBzZWxlY3Rvci5lcnJvciA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHNlbGVjdG9yLnNob3VsZENvbXBvbmVudFVwZGF0ZSA9IHRydWU7XG4gICAgICAgIHNlbGVjdG9yLmVycm9yID0gZXJyb3I7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBzZWxlY3Rvcjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29ubmVjdEFkdmFuY2VkKFxuLypcbiAgc2VsZWN0b3JGYWN0b3J5IGlzIGEgZnVuYyB0aGF0IGlzIHJlc3BvbnNpYmxlIGZvciByZXR1cm5pbmcgdGhlIHNlbGVjdG9yIGZ1bmN0aW9uIHVzZWQgdG9cbiAgY29tcHV0ZSBuZXcgcHJvcHMgZnJvbSBzdGF0ZSwgcHJvcHMsIGFuZCBkaXNwYXRjaC4gRm9yIGV4YW1wbGU6XG4gICAgIGV4cG9ydCBkZWZhdWx0IGNvbm5lY3RBZHZhbmNlZCgoZGlzcGF0Y2gsIG9wdGlvbnMpID0+IChzdGF0ZSwgcHJvcHMpID0+ICh7XG4gICAgICB0aGluZzogc3RhdGUudGhpbmdzW3Byb3BzLnRoaW5nSWRdLFxuICAgICAgc2F2ZVRoaW5nOiBmaWVsZHMgPT4gZGlzcGF0Y2goYWN0aW9uQ3JlYXRvcnMuc2F2ZVRoaW5nKHByb3BzLnRoaW5nSWQsIGZpZWxkcykpLFxuICAgIH0pKShZb3VyQ29tcG9uZW50KVxuICAgQWNjZXNzIHRvIGRpc3BhdGNoIGlzIHByb3ZpZGVkIHRvIHRoZSBmYWN0b3J5IHNvIHNlbGVjdG9yRmFjdG9yaWVzIGNhbiBiaW5kIGFjdGlvbkNyZWF0b3JzXG4gIG91dHNpZGUgb2YgdGhlaXIgc2VsZWN0b3IgYXMgYW4gb3B0aW1pemF0aW9uLiBPcHRpb25zIHBhc3NlZCB0byBjb25uZWN0QWR2YW5jZWQgYXJlIHBhc3NlZCB0b1xuICB0aGUgc2VsZWN0b3JGYWN0b3J5LCBhbG9uZyB3aXRoIGRpc3BsYXlOYW1lIGFuZCBXcmFwcGVkQ29tcG9uZW50LCBhcyB0aGUgc2Vjb25kIGFyZ3VtZW50LlxuICAgTm90ZSB0aGF0IHNlbGVjdG9yRmFjdG9yeSBpcyByZXNwb25zaWJsZSBmb3IgYWxsIGNhY2hpbmcvbWVtb2l6YXRpb24gb2YgaW5ib3VuZCBhbmQgb3V0Ym91bmRcbiAgcHJvcHMuIERvIG5vdCB1c2UgY29ubmVjdEFkdmFuY2VkIGRpcmVjdGx5IHdpdGhvdXQgbWVtb2l6aW5nIHJlc3VsdHMgYmV0d2VlbiBjYWxscyB0byB5b3VyXG4gIHNlbGVjdG9yLCBvdGhlcndpc2UgdGhlIENvbm5lY3QgY29tcG9uZW50IHdpbGwgcmUtcmVuZGVyIG9uIGV2ZXJ5IHN0YXRlIG9yIHByb3BzIGNoYW5nZS5cbiovXG5zZWxlY3RvckZhY3RvcnkpIHtcbiAgdmFyIF9jb250ZXh0VHlwZXMsIF9jaGlsZENvbnRleHRUeXBlcztcblxuICB2YXIgX3JlZiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge30sXG4gICAgICBfcmVmJGdldERpc3BsYXlOYW1lID0gX3JlZi5nZXREaXNwbGF5TmFtZSxcbiAgICAgIGdldERpc3BsYXlOYW1lID0gX3JlZiRnZXREaXNwbGF5TmFtZSA9PT0gdW5kZWZpbmVkID8gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICByZXR1cm4gJ0Nvbm5lY3RBZHZhbmNlZCgnICsgbmFtZSArICcpJztcbiAgfSA6IF9yZWYkZ2V0RGlzcGxheU5hbWUsXG4gICAgICBfcmVmJG1ldGhvZE5hbWUgPSBfcmVmLm1ldGhvZE5hbWUsXG4gICAgICBtZXRob2ROYW1lID0gX3JlZiRtZXRob2ROYW1lID09PSB1bmRlZmluZWQgPyAnY29ubmVjdEFkdmFuY2VkJyA6IF9yZWYkbWV0aG9kTmFtZSxcbiAgICAgIF9yZWYkcmVuZGVyQ291bnRQcm9wID0gX3JlZi5yZW5kZXJDb3VudFByb3AsXG4gICAgICByZW5kZXJDb3VudFByb3AgPSBfcmVmJHJlbmRlckNvdW50UHJvcCA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogX3JlZiRyZW5kZXJDb3VudFByb3AsXG4gICAgICBfcmVmJHNob3VsZEhhbmRsZVN0YXQgPSBfcmVmLnNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcyxcbiAgICAgIHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcyA9IF9yZWYkc2hvdWxkSGFuZGxlU3RhdCA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IF9yZWYkc2hvdWxkSGFuZGxlU3RhdCxcbiAgICAgIF9yZWYkc3RvcmVLZXkgPSBfcmVmLnN0b3JlS2V5LFxuICAgICAgc3RvcmVLZXkgPSBfcmVmJHN0b3JlS2V5ID09PSB1bmRlZmluZWQgPyAnc3RvcmUnIDogX3JlZiRzdG9yZUtleSxcbiAgICAgIF9yZWYkd2l0aFJlZiA9IF9yZWYud2l0aFJlZixcbiAgICAgIHdpdGhSZWYgPSBfcmVmJHdpdGhSZWYgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogX3JlZiR3aXRoUmVmLFxuICAgICAgY29ubmVjdE9wdGlvbnMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZiwgWydnZXREaXNwbGF5TmFtZScsICdtZXRob2ROYW1lJywgJ3JlbmRlckNvdW50UHJvcCcsICdzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMnLCAnc3RvcmVLZXknLCAnd2l0aFJlZiddKTtcblxuICB2YXIgc3Vic2NyaXB0aW9uS2V5ID0gc3RvcmVLZXkgKyAnU3Vic2NyaXB0aW9uJztcbiAgdmFyIHZlcnNpb24gPSBob3RSZWxvYWRpbmdWZXJzaW9uKys7XG5cbiAgdmFyIGNvbnRleHRUeXBlcyA9IChfY29udGV4dFR5cGVzID0ge30sIF9jb250ZXh0VHlwZXNbc3RvcmVLZXldID0gc3RvcmVTaGFwZSwgX2NvbnRleHRUeXBlc1tzdWJzY3JpcHRpb25LZXldID0gc3Vic2NyaXB0aW9uU2hhcGUsIF9jb250ZXh0VHlwZXMpO1xuICB2YXIgY2hpbGRDb250ZXh0VHlwZXMgPSAoX2NoaWxkQ29udGV4dFR5cGVzID0ge30sIF9jaGlsZENvbnRleHRUeXBlc1tzdWJzY3JpcHRpb25LZXldID0gc3Vic2NyaXB0aW9uU2hhcGUsIF9jaGlsZENvbnRleHRUeXBlcyk7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXBXaXRoQ29ubmVjdChXcmFwcGVkQ29tcG9uZW50KSB7XG4gICAgaW52YXJpYW50KHR5cGVvZiBXcmFwcGVkQ29tcG9uZW50ID09ICdmdW5jdGlvbicsICdZb3UgbXVzdCBwYXNzIGEgY29tcG9uZW50IHRvIHRoZSBmdW5jdGlvbiByZXR1cm5lZCBieSAnICsgKCdjb25uZWN0LiBJbnN0ZWFkIHJlY2VpdmVkICcgKyBKU09OLnN0cmluZ2lmeShXcmFwcGVkQ29tcG9uZW50KSkpO1xuXG4gICAgdmFyIHdyYXBwZWRDb21wb25lbnROYW1lID0gV3JhcHBlZENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBXcmFwcGVkQ29tcG9uZW50Lm5hbWUgfHwgJ0NvbXBvbmVudCc7XG5cbiAgICB2YXIgZGlzcGxheU5hbWUgPSBnZXREaXNwbGF5TmFtZSh3cmFwcGVkQ29tcG9uZW50TmFtZSk7XG5cbiAgICB2YXIgc2VsZWN0b3JGYWN0b3J5T3B0aW9ucyA9IF9leHRlbmRzKHt9LCBjb25uZWN0T3B0aW9ucywge1xuICAgICAgZ2V0RGlzcGxheU5hbWU6IGdldERpc3BsYXlOYW1lLFxuICAgICAgbWV0aG9kTmFtZTogbWV0aG9kTmFtZSxcbiAgICAgIHJlbmRlckNvdW50UHJvcDogcmVuZGVyQ291bnRQcm9wLFxuICAgICAgc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzOiBzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMsXG4gICAgICBzdG9yZUtleTogc3RvcmVLZXksXG4gICAgICB3aXRoUmVmOiB3aXRoUmVmLFxuICAgICAgZGlzcGxheU5hbWU6IGRpc3BsYXlOYW1lLFxuICAgICAgd3JhcHBlZENvbXBvbmVudE5hbWU6IHdyYXBwZWRDb21wb25lbnROYW1lLFxuICAgICAgV3JhcHBlZENvbXBvbmVudDogV3JhcHBlZENvbXBvbmVudFxuICAgIH0pO1xuXG4gICAgdmFyIENvbm5lY3QgPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICAgICAgX2luaGVyaXRzKENvbm5lY3QsIF9Db21wb25lbnQpO1xuXG4gICAgICBmdW5jdGlvbiBDb25uZWN0KHByb3BzLCBjb250ZXh0KSB7XG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDb25uZWN0KTtcblxuICAgICAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMsIGNvbnRleHQpKTtcblxuICAgICAgICBfdGhpcy52ZXJzaW9uID0gdmVyc2lvbjtcbiAgICAgICAgX3RoaXMuc3RhdGUgPSB7fTtcbiAgICAgICAgX3RoaXMucmVuZGVyQ291bnQgPSAwO1xuICAgICAgICBfdGhpcy5zdG9yZSA9IHByb3BzW3N0b3JlS2V5XSB8fCBjb250ZXh0W3N0b3JlS2V5XTtcbiAgICAgICAgX3RoaXMucHJvcHNNb2RlID0gQm9vbGVhbihwcm9wc1tzdG9yZUtleV0pO1xuICAgICAgICBfdGhpcy5zZXRXcmFwcGVkSW5zdGFuY2UgPSBfdGhpcy5zZXRXcmFwcGVkSW5zdGFuY2UuYmluZChfdGhpcyk7XG5cbiAgICAgICAgaW52YXJpYW50KF90aGlzLnN0b3JlLCAnQ291bGQgbm90IGZpbmQgXCInICsgc3RvcmVLZXkgKyAnXCIgaW4gZWl0aGVyIHRoZSBjb250ZXh0IG9yIHByb3BzIG9mICcgKyAoJ1wiJyArIGRpc3BsYXlOYW1lICsgJ1wiLiBFaXRoZXIgd3JhcCB0aGUgcm9vdCBjb21wb25lbnQgaW4gYSA8UHJvdmlkZXI+LCAnKSArICgnb3IgZXhwbGljaXRseSBwYXNzIFwiJyArIHN0b3JlS2V5ICsgJ1wiIGFzIGEgcHJvcCB0byBcIicgKyBkaXNwbGF5TmFtZSArICdcIi4nKSk7XG5cbiAgICAgICAgX3RoaXMuaW5pdFNlbGVjdG9yKCk7XG4gICAgICAgIF90aGlzLmluaXRTdWJzY3JpcHRpb24oKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgICAgfVxuXG4gICAgICBDb25uZWN0LnByb3RvdHlwZS5nZXRDaGlsZENvbnRleHQgPSBmdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKSB7XG4gICAgICAgIHZhciBfcmVmMjtcblxuICAgICAgICAvLyBJZiB0aGlzIGNvbXBvbmVudCByZWNlaXZlZCBzdG9yZSBmcm9tIHByb3BzLCBpdHMgc3Vic2NyaXB0aW9uIHNob3VsZCBiZSB0cmFuc3BhcmVudFxuICAgICAgICAvLyB0byBhbnkgZGVzY2VuZGFudHMgcmVjZWl2aW5nIHN0b3JlK3N1YnNjcmlwdGlvbiBmcm9tIGNvbnRleHQ7IGl0IHBhc3NlcyBhbG9uZ1xuICAgICAgICAvLyBzdWJzY3JpcHRpb24gcGFzc2VkIHRvIGl0LiBPdGhlcndpc2UsIGl0IHNoYWRvd3MgdGhlIHBhcmVudCBzdWJzY3JpcHRpb24sIHdoaWNoIGFsbG93c1xuICAgICAgICAvLyBDb25uZWN0IHRvIGNvbnRyb2wgb3JkZXJpbmcgb2Ygbm90aWZpY2F0aW9ucyB0byBmbG93IHRvcC1kb3duLlxuICAgICAgICB2YXIgc3Vic2NyaXB0aW9uID0gdGhpcy5wcm9wc01vZGUgPyBudWxsIDogdGhpcy5zdWJzY3JpcHRpb247XG4gICAgICAgIHJldHVybiBfcmVmMiA9IHt9LCBfcmVmMltzdWJzY3JpcHRpb25LZXldID0gc3Vic2NyaXB0aW9uIHx8IHRoaXMuY29udGV4dFtzdWJzY3JpcHRpb25LZXldLCBfcmVmMjtcbiAgICAgIH07XG5cbiAgICAgIENvbm5lY3QucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICAgIGlmICghc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzKSByZXR1cm47XG5cbiAgICAgICAgLy8gY29tcG9uZW50V2lsbE1vdW50IGZpcmVzIGR1cmluZyBzZXJ2ZXIgc2lkZSByZW5kZXJpbmcsIGJ1dCBjb21wb25lbnREaWRNb3VudCBhbmRcbiAgICAgICAgLy8gY29tcG9uZW50V2lsbFVubW91bnQgZG8gbm90LiBCZWNhdXNlIG9mIHRoaXMsIHRyeVN1YnNjcmliZSBoYXBwZW5zIGR1cmluZyAuLi5kaWRNb3VudC5cbiAgICAgICAgLy8gT3RoZXJ3aXNlLCB1bnN1YnNjcmlwdGlvbiB3b3VsZCBuZXZlciB0YWtlIHBsYWNlIGR1cmluZyBTU1IsIGNhdXNpbmcgYSBtZW1vcnkgbGVhay5cbiAgICAgICAgLy8gVG8gaGFuZGxlIHRoZSBjYXNlIHdoZXJlIGEgY2hpbGQgY29tcG9uZW50IG1heSBoYXZlIHRyaWdnZXJlZCBhIHN0YXRlIGNoYW5nZSBieVxuICAgICAgICAvLyBkaXNwYXRjaGluZyBhbiBhY3Rpb24gaW4gaXRzIGNvbXBvbmVudFdpbGxNb3VudCwgd2UgaGF2ZSB0byByZS1ydW4gdGhlIHNlbGVjdCBhbmQgbWF5YmVcbiAgICAgICAgLy8gcmUtcmVuZGVyLlxuICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbi50cnlTdWJzY3JpYmUoKTtcbiAgICAgICAgdGhpcy5zZWxlY3Rvci5ydW4odGhpcy5wcm9wcyk7XG4gICAgICAgIGlmICh0aGlzLnNlbGVjdG9yLnNob3VsZENvbXBvbmVudFVwZGF0ZSkgdGhpcy5mb3JjZVVwZGF0ZSgpO1xuICAgICAgfTtcblxuICAgICAgQ29ubmVjdC5wcm90b3R5cGUuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgICAgIHRoaXMuc2VsZWN0b3IucnVuKG5leHRQcm9wcyk7XG4gICAgICB9O1xuXG4gICAgICBDb25uZWN0LnByb3RvdHlwZS5zaG91bGRDb21wb25lbnRVcGRhdGUgPSBmdW5jdGlvbiBzaG91bGRDb21wb25lbnRVcGRhdGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNlbGVjdG9yLnNob3VsZENvbXBvbmVudFVwZGF0ZTtcbiAgICAgIH07XG5cbiAgICAgIENvbm5lY3QucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICAgIGlmICh0aGlzLnN1YnNjcmlwdGlvbikgdGhpcy5zdWJzY3JpcHRpb24udHJ5VW5zdWJzY3JpYmUoKTtcbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb24gPSBudWxsO1xuICAgICAgICB0aGlzLm5vdGlmeU5lc3RlZFN1YnMgPSBub29wO1xuICAgICAgICB0aGlzLnN0b3JlID0gbnVsbDtcbiAgICAgICAgdGhpcy5zZWxlY3Rvci5ydW4gPSBub29wO1xuICAgICAgICB0aGlzLnNlbGVjdG9yLnNob3VsZENvbXBvbmVudFVwZGF0ZSA9IGZhbHNlO1xuICAgICAgfTtcblxuICAgICAgQ29ubmVjdC5wcm90b3R5cGUuZ2V0V3JhcHBlZEluc3RhbmNlID0gZnVuY3Rpb24gZ2V0V3JhcHBlZEluc3RhbmNlKCkge1xuICAgICAgICBpbnZhcmlhbnQod2l0aFJlZiwgJ1RvIGFjY2VzcyB0aGUgd3JhcHBlZCBpbnN0YW5jZSwgeW91IG5lZWQgdG8gc3BlY2lmeSAnICsgKCd7IHdpdGhSZWY6IHRydWUgfSBpbiB0aGUgb3B0aW9ucyBhcmd1bWVudCBvZiB0aGUgJyArIG1ldGhvZE5hbWUgKyAnKCkgY2FsbC4nKSk7XG4gICAgICAgIHJldHVybiB0aGlzLndyYXBwZWRJbnN0YW5jZTtcbiAgICAgIH07XG5cbiAgICAgIENvbm5lY3QucHJvdG90eXBlLnNldFdyYXBwZWRJbnN0YW5jZSA9IGZ1bmN0aW9uIHNldFdyYXBwZWRJbnN0YW5jZShyZWYpIHtcbiAgICAgICAgdGhpcy53cmFwcGVkSW5zdGFuY2UgPSByZWY7XG4gICAgICB9O1xuXG4gICAgICBDb25uZWN0LnByb3RvdHlwZS5pbml0U2VsZWN0b3IgPSBmdW5jdGlvbiBpbml0U2VsZWN0b3IoKSB7XG4gICAgICAgIHZhciBzb3VyY2VTZWxlY3RvciA9IHNlbGVjdG9yRmFjdG9yeSh0aGlzLnN0b3JlLmRpc3BhdGNoLCBzZWxlY3RvckZhY3RvcnlPcHRpb25zKTtcbiAgICAgICAgdGhpcy5zZWxlY3RvciA9IG1ha2VTZWxlY3RvclN0YXRlZnVsKHNvdXJjZVNlbGVjdG9yLCB0aGlzLnN0b3JlKTtcbiAgICAgICAgdGhpcy5zZWxlY3Rvci5ydW4odGhpcy5wcm9wcyk7XG4gICAgICB9O1xuXG4gICAgICBDb25uZWN0LnByb3RvdHlwZS5pbml0U3Vic2NyaXB0aW9uID0gZnVuY3Rpb24gaW5pdFN1YnNjcmlwdGlvbigpIHtcbiAgICAgICAgaWYgKCFzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMpIHJldHVybjtcblxuICAgICAgICAvLyBwYXJlbnRTdWIncyBzb3VyY2Ugc2hvdWxkIG1hdGNoIHdoZXJlIHN0b3JlIGNhbWUgZnJvbTogcHJvcHMgdnMuIGNvbnRleHQuIEEgY29tcG9uZW50XG4gICAgICAgIC8vIGNvbm5lY3RlZCB0byB0aGUgc3RvcmUgdmlhIHByb3BzIHNob3VsZG4ndCB1c2Ugc3Vic2NyaXB0aW9uIGZyb20gY29udGV4dCwgb3IgdmljZSB2ZXJzYS5cbiAgICAgICAgdmFyIHBhcmVudFN1YiA9ICh0aGlzLnByb3BzTW9kZSA/IHRoaXMucHJvcHMgOiB0aGlzLmNvbnRleHQpW3N1YnNjcmlwdGlvbktleV07XG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9uID0gbmV3IFN1YnNjcmlwdGlvbih0aGlzLnN0b3JlLCBwYXJlbnRTdWIsIHRoaXMub25TdGF0ZUNoYW5nZS5iaW5kKHRoaXMpKTtcblxuICAgICAgICAvLyBgbm90aWZ5TmVzdGVkU3Vic2AgaXMgZHVwbGljYXRlZCB0byBoYW5kbGUgdGhlIGNhc2Ugd2hlcmUgdGhlIGNvbXBvbmVudCBpcyAgdW5tb3VudGVkIGluXG4gICAgICAgIC8vIHRoZSBtaWRkbGUgb2YgdGhlIG5vdGlmaWNhdGlvbiBsb29wLCB3aGVyZSBgdGhpcy5zdWJzY3JpcHRpb25gIHdpbGwgdGhlbiBiZSBudWxsLiBBblxuICAgICAgICAvLyBleHRyYSBudWxsIGNoZWNrIGV2ZXJ5IGNoYW5nZSBjYW4gYmUgYXZvaWRlZCBieSBjb3B5aW5nIHRoZSBtZXRob2Qgb250byBgdGhpc2AgYW5kIHRoZW5cbiAgICAgICAgLy8gcmVwbGFjaW5nIGl0IHdpdGggYSBuby1vcCBvbiB1bm1vdW50LiBUaGlzIGNhbiBwcm9iYWJseSBiZSBhdm9pZGVkIGlmIFN1YnNjcmlwdGlvbidzXG4gICAgICAgIC8vIGxpc3RlbmVycyBsb2dpYyBpcyBjaGFuZ2VkIHRvIG5vdCBjYWxsIGxpc3RlbmVycyB0aGF0IGhhdmUgYmVlbiB1bnN1YnNjcmliZWQgaW4gdGhlXG4gICAgICAgIC8vIG1pZGRsZSBvZiB0aGUgbm90aWZpY2F0aW9uIGxvb3AuXG4gICAgICAgIHRoaXMubm90aWZ5TmVzdGVkU3VicyA9IHRoaXMuc3Vic2NyaXB0aW9uLm5vdGlmeU5lc3RlZFN1YnMuYmluZCh0aGlzLnN1YnNjcmlwdGlvbik7XG4gICAgICB9O1xuXG4gICAgICBDb25uZWN0LnByb3RvdHlwZS5vblN0YXRlQ2hhbmdlID0gZnVuY3Rpb24gb25TdGF0ZUNoYW5nZSgpIHtcbiAgICAgICAgdGhpcy5zZWxlY3Rvci5ydW4odGhpcy5wcm9wcyk7XG5cbiAgICAgICAgaWYgKCF0aGlzLnNlbGVjdG9yLnNob3VsZENvbXBvbmVudFVwZGF0ZSkge1xuICAgICAgICAgIHRoaXMubm90aWZ5TmVzdGVkU3VicygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuY29tcG9uZW50RGlkVXBkYXRlID0gdGhpcy5ub3RpZnlOZXN0ZWRTdWJzT25Db21wb25lbnREaWRVcGRhdGU7XG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZShkdW1teVN0YXRlKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgQ29ubmVjdC5wcm90b3R5cGUubm90aWZ5TmVzdGVkU3Vic09uQ29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gbm90aWZ5TmVzdGVkU3Vic09uQ29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgICAgICAvLyBgY29tcG9uZW50RGlkVXBkYXRlYCBpcyBjb25kaXRpb25hbGx5IGltcGxlbWVudGVkIHdoZW4gYG9uU3RhdGVDaGFuZ2VgIGRldGVybWluZXMgaXRcbiAgICAgICAgLy8gbmVlZHMgdG8gbm90aWZ5IG5lc3RlZCBzdWJzLiBPbmNlIGNhbGxlZCwgaXQgdW5pbXBsZW1lbnRzIGl0c2VsZiB1bnRpbCBmdXJ0aGVyIHN0YXRlXG4gICAgICAgIC8vIGNoYW5nZXMgb2NjdXIuIERvaW5nIGl0IHRoaXMgd2F5IHZzIGhhdmluZyBhIHBlcm1hbmVudCBgY29tcG9uZW50RGlkTW91bnRgIHRoYXQgZG9lc1xuICAgICAgICAvLyBhIGJvb2xlYW4gY2hlY2sgZXZlcnkgdGltZSBhdm9pZHMgYW4gZXh0cmEgbWV0aG9kIGNhbGwgbW9zdCBvZiB0aGUgdGltZSwgcmVzdWx0aW5nXG4gICAgICAgIC8vIGluIHNvbWUgcGVyZiBib29zdC5cbiAgICAgICAgdGhpcy5jb21wb25lbnREaWRVcGRhdGUgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMubm90aWZ5TmVzdGVkU3VicygpO1xuICAgICAgfTtcblxuICAgICAgQ29ubmVjdC5wcm90b3R5cGUuaXNTdWJzY3JpYmVkID0gZnVuY3Rpb24gaXNTdWJzY3JpYmVkKCkge1xuICAgICAgICByZXR1cm4gQm9vbGVhbih0aGlzLnN1YnNjcmlwdGlvbikgJiYgdGhpcy5zdWJzY3JpcHRpb24uaXNTdWJzY3JpYmVkKCk7XG4gICAgICB9O1xuXG4gICAgICBDb25uZWN0LnByb3RvdHlwZS5hZGRFeHRyYVByb3BzID0gZnVuY3Rpb24gYWRkRXh0cmFQcm9wcyhwcm9wcykge1xuICAgICAgICBpZiAoIXdpdGhSZWYgJiYgIXJlbmRlckNvdW50UHJvcCAmJiAhKHRoaXMucHJvcHNNb2RlICYmIHRoaXMuc3Vic2NyaXB0aW9uKSkgcmV0dXJuIHByb3BzO1xuICAgICAgICAvLyBtYWtlIGEgc2hhbGxvdyBjb3B5IHNvIHRoYXQgZmllbGRzIGFkZGVkIGRvbid0IGxlYWsgdG8gdGhlIG9yaWdpbmFsIHNlbGVjdG9yLlxuICAgICAgICAvLyB0aGlzIGlzIGVzcGVjaWFsbHkgaW1wb3J0YW50IGZvciAncmVmJyBzaW5jZSB0aGF0J3MgYSByZWZlcmVuY2UgYmFjayB0byB0aGUgY29tcG9uZW50XG4gICAgICAgIC8vIGluc3RhbmNlLiBhIHNpbmdsZXRvbiBtZW1vaXplZCBzZWxlY3RvciB3b3VsZCB0aGVuIGJlIGhvbGRpbmcgYSByZWZlcmVuY2UgdG8gdGhlXG4gICAgICAgIC8vIGluc3RhbmNlLCBwcmV2ZW50aW5nIHRoZSBpbnN0YW5jZSBmcm9tIGJlaW5nIGdhcmJhZ2UgY29sbGVjdGVkLCBhbmQgdGhhdCB3b3VsZCBiZSBiYWRcbiAgICAgICAgdmFyIHdpdGhFeHRyYXMgPSBfZXh0ZW5kcyh7fSwgcHJvcHMpO1xuICAgICAgICBpZiAod2l0aFJlZikgd2l0aEV4dHJhcy5yZWYgPSB0aGlzLnNldFdyYXBwZWRJbnN0YW5jZTtcbiAgICAgICAgaWYgKHJlbmRlckNvdW50UHJvcCkgd2l0aEV4dHJhc1tyZW5kZXJDb3VudFByb3BdID0gdGhpcy5yZW5kZXJDb3VudCsrO1xuICAgICAgICBpZiAodGhpcy5wcm9wc01vZGUgJiYgdGhpcy5zdWJzY3JpcHRpb24pIHdpdGhFeHRyYXNbc3Vic2NyaXB0aW9uS2V5XSA9IHRoaXMuc3Vic2NyaXB0aW9uO1xuICAgICAgICByZXR1cm4gd2l0aEV4dHJhcztcbiAgICAgIH07XG5cbiAgICAgIENvbm5lY3QucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgdmFyIHNlbGVjdG9yID0gdGhpcy5zZWxlY3RvcjtcbiAgICAgICAgc2VsZWN0b3Iuc2hvdWxkQ29tcG9uZW50VXBkYXRlID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKHNlbGVjdG9yLmVycm9yKSB7XG4gICAgICAgICAgdGhyb3cgc2VsZWN0b3IuZXJyb3I7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQoV3JhcHBlZENvbXBvbmVudCwgdGhpcy5hZGRFeHRyYVByb3BzKHNlbGVjdG9yLnByb3BzKSk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHJldHVybiBDb25uZWN0O1xuICAgIH0oQ29tcG9uZW50KTtcblxuICAgIENvbm5lY3QuV3JhcHBlZENvbXBvbmVudCA9IFdyYXBwZWRDb21wb25lbnQ7XG4gICAgQ29ubmVjdC5kaXNwbGF5TmFtZSA9IGRpc3BsYXlOYW1lO1xuICAgIENvbm5lY3QuY2hpbGRDb250ZXh0VHlwZXMgPSBjaGlsZENvbnRleHRUeXBlcztcbiAgICBDb25uZWN0LmNvbnRleHRUeXBlcyA9IGNvbnRleHRUeXBlcztcbiAgICBDb25uZWN0LnByb3BUeXBlcyA9IGNvbnRleHRUeXBlcztcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBDb25uZWN0LnByb3RvdHlwZS5jb21wb25lbnRXaWxsVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVwZGF0ZSgpIHtcbiAgICAgICAgLy8gV2UgYXJlIGhvdCByZWxvYWRpbmchXG4gICAgICAgIGlmICh0aGlzLnZlcnNpb24gIT09IHZlcnNpb24pIHtcbiAgICAgICAgICB0aGlzLnZlcnNpb24gPSB2ZXJzaW9uO1xuICAgICAgICAgIHRoaXMuaW5pdFNlbGVjdG9yKCk7XG5cbiAgICAgICAgICBpZiAodGhpcy5zdWJzY3JpcHRpb24pIHRoaXMuc3Vic2NyaXB0aW9uLnRyeVVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgdGhpcy5pbml0U3Vic2NyaXB0aW9uKCk7XG4gICAgICAgICAgaWYgKHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcykgdGhpcy5zdWJzY3JpcHRpb24udHJ5U3Vic2NyaWJlKCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIGhvaXN0U3RhdGljcyhDb25uZWN0LCBXcmFwcGVkQ29tcG9uZW50KTtcbiAgfTtcbn0iLCJ2YXIgaGFzT3duID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxuZnVuY3Rpb24gaXMoeCwgeSkge1xuICBpZiAoeCA9PT0geSkge1xuICAgIHJldHVybiB4ICE9PSAwIHx8IHkgIT09IDAgfHwgMSAvIHggPT09IDEgLyB5O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB4ICE9PSB4ICYmIHkgIT09IHk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2hhbGxvd0VxdWFsKG9iakEsIG9iakIpIHtcbiAgaWYgKGlzKG9iakEsIG9iakIpKSByZXR1cm4gdHJ1ZTtcblxuICBpZiAodHlwZW9mIG9iakEgIT09ICdvYmplY3QnIHx8IG9iakEgPT09IG51bGwgfHwgdHlwZW9mIG9iakIgIT09ICdvYmplY3QnIHx8IG9iakIgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIga2V5c0EgPSBPYmplY3Qua2V5cyhvYmpBKTtcbiAgdmFyIGtleXNCID0gT2JqZWN0LmtleXMob2JqQik7XG5cbiAgaWYgKGtleXNBLmxlbmd0aCAhPT0ga2V5c0IubGVuZ3RoKSByZXR1cm4gZmFsc2U7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzQS5sZW5ndGg7IGkrKykge1xuICAgIGlmICghaGFzT3duLmNhbGwob2JqQiwga2V5c0FbaV0pIHx8ICFpcyhvYmpBW2tleXNBW2ldXSwgb2JqQltrZXlzQVtpXV0pKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59IiwiaW1wb3J0IGZyZWVHbG9iYWwgZnJvbSAnLi9fZnJlZUdsb2JhbC5qcyc7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgc2VsZmAuICovXG52YXIgZnJlZVNlbGYgPSB0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmICYmIHNlbGYuT2JqZWN0ID09PSBPYmplY3QgJiYgc2VsZjtcblxuLyoqIFVzZWQgYXMgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbCBvYmplY3QuICovXG52YXIgcm9vdCA9IGZyZWVHbG9iYWwgfHwgZnJlZVNlbGYgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblxuZXhwb3J0IGRlZmF1bHQgcm9vdDtcbiIsImltcG9ydCByb290IGZyb20gJy4vX3Jvb3QuanMnO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBTeW1ib2wgPSByb290LlN5bWJvbDtcblxuZXhwb3J0IGRlZmF1bHQgU3ltYm9sO1xuIiwiaW1wb3J0IFN5bWJvbCBmcm9tICcuL19TeW1ib2wuanMnO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgbmF0aXZlT2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgc3ltVG9TdHJpbmdUYWcgPSBTeW1ib2wgPyBTeW1ib2wudG9TdHJpbmdUYWcgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlR2V0VGFnYCB3aGljaCBpZ25vcmVzIGBTeW1ib2wudG9TdHJpbmdUYWdgIHZhbHVlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSByYXcgYHRvU3RyaW5nVGFnYC5cbiAqL1xuZnVuY3Rpb24gZ2V0UmF3VGFnKHZhbHVlKSB7XG4gIHZhciBpc093biA9IGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIHN5bVRvU3RyaW5nVGFnKSxcbiAgICAgIHRhZyA9IHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcblxuICB0cnkge1xuICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHVuZGVmaW5lZDtcbiAgICB2YXIgdW5tYXNrZWQgPSB0cnVlO1xuICB9IGNhdGNoIChlKSB7fVxuXG4gIHZhciByZXN1bHQgPSBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgaWYgKHVubWFza2VkKSB7XG4gICAgaWYgKGlzT3duKSB7XG4gICAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB0YWc7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlbGV0ZSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGdldFJhd1RhZztcbiIsIi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKlxuICogVXNlZCB0byByZXNvbHZlIHRoZVxuICogW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gKiBvZiB2YWx1ZXMuXG4gKi9cbnZhciBuYXRpdmVPYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcgdXNpbmcgYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gb2JqZWN0VG9TdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBvYmplY3RUb1N0cmluZztcbiIsImltcG9ydCBTeW1ib2wgZnJvbSAnLi9fU3ltYm9sLmpzJztcbmltcG9ydCBnZXRSYXdUYWcgZnJvbSAnLi9fZ2V0UmF3VGFnLmpzJztcbmltcG9ydCBvYmplY3RUb1N0cmluZyBmcm9tICcuL19vYmplY3RUb1N0cmluZy5qcyc7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBudWxsVGFnID0gJ1tvYmplY3QgTnVsbF0nLFxuICAgIHVuZGVmaW5lZFRhZyA9ICdbb2JqZWN0IFVuZGVmaW5lZF0nO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBzeW1Ub1N0cmluZ1RhZyA9IFN5bWJvbCA/IFN5bWJvbC50b1N0cmluZ1RhZyA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgZ2V0VGFnYCB3aXRob3V0IGZhbGxiYWNrcyBmb3IgYnVnZ3kgZW52aXJvbm1lbnRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGB0b1N0cmluZ1RhZ2AuXG4gKi9cbmZ1bmN0aW9uIGJhc2VHZXRUYWcodmFsdWUpIHtcbiAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZFRhZyA6IG51bGxUYWc7XG4gIH1cbiAgcmV0dXJuIChzeW1Ub1N0cmluZ1RhZyAmJiBzeW1Ub1N0cmluZ1RhZyBpbiBPYmplY3QodmFsdWUpKVxuICAgID8gZ2V0UmF3VGFnKHZhbHVlKVxuICAgIDogb2JqZWN0VG9TdHJpbmcodmFsdWUpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlR2V0VGFnO1xuIiwiLyoqXG4gKiBDcmVhdGVzIGEgdW5hcnkgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIGl0cyBhcmd1bWVudCB0cmFuc2Zvcm1lZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHRyYW5zZm9ybSBUaGUgYXJndW1lbnQgdHJhbnNmb3JtLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIG92ZXJBcmcoZnVuYywgdHJhbnNmb3JtKSB7XG4gIHJldHVybiBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4gZnVuYyh0cmFuc2Zvcm0oYXJnKSk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IG92ZXJBcmc7XG4iLCJpbXBvcnQgb3ZlckFyZyBmcm9tICcuL19vdmVyQXJnLmpzJztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgZ2V0UHJvdG90eXBlID0gb3ZlckFyZyhPYmplY3QuZ2V0UHJvdG90eXBlT2YsIE9iamVjdCk7XG5cbmV4cG9ydCBkZWZhdWx0IGdldFByb3RvdHlwZTtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UuIEEgdmFsdWUgaXMgb2JqZWN0LWxpa2UgaWYgaXQncyBub3QgYG51bGxgXG4gKiBhbmQgaGFzIGEgYHR5cGVvZmAgcmVzdWx0IG9mIFwib2JqZWN0XCIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdExpa2Uoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc09iamVjdExpa2UobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdExpa2UodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc09iamVjdExpa2U7XG4iLCJpbXBvcnQgYmFzZUdldFRhZyBmcm9tICcuL19iYXNlR2V0VGFnLmpzJztcbmltcG9ydCBnZXRQcm90b3R5cGUgZnJvbSAnLi9fZ2V0UHJvdG90eXBlLmpzJztcbmltcG9ydCBpc09iamVjdExpa2UgZnJvbSAnLi9pc09iamVjdExpa2UuanMnO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0VGFnID0gJ1tvYmplY3QgT2JqZWN0XSc7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBmdW5jUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGUsXG4gICAgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byByZXNvbHZlIHRoZSBkZWNvbXBpbGVkIHNvdXJjZSBvZiBmdW5jdGlvbnMuICovXG52YXIgZnVuY1RvU3RyaW5nID0gZnVuY1Byb3RvLnRvU3RyaW5nO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKiogVXNlZCB0byBpbmZlciB0aGUgYE9iamVjdGAgY29uc3RydWN0b3IuICovXG52YXIgb2JqZWN0Q3RvclN0cmluZyA9IGZ1bmNUb1N0cmluZy5jYWxsKE9iamVjdCk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBwbGFpbiBvYmplY3QsIHRoYXQgaXMsIGFuIG9iamVjdCBjcmVhdGVkIGJ5IHRoZVxuICogYE9iamVjdGAgY29uc3RydWN0b3Igb3Igb25lIHdpdGggYSBgW1tQcm90b3R5cGVdXWAgb2YgYG51bGxgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC44LjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcGxhaW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIGZ1bmN0aW9uIEZvbygpIHtcbiAqICAgdGhpcy5hID0gMTtcbiAqIH1cbiAqXG4gKiBfLmlzUGxhaW5PYmplY3QobmV3IEZvbyk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNQbGFpbk9iamVjdChbMSwgMiwgM10pO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzUGxhaW5PYmplY3QoeyAneCc6IDAsICd5JzogMCB9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzUGxhaW5PYmplY3QoT2JqZWN0LmNyZWF0ZShudWxsKSk7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3QodmFsdWUpIHtcbiAgaWYgKCFpc09iamVjdExpa2UodmFsdWUpIHx8IGJhc2VHZXRUYWcodmFsdWUpICE9IG9iamVjdFRhZykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgcHJvdG8gPSBnZXRQcm90b3R5cGUodmFsdWUpO1xuICBpZiAocHJvdG8gPT09IG51bGwpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICB2YXIgQ3RvciA9IGhhc093blByb3BlcnR5LmNhbGwocHJvdG8sICdjb25zdHJ1Y3RvcicpICYmIHByb3RvLmNvbnN0cnVjdG9yO1xuICByZXR1cm4gdHlwZW9mIEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBDdG9yIGluc3RhbmNlb2YgQ3RvciAmJlxuICAgIGZ1bmNUb1N0cmluZy5jYWxsKEN0b3IpID09IG9iamVjdEN0b3JTdHJpbmc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzUGxhaW5PYmplY3Q7XG4iLCJpbXBvcnQgdmVyaWZ5UGxhaW5PYmplY3QgZnJvbSAnLi4vdXRpbHMvdmVyaWZ5UGxhaW5PYmplY3QnO1xuXG5leHBvcnQgZnVuY3Rpb24gd3JhcE1hcFRvUHJvcHNDb25zdGFudChnZXRDb25zdGFudCkge1xuICByZXR1cm4gZnVuY3Rpb24gaW5pdENvbnN0YW50U2VsZWN0b3IoZGlzcGF0Y2gsIG9wdGlvbnMpIHtcbiAgICB2YXIgY29uc3RhbnQgPSBnZXRDb25zdGFudChkaXNwYXRjaCwgb3B0aW9ucyk7XG5cbiAgICBmdW5jdGlvbiBjb25zdGFudFNlbGVjdG9yKCkge1xuICAgICAgcmV0dXJuIGNvbnN0YW50O1xuICAgIH1cbiAgICBjb25zdGFudFNlbGVjdG9yLmRlcGVuZHNPbk93blByb3BzID0gZmFsc2U7XG4gICAgcmV0dXJuIGNvbnN0YW50U2VsZWN0b3I7XG4gIH07XG59XG5cbi8vIGRlcGVuZHNPbk93blByb3BzIGlzIHVzZWQgYnkgY3JlYXRlTWFwVG9Qcm9wc1Byb3h5IHRvIGRldGVybWluZSB3aGV0aGVyIHRvIHBhc3MgcHJvcHMgYXMgYXJnc1xuLy8gdG8gdGhlIG1hcFRvUHJvcHMgZnVuY3Rpb24gYmVpbmcgd3JhcHBlZC4gSXQgaXMgYWxzbyB1c2VkIGJ5IG1ha2VQdXJlUHJvcHNTZWxlY3RvciB0byBkZXRlcm1pbmVcbi8vIHdoZXRoZXIgbWFwVG9Qcm9wcyBuZWVkcyB0byBiZSBpbnZva2VkIHdoZW4gcHJvcHMgaGF2ZSBjaGFuZ2VkLlxuLy8gXG4vLyBBIGxlbmd0aCBvZiBvbmUgc2lnbmFscyB0aGF0IG1hcFRvUHJvcHMgZG9lcyBub3QgZGVwZW5kIG9uIHByb3BzIGZyb20gdGhlIHBhcmVudCBjb21wb25lbnQuXG4vLyBBIGxlbmd0aCBvZiB6ZXJvIGlzIGFzc3VtZWQgdG8gbWVhbiBtYXBUb1Byb3BzIGlzIGdldHRpbmcgYXJncyB2aWEgYXJndW1lbnRzIG9yIC4uLmFyZ3MgYW5kXG4vLyB0aGVyZWZvcmUgbm90IHJlcG9ydGluZyBpdHMgbGVuZ3RoIGFjY3VyYXRlbHkuLlxuZXhwb3J0IGZ1bmN0aW9uIGdldERlcGVuZHNPbk93blByb3BzKG1hcFRvUHJvcHMpIHtcbiAgcmV0dXJuIG1hcFRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMgIT09IG51bGwgJiYgbWFwVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcyAhPT0gdW5kZWZpbmVkID8gQm9vbGVhbihtYXBUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzKSA6IG1hcFRvUHJvcHMubGVuZ3RoICE9PSAxO1xufVxuXG4vLyBVc2VkIGJ5IHdoZW5NYXBTdGF0ZVRvUHJvcHNJc0Z1bmN0aW9uIGFuZCB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNGdW5jdGlvbixcbi8vIHRoaXMgZnVuY3Rpb24gd3JhcHMgbWFwVG9Qcm9wcyBpbiBhIHByb3h5IGZ1bmN0aW9uIHdoaWNoIGRvZXMgc2V2ZXJhbCB0aGluZ3M6XG4vLyBcbi8vICAqIERldGVjdHMgd2hldGhlciB0aGUgbWFwVG9Qcm9wcyBmdW5jdGlvbiBiZWluZyBjYWxsZWQgZGVwZW5kcyBvbiBwcm9wcywgd2hpY2hcbi8vICAgIGlzIHVzZWQgYnkgc2VsZWN0b3JGYWN0b3J5IHRvIGRlY2lkZSBpZiBpdCBzaG91bGQgcmVpbnZva2Ugb24gcHJvcHMgY2hhbmdlcy5cbi8vICAgIFxuLy8gICogT24gZmlyc3QgY2FsbCwgaGFuZGxlcyBtYXBUb1Byb3BzIGlmIHJldHVybnMgYW5vdGhlciBmdW5jdGlvbiwgYW5kIHRyZWF0cyB0aGF0XG4vLyAgICBuZXcgZnVuY3Rpb24gYXMgdGhlIHRydWUgbWFwVG9Qcm9wcyBmb3Igc3Vic2VxdWVudCBjYWxscy5cbi8vICAgIFxuLy8gICogT24gZmlyc3QgY2FsbCwgdmVyaWZpZXMgdGhlIGZpcnN0IHJlc3VsdCBpcyBhIHBsYWluIG9iamVjdCwgaW4gb3JkZXIgdG8gd2FyblxuLy8gICAgdGhlIGRldmVsb3BlciB0aGF0IHRoZWlyIG1hcFRvUHJvcHMgZnVuY3Rpb24gaXMgbm90IHJldHVybmluZyBhIHZhbGlkIHJlc3VsdC5cbi8vICAgIFxuZXhwb3J0IGZ1bmN0aW9uIHdyYXBNYXBUb1Byb3BzRnVuYyhtYXBUb1Byb3BzLCBtZXRob2ROYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpbml0UHJveHlTZWxlY3RvcihkaXNwYXRjaCwgX3JlZikge1xuICAgIHZhciBkaXNwbGF5TmFtZSA9IF9yZWYuZGlzcGxheU5hbWU7XG5cbiAgICB2YXIgcHJveHkgPSBmdW5jdGlvbiBtYXBUb1Byb3BzUHJveHkoc3RhdGVPckRpc3BhdGNoLCBvd25Qcm9wcykge1xuICAgICAgcmV0dXJuIHByb3h5LmRlcGVuZHNPbk93blByb3BzID8gcHJveHkubWFwVG9Qcm9wcyhzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKSA6IHByb3h5Lm1hcFRvUHJvcHMoc3RhdGVPckRpc3BhdGNoKTtcbiAgICB9O1xuXG4gICAgLy8gYWxsb3cgZGV0ZWN0RmFjdG9yeUFuZFZlcmlmeSB0byBnZXQgb3duUHJvcHNcbiAgICBwcm94eS5kZXBlbmRzT25Pd25Qcm9wcyA9IHRydWU7XG5cbiAgICBwcm94eS5tYXBUb1Byb3BzID0gZnVuY3Rpb24gZGV0ZWN0RmFjdG9yeUFuZFZlcmlmeShzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKSB7XG4gICAgICBwcm94eS5tYXBUb1Byb3BzID0gbWFwVG9Qcm9wcztcbiAgICAgIHByb3h5LmRlcGVuZHNPbk93blByb3BzID0gZ2V0RGVwZW5kc09uT3duUHJvcHMobWFwVG9Qcm9wcyk7XG4gICAgICB2YXIgcHJvcHMgPSBwcm94eShzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKTtcblxuICAgICAgaWYgKHR5cGVvZiBwcm9wcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBwcm94eS5tYXBUb1Byb3BzID0gcHJvcHM7XG4gICAgICAgIHByb3h5LmRlcGVuZHNPbk93blByb3BzID0gZ2V0RGVwZW5kc09uT3duUHJvcHMocHJvcHMpO1xuICAgICAgICBwcm9wcyA9IHByb3h5KHN0YXRlT3JEaXNwYXRjaCwgb3duUHJvcHMpO1xuICAgICAgfVxuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgdmVyaWZ5UGxhaW5PYmplY3QocHJvcHMsIGRpc3BsYXlOYW1lLCBtZXRob2ROYW1lKTtcblxuICAgICAgcmV0dXJuIHByb3BzO1xuICAgIH07XG5cbiAgICByZXR1cm4gcHJveHk7XG4gIH07XG59IiwiaW1wb3J0IHsgYmluZEFjdGlvbkNyZWF0b3JzIH0gZnJvbSAncmVkdXgnO1xuaW1wb3J0IHsgd3JhcE1hcFRvUHJvcHNDb25zdGFudCwgd3JhcE1hcFRvUHJvcHNGdW5jIH0gZnJvbSAnLi93cmFwTWFwVG9Qcm9wcyc7XG5cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNGdW5jdGlvbihtYXBEaXNwYXRjaFRvUHJvcHMpIHtcbiAgcmV0dXJuIHR5cGVvZiBtYXBEaXNwYXRjaFRvUHJvcHMgPT09ICdmdW5jdGlvbicgPyB3cmFwTWFwVG9Qcm9wc0Z1bmMobWFwRGlzcGF0Y2hUb1Byb3BzLCAnbWFwRGlzcGF0Y2hUb1Byb3BzJykgOiB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNNaXNzaW5nKG1hcERpc3BhdGNoVG9Qcm9wcykge1xuICByZXR1cm4gIW1hcERpc3BhdGNoVG9Qcm9wcyA/IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQoZnVuY3Rpb24gKGRpc3BhdGNoKSB7XG4gICAgcmV0dXJuIHsgZGlzcGF0Y2g6IGRpc3BhdGNoIH07XG4gIH0pIDogdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzT2JqZWN0KG1hcERpc3BhdGNoVG9Qcm9wcykge1xuICByZXR1cm4gbWFwRGlzcGF0Y2hUb1Byb3BzICYmIHR5cGVvZiBtYXBEaXNwYXRjaFRvUHJvcHMgPT09ICdvYmplY3QnID8gd3JhcE1hcFRvUHJvcHNDb25zdGFudChmdW5jdGlvbiAoZGlzcGF0Y2gpIHtcbiAgICByZXR1cm4gYmluZEFjdGlvbkNyZWF0b3JzKG1hcERpc3BhdGNoVG9Qcm9wcywgZGlzcGF0Y2gpO1xuICB9KSA6IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgW3doZW5NYXBEaXNwYXRjaFRvUHJvcHNJc0Z1bmN0aW9uLCB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNNaXNzaW5nLCB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNPYmplY3RdOyIsImltcG9ydCB7IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQsIHdyYXBNYXBUb1Byb3BzRnVuYyB9IGZyb20gJy4vd3JhcE1hcFRvUHJvcHMnO1xuXG5leHBvcnQgZnVuY3Rpb24gd2hlbk1hcFN0YXRlVG9Qcm9wc0lzRnVuY3Rpb24obWFwU3RhdGVUb1Byb3BzKSB7XG4gIHJldHVybiB0eXBlb2YgbWFwU3RhdGVUb1Byb3BzID09PSAnZnVuY3Rpb24nID8gd3JhcE1hcFRvUHJvcHNGdW5jKG1hcFN0YXRlVG9Qcm9wcywgJ21hcFN0YXRlVG9Qcm9wcycpIDogdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gd2hlbk1hcFN0YXRlVG9Qcm9wc0lzTWlzc2luZyhtYXBTdGF0ZVRvUHJvcHMpIHtcbiAgcmV0dXJuICFtYXBTdGF0ZVRvUHJvcHMgPyB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50KGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge307XG4gIH0pIDogdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgZGVmYXVsdCBbd2hlbk1hcFN0YXRlVG9Qcm9wc0lzRnVuY3Rpb24sIHdoZW5NYXBTdGF0ZVRvUHJvcHNJc01pc3NpbmddOyIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmltcG9ydCB2ZXJpZnlQbGFpbk9iamVjdCBmcm9tICcuLi91dGlscy92ZXJpZnlQbGFpbk9iamVjdCc7XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWZhdWx0TWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcykge1xuICByZXR1cm4gX2V4dGVuZHMoe30sIG93blByb3BzLCBzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHdyYXBNZXJnZVByb3BzRnVuYyhtZXJnZVByb3BzKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpbml0TWVyZ2VQcm9wc1Byb3h5KGRpc3BhdGNoLCBfcmVmKSB7XG4gICAgdmFyIGRpc3BsYXlOYW1lID0gX3JlZi5kaXNwbGF5TmFtZSxcbiAgICAgICAgcHVyZSA9IF9yZWYucHVyZSxcbiAgICAgICAgYXJlTWVyZ2VkUHJvcHNFcXVhbCA9IF9yZWYuYXJlTWVyZ2VkUHJvcHNFcXVhbDtcblxuICAgIHZhciBoYXNSdW5PbmNlID0gZmFsc2U7XG4gICAgdmFyIG1lcmdlZFByb3BzID0gdm9pZCAwO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIG1lcmdlUHJvcHNQcm94eShzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcykge1xuICAgICAgdmFyIG5leHRNZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpO1xuXG4gICAgICBpZiAoaGFzUnVuT25jZSkge1xuICAgICAgICBpZiAoIXB1cmUgfHwgIWFyZU1lcmdlZFByb3BzRXF1YWwobmV4dE1lcmdlZFByb3BzLCBtZXJnZWRQcm9wcykpIG1lcmdlZFByb3BzID0gbmV4dE1lcmdlZFByb3BzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaGFzUnVuT25jZSA9IHRydWU7XG4gICAgICAgIG1lcmdlZFByb3BzID0gbmV4dE1lcmdlZFByb3BzO1xuXG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB2ZXJpZnlQbGFpbk9iamVjdChtZXJnZWRQcm9wcywgZGlzcGxheU5hbWUsICdtZXJnZVByb3BzJyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgICB9O1xuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gd2hlbk1lcmdlUHJvcHNJc0Z1bmN0aW9uKG1lcmdlUHJvcHMpIHtcbiAgcmV0dXJuIHR5cGVvZiBtZXJnZVByb3BzID09PSAnZnVuY3Rpb24nID8gd3JhcE1lcmdlUHJvcHNGdW5jKG1lcmdlUHJvcHMpIDogdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gd2hlbk1lcmdlUHJvcHNJc09taXR0ZWQobWVyZ2VQcm9wcykge1xuICByZXR1cm4gIW1lcmdlUHJvcHMgPyBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGRlZmF1bHRNZXJnZVByb3BzO1xuICB9IDogdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgZGVmYXVsdCBbd2hlbk1lcmdlUHJvcHNJc0Z1bmN0aW9uLCB3aGVuTWVyZ2VQcm9wc0lzT21pdHRlZF07IiwiZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5pbXBvcnQgdmVyaWZ5U3Vic2VsZWN0b3JzIGZyb20gJy4vdmVyaWZ5U3Vic2VsZWN0b3JzJztcblxuZXhwb3J0IGZ1bmN0aW9uIGltcHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1lcmdlUHJvcHMsIGRpc3BhdGNoKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpbXB1cmVGaW5hbFByb3BzU2VsZWN0b3Ioc3RhdGUsIG93blByb3BzKSB7XG4gICAgcmV0dXJuIG1lcmdlUHJvcHMobWFwU3RhdGVUb1Byb3BzKHN0YXRlLCBvd25Qcm9wcyksIG1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCwgb3duUHJvcHMpLCBvd25Qcm9wcyk7XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeShtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWVyZ2VQcm9wcywgZGlzcGF0Y2gsIF9yZWYpIHtcbiAgdmFyIGFyZVN0YXRlc0VxdWFsID0gX3JlZi5hcmVTdGF0ZXNFcXVhbCxcbiAgICAgIGFyZU93blByb3BzRXF1YWwgPSBfcmVmLmFyZU93blByb3BzRXF1YWwsXG4gICAgICBhcmVTdGF0ZVByb3BzRXF1YWwgPSBfcmVmLmFyZVN0YXRlUHJvcHNFcXVhbDtcblxuICB2YXIgaGFzUnVuQXRMZWFzdE9uY2UgPSBmYWxzZTtcbiAgdmFyIHN0YXRlID0gdm9pZCAwO1xuICB2YXIgb3duUHJvcHMgPSB2b2lkIDA7XG4gIHZhciBzdGF0ZVByb3BzID0gdm9pZCAwO1xuICB2YXIgZGlzcGF0Y2hQcm9wcyA9IHZvaWQgMDtcbiAgdmFyIG1lcmdlZFByb3BzID0gdm9pZCAwO1xuXG4gIGZ1bmN0aW9uIGhhbmRsZUZpcnN0Q2FsbChmaXJzdFN0YXRlLCBmaXJzdE93blByb3BzKSB7XG4gICAgc3RhdGUgPSBmaXJzdFN0YXRlO1xuICAgIG93blByb3BzID0gZmlyc3RPd25Qcm9wcztcbiAgICBzdGF0ZVByb3BzID0gbWFwU3RhdGVUb1Byb3BzKHN0YXRlLCBvd25Qcm9wcyk7XG4gICAgZGlzcGF0Y2hQcm9wcyA9IG1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCwgb3duUHJvcHMpO1xuICAgIG1lcmdlZFByb3BzID0gbWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcyk7XG4gICAgaGFzUnVuQXRMZWFzdE9uY2UgPSB0cnVlO1xuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZU5ld1Byb3BzQW5kTmV3U3RhdGUoKSB7XG4gICAgc3RhdGVQcm9wcyA9IG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpO1xuXG4gICAgaWYgKG1hcERpc3BhdGNoVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcykgZGlzcGF0Y2hQcm9wcyA9IG1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCwgb3duUHJvcHMpO1xuXG4gICAgbWVyZ2VkUHJvcHMgPSBtZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKTtcbiAgICByZXR1cm4gbWVyZ2VkUHJvcHM7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVOZXdQcm9wcygpIHtcbiAgICBpZiAobWFwU3RhdGVUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzKSBzdGF0ZVByb3BzID0gbWFwU3RhdGVUb1Byb3BzKHN0YXRlLCBvd25Qcm9wcyk7XG5cbiAgICBpZiAobWFwRGlzcGF0Y2hUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzKSBkaXNwYXRjaFByb3BzID0gbWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoLCBvd25Qcm9wcyk7XG5cbiAgICBtZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpO1xuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZU5ld1N0YXRlKCkge1xuICAgIHZhciBuZXh0U3RhdGVQcm9wcyA9IG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpO1xuICAgIHZhciBzdGF0ZVByb3BzQ2hhbmdlZCA9ICFhcmVTdGF0ZVByb3BzRXF1YWwobmV4dFN0YXRlUHJvcHMsIHN0YXRlUHJvcHMpO1xuICAgIHN0YXRlUHJvcHMgPSBuZXh0U3RhdGVQcm9wcztcblxuICAgIGlmIChzdGF0ZVByb3BzQ2hhbmdlZCkgbWVyZ2VkUHJvcHMgPSBtZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKTtcblxuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZVN1YnNlcXVlbnRDYWxscyhuZXh0U3RhdGUsIG5leHRPd25Qcm9wcykge1xuICAgIHZhciBwcm9wc0NoYW5nZWQgPSAhYXJlT3duUHJvcHNFcXVhbChuZXh0T3duUHJvcHMsIG93blByb3BzKTtcbiAgICB2YXIgc3RhdGVDaGFuZ2VkID0gIWFyZVN0YXRlc0VxdWFsKG5leHRTdGF0ZSwgc3RhdGUpO1xuICAgIHN0YXRlID0gbmV4dFN0YXRlO1xuICAgIG93blByb3BzID0gbmV4dE93blByb3BzO1xuXG4gICAgaWYgKHByb3BzQ2hhbmdlZCAmJiBzdGF0ZUNoYW5nZWQpIHJldHVybiBoYW5kbGVOZXdQcm9wc0FuZE5ld1N0YXRlKCk7XG4gICAgaWYgKHByb3BzQ2hhbmdlZCkgcmV0dXJuIGhhbmRsZU5ld1Byb3BzKCk7XG4gICAgaWYgKHN0YXRlQ2hhbmdlZCkgcmV0dXJuIGhhbmRsZU5ld1N0YXRlKCk7XG4gICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIHB1cmVGaW5hbFByb3BzU2VsZWN0b3IobmV4dFN0YXRlLCBuZXh0T3duUHJvcHMpIHtcbiAgICByZXR1cm4gaGFzUnVuQXRMZWFzdE9uY2UgPyBoYW5kbGVTdWJzZXF1ZW50Q2FsbHMobmV4dFN0YXRlLCBuZXh0T3duUHJvcHMpIDogaGFuZGxlRmlyc3RDYWxsKG5leHRTdGF0ZSwgbmV4dE93blByb3BzKTtcbiAgfTtcbn1cblxuLy8gVE9ETzogQWRkIG1vcmUgY29tbWVudHNcblxuLy8gSWYgcHVyZSBpcyB0cnVlLCB0aGUgc2VsZWN0b3IgcmV0dXJuZWQgYnkgc2VsZWN0b3JGYWN0b3J5IHdpbGwgbWVtb2l6ZSBpdHMgcmVzdWx0cyxcbi8vIGFsbG93aW5nIGNvbm5lY3RBZHZhbmNlZCdzIHNob3VsZENvbXBvbmVudFVwZGF0ZSB0byByZXR1cm4gZmFsc2UgaWYgZmluYWxcbi8vIHByb3BzIGhhdmUgbm90IGNoYW5nZWQuIElmIGZhbHNlLCB0aGUgc2VsZWN0b3Igd2lsbCBhbHdheXMgcmV0dXJuIGEgbmV3XG4vLyBvYmplY3QgYW5kIHNob3VsZENvbXBvbmVudFVwZGF0ZSB3aWxsIGFsd2F5cyByZXR1cm4gdHJ1ZS5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeShkaXNwYXRjaCwgX3JlZjIpIHtcbiAgdmFyIGluaXRNYXBTdGF0ZVRvUHJvcHMgPSBfcmVmMi5pbml0TWFwU3RhdGVUb1Byb3BzLFxuICAgICAgaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyA9IF9yZWYyLmluaXRNYXBEaXNwYXRjaFRvUHJvcHMsXG4gICAgICBpbml0TWVyZ2VQcm9wcyA9IF9yZWYyLmluaXRNZXJnZVByb3BzLFxuICAgICAgb3B0aW9ucyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmMiwgWydpbml0TWFwU3RhdGVUb1Byb3BzJywgJ2luaXRNYXBEaXNwYXRjaFRvUHJvcHMnLCAnaW5pdE1lcmdlUHJvcHMnXSk7XG5cbiAgdmFyIG1hcFN0YXRlVG9Qcm9wcyA9IGluaXRNYXBTdGF0ZVRvUHJvcHMoZGlzcGF0Y2gsIG9wdGlvbnMpO1xuICB2YXIgbWFwRGlzcGF0Y2hUb1Byb3BzID0gaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCwgb3B0aW9ucyk7XG4gIHZhciBtZXJnZVByb3BzID0gaW5pdE1lcmdlUHJvcHMoZGlzcGF0Y2gsIG9wdGlvbnMpO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgdmVyaWZ5U3Vic2VsZWN0b3JzKG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzLCBvcHRpb25zLmRpc3BsYXlOYW1lKTtcbiAgfVxuXG4gIHZhciBzZWxlY3RvckZhY3RvcnkgPSBvcHRpb25zLnB1cmUgPyBwdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeSA6IGltcHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3Rvcnk7XG5cbiAgcmV0dXJuIHNlbGVjdG9yRmFjdG9yeShtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWVyZ2VQcm9wcywgZGlzcGF0Y2gsIG9wdGlvbnMpO1xufSIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHsgdmFyIHRhcmdldCA9IHt9OyBmb3IgKHZhciBpIGluIG9iaikgeyBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTsgdGFyZ2V0W2ldID0gb2JqW2ldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuaW1wb3J0IGNvbm5lY3RBZHZhbmNlZCBmcm9tICcuLi9jb21wb25lbnRzL2Nvbm5lY3RBZHZhbmNlZCc7XG5pbXBvcnQgc2hhbGxvd0VxdWFsIGZyb20gJy4uL3V0aWxzL3NoYWxsb3dFcXVhbCc7XG5pbXBvcnQgZGVmYXVsdE1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcyBmcm9tICcuL21hcERpc3BhdGNoVG9Qcm9wcyc7XG5pbXBvcnQgZGVmYXVsdE1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyBmcm9tICcuL21hcFN0YXRlVG9Qcm9wcyc7XG5pbXBvcnQgZGVmYXVsdE1lcmdlUHJvcHNGYWN0b3JpZXMgZnJvbSAnLi9tZXJnZVByb3BzJztcbmltcG9ydCBkZWZhdWx0U2VsZWN0b3JGYWN0b3J5IGZyb20gJy4vc2VsZWN0b3JGYWN0b3J5JztcblxuLypcbiAgY29ubmVjdCBpcyBhIGZhY2FkZSBvdmVyIGNvbm5lY3RBZHZhbmNlZC4gSXQgdHVybnMgaXRzIGFyZ3MgaW50byBhIGNvbXBhdGlibGVcbiAgc2VsZWN0b3JGYWN0b3J5LCB3aGljaCBoYXMgdGhlIHNpZ25hdHVyZTpcblxuICAgIChkaXNwYXRjaCwgb3B0aW9ucykgPT4gKG5leHRTdGF0ZSwgbmV4dE93blByb3BzKSA9PiBuZXh0RmluYWxQcm9wc1xuICBcbiAgY29ubmVjdCBwYXNzZXMgaXRzIGFyZ3MgdG8gY29ubmVjdEFkdmFuY2VkIGFzIG9wdGlvbnMsIHdoaWNoIHdpbGwgaW4gdHVybiBwYXNzIHRoZW0gdG9cbiAgc2VsZWN0b3JGYWN0b3J5IGVhY2ggdGltZSBhIENvbm5lY3QgY29tcG9uZW50IGluc3RhbmNlIGlzIGluc3RhbnRpYXRlZCBvciBob3QgcmVsb2FkZWQuXG5cbiAgc2VsZWN0b3JGYWN0b3J5IHJldHVybnMgYSBmaW5hbCBwcm9wcyBzZWxlY3RvciBmcm9tIGl0cyBtYXBTdGF0ZVRvUHJvcHMsXG4gIG1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMsIG1lcmdlUHJvcHMsXG4gIG1lcmdlUHJvcHNGYWN0b3JpZXMsIGFuZCBwdXJlIGFyZ3MuXG5cbiAgVGhlIHJlc3VsdGluZyBmaW5hbCBwcm9wcyBzZWxlY3RvciBpcyBjYWxsZWQgYnkgdGhlIENvbm5lY3QgY29tcG9uZW50IGluc3RhbmNlIHdoZW5ldmVyXG4gIGl0IHJlY2VpdmVzIG5ldyBwcm9wcyBvciBzdG9yZSBzdGF0ZS5cbiAqL1xuXG5mdW5jdGlvbiBtYXRjaChhcmcsIGZhY3RvcmllcywgbmFtZSkge1xuICBmb3IgKHZhciBpID0gZmFjdG9yaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgdmFyIHJlc3VsdCA9IGZhY3Rvcmllc1tpXShhcmcpO1xuICAgIGlmIChyZXN1bHQpIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGRpc3BhdGNoLCBvcHRpb25zKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHZhbHVlIG9mIHR5cGUgJyArIHR5cGVvZiBhcmcgKyAnIGZvciAnICsgbmFtZSArICcgYXJndW1lbnQgd2hlbiBjb25uZWN0aW5nIGNvbXBvbmVudCAnICsgb3B0aW9ucy53cmFwcGVkQ29tcG9uZW50TmFtZSArICcuJyk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHN0cmljdEVxdWFsKGEsIGIpIHtcbiAgcmV0dXJuIGEgPT09IGI7XG59XG5cbi8vIGNyZWF0ZUNvbm5lY3Qgd2l0aCBkZWZhdWx0IGFyZ3MgYnVpbGRzIHRoZSAnb2ZmaWNpYWwnIGNvbm5lY3QgYmVoYXZpb3IuIENhbGxpbmcgaXQgd2l0aFxuLy8gZGlmZmVyZW50IG9wdGlvbnMgb3BlbnMgdXAgc29tZSB0ZXN0aW5nIGFuZCBleHRlbnNpYmlsaXR5IHNjZW5hcmlvc1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUNvbm5lY3QoKSB7XG4gIHZhciBfcmVmID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fSxcbiAgICAgIF9yZWYkY29ubmVjdEhPQyA9IF9yZWYuY29ubmVjdEhPQyxcbiAgICAgIGNvbm5lY3RIT0MgPSBfcmVmJGNvbm5lY3RIT0MgPT09IHVuZGVmaW5lZCA/IGNvbm5lY3RBZHZhbmNlZCA6IF9yZWYkY29ubmVjdEhPQyxcbiAgICAgIF9yZWYkbWFwU3RhdGVUb1Byb3BzRiA9IF9yZWYubWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzLFxuICAgICAgbWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzID0gX3JlZiRtYXBTdGF0ZVRvUHJvcHNGID09PSB1bmRlZmluZWQgPyBkZWZhdWx0TWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzIDogX3JlZiRtYXBTdGF0ZVRvUHJvcHNGLFxuICAgICAgX3JlZiRtYXBEaXNwYXRjaFRvUHJvID0gX3JlZi5tYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMsXG4gICAgICBtYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMgPSBfcmVmJG1hcERpc3BhdGNoVG9Qcm8gPT09IHVuZGVmaW5lZCA/IGRlZmF1bHRNYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMgOiBfcmVmJG1hcERpc3BhdGNoVG9Qcm8sXG4gICAgICBfcmVmJG1lcmdlUHJvcHNGYWN0b3IgPSBfcmVmLm1lcmdlUHJvcHNGYWN0b3JpZXMsXG4gICAgICBtZXJnZVByb3BzRmFjdG9yaWVzID0gX3JlZiRtZXJnZVByb3BzRmFjdG9yID09PSB1bmRlZmluZWQgPyBkZWZhdWx0TWVyZ2VQcm9wc0ZhY3RvcmllcyA6IF9yZWYkbWVyZ2VQcm9wc0ZhY3RvcixcbiAgICAgIF9yZWYkc2VsZWN0b3JGYWN0b3J5ID0gX3JlZi5zZWxlY3RvckZhY3RvcnksXG4gICAgICBzZWxlY3RvckZhY3RvcnkgPSBfcmVmJHNlbGVjdG9yRmFjdG9yeSA9PT0gdW5kZWZpbmVkID8gZGVmYXVsdFNlbGVjdG9yRmFjdG9yeSA6IF9yZWYkc2VsZWN0b3JGYWN0b3J5O1xuXG4gIHJldHVybiBmdW5jdGlvbiBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzKSB7XG4gICAgdmFyIF9yZWYyID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiB7fSxcbiAgICAgICAgX3JlZjIkcHVyZSA9IF9yZWYyLnB1cmUsXG4gICAgICAgIHB1cmUgPSBfcmVmMiRwdXJlID09PSB1bmRlZmluZWQgPyB0cnVlIDogX3JlZjIkcHVyZSxcbiAgICAgICAgX3JlZjIkYXJlU3RhdGVzRXF1YWwgPSBfcmVmMi5hcmVTdGF0ZXNFcXVhbCxcbiAgICAgICAgYXJlU3RhdGVzRXF1YWwgPSBfcmVmMiRhcmVTdGF0ZXNFcXVhbCA9PT0gdW5kZWZpbmVkID8gc3RyaWN0RXF1YWwgOiBfcmVmMiRhcmVTdGF0ZXNFcXVhbCxcbiAgICAgICAgX3JlZjIkYXJlT3duUHJvcHNFcXVhID0gX3JlZjIuYXJlT3duUHJvcHNFcXVhbCxcbiAgICAgICAgYXJlT3duUHJvcHNFcXVhbCA9IF9yZWYyJGFyZU93blByb3BzRXF1YSA9PT0gdW5kZWZpbmVkID8gc2hhbGxvd0VxdWFsIDogX3JlZjIkYXJlT3duUHJvcHNFcXVhLFxuICAgICAgICBfcmVmMiRhcmVTdGF0ZVByb3BzRXEgPSBfcmVmMi5hcmVTdGF0ZVByb3BzRXF1YWwsXG4gICAgICAgIGFyZVN0YXRlUHJvcHNFcXVhbCA9IF9yZWYyJGFyZVN0YXRlUHJvcHNFcSA9PT0gdW5kZWZpbmVkID8gc2hhbGxvd0VxdWFsIDogX3JlZjIkYXJlU3RhdGVQcm9wc0VxLFxuICAgICAgICBfcmVmMiRhcmVNZXJnZWRQcm9wc0UgPSBfcmVmMi5hcmVNZXJnZWRQcm9wc0VxdWFsLFxuICAgICAgICBhcmVNZXJnZWRQcm9wc0VxdWFsID0gX3JlZjIkYXJlTWVyZ2VkUHJvcHNFID09PSB1bmRlZmluZWQgPyBzaGFsbG93RXF1YWwgOiBfcmVmMiRhcmVNZXJnZWRQcm9wc0UsXG4gICAgICAgIGV4dHJhT3B0aW9ucyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmMiwgWydwdXJlJywgJ2FyZVN0YXRlc0VxdWFsJywgJ2FyZU93blByb3BzRXF1YWwnLCAnYXJlU3RhdGVQcm9wc0VxdWFsJywgJ2FyZU1lcmdlZFByb3BzRXF1YWwnXSk7XG5cbiAgICB2YXIgaW5pdE1hcFN0YXRlVG9Qcm9wcyA9IG1hdGNoKG1hcFN0YXRlVG9Qcm9wcywgbWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzLCAnbWFwU3RhdGVUb1Byb3BzJyk7XG4gICAgdmFyIGluaXRNYXBEaXNwYXRjaFRvUHJvcHMgPSBtYXRjaChtYXBEaXNwYXRjaFRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcywgJ21hcERpc3BhdGNoVG9Qcm9wcycpO1xuICAgIHZhciBpbml0TWVyZ2VQcm9wcyA9IG1hdGNoKG1lcmdlUHJvcHMsIG1lcmdlUHJvcHNGYWN0b3JpZXMsICdtZXJnZVByb3BzJyk7XG5cbiAgICByZXR1cm4gY29ubmVjdEhPQyhzZWxlY3RvckZhY3RvcnksIF9leHRlbmRzKHtcbiAgICAgIC8vIHVzZWQgaW4gZXJyb3IgbWVzc2FnZXNcbiAgICAgIG1ldGhvZE5hbWU6ICdjb25uZWN0JyxcblxuICAgICAgLy8gdXNlZCB0byBjb21wdXRlIENvbm5lY3QncyBkaXNwbGF5TmFtZSBmcm9tIHRoZSB3cmFwcGVkIGNvbXBvbmVudCdzIGRpc3BsYXlOYW1lLlxuICAgICAgZ2V0RGlzcGxheU5hbWU6IGZ1bmN0aW9uIGdldERpc3BsYXlOYW1lKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuICdDb25uZWN0KCcgKyBuYW1lICsgJyknO1xuICAgICAgfSxcblxuICAgICAgLy8gaWYgbWFwU3RhdGVUb1Byb3BzIGlzIGZhbHN5LCB0aGUgQ29ubmVjdCBjb21wb25lbnQgZG9lc24ndCBzdWJzY3JpYmUgdG8gc3RvcmUgc3RhdGUgY2hhbmdlc1xuICAgICAgc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzOiBCb29sZWFuKG1hcFN0YXRlVG9Qcm9wcyksXG5cbiAgICAgIC8vIHBhc3NlZCB0aHJvdWdoIHRvIHNlbGVjdG9yRmFjdG9yeVxuICAgICAgaW5pdE1hcFN0YXRlVG9Qcm9wczogaW5pdE1hcFN0YXRlVG9Qcm9wcyxcbiAgICAgIGluaXRNYXBEaXNwYXRjaFRvUHJvcHM6IGluaXRNYXBEaXNwYXRjaFRvUHJvcHMsXG4gICAgICBpbml0TWVyZ2VQcm9wczogaW5pdE1lcmdlUHJvcHMsXG4gICAgICBwdXJlOiBwdXJlLFxuICAgICAgYXJlU3RhdGVzRXF1YWw6IGFyZVN0YXRlc0VxdWFsLFxuICAgICAgYXJlT3duUHJvcHNFcXVhbDogYXJlT3duUHJvcHNFcXVhbCxcbiAgICAgIGFyZVN0YXRlUHJvcHNFcXVhbDogYXJlU3RhdGVQcm9wc0VxdWFsLFxuICAgICAgYXJlTWVyZ2VkUHJvcHNFcXVhbDogYXJlTWVyZ2VkUHJvcHNFcXVhbFxuXG4gICAgfSwgZXh0cmFPcHRpb25zKSk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUNvbm5lY3QoKTsiLCJpbXBvcnQgUHJvdmlkZXIsIHsgY3JlYXRlUHJvdmlkZXIgfSBmcm9tICcuL2NvbXBvbmVudHMvUHJvdmlkZXInO1xuaW1wb3J0IGNvbm5lY3RBZHZhbmNlZCBmcm9tICcuL2NvbXBvbmVudHMvY29ubmVjdEFkdmFuY2VkJztcbmltcG9ydCBjb25uZWN0IGZyb20gJy4vY29ubmVjdC9jb25uZWN0JztcblxuZXhwb3J0IHsgUHJvdmlkZXIsIGNyZWF0ZVByb3ZpZGVyLCBjb25uZWN0QWR2YW5jZWQsIGNvbm5lY3QgfTsiLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGNoZWNrRENFKCkge1xuICAvKiBnbG9iYWwgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fICovXG4gIGlmIChcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fID09PSAndW5kZWZpbmVkJyB8fFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UgIT09ICdmdW5jdGlvbidcbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gVGhpcyBicmFuY2ggaXMgdW5yZWFjaGFibGUgYmVjYXVzZSB0aGlzIGZ1bmN0aW9uIGlzIG9ubHkgY2FsbGVkXG4gICAgLy8gaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBjb25kaXRpb24gaXMgdHJ1ZSBvbmx5IGluIGRldmVsb3BtZW50LlxuICAgIC8vIFRoZXJlZm9yZSBpZiB0aGUgYnJhbmNoIGlzIHN0aWxsIGhlcmUsIGRlYWQgY29kZSBlbGltaW5hdGlvbiB3YXNuJ3RcbiAgICAvLyBwcm9wZXJseSBhcHBsaWVkLlxuICAgIC8vIERvbid0IGNoYW5nZSB0aGUgbWVzc2FnZS4gUmVhY3QgRGV2VG9vbHMgcmVsaWVzIG9uIGl0LiBBbHNvIG1ha2Ugc3VyZVxuICAgIC8vIHRoaXMgbWVzc2FnZSBkb2Vzbid0IG9jY3VyIGVsc2V3aGVyZSBpbiB0aGlzIGZ1bmN0aW9uLCBvciBpdCB3aWxsIGNhdXNlXG4gICAgLy8gYSBmYWxzZSBwb3NpdGl2ZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ15fXicpO1xuICB9XG4gIHRyeSB7XG4gICAgLy8gVmVyaWZ5IHRoYXQgdGhlIGNvZGUgYWJvdmUgaGFzIGJlZW4gZGVhZCBjb2RlIGVsaW1pbmF0ZWQgKERDRSdkKS5cbiAgICBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UoY2hlY2tEQ0UpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBEZXZUb29scyBzaG91bGRuJ3QgY3Jhc2ggUmVhY3QsIG5vIG1hdHRlciB3aGF0LlxuICAgIC8vIFdlIHNob3VsZCBzdGlsbCByZXBvcnQgaW4gY2FzZSB3ZSBicmVhayB0aGlzIGNvZGUuXG4gICAgY29uc29sZS5lcnJvcihlcnIpO1xuICB9XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIC8vIERDRSBjaGVjayBzaG91bGQgaGFwcGVuIGJlZm9yZSBSZWFjdERPTSBidW5kbGUgZXhlY3V0ZXMgc28gdGhhdFxuICAvLyBEZXZUb29scyBjYW4gcmVwb3J0IGJhZCBtaW5pZmljYXRpb24gZHVyaW5nIGluamVjdGlvbi5cbiAgY2hlY2tEQ0UoKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iLCJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5FVkVOVF9IQU5ETEVSU19LRVkgPSB1bmRlZmluZWQ7XG5leHBvcnRzLmFkZEV2ZW50TGlzdGVuZXIgPSBhZGRFdmVudExpc3RlbmVyO1xuZXhwb3J0cy5yZW1vdmVFdmVudExpc3RlbmVyID0gcmVtb3ZlRXZlbnRMaXN0ZW5lcjtcblxudmFyIF9ub3JtYWxpemVFdmVudE9wdGlvbnMgPSByZXF1aXJlKCcuL25vcm1hbGl6ZUV2ZW50T3B0aW9ucycpO1xuXG52YXIgX25vcm1hbGl6ZUV2ZW50T3B0aW9uczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9ub3JtYWxpemVFdmVudE9wdGlvbnMpO1xuXG52YXIgX1RhcmdldEV2ZW50SGFuZGxlcnMgPSByZXF1aXJlKCcuL1RhcmdldEV2ZW50SGFuZGxlcnMnKTtcblxudmFyIF9UYXJnZXRFdmVudEhhbmRsZXJzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1RhcmdldEV2ZW50SGFuZGxlcnMpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbi8vIEV4cG9ydCB0byBtYWtlIHRlc3RpbmcgcG9zc2libGUuXG52YXIgRVZFTlRfSEFORExFUlNfS0VZID0gZXhwb3J0cy5FVkVOVF9IQU5ETEVSU19LRVkgPSAnX19jb25zb2xpZGF0ZWRfZXZlbnRzX2hhbmRsZXJzX18nO1xuXG5mdW5jdGlvbiBhZGRFdmVudExpc3RlbmVyKHRhcmdldCwgZXZlbnROYW1lLCBsaXN0ZW5lciwgb3B0aW9ucykge1xuICBpZiAoIXRhcmdldFtFVkVOVF9IQU5ETEVSU19LRVldKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgdGFyZ2V0W0VWRU5UX0hBTkRMRVJTX0tFWV0gPSBuZXcgX1RhcmdldEV2ZW50SGFuZGxlcnMyWydkZWZhdWx0J10odGFyZ2V0KTtcbiAgfVxuICB2YXIgbm9ybWFsaXplZEV2ZW50T3B0aW9ucyA9ICgwLCBfbm9ybWFsaXplRXZlbnRPcHRpb25zMlsnZGVmYXVsdCddKShvcHRpb25zKTtcbiAgcmV0dXJuIHRhcmdldFtFVkVOVF9IQU5ETEVSU19LRVldLmFkZChldmVudE5hbWUsIGxpc3RlbmVyLCBub3JtYWxpemVkRXZlbnRPcHRpb25zKTtcbn1cblxuLy8gRGVwcmVjYXRlZFxuZnVuY3Rpb24gcmVtb3ZlRXZlbnRMaXN0ZW5lcih1bnN1YnNjcmliZUZuKSB7XG4gIHVuc3Vic2NyaWJlRm4oKTtcbn0iLCIndXNlIHN0cmljdCc7XG5cbnZhciBkZWZpbmVQcm9wZXJ0aWVzID0gcmVxdWlyZSgnZGVmaW5lLXByb3BlcnRpZXMnKTtcblxudmFyIGltcGxlbWVudGF0aW9uID0gcmVxdWlyZSgnLi9pbXBsZW1lbnRhdGlvbicpO1xudmFyIGdldFBvbHlmaWxsID0gcmVxdWlyZSgnLi9wb2x5ZmlsbCcpO1xudmFyIHNoaW0gPSByZXF1aXJlKCcuL3NoaW0nKTtcblxudmFyIHBvbHlmaWxsID0gZ2V0UG9seWZpbGwoKTtcblxuZGVmaW5lUHJvcGVydGllcyhwb2x5ZmlsbCwge1xuXHRnZXRQb2x5ZmlsbDogZ2V0UG9seWZpbGwsXG5cdGltcGxlbWVudGF0aW9uOiBpbXBsZW1lbnRhdGlvbixcblx0c2hpbTogc2hpbVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gcG9seWZpbGw7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBrZXlzID0gcmVxdWlyZSgnb2JqZWN0LWtleXMnKTtcbnZhciBoYXNTeW1ib2xzID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgU3ltYm9sKCdmb28nKSA9PT0gJ3N5bWJvbCc7XG5cbnZhciB0b1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgY29uY2F0ID0gQXJyYXkucHJvdG90eXBlLmNvbmNhdDtcbnZhciBvcmlnRGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG5cbnZhciBpc0Z1bmN0aW9uID0gZnVuY3Rpb24gKGZuKSB7XG5cdHJldHVybiB0eXBlb2YgZm4gPT09ICdmdW5jdGlvbicgJiYgdG9TdHIuY2FsbChmbikgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG59O1xuXG52YXIgYXJlUHJvcGVydHlEZXNjcmlwdG9yc1N1cHBvcnRlZCA9IGZ1bmN0aW9uICgpIHtcblx0dmFyIG9iaiA9IHt9O1xuXHR0cnkge1xuXHRcdG9yaWdEZWZpbmVQcm9wZXJ0eShvYmosICd4JywgeyBlbnVtZXJhYmxlOiBmYWxzZSwgdmFsdWU6IG9iaiB9KTtcblx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnMsIG5vLXJlc3RyaWN0ZWQtc3ludGF4XG5cdFx0Zm9yICh2YXIgXyBpbiBvYmopIHsgLy8ganNjczppZ25vcmUgZGlzYWxsb3dVbnVzZWRWYXJpYWJsZXNcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0cmV0dXJuIG9iai54ID09PSBvYmo7XG5cdH0gY2F0Y2ggKGUpIHsgLyogdGhpcyBpcyBJRSA4LiAqL1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufTtcbnZhciBzdXBwb3J0c0Rlc2NyaXB0b3JzID0gb3JpZ0RlZmluZVByb3BlcnR5ICYmIGFyZVByb3BlcnR5RGVzY3JpcHRvcnNTdXBwb3J0ZWQoKTtcblxudmFyIGRlZmluZVByb3BlcnR5ID0gZnVuY3Rpb24gKG9iamVjdCwgbmFtZSwgdmFsdWUsIHByZWRpY2F0ZSkge1xuXHRpZiAobmFtZSBpbiBvYmplY3QgJiYgKCFpc0Z1bmN0aW9uKHByZWRpY2F0ZSkgfHwgIXByZWRpY2F0ZSgpKSkge1xuXHRcdHJldHVybjtcblx0fVxuXHRpZiAoc3VwcG9ydHNEZXNjcmlwdG9ycykge1xuXHRcdG9yaWdEZWZpbmVQcm9wZXJ0eShvYmplY3QsIG5hbWUsIHtcblx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdGVudW1lcmFibGU6IGZhbHNlLFxuXHRcdFx0dmFsdWU6IHZhbHVlLFxuXHRcdFx0d3JpdGFibGU6IHRydWVcblx0XHR9KTtcblx0fSBlbHNlIHtcblx0XHRvYmplY3RbbmFtZV0gPSB2YWx1ZTtcblx0fVxufTtcblxudmFyIGRlZmluZVByb3BlcnRpZXMgPSBmdW5jdGlvbiAob2JqZWN0LCBtYXApIHtcblx0dmFyIHByZWRpY2F0ZXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHt9O1xuXHR2YXIgcHJvcHMgPSBrZXlzKG1hcCk7XG5cdGlmIChoYXNTeW1ib2xzKSB7XG5cdFx0cHJvcHMgPSBjb25jYXQuY2FsbChwcm9wcywgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhtYXApKTtcblx0fVxuXHRmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSArPSAxKSB7XG5cdFx0ZGVmaW5lUHJvcGVydHkob2JqZWN0LCBwcm9wc1tpXSwgbWFwW3Byb3BzW2ldXSwgcHJlZGljYXRlc1twcm9wc1tpXV0pO1xuXHR9XG59O1xuXG5kZWZpbmVQcm9wZXJ0aWVzLnN1cHBvcnRzRGVzY3JpcHRvcnMgPSAhIXN1cHBvcnRzRGVzY3JpcHRvcnM7XG5cbm1vZHVsZS5leHBvcnRzID0gZGVmaW5lUHJvcGVydGllcztcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGltcGxlbWVudGF0aW9uID0gcmVxdWlyZSgnLi9pbXBsZW1lbnRhdGlvbicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kIHx8IGltcGxlbWVudGF0aW9uO1xuIiwiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IHRvSVNPTW9udGhTdHJpbmc7XG5cbnZhciBfbW9tZW50ID0gcmVxdWlyZSgnbW9tZW50Jyk7XG5cbnZhciBfbW9tZW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX21vbWVudCk7XG5cbnZhciBfdG9Nb21lbnRPYmplY3QgPSByZXF1aXJlKCcuL3RvTW9tZW50T2JqZWN0Jyk7XG5cbnZhciBfdG9Nb21lbnRPYmplY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdG9Nb21lbnRPYmplY3QpO1xuXG52YXIgX2NvbnN0YW50cyA9IHJlcXVpcmUoJy4uLy4uL2NvbnN0YW50cycpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIHRvSVNPTW9udGhTdHJpbmcoZGF0ZSwgY3VycmVudEZvcm1hdCkge1xuICB2YXIgZGF0ZU9iaiA9IF9tb21lbnQyWydkZWZhdWx0J10uaXNNb21lbnQoZGF0ZSkgPyBkYXRlIDogKDAsIF90b01vbWVudE9iamVjdDJbJ2RlZmF1bHQnXSkoZGF0ZSwgY3VycmVudEZvcm1hdCk7XG4gIGlmICghZGF0ZU9iaikgcmV0dXJuIG51bGw7XG5cbiAgcmV0dXJuIGRhdGVPYmouZm9ybWF0KF9jb25zdGFudHMuSVNPX01PTlRIX0ZPUk1BVCk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcblxuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn0iLCJmdW5jdGlvbiBpc0Fic29sdXRlKHBhdGhuYW1lKSB7XG4gIHJldHVybiBwYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJztcbn1cblxuLy8gQWJvdXQgMS41eCBmYXN0ZXIgdGhhbiB0aGUgdHdvLWFyZyB2ZXJzaW9uIG9mIEFycmF5I3NwbGljZSgpXG5mdW5jdGlvbiBzcGxpY2VPbmUobGlzdCwgaW5kZXgpIHtcbiAgZm9yICh2YXIgaSA9IGluZGV4LCBrID0gaSArIDEsIG4gPSBsaXN0Lmxlbmd0aDsgayA8IG47IGkgKz0gMSwgayArPSAxKSB7XG4gICAgbGlzdFtpXSA9IGxpc3Rba107XG4gIH1cblxuICBsaXN0LnBvcCgpO1xufVxuXG4vLyBUaGlzIGltcGxlbWVudGF0aW9uIGlzIGJhc2VkIGhlYXZpbHkgb24gbm9kZSdzIHVybC5wYXJzZVxuZnVuY3Rpb24gcmVzb2x2ZVBhdGhuYW1lKHRvLCBmcm9tKSB7XG4gIGlmIChmcm9tID09PSB1bmRlZmluZWQpIGZyb20gPSAnJztcblxuICB2YXIgdG9QYXJ0cyA9ICh0byAmJiB0by5zcGxpdCgnLycpKSB8fCBbXTtcbiAgdmFyIGZyb21QYXJ0cyA9IChmcm9tICYmIGZyb20uc3BsaXQoJy8nKSkgfHwgW107XG5cbiAgdmFyIGlzVG9BYnMgPSB0byAmJiBpc0Fic29sdXRlKHRvKTtcbiAgdmFyIGlzRnJvbUFicyA9IGZyb20gJiYgaXNBYnNvbHV0ZShmcm9tKTtcbiAgdmFyIG11c3RFbmRBYnMgPSBpc1RvQWJzIHx8IGlzRnJvbUFicztcblxuICBpZiAodG8gJiYgaXNBYnNvbHV0ZSh0bykpIHtcbiAgICAvLyB0byBpcyBhYnNvbHV0ZVxuICAgIGZyb21QYXJ0cyA9IHRvUGFydHM7XG4gIH0gZWxzZSBpZiAodG9QYXJ0cy5sZW5ndGgpIHtcbiAgICAvLyB0byBpcyByZWxhdGl2ZSwgZHJvcCB0aGUgZmlsZW5hbWVcbiAgICBmcm9tUGFydHMucG9wKCk7XG4gICAgZnJvbVBhcnRzID0gZnJvbVBhcnRzLmNvbmNhdCh0b1BhcnRzKTtcbiAgfVxuXG4gIGlmICghZnJvbVBhcnRzLmxlbmd0aCkgcmV0dXJuICcvJztcblxuICB2YXIgaGFzVHJhaWxpbmdTbGFzaDtcbiAgaWYgKGZyb21QYXJ0cy5sZW5ndGgpIHtcbiAgICB2YXIgbGFzdCA9IGZyb21QYXJ0c1tmcm9tUGFydHMubGVuZ3RoIC0gMV07XG4gICAgaGFzVHJhaWxpbmdTbGFzaCA9IGxhc3QgPT09ICcuJyB8fCBsYXN0ID09PSAnLi4nIHx8IGxhc3QgPT09ICcnO1xuICB9IGVsc2Uge1xuICAgIGhhc1RyYWlsaW5nU2xhc2ggPSBmYWxzZTtcbiAgfVxuXG4gIHZhciB1cCA9IDA7XG4gIGZvciAodmFyIGkgPSBmcm9tUGFydHMubGVuZ3RoOyBpID49IDA7IGktLSkge1xuICAgIHZhciBwYXJ0ID0gZnJvbVBhcnRzW2ldO1xuXG4gICAgaWYgKHBhcnQgPT09ICcuJykge1xuICAgICAgc3BsaWNlT25lKGZyb21QYXJ0cywgaSk7XG4gICAgfSBlbHNlIGlmIChwYXJ0ID09PSAnLi4nKSB7XG4gICAgICBzcGxpY2VPbmUoZnJvbVBhcnRzLCBpKTtcbiAgICAgIHVwKys7XG4gICAgfSBlbHNlIGlmICh1cCkge1xuICAgICAgc3BsaWNlT25lKGZyb21QYXJ0cywgaSk7XG4gICAgICB1cC0tO1xuICAgIH1cbiAgfVxuXG4gIGlmICghbXVzdEVuZEFicykgZm9yICg7IHVwLS07IHVwKSBmcm9tUGFydHMudW5zaGlmdCgnLi4nKTtcblxuICBpZiAoXG4gICAgbXVzdEVuZEFicyAmJlxuICAgIGZyb21QYXJ0c1swXSAhPT0gJycgJiZcbiAgICAoIWZyb21QYXJ0c1swXSB8fCAhaXNBYnNvbHV0ZShmcm9tUGFydHNbMF0pKVxuICApXG4gICAgZnJvbVBhcnRzLnVuc2hpZnQoJycpO1xuXG4gIHZhciByZXN1bHQgPSBmcm9tUGFydHMuam9pbignLycpO1xuXG4gIGlmIChoYXNUcmFpbGluZ1NsYXNoICYmIHJlc3VsdC5zdWJzdHIoLTEpICE9PSAnLycpIHJlc3VsdCArPSAnLyc7XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgcmVzb2x2ZVBhdGhuYW1lO1xuIiwiZnVuY3Rpb24gdmFsdWVPZihvYmopIHtcbiAgcmV0dXJuIG9iai52YWx1ZU9mID8gb2JqLnZhbHVlT2YoKSA6IE9iamVjdC5wcm90b3R5cGUudmFsdWVPZi5jYWxsKG9iaik7XG59XG5cbmZ1bmN0aW9uIHZhbHVlRXF1YWwoYSwgYikge1xuICAvLyBUZXN0IGZvciBzdHJpY3QgZXF1YWxpdHkgZmlyc3QuXG4gIGlmIChhID09PSBiKSByZXR1cm4gdHJ1ZTtcblxuICAvLyBPdGhlcndpc2UsIGlmIGVpdGhlciBvZiB0aGVtID09IG51bGwgdGhleSBhcmUgbm90IGVxdWFsLlxuICBpZiAoYSA9PSBudWxsIHx8IGIgPT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuXG4gIGlmIChBcnJheS5pc0FycmF5KGEpKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIEFycmF5LmlzQXJyYXkoYikgJiZcbiAgICAgIGEubGVuZ3RoID09PSBiLmxlbmd0aCAmJlxuICAgICAgYS5ldmVyeShmdW5jdGlvbihpdGVtLCBpbmRleCkge1xuICAgICAgICByZXR1cm4gdmFsdWVFcXVhbChpdGVtLCBiW2luZGV4XSk7XG4gICAgICB9KVxuICAgICk7XG4gIH1cblxuICBpZiAodHlwZW9mIGEgPT09ICdvYmplY3QnIHx8IHR5cGVvZiBiID09PSAnb2JqZWN0Jykge1xuICAgIHZhciBhVmFsdWUgPSB2YWx1ZU9mKGEpO1xuICAgIHZhciBiVmFsdWUgPSB2YWx1ZU9mKGIpO1xuXG4gICAgaWYgKGFWYWx1ZSAhPT0gYSB8fCBiVmFsdWUgIT09IGIpIHJldHVybiB2YWx1ZUVxdWFsKGFWYWx1ZSwgYlZhbHVlKTtcblxuICAgIHJldHVybiBPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LCBhLCBiKSkuZXZlcnkoZnVuY3Rpb24oa2V5KSB7XG4gICAgICByZXR1cm4gdmFsdWVFcXVhbChhW2tleV0sIGJba2V5XSk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHZhbHVlRXF1YWw7XG4iLCJ2YXIgaXNQcm9kdWN0aW9uID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJztcbnZhciBwcmVmaXggPSAnSW52YXJpYW50IGZhaWxlZCc7XG5mdW5jdGlvbiBpbnZhcmlhbnQoY29uZGl0aW9uLCBtZXNzYWdlKSB7XG4gICAgaWYgKGNvbmRpdGlvbikge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChpc1Byb2R1Y3Rpb24pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKHByZWZpeCk7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihwcmVmaXggKyBcIjogXCIgKyAobWVzc2FnZSB8fCAnJykpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpbnZhcmlhbnQ7XG4iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcyc7XG5pbXBvcnQgcmVzb2x2ZVBhdGhuYW1lIGZyb20gJ3Jlc29sdmUtcGF0aG5hbWUnO1xuaW1wb3J0IHZhbHVlRXF1YWwgZnJvbSAndmFsdWUtZXF1YWwnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAndGlueS13YXJuaW5nJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAndGlueS1pbnZhcmlhbnQnO1xuXG5mdW5jdGlvbiBhZGRMZWFkaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICcvJyA/IHBhdGggOiAnLycgKyBwYXRoO1xufVxuZnVuY3Rpb24gc3RyaXBMZWFkaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICcvJyA/IHBhdGguc3Vic3RyKDEpIDogcGF0aDtcbn1cbmZ1bmN0aW9uIGhhc0Jhc2VuYW1lKHBhdGgsIHByZWZpeCkge1xuICByZXR1cm4gcGF0aC50b0xvd2VyQ2FzZSgpLmluZGV4T2YocHJlZml4LnRvTG93ZXJDYXNlKCkpID09PSAwICYmICcvPyMnLmluZGV4T2YocGF0aC5jaGFyQXQocHJlZml4Lmxlbmd0aCkpICE9PSAtMTtcbn1cbmZ1bmN0aW9uIHN0cmlwQmFzZW5hbWUocGF0aCwgcHJlZml4KSB7XG4gIHJldHVybiBoYXNCYXNlbmFtZShwYXRoLCBwcmVmaXgpID8gcGF0aC5zdWJzdHIocHJlZml4Lmxlbmd0aCkgOiBwYXRoO1xufVxuZnVuY3Rpb24gc3RyaXBUcmFpbGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KHBhdGgubGVuZ3RoIC0gMSkgPT09ICcvJyA/IHBhdGguc2xpY2UoMCwgLTEpIDogcGF0aDtcbn1cbmZ1bmN0aW9uIHBhcnNlUGF0aChwYXRoKSB7XG4gIHZhciBwYXRobmFtZSA9IHBhdGggfHwgJy8nO1xuICB2YXIgc2VhcmNoID0gJyc7XG4gIHZhciBoYXNoID0gJyc7XG4gIHZhciBoYXNoSW5kZXggPSBwYXRobmFtZS5pbmRleE9mKCcjJyk7XG5cbiAgaWYgKGhhc2hJbmRleCAhPT0gLTEpIHtcbiAgICBoYXNoID0gcGF0aG5hbWUuc3Vic3RyKGhhc2hJbmRleCk7XG4gICAgcGF0aG5hbWUgPSBwYXRobmFtZS5zdWJzdHIoMCwgaGFzaEluZGV4KTtcbiAgfVxuXG4gIHZhciBzZWFyY2hJbmRleCA9IHBhdGhuYW1lLmluZGV4T2YoJz8nKTtcblxuICBpZiAoc2VhcmNoSW5kZXggIT09IC0xKSB7XG4gICAgc2VhcmNoID0gcGF0aG5hbWUuc3Vic3RyKHNlYXJjaEluZGV4KTtcbiAgICBwYXRobmFtZSA9IHBhdGhuYW1lLnN1YnN0cigwLCBzZWFyY2hJbmRleCk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHBhdGhuYW1lOiBwYXRobmFtZSxcbiAgICBzZWFyY2g6IHNlYXJjaCA9PT0gJz8nID8gJycgOiBzZWFyY2gsXG4gICAgaGFzaDogaGFzaCA9PT0gJyMnID8gJycgOiBoYXNoXG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVQYXRoKGxvY2F0aW9uKSB7XG4gIHZhciBwYXRobmFtZSA9IGxvY2F0aW9uLnBhdGhuYW1lLFxuICAgICAgc2VhcmNoID0gbG9jYXRpb24uc2VhcmNoLFxuICAgICAgaGFzaCA9IGxvY2F0aW9uLmhhc2g7XG4gIHZhciBwYXRoID0gcGF0aG5hbWUgfHwgJy8nO1xuICBpZiAoc2VhcmNoICYmIHNlYXJjaCAhPT0gJz8nKSBwYXRoICs9IHNlYXJjaC5jaGFyQXQoMCkgPT09ICc/JyA/IHNlYXJjaCA6IFwiP1wiICsgc2VhcmNoO1xuICBpZiAoaGFzaCAmJiBoYXNoICE9PSAnIycpIHBhdGggKz0gaGFzaC5jaGFyQXQoMCkgPT09ICcjJyA/IGhhc2ggOiBcIiNcIiArIGhhc2g7XG4gIHJldHVybiBwYXRoO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwga2V5LCBjdXJyZW50TG9jYXRpb24pIHtcbiAgdmFyIGxvY2F0aW9uO1xuXG4gIGlmICh0eXBlb2YgcGF0aCA9PT0gJ3N0cmluZycpIHtcbiAgICAvLyBUd28tYXJnIGZvcm06IHB1c2gocGF0aCwgc3RhdGUpXG4gICAgbG9jYXRpb24gPSBwYXJzZVBhdGgocGF0aCk7XG4gICAgbG9jYXRpb24uc3RhdGUgPSBzdGF0ZTtcbiAgfSBlbHNlIHtcbiAgICAvLyBPbmUtYXJnIGZvcm06IHB1c2gobG9jYXRpb24pXG4gICAgbG9jYXRpb24gPSBfZXh0ZW5kcyh7fSwgcGF0aCk7XG4gICAgaWYgKGxvY2F0aW9uLnBhdGhuYW1lID09PSB1bmRlZmluZWQpIGxvY2F0aW9uLnBhdGhuYW1lID0gJyc7XG5cbiAgICBpZiAobG9jYXRpb24uc2VhcmNoKSB7XG4gICAgICBpZiAobG9jYXRpb24uc2VhcmNoLmNoYXJBdCgwKSAhPT0gJz8nKSBsb2NhdGlvbi5zZWFyY2ggPSAnPycgKyBsb2NhdGlvbi5zZWFyY2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2F0aW9uLnNlYXJjaCA9ICcnO1xuICAgIH1cblxuICAgIGlmIChsb2NhdGlvbi5oYXNoKSB7XG4gICAgICBpZiAobG9jYXRpb24uaGFzaC5jaGFyQXQoMCkgIT09ICcjJykgbG9jYXRpb24uaGFzaCA9ICcjJyArIGxvY2F0aW9uLmhhc2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2F0aW9uLmhhc2ggPSAnJztcbiAgICB9XG5cbiAgICBpZiAoc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBsb2NhdGlvbi5zdGF0ZSA9PT0gdW5kZWZpbmVkKSBsb2NhdGlvbi5zdGF0ZSA9IHN0YXRlO1xuICB9XG5cbiAgdHJ5IHtcbiAgICBsb2NhdGlvbi5wYXRobmFtZSA9IGRlY29kZVVSSShsb2NhdGlvbi5wYXRobmFtZSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAoZSBpbnN0YW5jZW9mIFVSSUVycm9yKSB7XG4gICAgICB0aHJvdyBuZXcgVVJJRXJyb3IoJ1BhdGhuYW1lIFwiJyArIGxvY2F0aW9uLnBhdGhuYW1lICsgJ1wiIGNvdWxkIG5vdCBiZSBkZWNvZGVkLiAnICsgJ1RoaXMgaXMgbGlrZWx5IGNhdXNlZCBieSBhbiBpbnZhbGlkIHBlcmNlbnQtZW5jb2RpbmcuJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IGU7XG4gICAgfVxuICB9XG5cbiAgaWYgKGtleSkgbG9jYXRpb24ua2V5ID0ga2V5O1xuXG4gIGlmIChjdXJyZW50TG9jYXRpb24pIHtcbiAgICAvLyBSZXNvbHZlIGluY29tcGxldGUvcmVsYXRpdmUgcGF0aG5hbWUgcmVsYXRpdmUgdG8gY3VycmVudCBsb2NhdGlvbi5cbiAgICBpZiAoIWxvY2F0aW9uLnBhdGhuYW1lKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9IGN1cnJlbnRMb2NhdGlvbi5wYXRobmFtZTtcbiAgICB9IGVsc2UgaWYgKGxvY2F0aW9uLnBhdGhuYW1lLmNoYXJBdCgwKSAhPT0gJy8nKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9IHJlc29sdmVQYXRobmFtZShsb2NhdGlvbi5wYXRobmFtZSwgY3VycmVudExvY2F0aW9uLnBhdGhuYW1lKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gV2hlbiB0aGVyZSBpcyBubyBwcmlvciBsb2NhdGlvbiBhbmQgcGF0aG5hbWUgaXMgZW1wdHksIHNldCBpdCB0byAvXG4gICAgaWYgKCFsb2NhdGlvbi5wYXRobmFtZSkge1xuICAgICAgbG9jYXRpb24ucGF0aG5hbWUgPSAnLyc7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGxvY2F0aW9uO1xufVxuZnVuY3Rpb24gbG9jYXRpb25zQXJlRXF1YWwoYSwgYikge1xuICByZXR1cm4gYS5wYXRobmFtZSA9PT0gYi5wYXRobmFtZSAmJiBhLnNlYXJjaCA9PT0gYi5zZWFyY2ggJiYgYS5oYXNoID09PSBiLmhhc2ggJiYgYS5rZXkgPT09IGIua2V5ICYmIHZhbHVlRXF1YWwoYS5zdGF0ZSwgYi5zdGF0ZSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKCkge1xuICB2YXIgcHJvbXB0ID0gbnVsbDtcblxuICBmdW5jdGlvbiBzZXRQcm9tcHQobmV4dFByb21wdCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcocHJvbXB0ID09IG51bGwsICdBIGhpc3Rvcnkgc3VwcG9ydHMgb25seSBvbmUgcHJvbXB0IGF0IGEgdGltZScpIDogdm9pZCAwO1xuICAgIHByb21wdCA9IG5leHRQcm9tcHQ7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChwcm9tcHQgPT09IG5leHRQcm9tcHQpIHByb21wdCA9IG51bGw7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgY2FsbGJhY2spIHtcbiAgICAvLyBUT0RPOiBJZiBhbm90aGVyIHRyYW5zaXRpb24gc3RhcnRzIHdoaWxlIHdlJ3JlIHN0aWxsIGNvbmZpcm1pbmdcbiAgICAvLyB0aGUgcHJldmlvdXMgb25lLCB3ZSBtYXkgZW5kIHVwIGluIGEgd2VpcmQgc3RhdGUuIEZpZ3VyZSBvdXQgdGhlXG4gICAgLy8gYmVzdCB3YXkgdG8gaGFuZGxlIHRoaXMuXG4gICAgaWYgKHByb21wdCAhPSBudWxsKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gdHlwZW9mIHByb21wdCA9PT0gJ2Z1bmN0aW9uJyA/IHByb21wdChsb2NhdGlvbiwgYWN0aW9uKSA6IHByb21wdDtcblxuICAgICAgaWYgKHR5cGVvZiByZXN1bHQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZ2V0VXNlckNvbmZpcm1hdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGdldFVzZXJDb25maXJtYXRpb24ocmVzdWx0LCBjYWxsYmFjayk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgJ0EgaGlzdG9yeSBuZWVkcyBhIGdldFVzZXJDb25maXJtYXRpb24gZnVuY3Rpb24gaW4gb3JkZXIgdG8gdXNlIGEgcHJvbXB0IG1lc3NhZ2UnKSA6IHZvaWQgMDtcbiAgICAgICAgICBjYWxsYmFjayh0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gUmV0dXJuIGZhbHNlIGZyb20gYSB0cmFuc2l0aW9uIGhvb2sgdG8gY2FuY2VsIHRoZSB0cmFuc2l0aW9uLlxuICAgICAgICBjYWxsYmFjayhyZXN1bHQgIT09IGZhbHNlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY2FsbGJhY2sodHJ1ZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGxpc3RlbmVycyA9IFtdO1xuXG4gIGZ1bmN0aW9uIGFwcGVuZExpc3RlbmVyKGZuKSB7XG4gICAgdmFyIGlzQWN0aXZlID0gdHJ1ZTtcblxuICAgIGZ1bmN0aW9uIGxpc3RlbmVyKCkge1xuICAgICAgaWYgKGlzQWN0aXZlKSBmbi5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cyk7XG4gICAgfVxuXG4gICAgbGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpc0FjdGl2ZSA9IGZhbHNlO1xuICAgICAgbGlzdGVuZXJzID0gbGlzdGVuZXJzLmZpbHRlcihmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICByZXR1cm4gaXRlbSAhPT0gbGlzdGVuZXI7XG4gICAgICB9KTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gbm90aWZ5TGlzdGVuZXJzKCkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBsaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAobGlzdGVuZXIpIHtcbiAgICAgIHJldHVybiBsaXN0ZW5lci5hcHBseSh2b2lkIDAsIGFyZ3MpO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBzZXRQcm9tcHQ6IHNldFByb21wdCxcbiAgICBjb25maXJtVHJhbnNpdGlvblRvOiBjb25maXJtVHJhbnNpdGlvblRvLFxuICAgIGFwcGVuZExpc3RlbmVyOiBhcHBlbmRMaXN0ZW5lcixcbiAgICBub3RpZnlMaXN0ZW5lcnM6IG5vdGlmeUxpc3RlbmVyc1xuICB9O1xufVxuXG52YXIgY2FuVXNlRE9NID0gISEodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmRvY3VtZW50ICYmIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcbmZ1bmN0aW9uIGdldENvbmZpcm1hdGlvbihtZXNzYWdlLCBjYWxsYmFjaykge1xuICBjYWxsYmFjayh3aW5kb3cuY29uZmlybShtZXNzYWdlKSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tYWxlcnRcbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBIVE1MNSBoaXN0b3J5IEFQSSBpcyBzdXBwb3J0ZWQuIFRha2VuIGZyb20gTW9kZXJuaXpyLlxuICpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2Jsb2IvbWFzdGVyL2ZlYXR1cmUtZGV0ZWN0cy9oaXN0b3J5LmpzXG4gKiBjaGFuZ2VkIHRvIGF2b2lkIGZhbHNlIG5lZ2F0aXZlcyBmb3IgV2luZG93cyBQaG9uZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdGpzL3JlYWN0LXJvdXRlci9pc3N1ZXMvNTg2XG4gKi9cblxuZnVuY3Rpb24gc3VwcG9ydHNIaXN0b3J5KCkge1xuICB2YXIgdWEgPSB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudDtcbiAgaWYgKCh1YS5pbmRleE9mKCdBbmRyb2lkIDIuJykgIT09IC0xIHx8IHVhLmluZGV4T2YoJ0FuZHJvaWQgNC4wJykgIT09IC0xKSAmJiB1YS5pbmRleE9mKCdNb2JpbGUgU2FmYXJpJykgIT09IC0xICYmIHVhLmluZGV4T2YoJ0Nocm9tZScpID09PSAtMSAmJiB1YS5pbmRleE9mKCdXaW5kb3dzIFBob25lJykgPT09IC0xKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiB3aW5kb3cuaGlzdG9yeSAmJiAncHVzaFN0YXRlJyBpbiB3aW5kb3cuaGlzdG9yeTtcbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGJyb3dzZXIgZmlyZXMgcG9wc3RhdGUgb24gaGFzaCBjaGFuZ2UuXG4gKiBJRTEwIGFuZCBJRTExIGRvIG5vdC5cbiAqL1xuXG5mdW5jdGlvbiBzdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlKCkge1xuICByZXR1cm4gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignVHJpZGVudCcpID09PSAtMTtcbn1cbi8qKlxuICogUmV0dXJucyBmYWxzZSBpZiB1c2luZyBnbyhuKSB3aXRoIGhhc2ggaGlzdG9yeSBjYXVzZXMgYSBmdWxsIHBhZ2UgcmVsb2FkLlxuICovXG5cbmZ1bmN0aW9uIHN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoKCkge1xuICByZXR1cm4gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignRmlyZWZveCcpID09PSAtMTtcbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGEgZ2l2ZW4gcG9wc3RhdGUgZXZlbnQgaXMgYW4gZXh0cmFuZW91cyBXZWJLaXQgZXZlbnQuXG4gKiBBY2NvdW50cyBmb3IgdGhlIGZhY3QgdGhhdCBDaHJvbWUgb24gaU9TIGZpcmVzIHJlYWwgcG9wc3RhdGUgZXZlbnRzXG4gKiBjb250YWluaW5nIHVuZGVmaW5lZCBzdGF0ZSB3aGVuIHByZXNzaW5nIHRoZSBiYWNrIGJ1dHRvbi5cbiAqL1xuXG5mdW5jdGlvbiBpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50KGV2ZW50KSB7XG4gIHJldHVybiBldmVudC5zdGF0ZSA9PT0gdW5kZWZpbmVkICYmIG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignQ3JpT1MnKSA9PT0gLTE7XG59XG5cbnZhciBQb3BTdGF0ZUV2ZW50ID0gJ3BvcHN0YXRlJztcbnZhciBIYXNoQ2hhbmdlRXZlbnQgPSAnaGFzaGNoYW5nZSc7XG5cbmZ1bmN0aW9uIGdldEhpc3RvcnlTdGF0ZSgpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gd2luZG93Lmhpc3Rvcnkuc3RhdGUgfHwge307XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBJRSAxMSBzb21ldGltZXMgdGhyb3dzIHdoZW4gYWNjZXNzaW5nIHdpbmRvdy5oaXN0b3J5LnN0YXRlXG4gICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9SZWFjdFRyYWluaW5nL2hpc3RvcnkvcHVsbC8yODlcbiAgICByZXR1cm4ge307XG4gIH1cbn1cbi8qKlxuICogQ3JlYXRlcyBhIGhpc3Rvcnkgb2JqZWN0IHRoYXQgdXNlcyB0aGUgSFRNTDUgaGlzdG9yeSBBUEkgaW5jbHVkaW5nXG4gKiBwdXNoU3RhdGUsIHJlcGxhY2VTdGF0ZSwgYW5kIHRoZSBwb3BzdGF0ZSBldmVudC5cbiAqL1xuXG5cbmZ1bmN0aW9uIGNyZWF0ZUJyb3dzZXJIaXN0b3J5KHByb3BzKSB7XG4gIGlmIChwcm9wcyA9PT0gdm9pZCAwKSB7XG4gICAgcHJvcHMgPSB7fTtcbiAgfVxuXG4gICFjYW5Vc2VET00gPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdCcm93c2VyIGhpc3RvcnkgbmVlZHMgYSBET00nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHZhciBnbG9iYWxIaXN0b3J5ID0gd2luZG93Lmhpc3Rvcnk7XG4gIHZhciBjYW5Vc2VIaXN0b3J5ID0gc3VwcG9ydHNIaXN0b3J5KCk7XG4gIHZhciBuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lciA9ICFzdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlKCk7XG4gIHZhciBfcHJvcHMgPSBwcm9wcyxcbiAgICAgIF9wcm9wcyRmb3JjZVJlZnJlc2ggPSBfcHJvcHMuZm9yY2VSZWZyZXNoLFxuICAgICAgZm9yY2VSZWZyZXNoID0gX3Byb3BzJGZvcmNlUmVmcmVzaCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZm9yY2VSZWZyZXNoLFxuICAgICAgX3Byb3BzJGdldFVzZXJDb25maXJtID0gX3Byb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBnZXRVc2VyQ29uZmlybWF0aW9uID0gX3Byb3BzJGdldFVzZXJDb25maXJtID09PSB2b2lkIDAgPyBnZXRDb25maXJtYXRpb24gOiBfcHJvcHMkZ2V0VXNlckNvbmZpcm0sXG4gICAgICBfcHJvcHMka2V5TGVuZ3RoID0gX3Byb3BzLmtleUxlbmd0aCxcbiAgICAgIGtleUxlbmd0aCA9IF9wcm9wcyRrZXlMZW5ndGggPT09IHZvaWQgMCA/IDYgOiBfcHJvcHMka2V5TGVuZ3RoO1xuICB2YXIgYmFzZW5hbWUgPSBwcm9wcy5iYXNlbmFtZSA/IHN0cmlwVHJhaWxpbmdTbGFzaChhZGRMZWFkaW5nU2xhc2gocHJvcHMuYmFzZW5hbWUpKSA6ICcnO1xuXG4gIGZ1bmN0aW9uIGdldERPTUxvY2F0aW9uKGhpc3RvcnlTdGF0ZSkge1xuICAgIHZhciBfcmVmID0gaGlzdG9yeVN0YXRlIHx8IHt9LFxuICAgICAgICBrZXkgPSBfcmVmLmtleSxcbiAgICAgICAgc3RhdGUgPSBfcmVmLnN0YXRlO1xuXG4gICAgdmFyIF93aW5kb3ckbG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb24sXG4gICAgICAgIHBhdGhuYW1lID0gX3dpbmRvdyRsb2NhdGlvbi5wYXRobmFtZSxcbiAgICAgICAgc2VhcmNoID0gX3dpbmRvdyRsb2NhdGlvbi5zZWFyY2gsXG4gICAgICAgIGhhc2ggPSBfd2luZG93JGxvY2F0aW9uLmhhc2g7XG4gICAgdmFyIHBhdGggPSBwYXRobmFtZSArIHNlYXJjaCArIGhhc2g7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghYmFzZW5hbWUgfHwgaGFzQmFzZW5hbWUocGF0aCwgYmFzZW5hbWUpLCAnWW91IGFyZSBhdHRlbXB0aW5nIHRvIHVzZSBhIGJhc2VuYW1lIG9uIGEgcGFnZSB3aG9zZSBVUkwgcGF0aCBkb2VzIG5vdCBiZWdpbiAnICsgJ3dpdGggdGhlIGJhc2VuYW1lLiBFeHBlY3RlZCBwYXRoIFwiJyArIHBhdGggKyAnXCIgdG8gYmVnaW4gd2l0aCBcIicgKyBiYXNlbmFtZSArICdcIi4nKSA6IHZvaWQgMDtcbiAgICBpZiAoYmFzZW5hbWUpIHBhdGggPSBzdHJpcEJhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKTtcbiAgICByZXR1cm4gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGtleSk7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVLZXkoKSB7XG4gICAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCBrZXlMZW5ndGgpO1xuICB9XG5cbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKTtcblxuICBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBnbG9iYWxIaXN0b3J5Lmxlbmd0aDtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5ub3RpZnlMaXN0ZW5lcnMoaGlzdG9yeS5sb2NhdGlvbiwgaGlzdG9yeS5hY3Rpb24pO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlUG9wU3RhdGUoZXZlbnQpIHtcbiAgICAvLyBJZ25vcmUgZXh0cmFuZW91cyBwb3BzdGF0ZSBldmVudHMgaW4gV2ViS2l0LlxuICAgIGlmIChpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50KGV2ZW50KSkgcmV0dXJuO1xuICAgIGhhbmRsZVBvcChnZXRET01Mb2NhdGlvbihldmVudC5zdGF0ZSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlSGFzaENoYW5nZSgpIHtcbiAgICBoYW5kbGVQb3AoZ2V0RE9NTG9jYXRpb24oZ2V0SGlzdG9yeVN0YXRlKCkpKTtcbiAgfVxuXG4gIHZhciBmb3JjZU5leHRQb3AgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBoYW5kbGVQb3AobG9jYXRpb24pIHtcbiAgICBpZiAoZm9yY2VOZXh0UG9wKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSBmYWxzZTtcbiAgICAgIHNldFN0YXRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhY3Rpb24gPSAnUE9QJztcbiAgICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICAgIGlmIChvaykge1xuICAgICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV2ZXJ0UG9wKGxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmV2ZXJ0UG9wKGZyb21Mb2NhdGlvbikge1xuICAgIHZhciB0b0xvY2F0aW9uID0gaGlzdG9yeS5sb2NhdGlvbjsgLy8gVE9ETzogV2UgY291bGQgcHJvYmFibHkgbWFrZSB0aGlzIG1vcmUgcmVsaWFibGUgYnlcbiAgICAvLyBrZWVwaW5nIGEgbGlzdCBvZiBrZXlzIHdlJ3ZlIHNlZW4gaW4gc2Vzc2lvblN0b3JhZ2UuXG4gICAgLy8gSW5zdGVhZCwgd2UganVzdCBkZWZhdWx0IHRvIDAgZm9yIGtleXMgd2UgZG9uJ3Qga25vdy5cblxuICAgIHZhciB0b0luZGV4ID0gYWxsS2V5cy5pbmRleE9mKHRvTG9jYXRpb24ua2V5KTtcbiAgICBpZiAodG9JbmRleCA9PT0gLTEpIHRvSW5kZXggPSAwO1xuICAgIHZhciBmcm9tSW5kZXggPSBhbGxLZXlzLmluZGV4T2YoZnJvbUxvY2F0aW9uLmtleSk7XG4gICAgaWYgKGZyb21JbmRleCA9PT0gLTEpIGZyb21JbmRleCA9IDA7XG4gICAgdmFyIGRlbHRhID0gdG9JbmRleCAtIGZyb21JbmRleDtcblxuICAgIGlmIChkZWx0YSkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gdHJ1ZTtcbiAgICAgIGdvKGRlbHRhKTtcbiAgICB9XG4gIH1cblxuICB2YXIgaW5pdGlhbExvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oZ2V0SGlzdG9yeVN0YXRlKCkpO1xuICB2YXIgYWxsS2V5cyA9IFtpbml0aWFsTG9jYXRpb24ua2V5XTsgLy8gUHVibGljIGludGVyZmFjZVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUhyZWYobG9jYXRpb24pIHtcbiAgICByZXR1cm4gYmFzZW5hbWUgKyBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodHlwZW9mIHBhdGggPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHB1c2ggd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdQVVNIJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICB2YXIgaHJlZiA9IGNyZWF0ZUhyZWYobG9jYXRpb24pO1xuICAgICAgdmFyIGtleSA9IGxvY2F0aW9uLmtleSxcbiAgICAgICAgICBzdGF0ZSA9IGxvY2F0aW9uLnN0YXRlO1xuXG4gICAgICBpZiAoY2FuVXNlSGlzdG9yeSkge1xuICAgICAgICBnbG9iYWxIaXN0b3J5LnB1c2hTdGF0ZSh7XG4gICAgICAgICAga2V5OiBrZXksXG4gICAgICAgICAgc3RhdGU6IHN0YXRlXG4gICAgICAgIH0sIG51bGwsIGhyZWYpO1xuXG4gICAgICAgIGlmIChmb3JjZVJlZnJlc2gpIHtcbiAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGhyZWY7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHByZXZJbmRleCA9IGFsbEtleXMuaW5kZXhPZihoaXN0b3J5LmxvY2F0aW9uLmtleSk7XG4gICAgICAgICAgdmFyIG5leHRLZXlzID0gYWxsS2V5cy5zbGljZSgwLCBwcmV2SW5kZXggKyAxKTtcbiAgICAgICAgICBuZXh0S2V5cy5wdXNoKGxvY2F0aW9uLmtleSk7XG4gICAgICAgICAgYWxsS2V5cyA9IG5leHRLZXlzO1xuICAgICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0Jyb3dzZXIgaGlzdG9yeSBjYW5ub3QgcHVzaCBzdGF0ZSBpbiBicm93c2VycyB0aGF0IGRvIG5vdCBzdXBwb3J0IEhUTUw1IGhpc3RvcnknKSA6IHZvaWQgMDtcbiAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBocmVmO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVwbGFjZShwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0eXBlb2YgcGF0aCA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcmVwbGFjZSB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1JFUExBQ0UnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIHZhciBocmVmID0gY3JlYXRlSHJlZihsb2NhdGlvbik7XG4gICAgICB2YXIga2V5ID0gbG9jYXRpb24ua2V5LFxuICAgICAgICAgIHN0YXRlID0gbG9jYXRpb24uc3RhdGU7XG5cbiAgICAgIGlmIChjYW5Vc2VIaXN0b3J5KSB7XG4gICAgICAgIGdsb2JhbEhpc3RvcnkucmVwbGFjZVN0YXRlKHtcbiAgICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgICBzdGF0ZTogc3RhdGVcbiAgICAgICAgfSwgbnVsbCwgaHJlZik7XG5cbiAgICAgICAgaWYgKGZvcmNlUmVmcmVzaCkge1xuICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKGhyZWYpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxLZXlzLmluZGV4T2YoaGlzdG9yeS5sb2NhdGlvbi5rZXkpO1xuICAgICAgICAgIGlmIChwcmV2SW5kZXggIT09IC0xKSBhbGxLZXlzW3ByZXZJbmRleF0gPSBsb2NhdGlvbi5rZXk7XG4gICAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnQnJvd3NlciBoaXN0b3J5IGNhbm5vdCByZXBsYWNlIHN0YXRlIGluIGJyb3dzZXJzIHRoYXQgZG8gbm90IHN1cHBvcnQgSFRNTDUgaGlzdG9yeScpIDogdm9pZCAwO1xuICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZShocmVmKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvKG4pIHtcbiAgICBnbG9iYWxIaXN0b3J5LmdvKG4pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29CYWNrKCkge1xuICAgIGdvKC0xKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvRm9yd2FyZCgpIHtcbiAgICBnbygxKTtcbiAgfVxuXG4gIHZhciBsaXN0ZW5lckNvdW50ID0gMDtcblxuICBmdW5jdGlvbiBjaGVja0RPTUxpc3RlbmVycyhkZWx0YSkge1xuICAgIGxpc3RlbmVyQ291bnQgKz0gZGVsdGE7XG5cbiAgICBpZiAobGlzdGVuZXJDb3VudCA9PT0gMSAmJiBkZWx0YSA9PT0gMSkge1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoUG9wU3RhdGVFdmVudCwgaGFuZGxlUG9wU3RhdGUpO1xuICAgICAgaWYgKG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyKSB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnQsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH0gZWxzZSBpZiAobGlzdGVuZXJDb3VudCA9PT0gMCkge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoUG9wU3RhdGVFdmVudCwgaGFuZGxlUG9wU3RhdGUpO1xuICAgICAgaWYgKG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyKSB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnQsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBpc0Jsb2NrZWQgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBibG9jayhwcm9tcHQpIHtcbiAgICBpZiAocHJvbXB0ID09PSB2b2lkIDApIHtcbiAgICAgIHByb21wdCA9IGZhbHNlO1xuICAgIH1cblxuICAgIHZhciB1bmJsb2NrID0gdHJhbnNpdGlvbk1hbmFnZXIuc2V0UHJvbXB0KHByb21wdCk7XG5cbiAgICBpZiAoIWlzQmxvY2tlZCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG4gICAgICBpc0Jsb2NrZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoaXNCbG9ja2VkKSB7XG4gICAgICAgIGlzQmxvY2tlZCA9IGZhbHNlO1xuICAgICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB1bmJsb2NrKCk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xuICAgIHZhciB1bmxpc3RlbiA9IHRyYW5zaXRpb25NYW5hZ2VyLmFwcGVuZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgdW5saXN0ZW4oKTtcbiAgICB9O1xuICB9XG5cbiAgdmFyIGhpc3RvcnkgPSB7XG4gICAgbGVuZ3RoOiBnbG9iYWxIaXN0b3J5Lmxlbmd0aCxcbiAgICBhY3Rpb246ICdQT1AnLFxuICAgIGxvY2F0aW9uOiBpbml0aWFsTG9jYXRpb24sXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGdvQmFjazogZ29CYWNrLFxuICAgIGdvRm9yd2FyZDogZ29Gb3J3YXJkLFxuICAgIGJsb2NrOiBibG9jayxcbiAgICBsaXN0ZW46IGxpc3RlblxuICB9O1xuICByZXR1cm4gaGlzdG9yeTtcbn1cblxudmFyIEhhc2hDaGFuZ2VFdmVudCQxID0gJ2hhc2hjaGFuZ2UnO1xudmFyIEhhc2hQYXRoQ29kZXJzID0ge1xuICBoYXNoYmFuZzoge1xuICAgIGVuY29kZVBhdGg6IGZ1bmN0aW9uIGVuY29kZVBhdGgocGF0aCkge1xuICAgICAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnIScgPyBwYXRoIDogJyEvJyArIHN0cmlwTGVhZGluZ1NsYXNoKHBhdGgpO1xuICAgIH0sXG4gICAgZGVjb2RlUGF0aDogZnVuY3Rpb24gZGVjb2RlUGF0aChwYXRoKSB7XG4gICAgICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICchJyA/IHBhdGguc3Vic3RyKDEpIDogcGF0aDtcbiAgICB9XG4gIH0sXG4gIG5vc2xhc2g6IHtcbiAgICBlbmNvZGVQYXRoOiBzdHJpcExlYWRpbmdTbGFzaCxcbiAgICBkZWNvZGVQYXRoOiBhZGRMZWFkaW5nU2xhc2hcbiAgfSxcbiAgc2xhc2g6IHtcbiAgICBlbmNvZGVQYXRoOiBhZGRMZWFkaW5nU2xhc2gsXG4gICAgZGVjb2RlUGF0aDogYWRkTGVhZGluZ1NsYXNoXG4gIH1cbn07XG5cbmZ1bmN0aW9uIHN0cmlwSGFzaCh1cmwpIHtcbiAgdmFyIGhhc2hJbmRleCA9IHVybC5pbmRleE9mKCcjJyk7XG4gIHJldHVybiBoYXNoSW5kZXggPT09IC0xID8gdXJsIDogdXJsLnNsaWNlKDAsIGhhc2hJbmRleCk7XG59XG5cbmZ1bmN0aW9uIGdldEhhc2hQYXRoKCkge1xuICAvLyBXZSBjYW4ndCB1c2Ugd2luZG93LmxvY2F0aW9uLmhhc2ggaGVyZSBiZWNhdXNlIGl0J3Mgbm90XG4gIC8vIGNvbnNpc3RlbnQgYWNyb3NzIGJyb3dzZXJzIC0gRmlyZWZveCB3aWxsIHByZS1kZWNvZGUgaXQhXG4gIHZhciBocmVmID0gd2luZG93LmxvY2F0aW9uLmhyZWY7XG4gIHZhciBoYXNoSW5kZXggPSBocmVmLmluZGV4T2YoJyMnKTtcbiAgcmV0dXJuIGhhc2hJbmRleCA9PT0gLTEgPyAnJyA6IGhyZWYuc3Vic3RyaW5nKGhhc2hJbmRleCArIDEpO1xufVxuXG5mdW5jdGlvbiBwdXNoSGFzaFBhdGgocGF0aCkge1xuICB3aW5kb3cubG9jYXRpb24uaGFzaCA9IHBhdGg7XG59XG5cbmZ1bmN0aW9uIHJlcGxhY2VIYXNoUGF0aChwYXRoKSB7XG4gIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKHN0cmlwSGFzaCh3aW5kb3cubG9jYXRpb24uaHJlZikgKyAnIycgKyBwYXRoKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlSGFzaEhpc3RvcnkocHJvcHMpIHtcbiAgaWYgKHByb3BzID09PSB2b2lkIDApIHtcbiAgICBwcm9wcyA9IHt9O1xuICB9XG5cbiAgIWNhblVzZURPTSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0hhc2ggaGlzdG9yeSBuZWVkcyBhIERPTScpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgdmFyIGdsb2JhbEhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcbiAgdmFyIGNhbkdvV2l0aG91dFJlbG9hZCA9IHN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoKCk7XG4gIHZhciBfcHJvcHMgPSBwcm9wcyxcbiAgICAgIF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9IF9wcm9wcy5nZXRVc2VyQ29uZmlybWF0aW9uLFxuICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbiA9IF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9PT0gdm9pZCAwID8gZ2V0Q29uZmlybWF0aW9uIDogX3Byb3BzJGdldFVzZXJDb25maXJtLFxuICAgICAgX3Byb3BzJGhhc2hUeXBlID0gX3Byb3BzLmhhc2hUeXBlLFxuICAgICAgaGFzaFR5cGUgPSBfcHJvcHMkaGFzaFR5cGUgPT09IHZvaWQgMCA/ICdzbGFzaCcgOiBfcHJvcHMkaGFzaFR5cGU7XG4gIHZhciBiYXNlbmFtZSA9IHByb3BzLmJhc2VuYW1lID8gc3RyaXBUcmFpbGluZ1NsYXNoKGFkZExlYWRpbmdTbGFzaChwcm9wcy5iYXNlbmFtZSkpIDogJyc7XG4gIHZhciBfSGFzaFBhdGhDb2RlcnMkaGFzaFQgPSBIYXNoUGF0aENvZGVyc1toYXNoVHlwZV0sXG4gICAgICBlbmNvZGVQYXRoID0gX0hhc2hQYXRoQ29kZXJzJGhhc2hULmVuY29kZVBhdGgsXG4gICAgICBkZWNvZGVQYXRoID0gX0hhc2hQYXRoQ29kZXJzJGhhc2hULmRlY29kZVBhdGg7XG5cbiAgZnVuY3Rpb24gZ2V0RE9NTG9jYXRpb24oKSB7XG4gICAgdmFyIHBhdGggPSBkZWNvZGVQYXRoKGdldEhhc2hQYXRoKCkpO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIWJhc2VuYW1lIHx8IGhhc0Jhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKSwgJ1lvdSBhcmUgYXR0ZW1wdGluZyB0byB1c2UgYSBiYXNlbmFtZSBvbiBhIHBhZ2Ugd2hvc2UgVVJMIHBhdGggZG9lcyBub3QgYmVnaW4gJyArICd3aXRoIHRoZSBiYXNlbmFtZS4gRXhwZWN0ZWQgcGF0aCBcIicgKyBwYXRoICsgJ1wiIHRvIGJlZ2luIHdpdGggXCInICsgYmFzZW5hbWUgKyAnXCIuJykgOiB2b2lkIDA7XG4gICAgaWYgKGJhc2VuYW1lKSBwYXRoID0gc3RyaXBCYXNlbmFtZShwYXRoLCBiYXNlbmFtZSk7XG4gICAgcmV0dXJuIGNyZWF0ZUxvY2F0aW9uKHBhdGgpO1xuICB9XG5cbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKTtcblxuICBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBnbG9iYWxIaXN0b3J5Lmxlbmd0aDtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5ub3RpZnlMaXN0ZW5lcnMoaGlzdG9yeS5sb2NhdGlvbiwgaGlzdG9yeS5hY3Rpb24pO1xuICB9XG5cbiAgdmFyIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICB2YXIgaWdub3JlUGF0aCA9IG51bGw7XG5cbiAgZnVuY3Rpb24gbG9jYXRpb25zQXJlRXF1YWwkJDEoYSwgYikge1xuICAgIHJldHVybiBhLnBhdGhuYW1lID09PSBiLnBhdGhuYW1lICYmIGEuc2VhcmNoID09PSBiLnNlYXJjaCAmJiBhLmhhc2ggPT09IGIuaGFzaDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZUhhc2hDaGFuZ2UoKSB7XG4gICAgdmFyIHBhdGggPSBnZXRIYXNoUGF0aCgpO1xuICAgIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgocGF0aCk7XG5cbiAgICBpZiAocGF0aCAhPT0gZW5jb2RlZFBhdGgpIHtcbiAgICAgIC8vIEVuc3VyZSB3ZSBhbHdheXMgaGF2ZSBhIHByb3Blcmx5LWVuY29kZWQgaGFzaC5cbiAgICAgIHJlcGxhY2VIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBsb2NhdGlvbiA9IGdldERPTUxvY2F0aW9uKCk7XG4gICAgICB2YXIgcHJldkxvY2F0aW9uID0gaGlzdG9yeS5sb2NhdGlvbjtcbiAgICAgIGlmICghZm9yY2VOZXh0UG9wICYmIGxvY2F0aW9uc0FyZUVxdWFsJCQxKHByZXZMb2NhdGlvbiwgbG9jYXRpb24pKSByZXR1cm47IC8vIEEgaGFzaGNoYW5nZSBkb2Vzbid0IGFsd2F5cyA9PSBsb2NhdGlvbiBjaGFuZ2UuXG5cbiAgICAgIGlmIChpZ25vcmVQYXRoID09PSBjcmVhdGVQYXRoKGxvY2F0aW9uKSkgcmV0dXJuOyAvLyBJZ25vcmUgdGhpcyBjaGFuZ2U7IHdlIGFscmVhZHkgc2V0U3RhdGUgaW4gcHVzaC9yZXBsYWNlLlxuXG4gICAgICBpZ25vcmVQYXRoID0gbnVsbDtcbiAgICAgIGhhbmRsZVBvcChsb2NhdGlvbik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlUG9wKGxvY2F0aW9uKSB7XG4gICAgaWYgKGZvcmNlTmV4dFBvcCkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG4gICAgICBzZXRTdGF0ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYWN0aW9uID0gJ1BPUCc7XG4gICAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgICBpZiAob2spIHtcbiAgICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldmVydFBvcChsb2NhdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJldmVydFBvcChmcm9tTG9jYXRpb24pIHtcbiAgICB2YXIgdG9Mb2NhdGlvbiA9IGhpc3RvcnkubG9jYXRpb247IC8vIFRPRE86IFdlIGNvdWxkIHByb2JhYmx5IG1ha2UgdGhpcyBtb3JlIHJlbGlhYmxlIGJ5XG4gICAgLy8ga2VlcGluZyBhIGxpc3Qgb2YgcGF0aHMgd2UndmUgc2VlbiBpbiBzZXNzaW9uU3RvcmFnZS5cbiAgICAvLyBJbnN0ZWFkLCB3ZSBqdXN0IGRlZmF1bHQgdG8gMCBmb3IgcGF0aHMgd2UgZG9uJ3Qga25vdy5cblxuICAgIHZhciB0b0luZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoY3JlYXRlUGF0aCh0b0xvY2F0aW9uKSk7XG4gICAgaWYgKHRvSW5kZXggPT09IC0xKSB0b0luZGV4ID0gMDtcbiAgICB2YXIgZnJvbUluZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoY3JlYXRlUGF0aChmcm9tTG9jYXRpb24pKTtcbiAgICBpZiAoZnJvbUluZGV4ID09PSAtMSkgZnJvbUluZGV4ID0gMDtcbiAgICB2YXIgZGVsdGEgPSB0b0luZGV4IC0gZnJvbUluZGV4O1xuXG4gICAgaWYgKGRlbHRhKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSB0cnVlO1xuICAgICAgZ28oZGVsdGEpO1xuICAgIH1cbiAgfSAvLyBFbnN1cmUgdGhlIGhhc2ggaXMgZW5jb2RlZCBwcm9wZXJseSBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZS5cblxuXG4gIHZhciBwYXRoID0gZ2V0SGFzaFBhdGgoKTtcbiAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChwYXRoKTtcbiAgaWYgKHBhdGggIT09IGVuY29kZWRQYXRoKSByZXBsYWNlSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICB2YXIgaW5pdGlhbExvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oKTtcbiAgdmFyIGFsbFBhdGhzID0gW2NyZWF0ZVBhdGgoaW5pdGlhbExvY2F0aW9uKV07IC8vIFB1YmxpYyBpbnRlcmZhY2VcblxuICBmdW5jdGlvbiBjcmVhdGVIcmVmKGxvY2F0aW9uKSB7XG4gICAgdmFyIGJhc2VUYWcgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdiYXNlJyk7XG4gICAgdmFyIGhyZWYgPSAnJztcblxuICAgIGlmIChiYXNlVGFnICYmIGJhc2VUYWcuZ2V0QXR0cmlidXRlKCdocmVmJykpIHtcbiAgICAgIGhyZWYgPSBzdHJpcEhhc2god2luZG93LmxvY2F0aW9uLmhyZWYpO1xuICAgIH1cblxuICAgIHJldHVybiBocmVmICsgJyMnICsgZW5jb2RlUGF0aChiYXNlbmFtZSArIGNyZWF0ZVBhdGgobG9jYXRpb24pKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHN0YXRlID09PSB1bmRlZmluZWQsICdIYXNoIGhpc3RvcnkgY2Fubm90IHB1c2ggc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1BVU0gnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuICAgICAgdmFyIHBhdGggPSBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbiAgICAgIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgoYmFzZW5hbWUgKyBwYXRoKTtcbiAgICAgIHZhciBoYXNoQ2hhbmdlZCA9IGdldEhhc2hQYXRoKCkgIT09IGVuY29kZWRQYXRoO1xuXG4gICAgICBpZiAoaGFzaENoYW5nZWQpIHtcbiAgICAgICAgLy8gV2UgY2Fubm90IHRlbGwgaWYgYSBoYXNoY2hhbmdlIHdhcyBjYXVzZWQgYnkgYSBQVVNILCBzbyB3ZSdkXG4gICAgICAgIC8vIHJhdGhlciBzZXRTdGF0ZSBoZXJlIGFuZCBpZ25vcmUgdGhlIGhhc2hjaGFuZ2UuIFRoZSBjYXZlYXQgaGVyZVxuICAgICAgICAvLyBpcyB0aGF0IG90aGVyIGhhc2ggaGlzdG9yaWVzIGluIHRoZSBwYWdlIHdpbGwgY29uc2lkZXIgaXQgYSBQT1AuXG4gICAgICAgIGlnbm9yZVBhdGggPSBwYXRoO1xuICAgICAgICBwdXNoSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoY3JlYXRlUGF0aChoaXN0b3J5LmxvY2F0aW9uKSk7XG4gICAgICAgIHZhciBuZXh0UGF0aHMgPSBhbGxQYXRocy5zbGljZSgwLCBwcmV2SW5kZXggKyAxKTtcbiAgICAgICAgbmV4dFBhdGhzLnB1c2gocGF0aCk7XG4gICAgICAgIGFsbFBhdGhzID0gbmV4dFBhdGhzO1xuICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgJ0hhc2ggaGlzdG9yeSBjYW5ub3QgUFVTSCB0aGUgc2FtZSBwYXRoOyBhIG5ldyBlbnRyeSB3aWxsIG5vdCBiZSBhZGRlZCB0byB0aGUgaGlzdG9yeSBzdGFjaycpIDogdm9pZCAwO1xuICAgICAgICBzZXRTdGF0ZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVwbGFjZShwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0hhc2ggaGlzdG9yeSBjYW5ub3QgcmVwbGFjZSBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUkVQTEFDRSc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICB2YXIgcGF0aCA9IGNyZWF0ZVBhdGgobG9jYXRpb24pO1xuICAgICAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChiYXNlbmFtZSArIHBhdGgpO1xuICAgICAgdmFyIGhhc2hDaGFuZ2VkID0gZ2V0SGFzaFBhdGgoKSAhPT0gZW5jb2RlZFBhdGg7XG5cbiAgICAgIGlmIChoYXNoQ2hhbmdlZCkge1xuICAgICAgICAvLyBXZSBjYW5ub3QgdGVsbCBpZiBhIGhhc2hjaGFuZ2Ugd2FzIGNhdXNlZCBieSBhIFJFUExBQ0UsIHNvIHdlJ2RcbiAgICAgICAgLy8gcmF0aGVyIHNldFN0YXRlIGhlcmUgYW5kIGlnbm9yZSB0aGUgaGFzaGNoYW5nZS4gVGhlIGNhdmVhdCBoZXJlXG4gICAgICAgIC8vIGlzIHRoYXQgb3RoZXIgaGFzaCBoaXN0b3JpZXMgaW4gdGhlIHBhZ2Ugd2lsbCBjb25zaWRlciBpdCBhIFBPUC5cbiAgICAgICAgaWdub3JlUGF0aCA9IHBhdGg7XG4gICAgICAgIHJlcGxhY2VIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxQYXRocy5pbmRleE9mKGNyZWF0ZVBhdGgoaGlzdG9yeS5sb2NhdGlvbikpO1xuICAgICAgaWYgKHByZXZJbmRleCAhPT0gLTEpIGFsbFBhdGhzW3ByZXZJbmRleF0gPSBwYXRoO1xuICAgICAgc2V0U3RhdGUoe1xuICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvKG4pIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGNhbkdvV2l0aG91dFJlbG9hZCwgJ0hhc2ggaGlzdG9yeSBnbyhuKSBjYXVzZXMgYSBmdWxsIHBhZ2UgcmVsb2FkIGluIHRoaXMgYnJvd3NlcicpIDogdm9pZCAwO1xuICAgIGdsb2JhbEhpc3RvcnkuZ28obik7XG4gIH1cblxuICBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgZ28oLTEpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIGdvKDEpO1xuICB9XG5cbiAgdmFyIGxpc3RlbmVyQ291bnQgPSAwO1xuXG4gIGZ1bmN0aW9uIGNoZWNrRE9NTGlzdGVuZXJzKGRlbHRhKSB7XG4gICAgbGlzdGVuZXJDb3VudCArPSBkZWx0YTtcblxuICAgIGlmIChsaXN0ZW5lckNvdW50ID09PSAxICYmIGRlbHRhID09PSAxKSB7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnQkMSwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfSBlbHNlIGlmIChsaXN0ZW5lckNvdW50ID09PSAwKSB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnQkMSwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGlzQmxvY2tlZCA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIGJsb2NrKHByb21wdCkge1xuICAgIGlmIChwcm9tcHQgPT09IHZvaWQgMCkge1xuICAgICAgcHJvbXB0ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIHVuYmxvY2sgPSB0cmFuc2l0aW9uTWFuYWdlci5zZXRQcm9tcHQocHJvbXB0KTtcblxuICAgIGlmICghaXNCbG9ja2VkKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICAgIGlzQmxvY2tlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChpc0Jsb2NrZWQpIHtcbiAgICAgICAgaXNCbG9ja2VkID0gZmFsc2U7XG4gICAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHVuYmxvY2soKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgdmFyIHVubGlzdGVuID0gdHJhbnNpdGlvbk1hbmFnZXIuYXBwZW5kTGlzdGVuZXIobGlzdGVuZXIpO1xuICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB1bmxpc3RlbigpO1xuICAgIH07XG4gIH1cblxuICB2YXIgaGlzdG9yeSA9IHtcbiAgICBsZW5ndGg6IGdsb2JhbEhpc3RvcnkubGVuZ3RoLFxuICAgIGFjdGlvbjogJ1BPUCcsXG4gICAgbG9jYXRpb246IGluaXRpYWxMb2NhdGlvbixcbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBnbzogZ28sXG4gICAgZ29CYWNrOiBnb0JhY2ssXG4gICAgZ29Gb3J3YXJkOiBnb0ZvcndhcmQsXG4gICAgYmxvY2s6IGJsb2NrLFxuICAgIGxpc3RlbjogbGlzdGVuXG4gIH07XG4gIHJldHVybiBoaXN0b3J5O1xufVxuXG5mdW5jdGlvbiBjbGFtcChuLCBsb3dlckJvdW5kLCB1cHBlckJvdW5kKSB7XG4gIHJldHVybiBNYXRoLm1pbihNYXRoLm1heChuLCBsb3dlckJvdW5kKSwgdXBwZXJCb3VuZCk7XG59XG4vKipcbiAqIENyZWF0ZXMgYSBoaXN0b3J5IG9iamVjdCB0aGF0IHN0b3JlcyBsb2NhdGlvbnMgaW4gbWVtb3J5LlxuICovXG5cblxuZnVuY3Rpb24gY3JlYXRlTWVtb3J5SGlzdG9yeShwcm9wcykge1xuICBpZiAocHJvcHMgPT09IHZvaWQgMCkge1xuICAgIHByb3BzID0ge307XG4gIH1cblxuICB2YXIgX3Byb3BzID0gcHJvcHMsXG4gICAgICBnZXRVc2VyQ29uZmlybWF0aW9uID0gX3Byb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBfcHJvcHMkaW5pdGlhbEVudHJpZXMgPSBfcHJvcHMuaW5pdGlhbEVudHJpZXMsXG4gICAgICBpbml0aWFsRW50cmllcyA9IF9wcm9wcyRpbml0aWFsRW50cmllcyA9PT0gdm9pZCAwID8gWycvJ10gOiBfcHJvcHMkaW5pdGlhbEVudHJpZXMsXG4gICAgICBfcHJvcHMkaW5pdGlhbEluZGV4ID0gX3Byb3BzLmluaXRpYWxJbmRleCxcbiAgICAgIGluaXRpYWxJbmRleCA9IF9wcm9wcyRpbml0aWFsSW5kZXggPT09IHZvaWQgMCA/IDAgOiBfcHJvcHMkaW5pdGlhbEluZGV4LFxuICAgICAgX3Byb3BzJGtleUxlbmd0aCA9IF9wcm9wcy5rZXlMZW5ndGgsXG4gICAgICBrZXlMZW5ndGggPSBfcHJvcHMka2V5TGVuZ3RoID09PSB2b2lkIDAgPyA2IDogX3Byb3BzJGtleUxlbmd0aDtcbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKTtcblxuICBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBoaXN0b3J5LmVudHJpZXMubGVuZ3RoO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLCBoaXN0b3J5LmFjdGlvbik7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVLZXkoKSB7XG4gICAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCBrZXlMZW5ndGgpO1xuICB9XG5cbiAgdmFyIGluZGV4ID0gY2xhbXAoaW5pdGlhbEluZGV4LCAwLCBpbml0aWFsRW50cmllcy5sZW5ndGggLSAxKTtcbiAgdmFyIGVudHJpZXMgPSBpbml0aWFsRW50cmllcy5tYXAoZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBlbnRyeSA9PT0gJ3N0cmluZycgPyBjcmVhdGVMb2NhdGlvbihlbnRyeSwgdW5kZWZpbmVkLCBjcmVhdGVLZXkoKSkgOiBjcmVhdGVMb2NhdGlvbihlbnRyeSwgdW5kZWZpbmVkLCBlbnRyeS5rZXkgfHwgY3JlYXRlS2V5KCkpO1xuICB9KTsgLy8gUHVibGljIGludGVyZmFjZVxuXG4gIHZhciBjcmVhdGVIcmVmID0gY3JlYXRlUGF0aDtcblxuICBmdW5jdGlvbiBwdXNoKHBhdGgsIHN0YXRlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHR5cGVvZiBwYXRoID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byBwdXNoIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUFVTSCc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuICAgICAgdmFyIHByZXZJbmRleCA9IGhpc3RvcnkuaW5kZXg7XG4gICAgICB2YXIgbmV4dEluZGV4ID0gcHJldkluZGV4ICsgMTtcbiAgICAgIHZhciBuZXh0RW50cmllcyA9IGhpc3RvcnkuZW50cmllcy5zbGljZSgwKTtcblxuICAgICAgaWYgKG5leHRFbnRyaWVzLmxlbmd0aCA+IG5leHRJbmRleCkge1xuICAgICAgICBuZXh0RW50cmllcy5zcGxpY2UobmV4dEluZGV4LCBuZXh0RW50cmllcy5sZW5ndGggLSBuZXh0SW5kZXgsIGxvY2F0aW9uKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5leHRFbnRyaWVzLnB1c2gobG9jYXRpb24pO1xuICAgICAgfVxuXG4gICAgICBzZXRTdGF0ZSh7XG4gICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgIGluZGV4OiBuZXh0SW5kZXgsXG4gICAgICAgIGVudHJpZXM6IG5leHRFbnRyaWVzXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlcGxhY2UocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodHlwZW9mIHBhdGggPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHJlcGxhY2Ugd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdSRVBMQUNFJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICBoaXN0b3J5LmVudHJpZXNbaGlzdG9yeS5pbmRleF0gPSBsb2NhdGlvbjtcbiAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBnbyhuKSB7XG4gICAgdmFyIG5leHRJbmRleCA9IGNsYW1wKGhpc3RvcnkuaW5kZXggKyBuLCAwLCBoaXN0b3J5LmVudHJpZXMubGVuZ3RoIC0gMSk7XG4gICAgdmFyIGFjdGlvbiA9ICdQT1AnO1xuICAgIHZhciBsb2NhdGlvbiA9IGhpc3RvcnkuZW50cmllc1tuZXh0SW5kZXhdO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAob2spIHtcbiAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgICBpbmRleDogbmV4dEluZGV4XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gTWltaWMgdGhlIGJlaGF2aW9yIG9mIERPTSBoaXN0b3JpZXMgYnlcbiAgICAgICAgLy8gY2F1c2luZyBhIHJlbmRlciBhZnRlciBhIGNhbmNlbGxlZCBQT1AuXG4gICAgICAgIHNldFN0YXRlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgZ28oLTEpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIGdvKDEpO1xuICB9XG5cbiAgZnVuY3Rpb24gY2FuR28obikge1xuICAgIHZhciBuZXh0SW5kZXggPSBoaXN0b3J5LmluZGV4ICsgbjtcbiAgICByZXR1cm4gbmV4dEluZGV4ID49IDAgJiYgbmV4dEluZGV4IDwgaGlzdG9yeS5lbnRyaWVzLmxlbmd0aDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJsb2NrKHByb21wdCkge1xuICAgIGlmIChwcm9tcHQgPT09IHZvaWQgMCkge1xuICAgICAgcHJvbXB0ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRyYW5zaXRpb25NYW5hZ2VyLnNldFByb21wdChwcm9tcHQpO1xuICB9XG5cbiAgZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgcmV0dXJuIHRyYW5zaXRpb25NYW5hZ2VyLmFwcGVuZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgfVxuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZW50cmllcy5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogZW50cmllc1tpbmRleF0sXG4gICAgaW5kZXg6IGluZGV4LFxuICAgIGVudHJpZXM6IGVudHJpZXMsXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGdvQmFjazogZ29CYWNrLFxuICAgIGdvRm9yd2FyZDogZ29Gb3J3YXJkLFxuICAgIGNhbkdvOiBjYW5HbyxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcbiAgcmV0dXJuIGhpc3Rvcnk7XG59XG5cbmV4cG9ydCB7IGNyZWF0ZUJyb3dzZXJIaXN0b3J5LCBjcmVhdGVIYXNoSGlzdG9yeSwgY3JlYXRlTWVtb3J5SGlzdG9yeSwgY3JlYXRlTG9jYXRpb24sIGxvY2F0aW9uc0FyZUVxdWFsLCBwYXJzZVBhdGgsIGNyZWF0ZVBhdGggfTtcbiIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuaW1wb3J0IHdhcm5pbmcgZnJvbSBcIndhcm5pbmdcIjtcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSBcImludmFyaWFudFwiO1xuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBwdXR0aW5nIGhpc3Rvcnkgb24gY29udGV4dC5cbiAqL1xuXG52YXIgUm91dGVyID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFJvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUm91dGVyKCkge1xuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUm91dGVyKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIG1hdGNoOiBfdGhpcy5jb21wdXRlTWF0Y2goX3RoaXMucHJvcHMuaGlzdG9yeS5sb2NhdGlvbi5wYXRobmFtZSlcbiAgICB9LCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gIFJvdXRlci5wcm90b3R5cGUuZ2V0Q2hpbGRDb250ZXh0ID0gZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KCkge1xuICAgIHJldHVybiB7XG4gICAgICByb3V0ZXI6IF9leHRlbmRzKHt9LCB0aGlzLmNvbnRleHQucm91dGVyLCB7XG4gICAgICAgIGhpc3Rvcnk6IHRoaXMucHJvcHMuaGlzdG9yeSxcbiAgICAgICAgcm91dGU6IHtcbiAgICAgICAgICBsb2NhdGlvbjogdGhpcy5wcm9wcy5oaXN0b3J5LmxvY2F0aW9uLFxuICAgICAgICAgIG1hdGNoOiB0aGlzLnN0YXRlLm1hdGNoXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfTtcbiAgfTtcblxuICBSb3V0ZXIucHJvdG90eXBlLmNvbXB1dGVNYXRjaCA9IGZ1bmN0aW9uIGNvbXB1dGVNYXRjaChwYXRobmFtZSkge1xuICAgIHJldHVybiB7XG4gICAgICBwYXRoOiBcIi9cIixcbiAgICAgIHVybDogXCIvXCIsXG4gICAgICBwYXJhbXM6IHt9LFxuICAgICAgaXNFeGFjdDogcGF0aG5hbWUgPT09IFwiL1wiXG4gICAgfTtcbiAgfTtcblxuICBSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBjaGlsZHJlbiA9IF9wcm9wcy5jaGlsZHJlbixcbiAgICAgICAgaGlzdG9yeSA9IF9wcm9wcy5oaXN0b3J5O1xuXG5cbiAgICBpbnZhcmlhbnQoY2hpbGRyZW4gPT0gbnVsbCB8fCBSZWFjdC5DaGlsZHJlbi5jb3VudChjaGlsZHJlbikgPT09IDEsIFwiQSA8Um91dGVyPiBtYXkgaGF2ZSBvbmx5IG9uZSBjaGlsZCBlbGVtZW50XCIpO1xuXG4gICAgLy8gRG8gdGhpcyBoZXJlIHNvIHdlIGNhbiBzZXRTdGF0ZSB3aGVuIGEgPFJlZGlyZWN0PiBjaGFuZ2VzIHRoZVxuICAgIC8vIGxvY2F0aW9uIGluIGNvbXBvbmVudFdpbGxNb3VudC4gVGhpcyBoYXBwZW5zIGUuZy4gd2hlbiBkb2luZ1xuICAgIC8vIHNlcnZlciByZW5kZXJpbmcgdXNpbmcgYSA8U3RhdGljUm91dGVyPi5cbiAgICB0aGlzLnVubGlzdGVuID0gaGlzdG9yeS5saXN0ZW4oZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMyLnNldFN0YXRlKHtcbiAgICAgICAgbWF0Y2g6IF90aGlzMi5jb21wdXRlTWF0Y2goaGlzdG9yeS5sb2NhdGlvbi5wYXRobmFtZSlcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIFJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgd2FybmluZyh0aGlzLnByb3BzLmhpc3RvcnkgPT09IG5leHRQcm9wcy5oaXN0b3J5LCBcIllvdSBjYW5ub3QgY2hhbmdlIDxSb3V0ZXIgaGlzdG9yeT5cIik7XG4gIH07XG5cbiAgUm91dGVyLnByb3RvdHlwZS5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHRoaXMudW5saXN0ZW4oKTtcbiAgfTtcblxuICBSb3V0ZXIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLnByb3BzLmNoaWxkcmVuO1xuXG4gICAgcmV0dXJuIGNoaWxkcmVuID8gUmVhY3QuQ2hpbGRyZW4ub25seShjaGlsZHJlbikgOiBudWxsO1xuICB9O1xuXG4gIHJldHVybiBSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cblJvdXRlci5wcm9wVHlwZXMgPSB7XG4gIGhpc3Rvcnk6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlXG59O1xuUm91dGVyLmNvbnRleHRUeXBlcyA9IHtcbiAgcm91dGVyOiBQcm9wVHlwZXMub2JqZWN0XG59O1xuUm91dGVyLmNoaWxkQ29udGV4dFR5cGVzID0ge1xuICByb3V0ZXI6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZFxufTtcblxuXG5leHBvcnQgZGVmYXVsdCBSb3V0ZXI7IiwiLy8gV3JpdHRlbiBpbiB0aGlzIHJvdW5kIGFib3V0IHdheSBmb3IgYmFiZWwtdHJhbnNmb3JtLWltcG9ydHNcbmltcG9ydCBSb3V0ZXIgZnJvbSBcInJlYWN0LXJvdXRlci9lcy9Sb3V0ZXJcIjtcblxuZXhwb3J0IGRlZmF1bHQgUm91dGVyOyIsImZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuaW1wb3J0IHdhcm5pbmcgZnJvbSBcIndhcm5pbmdcIjtcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCB7IGNyZWF0ZUJyb3dzZXJIaXN0b3J5IGFzIGNyZWF0ZUhpc3RvcnkgfSBmcm9tIFwiaGlzdG9yeVwiO1xuaW1wb3J0IFJvdXRlciBmcm9tIFwiLi9Sb3V0ZXJcIjtcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgYSA8Um91dGVyPiB0aGF0IHVzZXMgSFRNTDUgaGlzdG9yeS5cbiAqL1xuXG52YXIgQnJvd3NlclJvdXRlciA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhCcm93c2VyUm91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBCcm93c2VyUm91dGVyKCkge1xuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQnJvd3NlclJvdXRlcik7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuaGlzdG9yeSA9IGNyZWF0ZUhpc3RvcnkoX3RoaXMucHJvcHMpLCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gIEJyb3dzZXJSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICB3YXJuaW5nKCF0aGlzLnByb3BzLmhpc3RvcnksIFwiPEJyb3dzZXJSb3V0ZXI+IGlnbm9yZXMgdGhlIGhpc3RvcnkgcHJvcC4gVG8gdXNlIGEgY3VzdG9tIGhpc3RvcnksIFwiICsgXCJ1c2UgYGltcG9ydCB7IFJvdXRlciB9YCBpbnN0ZWFkIG9mIGBpbXBvcnQgeyBCcm93c2VyUm91dGVyIGFzIFJvdXRlciB9YC5cIik7XG4gIH07XG5cbiAgQnJvd3NlclJvdXRlci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwgeyBoaXN0b3J5OiB0aGlzLmhpc3RvcnksIGNoaWxkcmVuOiB0aGlzLnByb3BzLmNoaWxkcmVuIH0pO1xuICB9O1xuXG4gIHJldHVybiBCcm93c2VyUm91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5Ccm93c2VyUm91dGVyLnByb3BUeXBlcyA9IHtcbiAgYmFzZW5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGZvcmNlUmVmcmVzaDogUHJvcFR5cGVzLmJvb2wsXG4gIGdldFVzZXJDb25maXJtYXRpb246IFByb3BUeXBlcy5mdW5jLFxuICBrZXlMZW5ndGg6IFByb3BUeXBlcy5udW1iZXIsXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZVxufTtcblxuXG5leHBvcnQgZGVmYXVsdCBCcm93c2VyUm91dGVyOyIsImZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuaW1wb3J0IHdhcm5pbmcgZnJvbSBcIndhcm5pbmdcIjtcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCB7IGNyZWF0ZUhhc2hIaXN0b3J5IGFzIGNyZWF0ZUhpc3RvcnkgfSBmcm9tIFwiaGlzdG9yeVwiO1xuaW1wb3J0IFJvdXRlciBmcm9tIFwiLi9Sb3V0ZXJcIjtcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgYSA8Um91dGVyPiB0aGF0IHVzZXMgd2luZG93LmxvY2F0aW9uLmhhc2guXG4gKi9cblxudmFyIEhhc2hSb3V0ZXIgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoSGFzaFJvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gSGFzaFJvdXRlcigpIHtcbiAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEhhc2hSb3V0ZXIpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLmhpc3RvcnkgPSBjcmVhdGVIaXN0b3J5KF90aGlzLnByb3BzKSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gIH1cblxuICBIYXNoUm91dGVyLnByb3RvdHlwZS5jb21wb25lbnRXaWxsTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgd2FybmluZyghdGhpcy5wcm9wcy5oaXN0b3J5LCBcIjxIYXNoUm91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCBcIiArIFwidXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgSGFzaFJvdXRlciBhcyBSb3V0ZXIgfWAuXCIpO1xuICB9O1xuXG4gIEhhc2hSb3V0ZXIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHsgaGlzdG9yeTogdGhpcy5oaXN0b3J5LCBjaGlsZHJlbjogdGhpcy5wcm9wcy5jaGlsZHJlbiB9KTtcbiAgfTtcblxuICByZXR1cm4gSGFzaFJvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuSGFzaFJvdXRlci5wcm9wVHlwZXMgPSB7XG4gIGJhc2VuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBnZXRVc2VyQ29uZmlybWF0aW9uOiBQcm9wVHlwZXMuZnVuYyxcbiAgaGFzaFR5cGU6IFByb3BUeXBlcy5vbmVPZihbXCJoYXNoYmFuZ1wiLCBcIm5vc2xhc2hcIiwgXCJzbGFzaFwiXSksXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZVxufTtcblxuXG5leHBvcnQgZGVmYXVsdCBIYXNoUm91dGVyOyIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHsgdmFyIHRhcmdldCA9IHt9OyBmb3IgKHZhciBpIGluIG9iaikgeyBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTsgdGFyZ2V0W2ldID0gb2JqW2ldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gXCJpbnZhcmlhbnRcIjtcbmltcG9ydCB7IGNyZWF0ZUxvY2F0aW9uIH0gZnJvbSBcImhpc3RvcnlcIjtcblxudmFyIGlzTW9kaWZpZWRFdmVudCA9IGZ1bmN0aW9uIGlzTW9kaWZpZWRFdmVudChldmVudCkge1xuICByZXR1cm4gISEoZXZlbnQubWV0YUtleSB8fCBldmVudC5hbHRLZXkgfHwgZXZlbnQuY3RybEtleSB8fCBldmVudC5zaGlmdEtleSk7XG59O1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciByZW5kZXJpbmcgYSBoaXN0b3J5LWF3YXJlIDxhPi5cbiAqL1xuXG52YXIgTGluayA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhMaW5rLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBMaW5rKCkge1xuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTGluayk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuaGFuZGxlQ2xpY2sgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmIChfdGhpcy5wcm9wcy5vbkNsaWNrKSBfdGhpcy5wcm9wcy5vbkNsaWNrKGV2ZW50KTtcblxuICAgICAgaWYgKCFldmVudC5kZWZhdWx0UHJldmVudGVkICYmIC8vIG9uQ2xpY2sgcHJldmVudGVkIGRlZmF1bHRcbiAgICAgIGV2ZW50LmJ1dHRvbiA9PT0gMCAmJiAvLyBpZ25vcmUgZXZlcnl0aGluZyBidXQgbGVmdCBjbGlja3NcbiAgICAgICFfdGhpcy5wcm9wcy50YXJnZXQgJiYgLy8gbGV0IGJyb3dzZXIgaGFuZGxlIFwidGFyZ2V0PV9ibGFua1wiIGV0Yy5cbiAgICAgICFpc01vZGlmaWVkRXZlbnQoZXZlbnQpIC8vIGlnbm9yZSBjbGlja3Mgd2l0aCBtb2RpZmllciBrZXlzXG4gICAgICApIHtcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICAgdmFyIGhpc3RvcnkgPSBfdGhpcy5jb250ZXh0LnJvdXRlci5oaXN0b3J5O1xuICAgICAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgICAgICByZXBsYWNlID0gX3RoaXMkcHJvcHMucmVwbGFjZSxcbiAgICAgICAgICAgICAgdG8gPSBfdGhpcyRwcm9wcy50bztcblxuXG4gICAgICAgICAgaWYgKHJlcGxhY2UpIHtcbiAgICAgICAgICAgIGhpc3RvcnkucmVwbGFjZSh0byk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGhpc3RvcnkucHVzaCh0byk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gIH1cblxuICBMaW5rLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIHJlcGxhY2UgPSBfcHJvcHMucmVwbGFjZSxcbiAgICAgICAgdG8gPSBfcHJvcHMudG8sXG4gICAgICAgIGlubmVyUmVmID0gX3Byb3BzLmlubmVyUmVmLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHMsIFtcInJlcGxhY2VcIiwgXCJ0b1wiLCBcImlubmVyUmVmXCJdKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuXG4gICAgaW52YXJpYW50KHRoaXMuY29udGV4dC5yb3V0ZXIsIFwiWW91IHNob3VsZCBub3QgdXNlIDxMaW5rPiBvdXRzaWRlIGEgPFJvdXRlcj5cIik7XG5cbiAgICBpbnZhcmlhbnQodG8gIT09IHVuZGVmaW5lZCwgJ1lvdSBtdXN0IHNwZWNpZnkgdGhlIFwidG9cIiBwcm9wZXJ0eScpO1xuXG4gICAgdmFyIGhpc3RvcnkgPSB0aGlzLmNvbnRleHQucm91dGVyLmhpc3Rvcnk7XG5cbiAgICB2YXIgbG9jYXRpb24gPSB0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIgPyBjcmVhdGVMb2NhdGlvbih0bywgbnVsbCwgbnVsbCwgaGlzdG9yeS5sb2NhdGlvbikgOiB0bztcblxuICAgIHZhciBocmVmID0gaGlzdG9yeS5jcmVhdGVIcmVmKGxvY2F0aW9uKTtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImFcIiwgX2V4dGVuZHMoe30sIHByb3BzLCB7IG9uQ2xpY2s6IHRoaXMuaGFuZGxlQ2xpY2ssIGhyZWY6IGhyZWYsIHJlZjogaW5uZXJSZWYgfSkpO1xuICB9O1xuXG4gIHJldHVybiBMaW5rO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5MaW5rLnByb3BUeXBlcyA9IHtcbiAgb25DbGljazogUHJvcFR5cGVzLmZ1bmMsXG4gIHRhcmdldDogUHJvcFR5cGVzLnN0cmluZyxcbiAgcmVwbGFjZTogUHJvcFR5cGVzLmJvb2wsXG4gIHRvOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMub2JqZWN0XSkuaXNSZXF1aXJlZCxcbiAgaW5uZXJSZWY6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5mdW5jXSlcbn07XG5MaW5rLmRlZmF1bHRQcm9wcyA9IHtcbiAgcmVwbGFjZTogZmFsc2Vcbn07XG5MaW5rLmNvbnRleHRUeXBlcyA9IHtcbiAgcm91dGVyOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGhpc3Rvcnk6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICBwdXNoOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgICAgcmVwbGFjZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICAgIGNyZWF0ZUhyZWY6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbiAgICB9KS5pc1JlcXVpcmVkXG4gIH0pLmlzUmVxdWlyZWRcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgTGluazsiLCJmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmltcG9ydCB3YXJuaW5nIGZyb20gXCJ3YXJuaW5nXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5pbXBvcnQgeyBjcmVhdGVNZW1vcnlIaXN0b3J5IGFzIGNyZWF0ZUhpc3RvcnkgfSBmcm9tIFwiaGlzdG9yeVwiO1xuaW1wb3J0IFJvdXRlciBmcm9tIFwiLi9Sb3V0ZXJcIjtcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgYSA8Um91dGVyPiB0aGF0IHN0b3JlcyBsb2NhdGlvbiBpbiBtZW1vcnkuXG4gKi9cblxudmFyIE1lbW9yeVJvdXRlciA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhNZW1vcnlSb3V0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIE1lbW9yeVJvdXRlcigpIHtcbiAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE1lbW9yeVJvdXRlcik7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuaGlzdG9yeSA9IGNyZWF0ZUhpc3RvcnkoX3RoaXMucHJvcHMpLCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gIE1lbW9yeVJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIHdhcm5pbmcoIXRoaXMucHJvcHMuaGlzdG9yeSwgXCI8TWVtb3J5Um91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCBcIiArIFwidXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgTWVtb3J5Um91dGVyIGFzIFJvdXRlciB9YC5cIik7XG4gIH07XG5cbiAgTWVtb3J5Um91dGVyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7IGhpc3Rvcnk6IHRoaXMuaGlzdG9yeSwgY2hpbGRyZW46IHRoaXMucHJvcHMuY2hpbGRyZW4gfSk7XG4gIH07XG5cbiAgcmV0dXJuIE1lbW9yeVJvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuTWVtb3J5Um91dGVyLnByb3BUeXBlcyA9IHtcbiAgaW5pdGlhbEVudHJpZXM6IFByb3BUeXBlcy5hcnJheSxcbiAgaW5pdGlhbEluZGV4OiBQcm9wVHlwZXMubnVtYmVyLFxuICBnZXRVc2VyQ29uZmlybWF0aW9uOiBQcm9wVHlwZXMuZnVuYyxcbiAga2V5TGVuZ3RoOiBQcm9wVHlwZXMubnVtYmVyLFxuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGVcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgTWVtb3J5Um91dGVyOyIsIi8vIFdyaXR0ZW4gaW4gdGhpcyByb3VuZCBhYm91dCB3YXkgZm9yIGJhYmVsLXRyYW5zZm9ybS1pbXBvcnRzXG5pbXBvcnQgTWVtb3J5Um91dGVyIGZyb20gXCJyZWFjdC1yb3V0ZXIvZXMvTWVtb3J5Um91dGVyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IE1lbW9yeVJvdXRlcjsiLCJpbXBvcnQgcGF0aFRvUmVnZXhwIGZyb20gXCJwYXRoLXRvLXJlZ2V4cFwiO1xuXG52YXIgcGF0dGVybkNhY2hlID0ge307XG52YXIgY2FjaGVMaW1pdCA9IDEwMDAwO1xudmFyIGNhY2hlQ291bnQgPSAwO1xuXG52YXIgY29tcGlsZVBhdGggPSBmdW5jdGlvbiBjb21waWxlUGF0aChwYXR0ZXJuLCBvcHRpb25zKSB7XG4gIHZhciBjYWNoZUtleSA9IFwiXCIgKyBvcHRpb25zLmVuZCArIG9wdGlvbnMuc3RyaWN0ICsgb3B0aW9ucy5zZW5zaXRpdmU7XG4gIHZhciBjYWNoZSA9IHBhdHRlcm5DYWNoZVtjYWNoZUtleV0gfHwgKHBhdHRlcm5DYWNoZVtjYWNoZUtleV0gPSB7fSk7XG5cbiAgaWYgKGNhY2hlW3BhdHRlcm5dKSByZXR1cm4gY2FjaGVbcGF0dGVybl07XG5cbiAgdmFyIGtleXMgPSBbXTtcbiAgdmFyIHJlID0gcGF0aFRvUmVnZXhwKHBhdHRlcm4sIGtleXMsIG9wdGlvbnMpO1xuICB2YXIgY29tcGlsZWRQYXR0ZXJuID0geyByZTogcmUsIGtleXM6IGtleXMgfTtcblxuICBpZiAoY2FjaGVDb3VudCA8IGNhY2hlTGltaXQpIHtcbiAgICBjYWNoZVtwYXR0ZXJuXSA9IGNvbXBpbGVkUGF0dGVybjtcbiAgICBjYWNoZUNvdW50Kys7XG4gIH1cblxuICByZXR1cm4gY29tcGlsZWRQYXR0ZXJuO1xufTtcblxuLyoqXG4gKiBQdWJsaWMgQVBJIGZvciBtYXRjaGluZyBhIFVSTCBwYXRobmFtZSB0byBhIHBhdGggcGF0dGVybi5cbiAqL1xudmFyIG1hdGNoUGF0aCA9IGZ1bmN0aW9uIG1hdGNoUGF0aChwYXRobmFtZSkge1xuICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gIHZhciBwYXJlbnQgPSBhcmd1bWVudHNbMl07XG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zID09PSBcInN0cmluZ1wiKSBvcHRpb25zID0geyBwYXRoOiBvcHRpb25zIH07XG5cbiAgdmFyIF9vcHRpb25zID0gb3B0aW9ucyxcbiAgICAgIHBhdGggPSBfb3B0aW9ucy5wYXRoLFxuICAgICAgX29wdGlvbnMkZXhhY3QgPSBfb3B0aW9ucy5leGFjdCxcbiAgICAgIGV4YWN0ID0gX29wdGlvbnMkZXhhY3QgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogX29wdGlvbnMkZXhhY3QsXG4gICAgICBfb3B0aW9ucyRzdHJpY3QgPSBfb3B0aW9ucy5zdHJpY3QsXG4gICAgICBzdHJpY3QgPSBfb3B0aW9ucyRzdHJpY3QgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogX29wdGlvbnMkc3RyaWN0LFxuICAgICAgX29wdGlvbnMkc2Vuc2l0aXZlID0gX29wdGlvbnMuc2Vuc2l0aXZlLFxuICAgICAgc2Vuc2l0aXZlID0gX29wdGlvbnMkc2Vuc2l0aXZlID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IF9vcHRpb25zJHNlbnNpdGl2ZTtcblxuXG4gIGlmIChwYXRoID09IG51bGwpIHJldHVybiBwYXJlbnQ7XG5cbiAgdmFyIF9jb21waWxlUGF0aCA9IGNvbXBpbGVQYXRoKHBhdGgsIHsgZW5kOiBleGFjdCwgc3RyaWN0OiBzdHJpY3QsIHNlbnNpdGl2ZTogc2Vuc2l0aXZlIH0pLFxuICAgICAgcmUgPSBfY29tcGlsZVBhdGgucmUsXG4gICAgICBrZXlzID0gX2NvbXBpbGVQYXRoLmtleXM7XG5cbiAgdmFyIG1hdGNoID0gcmUuZXhlYyhwYXRobmFtZSk7XG5cbiAgaWYgKCFtYXRjaCkgcmV0dXJuIG51bGw7XG5cbiAgdmFyIHVybCA9IG1hdGNoWzBdLFxuICAgICAgdmFsdWVzID0gbWF0Y2guc2xpY2UoMSk7XG5cbiAgdmFyIGlzRXhhY3QgPSBwYXRobmFtZSA9PT0gdXJsO1xuXG4gIGlmIChleGFjdCAmJiAhaXNFeGFjdCkgcmV0dXJuIG51bGw7XG5cbiAgcmV0dXJuIHtcbiAgICBwYXRoOiBwYXRoLCAvLyB0aGUgcGF0aCBwYXR0ZXJuIHVzZWQgdG8gbWF0Y2hcbiAgICB1cmw6IHBhdGggPT09IFwiL1wiICYmIHVybCA9PT0gXCJcIiA/IFwiL1wiIDogdXJsLCAvLyB0aGUgbWF0Y2hlZCBwb3J0aW9uIG9mIHRoZSBVUkxcbiAgICBpc0V4YWN0OiBpc0V4YWN0LCAvLyB3aGV0aGVyIG9yIG5vdCB3ZSBtYXRjaGVkIGV4YWN0bHlcbiAgICBwYXJhbXM6IGtleXMucmVkdWNlKGZ1bmN0aW9uIChtZW1vLCBrZXksIGluZGV4KSB7XG4gICAgICBtZW1vW2tleS5uYW1lXSA9IHZhbHVlc1tpbmRleF07XG4gICAgICByZXR1cm4gbWVtbztcbiAgICB9LCB7fSlcbiAgfTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IG1hdGNoUGF0aDsiLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmltcG9ydCB3YXJuaW5nIGZyb20gXCJ3YXJuaW5nXCI7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gXCJpbnZhcmlhbnRcIjtcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCBtYXRjaFBhdGggZnJvbSBcIi4vbWF0Y2hQYXRoXCI7XG5cbnZhciBpc0VtcHR5Q2hpbGRyZW4gPSBmdW5jdGlvbiBpc0VtcHR5Q2hpbGRyZW4oY2hpbGRyZW4pIHtcbiAgcmV0dXJuIFJlYWN0LkNoaWxkcmVuLmNvdW50KGNoaWxkcmVuKSA9PT0gMDtcbn07XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIG1hdGNoaW5nIGEgc2luZ2xlIHBhdGggYW5kIHJlbmRlcmluZy5cbiAqL1xuXG52YXIgUm91dGUgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoUm91dGUsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFJvdXRlKCkge1xuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUm91dGUpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLnN0YXRlID0ge1xuICAgICAgbWF0Y2g6IF90aGlzLmNvbXB1dGVNYXRjaChfdGhpcy5wcm9wcywgX3RoaXMuY29udGV4dC5yb3V0ZXIpXG4gICAgfSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gIH1cblxuICBSb3V0ZS5wcm90b3R5cGUuZ2V0Q2hpbGRDb250ZXh0ID0gZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KCkge1xuICAgIHJldHVybiB7XG4gICAgICByb3V0ZXI6IF9leHRlbmRzKHt9LCB0aGlzLmNvbnRleHQucm91dGVyLCB7XG4gICAgICAgIHJvdXRlOiB7XG4gICAgICAgICAgbG9jYXRpb246IHRoaXMucHJvcHMubG9jYXRpb24gfHwgdGhpcy5jb250ZXh0LnJvdXRlci5yb3V0ZS5sb2NhdGlvbixcbiAgICAgICAgICBtYXRjaDogdGhpcy5zdGF0ZS5tYXRjaFxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH07XG4gIH07XG5cbiAgUm91dGUucHJvdG90eXBlLmNvbXB1dGVNYXRjaCA9IGZ1bmN0aW9uIGNvbXB1dGVNYXRjaChfcmVmLCByb3V0ZXIpIHtcbiAgICB2YXIgY29tcHV0ZWRNYXRjaCA9IF9yZWYuY29tcHV0ZWRNYXRjaCxcbiAgICAgICAgbG9jYXRpb24gPSBfcmVmLmxvY2F0aW9uLFxuICAgICAgICBwYXRoID0gX3JlZi5wYXRoLFxuICAgICAgICBzdHJpY3QgPSBfcmVmLnN0cmljdCxcbiAgICAgICAgZXhhY3QgPSBfcmVmLmV4YWN0LFxuICAgICAgICBzZW5zaXRpdmUgPSBfcmVmLnNlbnNpdGl2ZTtcblxuICAgIGlmIChjb21wdXRlZE1hdGNoKSByZXR1cm4gY29tcHV0ZWRNYXRjaDsgLy8gPFN3aXRjaD4gYWxyZWFkeSBjb21wdXRlZCB0aGUgbWF0Y2ggZm9yIHVzXG5cbiAgICBpbnZhcmlhbnQocm91dGVyLCBcIllvdSBzaG91bGQgbm90IHVzZSA8Um91dGU+IG9yIHdpdGhSb3V0ZXIoKSBvdXRzaWRlIGEgPFJvdXRlcj5cIik7XG5cbiAgICB2YXIgcm91dGUgPSByb3V0ZXIucm91dGU7XG5cbiAgICB2YXIgcGF0aG5hbWUgPSAobG9jYXRpb24gfHwgcm91dGUubG9jYXRpb24pLnBhdGhuYW1lO1xuXG4gICAgcmV0dXJuIG1hdGNoUGF0aChwYXRobmFtZSwgeyBwYXRoOiBwYXRoLCBzdHJpY3Q6IHN0cmljdCwgZXhhY3Q6IGV4YWN0LCBzZW5zaXRpdmU6IHNlbnNpdGl2ZSB9LCByb3V0ZS5tYXRjaCk7XG4gIH07XG5cbiAgUm91dGUucHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICB3YXJuaW5nKCEodGhpcy5wcm9wcy5jb21wb25lbnQgJiYgdGhpcy5wcm9wcy5yZW5kZXIpLCBcIllvdSBzaG91bGQgbm90IHVzZSA8Um91dGUgY29tcG9uZW50PiBhbmQgPFJvdXRlIHJlbmRlcj4gaW4gdGhlIHNhbWUgcm91dGU7IDxSb3V0ZSByZW5kZXI+IHdpbGwgYmUgaWdub3JlZFwiKTtcblxuICAgIHdhcm5pbmcoISh0aGlzLnByb3BzLmNvbXBvbmVudCAmJiB0aGlzLnByb3BzLmNoaWxkcmVuICYmICFpc0VtcHR5Q2hpbGRyZW4odGhpcy5wcm9wcy5jaGlsZHJlbikpLCBcIllvdSBzaG91bGQgbm90IHVzZSA8Um91dGUgY29tcG9uZW50PiBhbmQgPFJvdXRlIGNoaWxkcmVuPiBpbiB0aGUgc2FtZSByb3V0ZTsgPFJvdXRlIGNoaWxkcmVuPiB3aWxsIGJlIGlnbm9yZWRcIik7XG5cbiAgICB3YXJuaW5nKCEodGhpcy5wcm9wcy5yZW5kZXIgJiYgdGhpcy5wcm9wcy5jaGlsZHJlbiAmJiAhaXNFbXB0eUNoaWxkcmVuKHRoaXMucHJvcHMuY2hpbGRyZW4pKSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlIHJlbmRlcj4gYW5kIDxSb3V0ZSBjaGlsZHJlbj4gaW4gdGhlIHNhbWUgcm91dGU7IDxSb3V0ZSBjaGlsZHJlbj4gd2lsbCBiZSBpZ25vcmVkXCIpO1xuICB9O1xuXG4gIFJvdXRlLnByb3RvdHlwZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMsIG5leHRDb250ZXh0KSB7XG4gICAgd2FybmluZyghKG5leHRQcm9wcy5sb2NhdGlvbiAmJiAhdGhpcy5wcm9wcy5sb2NhdGlvbiksICc8Um91dGU+IGVsZW1lbnRzIHNob3VsZCBub3QgY2hhbmdlIGZyb20gdW5jb250cm9sbGVkIHRvIGNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLiBZb3UgaW5pdGlhbGx5IHVzZWQgbm8gXCJsb2NhdGlvblwiIHByb3AgYW5kIHRoZW4gcHJvdmlkZWQgb25lIG9uIGEgc3Vic2VxdWVudCByZW5kZXIuJyk7XG5cbiAgICB3YXJuaW5nKCEoIW5leHRQcm9wcy5sb2NhdGlvbiAmJiB0aGlzLnByb3BzLmxvY2F0aW9uKSwgJzxSb3V0ZT4gZWxlbWVudHMgc2hvdWxkIG5vdCBjaGFuZ2UgZnJvbSBjb250cm9sbGVkIHRvIHVuY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuIFlvdSBwcm92aWRlZCBhIFwibG9jYXRpb25cIiBwcm9wIGluaXRpYWxseSBidXQgb21pdHRlZCBpdCBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLicpO1xuXG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBtYXRjaDogdGhpcy5jb21wdXRlTWF0Y2gobmV4dFByb3BzLCBuZXh0Q29udGV4dC5yb3V0ZXIpXG4gICAgfSk7XG4gIH07XG5cbiAgUm91dGUucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgbWF0Y2ggPSB0aGlzLnN0YXRlLm1hdGNoO1xuICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBjaGlsZHJlbiA9IF9wcm9wcy5jaGlsZHJlbixcbiAgICAgICAgY29tcG9uZW50ID0gX3Byb3BzLmNvbXBvbmVudCxcbiAgICAgICAgcmVuZGVyID0gX3Byb3BzLnJlbmRlcjtcbiAgICB2YXIgX2NvbnRleHQkcm91dGVyID0gdGhpcy5jb250ZXh0LnJvdXRlcixcbiAgICAgICAgaGlzdG9yeSA9IF9jb250ZXh0JHJvdXRlci5oaXN0b3J5LFxuICAgICAgICByb3V0ZSA9IF9jb250ZXh0JHJvdXRlci5yb3V0ZSxcbiAgICAgICAgc3RhdGljQ29udGV4dCA9IF9jb250ZXh0JHJvdXRlci5zdGF0aWNDb250ZXh0O1xuXG4gICAgdmFyIGxvY2F0aW9uID0gdGhpcy5wcm9wcy5sb2NhdGlvbiB8fCByb3V0ZS5sb2NhdGlvbjtcbiAgICB2YXIgcHJvcHMgPSB7IG1hdGNoOiBtYXRjaCwgbG9jYXRpb246IGxvY2F0aW9uLCBoaXN0b3J5OiBoaXN0b3J5LCBzdGF0aWNDb250ZXh0OiBzdGF0aWNDb250ZXh0IH07XG5cbiAgICBpZiAoY29tcG9uZW50KSByZXR1cm4gbWF0Y2ggPyBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbXBvbmVudCwgcHJvcHMpIDogbnVsbDtcblxuICAgIGlmIChyZW5kZXIpIHJldHVybiBtYXRjaCA/IHJlbmRlcihwcm9wcykgOiBudWxsO1xuXG4gICAgaWYgKHR5cGVvZiBjaGlsZHJlbiA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gY2hpbGRyZW4ocHJvcHMpO1xuXG4gICAgaWYgKGNoaWxkcmVuICYmICFpc0VtcHR5Q2hpbGRyZW4oY2hpbGRyZW4pKSByZXR1cm4gUmVhY3QuQ2hpbGRyZW4ub25seShjaGlsZHJlbik7XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICByZXR1cm4gUm91dGU7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cblJvdXRlLnByb3BUeXBlcyA9IHtcbiAgY29tcHV0ZWRNYXRjaDogUHJvcFR5cGVzLm9iamVjdCwgLy8gcHJpdmF0ZSwgZnJvbSA8U3dpdGNoPlxuICBwYXRoOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBleGFjdDogUHJvcFR5cGVzLmJvb2wsXG4gIHN0cmljdDogUHJvcFR5cGVzLmJvb2wsXG4gIHNlbnNpdGl2ZTogUHJvcFR5cGVzLmJvb2wsXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmZ1bmMsXG4gIHJlbmRlcjogUHJvcFR5cGVzLmZ1bmMsXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm5vZGVdKSxcbiAgbG9jYXRpb246IFByb3BUeXBlcy5vYmplY3Rcbn07XG5Sb3V0ZS5jb250ZXh0VHlwZXMgPSB7XG4gIHJvdXRlcjogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBoaXN0b3J5OiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gICAgcm91dGU6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgICBzdGF0aWNDb250ZXh0OiBQcm9wVHlwZXMub2JqZWN0XG4gIH0pXG59O1xuUm91dGUuY2hpbGRDb250ZXh0VHlwZXMgPSB7XG4gIHJvdXRlcjogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkXG59O1xuXG5cbmV4cG9ydCBkZWZhdWx0IFJvdXRlOyIsIi8vIFdyaXR0ZW4gaW4gdGhpcyByb3VuZCBhYm91dCB3YXkgZm9yIGJhYmVsLXRyYW5zZm9ybS1pbXBvcnRzXG5pbXBvcnQgUm91dGUgZnJvbSBcInJlYWN0LXJvdXRlci9lcy9Sb3V0ZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBSb3V0ZTsiLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHsgdmFyIHRhcmdldCA9IHt9OyBmb3IgKHZhciBpIGluIG9iaikgeyBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTsgdGFyZ2V0W2ldID0gb2JqW2ldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0IFJvdXRlIGZyb20gXCIuL1JvdXRlXCI7XG5pbXBvcnQgTGluayBmcm9tIFwiLi9MaW5rXCI7XG5cbi8qKlxuICogQSA8TGluaz4gd3JhcHBlciB0aGF0IGtub3dzIGlmIGl0J3MgXCJhY3RpdmVcIiBvciBub3QuXG4gKi9cbnZhciBOYXZMaW5rID0gZnVuY3Rpb24gTmF2TGluayhfcmVmKSB7XG4gIHZhciB0byA9IF9yZWYudG8sXG4gICAgICBleGFjdCA9IF9yZWYuZXhhY3QsXG4gICAgICBzdHJpY3QgPSBfcmVmLnN0cmljdCxcbiAgICAgIGxvY2F0aW9uID0gX3JlZi5sb2NhdGlvbixcbiAgICAgIGFjdGl2ZUNsYXNzTmFtZSA9IF9yZWYuYWN0aXZlQ2xhc3NOYW1lLFxuICAgICAgY2xhc3NOYW1lID0gX3JlZi5jbGFzc05hbWUsXG4gICAgICBhY3RpdmVTdHlsZSA9IF9yZWYuYWN0aXZlU3R5bGUsXG4gICAgICBzdHlsZSA9IF9yZWYuc3R5bGUsXG4gICAgICBnZXRJc0FjdGl2ZSA9IF9yZWYuaXNBY3RpdmUsXG4gICAgICBhcmlhQ3VycmVudCA9IF9yZWZbXCJhcmlhLWN1cnJlbnRcIl0sXG4gICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWYsIFtcInRvXCIsIFwiZXhhY3RcIiwgXCJzdHJpY3RcIiwgXCJsb2NhdGlvblwiLCBcImFjdGl2ZUNsYXNzTmFtZVwiLCBcImNsYXNzTmFtZVwiLCBcImFjdGl2ZVN0eWxlXCIsIFwic3R5bGVcIiwgXCJpc0FjdGl2ZVwiLCBcImFyaWEtY3VycmVudFwiXSk7XG5cbiAgdmFyIHBhdGggPSAodHlwZW9mIHRvID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2YodG8pKSA9PT0gXCJvYmplY3RcIiA/IHRvLnBhdGhuYW1lIDogdG87XG5cbiAgLy8gUmVnZXggdGFrZW4gZnJvbTogaHR0cHM6Ly9naXRodWIuY29tL3BpbGxhcmpzL3BhdGgtdG8tcmVnZXhwL2Jsb2IvbWFzdGVyL2luZGV4LmpzI0wyMDJcbiAgdmFyIGVzY2FwZWRQYXRoID0gcGF0aCAmJiBwYXRoLnJlcGxhY2UoLyhbLisqPz1eIToke30oKVtcXF18L1xcXFxdKS9nLCBcIlxcXFwkMVwiKTtcblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZSwge1xuICAgIHBhdGg6IGVzY2FwZWRQYXRoLFxuICAgIGV4YWN0OiBleGFjdCxcbiAgICBzdHJpY3Q6IHN0cmljdCxcbiAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgY2hpbGRyZW46IGZ1bmN0aW9uIGNoaWxkcmVuKF9yZWYyKSB7XG4gICAgICB2YXIgbG9jYXRpb24gPSBfcmVmMi5sb2NhdGlvbixcbiAgICAgICAgICBtYXRjaCA9IF9yZWYyLm1hdGNoO1xuXG4gICAgICB2YXIgaXNBY3RpdmUgPSAhIShnZXRJc0FjdGl2ZSA/IGdldElzQWN0aXZlKG1hdGNoLCBsb2NhdGlvbikgOiBtYXRjaCk7XG5cbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KExpbmssIF9leHRlbmRzKHtcbiAgICAgICAgdG86IHRvLFxuICAgICAgICBjbGFzc05hbWU6IGlzQWN0aXZlID8gW2NsYXNzTmFtZSwgYWN0aXZlQ2xhc3NOYW1lXS5maWx0ZXIoZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgfSkuam9pbihcIiBcIikgOiBjbGFzc05hbWUsXG4gICAgICAgIHN0eWxlOiBpc0FjdGl2ZSA/IF9leHRlbmRzKHt9LCBzdHlsZSwgYWN0aXZlU3R5bGUpIDogc3R5bGUsXG4gICAgICAgIFwiYXJpYS1jdXJyZW50XCI6IGlzQWN0aXZlICYmIGFyaWFDdXJyZW50IHx8IG51bGxcbiAgICAgIH0sIHJlc3QpKTtcbiAgICB9XG4gIH0pO1xufTtcblxuTmF2TGluay5wcm9wVHlwZXMgPSB7XG4gIHRvOiBMaW5rLnByb3BUeXBlcy50byxcbiAgZXhhY3Q6IFByb3BUeXBlcy5ib29sLFxuICBzdHJpY3Q6IFByb3BUeXBlcy5ib29sLFxuICBsb2NhdGlvbjogUHJvcFR5cGVzLm9iamVjdCxcbiAgYWN0aXZlQ2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGFjdGl2ZVN0eWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuICBzdHlsZTogUHJvcFR5cGVzLm9iamVjdCxcbiAgaXNBY3RpdmU6IFByb3BUeXBlcy5mdW5jLFxuICBcImFyaWEtY3VycmVudFwiOiBQcm9wVHlwZXMub25lT2YoW1wicGFnZVwiLCBcInN0ZXBcIiwgXCJsb2NhdGlvblwiLCBcImRhdGVcIiwgXCJ0aW1lXCIsIFwidHJ1ZVwiXSlcbn07XG5cbk5hdkxpbmsuZGVmYXVsdFByb3BzID0ge1xuICBhY3RpdmVDbGFzc05hbWU6IFwiYWN0aXZlXCIsXG4gIFwiYXJpYS1jdXJyZW50XCI6IFwicGFnZVwiXG59O1xuXG5leHBvcnQgZGVmYXVsdCBOYXZMaW5rOyIsImZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0IGludmFyaWFudCBmcm9tIFwiaW52YXJpYW50XCI7XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHByb21wdGluZyB0aGUgdXNlciBiZWZvcmUgbmF2aWdhdGluZyBhd2F5XG4gKiBmcm9tIGEgc2NyZWVuIHdpdGggYSBjb21wb25lbnQuXG4gKi9cblxudmFyIFByb21wdCA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhQcm9tcHQsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFByb21wdCgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUHJvbXB0KTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgUHJvbXB0LnByb3RvdHlwZS5lbmFibGUgPSBmdW5jdGlvbiBlbmFibGUobWVzc2FnZSkge1xuICAgIGlmICh0aGlzLnVuYmxvY2spIHRoaXMudW5ibG9jaygpO1xuXG4gICAgdGhpcy51bmJsb2NrID0gdGhpcy5jb250ZXh0LnJvdXRlci5oaXN0b3J5LmJsb2NrKG1lc3NhZ2UpO1xuICB9O1xuXG4gIFByb21wdC5wcm90b3R5cGUuZGlzYWJsZSA9IGZ1bmN0aW9uIGRpc2FibGUoKSB7XG4gICAgaWYgKHRoaXMudW5ibG9jaykge1xuICAgICAgdGhpcy51bmJsb2NrKCk7XG4gICAgICB0aGlzLnVuYmxvY2sgPSBudWxsO1xuICAgIH1cbiAgfTtcblxuICBQcm9tcHQucHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICBpbnZhcmlhbnQodGhpcy5jb250ZXh0LnJvdXRlciwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFByb21wdD4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpO1xuXG4gICAgaWYgKHRoaXMucHJvcHMud2hlbikgdGhpcy5lbmFibGUodGhpcy5wcm9wcy5tZXNzYWdlKTtcbiAgfTtcblxuICBQcm9tcHQucHJvdG90eXBlLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgIGlmIChuZXh0UHJvcHMud2hlbikge1xuICAgICAgaWYgKCF0aGlzLnByb3BzLndoZW4gfHwgdGhpcy5wcm9wcy5tZXNzYWdlICE9PSBuZXh0UHJvcHMubWVzc2FnZSkgdGhpcy5lbmFibGUobmV4dFByb3BzLm1lc3NhZ2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmRpc2FibGUoKTtcbiAgICB9XG4gIH07XG5cbiAgUHJvbXB0LnByb3RvdHlwZS5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHRoaXMuZGlzYWJsZSgpO1xuICB9O1xuXG4gIFByb21wdC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBudWxsO1xuICB9O1xuXG4gIHJldHVybiBQcm9tcHQ7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cblByb21wdC5wcm9wVHlwZXMgPSB7XG4gIHdoZW46IFByb3BUeXBlcy5ib29sLFxuICBtZXNzYWdlOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLnN0cmluZ10pLmlzUmVxdWlyZWRcbn07XG5Qcm9tcHQuZGVmYXVsdFByb3BzID0ge1xuICB3aGVuOiB0cnVlXG59O1xuUHJvbXB0LmNvbnRleHRUeXBlcyA9IHtcbiAgcm91dGVyOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGhpc3Rvcnk6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICBibG9jazogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxuICAgIH0pLmlzUmVxdWlyZWRcbiAgfSkuaXNSZXF1aXJlZFxufTtcblxuXG5leHBvcnQgZGVmYXVsdCBQcm9tcHQ7IiwiLy8gV3JpdHRlbiBpbiB0aGlzIHJvdW5kIGFib3V0IHdheSBmb3IgYmFiZWwtdHJhbnNmb3JtLWltcG9ydHNcbmltcG9ydCBQcm9tcHQgZnJvbSBcInJlYWN0LXJvdXRlci9lcy9Qcm9tcHRcIjtcblxuZXhwb3J0IGRlZmF1bHQgUHJvbXB0OyIsImltcG9ydCBwYXRoVG9SZWdleHAgZnJvbSBcInBhdGgtdG8tcmVnZXhwXCI7XG5cbnZhciBwYXR0ZXJuQ2FjaGUgPSB7fTtcbnZhciBjYWNoZUxpbWl0ID0gMTAwMDA7XG52YXIgY2FjaGVDb3VudCA9IDA7XG5cbnZhciBjb21waWxlR2VuZXJhdG9yID0gZnVuY3Rpb24gY29tcGlsZUdlbmVyYXRvcihwYXR0ZXJuKSB7XG4gIHZhciBjYWNoZUtleSA9IHBhdHRlcm47XG4gIHZhciBjYWNoZSA9IHBhdHRlcm5DYWNoZVtjYWNoZUtleV0gfHwgKHBhdHRlcm5DYWNoZVtjYWNoZUtleV0gPSB7fSk7XG5cbiAgaWYgKGNhY2hlW3BhdHRlcm5dKSByZXR1cm4gY2FjaGVbcGF0dGVybl07XG5cbiAgdmFyIGNvbXBpbGVkR2VuZXJhdG9yID0gcGF0aFRvUmVnZXhwLmNvbXBpbGUocGF0dGVybik7XG5cbiAgaWYgKGNhY2hlQ291bnQgPCBjYWNoZUxpbWl0KSB7XG4gICAgY2FjaGVbcGF0dGVybl0gPSBjb21waWxlZEdlbmVyYXRvcjtcbiAgICBjYWNoZUNvdW50Kys7XG4gIH1cblxuICByZXR1cm4gY29tcGlsZWRHZW5lcmF0b3I7XG59O1xuXG4vKipcbiAqIFB1YmxpYyBBUEkgZm9yIGdlbmVyYXRpbmcgYSBVUkwgcGF0aG5hbWUgZnJvbSBhIHBhdHRlcm4gYW5kIHBhcmFtZXRlcnMuXG4gKi9cbnZhciBnZW5lcmF0ZVBhdGggPSBmdW5jdGlvbiBnZW5lcmF0ZVBhdGgoKSB7XG4gIHZhciBwYXR0ZXJuID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBcIi9cIjtcbiAgdmFyIHBhcmFtcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG5cbiAgaWYgKHBhdHRlcm4gPT09IFwiL1wiKSB7XG4gICAgcmV0dXJuIHBhdHRlcm47XG4gIH1cbiAgdmFyIGdlbmVyYXRvciA9IGNvbXBpbGVHZW5lcmF0b3IocGF0dGVybik7XG4gIHJldHVybiBnZW5lcmF0b3IocGFyYW1zLCB7IHByZXR0eTogdHJ1ZSB9KTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGdlbmVyYXRlUGF0aDsiLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCB3YXJuaW5nIGZyb20gXCJ3YXJuaW5nXCI7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gXCJpbnZhcmlhbnRcIjtcbmltcG9ydCB7IGNyZWF0ZUxvY2F0aW9uLCBsb2NhdGlvbnNBcmVFcXVhbCB9IGZyb20gXCJoaXN0b3J5XCI7XG5pbXBvcnQgZ2VuZXJhdGVQYXRoIGZyb20gXCIuL2dlbmVyYXRlUGF0aFwiO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciB1cGRhdGluZyB0aGUgbG9jYXRpb24gcHJvZ3JhbW1hdGljYWxseVxuICogd2l0aCBhIGNvbXBvbmVudC5cbiAqL1xuXG52YXIgUmVkaXJlY3QgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoUmVkaXJlY3QsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFJlZGlyZWN0KCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBSZWRpcmVjdCk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIFJlZGlyZWN0LnByb3RvdHlwZS5pc1N0YXRpYyA9IGZ1bmN0aW9uIGlzU3RhdGljKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnRleHQucm91dGVyICYmIHRoaXMuY29udGV4dC5yb3V0ZXIuc3RhdGljQ29udGV4dDtcbiAgfTtcblxuICBSZWRpcmVjdC5wcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIGludmFyaWFudCh0aGlzLmNvbnRleHQucm91dGVyLCBcIllvdSBzaG91bGQgbm90IHVzZSA8UmVkaXJlY3Q+IG91dHNpZGUgYSA8Um91dGVyPlwiKTtcblxuICAgIGlmICh0aGlzLmlzU3RhdGljKCkpIHRoaXMucGVyZm9ybSgpO1xuICB9O1xuXG4gIFJlZGlyZWN0LnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIGlmICghdGhpcy5pc1N0YXRpYygpKSB0aGlzLnBlcmZvcm0oKTtcbiAgfTtcblxuICBSZWRpcmVjdC5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgIHZhciBwcmV2VG8gPSBjcmVhdGVMb2NhdGlvbihwcmV2UHJvcHMudG8pO1xuICAgIHZhciBuZXh0VG8gPSBjcmVhdGVMb2NhdGlvbih0aGlzLnByb3BzLnRvKTtcblxuICAgIGlmIChsb2NhdGlvbnNBcmVFcXVhbChwcmV2VG8sIG5leHRUbykpIHtcbiAgICAgIHdhcm5pbmcoZmFsc2UsIFwiWW91IHRyaWVkIHRvIHJlZGlyZWN0IHRvIHRoZSBzYW1lIHJvdXRlIHlvdSdyZSBjdXJyZW50bHkgb246IFwiICsgKFwiXFxcIlwiICsgbmV4dFRvLnBhdGhuYW1lICsgbmV4dFRvLnNlYXJjaCArIFwiXFxcIlwiKSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5wZXJmb3JtKCk7XG4gIH07XG5cbiAgUmVkaXJlY3QucHJvdG90eXBlLmNvbXB1dGVUbyA9IGZ1bmN0aW9uIGNvbXB1dGVUbyhfcmVmKSB7XG4gICAgdmFyIGNvbXB1dGVkTWF0Y2ggPSBfcmVmLmNvbXB1dGVkTWF0Y2gsXG4gICAgICAgIHRvID0gX3JlZi50bztcblxuICAgIGlmIChjb21wdXRlZE1hdGNoKSB7XG4gICAgICBpZiAodHlwZW9mIHRvID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHJldHVybiBnZW5lcmF0ZVBhdGgodG8sIGNvbXB1dGVkTWF0Y2gucGFyYW1zKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgdG8sIHtcbiAgICAgICAgICBwYXRobmFtZTogZ2VuZXJhdGVQYXRoKHRvLnBhdGhuYW1lLCBjb21wdXRlZE1hdGNoLnBhcmFtcylcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRvO1xuICB9O1xuXG4gIFJlZGlyZWN0LnByb3RvdHlwZS5wZXJmb3JtID0gZnVuY3Rpb24gcGVyZm9ybSgpIHtcbiAgICB2YXIgaGlzdG9yeSA9IHRoaXMuY29udGV4dC5yb3V0ZXIuaGlzdG9yeTtcbiAgICB2YXIgcHVzaCA9IHRoaXMucHJvcHMucHVzaDtcblxuICAgIHZhciB0byA9IHRoaXMuY29tcHV0ZVRvKHRoaXMucHJvcHMpO1xuXG4gICAgaWYgKHB1c2gpIHtcbiAgICAgIGhpc3RvcnkucHVzaCh0byk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGhpc3RvcnkucmVwbGFjZSh0byk7XG4gICAgfVxuICB9O1xuXG4gIFJlZGlyZWN0LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgcmV0dXJuIFJlZGlyZWN0O1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5SZWRpcmVjdC5wcm9wVHlwZXMgPSB7XG4gIGNvbXB1dGVkTWF0Y2g6IFByb3BUeXBlcy5vYmplY3QsIC8vIHByaXZhdGUsIGZyb20gPFN3aXRjaD5cbiAgcHVzaDogUHJvcFR5cGVzLmJvb2wsXG4gIGZyb206IFByb3BUeXBlcy5zdHJpbmcsXG4gIHRvOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMub2JqZWN0XSkuaXNSZXF1aXJlZFxufTtcblJlZGlyZWN0LmRlZmF1bHRQcm9wcyA9IHtcbiAgcHVzaDogZmFsc2Vcbn07XG5SZWRpcmVjdC5jb250ZXh0VHlwZXMgPSB7XG4gIHJvdXRlcjogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBoaXN0b3J5OiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgcHVzaDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICAgIHJlcGxhY2U6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbiAgICB9KS5pc1JlcXVpcmVkLFxuICAgIHN0YXRpY0NvbnRleHQ6IFByb3BUeXBlcy5vYmplY3RcbiAgfSkuaXNSZXF1aXJlZFxufTtcblxuXG5leHBvcnQgZGVmYXVsdCBSZWRpcmVjdDsiLCIvLyBXcml0dGVuIGluIHRoaXMgcm91bmQgYWJvdXQgd2F5IGZvciBiYWJlbC10cmFuc2Zvcm0taW1wb3J0c1xuaW1wb3J0IFJlZGlyZWN0IGZyb20gXCJyZWFjdC1yb3V0ZXIvZXMvUmVkaXJlY3RcIjtcblxuZXhwb3J0IGRlZmF1bHQgUmVkaXJlY3Q7IiwidmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmltcG9ydCB3YXJuaW5nIGZyb20gXCJ3YXJuaW5nXCI7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gXCJpbnZhcmlhbnRcIjtcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCB7IGNyZWF0ZUxvY2F0aW9uLCBjcmVhdGVQYXRoIH0gZnJvbSBcImhpc3RvcnlcIjtcbmltcG9ydCBSb3V0ZXIgZnJvbSBcIi4vUm91dGVyXCI7XG5cbnZhciBhZGRMZWFkaW5nU2xhc2ggPSBmdW5jdGlvbiBhZGRMZWFkaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09IFwiL1wiID8gcGF0aCA6IFwiL1wiICsgcGF0aDtcbn07XG5cbnZhciBhZGRCYXNlbmFtZSA9IGZ1bmN0aW9uIGFkZEJhc2VuYW1lKGJhc2VuYW1lLCBsb2NhdGlvbikge1xuICBpZiAoIWJhc2VuYW1lKSByZXR1cm4gbG9jYXRpb247XG5cbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBsb2NhdGlvbiwge1xuICAgIHBhdGhuYW1lOiBhZGRMZWFkaW5nU2xhc2goYmFzZW5hbWUpICsgbG9jYXRpb24ucGF0aG5hbWVcbiAgfSk7XG59O1xuXG52YXIgc3RyaXBCYXNlbmFtZSA9IGZ1bmN0aW9uIHN0cmlwQmFzZW5hbWUoYmFzZW5hbWUsIGxvY2F0aW9uKSB7XG4gIGlmICghYmFzZW5hbWUpIHJldHVybiBsb2NhdGlvbjtcblxuICB2YXIgYmFzZSA9IGFkZExlYWRpbmdTbGFzaChiYXNlbmFtZSk7XG5cbiAgaWYgKGxvY2F0aW9uLnBhdGhuYW1lLmluZGV4T2YoYmFzZSkgIT09IDApIHJldHVybiBsb2NhdGlvbjtcblxuICByZXR1cm4gX2V4dGVuZHMoe30sIGxvY2F0aW9uLCB7XG4gICAgcGF0aG5hbWU6IGxvY2F0aW9uLnBhdGhuYW1lLnN1YnN0cihiYXNlLmxlbmd0aClcbiAgfSk7XG59O1xuXG52YXIgY3JlYXRlVVJMID0gZnVuY3Rpb24gY3JlYXRlVVJMKGxvY2F0aW9uKSB7XG4gIHJldHVybiB0eXBlb2YgbG9jYXRpb24gPT09IFwic3RyaW5nXCIgPyBsb2NhdGlvbiA6IGNyZWF0ZVBhdGgobG9jYXRpb24pO1xufTtcblxudmFyIHN0YXRpY0hhbmRsZXIgPSBmdW5jdGlvbiBzdGF0aWNIYW5kbGVyKG1ldGhvZE5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IGNhbm5vdCAlcyB3aXRoIDxTdGF0aWNSb3V0ZXI+XCIsIG1ldGhvZE5hbWUpO1xuICB9O1xufTtcblxudmFyIG5vb3AgPSBmdW5jdGlvbiBub29wKCkge307XG5cbi8qKlxuICogVGhlIHB1YmxpYyB0b3AtbGV2ZWwgQVBJIGZvciBhIFwic3RhdGljXCIgPFJvdXRlcj4sIHNvLWNhbGxlZCBiZWNhdXNlIGl0XG4gKiBjYW4ndCBhY3R1YWxseSBjaGFuZ2UgdGhlIGN1cnJlbnQgbG9jYXRpb24uIEluc3RlYWQsIGl0IGp1c3QgcmVjb3Jkc1xuICogbG9jYXRpb24gY2hhbmdlcyBpbiBhIGNvbnRleHQgb2JqZWN0LiBVc2VmdWwgbWFpbmx5IGluIHRlc3RpbmcgYW5kXG4gKiBzZXJ2ZXItcmVuZGVyaW5nIHNjZW5hcmlvcy5cbiAqL1xuXG52YXIgU3RhdGljUm91dGVyID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFN0YXRpY1JvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gU3RhdGljUm91dGVyKCkge1xuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU3RhdGljUm91dGVyKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5jcmVhdGVIcmVmID0gZnVuY3Rpb24gKHBhdGgpIHtcbiAgICAgIHJldHVybiBhZGRMZWFkaW5nU2xhc2goX3RoaXMucHJvcHMuYmFzZW5hbWUgKyBjcmVhdGVVUkwocGF0aCkpO1xuICAgIH0sIF90aGlzLmhhbmRsZVB1c2ggPSBmdW5jdGlvbiAobG9jYXRpb24pIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIGJhc2VuYW1lID0gX3RoaXMkcHJvcHMuYmFzZW5hbWUsXG4gICAgICAgICAgY29udGV4dCA9IF90aGlzJHByb3BzLmNvbnRleHQ7XG5cbiAgICAgIGNvbnRleHQuYWN0aW9uID0gXCJQVVNIXCI7XG4gICAgICBjb250ZXh0LmxvY2F0aW9uID0gYWRkQmFzZW5hbWUoYmFzZW5hbWUsIGNyZWF0ZUxvY2F0aW9uKGxvY2F0aW9uKSk7XG4gICAgICBjb250ZXh0LnVybCA9IGNyZWF0ZVVSTChjb250ZXh0LmxvY2F0aW9uKTtcbiAgICB9LCBfdGhpcy5oYW5kbGVSZXBsYWNlID0gZnVuY3Rpb24gKGxvY2F0aW9uKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMyID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgYmFzZW5hbWUgPSBfdGhpcyRwcm9wczIuYmFzZW5hbWUsXG4gICAgICAgICAgY29udGV4dCA9IF90aGlzJHByb3BzMi5jb250ZXh0O1xuXG4gICAgICBjb250ZXh0LmFjdGlvbiA9IFwiUkVQTEFDRVwiO1xuICAgICAgY29udGV4dC5sb2NhdGlvbiA9IGFkZEJhc2VuYW1lKGJhc2VuYW1lLCBjcmVhdGVMb2NhdGlvbihsb2NhdGlvbikpO1xuICAgICAgY29udGV4dC51cmwgPSBjcmVhdGVVUkwoY29udGV4dC5sb2NhdGlvbik7XG4gICAgfSwgX3RoaXMuaGFuZGxlTGlzdGVuID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIG5vb3A7XG4gICAgfSwgX3RoaXMuaGFuZGxlQmxvY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gbm9vcDtcbiAgICB9LCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gIFN0YXRpY1JvdXRlci5wcm90b3R5cGUuZ2V0Q2hpbGRDb250ZXh0ID0gZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KCkge1xuICAgIHJldHVybiB7XG4gICAgICByb3V0ZXI6IHtcbiAgICAgICAgc3RhdGljQ29udGV4dDogdGhpcy5wcm9wcy5jb250ZXh0XG4gICAgICB9XG4gICAgfTtcbiAgfTtcblxuICBTdGF0aWNSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICB3YXJuaW5nKCF0aGlzLnByb3BzLmhpc3RvcnksIFwiPFN0YXRpY1JvdXRlcj4gaWdub3JlcyB0aGUgaGlzdG9yeSBwcm9wLiBUbyB1c2UgYSBjdXN0b20gaGlzdG9yeSwgXCIgKyBcInVzZSBgaW1wb3J0IHsgUm91dGVyIH1gIGluc3RlYWQgb2YgYGltcG9ydCB7IFN0YXRpY1JvdXRlciBhcyBSb3V0ZXIgfWAuXCIpO1xuICB9O1xuXG4gIFN0YXRpY1JvdXRlci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBiYXNlbmFtZSA9IF9wcm9wcy5iYXNlbmFtZSxcbiAgICAgICAgY29udGV4dCA9IF9wcm9wcy5jb250ZXh0LFxuICAgICAgICBsb2NhdGlvbiA9IF9wcm9wcy5sb2NhdGlvbixcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3Byb3BzLCBbXCJiYXNlbmFtZVwiLCBcImNvbnRleHRcIiwgXCJsb2NhdGlvblwiXSk7XG5cbiAgICB2YXIgaGlzdG9yeSA9IHtcbiAgICAgIGNyZWF0ZUhyZWY6IHRoaXMuY3JlYXRlSHJlZixcbiAgICAgIGFjdGlvbjogXCJQT1BcIixcbiAgICAgIGxvY2F0aW9uOiBzdHJpcEJhc2VuYW1lKGJhc2VuYW1lLCBjcmVhdGVMb2NhdGlvbihsb2NhdGlvbikpLFxuICAgICAgcHVzaDogdGhpcy5oYW5kbGVQdXNoLFxuICAgICAgcmVwbGFjZTogdGhpcy5oYW5kbGVSZXBsYWNlLFxuICAgICAgZ286IHN0YXRpY0hhbmRsZXIoXCJnb1wiKSxcbiAgICAgIGdvQmFjazogc3RhdGljSGFuZGxlcihcImdvQmFja1wiKSxcbiAgICAgIGdvRm9yd2FyZDogc3RhdGljSGFuZGxlcihcImdvRm9yd2FyZFwiKSxcbiAgICAgIGxpc3RlbjogdGhpcy5oYW5kbGVMaXN0ZW4sXG4gICAgICBibG9jazogdGhpcy5oYW5kbGVCbG9ja1xuICAgIH07XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIF9leHRlbmRzKHt9LCBwcm9wcywgeyBoaXN0b3J5OiBoaXN0b3J5IH0pKTtcbiAgfTtcblxuICByZXR1cm4gU3RhdGljUm91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5TdGF0aWNSb3V0ZXIucHJvcFR5cGVzID0ge1xuICBiYXNlbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgY29udGV4dDogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICBsb2NhdGlvbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm9iamVjdF0pXG59O1xuU3RhdGljUm91dGVyLmRlZmF1bHRQcm9wcyA9IHtcbiAgYmFzZW5hbWU6IFwiXCIsXG4gIGxvY2F0aW9uOiBcIi9cIlxufTtcblN0YXRpY1JvdXRlci5jaGlsZENvbnRleHRUeXBlcyA9IHtcbiAgcm91dGVyOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWRcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgU3RhdGljUm91dGVyOyIsIi8vIFdyaXR0ZW4gaW4gdGhpcyByb3VuZCBhYm91dCB3YXkgZm9yIGJhYmVsLXRyYW5zZm9ybS1pbXBvcnRzXG5pbXBvcnQgU3RhdGljUm91dGVyIGZyb20gXCJyZWFjdC1yb3V0ZXIvZXMvU3RhdGljUm91dGVyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IFN0YXRpY1JvdXRlcjsiLCJmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCB3YXJuaW5nIGZyb20gXCJ3YXJuaW5nXCI7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gXCJpbnZhcmlhbnRcIjtcbmltcG9ydCBtYXRjaFBhdGggZnJvbSBcIi4vbWF0Y2hQYXRoXCI7XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHJlbmRlcmluZyB0aGUgZmlyc3QgPFJvdXRlPiB0aGF0IG1hdGNoZXMuXG4gKi9cblxudmFyIFN3aXRjaCA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhTd2l0Y2gsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFN3aXRjaCgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU3dpdGNoKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgU3dpdGNoLnByb3RvdHlwZS5jb21wb25lbnRXaWxsTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgaW52YXJpYW50KHRoaXMuY29udGV4dC5yb3V0ZXIsIFwiWW91IHNob3VsZCBub3QgdXNlIDxTd2l0Y2g+IG91dHNpZGUgYSA8Um91dGVyPlwiKTtcbiAgfTtcblxuICBTd2l0Y2gucHJvdG90eXBlLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgIHdhcm5pbmcoIShuZXh0UHJvcHMubG9jYXRpb24gJiYgIXRoaXMucHJvcHMubG9jYXRpb24pLCAnPFN3aXRjaD4gZWxlbWVudHMgc2hvdWxkIG5vdCBjaGFuZ2UgZnJvbSB1bmNvbnRyb2xsZWQgdG8gY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuIFlvdSBpbml0aWFsbHkgdXNlZCBubyBcImxvY2F0aW9uXCIgcHJvcCBhbmQgdGhlbiBwcm92aWRlZCBvbmUgb24gYSBzdWJzZXF1ZW50IHJlbmRlci4nKTtcblxuICAgIHdhcm5pbmcoISghbmV4dFByb3BzLmxvY2F0aW9uICYmIHRoaXMucHJvcHMubG9jYXRpb24pLCAnPFN3aXRjaD4gZWxlbWVudHMgc2hvdWxkIG5vdCBjaGFuZ2UgZnJvbSBjb250cm9sbGVkIHRvIHVuY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuIFlvdSBwcm92aWRlZCBhIFwibG9jYXRpb25cIiBwcm9wIGluaXRpYWxseSBidXQgb21pdHRlZCBpdCBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLicpO1xuICB9O1xuXG4gIFN3aXRjaC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciByb3V0ZSA9IHRoaXMuY29udGV4dC5yb3V0ZXIucm91dGU7XG4gICAgdmFyIGNoaWxkcmVuID0gdGhpcy5wcm9wcy5jaGlsZHJlbjtcblxuICAgIHZhciBsb2NhdGlvbiA9IHRoaXMucHJvcHMubG9jYXRpb24gfHwgcm91dGUubG9jYXRpb247XG5cbiAgICB2YXIgbWF0Y2ggPSB2b2lkIDAsXG4gICAgICAgIGNoaWxkID0gdm9pZCAwO1xuICAgIFJlYWN0LkNoaWxkcmVuLmZvckVhY2goY2hpbGRyZW4sIGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICBpZiAobWF0Y2ggPT0gbnVsbCAmJiBSZWFjdC5pc1ZhbGlkRWxlbWVudChlbGVtZW50KSkge1xuICAgICAgICB2YXIgX2VsZW1lbnQkcHJvcHMgPSBlbGVtZW50LnByb3BzLFxuICAgICAgICAgICAgcGF0aFByb3AgPSBfZWxlbWVudCRwcm9wcy5wYXRoLFxuICAgICAgICAgICAgZXhhY3QgPSBfZWxlbWVudCRwcm9wcy5leGFjdCxcbiAgICAgICAgICAgIHN0cmljdCA9IF9lbGVtZW50JHByb3BzLnN0cmljdCxcbiAgICAgICAgICAgIHNlbnNpdGl2ZSA9IF9lbGVtZW50JHByb3BzLnNlbnNpdGl2ZSxcbiAgICAgICAgICAgIGZyb20gPSBfZWxlbWVudCRwcm9wcy5mcm9tO1xuXG4gICAgICAgIHZhciBwYXRoID0gcGF0aFByb3AgfHwgZnJvbTtcblxuICAgICAgICBjaGlsZCA9IGVsZW1lbnQ7XG4gICAgICAgIG1hdGNoID0gbWF0Y2hQYXRoKGxvY2F0aW9uLnBhdGhuYW1lLCB7IHBhdGg6IHBhdGgsIGV4YWN0OiBleGFjdCwgc3RyaWN0OiBzdHJpY3QsIHNlbnNpdGl2ZTogc2Vuc2l0aXZlIH0sIHJvdXRlLm1hdGNoKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBtYXRjaCA/IFJlYWN0LmNsb25lRWxlbWVudChjaGlsZCwgeyBsb2NhdGlvbjogbG9jYXRpb24sIGNvbXB1dGVkTWF0Y2g6IG1hdGNoIH0pIDogbnVsbDtcbiAgfTtcblxuICByZXR1cm4gU3dpdGNoO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5Td2l0Y2guY29udGV4dFR5cGVzID0ge1xuICByb3V0ZXI6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgcm91dGU6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZFxuICB9KS5pc1JlcXVpcmVkXG59O1xuU3dpdGNoLnByb3BUeXBlcyA9IHtcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICBsb2NhdGlvbjogUHJvcFR5cGVzLm9iamVjdFxufTtcblxuXG5leHBvcnQgZGVmYXVsdCBTd2l0Y2g7IiwiLy8gV3JpdHRlbiBpbiB0aGlzIHJvdW5kIGFib3V0IHdheSBmb3IgYmFiZWwtdHJhbnNmb3JtLWltcG9ydHNcbmltcG9ydCBTd2l0Y2ggZnJvbSBcInJlYWN0LXJvdXRlci9lcy9Td2l0Y2hcIjtcblxuZXhwb3J0IGRlZmF1bHQgU3dpdGNoOyIsIi8vIFdyaXR0ZW4gaW4gdGhpcyByb3VuZCBhYm91dCB3YXkgZm9yIGJhYmVsLXRyYW5zZm9ybS1pbXBvcnRzXG5pbXBvcnQgZ2VuZXJhdGVQYXRoIGZyb20gXCJyZWFjdC1yb3V0ZXIvZXMvZ2VuZXJhdGVQYXRoXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGdlbmVyYXRlUGF0aDsiLCIvLyBXcml0dGVuIGluIHRoaXMgcm91bmQgYWJvdXQgd2F5IGZvciBiYWJlbC10cmFuc2Zvcm0taW1wb3J0c1xuaW1wb3J0IG1hdGNoUGF0aCBmcm9tIFwicmVhY3Qtcm91dGVyL2VzL21hdGNoUGF0aFwiO1xuXG5leHBvcnQgZGVmYXVsdCBtYXRjaFBhdGg7IiwidmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5pbXBvcnQgaG9pc3RTdGF0aWNzIGZyb20gXCJob2lzdC1ub24tcmVhY3Qtc3RhdGljc1wiO1xuaW1wb3J0IFJvdXRlIGZyb20gXCIuL1JvdXRlXCI7XG5cbi8qKlxuICogQSBwdWJsaWMgaGlnaGVyLW9yZGVyIGNvbXBvbmVudCB0byBhY2Nlc3MgdGhlIGltcGVyYXRpdmUgQVBJXG4gKi9cbnZhciB3aXRoUm91dGVyID0gZnVuY3Rpb24gd2l0aFJvdXRlcihDb21wb25lbnQpIHtcbiAgdmFyIEMgPSBmdW5jdGlvbiBDKHByb3BzKSB7XG4gICAgdmFyIHdyYXBwZWRDb21wb25lbnRSZWYgPSBwcm9wcy53cmFwcGVkQ29tcG9uZW50UmVmLFxuICAgICAgICByZW1haW5pbmdQcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wid3JhcHBlZENvbXBvbmVudFJlZlwiXSk7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZSwge1xuICAgICAgY2hpbGRyZW46IGZ1bmN0aW9uIGNoaWxkcmVuKHJvdXRlQ29tcG9uZW50UHJvcHMpIHtcbiAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgcmVtYWluaW5nUHJvcHMsIHJvdXRlQ29tcG9uZW50UHJvcHMsIHtcbiAgICAgICAgICByZWY6IHdyYXBwZWRDb21wb25lbnRSZWZcbiAgICAgICAgfSkpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIEMuZGlzcGxheU5hbWUgPSBcIndpdGhSb3V0ZXIoXCIgKyAoQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IENvbXBvbmVudC5uYW1lKSArIFwiKVwiO1xuICBDLldyYXBwZWRDb21wb25lbnQgPSBDb21wb25lbnQ7XG4gIEMucHJvcFR5cGVzID0ge1xuICAgIHdyYXBwZWRDb21wb25lbnRSZWY6IFByb3BUeXBlcy5mdW5jXG4gIH07XG5cbiAgcmV0dXJuIGhvaXN0U3RhdGljcyhDLCBDb21wb25lbnQpO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgd2l0aFJvdXRlcjsiLCIvLyBXcml0dGVuIGluIHRoaXMgcm91bmQgYWJvdXQgd2F5IGZvciBiYWJlbC10cmFuc2Zvcm0taW1wb3J0c1xuaW1wb3J0IHdpdGhSb3V0ZXIgZnJvbSBcInJlYWN0LXJvdXRlci9lcy93aXRoUm91dGVyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IHdpdGhSb3V0ZXI7IiwiaW1wb3J0IF9Ccm93c2VyUm91dGVyIGZyb20gXCIuL0Jyb3dzZXJSb3V0ZXJcIjtcbmV4cG9ydCB7IF9Ccm93c2VyUm91dGVyIGFzIEJyb3dzZXJSb3V0ZXIgfTtcbmltcG9ydCBfSGFzaFJvdXRlciBmcm9tIFwiLi9IYXNoUm91dGVyXCI7XG5leHBvcnQgeyBfSGFzaFJvdXRlciBhcyBIYXNoUm91dGVyIH07XG5pbXBvcnQgX0xpbmsgZnJvbSBcIi4vTGlua1wiO1xuZXhwb3J0IHsgX0xpbmsgYXMgTGluayB9O1xuaW1wb3J0IF9NZW1vcnlSb3V0ZXIgZnJvbSBcIi4vTWVtb3J5Um91dGVyXCI7XG5leHBvcnQgeyBfTWVtb3J5Um91dGVyIGFzIE1lbW9yeVJvdXRlciB9O1xuaW1wb3J0IF9OYXZMaW5rIGZyb20gXCIuL05hdkxpbmtcIjtcbmV4cG9ydCB7IF9OYXZMaW5rIGFzIE5hdkxpbmsgfTtcbmltcG9ydCBfUHJvbXB0IGZyb20gXCIuL1Byb21wdFwiO1xuZXhwb3J0IHsgX1Byb21wdCBhcyBQcm9tcHQgfTtcbmltcG9ydCBfUmVkaXJlY3QgZnJvbSBcIi4vUmVkaXJlY3RcIjtcbmV4cG9ydCB7IF9SZWRpcmVjdCBhcyBSZWRpcmVjdCB9O1xuaW1wb3J0IF9Sb3V0ZSBmcm9tIFwiLi9Sb3V0ZVwiO1xuZXhwb3J0IHsgX1JvdXRlIGFzIFJvdXRlIH07XG5pbXBvcnQgX1JvdXRlciBmcm9tIFwiLi9Sb3V0ZXJcIjtcbmV4cG9ydCB7IF9Sb3V0ZXIgYXMgUm91dGVyIH07XG5pbXBvcnQgX1N0YXRpY1JvdXRlciBmcm9tIFwiLi9TdGF0aWNSb3V0ZXJcIjtcbmV4cG9ydCB7IF9TdGF0aWNSb3V0ZXIgYXMgU3RhdGljUm91dGVyIH07XG5pbXBvcnQgX1N3aXRjaCBmcm9tIFwiLi9Td2l0Y2hcIjtcbmV4cG9ydCB7IF9Td2l0Y2ggYXMgU3dpdGNoIH07XG5pbXBvcnQgX2dlbmVyYXRlUGF0aCBmcm9tIFwiLi9nZW5lcmF0ZVBhdGhcIjtcbmV4cG9ydCB7IF9nZW5lcmF0ZVBhdGggYXMgZ2VuZXJhdGVQYXRoIH07XG5pbXBvcnQgX21hdGNoUGF0aCBmcm9tIFwiLi9tYXRjaFBhdGhcIjtcbmV4cG9ydCB7IF9tYXRjaFBhdGggYXMgbWF0Y2hQYXRoIH07XG5pbXBvcnQgX3dpdGhSb3V0ZXIgZnJvbSBcIi4vd2l0aFJvdXRlclwiO1xuZXhwb3J0IHsgX3dpdGhSb3V0ZXIgYXMgd2l0aFJvdXRlciB9OyIsInZhciBpc2FycmF5ID0gcmVxdWlyZSgnaXNhcnJheScpXG5cbi8qKlxuICogRXhwb3NlIGBwYXRoVG9SZWdleHBgLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IHBhdGhUb1JlZ2V4cFxubW9kdWxlLmV4cG9ydHMucGFyc2UgPSBwYXJzZVxubW9kdWxlLmV4cG9ydHMuY29tcGlsZSA9IGNvbXBpbGVcbm1vZHVsZS5leHBvcnRzLnRva2Vuc1RvRnVuY3Rpb24gPSB0b2tlbnNUb0Z1bmN0aW9uXG5tb2R1bGUuZXhwb3J0cy50b2tlbnNUb1JlZ0V4cCA9IHRva2Vuc1RvUmVnRXhwXG5cbi8qKlxuICogVGhlIG1haW4gcGF0aCBtYXRjaGluZyByZWdleHAgdXRpbGl0eS5cbiAqXG4gKiBAdHlwZSB7UmVnRXhwfVxuICovXG52YXIgUEFUSF9SRUdFWFAgPSBuZXcgUmVnRXhwKFtcbiAgLy8gTWF0Y2ggZXNjYXBlZCBjaGFyYWN0ZXJzIHRoYXQgd291bGQgb3RoZXJ3aXNlIGFwcGVhciBpbiBmdXR1cmUgbWF0Y2hlcy5cbiAgLy8gVGhpcyBhbGxvd3MgdGhlIHVzZXIgdG8gZXNjYXBlIHNwZWNpYWwgY2hhcmFjdGVycyB0aGF0IHdvbid0IHRyYW5zZm9ybS5cbiAgJyhcXFxcXFxcXC4pJyxcbiAgLy8gTWF0Y2ggRXhwcmVzcy1zdHlsZSBwYXJhbWV0ZXJzIGFuZCB1bi1uYW1lZCBwYXJhbWV0ZXJzIHdpdGggYSBwcmVmaXhcbiAgLy8gYW5kIG9wdGlvbmFsIHN1ZmZpeGVzLiBNYXRjaGVzIGFwcGVhciBhczpcbiAgLy9cbiAgLy8gXCIvOnRlc3QoXFxcXGQrKT9cIiA9PiBbXCIvXCIsIFwidGVzdFwiLCBcIlxcZCtcIiwgdW5kZWZpbmVkLCBcIj9cIiwgdW5kZWZpbmVkXVxuICAvLyBcIi9yb3V0ZShcXFxcZCspXCIgID0+IFt1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBcIlxcZCtcIiwgdW5kZWZpbmVkLCB1bmRlZmluZWRdXG4gIC8vIFwiLypcIiAgICAgICAgICAgID0+IFtcIi9cIiwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBcIipcIl1cbiAgJyhbXFxcXC8uXSk/KD86KD86XFxcXDooXFxcXHcrKSg/OlxcXFwoKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKCldKSspXFxcXCkpP3xcXFxcKCgoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpXSkrKVxcXFwpKShbKyo/XSk/fChcXFxcKikpJ1xuXS5qb2luKCd8JyksICdnJylcblxuLyoqXG4gKiBQYXJzZSBhIHN0cmluZyBmb3IgdGhlIHJhdyB0b2tlbnMuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSAgc3RyXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshQXJyYXl9XG4gKi9cbmZ1bmN0aW9uIHBhcnNlIChzdHIsIG9wdGlvbnMpIHtcbiAgdmFyIHRva2VucyA9IFtdXG4gIHZhciBrZXkgPSAwXG4gIHZhciBpbmRleCA9IDBcbiAgdmFyIHBhdGggPSAnJ1xuICB2YXIgZGVmYXVsdERlbGltaXRlciA9IG9wdGlvbnMgJiYgb3B0aW9ucy5kZWxpbWl0ZXIgfHwgJy8nXG4gIHZhciByZXNcblxuICB3aGlsZSAoKHJlcyA9IFBBVEhfUkVHRVhQLmV4ZWMoc3RyKSkgIT0gbnVsbCkge1xuICAgIHZhciBtID0gcmVzWzBdXG4gICAgdmFyIGVzY2FwZWQgPSByZXNbMV1cbiAgICB2YXIgb2Zmc2V0ID0gcmVzLmluZGV4XG4gICAgcGF0aCArPSBzdHIuc2xpY2UoaW5kZXgsIG9mZnNldClcbiAgICBpbmRleCA9IG9mZnNldCArIG0ubGVuZ3RoXG5cbiAgICAvLyBJZ25vcmUgYWxyZWFkeSBlc2NhcGVkIHNlcXVlbmNlcy5cbiAgICBpZiAoZXNjYXBlZCkge1xuICAgICAgcGF0aCArPSBlc2NhcGVkWzFdXG4gICAgICBjb250aW51ZVxuICAgIH1cblxuICAgIHZhciBuZXh0ID0gc3RyW2luZGV4XVxuICAgIHZhciBwcmVmaXggPSByZXNbMl1cbiAgICB2YXIgbmFtZSA9IHJlc1szXVxuICAgIHZhciBjYXB0dXJlID0gcmVzWzRdXG4gICAgdmFyIGdyb3VwID0gcmVzWzVdXG4gICAgdmFyIG1vZGlmaWVyID0gcmVzWzZdXG4gICAgdmFyIGFzdGVyaXNrID0gcmVzWzddXG5cbiAgICAvLyBQdXNoIHRoZSBjdXJyZW50IHBhdGggb250byB0aGUgdG9rZW5zLlxuICAgIGlmIChwYXRoKSB7XG4gICAgICB0b2tlbnMucHVzaChwYXRoKVxuICAgICAgcGF0aCA9ICcnXG4gICAgfVxuXG4gICAgdmFyIHBhcnRpYWwgPSBwcmVmaXggIT0gbnVsbCAmJiBuZXh0ICE9IG51bGwgJiYgbmV4dCAhPT0gcHJlZml4XG4gICAgdmFyIHJlcGVhdCA9IG1vZGlmaWVyID09PSAnKycgfHwgbW9kaWZpZXIgPT09ICcqJ1xuICAgIHZhciBvcHRpb25hbCA9IG1vZGlmaWVyID09PSAnPycgfHwgbW9kaWZpZXIgPT09ICcqJ1xuICAgIHZhciBkZWxpbWl0ZXIgPSByZXNbMl0gfHwgZGVmYXVsdERlbGltaXRlclxuICAgIHZhciBwYXR0ZXJuID0gY2FwdHVyZSB8fCBncm91cFxuXG4gICAgdG9rZW5zLnB1c2goe1xuICAgICAgbmFtZTogbmFtZSB8fCBrZXkrKyxcbiAgICAgIHByZWZpeDogcHJlZml4IHx8ICcnLFxuICAgICAgZGVsaW1pdGVyOiBkZWxpbWl0ZXIsXG4gICAgICBvcHRpb25hbDogb3B0aW9uYWwsXG4gICAgICByZXBlYXQ6IHJlcGVhdCxcbiAgICAgIHBhcnRpYWw6IHBhcnRpYWwsXG4gICAgICBhc3RlcmlzazogISFhc3RlcmlzayxcbiAgICAgIHBhdHRlcm46IHBhdHRlcm4gPyBlc2NhcGVHcm91cChwYXR0ZXJuKSA6IChhc3RlcmlzayA/ICcuKicgOiAnW14nICsgZXNjYXBlU3RyaW5nKGRlbGltaXRlcikgKyAnXSs/JylcbiAgICB9KVxuICB9XG5cbiAgLy8gTWF0Y2ggYW55IGNoYXJhY3RlcnMgc3RpbGwgcmVtYWluaW5nLlxuICBpZiAoaW5kZXggPCBzdHIubGVuZ3RoKSB7XG4gICAgcGF0aCArPSBzdHIuc3Vic3RyKGluZGV4KVxuICB9XG5cbiAgLy8gSWYgdGhlIHBhdGggZXhpc3RzLCBwdXNoIGl0IG9udG8gdGhlIGVuZC5cbiAgaWYgKHBhdGgpIHtcbiAgICB0b2tlbnMucHVzaChwYXRoKVxuICB9XG5cbiAgcmV0dXJuIHRva2Vuc1xufVxuXG4vKipcbiAqIENvbXBpbGUgYSBzdHJpbmcgdG8gYSB0ZW1wbGF0ZSBmdW5jdGlvbiBmb3IgdGhlIHBhdGguXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSAgICAgICAgICAgICBzdHJcbiAqIEBwYXJhbSAge09iamVjdD19ICAgICAgICAgICAgb3B0aW9uc1xuICogQHJldHVybiB7IWZ1bmN0aW9uKE9iamVjdD0sIE9iamVjdD0pfVxuICovXG5mdW5jdGlvbiBjb21waWxlIChzdHIsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHRva2Vuc1RvRnVuY3Rpb24ocGFyc2Uoc3RyLCBvcHRpb25zKSwgb3B0aW9ucylcbn1cblxuLyoqXG4gKiBQcmV0dGllciBlbmNvZGluZyBvZiBVUkkgcGF0aCBzZWdtZW50cy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVuY29kZVVSSUNvbXBvbmVudFByZXR0eSAoc3RyKSB7XG4gIHJldHVybiBlbmNvZGVVUkkoc3RyKS5yZXBsYWNlKC9bXFwvPyNdL2csIGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuICclJyArIGMuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKVxuICB9KVxufVxuXG4vKipcbiAqIEVuY29kZSB0aGUgYXN0ZXJpc2sgcGFyYW1ldGVyLiBTaW1pbGFyIHRvIGBwcmV0dHlgLCBidXQgYWxsb3dzIHNsYXNoZXMuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlbmNvZGVBc3RlcmlzayAoc3RyKSB7XG4gIHJldHVybiBlbmNvZGVVUkkoc3RyKS5yZXBsYWNlKC9bPyNdL2csIGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuICclJyArIGMuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKVxuICB9KVxufVxuXG4vKipcbiAqIEV4cG9zZSBhIG1ldGhvZCBmb3IgdHJhbnNmb3JtaW5nIHRva2VucyBpbnRvIHRoZSBwYXRoIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiB0b2tlbnNUb0Z1bmN0aW9uICh0b2tlbnMsIG9wdGlvbnMpIHtcbiAgLy8gQ29tcGlsZSBhbGwgdGhlIHRva2VucyBpbnRvIHJlZ2V4cHMuXG4gIHZhciBtYXRjaGVzID0gbmV3IEFycmF5KHRva2Vucy5sZW5ndGgpXG5cbiAgLy8gQ29tcGlsZSBhbGwgdGhlIHBhdHRlcm5zIGJlZm9yZSBjb21waWxhdGlvbi5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAodHlwZW9mIHRva2Vuc1tpXSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIG1hdGNoZXNbaV0gPSBuZXcgUmVnRXhwKCdeKD86JyArIHRva2Vuc1tpXS5wYXR0ZXJuICsgJykkJywgZmxhZ3Mob3B0aW9ucykpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChvYmosIG9wdHMpIHtcbiAgICB2YXIgcGF0aCA9ICcnXG4gICAgdmFyIGRhdGEgPSBvYmogfHwge31cbiAgICB2YXIgb3B0aW9ucyA9IG9wdHMgfHwge31cbiAgICB2YXIgZW5jb2RlID0gb3B0aW9ucy5wcmV0dHkgPyBlbmNvZGVVUklDb21wb25lbnRQcmV0dHkgOiBlbmNvZGVVUklDb21wb25lbnRcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdG9rZW4gPSB0b2tlbnNbaV1cblxuICAgICAgaWYgKHR5cGVvZiB0b2tlbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcGF0aCArPSB0b2tlblxuXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIHZhciB2YWx1ZSA9IGRhdGFbdG9rZW4ubmFtZV1cbiAgICAgIHZhciBzZWdtZW50XG5cbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIGlmICh0b2tlbi5vcHRpb25hbCkge1xuICAgICAgICAgIC8vIFByZXBlbmQgcGFydGlhbCBzZWdtZW50IHByZWZpeGVzLlxuICAgICAgICAgIGlmICh0b2tlbi5wYXJ0aWFsKSB7XG4gICAgICAgICAgICBwYXRoICs9IHRva2VuLnByZWZpeFxuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBiZSBkZWZpbmVkJylcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoaXNhcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgaWYgKCF0b2tlbi5yZXBlYXQpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG5vdCByZXBlYXQsIGJ1dCByZWNlaXZlZCBgJyArIEpTT04uc3RyaW5naWZ5KHZhbHVlKSArICdgJylcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh2YWx1ZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICBpZiAodG9rZW4ub3B0aW9uYWwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbm90IGJlIGVtcHR5JylcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHZhbHVlLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgc2VnbWVudCA9IGVuY29kZSh2YWx1ZVtqXSlcblxuICAgICAgICAgIGlmICghbWF0Y2hlc1tpXS50ZXN0KHNlZ21lbnQpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBhbGwgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBtYXRjaCBcIicgKyB0b2tlbi5wYXR0ZXJuICsgJ1wiLCBidXQgcmVjZWl2ZWQgYCcgKyBKU09OLnN0cmluZ2lmeShzZWdtZW50KSArICdgJylcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBwYXRoICs9IChqID09PSAwID8gdG9rZW4ucHJlZml4IDogdG9rZW4uZGVsaW1pdGVyKSArIHNlZ21lbnRcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIHNlZ21lbnQgPSB0b2tlbi5hc3RlcmlzayA/IGVuY29kZUFzdGVyaXNrKHZhbHVlKSA6IGVuY29kZSh2YWx1ZSlcblxuICAgICAgaWYgKCFtYXRjaGVzW2ldLnRlc3Qoc2VnbWVudCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBtYXRjaCBcIicgKyB0b2tlbi5wYXR0ZXJuICsgJ1wiLCBidXQgcmVjZWl2ZWQgXCInICsgc2VnbWVudCArICdcIicpXG4gICAgICB9XG5cbiAgICAgIHBhdGggKz0gdG9rZW4ucHJlZml4ICsgc2VnbWVudFxuICAgIH1cblxuICAgIHJldHVybiBwYXRoXG4gIH1cbn1cblxuLyoqXG4gKiBFc2NhcGUgYSByZWd1bGFyIGV4cHJlc3Npb24gc3RyaW5nLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVzY2FwZVN0cmluZyAoc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvKFsuKyo/PV4hOiR7fSgpW1xcXXxcXC9cXFxcXSkvZywgJ1xcXFwkMScpXG59XG5cbi8qKlxuICogRXNjYXBlIHRoZSBjYXB0dXJpbmcgZ3JvdXAgYnkgZXNjYXBpbmcgc3BlY2lhbCBjaGFyYWN0ZXJzIGFuZCBtZWFuaW5nLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gZ3JvdXBcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZXNjYXBlR3JvdXAgKGdyb3VwKSB7XG4gIHJldHVybiBncm91cC5yZXBsYWNlKC8oWz0hOiRcXC8oKV0pL2csICdcXFxcJDEnKVxufVxuXG4vKipcbiAqIEF0dGFjaCB0aGUga2V5cyBhcyBhIHByb3BlcnR5IG9mIHRoZSByZWdleHAuXG4gKlxuICogQHBhcmFtICB7IVJlZ0V4cH0gcmVcbiAqIEBwYXJhbSAge0FycmF5fSAgIGtleXNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIGF0dGFjaEtleXMgKHJlLCBrZXlzKSB7XG4gIHJlLmtleXMgPSBrZXlzXG4gIHJldHVybiByZVxufVxuXG4vKipcbiAqIEdldCB0aGUgZmxhZ3MgZm9yIGEgcmVnZXhwIGZyb20gdGhlIG9wdGlvbnMuXG4gKlxuICogQHBhcmFtICB7T2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGZsYWdzIChvcHRpb25zKSB7XG4gIHJldHVybiBvcHRpb25zICYmIG9wdGlvbnMuc2Vuc2l0aXZlID8gJycgOiAnaSdcbn1cblxuLyoqXG4gKiBQdWxsIG91dCBrZXlzIGZyb20gYSByZWdleHAuXG4gKlxuICogQHBhcmFtICB7IVJlZ0V4cH0gcGF0aFxuICogQHBhcmFtICB7IUFycmF5fSAga2V5c1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gcmVnZXhwVG9SZWdleHAgKHBhdGgsIGtleXMpIHtcbiAgLy8gVXNlIGEgbmVnYXRpdmUgbG9va2FoZWFkIHRvIG1hdGNoIG9ubHkgY2FwdHVyaW5nIGdyb3Vwcy5cbiAgdmFyIGdyb3VwcyA9IHBhdGguc291cmNlLm1hdGNoKC9cXCgoPyFcXD8pL2cpXG5cbiAgaWYgKGdyb3Vwcykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZ3JvdXBzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBrZXlzLnB1c2goe1xuICAgICAgICBuYW1lOiBpLFxuICAgICAgICBwcmVmaXg6IG51bGwsXG4gICAgICAgIGRlbGltaXRlcjogbnVsbCxcbiAgICAgICAgb3B0aW9uYWw6IGZhbHNlLFxuICAgICAgICByZXBlYXQ6IGZhbHNlLFxuICAgICAgICBwYXJ0aWFsOiBmYWxzZSxcbiAgICAgICAgYXN0ZXJpc2s6IGZhbHNlLFxuICAgICAgICBwYXR0ZXJuOiBudWxsXG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBhdHRhY2hLZXlzKHBhdGgsIGtleXMpXG59XG5cbi8qKlxuICogVHJhbnNmb3JtIGFuIGFycmF5IGludG8gYSByZWdleHAuXG4gKlxuICogQHBhcmFtICB7IUFycmF5fSAgcGF0aFxuICogQHBhcmFtICB7QXJyYXl9ICAga2V5c1xuICogQHBhcmFtICB7IU9iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gYXJyYXlUb1JlZ2V4cCAocGF0aCwga2V5cywgb3B0aW9ucykge1xuICB2YXIgcGFydHMgPSBbXVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcGF0aC5sZW5ndGg7IGkrKykge1xuICAgIHBhcnRzLnB1c2gocGF0aFRvUmVnZXhwKHBhdGhbaV0sIGtleXMsIG9wdGlvbnMpLnNvdXJjZSlcbiAgfVxuXG4gIHZhciByZWdleHAgPSBuZXcgUmVnRXhwKCcoPzonICsgcGFydHMuam9pbignfCcpICsgJyknLCBmbGFncyhvcHRpb25zKSlcblxuICByZXR1cm4gYXR0YWNoS2V5cyhyZWdleHAsIGtleXMpXG59XG5cbi8qKlxuICogQ3JlYXRlIGEgcGF0aCByZWdleHAgZnJvbSBzdHJpbmcgaW5wdXQuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSAgcGF0aFxuICogQHBhcmFtICB7IUFycmF5fSAga2V5c1xuICogQHBhcmFtICB7IU9iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gc3RyaW5nVG9SZWdleHAgKHBhdGgsIGtleXMsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHRva2Vuc1RvUmVnRXhwKHBhcnNlKHBhdGgsIG9wdGlvbnMpLCBrZXlzLCBvcHRpb25zKVxufVxuXG4vKipcbiAqIEV4cG9zZSBhIGZ1bmN0aW9uIGZvciB0YWtpbmcgdG9rZW5zIGFuZCByZXR1cm5pbmcgYSBSZWdFeHAuXG4gKlxuICogQHBhcmFtICB7IUFycmF5fSAgICAgICAgICB0b2tlbnNcbiAqIEBwYXJhbSAgeyhBcnJheXxPYmplY3QpPX0ga2V5c1xuICogQHBhcmFtICB7T2JqZWN0PX0gICAgICAgICBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiB0b2tlbnNUb1JlZ0V4cCAodG9rZW5zLCBrZXlzLCBvcHRpb25zKSB7XG4gIGlmICghaXNhcnJheShrZXlzKSkge1xuICAgIG9wdGlvbnMgPSAvKiogQHR5cGUgeyFPYmplY3R9ICovIChrZXlzIHx8IG9wdGlvbnMpXG4gICAga2V5cyA9IFtdXG4gIH1cblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuXG4gIHZhciBzdHJpY3QgPSBvcHRpb25zLnN0cmljdFxuICB2YXIgZW5kID0gb3B0aW9ucy5lbmQgIT09IGZhbHNlXG4gIHZhciByb3V0ZSA9ICcnXG5cbiAgLy8gSXRlcmF0ZSBvdmVyIHRoZSB0b2tlbnMgYW5kIGNyZWF0ZSBvdXIgcmVnZXhwIHN0cmluZy5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgdG9rZW4gPSB0b2tlbnNbaV1cblxuICAgIGlmICh0eXBlb2YgdG9rZW4gPT09ICdzdHJpbmcnKSB7XG4gICAgICByb3V0ZSArPSBlc2NhcGVTdHJpbmcodG9rZW4pXG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBwcmVmaXggPSBlc2NhcGVTdHJpbmcodG9rZW4ucHJlZml4KVxuICAgICAgdmFyIGNhcHR1cmUgPSAnKD86JyArIHRva2VuLnBhdHRlcm4gKyAnKSdcblxuICAgICAga2V5cy5wdXNoKHRva2VuKVxuXG4gICAgICBpZiAodG9rZW4ucmVwZWF0KSB7XG4gICAgICAgIGNhcHR1cmUgKz0gJyg/OicgKyBwcmVmaXggKyBjYXB0dXJlICsgJykqJ1xuICAgICAgfVxuXG4gICAgICBpZiAodG9rZW4ub3B0aW9uYWwpIHtcbiAgICAgICAgaWYgKCF0b2tlbi5wYXJ0aWFsKSB7XG4gICAgICAgICAgY2FwdHVyZSA9ICcoPzonICsgcHJlZml4ICsgJygnICsgY2FwdHVyZSArICcpKT8nXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2FwdHVyZSA9IHByZWZpeCArICcoJyArIGNhcHR1cmUgKyAnKT8nXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhcHR1cmUgPSBwcmVmaXggKyAnKCcgKyBjYXB0dXJlICsgJyknXG4gICAgICB9XG5cbiAgICAgIHJvdXRlICs9IGNhcHR1cmVcbiAgICB9XG4gIH1cblxuICB2YXIgZGVsaW1pdGVyID0gZXNjYXBlU3RyaW5nKG9wdGlvbnMuZGVsaW1pdGVyIHx8ICcvJylcbiAgdmFyIGVuZHNXaXRoRGVsaW1pdGVyID0gcm91dGUuc2xpY2UoLWRlbGltaXRlci5sZW5ndGgpID09PSBkZWxpbWl0ZXJcblxuICAvLyBJbiBub24tc3RyaWN0IG1vZGUgd2UgYWxsb3cgYSBzbGFzaCBhdCB0aGUgZW5kIG9mIG1hdGNoLiBJZiB0aGUgcGF0aCB0b1xuICAvLyBtYXRjaCBhbHJlYWR5IGVuZHMgd2l0aCBhIHNsYXNoLCB3ZSByZW1vdmUgaXQgZm9yIGNvbnNpc3RlbmN5LiBUaGUgc2xhc2hcbiAgLy8gaXMgdmFsaWQgYXQgdGhlIGVuZCBvZiBhIHBhdGggbWF0Y2gsIG5vdCBpbiB0aGUgbWlkZGxlLiBUaGlzIGlzIGltcG9ydGFudFxuICAvLyBpbiBub24tZW5kaW5nIG1vZGUsIHdoZXJlIFwiL3Rlc3QvXCIgc2hvdWxkbid0IG1hdGNoIFwiL3Rlc3QvL3JvdXRlXCIuXG4gIGlmICghc3RyaWN0KSB7XG4gICAgcm91dGUgPSAoZW5kc1dpdGhEZWxpbWl0ZXIgPyByb3V0ZS5zbGljZSgwLCAtZGVsaW1pdGVyLmxlbmd0aCkgOiByb3V0ZSkgKyAnKD86JyArIGRlbGltaXRlciArICcoPz0kKSk/J1xuICB9XG5cbiAgaWYgKGVuZCkge1xuICAgIHJvdXRlICs9ICckJ1xuICB9IGVsc2Uge1xuICAgIC8vIEluIG5vbi1lbmRpbmcgbW9kZSwgd2UgbmVlZCB0aGUgY2FwdHVyaW5nIGdyb3VwcyB0byBtYXRjaCBhcyBtdWNoIGFzXG4gICAgLy8gcG9zc2libGUgYnkgdXNpbmcgYSBwb3NpdGl2ZSBsb29rYWhlYWQgdG8gdGhlIGVuZCBvciBuZXh0IHBhdGggc2VnbWVudC5cbiAgICByb3V0ZSArPSBzdHJpY3QgJiYgZW5kc1dpdGhEZWxpbWl0ZXIgPyAnJyA6ICcoPz0nICsgZGVsaW1pdGVyICsgJ3wkKSdcbiAgfVxuXG4gIHJldHVybiBhdHRhY2hLZXlzKG5ldyBSZWdFeHAoJ14nICsgcm91dGUsIGZsYWdzKG9wdGlvbnMpKSwga2V5cylcbn1cblxuLyoqXG4gKiBOb3JtYWxpemUgdGhlIGdpdmVuIHBhdGggc3RyaW5nLCByZXR1cm5pbmcgYSByZWd1bGFyIGV4cHJlc3Npb24uXG4gKlxuICogQW4gZW1wdHkgYXJyYXkgY2FuIGJlIHBhc3NlZCBpbiBmb3IgdGhlIGtleXMsIHdoaWNoIHdpbGwgaG9sZCB0aGVcbiAqIHBsYWNlaG9sZGVyIGtleSBkZXNjcmlwdGlvbnMuIEZvciBleGFtcGxlLCB1c2luZyBgL3VzZXIvOmlkYCwgYGtleXNgIHdpbGxcbiAqIGNvbnRhaW4gYFt7IG5hbWU6ICdpZCcsIGRlbGltaXRlcjogJy8nLCBvcHRpb25hbDogZmFsc2UsIHJlcGVhdDogZmFsc2UgfV1gLlxuICpcbiAqIEBwYXJhbSAgeyhzdHJpbmd8UmVnRXhwfEFycmF5KX0gcGF0aFxuICogQHBhcmFtICB7KEFycmF5fE9iamVjdCk9fSAgICAgICBrZXlzXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSAgICAgICAgICAgICAgIG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHBhdGhUb1JlZ2V4cCAocGF0aCwga2V5cywgb3B0aW9ucykge1xuICBpZiAoIWlzYXJyYXkoa2V5cykpIHtcbiAgICBvcHRpb25zID0gLyoqIEB0eXBlIHshT2JqZWN0fSAqLyAoa2V5cyB8fCBvcHRpb25zKVxuICAgIGtleXMgPSBbXVxuICB9XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge31cblxuICBpZiAocGF0aCBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgIHJldHVybiByZWdleHBUb1JlZ2V4cChwYXRoLCAvKiogQHR5cGUgeyFBcnJheX0gKi8gKGtleXMpKVxuICB9XG5cbiAgaWYgKGlzYXJyYXkocGF0aCkpIHtcbiAgICByZXR1cm4gYXJyYXlUb1JlZ2V4cCgvKiogQHR5cGUgeyFBcnJheX0gKi8gKHBhdGgpLCAvKiogQHR5cGUgeyFBcnJheX0gKi8gKGtleXMpLCBvcHRpb25zKVxuICB9XG5cbiAgcmV0dXJuIHN0cmluZ1RvUmVnZXhwKC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAocGF0aCksIC8qKiBAdHlwZSB7IUFycmF5fSAqLyAoa2V5cyksIG9wdGlvbnMpXG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9XG4vKioqKioqLyAoZnVuY3Rpb24obW9kdWxlcykgeyAvLyB3ZWJwYWNrQm9vdHN0cmFwXG4vKioqKioqLyBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4vKioqKioqLyBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4vKioqKioqLyBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbi8qKioqKiovIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuLyoqKioqKi8gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbi8qKioqKiovIFx0XHRcdGk6IG1vZHVsZUlkLFxuLyoqKioqKi8gXHRcdFx0bDogZmFsc2UsXG4vKioqKioqLyBcdFx0XHRleHBvcnRzOiB7fVxuLyoqKioqKi8gXHRcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuLyoqKioqKi8gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4vKioqKioqLyBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuLyoqKioqKi8gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbi8qKioqKiovIFx0fVxuLyoqKioqKi9cbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gaWRlbnRpdHkgZnVuY3Rpb24gZm9yIGNhbGxpbmcgaGFybW9ueSBpbXBvcnRzIHdpdGggdGhlIGNvcnJlY3QgY29udGV4dFxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmkgPSBmdW5jdGlvbih2YWx1ZSkgeyByZXR1cm4gdmFsdWU7IH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4vKioqKioqLyBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuLyoqKioqKi8gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHtcbi8qKioqKiovIFx0XHRcdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcbi8qKioqKiovIFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcbi8qKioqKiovIFx0XHRcdFx0Z2V0OiBnZXR0ZXJcbi8qKioqKiovIFx0XHRcdH0pO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuLyoqKioqKi8gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuLyoqKioqKi8gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbi8qKioqKiovIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4vKioqKioqLyBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuLyoqKioqKi8gXHRcdHJldHVybiBnZXR0ZXI7XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLyoqKioqKi8gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSA3MSk7XG4vKioqKioqLyB9KVxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovICh7XG5cbi8qKiovIDA6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInJlYWN0XCIpO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gMTY6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImNvbnNvbGlkYXRlZC1ldmVudHNcIik7XG5cbi8qKiovIH0pLFxuXG4vKioqLyAzOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gNzE6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7ZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO2lmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7T2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICAgIH1cbiAgfXJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gICAgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtyZXR1cm4gQ29uc3RydWN0b3I7XG4gIH07XG59KCk7XG5cbnZhciBfcmVhY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9wcm9wVHlwZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xuXG52YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG52YXIgX2NvbnNvbGlkYXRlZEV2ZW50cyA9IF9fd2VicGFja19yZXF1aXJlX18oMTYpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikge1xuICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9O1xufVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7XG4gIGlmICghc2VsZikge1xuICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgfXJldHVybiBjYWxsICYmICgodHlwZW9mIGNhbGwgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihjYWxsKSkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjtcbn1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArICh0eXBlb2Ygc3VwZXJDbGFzcyA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKHN1cGVyQ2xhc3MpKSk7XG4gIH1zdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pO2lmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcbn1cblxuLy8gaW1wb3J0IHsgZm9yYmlkRXh0cmFQcm9wcyB9IGZyb20gJ2FpcmJuYi1wcm9wLXR5cGVzJzsgLy8gVE9ETzogYWRkIHRvIHByb3BUeXBlczsgc2VtdmVyLW1ham9yXG5cblxudmFyIHByb3BUeXBlcyA9IHtcbiAgY2hpbGRyZW46IF9wcm9wVHlwZXMyWydkZWZhdWx0J10ubm9kZSxcbiAgb25PdXRzaWRlQ2xpY2s6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uZnVuY1xufTtcblxudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgY2hpbGRyZW46IF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KCdzcGFuJywgbnVsbCksXG4gIG9uT3V0c2lkZUNsaWNrOiBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gb25PdXRzaWRlQ2xpY2soKSB7fVxuXG4gICAgcmV0dXJuIG9uT3V0c2lkZUNsaWNrO1xuICB9KClcbn07XG5cbnZhciBPdXRzaWRlQ2xpY2tIYW5kbGVyID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKE91dHNpZGVDbGlja0hhbmRsZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIE91dHNpZGVDbGlja0hhbmRsZXIocHJvcHMpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgT3V0c2lkZUNsaWNrSGFuZGxlcik7XG5cbiAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoT3V0c2lkZUNsaWNrSGFuZGxlci5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKE91dHNpZGVDbGlja0hhbmRsZXIpKS5jYWxsKHRoaXMsIHByb3BzKSk7XG5cbiAgICBfdGhpcy5vbk91dHNpZGVDbGljayA9IF90aGlzLm9uT3V0c2lkZUNsaWNrLmJpbmQoX3RoaXMpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhPdXRzaWRlQ2xpY2tIYW5kbGVyLCBbe1xuICAgIGtleTogJ2NvbXBvbmVudERpZE1vdW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICAgIC8vIGBjYXB0dXJlYCBmbGFnIGlzIHNldCB0byB0cnVlIHNvIHRoYXQgYSBgc3RvcFByb3BhZ2F0aW9uYCBpbiB0aGUgY2hpbGRyZW5cbiAgICAgICAgLy8gd2lsbCBub3QgcHJldmVudCBhbGwgb3V0c2lkZSBjbGljayBoYW5kbGVycyBmcm9tIGZpcmluZyAtIG1hamFcbiAgICAgICAgdGhpcy5jbGlja0hhbmRsZSA9ICgwLCBfY29uc29saWRhdGVkRXZlbnRzLmFkZEV2ZW50TGlzdGVuZXIpKGRvY3VtZW50LCAnY2xpY2snLCB0aGlzLm9uT3V0c2lkZUNsaWNrLCB7IGNhcHR1cmU6IHRydWUgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb21wb25lbnREaWRNb3VudDtcbiAgICB9KClcbiAgfSwge1xuICAgIGtleTogJ2NvbXBvbmVudFdpbGxVbm1vdW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICAgIGlmICh0aGlzLmNsaWNrSGFuZGxlKSAoMCwgX2NvbnNvbGlkYXRlZEV2ZW50cy5yZW1vdmVFdmVudExpc3RlbmVyKSh0aGlzLmNsaWNrSGFuZGxlKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbXBvbmVudFdpbGxVbm1vdW50O1xuICAgIH0oKVxuICB9LCB7XG4gICAga2V5OiAnb25PdXRzaWRlQ2xpY2snLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBvbk91dHNpZGVDbGljayhlKSB7XG4gICAgICAgIHZhciBpc0Rlc2NlbmRhbnRPZlJvb3QgPSB0aGlzLmNoaWxkTm9kZS5jb250YWlucyhlLnRhcmdldCk7XG4gICAgICAgIGlmICghaXNEZXNjZW5kYW50T2ZSb290KSB7XG4gICAgICAgICAgdGhpcy5wcm9wcy5vbk91dHNpZGVDbGljayhlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gb25PdXRzaWRlQ2xpY2s7XG4gICAgfSgpXG4gIH0sIHtcbiAgICBrZXk6ICdyZW5kZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICAgIHJldHVybiBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudCgnZGl2JywgeyByZWY6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGZ1bmN0aW9uIHJlZihfcmVmKSB7XG4gICAgICAgICAgICAgIF90aGlzMi5jaGlsZE5vZGUgPSBfcmVmO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gcmVmO1xuICAgICAgICAgIH0oKSB9LCB0aGlzLnByb3BzLmNoaWxkcmVuKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlbmRlcjtcbiAgICB9KClcbiAgfV0pO1xuXG4gIHJldHVybiBPdXRzaWRlQ2xpY2tIYW5kbGVyO1xufShfcmVhY3QyWydkZWZhdWx0J10uQ29tcG9uZW50KTtcblxuZXhwb3J0c1snZGVmYXVsdCddID0gT3V0c2lkZUNsaWNrSGFuZGxlcjtcblxuT3V0c2lkZUNsaWNrSGFuZGxlci5wcm9wVHlwZXMgPSBwcm9wVHlwZXM7XG5PdXRzaWRlQ2xpY2tIYW5kbGVyLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcblxuLyoqKi8gfSlcblxuLyoqKioqKi8gfSk7IiwiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IHRvTG9jYWxpemVkRGF0ZVN0cmluZztcblxudmFyIF9tb21lbnQgPSByZXF1aXJlKCdtb21lbnQnKTtcblxudmFyIF9tb21lbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfbW9tZW50KTtcblxudmFyIF90b01vbWVudE9iamVjdCA9IHJlcXVpcmUoJy4vdG9Nb21lbnRPYmplY3QnKTtcblxudmFyIF90b01vbWVudE9iamVjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90b01vbWVudE9iamVjdCk7XG5cbnZhciBfY29uc3RhbnRzID0gcmVxdWlyZSgnLi4vLi4vY29uc3RhbnRzJyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxuZnVuY3Rpb24gdG9Mb2NhbGl6ZWREYXRlU3RyaW5nKGRhdGUsIGN1cnJlbnRGb3JtYXQpIHtcbiAgdmFyIGRhdGVPYmogPSBfbW9tZW50MlsnZGVmYXVsdCddLmlzTW9tZW50KGRhdGUpID8gZGF0ZSA6ICgwLCBfdG9Nb21lbnRPYmplY3QyWydkZWZhdWx0J10pKGRhdGUsIGN1cnJlbnRGb3JtYXQpO1xuICBpZiAoIWRhdGVPYmopIHJldHVybiBudWxsO1xuXG4gIHJldHVybiBkYXRlT2JqLmZvcm1hdChfY29uc3RhbnRzLkRJU1BMQVlfRk9STUFUKTtcbn0iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHRoZVxuICogW2xhbmd1YWdlIHR5cGVdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1lY21hc2NyaXB0LWxhbmd1YWdlLXR5cGVzKVxuICogb2YgYE9iamVjdGAuIChlLmcuIGFycmF5cywgZnVuY3Rpb25zLCBvYmplY3RzLCByZWdleGVzLCBgbmV3IE51bWJlcigwKWAsIGFuZCBgbmV3IFN0cmluZygnJylgKVxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0KHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChfLm5vb3ApO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgKHR5cGUgPT0gJ29iamVjdCcgfHwgdHlwZSA9PSAnZnVuY3Rpb24nKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc09iamVjdDtcbiIsIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzWydkZWZhdWx0J10gPSBpc0RheVZpc2libGU7XG5cbnZhciBfaXNCZWZvcmVEYXkgPSByZXF1aXJlKCcuL2lzQmVmb3JlRGF5Jyk7XG5cbnZhciBfaXNCZWZvcmVEYXkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaXNCZWZvcmVEYXkpO1xuXG52YXIgX2lzQWZ0ZXJEYXkgPSByZXF1aXJlKCcuL2lzQWZ0ZXJEYXknKTtcblxudmFyIF9pc0FmdGVyRGF5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2lzQWZ0ZXJEYXkpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIGlzRGF5VmlzaWJsZShkYXksIG1vbnRoLCBudW1iZXJPZk1vbnRocywgZW5hYmxlT3V0c2lkZURheXMpIHtcbiAgdmFyIGZpcnN0RGF5T2ZGaXJzdE1vbnRoID0gbW9udGguY2xvbmUoKS5zdGFydE9mKCdtb250aCcpO1xuICBpZiAoZW5hYmxlT3V0c2lkZURheXMpIGZpcnN0RGF5T2ZGaXJzdE1vbnRoID0gZmlyc3REYXlPZkZpcnN0TW9udGguc3RhcnRPZignd2VlaycpO1xuICBpZiAoKDAsIF9pc0JlZm9yZURheTJbJ2RlZmF1bHQnXSkoZGF5LCBmaXJzdERheU9mRmlyc3RNb250aCkpIHJldHVybiBmYWxzZTtcblxuICB2YXIgbGFzdERheU9mTGFzdE1vbnRoID0gbW9udGguY2xvbmUoKS5hZGQobnVtYmVyT2ZNb250aHMgLSAxLCAnbW9udGhzJykuZW5kT2YoJ21vbnRoJyk7XG4gIGlmIChlbmFibGVPdXRzaWRlRGF5cykgbGFzdERheU9mTGFzdE1vbnRoID0gbGFzdERheU9mTGFzdE1vbnRoLmVuZE9mKCd3ZWVrJyk7XG4gIHJldHVybiAhKDAsIF9pc0FmdGVyRGF5MlsnZGVmYXVsdCddKShkYXksIGxhc3REYXlPZkxhc3RNb250aCk7XG59IiwibW9kdWxlLmV4cG9ydHMgPVxuLyoqKioqKi8gKGZ1bmN0aW9uKG1vZHVsZXMpIHsgLy8gd2VicGFja0Jvb3RzdHJhcFxuLyoqKioqKi8gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuLyoqKioqKi8gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuLyoqKioqKi8gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4vKioqKioqLyBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbi8qKioqKiovIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4vKioqKioqLyBcdFx0XHRpOiBtb2R1bGVJZCxcbi8qKioqKiovIFx0XHRcdGw6IGZhbHNlLFxuLyoqKioqKi8gXHRcdFx0ZXhwb3J0czoge31cbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbi8qKioqKiovIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuLyoqKioqKi8gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbi8qKioqKiovIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyBcdH1cbi8qKioqKiovXG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGlkZW50aXR5IGZ1bmN0aW9uIGZvciBjYWxsaW5nIGhhcm1vbnkgaW1wb3J0cyB3aXRoIHRoZSBjb3JyZWN0IGNvbnRleHRcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5pID0gZnVuY3Rpb24odmFsdWUpIHsgcmV0dXJuIHZhbHVlOyB9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuLyoqKioqKi8gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbi8qKioqKiovIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7XG4vKioqKioqLyBcdFx0XHRcdGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4vKioqKioqLyBcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG4vKioqKioqLyBcdFx0XHRcdGdldDogZ2V0dGVyXG4vKioqKioqLyBcdFx0XHR9KTtcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbi8qKioqKiovIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbi8qKioqKiovIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4vKioqKioqLyBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuLyoqKioqKi8gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbi8qKioqKiovIFx0XHRyZXR1cm4gZ2V0dGVyO1xuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8qKioqKiovIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gNjYpO1xuLyoqKioqKi8gfSlcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqKioqLyAoW1xuLyogMCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJyZWFjdFwiKTtcblxuLyoqKi8gfSksXG4vKiAxICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImFpcmJuYi1wcm9wLXR5cGVzXCIpO1xuXG4vKioqLyB9KSxcbi8qIDIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vZGVmYXVsdFBocmFzZXNcIik7XG5cbi8qKiovIH0pLFxuLyogMyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpO1xuXG4vKioqLyB9KSxcbi8qIDQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vY29uc3RhbnRzXCIpO1xuXG4vKioqLyB9KSxcbi8qIDUgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vdXRpbHMvZ2V0UGhyYXNlUHJvcFR5cGVzXCIpO1xuXG4vKioqLyB9KSxcbi8qIDYgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiY2xhc3NuYW1lc1wiKTtcblxuLyoqKi8gfSksXG4vKiA3ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIm1vbWVudFwiKTtcblxuLyoqKi8gfSksXG4vKiA4ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uL3NoYXBlcy9TY3JvbGxhYmxlT3JpZW50YXRpb25TaGFwZVwiKTtcblxuLyoqKi8gfSksXG4vKiA5ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImlzLXRvdWNoLWRldmljZVwiKTtcblxuLyoqKi8gfSksXG4vKiAxMCAqLyxcbi8qIDExICovLFxuLyogMTIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vc2hhcGVzL0RheU9mV2Vla1NoYXBlXCIpO1xuXG4vKioqLyB9KSxcbi8qIDEzICovLFxuLyogMTQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwicmVhY3QtYWRkb25zLXNoYWxsb3ctY29tcGFyZVwiKTtcblxuLyoqKi8gfSksXG4vKiAxNSAqLyxcbi8qIDE2ICovLFxuLyogMTcgKi8sXG4vKiAxOCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi91dGlscy9pc0RheVZpc2libGVcIik7XG5cbi8qKiovIH0pLFxuLyogMTkgKi8sXG4vKiAyMCAqLyxcbi8qIDIxICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4vT3V0c2lkZUNsaWNrSGFuZGxlclwiKTtcblxuLyoqKi8gfSksXG4vKiAyMiAqLyxcbi8qIDIzICovLFxuLyogMjQgKi8sXG4vKiAyNSAqLyxcbi8qIDI2ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uL3V0aWxzL2dldENhbGVuZGFyTW9udGhXaWR0aFwiKTtcblxuLyoqKi8gfSksXG4vKiAyNyAqLyxcbi8qIDI4ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uL3V0aWxzL2dldFRyYW5zZm9ybVN0eWxlc1wiKTtcblxuLyoqKi8gfSksXG4vKiAyOSAqLyxcbi8qIDMwICovLFxuLyogMzEgKi8sXG4vKiAzMiAqLyxcbi8qIDMzICovLFxuLyogMzQgKi8sXG4vKiAzNSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJsb2Rhc2gvdGhyb3R0bGVcIik7XG5cbi8qKiovIH0pLFxuLyogMzYgKi8sXG4vKiAzNyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJyZWFjdC1kb21cIik7XG5cbi8qKiovIH0pLFxuLyogMzggKi8sXG4vKiAzOSAqLyxcbi8qIDQwICovLFxuLyogNDEgKi8sXG4vKiA0MiAqLyxcbi8qIDQzICovLFxuLyogNDQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vdXRpbHMvZ2V0QWN0aXZlRWxlbWVudFwiKTtcblxuLyoqKi8gfSksXG4vKiA0NSAqLyxcbi8qIDQ2ICovLFxuLyogNDcgKi8sXG4vKiA0OCAqLyxcbi8qIDQ5ICovLFxuLyogNTAgKi8sXG4vKiA1MSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuL0NhbGVuZGFyTW9udGhHcmlkXCIpO1xuXG4vKioqLyB9KSxcbi8qIDUyICovLFxuLyogNTMgKi8sXG4vKiA1NCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuL0RheVBpY2tlcktleWJvYXJkU2hvcnRjdXRzXCIpO1xuXG4vKioqLyB9KSxcbi8qIDU1ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4vRGF5UGlja2VyTmF2aWdhdGlvblwiKTtcblxuLyoqKi8gfSksXG4vKiA1NiAqLyxcbi8qIDU3ICovLFxuLyogNTggKi8sXG4vKiA1OSAqLyxcbi8qIDYwICovLFxuLyogNjEgKi8sXG4vKiA2MiAqLyxcbi8qIDYzICovLFxuLyogNjQgKi8sXG4vKiA2NSAqLyxcbi8qIDY2ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdFByb3BzID0gdW5kZWZpbmVkO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO2Rlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7aWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gICAgfVxuICB9cmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgICBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO2lmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO3JldHVybiBDb25zdHJ1Y3RvcjtcbiAgfTtcbn0oKTtcblxuZXhwb3J0cy5jYWxjdWxhdGVEaW1lbnNpb24gPSBjYWxjdWxhdGVEaW1lbnNpb247XG5cbnZhciBfcmVhY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9wcm9wVHlwZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xuXG52YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG52YXIgX3JlYWN0QWRkb25zU2hhbGxvd0NvbXBhcmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE0KTtcblxudmFyIF9yZWFjdEFkZG9uc1NoYWxsb3dDb21wYXJlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0QWRkb25zU2hhbGxvd0NvbXBhcmUpO1xuXG52YXIgX3JlYWN0RG9tID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNyk7XG5cbnZhciBfcmVhY3REb20yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3REb20pO1xuXG52YXIgX2FpcmJuYlByb3BUeXBlcyA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG5cbnZhciBfbW9tZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3KTtcblxudmFyIF9tb21lbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfbW9tZW50KTtcblxudmFyIF9jbGFzc25hbWVzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KTtcblxudmFyIF9jbGFzc25hbWVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzbmFtZXMpO1xuXG52YXIgX3Rocm90dGxlID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNSk7XG5cbnZhciBfdGhyb3R0bGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdGhyb3R0bGUpO1xuXG52YXIgX2lzVG91Y2hEZXZpY2UgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkpO1xuXG52YXIgX2lzVG91Y2hEZXZpY2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaXNUb3VjaERldmljZSk7XG5cbnZhciBfZGVmYXVsdFBocmFzZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXG52YXIgX2dldFBocmFzZVByb3BUeXBlcyA9IF9fd2VicGFja19yZXF1aXJlX18oNSk7XG5cbnZhciBfZ2V0UGhyYXNlUHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldFBocmFzZVByb3BUeXBlcyk7XG5cbnZhciBfT3V0c2lkZUNsaWNrSGFuZGxlciA9IF9fd2VicGFja19yZXF1aXJlX18oMjEpO1xuXG52YXIgX091dHNpZGVDbGlja0hhbmRsZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfT3V0c2lkZUNsaWNrSGFuZGxlcik7XG5cbnZhciBfQ2FsZW5kYXJNb250aEdyaWQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUxKTtcblxudmFyIF9DYWxlbmRhck1vbnRoR3JpZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9DYWxlbmRhck1vbnRoR3JpZCk7XG5cbnZhciBfRGF5UGlja2VyTmF2aWdhdGlvbiA9IF9fd2VicGFja19yZXF1aXJlX18oNTUpO1xuXG52YXIgX0RheVBpY2tlck5hdmlnYXRpb24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfRGF5UGlja2VyTmF2aWdhdGlvbik7XG5cbnZhciBfRGF5UGlja2VyS2V5Ym9hcmRTaG9ydGN1dHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDU0KTtcblxudmFyIF9EYXlQaWNrZXJLZXlib2FyZFNob3J0Y3V0czIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9EYXlQaWNrZXJLZXlib2FyZFNob3J0Y3V0cyk7XG5cbnZhciBfZ2V0VHJhbnNmb3JtU3R5bGVzID0gX193ZWJwYWNrX3JlcXVpcmVfXygyOCk7XG5cbnZhciBfZ2V0VHJhbnNmb3JtU3R5bGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldFRyYW5zZm9ybVN0eWxlcyk7XG5cbnZhciBfZ2V0Q2FsZW5kYXJNb250aFdpZHRoID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNik7XG5cbnZhciBfZ2V0Q2FsZW5kYXJNb250aFdpZHRoMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldENhbGVuZGFyTW9udGhXaWR0aCk7XG5cbnZhciBfZ2V0QWN0aXZlRWxlbWVudCA9IF9fd2VicGFja19yZXF1aXJlX18oNDQpO1xuXG52YXIgX2dldEFjdGl2ZUVsZW1lbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0QWN0aXZlRWxlbWVudCk7XG5cbnZhciBfaXNEYXlWaXNpYmxlID0gX193ZWJwYWNrX3JlcXVpcmVfXygxOCk7XG5cbnZhciBfaXNEYXlWaXNpYmxlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2lzRGF5VmlzaWJsZSk7XG5cbnZhciBfU2Nyb2xsYWJsZU9yaWVudGF0aW9uU2hhcGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xuXG52YXIgX1Njcm9sbGFibGVPcmllbnRhdGlvblNoYXBlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1Njcm9sbGFibGVPcmllbnRhdGlvblNoYXBlKTtcblxudmFyIF9EYXlPZldlZWtTaGFwZSA9IF9fd2VicGFja19yZXF1aXJlX18oMTIpO1xuXG52YXIgX0RheU9mV2Vla1NoYXBlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0RheU9mV2Vla1NoYXBlKTtcblxudmFyIF9jb25zdGFudHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikge1xuICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9O1xufVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7XG4gIGlmICghc2VsZikge1xuICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgfXJldHVybiBjYWxsICYmICgodHlwZW9mIGNhbGwgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihjYWxsKSkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjtcbn1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArICh0eXBlb2Ygc3VwZXJDbGFzcyA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKHN1cGVyQ2xhc3MpKSk7XG4gIH1zdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pO2lmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcbn1cblxudmFyIE1PTlRIX1BBRERJTkcgPSAyMztcbnZhciBEQVlfUElDS0VSX1BBRERJTkcgPSA5O1xudmFyIFBSRVZfVFJBTlNJVElPTiA9ICdwcmV2JztcbnZhciBORVhUX1RSQU5TSVRJT04gPSAnbmV4dCc7XG5cbnZhciBwcm9wVHlwZXMgPSAoMCwgX2FpcmJuYlByb3BUeXBlcy5mb3JiaWRFeHRyYVByb3BzKSh7XG4gIC8vIGNhbGVuZGFyIHByZXNlbnRhdGlvbiBwcm9wc1xuICBlbmFibGVPdXRzaWRlRGF5czogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5ib29sLFxuICBudW1iZXJPZk1vbnRoczogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5udW1iZXIsXG4gIG9yaWVudGF0aW9uOiBfU2Nyb2xsYWJsZU9yaWVudGF0aW9uU2hhcGUyWydkZWZhdWx0J10sXG4gIHdpdGhQb3J0YWw6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uYm9vbCxcbiAgb25PdXRzaWRlQ2xpY2s6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uZnVuYyxcbiAgaGlkZGVuOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmJvb2wsXG4gIGluaXRpYWxWaXNpYmxlTW9udGg6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uZnVuYyxcbiAgZmlyc3REYXlPZldlZWs6IF9EYXlPZldlZWtTaGFwZTJbJ2RlZmF1bHQnXSxcbiAgcmVuZGVyQ2FsZW5kYXJJbmZvOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmZ1bmMsXG4gIGhpZGVLZXlib2FyZFNob3J0Y3V0c1BhbmVsOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmJvb2wsXG4gIGRheVNpemU6IF9haXJibmJQcm9wVHlwZXMubm9uTmVnYXRpdmVJbnRlZ2VyLFxuICBpc1JUTDogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5ib29sLFxuXG4gIC8vIG5hdmlnYXRpb24gcHJvcHNcbiAgbmF2UHJldjogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5ub2RlLFxuICBuYXZOZXh0OiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLm5vZGUsXG4gIG9uUHJldk1vbnRoQ2xpY2s6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uZnVuYyxcbiAgb25OZXh0TW9udGhDbGljazogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5mdW5jLFxuICBvbk11bHRpcGx5U2Nyb2xsYWJsZU1vbnRoczogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5mdW5jLCAvLyBWRVJUSUNBTF9TQ1JPTExBQkxFIGRheXBpY2tlcnMgb25seVxuXG4gIC8vIG1vbnRoIHByb3BzXG4gIHJlbmRlck1vbnRoOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmZ1bmMsXG5cbiAgLy8gZGF5IHByb3BzXG4gIG1vZGlmaWVyczogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5vYmplY3QsXG4gIHJlbmRlckRheTogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5mdW5jLFxuICBvbkRheUNsaWNrOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmZ1bmMsXG4gIG9uRGF5TW91c2VFbnRlcjogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5mdW5jLFxuICBvbkRheU1vdXNlTGVhdmU6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uZnVuYyxcblxuICAvLyBhY2Nlc3NpYmlsaXR5IHByb3BzXG4gIGlzRm9jdXNlZDogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5ib29sLFxuICBnZXRGaXJzdEZvY3VzYWJsZURheTogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5mdW5jLFxuICBvbkJsdXI6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uZnVuYyxcbiAgc2hvd0tleWJvYXJkU2hvcnRjdXRzOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmJvb2wsXG5cbiAgLy8gaW50ZXJuYXRpb25hbGl6YXRpb25cbiAgbW9udGhGb3JtYXQ6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uc3RyaW5nLFxuICBwaHJhc2VzOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLnNoYXBlKCgwLCBfZ2V0UGhyYXNlUHJvcFR5cGVzMlsnZGVmYXVsdCddKShfZGVmYXVsdFBocmFzZXMuRGF5UGlja2VyUGhyYXNlcykpXG59KTtcblxudmFyIGRlZmF1bHRQcm9wcyA9IGV4cG9ydHMuZGVmYXVsdFByb3BzID0ge1xuICAvLyBjYWxlbmRhciBwcmVzZW50YXRpb24gcHJvcHNcbiAgZW5hYmxlT3V0c2lkZURheXM6IGZhbHNlLFxuICBudW1iZXJPZk1vbnRoczogMixcbiAgb3JpZW50YXRpb246IF9jb25zdGFudHMuSE9SSVpPTlRBTF9PUklFTlRBVElPTixcbiAgd2l0aFBvcnRhbDogZmFsc2UsXG4gIG9uT3V0c2lkZUNsaWNrOiBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gb25PdXRzaWRlQ2xpY2soKSB7fVxuXG4gICAgcmV0dXJuIG9uT3V0c2lkZUNsaWNrO1xuICB9KCksXG5cbiAgaGlkZGVuOiBmYWxzZSxcbiAgaW5pdGlhbFZpc2libGVNb250aDogZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIGluaXRpYWxWaXNpYmxlTW9udGgoKSB7XG4gICAgICByZXR1cm4gKDAsIF9tb21lbnQyWydkZWZhdWx0J10pKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGluaXRpYWxWaXNpYmxlTW9udGg7XG4gIH0oKSxcbiAgZmlyc3REYXlPZldlZWs6IG51bGwsXG4gIHJlbmRlckNhbGVuZGFySW5mbzogbnVsbCxcbiAgaGlkZUtleWJvYXJkU2hvcnRjdXRzUGFuZWw6IGZhbHNlLFxuICBkYXlTaXplOiBfY29uc3RhbnRzLkRBWV9TSVpFLFxuICBpc1JUTDogZmFsc2UsXG5cbiAgLy8gbmF2aWdhdGlvbiBwcm9wc1xuICBuYXZQcmV2OiBudWxsLFxuICBuYXZOZXh0OiBudWxsLFxuICBvblByZXZNb250aENsaWNrOiBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gb25QcmV2TW9udGhDbGljaygpIHt9XG5cbiAgICByZXR1cm4gb25QcmV2TW9udGhDbGljaztcbiAgfSgpLFxuICBvbk5leHRNb250aENsaWNrOiBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gb25OZXh0TW9udGhDbGljaygpIHt9XG5cbiAgICByZXR1cm4gb25OZXh0TW9udGhDbGljaztcbiAgfSgpLFxuICBvbk11bHRpcGx5U2Nyb2xsYWJsZU1vbnRoczogZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIG9uTXVsdGlwbHlTY3JvbGxhYmxlTW9udGhzKCkge31cblxuICAgIHJldHVybiBvbk11bHRpcGx5U2Nyb2xsYWJsZU1vbnRocztcbiAgfSgpLFxuXG4gIC8vIG1vbnRoIHByb3BzXG4gIHJlbmRlck1vbnRoOiBudWxsLFxuXG4gIC8vIGRheSBwcm9wc1xuICBtb2RpZmllcnM6IHt9LFxuICByZW5kZXJEYXk6IG51bGwsXG4gIG9uRGF5Q2xpY2s6IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBvbkRheUNsaWNrKCkge31cblxuICAgIHJldHVybiBvbkRheUNsaWNrO1xuICB9KCksXG4gIG9uRGF5TW91c2VFbnRlcjogZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIG9uRGF5TW91c2VFbnRlcigpIHt9XG5cbiAgICByZXR1cm4gb25EYXlNb3VzZUVudGVyO1xuICB9KCksXG4gIG9uRGF5TW91c2VMZWF2ZTogZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIG9uRGF5TW91c2VMZWF2ZSgpIHt9XG5cbiAgICByZXR1cm4gb25EYXlNb3VzZUxlYXZlO1xuICB9KCksXG5cbiAgLy8gYWNjZXNzaWJpbGl0eSBwcm9wc1xuICBpc0ZvY3VzZWQ6IGZhbHNlLFxuICBnZXRGaXJzdEZvY3VzYWJsZURheTogbnVsbCxcbiAgb25CbHVyOiBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gb25CbHVyKCkge31cblxuICAgIHJldHVybiBvbkJsdXI7XG4gIH0oKSxcblxuICBzaG93S2V5Ym9hcmRTaG9ydGN1dHM6IGZhbHNlLFxuXG4gIC8vIGludGVybmF0aW9uYWxpemF0aW9uXG4gIG1vbnRoRm9ybWF0OiAnTU1NTSBZWVlZJyxcbiAgcGhyYXNlczogX2RlZmF1bHRQaHJhc2VzLkRheVBpY2tlclBocmFzZXNcbn07XG5cbmZ1bmN0aW9uIGFwcGx5VHJhbnNmb3JtU3R5bGVzKGVsLCB0cmFuc2Zvcm0pIHtcbiAgdmFyIG9wYWNpdHkgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6ICcnO1xuXG4gIHZhciB0cmFuc2Zvcm1TdHlsZXMgPSAoMCwgX2dldFRyYW5zZm9ybVN0eWxlczJbJ2RlZmF1bHQnXSkodHJhbnNmb3JtKTtcbiAgdHJhbnNmb3JtU3R5bGVzLm9wYWNpdHkgPSBvcGFjaXR5O1xuXG4gIE9iamVjdC5rZXlzKHRyYW5zZm9ybVN0eWxlcykuZm9yRWFjaChmdW5jdGlvbiAoc3R5bGVLZXkpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICBlbC5zdHlsZVtzdHlsZUtleV0gPSB0cmFuc2Zvcm1TdHlsZXNbc3R5bGVLZXldO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gY2FsY3VsYXRlRGltZW5zaW9uKGVsLCBheGlzKSB7XG4gIHZhciBib3JkZXJCb3ggPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IGZhbHNlO1xuICB2YXIgd2l0aE1hcmdpbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogZmFsc2U7XG5cbiAgaWYgKCFlbCkge1xuICAgIHJldHVybiAwO1xuICB9XG5cbiAgdmFyIGF4aXNTdGFydCA9IGF4aXMgPT09ICd3aWR0aCcgPyAnTGVmdCcgOiAnVG9wJztcbiAgdmFyIGF4aXNFbmQgPSBheGlzID09PSAnd2lkdGgnID8gJ1JpZ2h0JyA6ICdCb3R0b20nO1xuXG4gIC8vIE9ubHkgcmVhZCBzdHlsZXMgaWYgd2UgbmVlZCB0b1xuICB2YXIgc3R5bGUgPSAhYm9yZGVyQm94IHx8IHdpdGhNYXJnaW4gPyB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCkgOiBudWxsO1xuXG4gIC8vIE9mZnNldCBpbmNsdWRlcyBib3JkZXIgYW5kIHBhZGRpbmdcbiAgdmFyIG9mZnNldFdpZHRoID0gZWwub2Zmc2V0V2lkdGgsXG4gICAgICBvZmZzZXRIZWlnaHQgPSBlbC5vZmZzZXRIZWlnaHQ7XG5cbiAgdmFyIHNpemUgPSBheGlzID09PSAnd2lkdGgnID8gb2Zmc2V0V2lkdGggOiBvZmZzZXRIZWlnaHQ7XG5cbiAgLy8gR2V0IHRoZSBpbm5lciBzaXplXG4gIGlmICghYm9yZGVyQm94KSB7XG4gICAgc2l6ZSAtPSBwYXJzZUZsb2F0KHN0eWxlWydwYWRkaW5nJyArIGF4aXNTdGFydF0pICsgcGFyc2VGbG9hdChzdHlsZVsncGFkZGluZycgKyBheGlzRW5kXSkgKyBwYXJzZUZsb2F0KHN0eWxlWydib3JkZXInICsgYXhpc1N0YXJ0ICsgJ1dpZHRoJ10pICsgcGFyc2VGbG9hdChzdHlsZVsnYm9yZGVyJyArIGF4aXNFbmQgKyAnV2lkdGgnXSk7XG4gIH1cblxuICAvLyBBcHBseSBtYXJnaW5cbiAgaWYgKHdpdGhNYXJnaW4pIHtcbiAgICBzaXplICs9IHBhcnNlRmxvYXQoc3R5bGVbJ21hcmdpbicgKyBheGlzU3RhcnRdKSArIHBhcnNlRmxvYXQoc3R5bGVbJ21hcmdpbicgKyBheGlzRW5kXSk7XG4gIH1cblxuICByZXR1cm4gc2l6ZTtcbn1cblxuZnVuY3Rpb24gZ2V0TW9udGhIZWlnaHQoZWwpIHtcbiAgdmFyIGNhcHRpb24gPSBlbC5xdWVyeVNlbGVjdG9yKCcuanMtQ2FsZW5kYXJNb250aF9fY2FwdGlvbicpO1xuICB2YXIgZ3JpZCA9IGVsLnF1ZXJ5U2VsZWN0b3IoJy5qcy1DYWxlbmRhck1vbnRoX19ncmlkJyk7XG5cbiAgLy8gTmVlZCB0byBzZXBhcmF0ZSBvdXQgdGFibGUgY2hpbGRyZW4gZm9yIEZGXG4gIC8vIEFkZCBhbiBhZGRpdGlvbmFsICsxIGZvciB0aGUgYm9yZGVyXG4gIHJldHVybiBjYWxjdWxhdGVEaW1lbnNpb24oY2FwdGlvbiwgJ2hlaWdodCcsIHRydWUsIHRydWUpICsgY2FsY3VsYXRlRGltZW5zaW9uKGdyaWQsICdoZWlnaHQnKSArIDE7XG59XG5cbnZhciBEYXlQaWNrZXIgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoRGF5UGlja2VyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBEYXlQaWNrZXIocHJvcHMpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRGF5UGlja2VyKTtcblxuICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChEYXlQaWNrZXIuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihEYXlQaWNrZXIpKS5jYWxsKHRoaXMsIHByb3BzKSk7XG5cbiAgICB2YXIgY3VycmVudE1vbnRoID0gcHJvcHMuaGlkZGVuID8gKDAsIF9tb21lbnQyWydkZWZhdWx0J10pKCkgOiBwcm9wcy5pbml0aWFsVmlzaWJsZU1vbnRoKCk7XG5cbiAgICB2YXIgZm9jdXNlZERhdGUgPSBjdXJyZW50TW9udGguY2xvbmUoKS5zdGFydE9mKCdtb250aCcpO1xuICAgIGlmIChwcm9wcy5nZXRGaXJzdEZvY3VzYWJsZURheSkge1xuICAgICAgZm9jdXNlZERhdGUgPSBwcm9wcy5nZXRGaXJzdEZvY3VzYWJsZURheShjdXJyZW50TW9udGgpO1xuICAgIH1cblxuICAgIHZhciB0cmFuc2xhdGlvblZhbHVlID0gcHJvcHMuaXNSVEwgJiYgX3RoaXMuaXNIb3Jpem9udGFsKCkgPyAtKDAsIF9nZXRDYWxlbmRhck1vbnRoV2lkdGgyWydkZWZhdWx0J10pKHByb3BzLmRheVNpemUpIDogMDtcblxuICAgIF90aGlzLmhhc1NldEluaXRpYWxWaXNpYmxlTW9udGggPSAhcHJvcHMuaGlkZGVuO1xuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgY3VycmVudE1vbnRoOiBjdXJyZW50TW9udGgsXG4gICAgICBtb250aFRyYW5zaXRpb246IG51bGwsXG4gICAgICB0cmFuc2xhdGlvblZhbHVlOiB0cmFuc2xhdGlvblZhbHVlLFxuICAgICAgc2Nyb2xsYWJsZU1vbnRoTXVsdGlwbGU6IDEsXG4gICAgICBjYWxlbmRhck1vbnRoV2lkdGg6ICgwLCBfZ2V0Q2FsZW5kYXJNb250aFdpZHRoMlsnZGVmYXVsdCddKShwcm9wcy5kYXlTaXplKSxcbiAgICAgIGZvY3VzZWREYXRlOiAhcHJvcHMuaGlkZGVuIHx8IHByb3BzLmlzRm9jdXNlZCA/IGZvY3VzZWREYXRlIDogbnVsbCxcbiAgICAgIG5leHRGb2N1c2VkRGF0ZTogbnVsbCxcbiAgICAgIHNob3dLZXlib2FyZFNob3J0Y3V0czogcHJvcHMuc2hvd0tleWJvYXJkU2hvcnRjdXRzLFxuICAgICAgb25LZXlib2FyZFNob3J0Y3V0c1BhbmVsQ2xvc2U6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZnVuY3Rpb24gb25LZXlib2FyZFNob3J0Y3V0c1BhbmVsQ2xvc2UoKSB7fVxuXG4gICAgICAgIHJldHVybiBvbktleWJvYXJkU2hvcnRjdXRzUGFuZWxDbG9zZTtcbiAgICAgIH0oKSxcblxuICAgICAgaXNUb3VjaERldmljZTogKDAsIF9pc1RvdWNoRGV2aWNlMlsnZGVmYXVsdCddKSgpLFxuICAgICAgd2l0aE1vdXNlSW50ZXJhY3Rpb25zOiB0cnVlXG4gICAgfTtcblxuICAgIF90aGlzLm9uS2V5RG93biA9IF90aGlzLm9uS2V5RG93bi5iaW5kKF90aGlzKTtcbiAgICBfdGhpcy5vblByZXZNb250aENsaWNrID0gX3RoaXMub25QcmV2TW9udGhDbGljay5iaW5kKF90aGlzKTtcbiAgICBfdGhpcy5vbk5leHRNb250aENsaWNrID0gX3RoaXMub25OZXh0TW9udGhDbGljay5iaW5kKF90aGlzKTtcbiAgICBfdGhpcy5zZXRDYWxlbmRhck1vbnRoR3JpZFJlZiA9IF90aGlzLnNldENhbGVuZGFyTW9udGhHcmlkUmVmLmJpbmQoX3RoaXMpO1xuICAgIF90aGlzLm11bHRpcGx5U2Nyb2xsYWJsZU1vbnRocyA9IF90aGlzLm11bHRpcGx5U2Nyb2xsYWJsZU1vbnRocy5iaW5kKF90aGlzKTtcbiAgICBfdGhpcy51cGRhdGVTdGF0ZUFmdGVyTW9udGhUcmFuc2l0aW9uID0gX3RoaXMudXBkYXRlU3RhdGVBZnRlck1vbnRoVHJhbnNpdGlvbi5iaW5kKF90aGlzKTtcblxuICAgIF90aGlzLm9wZW5LZXlib2FyZFNob3J0Y3V0c1BhbmVsID0gX3RoaXMub3BlbktleWJvYXJkU2hvcnRjdXRzUGFuZWwuYmluZChfdGhpcyk7XG4gICAgX3RoaXMuY2xvc2VLZXlib2FyZFNob3J0Y3V0c1BhbmVsID0gX3RoaXMuY2xvc2VLZXlib2FyZFNob3J0Y3V0c1BhbmVsLmJpbmQoX3RoaXMpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhEYXlQaWNrZXIsIFt7XG4gICAga2V5OiAnY29tcG9uZW50RGlkTW91bnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGlzVG91Y2hEZXZpY2U6ICgwLCBfaXNUb3VjaERldmljZTJbJ2RlZmF1bHQnXSkoKSB9KTtcblxuICAgICAgICBpZiAodGhpcy5pc0hvcml6b250YWwoKSkge1xuICAgICAgICAgIHRoaXMuYWRqdXN0RGF5UGlja2VySGVpZ2h0KCk7XG4gICAgICAgICAgdGhpcy5pbml0aWFsaXplRGF5UGlja2VyV2lkdGgoKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29tcG9uZW50RGlkTW91bnQ7XG4gICAgfSgpXG4gIH0sIHtcbiAgICBrZXk6ICdjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgICAgdmFyIGhpZGRlbiA9IG5leHRQcm9wcy5oaWRkZW4sXG4gICAgICAgICAgICBpc0ZvY3VzZWQgPSBuZXh0UHJvcHMuaXNGb2N1c2VkLFxuICAgICAgICAgICAgc2hvd0tleWJvYXJkU2hvcnRjdXRzID0gbmV4dFByb3BzLnNob3dLZXlib2FyZFNob3J0Y3V0cyxcbiAgICAgICAgICAgIG9uQmx1ciA9IG5leHRQcm9wcy5vbkJsdXI7XG4gICAgICAgIHZhciBjdXJyZW50TW9udGggPSB0aGlzLnN0YXRlLmN1cnJlbnRNb250aDtcblxuICAgICAgICBpZiAoIWhpZGRlbikge1xuICAgICAgICAgIGlmICghdGhpcy5oYXNTZXRJbml0aWFsVmlzaWJsZU1vbnRoKSB7XG4gICAgICAgICAgICB0aGlzLmhhc1NldEluaXRpYWxWaXNpYmxlTW9udGggPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgIGN1cnJlbnRNb250aDogbmV4dFByb3BzLmluaXRpYWxWaXNpYmxlTW9udGgoKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKCF0aGlzLmRheVBpY2tlcldpZHRoICYmIHRoaXMuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgICAgICAgIHRoaXMuaW5pdGlhbGl6ZURheVBpY2tlcldpZHRoKCk7XG4gICAgICAgICAgICB0aGlzLmFkanVzdERheVBpY2tlckhlaWdodCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChuZXh0UHJvcHMuZGF5U2l6ZSAhPT0gdGhpcy5wcm9wcy5kYXlTaXplKSB7XG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBjYWxlbmRhck1vbnRoV2lkdGg6ICgwLCBfZ2V0Q2FsZW5kYXJNb250aFdpZHRoMlsnZGVmYXVsdCddKShuZXh0UHJvcHMuZGF5U2l6ZSlcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc0ZvY3VzZWQgIT09IHRoaXMucHJvcHMuaXNGb2N1c2VkKSB7XG4gICAgICAgICAgaWYgKGlzRm9jdXNlZCkge1xuICAgICAgICAgICAgdmFyIGZvY3VzZWREYXRlID0gdGhpcy5nZXRGb2N1c2VkRGF5KGN1cnJlbnRNb250aCk7XG5cbiAgICAgICAgICAgIHZhciBvbktleWJvYXJkU2hvcnRjdXRzUGFuZWxDbG9zZSA9IHRoaXMuc3RhdGUub25LZXlib2FyZFNob3J0Y3V0c1BhbmVsQ2xvc2U7XG4gICAgICAgICAgICBpZiAobmV4dFByb3BzLnNob3dLZXlib2FyZFNob3J0Y3V0cykge1xuICAgICAgICAgICAgICAvLyB0aGUgPyBzaG9ydGN1dCBjYW1lIGZyb20gdGhlIGlucHV0IGFuZCB3ZSBzaG91bGQgcmV0dXJuIGlucHV0IHRoZXJlIG9uY2UgaXQgaXMgY2xvc2VcbiAgICAgICAgICAgICAgb25LZXlib2FyZFNob3J0Y3V0c1BhbmVsQ2xvc2UgPSBvbkJsdXI7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICBzaG93S2V5Ym9hcmRTaG9ydGN1dHM6IHNob3dLZXlib2FyZFNob3J0Y3V0cyxcbiAgICAgICAgICAgICAgb25LZXlib2FyZFNob3J0Y3V0c1BhbmVsQ2xvc2U6IG9uS2V5Ym9hcmRTaG9ydGN1dHNQYW5lbENsb3NlLFxuICAgICAgICAgICAgICBmb2N1c2VkRGF0ZTogZm9jdXNlZERhdGUsXG4gICAgICAgICAgICAgIHdpdGhNb3VzZUludGVyYWN0aW9uczogZmFsc2VcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgZm9jdXNlZERhdGU6IG51bGwgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzO1xuICAgIH0oKVxuICB9LCB7XG4gICAga2V5OiAnc2hvdWxkQ29tcG9uZW50VXBkYXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gc2hvdWxkQ29tcG9uZW50VXBkYXRlKG5leHRQcm9wcywgbmV4dFN0YXRlKSB7XG4gICAgICAgIHJldHVybiAoMCwgX3JlYWN0QWRkb25zU2hhbGxvd0NvbXBhcmUyWydkZWZhdWx0J10pKHRoaXMsIG5leHRQcm9wcywgbmV4dFN0YXRlKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNob3VsZENvbXBvbmVudFVwZGF0ZTtcbiAgICB9KClcbiAgfSwge1xuICAgIGtleTogJ2NvbXBvbmVudERpZFVwZGF0ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMsIHByZXZTdGF0ZSkge1xuICAgICAgICB2YXIgX3N0YXRlID0gdGhpcy5zdGF0ZSxcbiAgICAgICAgICAgIG1vbnRoVHJhbnNpdGlvbiA9IF9zdGF0ZS5tb250aFRyYW5zaXRpb24sXG4gICAgICAgICAgICBjdXJyZW50TW9udGggPSBfc3RhdGUuY3VycmVudE1vbnRoLFxuICAgICAgICAgICAgZm9jdXNlZERhdGUgPSBfc3RhdGUuZm9jdXNlZERhdGU7XG5cbiAgICAgICAgaWYgKG1vbnRoVHJhbnNpdGlvbiB8fCAhY3VycmVudE1vbnRoLmlzU2FtZShwcmV2U3RhdGUuY3VycmVudE1vbnRoKSkge1xuICAgICAgICAgIGlmICh0aGlzLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICAgICAgICB0aGlzLmFkanVzdERheVBpY2tlckhlaWdodCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghcHJldlByb3BzLmlzRm9jdXNlZCAmJiB0aGlzLnByb3BzLmlzRm9jdXNlZCAmJiAhZm9jdXNlZERhdGUgfHwgIXByZXZQcm9wcy5zaG93S2V5Ym9hcmRTaG9ydGN1dHMgJiYgdGhpcy5wcm9wcy5zaG93S2V5Ym9hcmRTaG9ydGN1dHMpIHtcbiAgICAgICAgICB0aGlzLmNvbnRhaW5lci5mb2N1cygpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb21wb25lbnREaWRVcGRhdGU7XG4gICAgfSgpXG4gIH0sIHtcbiAgICBrZXk6ICdvbktleURvd24nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBvbktleURvd24oZSkge1xuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyB3aXRoTW91c2VJbnRlcmFjdGlvbnM6IGZhbHNlIH0pO1xuXG4gICAgICAgIHZhciBvbkJsdXIgPSB0aGlzLnByb3BzLm9uQmx1cjtcbiAgICAgICAgdmFyIF9zdGF0ZTIgPSB0aGlzLnN0YXRlLFxuICAgICAgICAgICAgZm9jdXNlZERhdGUgPSBfc3RhdGUyLmZvY3VzZWREYXRlLFxuICAgICAgICAgICAgc2hvd0tleWJvYXJkU2hvcnRjdXRzID0gX3N0YXRlMi5zaG93S2V5Ym9hcmRTaG9ydGN1dHM7XG5cbiAgICAgICAgaWYgKCFmb2N1c2VkRGF0ZSkgcmV0dXJuO1xuXG4gICAgICAgIHZhciBuZXdGb2N1c2VkRGF0ZSA9IGZvY3VzZWREYXRlLmNsb25lKCk7XG5cbiAgICAgICAgdmFyIGRpZFRyYW5zaXRpb25Nb250aCA9IGZhbHNlO1xuXG4gICAgICAgIC8vIGZvY3VzIG1pZ2h0IGJlIGFueXdoZXJlIHdoZW4gdGhlIGtleWJvYXJkIHNob3J0Y3V0cyBwYW5lbCBpcyBvcGVuZWQgc28gd2Ugd2FudCB0b1xuICAgICAgICAvLyByZXR1cm4gaXQgdG8gd2hlcmV2ZXIgaXQgd2FzIGJlZm9yZSB3aGVuIHRoZSBwYW5lbCB3YXMgb3BlbmVkXG4gICAgICAgIHZhciBhY3RpdmVFbGVtZW50ID0gKDAsIF9nZXRBY3RpdmVFbGVtZW50MlsnZGVmYXVsdCddKSgpO1xuICAgICAgICB2YXIgb25LZXlib2FyZFNob3J0Y3V0c1BhbmVsQ2xvc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZnVuY3Rpb24gb25LZXlib2FyZFNob3J0Y3V0c1BhbmVsQ2xvc2UoKSB7XG4gICAgICAgICAgICBpZiAoYWN0aXZlRWxlbWVudCkgYWN0aXZlRWxlbWVudC5mb2N1cygpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBvbktleWJvYXJkU2hvcnRjdXRzUGFuZWxDbG9zZTtcbiAgICAgICAgfSgpO1xuXG4gICAgICAgIHN3aXRjaCAoZS5rZXkpIHtcbiAgICAgICAgICBjYXNlICdBcnJvd1VwJzpcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIG5ld0ZvY3VzZWREYXRlLnN1YnRyYWN0KDEsICd3ZWVrJyk7XG4gICAgICAgICAgICBkaWRUcmFuc2l0aW9uTW9udGggPSB0aGlzLm1heWJlVHJhbnNpdGlvblByZXZNb250aChuZXdGb2N1c2VkRGF0ZSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICdBcnJvd0xlZnQnOlxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgbmV3Rm9jdXNlZERhdGUuc3VidHJhY3QoMSwgJ2RheScpO1xuICAgICAgICAgICAgZGlkVHJhbnNpdGlvbk1vbnRoID0gdGhpcy5tYXliZVRyYW5zaXRpb25QcmV2TW9udGgobmV3Rm9jdXNlZERhdGUpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnSG9tZSc6XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBuZXdGb2N1c2VkRGF0ZS5zdGFydE9mKCd3ZWVrJyk7XG4gICAgICAgICAgICBkaWRUcmFuc2l0aW9uTW9udGggPSB0aGlzLm1heWJlVHJhbnNpdGlvblByZXZNb250aChuZXdGb2N1c2VkRGF0ZSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICdQYWdlVXAnOlxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgbmV3Rm9jdXNlZERhdGUuc3VidHJhY3QoMSwgJ21vbnRoJyk7XG4gICAgICAgICAgICBkaWRUcmFuc2l0aW9uTW9udGggPSB0aGlzLm1heWJlVHJhbnNpdGlvblByZXZNb250aChuZXdGb2N1c2VkRGF0ZSk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgJ0Fycm93RG93bic6XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBuZXdGb2N1c2VkRGF0ZS5hZGQoMSwgJ3dlZWsnKTtcbiAgICAgICAgICAgIGRpZFRyYW5zaXRpb25Nb250aCA9IHRoaXMubWF5YmVUcmFuc2l0aW9uTmV4dE1vbnRoKG5ld0ZvY3VzZWREYXRlKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ0Fycm93UmlnaHQnOlxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgbmV3Rm9jdXNlZERhdGUuYWRkKDEsICdkYXknKTtcbiAgICAgICAgICAgIGRpZFRyYW5zaXRpb25Nb250aCA9IHRoaXMubWF5YmVUcmFuc2l0aW9uTmV4dE1vbnRoKG5ld0ZvY3VzZWREYXRlKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ0VuZCc6XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBuZXdGb2N1c2VkRGF0ZS5lbmRPZignd2VlaycpO1xuICAgICAgICAgICAgZGlkVHJhbnNpdGlvbk1vbnRoID0gdGhpcy5tYXliZVRyYW5zaXRpb25OZXh0TW9udGgobmV3Rm9jdXNlZERhdGUpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnUGFnZURvd24nOlxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgbmV3Rm9jdXNlZERhdGUuYWRkKDEsICdtb250aCcpO1xuICAgICAgICAgICAgZGlkVHJhbnNpdGlvbk1vbnRoID0gdGhpcy5tYXliZVRyYW5zaXRpb25OZXh0TW9udGgobmV3Rm9jdXNlZERhdGUpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlICc/JzpcbiAgICAgICAgICAgIHRoaXMub3BlbktleWJvYXJkU2hvcnRjdXRzUGFuZWwob25LZXlib2FyZFNob3J0Y3V0c1BhbmVsQ2xvc2UpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlICdFc2NhcGUnOlxuICAgICAgICAgICAgaWYgKHNob3dLZXlib2FyZFNob3J0Y3V0cykge1xuICAgICAgICAgICAgICB0aGlzLmNsb3NlS2V5Ym9hcmRTaG9ydGN1dHNQYW5lbCgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgb25CbHVyKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIElmIHRoZXJlIHdhcyBhIG1vbnRoIHRyYW5zaXRpb24sIGRvIG5vdCB1cGRhdGUgdGhlIGZvY3VzZWQgZGF0ZSB1bnRpbCB0aGUgdHJhbnNpdGlvbiBoYXNcbiAgICAgICAgLy8gY29tcGxldGVkLiBPdGhlcndpc2UsIGF0dGVtcHRpbmcgdG8gZm9jdXMgb24gYSBET00gbm9kZSBtYXkgaW50ZXJydXB0IHRoZSBDU1MgYW5pbWF0aW9uLiBJZlxuICAgICAgICAvLyBkaWRUcmFuc2l0aW9uTW9udGggaXMgdHJ1ZSwgdGhlIGZvY3VzZWREYXRlIGdldHMgdXBkYXRlZCBpbiAjdXBkYXRlU3RhdGVBZnRlck1vbnRoVHJhbnNpdGlvblxuICAgICAgICBpZiAoIWRpZFRyYW5zaXRpb25Nb250aCkge1xuICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgZm9jdXNlZERhdGU6IG5ld0ZvY3VzZWREYXRlXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG9uS2V5RG93bjtcbiAgICB9KClcbiAgfSwge1xuICAgIGtleTogJ29uUHJldk1vbnRoQ2xpY2snLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBvblByZXZNb250aENsaWNrKG5leHRGb2N1c2VkRGF0ZSwgZSkge1xuICAgICAgICB2YXIgaXNSVEwgPSB0aGlzLnByb3BzLmlzUlRMO1xuXG4gICAgICAgIGlmIChlKSBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgdmFyIHRyYW5zbGF0aW9uVmFsdWUgPSB0aGlzLmlzVmVydGljYWwoKSA/IHRoaXMuZ2V0TW9udGhIZWlnaHRCeUluZGV4KDApIDogdGhpcy5kYXlQaWNrZXJXaWR0aDtcblxuICAgICAgICBpZiAoaXNSVEwgJiYgdGhpcy5pc0hvcml6b250YWwoKSkge1xuICAgICAgICAgIHRyYW5zbGF0aW9uVmFsdWUgPSAtMiAqIHRoaXMuZGF5UGlja2VyV2lkdGg7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUaGUgZmlyc3QgQ2FsZW5kYXJNb250aCBpcyBhbHdheXMgcG9zaXRpb25lZCBhYnNvbHV0ZSBhdCB0b3A6IDAgb3IgbGVmdDogMFxuICAgICAgICAvLyBzbyB3ZSBuZWVkIHRvIHRyYW5zZm9ybSBpdCB0byB0aGUgYXBwcm9wcmlhdGUgbG9jYXRpb24gYmVmb3JlIHRoZSBhbmltYXRpb24uXG4gICAgICAgIC8vIFRoaXMgYmVoYXZpb3IgaXMgYmVjYXVzZSB3ZSB3b3VsZCBvdGhlcndpc2UgbmVlZCBhIGRvdWJsZS1yZW5kZXIgaW4gb3JkZXIgdG9cbiAgICAgICAgLy8gYWRqdXN0IHRoZSBjb250YWluZXIgcG9zaXRpb24gb25jZSB3ZSBoYWQgdGhlIGhlaWdodCB0aGUgZmlyc3QgY2FsZW5kYXJcbiAgICAgICAgLy8gKGllIGZpcnN0IGRyYXcgYWxsIHRoZSBjYWxlbmRhciwgdGhlbiBpbiBhIHNlY29uZCByZW5kZXIsIHVzZSB0aGUgZmlyc3QgY2FsZW5kYXInc1xuICAgICAgICAvLyBoZWlnaHQgdG8gcG9zaXRpb24gdGhlIGNvbnRhaW5lcikuIFZhcmlhYmxlIGNhbGVuZGFyIGhlaWdodHMsIGFtaXJpdGU/IDwzIE1hamFcbiAgICAgICAgdGhpcy50cmFuc2xhdGVGaXJzdERheVBpY2tlckZvckFuaW1hdGlvbih0cmFuc2xhdGlvblZhbHVlKTtcblxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBtb250aFRyYW5zaXRpb246IFBSRVZfVFJBTlNJVElPTixcbiAgICAgICAgICB0cmFuc2xhdGlvblZhbHVlOiB0cmFuc2xhdGlvblZhbHVlLFxuICAgICAgICAgIGZvY3VzZWREYXRlOiBudWxsLFxuICAgICAgICAgIG5leHRGb2N1c2VkRGF0ZTogbmV4dEZvY3VzZWREYXRlXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gb25QcmV2TW9udGhDbGljaztcbiAgICB9KClcbiAgfSwge1xuICAgIGtleTogJ29uTmV4dE1vbnRoQ2xpY2snLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBvbk5leHRNb250aENsaWNrKG5leHRGb2N1c2VkRGF0ZSwgZSkge1xuICAgICAgICB2YXIgaXNSVEwgPSB0aGlzLnByb3BzLmlzUlRMO1xuXG4gICAgICAgIGlmIChlKSBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgdmFyIHRyYW5zbGF0aW9uVmFsdWUgPSB0aGlzLmlzVmVydGljYWwoKSA/IC10aGlzLmdldE1vbnRoSGVpZ2h0QnlJbmRleCgxKSA6IC10aGlzLmRheVBpY2tlcldpZHRoO1xuXG4gICAgICAgIGlmIChpc1JUTCAmJiB0aGlzLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICAgICAgdHJhbnNsYXRpb25WYWx1ZSA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBtb250aFRyYW5zaXRpb246IE5FWFRfVFJBTlNJVElPTixcbiAgICAgICAgICB0cmFuc2xhdGlvblZhbHVlOiB0cmFuc2xhdGlvblZhbHVlLFxuICAgICAgICAgIGZvY3VzZWREYXRlOiBudWxsLFxuICAgICAgICAgIG5leHRGb2N1c2VkRGF0ZTogbmV4dEZvY3VzZWREYXRlXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gb25OZXh0TW9udGhDbGljaztcbiAgICB9KClcbiAgfSwge1xuICAgIGtleTogJ2dldEZvY3VzZWREYXknLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBnZXRGb2N1c2VkRGF5KG5ld01vbnRoKSB7XG4gICAgICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgICAgZ2V0Rmlyc3RGb2N1c2FibGVEYXkgPSBfcHJvcHMuZ2V0Rmlyc3RGb2N1c2FibGVEYXksXG4gICAgICAgICAgICBudW1iZXJPZk1vbnRocyA9IF9wcm9wcy5udW1iZXJPZk1vbnRocztcblxuICAgICAgICB2YXIgZm9jdXNlZERhdGUgPSB2b2lkIDA7XG4gICAgICAgIGlmIChnZXRGaXJzdEZvY3VzYWJsZURheSkge1xuICAgICAgICAgIGZvY3VzZWREYXRlID0gZ2V0Rmlyc3RGb2N1c2FibGVEYXkobmV3TW9udGgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG5ld01vbnRoICYmICghZm9jdXNlZERhdGUgfHwgISgwLCBfaXNEYXlWaXNpYmxlMlsnZGVmYXVsdCddKShmb2N1c2VkRGF0ZSwgbmV3TW9udGgsIG51bWJlck9mTW9udGhzKSkpIHtcbiAgICAgICAgICBmb2N1c2VkRGF0ZSA9IG5ld01vbnRoLmNsb25lKCkuc3RhcnRPZignbW9udGgnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmb2N1c2VkRGF0ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGdldEZvY3VzZWREYXk7XG4gICAgfSgpXG4gIH0sIHtcbiAgICBrZXk6ICdnZXRNb250aEhlaWdodEJ5SW5kZXgnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBnZXRNb250aEhlaWdodEJ5SW5kZXgoaSkge1xuICAgICAgICByZXR1cm4gZ2V0TW9udGhIZWlnaHQodGhpcy50cmFuc2l0aW9uQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoJy5DYWxlbmRhck1vbnRoJylbaV0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZ2V0TW9udGhIZWlnaHRCeUluZGV4O1xuICAgIH0oKVxuICB9LCB7XG4gICAga2V5OiAnc2V0Q2FsZW5kYXJNb250aEdyaWRSZWYnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBzZXRDYWxlbmRhck1vbnRoR3JpZFJlZihyZWYpIHtcbiAgICAgICAgdGhpcy5jYWxlbmRhck1vbnRoR3JpZCA9IHJlZjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNldENhbGVuZGFyTW9udGhHcmlkUmVmO1xuICAgIH0oKVxuICB9LCB7XG4gICAga2V5OiAnbWF5YmVUcmFuc2l0aW9uTmV4dE1vbnRoJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gbWF5YmVUcmFuc2l0aW9uTmV4dE1vbnRoKG5ld0ZvY3VzZWREYXRlKSB7XG4gICAgICAgIHZhciBudW1iZXJPZk1vbnRocyA9IHRoaXMucHJvcHMubnVtYmVyT2ZNb250aHM7XG4gICAgICAgIHZhciBfc3RhdGUzID0gdGhpcy5zdGF0ZSxcbiAgICAgICAgICAgIGN1cnJlbnRNb250aCA9IF9zdGF0ZTMuY3VycmVudE1vbnRoLFxuICAgICAgICAgICAgZm9jdXNlZERhdGUgPSBfc3RhdGUzLmZvY3VzZWREYXRlO1xuXG4gICAgICAgIHZhciBuZXdGb2N1c2VkRGF0ZU1vbnRoID0gbmV3Rm9jdXNlZERhdGUubW9udGgoKTtcbiAgICAgICAgdmFyIGZvY3VzZWREYXRlTW9udGggPSBmb2N1c2VkRGF0ZS5tb250aCgpO1xuICAgICAgICB2YXIgaXNOZXdGb2N1c2VkRGF0ZVZpc2libGUgPSAoMCwgX2lzRGF5VmlzaWJsZTJbJ2RlZmF1bHQnXSkobmV3Rm9jdXNlZERhdGUsIGN1cnJlbnRNb250aCwgbnVtYmVyT2ZNb250aHMpO1xuICAgICAgICBpZiAobmV3Rm9jdXNlZERhdGVNb250aCAhPT0gZm9jdXNlZERhdGVNb250aCAmJiAhaXNOZXdGb2N1c2VkRGF0ZVZpc2libGUpIHtcbiAgICAgICAgICB0aGlzLm9uTmV4dE1vbnRoQ2xpY2sobmV3Rm9jdXNlZERhdGUpO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbWF5YmVUcmFuc2l0aW9uTmV4dE1vbnRoO1xuICAgIH0oKVxuICB9LCB7XG4gICAga2V5OiAnbWF5YmVUcmFuc2l0aW9uUHJldk1vbnRoJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gbWF5YmVUcmFuc2l0aW9uUHJldk1vbnRoKG5ld0ZvY3VzZWREYXRlKSB7XG4gICAgICAgIHZhciBudW1iZXJPZk1vbnRocyA9IHRoaXMucHJvcHMubnVtYmVyT2ZNb250aHM7XG4gICAgICAgIHZhciBfc3RhdGU0ID0gdGhpcy5zdGF0ZSxcbiAgICAgICAgICAgIGN1cnJlbnRNb250aCA9IF9zdGF0ZTQuY3VycmVudE1vbnRoLFxuICAgICAgICAgICAgZm9jdXNlZERhdGUgPSBfc3RhdGU0LmZvY3VzZWREYXRlO1xuXG4gICAgICAgIHZhciBuZXdGb2N1c2VkRGF0ZU1vbnRoID0gbmV3Rm9jdXNlZERhdGUubW9udGgoKTtcbiAgICAgICAgdmFyIGZvY3VzZWREYXRlTW9udGggPSBmb2N1c2VkRGF0ZS5tb250aCgpO1xuICAgICAgICB2YXIgaXNOZXdGb2N1c2VkRGF0ZVZpc2libGUgPSAoMCwgX2lzRGF5VmlzaWJsZTJbJ2RlZmF1bHQnXSkobmV3Rm9jdXNlZERhdGUsIGN1cnJlbnRNb250aCwgbnVtYmVyT2ZNb250aHMpO1xuICAgICAgICBpZiAobmV3Rm9jdXNlZERhdGVNb250aCAhPT0gZm9jdXNlZERhdGVNb250aCAmJiAhaXNOZXdGb2N1c2VkRGF0ZVZpc2libGUpIHtcbiAgICAgICAgICB0aGlzLm9uUHJldk1vbnRoQ2xpY2sobmV3Rm9jdXNlZERhdGUpO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbWF5YmVUcmFuc2l0aW9uUHJldk1vbnRoO1xuICAgIH0oKVxuICB9LCB7XG4gICAga2V5OiAnbXVsdGlwbHlTY3JvbGxhYmxlTW9udGhzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gbXVsdGlwbHlTY3JvbGxhYmxlTW9udGhzKGUpIHtcbiAgICAgICAgdmFyIG9uTXVsdGlwbHlTY3JvbGxhYmxlTW9udGhzID0gdGhpcy5wcm9wcy5vbk11bHRpcGx5U2Nyb2xsYWJsZU1vbnRocztcblxuICAgICAgICBpZiAoZSkgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgIGlmIChvbk11bHRpcGx5U2Nyb2xsYWJsZU1vbnRocykgb25NdWx0aXBseVNjcm9sbGFibGVNb250aHMoZSk7XG5cbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgc2Nyb2xsYWJsZU1vbnRoTXVsdGlwbGU6IHRoaXMuc3RhdGUuc2Nyb2xsYWJsZU1vbnRoTXVsdGlwbGUgKyAxXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbXVsdGlwbHlTY3JvbGxhYmxlTW9udGhzO1xuICAgIH0oKVxuICB9LCB7XG4gICAga2V5OiAnaXNIb3Jpem9udGFsJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gaXNIb3Jpem9udGFsKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5vcmllbnRhdGlvbiA9PT0gX2NvbnN0YW50cy5IT1JJWk9OVEFMX09SSUVOVEFUSU9OO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gaXNIb3Jpem9udGFsO1xuICAgIH0oKVxuICB9LCB7XG4gICAga2V5OiAnaXNWZXJ0aWNhbCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIGlzVmVydGljYWwoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb3BzLm9yaWVudGF0aW9uID09PSBfY29uc3RhbnRzLlZFUlRJQ0FMX09SSUVOVEFUSU9OIHx8IHRoaXMucHJvcHMub3JpZW50YXRpb24gPT09IF9jb25zdGFudHMuVkVSVElDQUxfU0NST0xMQUJMRTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGlzVmVydGljYWw7XG4gICAgfSgpXG4gIH0sIHtcbiAgICBrZXk6ICdpbml0aWFsaXplRGF5UGlja2VyV2lkdGgnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBpbml0aWFsaXplRGF5UGlja2VyV2lkdGgoKSB7XG4gICAgICAgIGlmICh0aGlzLmNhbGVuZGFyTW9udGhHcmlkKSB7XG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L25vLWZpbmQtZG9tLW5vZGVcbiAgICAgICAgICB2YXIgY2FsZW5kYXJNb250aEdyaWRET01Ob2RlID0gX3JlYWN0RG9tMlsnZGVmYXVsdCddLmZpbmRET01Ob2RlKHRoaXMuY2FsZW5kYXJNb250aEdyaWQpO1xuICAgICAgICAgIGlmIChjYWxlbmRhck1vbnRoR3JpZERPTU5vZGUpIHtcbiAgICAgICAgICAgIHRoaXMuZGF5UGlja2VyV2lkdGggPSBjYWxjdWxhdGVEaW1lbnNpb24oY2FsZW5kYXJNb250aEdyaWRET01Ob2RlLnF1ZXJ5U2VsZWN0b3IoJy5DYWxlbmRhck1vbnRoJyksICd3aWR0aCcsIHRydWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gaW5pdGlhbGl6ZURheVBpY2tlcldpZHRoO1xuICAgIH0oKVxuICB9LCB7XG4gICAga2V5OiAndXBkYXRlU3RhdGVBZnRlck1vbnRoVHJhbnNpdGlvbicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIHVwZGF0ZVN0YXRlQWZ0ZXJNb250aFRyYW5zaXRpb24oKSB7XG4gICAgICAgIHZhciBfcHJvcHMyID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICAgIG9uUHJldk1vbnRoQ2xpY2sgPSBfcHJvcHMyLm9uUHJldk1vbnRoQ2xpY2ssXG4gICAgICAgICAgICBvbk5leHRNb250aENsaWNrID0gX3Byb3BzMi5vbk5leHRNb250aENsaWNrO1xuICAgICAgICB2YXIgX3N0YXRlNSA9IHRoaXMuc3RhdGUsXG4gICAgICAgICAgICBjdXJyZW50TW9udGggPSBfc3RhdGU1LmN1cnJlbnRNb250aCxcbiAgICAgICAgICAgIG1vbnRoVHJhbnNpdGlvbiA9IF9zdGF0ZTUubW9udGhUcmFuc2l0aW9uLFxuICAgICAgICAgICAgZm9jdXNlZERhdGUgPSBfc3RhdGU1LmZvY3VzZWREYXRlLFxuICAgICAgICAgICAgbmV4dEZvY3VzZWREYXRlID0gX3N0YXRlNS5uZXh0Rm9jdXNlZERhdGUsXG4gICAgICAgICAgICB3aXRoTW91c2VJbnRlcmFjdGlvbnMgPSBfc3RhdGU1LndpdGhNb3VzZUludGVyYWN0aW9ucztcblxuICAgICAgICBpZiAoIW1vbnRoVHJhbnNpdGlvbikgcmV0dXJuO1xuXG4gICAgICAgIHZhciBuZXdNb250aCA9IGN1cnJlbnRNb250aC5jbG9uZSgpO1xuICAgICAgICBpZiAobW9udGhUcmFuc2l0aW9uID09PSBQUkVWX1RSQU5TSVRJT04pIHtcbiAgICAgICAgICBpZiAob25QcmV2TW9udGhDbGljaykgb25QcmV2TW9udGhDbGljaygpO1xuICAgICAgICAgIG5ld01vbnRoLnN1YnRyYWN0KDEsICdtb250aCcpO1xuICAgICAgICB9IGVsc2UgaWYgKG1vbnRoVHJhbnNpdGlvbiA9PT0gTkVYVF9UUkFOU0lUSU9OKSB7XG4gICAgICAgICAgaWYgKG9uTmV4dE1vbnRoQ2xpY2spIG9uTmV4dE1vbnRoQ2xpY2soKTtcbiAgICAgICAgICBuZXdNb250aC5hZGQoMSwgJ21vbnRoJyk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbmV3Rm9jdXNlZERhdGUgPSBudWxsO1xuICAgICAgICBpZiAobmV4dEZvY3VzZWREYXRlKSB7XG4gICAgICAgICAgbmV3Rm9jdXNlZERhdGUgPSBuZXh0Rm9jdXNlZERhdGU7XG4gICAgICAgIH0gZWxzZSBpZiAoIWZvY3VzZWREYXRlICYmICF3aXRoTW91c2VJbnRlcmFjdGlvbnMpIHtcbiAgICAgICAgICBuZXdGb2N1c2VkRGF0ZSA9IHRoaXMuZ2V0Rm9jdXNlZERheShuZXdNb250aCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5jYWxlbmRhck1vbnRoR3JpZCkge1xuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9uby1maW5kLWRvbS1ub2RlXG4gICAgICAgICAgdmFyIGNhbGVuZGFyTW9udGhHcmlkRE9NTm9kZSA9IF9yZWFjdERvbTJbJ2RlZmF1bHQnXS5maW5kRE9NTm9kZSh0aGlzLmNhbGVuZGFyTW9udGhHcmlkKTtcbiAgICAgICAgICBpZiAoY2FsZW5kYXJNb250aEdyaWRET01Ob2RlKSB7XG4gICAgICAgICAgICAvLyBjbGVhciB0aGUgcHJldmlvdXMgdHJhbnNmb3Jtc1xuICAgICAgICAgICAgYXBwbHlUcmFuc2Zvcm1TdHlsZXMoY2FsZW5kYXJNb250aEdyaWRET01Ob2RlLnF1ZXJ5U2VsZWN0b3IoJy5DYWxlbmRhck1vbnRoJyksICdub25lJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgY3VycmVudE1vbnRoOiBuZXdNb250aCxcbiAgICAgICAgICBtb250aFRyYW5zaXRpb246IG51bGwsXG4gICAgICAgICAgdHJhbnNsYXRpb25WYWx1ZTogdGhpcy5wcm9wcy5pc1JUTCAmJiB0aGlzLmlzSG9yaXpvbnRhbCgpID8gLXRoaXMuZGF5UGlja2VyV2lkdGggOiAwLFxuICAgICAgICAgIG5leHRGb2N1c2VkRGF0ZTogbnVsbCxcbiAgICAgICAgICBmb2N1c2VkRGF0ZTogbmV3Rm9jdXNlZERhdGVcbiAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIC8vIHdlIGRvbid0IHdhbnQgdG8gZm9jdXMgb24gdGhlIHJlbGV2YW50IGNhbGVuZGFyIGRheSBhZnRlciBhIG1vbnRoIHRyYW5zaXRpb25cbiAgICAgICAgICAvLyBpZiB0aGUgdXNlciBpcyBuYXZpZ2F0aW5nIGFyb3VuZCB1c2luZyBhIG1vdXNlXG4gICAgICAgICAgaWYgKHdpdGhNb3VzZUludGVyYWN0aW9ucykge1xuICAgICAgICAgICAgdmFyIGFjdGl2ZUVsZW1lbnQgPSAoMCwgX2dldEFjdGl2ZUVsZW1lbnQyWydkZWZhdWx0J10pKCk7XG4gICAgICAgICAgICBpZiAoYWN0aXZlRWxlbWVudCAmJiBhY3RpdmVFbGVtZW50ICE9PSBkb2N1bWVudC5ib2R5KSB7XG4gICAgICAgICAgICAgIGFjdGl2ZUVsZW1lbnQuYmx1cigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB1cGRhdGVTdGF0ZUFmdGVyTW9udGhUcmFuc2l0aW9uO1xuICAgIH0oKVxuICB9LCB7XG4gICAga2V5OiAnYWRqdXN0RGF5UGlja2VySGVpZ2h0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gYWRqdXN0RGF5UGlja2VySGVpZ2h0KCkge1xuICAgICAgICB2YXIgaGVpZ2h0cyA9IFtdO1xuXG4gICAgICAgIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwodGhpcy50cmFuc2l0aW9uQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoJy5DYWxlbmRhck1vbnRoJyksIGZ1bmN0aW9uIChlbCkge1xuICAgICAgICAgIGlmIChlbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtdmlzaWJsZScpID09PSAndHJ1ZScpIHtcbiAgICAgICAgICAgIGhlaWdodHMucHVzaChnZXRNb250aEhlaWdodChlbCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgdmFyIG5ld01vbnRoSGVpZ2h0ID0gTWF0aC5tYXguYXBwbHkoTWF0aCwgaGVpZ2h0cykgKyBNT05USF9QQURESU5HO1xuXG4gICAgICAgIGlmIChuZXdNb250aEhlaWdodCAhPT0gY2FsY3VsYXRlRGltZW5zaW9uKHRoaXMudHJhbnNpdGlvbkNvbnRhaW5lciwgJ2hlaWdodCcpKSB7XG4gICAgICAgICAgdGhpcy5tb250aEhlaWdodCA9IG5ld01vbnRoSGVpZ2h0O1xuICAgICAgICAgIHRoaXMudHJhbnNpdGlvbkNvbnRhaW5lci5zdHlsZS5oZWlnaHQgPSBTdHJpbmcobmV3TW9udGhIZWlnaHQpICsgJ3B4JztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gYWRqdXN0RGF5UGlja2VySGVpZ2h0O1xuICAgIH0oKVxuICB9LCB7XG4gICAga2V5OiAndHJhbnNsYXRlRmlyc3REYXlQaWNrZXJGb3JBbmltYXRpb24nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiB0cmFuc2xhdGVGaXJzdERheVBpY2tlckZvckFuaW1hdGlvbih0cmFuc2xhdGlvblZhbHVlKSB7XG4gICAgICAgIHZhciBpc1JUTCA9IHRoaXMucHJvcHMuaXNSVEw7XG5cbiAgICAgICAgdmFyIGNvbnZlcnRlZFRyYW5zbGF0aW9uVmFsdWUgPSAtdHJhbnNsYXRpb25WYWx1ZTtcbiAgICAgICAgaWYgKGlzUlRMICYmIHRoaXMuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgICAgICB2YXIgcG9zaXRpdmVUcmFuc2xhdGlvblZhbHVlID0gTWF0aC5hYnModHJhbnNsYXRpb25WYWx1ZSArIHRoaXMuZGF5UGlja2VyV2lkdGgpO1xuICAgICAgICAgIGNvbnZlcnRlZFRyYW5zbGF0aW9uVmFsdWUgPSBwb3NpdGl2ZVRyYW5zbGF0aW9uVmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHRyYW5zZm9ybVR5cGUgPSB0aGlzLmlzVmVydGljYWwoKSA/ICd0cmFuc2xhdGVZJyA6ICd0cmFuc2xhdGVYJztcbiAgICAgICAgdmFyIHRyYW5zZm9ybVZhbHVlID0gdHJhbnNmb3JtVHlwZSArICcoJyArIFN0cmluZyhjb252ZXJ0ZWRUcmFuc2xhdGlvblZhbHVlKSArICdweCknO1xuXG4gICAgICAgIGFwcGx5VHJhbnNmb3JtU3R5bGVzKHRoaXMudHJhbnNpdGlvbkNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcuQ2FsZW5kYXJNb250aCcpLCB0cmFuc2Zvcm1WYWx1ZSwgMSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0cmFuc2xhdGVGaXJzdERheVBpY2tlckZvckFuaW1hdGlvbjtcbiAgICB9KClcbiAgfSwge1xuICAgIGtleTogJ29wZW5LZXlib2FyZFNob3J0Y3V0c1BhbmVsJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gb3BlbktleWJvYXJkU2hvcnRjdXRzUGFuZWwob25DbG9zZUNhbGxCYWNrKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIHNob3dLZXlib2FyZFNob3J0Y3V0czogdHJ1ZSxcbiAgICAgICAgICBvbktleWJvYXJkU2hvcnRjdXRzUGFuZWxDbG9zZTogb25DbG9zZUNhbGxCYWNrXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gb3BlbktleWJvYXJkU2hvcnRjdXRzUGFuZWw7XG4gICAgfSgpXG4gIH0sIHtcbiAgICBrZXk6ICdjbG9zZUtleWJvYXJkU2hvcnRjdXRzUGFuZWwnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBjbG9zZUtleWJvYXJkU2hvcnRjdXRzUGFuZWwoKSB7XG4gICAgICAgIHZhciBvbktleWJvYXJkU2hvcnRjdXRzUGFuZWxDbG9zZSA9IHRoaXMuc3RhdGUub25LZXlib2FyZFNob3J0Y3V0c1BhbmVsQ2xvc2U7XG5cbiAgICAgICAgaWYgKG9uS2V5Ym9hcmRTaG9ydGN1dHNQYW5lbENsb3NlKSB7XG4gICAgICAgICAgb25LZXlib2FyZFNob3J0Y3V0c1BhbmVsQ2xvc2UoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIG9uS2V5Ym9hcmRTaG9ydGN1dHNQYW5lbENsb3NlOiBudWxsLFxuICAgICAgICAgIHNob3dLZXlib2FyZFNob3J0Y3V0czogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjbG9zZUtleWJvYXJkU2hvcnRjdXRzUGFuZWw7XG4gICAgfSgpXG4gIH0sIHtcbiAgICBrZXk6ICdyZW5kZXJOYXZpZ2F0aW9uJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gcmVuZGVyTmF2aWdhdGlvbigpIHtcbiAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgICAgdmFyIF9wcm9wczMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgICAgbmF2UHJldiA9IF9wcm9wczMubmF2UHJldixcbiAgICAgICAgICAgIG5hdk5leHQgPSBfcHJvcHMzLm5hdk5leHQsXG4gICAgICAgICAgICBvcmllbnRhdGlvbiA9IF9wcm9wczMub3JpZW50YXRpb24sXG4gICAgICAgICAgICBwaHJhc2VzID0gX3Byb3BzMy5waHJhc2VzLFxuICAgICAgICAgICAgaXNSVEwgPSBfcHJvcHMzLmlzUlRMO1xuXG4gICAgICAgIHZhciBvbk5leHRNb250aENsaWNrID0gdm9pZCAwO1xuICAgICAgICBpZiAob3JpZW50YXRpb24gPT09IF9jb25zdGFudHMuVkVSVElDQUxfU0NST0xMQUJMRSkge1xuICAgICAgICAgIG9uTmV4dE1vbnRoQ2xpY2sgPSB0aGlzLm11bHRpcGx5U2Nyb2xsYWJsZU1vbnRocztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvbk5leHRNb250aENsaWNrID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZnVuY3Rpb24gb25OZXh0TW9udGhDbGljayhlKSB7XG4gICAgICAgICAgICAgIF90aGlzMi5vbk5leHRNb250aENsaWNrKG51bGwsIGUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gb25OZXh0TW9udGhDbGljaztcbiAgICAgICAgICB9KCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoX0RheVBpY2tlck5hdmlnYXRpb24yWydkZWZhdWx0J10sIHtcbiAgICAgICAgICBvblByZXZNb250aENsaWNrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBmdW5jdGlvbiBvblByZXZNb250aENsaWNrKGUpIHtcbiAgICAgICAgICAgICAgX3RoaXMyLm9uUHJldk1vbnRoQ2xpY2sobnVsbCwgZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBvblByZXZNb250aENsaWNrO1xuICAgICAgICAgIH0oKSxcbiAgICAgICAgICBvbk5leHRNb250aENsaWNrOiBvbk5leHRNb250aENsaWNrLFxuICAgICAgICAgIG5hdlByZXY6IG5hdlByZXYsXG4gICAgICAgICAgbmF2TmV4dDogbmF2TmV4dCxcbiAgICAgICAgICBvcmllbnRhdGlvbjogb3JpZW50YXRpb24sXG4gICAgICAgICAgcGhyYXNlczogcGhyYXNlcyxcbiAgICAgICAgICBpc1JUTDogaXNSVExcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZW5kZXJOYXZpZ2F0aW9uO1xuICAgIH0oKVxuICB9LCB7XG4gICAga2V5OiAncmVuZGVyV2Vla0hlYWRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIHJlbmRlcldlZWtIZWFkZXIoaW5kZXgpIHtcbiAgICAgICAgdmFyIF9wcm9wczQgPSB0aGlzLnByb3BzLFxuICAgICAgICAgICAgZGF5U2l6ZSA9IF9wcm9wczQuZGF5U2l6ZSxcbiAgICAgICAgICAgIG9yaWVudGF0aW9uID0gX3Byb3BzNC5vcmllbnRhdGlvbjtcbiAgICAgICAgdmFyIGNhbGVuZGFyTW9udGhXaWR0aCA9IHRoaXMuc3RhdGUuY2FsZW5kYXJNb250aFdpZHRoO1xuXG4gICAgICAgIHZhciB2ZXJ0aWNhbFNjcm9sbGFibGUgPSBvcmllbnRhdGlvbiA9PT0gX2NvbnN0YW50cy5WRVJUSUNBTF9TQ1JPTExBQkxFO1xuICAgICAgICB2YXIgaG9yaXpvbnRhbFN0eWxlID0ge1xuICAgICAgICAgIGxlZnQ6IGluZGV4ICogY2FsZW5kYXJNb250aFdpZHRoXG4gICAgICAgIH07XG4gICAgICAgIHZhciB2ZXJ0aWNhbFN0eWxlID0ge1xuICAgICAgICAgIG1hcmdpbkxlZnQ6IC1jYWxlbmRhck1vbnRoV2lkdGggLyAyXG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIHN0eWxlID0ge307IC8vIG5vIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSB2ZXJ0aWNhbC1zY3JvbGxhYmxlIG9yaWVudGF0aW9uXG4gICAgICAgIGlmICh0aGlzLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICAgICAgc3R5bGUgPSBob3Jpem9udGFsU3R5bGU7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5pc1ZlcnRpY2FsKCkgJiYgIXZlcnRpY2FsU2Nyb2xsYWJsZSkge1xuICAgICAgICAgIHN0eWxlID0gdmVydGljYWxTdHlsZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBmaXJzdERheU9mV2VlayA9IHRoaXMucHJvcHMuZmlyc3REYXlPZldlZWs7XG5cbiAgICAgICAgaWYgKGZpcnN0RGF5T2ZXZWVrID09IG51bGwpIHtcbiAgICAgICAgICBmaXJzdERheU9mV2VlayA9IF9tb21lbnQyWydkZWZhdWx0J10ubG9jYWxlRGF0YSgpLmZpcnN0RGF5T2ZXZWVrKCk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaGVhZGVyID0gW107XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNzsgaSArPSAxKSB7XG4gICAgICAgICAgaGVhZGVyLnB1c2goX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoJ2xpJywgeyBrZXk6IGksIHN0eWxlOiB7IHdpZHRoOiBkYXlTaXplIH0gfSwgX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoJ3NtYWxsJywgbnVsbCwgKDAsIF9tb21lbnQyWydkZWZhdWx0J10pKCkuZGF5KChpICsgZmlyc3REYXlPZldlZWspICUgNykuZm9ybWF0KCdkZCcpKSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KCdkaXYnLCB7XG4gICAgICAgICAgY2xhc3NOYW1lOiAnRGF5UGlja2VyX193ZWVrLWhlYWRlcicsXG4gICAgICAgICAga2V5OiAnd2Vlay0nICsgU3RyaW5nKGluZGV4KSxcbiAgICAgICAgICBzdHlsZTogc3R5bGVcbiAgICAgICAgfSwgX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoJ3VsJywgbnVsbCwgaGVhZGVyKSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZW5kZXJXZWVrSGVhZGVyO1xuICAgIH0oKVxuICB9LCB7XG4gICAga2V5OiAncmVuZGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgICB2YXIgX3N0YXRlNiA9IHRoaXMuc3RhdGUsXG4gICAgICAgICAgICBjYWxlbmRhck1vbnRoV2lkdGggPSBfc3RhdGU2LmNhbGVuZGFyTW9udGhXaWR0aCxcbiAgICAgICAgICAgIGN1cnJlbnRNb250aCA9IF9zdGF0ZTYuY3VycmVudE1vbnRoLFxuICAgICAgICAgICAgbW9udGhUcmFuc2l0aW9uID0gX3N0YXRlNi5tb250aFRyYW5zaXRpb24sXG4gICAgICAgICAgICB0cmFuc2xhdGlvblZhbHVlID0gX3N0YXRlNi50cmFuc2xhdGlvblZhbHVlLFxuICAgICAgICAgICAgc2Nyb2xsYWJsZU1vbnRoTXVsdGlwbGUgPSBfc3RhdGU2LnNjcm9sbGFibGVNb250aE11bHRpcGxlLFxuICAgICAgICAgICAgZm9jdXNlZERhdGUgPSBfc3RhdGU2LmZvY3VzZWREYXRlLFxuICAgICAgICAgICAgc2hvd0tleWJvYXJkU2hvcnRjdXRzID0gX3N0YXRlNi5zaG93S2V5Ym9hcmRTaG9ydGN1dHMsXG4gICAgICAgICAgICBpc1RvdWNoID0gX3N0YXRlNi5pc1RvdWNoRGV2aWNlO1xuICAgICAgICB2YXIgX3Byb3BzNSA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgICBlbmFibGVPdXRzaWRlRGF5cyA9IF9wcm9wczUuZW5hYmxlT3V0c2lkZURheXMsXG4gICAgICAgICAgICBudW1iZXJPZk1vbnRocyA9IF9wcm9wczUubnVtYmVyT2ZNb250aHMsXG4gICAgICAgICAgICBvcmllbnRhdGlvbiA9IF9wcm9wczUub3JpZW50YXRpb24sXG4gICAgICAgICAgICBtb2RpZmllcnMgPSBfcHJvcHM1Lm1vZGlmaWVycyxcbiAgICAgICAgICAgIHdpdGhQb3J0YWwgPSBfcHJvcHM1LndpdGhQb3J0YWwsXG4gICAgICAgICAgICBvbkRheUNsaWNrID0gX3Byb3BzNS5vbkRheUNsaWNrLFxuICAgICAgICAgICAgb25EYXlNb3VzZUVudGVyID0gX3Byb3BzNS5vbkRheU1vdXNlRW50ZXIsXG4gICAgICAgICAgICBvbkRheU1vdXNlTGVhdmUgPSBfcHJvcHM1Lm9uRGF5TW91c2VMZWF2ZSxcbiAgICAgICAgICAgIGZpcnN0RGF5T2ZXZWVrID0gX3Byb3BzNS5maXJzdERheU9mV2VlayxcbiAgICAgICAgICAgIHJlbmRlck1vbnRoID0gX3Byb3BzNS5yZW5kZXJNb250aCxcbiAgICAgICAgICAgIHJlbmRlckRheSA9IF9wcm9wczUucmVuZGVyRGF5LFxuICAgICAgICAgICAgcmVuZGVyQ2FsZW5kYXJJbmZvID0gX3Byb3BzNS5yZW5kZXJDYWxlbmRhckluZm8sXG4gICAgICAgICAgICBoaWRlS2V5Ym9hcmRTaG9ydGN1dHNQYW5lbCA9IF9wcm9wczUuaGlkZUtleWJvYXJkU2hvcnRjdXRzUGFuZWwsXG4gICAgICAgICAgICBvbk91dHNpZGVDbGljayA9IF9wcm9wczUub25PdXRzaWRlQ2xpY2ssXG4gICAgICAgICAgICBtb250aEZvcm1hdCA9IF9wcm9wczUubW9udGhGb3JtYXQsXG4gICAgICAgICAgICBkYXlTaXplID0gX3Byb3BzNS5kYXlTaXplLFxuICAgICAgICAgICAgaXNGb2N1c2VkID0gX3Byb3BzNS5pc0ZvY3VzZWQsXG4gICAgICAgICAgICBwaHJhc2VzID0gX3Byb3BzNS5waHJhc2VzO1xuXG4gICAgICAgIHZhciBudW1PZldlZWtIZWFkZXJzID0gdGhpcy5pc1ZlcnRpY2FsKCkgPyAxIDogbnVtYmVyT2ZNb250aHM7XG4gICAgICAgIHZhciB3ZWVrSGVhZGVycyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG51bU9mV2Vla0hlYWRlcnM7IGkgKz0gMSkge1xuICAgICAgICAgIHdlZWtIZWFkZXJzLnB1c2godGhpcy5yZW5kZXJXZWVrSGVhZGVyKGkpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBmaXJzdFZpc2libGVNb250aEluZGV4ID0gMTtcbiAgICAgICAgaWYgKG1vbnRoVHJhbnNpdGlvbiA9PT0gUFJFVl9UUkFOU0lUSU9OKSB7XG4gICAgICAgICAgZmlyc3RWaXNpYmxlTW9udGhJbmRleCAtPSAxO1xuICAgICAgICB9IGVsc2UgaWYgKG1vbnRoVHJhbnNpdGlvbiA9PT0gTkVYVF9UUkFOU0lUSU9OKSB7XG4gICAgICAgICAgZmlyc3RWaXNpYmxlTW9udGhJbmRleCArPSAxO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHZlcnRpY2FsU2Nyb2xsYWJsZSA9IHRoaXMucHJvcHMub3JpZW50YXRpb24gPT09IF9jb25zdGFudHMuVkVSVElDQUxfU0NST0xMQUJMRTtcbiAgICAgICAgaWYgKHZlcnRpY2FsU2Nyb2xsYWJsZSkgZmlyc3RWaXNpYmxlTW9udGhJbmRleCA9IDA7XG5cbiAgICAgICAgdmFyIGRheVBpY2tlckNsYXNzTmFtZXMgPSAoMCwgX2NsYXNzbmFtZXMyWydkZWZhdWx0J10pKCdEYXlQaWNrZXInLCB7XG4gICAgICAgICAgJ0RheVBpY2tlci0taG9yaXpvbnRhbCc6IHRoaXMuaXNIb3Jpem9udGFsKCksXG4gICAgICAgICAgJ0RheVBpY2tlci0tdmVydGljYWwnOiB0aGlzLmlzVmVydGljYWwoKSxcbiAgICAgICAgICAnRGF5UGlja2VyLS12ZXJ0aWNhbC1zY3JvbGxhYmxlJzogdmVydGljYWxTY3JvbGxhYmxlLFxuICAgICAgICAgICdEYXlQaWNrZXItLXBvcnRhbCc6IHdpdGhQb3J0YWxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdmFyIHRyYW5zaXRpb25Db250YWluZXJDbGFzc2VzID0gKDAsIF9jbGFzc25hbWVzMlsnZGVmYXVsdCddKSgndHJhbnNpdGlvbi1jb250YWluZXInLCB7XG4gICAgICAgICAgJ3RyYW5zaXRpb24tY29udGFpbmVyLS1ob3Jpem9udGFsJzogdGhpcy5pc0hvcml6b250YWwoKSxcbiAgICAgICAgICAndHJhbnNpdGlvbi1jb250YWluZXItLXZlcnRpY2FsJzogdGhpcy5pc1ZlcnRpY2FsKClcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdmFyIGhvcml6b250YWxXaWR0aCA9IGNhbGVuZGFyTW9udGhXaWR0aCAqIG51bWJlck9mTW9udGhzICsgMiAqIERBWV9QSUNLRVJfUEFERElORztcblxuICAgICAgICAvLyB0aGlzIGlzIGEga2luZCBvZiBtYWRlLXVwIHZhbHVlIHRoYXQgZ2VuZXJhbGx5IGxvb2tzIGdvb2QuIHdlJ2xsXG4gICAgICAgIC8vIHByb2JhYmx5IHdhbnQgdG8gbGV0IHRoZSB1c2VyIHNldCB0aGlzIGV4cGxpY2l0bHkuXG4gICAgICAgIHZhciB2ZXJ0aWNhbEhlaWdodCA9IDEuNzUgKiBjYWxlbmRhck1vbnRoV2lkdGg7XG5cbiAgICAgICAgdmFyIGRheVBpY2tlclN0eWxlID0ge1xuICAgICAgICAgIHdpZHRoOiB0aGlzLmlzSG9yaXpvbnRhbCgpICYmIGhvcml6b250YWxXaWR0aCxcblxuICAgICAgICAgIC8vIFRoZXNlIHZhbHVlcyBhcmUgdG8gY2VudGVyIHRoZSBkYXRlcGlja2VyIChhcHByb3hpbWF0ZWx5KSBvbiB0aGUgcGFnZVxuICAgICAgICAgIG1hcmdpbkxlZnQ6IHRoaXMuaXNIb3Jpem9udGFsKCkgJiYgd2l0aFBvcnRhbCAmJiAtaG9yaXpvbnRhbFdpZHRoIC8gMixcbiAgICAgICAgICBtYXJnaW5Ub3A6IHRoaXMuaXNIb3Jpem9udGFsKCkgJiYgd2l0aFBvcnRhbCAmJiAtY2FsZW5kYXJNb250aFdpZHRoIC8gMlxuICAgICAgICB9O1xuXG4gICAgICAgIHZhciB0cmFuc2l0aW9uQ29udGFpbmVyU3R5bGUgPSB7XG4gICAgICAgICAgd2lkdGg6IHRoaXMuaXNIb3Jpem9udGFsKCkgJiYgaG9yaXpvbnRhbFdpZHRoLFxuICAgICAgICAgIGhlaWdodDogdGhpcy5pc1ZlcnRpY2FsKCkgJiYgIXZlcnRpY2FsU2Nyb2xsYWJsZSAmJiAhd2l0aFBvcnRhbCAmJiB2ZXJ0aWNhbEhlaWdodFxuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBpc0NhbGVuZGFyTW9udGhHcmlkQW5pbWF0aW5nID0gbW9udGhUcmFuc2l0aW9uICE9PSBudWxsO1xuICAgICAgICB2YXIgdHJhbnNmb3JtVHlwZSA9IHRoaXMuaXNWZXJ0aWNhbCgpID8gJ3RyYW5zbGF0ZVknIDogJ3RyYW5zbGF0ZVgnO1xuICAgICAgICB2YXIgdHJhbnNmb3JtVmFsdWUgPSB0cmFuc2Zvcm1UeXBlICsgJygnICsgU3RyaW5nKHRyYW5zbGF0aW9uVmFsdWUpICsgJ3B4KSc7XG5cbiAgICAgICAgdmFyIHNob3VsZEZvY3VzRGF0ZSA9ICFpc0NhbGVuZGFyTW9udGhHcmlkQW5pbWF0aW5nICYmIGlzRm9jdXNlZDtcblxuICAgICAgICB2YXIga2V5Ym9hcmRTaG9ydGN1dEJ1dHRvbkxvY2F0aW9uID0gX0RheVBpY2tlcktleWJvYXJkU2hvcnRjdXRzLkJPVFRPTV9SSUdIVDtcbiAgICAgICAgaWYgKHRoaXMuaXNWZXJ0aWNhbCgpKSB7XG4gICAgICAgICAga2V5Ym9hcmRTaG9ydGN1dEJ1dHRvbkxvY2F0aW9uID0gd2l0aFBvcnRhbCA/IF9EYXlQaWNrZXJLZXlib2FyZFNob3J0Y3V0cy5UT1BfTEVGVCA6IF9EYXlQaWNrZXJLZXlib2FyZFNob3J0Y3V0cy5UT1BfUklHSFQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHtcbiAgICAgICAgICBjbGFzc05hbWU6IGRheVBpY2tlckNsYXNzTmFtZXMsXG4gICAgICAgICAgc3R5bGU6IGRheVBpY2tlclN0eWxlXG4gICAgICAgIH0sIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KF9PdXRzaWRlQ2xpY2tIYW5kbGVyMlsnZGVmYXVsdCddLCB7IG9uT3V0c2lkZUNsaWNrOiBvbk91dHNpZGVDbGljayB9LCBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudCgnZGl2Jywge1xuICAgICAgICAgIGNsYXNzTmFtZTogJ0RheVBpY2tlcl9fd2Vlay1oZWFkZXJzJyxcbiAgICAgICAgICAnYXJpYS1oaWRkZW4nOiAndHJ1ZScsXG4gICAgICAgICAgcm9sZTogJ3ByZXNlbnRhdGlvbidcbiAgICAgICAgfSwgd2Vla0hlYWRlcnMpLCBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudCgnZGl2JywgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGpzeC1hMTF5L25vLW5vbmludGVyYWN0aXZlLWVsZW1lbnQtaW50ZXJhY3Rpb25zXG4gICAgICAgICAgY2xhc3NOYW1lOiAnRGF5UGlja2VyX19mb2N1cy1yZWdpb24nLFxuICAgICAgICAgIHJlZjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZnVuY3Rpb24gcmVmKF9yZWYyKSB7XG4gICAgICAgICAgICAgIF90aGlzMy5jb250YWluZXIgPSBfcmVmMjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHJlZjtcbiAgICAgICAgICB9KCksXG4gICAgICAgICAgb25DbGljazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZnVuY3Rpb24gb25DbGljayhlKSB7XG4gICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBvbkNsaWNrO1xuICAgICAgICAgIH0oKSxcbiAgICAgICAgICBvbktleURvd246ICgwLCBfdGhyb3R0bGUyWydkZWZhdWx0J10pKHRoaXMub25LZXlEb3duLCAzMDApLFxuICAgICAgICAgIG9uTW91c2VVcDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZnVuY3Rpb24gb25Nb3VzZVVwKCkge1xuICAgICAgICAgICAgICBfdGhpczMuc2V0U3RhdGUoeyB3aXRoTW91c2VJbnRlcmFjdGlvbnM6IHRydWUgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBvbk1vdXNlVXA7XG4gICAgICAgICAgfSgpLFxuICAgICAgICAgIHJvbGU6ICdyZWdpb24nLFxuICAgICAgICAgIHRhYkluZGV4OiAtMVxuICAgICAgICB9LCAhdmVydGljYWxTY3JvbGxhYmxlICYmIHRoaXMucmVuZGVyTmF2aWdhdGlvbigpLCBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudCgnZGl2Jywge1xuICAgICAgICAgIGNsYXNzTmFtZTogdHJhbnNpdGlvbkNvbnRhaW5lckNsYXNzZXMsXG4gICAgICAgICAgcmVmOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBmdW5jdGlvbiByZWYoX3JlZikge1xuICAgICAgICAgICAgICBfdGhpczMudHJhbnNpdGlvbkNvbnRhaW5lciA9IF9yZWY7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiByZWY7XG4gICAgICAgICAgfSgpLFxuICAgICAgICAgIHN0eWxlOiB0cmFuc2l0aW9uQ29udGFpbmVyU3R5bGVcbiAgICAgICAgfSwgX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoX0NhbGVuZGFyTW9udGhHcmlkMlsnZGVmYXVsdCddLCB7XG4gICAgICAgICAgcmVmOiB0aGlzLnNldENhbGVuZGFyTW9udGhHcmlkUmVmLFxuICAgICAgICAgIHRyYW5zZm9ybVZhbHVlOiB0cmFuc2Zvcm1WYWx1ZSxcbiAgICAgICAgICBlbmFibGVPdXRzaWRlRGF5czogZW5hYmxlT3V0c2lkZURheXMsXG4gICAgICAgICAgZmlyc3RWaXNpYmxlTW9udGhJbmRleDogZmlyc3RWaXNpYmxlTW9udGhJbmRleCxcbiAgICAgICAgICBpbml0aWFsTW9udGg6IGN1cnJlbnRNb250aCxcbiAgICAgICAgICBpc0FuaW1hdGluZzogaXNDYWxlbmRhck1vbnRoR3JpZEFuaW1hdGluZyxcbiAgICAgICAgICBtb2RpZmllcnM6IG1vZGlmaWVycyxcbiAgICAgICAgICBvcmllbnRhdGlvbjogb3JpZW50YXRpb24sXG4gICAgICAgICAgbnVtYmVyT2ZNb250aHM6IG51bWJlck9mTW9udGhzICogc2Nyb2xsYWJsZU1vbnRoTXVsdGlwbGUsXG4gICAgICAgICAgb25EYXlDbGljazogb25EYXlDbGljayxcbiAgICAgICAgICBvbkRheU1vdXNlRW50ZXI6IG9uRGF5TW91c2VFbnRlcixcbiAgICAgICAgICBvbkRheU1vdXNlTGVhdmU6IG9uRGF5TW91c2VMZWF2ZSxcbiAgICAgICAgICByZW5kZXJNb250aDogcmVuZGVyTW9udGgsXG4gICAgICAgICAgcmVuZGVyRGF5OiByZW5kZXJEYXksXG4gICAgICAgICAgb25Nb250aFRyYW5zaXRpb25FbmQ6IHRoaXMudXBkYXRlU3RhdGVBZnRlck1vbnRoVHJhbnNpdGlvbixcbiAgICAgICAgICBtb250aEZvcm1hdDogbW9udGhGb3JtYXQsXG4gICAgICAgICAgZGF5U2l6ZTogZGF5U2l6ZSxcbiAgICAgICAgICBmaXJzdERheU9mV2VlazogZmlyc3REYXlPZldlZWssXG4gICAgICAgICAgaXNGb2N1c2VkOiBzaG91bGRGb2N1c0RhdGUsXG4gICAgICAgICAgZm9jdXNlZERhdGU6IGZvY3VzZWREYXRlLFxuICAgICAgICAgIHBocmFzZXM6IHBocmFzZXNcbiAgICAgICAgfSksIHZlcnRpY2FsU2Nyb2xsYWJsZSAmJiB0aGlzLnJlbmRlck5hdmlnYXRpb24oKSksICFpc1RvdWNoICYmICFoaWRlS2V5Ym9hcmRTaG9ydGN1dHNQYW5lbCAmJiBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChfRGF5UGlja2VyS2V5Ym9hcmRTaG9ydGN1dHMyWydkZWZhdWx0J10sIHtcbiAgICAgICAgICBibG9jazogdGhpcy5pc1ZlcnRpY2FsKCkgJiYgIXdpdGhQb3J0YWwsXG4gICAgICAgICAgYnV0dG9uTG9jYXRpb246IGtleWJvYXJkU2hvcnRjdXRCdXR0b25Mb2NhdGlvbixcbiAgICAgICAgICBzaG93S2V5Ym9hcmRTaG9ydGN1dHNQYW5lbDogc2hvd0tleWJvYXJkU2hvcnRjdXRzLFxuICAgICAgICAgIG9wZW5LZXlib2FyZFNob3J0Y3V0c1BhbmVsOiB0aGlzLm9wZW5LZXlib2FyZFNob3J0Y3V0c1BhbmVsLFxuICAgICAgICAgIGNsb3NlS2V5Ym9hcmRTaG9ydGN1dHNQYW5lbDogdGhpcy5jbG9zZUtleWJvYXJkU2hvcnRjdXRzUGFuZWwsXG4gICAgICAgICAgcGhyYXNlczogcGhyYXNlc1xuICAgICAgICB9KSksIHJlbmRlckNhbGVuZGFySW5mbyAmJiByZW5kZXJDYWxlbmRhckluZm8oKSkpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVuZGVyO1xuICAgIH0oKVxuICB9XSk7XG5cbiAgcmV0dXJuIERheVBpY2tlcjtcbn0oX3JlYWN0MlsnZGVmYXVsdCddLkNvbXBvbmVudCk7XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IERheVBpY2tlcjtcblxuRGF5UGlja2VyLnByb3BUeXBlcyA9IHByb3BUeXBlcztcbkRheVBpY2tlci5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5cbi8qKiovIH0pXG4vKioqKioqLyBdKTsiLCIndXNlIHN0cmljdCc7XG5cbi8qIGdsb2JhbHNcblx0QXRvbWljcyxcblx0U2hhcmVkQXJyYXlCdWZmZXIsXG4qL1xuXG52YXIgdW5kZWZpbmVkO1xuXG52YXIgJFR5cGVFcnJvciA9IFR5cGVFcnJvcjtcblxudmFyICRnT1BEID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbmlmICgkZ09QRCkge1xuXHR0cnkge1xuXHRcdCRnT1BEKHt9LCAnJyk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHQkZ09QRCA9IG51bGw7IC8vIHRoaXMgaXMgSUUgOCwgd2hpY2ggaGFzIGEgYnJva2VuIGdPUERcblx0fVxufVxuXG52YXIgdGhyb3dUeXBlRXJyb3IgPSBmdW5jdGlvbiAoKSB7IHRocm93IG5ldyAkVHlwZUVycm9yKCk7IH07XG52YXIgVGhyb3dUeXBlRXJyb3IgPSAkZ09QRFxuXHQ/IChmdW5jdGlvbiAoKSB7XG5cdFx0dHJ5IHtcblx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtZXhwcmVzc2lvbnMsIG5vLWNhbGxlciwgbm8tcmVzdHJpY3RlZC1wcm9wZXJ0aWVzXG5cdFx0XHRhcmd1bWVudHMuY2FsbGVlOyAvLyBJRSA4IGRvZXMgbm90IHRocm93IGhlcmVcblx0XHRcdHJldHVybiB0aHJvd1R5cGVFcnJvcjtcblx0XHR9IGNhdGNoIChjYWxsZWVUaHJvd3MpIHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdC8vIElFIDggdGhyb3dzIG9uIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYXJndW1lbnRzLCAnJylcblx0XHRcdFx0cmV0dXJuICRnT1BEKGFyZ3VtZW50cywgJ2NhbGxlZScpLmdldDtcblx0XHRcdH0gY2F0Y2ggKGdPUER0aHJvd3MpIHtcblx0XHRcdFx0cmV0dXJuIHRocm93VHlwZUVycm9yO1xuXHRcdFx0fVxuXHRcdH1cblx0fSgpKVxuXHQ6IHRocm93VHlwZUVycm9yO1xuXG52YXIgaGFzU3ltYm9scyA9IHJlcXVpcmUoJ2hhcy1zeW1ib2xzJykoKTtcblxudmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uICh4KSB7IHJldHVybiB4Ll9fcHJvdG9fXzsgfTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1wcm90b1xuXG52YXIgZ2VuZXJhdG9yOyAvLyA9IGZ1bmN0aW9uICogKCkge307XG52YXIgZ2VuZXJhdG9yRnVuY3Rpb24gPSBnZW5lcmF0b3IgPyBnZXRQcm90byhnZW5lcmF0b3IpIDogdW5kZWZpbmVkO1xudmFyIGFzeW5jRm47IC8vIGFzeW5jIGZ1bmN0aW9uKCkge307XG52YXIgYXN5bmNGdW5jdGlvbiA9IGFzeW5jRm4gPyBhc3luY0ZuLmNvbnN0cnVjdG9yIDogdW5kZWZpbmVkO1xudmFyIGFzeW5jR2VuOyAvLyBhc3luYyBmdW5jdGlvbiAqICgpIHt9O1xudmFyIGFzeW5jR2VuRnVuY3Rpb24gPSBhc3luY0dlbiA/IGdldFByb3RvKGFzeW5jR2VuKSA6IHVuZGVmaW5lZDtcbnZhciBhc3luY0dlbkl0ZXJhdG9yID0gYXN5bmNHZW4gPyBhc3luY0dlbigpIDogdW5kZWZpbmVkO1xuXG52YXIgVHlwZWRBcnJheSA9IHR5cGVvZiBVaW50OEFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IGdldFByb3RvKFVpbnQ4QXJyYXkpO1xuXG52YXIgSU5UUklOU0lDUyA9IHtcblx0JyVBcnJheSUnOiBBcnJheSxcblx0JyVBcnJheUJ1ZmZlciUnOiB0eXBlb2YgQXJyYXlCdWZmZXIgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogQXJyYXlCdWZmZXIsXG5cdCclQXJyYXlCdWZmZXJQcm90b3R5cGUlJzogdHlwZW9mIEFycmF5QnVmZmVyID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEFycmF5QnVmZmVyLnByb3RvdHlwZSxcblx0JyVBcnJheUl0ZXJhdG9yUHJvdG90eXBlJSc6IGhhc1N5bWJvbHMgPyBnZXRQcm90byhbXVtTeW1ib2wuaXRlcmF0b3JdKCkpIDogdW5kZWZpbmVkLFxuXHQnJUFycmF5UHJvdG90eXBlJSc6IEFycmF5LnByb3RvdHlwZSxcblx0JyVBcnJheVByb3RvX2VudHJpZXMlJzogQXJyYXkucHJvdG90eXBlLmVudHJpZXMsXG5cdCclQXJyYXlQcm90b19mb3JFYWNoJSc6IEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLFxuXHQnJUFycmF5UHJvdG9fa2V5cyUnOiBBcnJheS5wcm90b3R5cGUua2V5cyxcblx0JyVBcnJheVByb3RvX3ZhbHVlcyUnOiBBcnJheS5wcm90b3R5cGUudmFsdWVzLFxuXHQnJUFzeW5jRnJvbVN5bmNJdGVyYXRvclByb3RvdHlwZSUnOiB1bmRlZmluZWQsXG5cdCclQXN5bmNGdW5jdGlvbiUnOiBhc3luY0Z1bmN0aW9uLFxuXHQnJUFzeW5jRnVuY3Rpb25Qcm90b3R5cGUlJzogYXN5bmNGdW5jdGlvbiA/IGFzeW5jRnVuY3Rpb24ucHJvdG90eXBlIDogdW5kZWZpbmVkLFxuXHQnJUFzeW5jR2VuZXJhdG9yJSc6IGFzeW5jR2VuID8gZ2V0UHJvdG8oYXN5bmNHZW5JdGVyYXRvcikgOiB1bmRlZmluZWQsXG5cdCclQXN5bmNHZW5lcmF0b3JGdW5jdGlvbiUnOiBhc3luY0dlbkZ1bmN0aW9uLFxuXHQnJUFzeW5jR2VuZXJhdG9yUHJvdG90eXBlJSc6IGFzeW5jR2VuRnVuY3Rpb24gPyBhc3luY0dlbkZ1bmN0aW9uLnByb3RvdHlwZSA6IHVuZGVmaW5lZCxcblx0JyVBc3luY0l0ZXJhdG9yUHJvdG90eXBlJSc6IGFzeW5jR2VuSXRlcmF0b3IgJiYgaGFzU3ltYm9scyAmJiBTeW1ib2wuYXN5bmNJdGVyYXRvciA/IGFzeW5jR2VuSXRlcmF0b3JbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCkgOiB1bmRlZmluZWQsXG5cdCclQXRvbWljcyUnOiB0eXBlb2YgQXRvbWljcyA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBBdG9taWNzLFxuXHQnJUJvb2xlYW4lJzogQm9vbGVhbixcblx0JyVCb29sZWFuUHJvdG90eXBlJSc6IEJvb2xlYW4ucHJvdG90eXBlLFxuXHQnJURhdGFWaWV3JSc6IHR5cGVvZiBEYXRhVmlldyA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBEYXRhVmlldyxcblx0JyVEYXRhVmlld1Byb3RvdHlwZSUnOiB0eXBlb2YgRGF0YVZpZXcgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogRGF0YVZpZXcucHJvdG90eXBlLFxuXHQnJURhdGUlJzogRGF0ZSxcblx0JyVEYXRlUHJvdG90eXBlJSc6IERhdGUucHJvdG90eXBlLFxuXHQnJWRlY29kZVVSSSUnOiBkZWNvZGVVUkksXG5cdCclZGVjb2RlVVJJQ29tcG9uZW50JSc6IGRlY29kZVVSSUNvbXBvbmVudCxcblx0JyVlbmNvZGVVUkklJzogZW5jb2RlVVJJLFxuXHQnJWVuY29kZVVSSUNvbXBvbmVudCUnOiBlbmNvZGVVUklDb21wb25lbnQsXG5cdCclRXJyb3IlJzogRXJyb3IsXG5cdCclRXJyb3JQcm90b3R5cGUlJzogRXJyb3IucHJvdG90eXBlLFxuXHQnJWV2YWwlJzogZXZhbCwgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1ldmFsXG5cdCclRXZhbEVycm9yJSc6IEV2YWxFcnJvcixcblx0JyVFdmFsRXJyb3JQcm90b3R5cGUlJzogRXZhbEVycm9yLnByb3RvdHlwZSxcblx0JyVGbG9hdDMyQXJyYXklJzogdHlwZW9mIEZsb2F0MzJBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBGbG9hdDMyQXJyYXksXG5cdCclRmxvYXQzMkFycmF5UHJvdG90eXBlJSc6IHR5cGVvZiBGbG9hdDMyQXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogRmxvYXQzMkFycmF5LnByb3RvdHlwZSxcblx0JyVGbG9hdDY0QXJyYXklJzogdHlwZW9mIEZsb2F0NjRBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBGbG9hdDY0QXJyYXksXG5cdCclRmxvYXQ2NEFycmF5UHJvdG90eXBlJSc6IHR5cGVvZiBGbG9hdDY0QXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogRmxvYXQ2NEFycmF5LnByb3RvdHlwZSxcblx0JyVGdW5jdGlvbiUnOiBGdW5jdGlvbixcblx0JyVGdW5jdGlvblByb3RvdHlwZSUnOiBGdW5jdGlvbi5wcm90b3R5cGUsXG5cdCclR2VuZXJhdG9yJSc6IGdlbmVyYXRvciA/IGdldFByb3RvKGdlbmVyYXRvcigpKSA6IHVuZGVmaW5lZCxcblx0JyVHZW5lcmF0b3JGdW5jdGlvbiUnOiBnZW5lcmF0b3JGdW5jdGlvbixcblx0JyVHZW5lcmF0b3JQcm90b3R5cGUlJzogZ2VuZXJhdG9yRnVuY3Rpb24gPyBnZW5lcmF0b3JGdW5jdGlvbi5wcm90b3R5cGUgOiB1bmRlZmluZWQsXG5cdCclSW50OEFycmF5JSc6IHR5cGVvZiBJbnQ4QXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogSW50OEFycmF5LFxuXHQnJUludDhBcnJheVByb3RvdHlwZSUnOiB0eXBlb2YgSW50OEFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEludDhBcnJheS5wcm90b3R5cGUsXG5cdCclSW50MTZBcnJheSUnOiB0eXBlb2YgSW50MTZBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBJbnQxNkFycmF5LFxuXHQnJUludDE2QXJyYXlQcm90b3R5cGUlJzogdHlwZW9mIEludDE2QXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogSW50OEFycmF5LnByb3RvdHlwZSxcblx0JyVJbnQzMkFycmF5JSc6IHR5cGVvZiBJbnQzMkFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEludDMyQXJyYXksXG5cdCclSW50MzJBcnJheVByb3RvdHlwZSUnOiB0eXBlb2YgSW50MzJBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBJbnQzMkFycmF5LnByb3RvdHlwZSxcblx0JyVpc0Zpbml0ZSUnOiBpc0Zpbml0ZSxcblx0JyVpc05hTiUnOiBpc05hTixcblx0JyVJdGVyYXRvclByb3RvdHlwZSUnOiBoYXNTeW1ib2xzID8gZ2V0UHJvdG8oZ2V0UHJvdG8oW11bU3ltYm9sLml0ZXJhdG9yXSgpKSkgOiB1bmRlZmluZWQsXG5cdCclSlNPTiUnOiB0eXBlb2YgSlNPTiA9PT0gJ29iamVjdCcgPyBKU09OIDogdW5kZWZpbmVkLFxuXHQnJUpTT05QYXJzZSUnOiB0eXBlb2YgSlNPTiA9PT0gJ29iamVjdCcgPyBKU09OLnBhcnNlIDogdW5kZWZpbmVkLFxuXHQnJU1hcCUnOiB0eXBlb2YgTWFwID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IE1hcCxcblx0JyVNYXBJdGVyYXRvclByb3RvdHlwZSUnOiB0eXBlb2YgTWFwID09PSAndW5kZWZpbmVkJyB8fCAhaGFzU3ltYm9scyA/IHVuZGVmaW5lZCA6IGdldFByb3RvKG5ldyBNYXAoKVtTeW1ib2wuaXRlcmF0b3JdKCkpLFxuXHQnJU1hcFByb3RvdHlwZSUnOiB0eXBlb2YgTWFwID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IE1hcC5wcm90b3R5cGUsXG5cdCclTWF0aCUnOiBNYXRoLFxuXHQnJU51bWJlciUnOiBOdW1iZXIsXG5cdCclTnVtYmVyUHJvdG90eXBlJSc6IE51bWJlci5wcm90b3R5cGUsXG5cdCclT2JqZWN0JSc6IE9iamVjdCxcblx0JyVPYmplY3RQcm90b3R5cGUlJzogT2JqZWN0LnByb3RvdHlwZSxcblx0JyVPYmpQcm90b190b1N0cmluZyUnOiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLFxuXHQnJU9ialByb3RvX3ZhbHVlT2YlJzogT2JqZWN0LnByb3RvdHlwZS52YWx1ZU9mLFxuXHQnJXBhcnNlRmxvYXQlJzogcGFyc2VGbG9hdCxcblx0JyVwYXJzZUludCUnOiBwYXJzZUludCxcblx0JyVQcm9taXNlJSc6IHR5cGVvZiBQcm9taXNlID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFByb21pc2UsXG5cdCclUHJvbWlzZVByb3RvdHlwZSUnOiB0eXBlb2YgUHJvbWlzZSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBQcm9taXNlLnByb3RvdHlwZSxcblx0JyVQcm9taXNlUHJvdG9fdGhlbiUnOiB0eXBlb2YgUHJvbWlzZSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBQcm9taXNlLnByb3RvdHlwZS50aGVuLFxuXHQnJVByb21pc2VfYWxsJSc6IHR5cGVvZiBQcm9taXNlID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFByb21pc2UuYWxsLFxuXHQnJVByb21pc2VfcmVqZWN0JSc6IHR5cGVvZiBQcm9taXNlID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFByb21pc2UucmVqZWN0LFxuXHQnJVByb21pc2VfcmVzb2x2ZSUnOiB0eXBlb2YgUHJvbWlzZSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBQcm9taXNlLnJlc29sdmUsXG5cdCclUHJveHklJzogdHlwZW9mIFByb3h5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFByb3h5LFxuXHQnJVJhbmdlRXJyb3IlJzogUmFuZ2VFcnJvcixcblx0JyVSYW5nZUVycm9yUHJvdG90eXBlJSc6IFJhbmdlRXJyb3IucHJvdG90eXBlLFxuXHQnJVJlZmVyZW5jZUVycm9yJSc6IFJlZmVyZW5jZUVycm9yLFxuXHQnJVJlZmVyZW5jZUVycm9yUHJvdG90eXBlJSc6IFJlZmVyZW5jZUVycm9yLnByb3RvdHlwZSxcblx0JyVSZWZsZWN0JSc6IHR5cGVvZiBSZWZsZWN0ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFJlZmxlY3QsXG5cdCclUmVnRXhwJSc6IFJlZ0V4cCxcblx0JyVSZWdFeHBQcm90b3R5cGUlJzogUmVnRXhwLnByb3RvdHlwZSxcblx0JyVTZXQlJzogdHlwZW9mIFNldCA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBTZXQsXG5cdCclU2V0SXRlcmF0b3JQcm90b3R5cGUlJzogdHlwZW9mIFNldCA9PT0gJ3VuZGVmaW5lZCcgfHwgIWhhc1N5bWJvbHMgPyB1bmRlZmluZWQgOiBnZXRQcm90byhuZXcgU2V0KClbU3ltYm9sLml0ZXJhdG9yXSgpKSxcblx0JyVTZXRQcm90b3R5cGUlJzogdHlwZW9mIFNldCA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBTZXQucHJvdG90eXBlLFxuXHQnJVNoYXJlZEFycmF5QnVmZmVyJSc6IHR5cGVvZiBTaGFyZWRBcnJheUJ1ZmZlciA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBTaGFyZWRBcnJheUJ1ZmZlcixcblx0JyVTaGFyZWRBcnJheUJ1ZmZlclByb3RvdHlwZSUnOiB0eXBlb2YgU2hhcmVkQXJyYXlCdWZmZXIgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogU2hhcmVkQXJyYXlCdWZmZXIucHJvdG90eXBlLFxuXHQnJVN0cmluZyUnOiBTdHJpbmcsXG5cdCclU3RyaW5nSXRlcmF0b3JQcm90b3R5cGUlJzogaGFzU3ltYm9scyA/IGdldFByb3RvKCcnW1N5bWJvbC5pdGVyYXRvcl0oKSkgOiB1bmRlZmluZWQsXG5cdCclU3RyaW5nUHJvdG90eXBlJSc6IFN0cmluZy5wcm90b3R5cGUsXG5cdCclU3ltYm9sJSc6IGhhc1N5bWJvbHMgPyBTeW1ib2wgOiB1bmRlZmluZWQsXG5cdCclU3ltYm9sUHJvdG90eXBlJSc6IGhhc1N5bWJvbHMgPyBTeW1ib2wucHJvdG90eXBlIDogdW5kZWZpbmVkLFxuXHQnJVN5bnRheEVycm9yJSc6IFN5bnRheEVycm9yLFxuXHQnJVN5bnRheEVycm9yUHJvdG90eXBlJSc6IFN5bnRheEVycm9yLnByb3RvdHlwZSxcblx0JyVUaHJvd1R5cGVFcnJvciUnOiBUaHJvd1R5cGVFcnJvcixcblx0JyVUeXBlZEFycmF5JSc6IFR5cGVkQXJyYXksXG5cdCclVHlwZWRBcnJheVByb3RvdHlwZSUnOiBUeXBlZEFycmF5ID8gVHlwZWRBcnJheS5wcm90b3R5cGUgOiB1bmRlZmluZWQsXG5cdCclVHlwZUVycm9yJSc6ICRUeXBlRXJyb3IsXG5cdCclVHlwZUVycm9yUHJvdG90eXBlJSc6ICRUeXBlRXJyb3IucHJvdG90eXBlLFxuXHQnJVVpbnQ4QXJyYXklJzogdHlwZW9mIFVpbnQ4QXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogVWludDhBcnJheSxcblx0JyVVaW50OEFycmF5UHJvdG90eXBlJSc6IHR5cGVvZiBVaW50OEFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFVpbnQ4QXJyYXkucHJvdG90eXBlLFxuXHQnJVVpbnQ4Q2xhbXBlZEFycmF5JSc6IHR5cGVvZiBVaW50OENsYW1wZWRBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBVaW50OENsYW1wZWRBcnJheSxcblx0JyVVaW50OENsYW1wZWRBcnJheVByb3RvdHlwZSUnOiB0eXBlb2YgVWludDhDbGFtcGVkQXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogVWludDhDbGFtcGVkQXJyYXkucHJvdG90eXBlLFxuXHQnJVVpbnQxNkFycmF5JSc6IHR5cGVvZiBVaW50MTZBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBVaW50MTZBcnJheSxcblx0JyVVaW50MTZBcnJheVByb3RvdHlwZSUnOiB0eXBlb2YgVWludDE2QXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogVWludDE2QXJyYXkucHJvdG90eXBlLFxuXHQnJVVpbnQzMkFycmF5JSc6IHR5cGVvZiBVaW50MzJBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBVaW50MzJBcnJheSxcblx0JyVVaW50MzJBcnJheVByb3RvdHlwZSUnOiB0eXBlb2YgVWludDMyQXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogVWludDMyQXJyYXkucHJvdG90eXBlLFxuXHQnJVVSSUVycm9yJSc6IFVSSUVycm9yLFxuXHQnJVVSSUVycm9yUHJvdG90eXBlJSc6IFVSSUVycm9yLnByb3RvdHlwZSxcblx0JyVXZWFrTWFwJSc6IHR5cGVvZiBXZWFrTWFwID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFdlYWtNYXAsXG5cdCclV2Vha01hcFByb3RvdHlwZSUnOiB0eXBlb2YgV2Vha01hcCA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBXZWFrTWFwLnByb3RvdHlwZSxcblx0JyVXZWFrU2V0JSc6IHR5cGVvZiBXZWFrU2V0ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFdlYWtTZXQsXG5cdCclV2Vha1NldFByb3RvdHlwZSUnOiB0eXBlb2YgV2Vha1NldCA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBXZWFrU2V0LnByb3RvdHlwZVxufTtcblxudmFyIGJpbmQgPSByZXF1aXJlKCdmdW5jdGlvbi1iaW5kJyk7XG52YXIgJHJlcGxhY2UgPSBiaW5kLmNhbGwoRnVuY3Rpb24uY2FsbCwgU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlKTtcblxuLyogYWRhcHRlZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9sb2Rhc2gvbG9kYXNoL2Jsb2IvNC4xNy4xNS9kaXN0L2xvZGFzaC5qcyNMNjczNS1MNjc0NCAqL1xudmFyIHJlUHJvcE5hbWUgPSAvW14lLltcXF1dK3xcXFsoPzooLT9cXGQrKD86XFwuXFxkKyk/KXwoW1wiJ10pKCg/Oig/IVxcMilbXlxcXFxdfFxcXFwuKSo/KVxcMilcXF18KD89KD86XFwufFxcW1xcXSkoPzpcXC58XFxbXFxdfCUkKSkvZztcbnZhciByZUVzY2FwZUNoYXIgPSAvXFxcXChcXFxcKT8vZzsgLyoqIFVzZWQgdG8gbWF0Y2ggYmFja3NsYXNoZXMgaW4gcHJvcGVydHkgcGF0aHMuICovXG52YXIgc3RyaW5nVG9QYXRoID0gZnVuY3Rpb24gc3RyaW5nVG9QYXRoKHN0cmluZykge1xuXHR2YXIgcmVzdWx0ID0gW107XG5cdCRyZXBsYWNlKHN0cmluZywgcmVQcm9wTmFtZSwgZnVuY3Rpb24gKG1hdGNoLCBudW1iZXIsIHF1b3RlLCBzdWJTdHJpbmcpIHtcblx0XHRyZXN1bHRbcmVzdWx0Lmxlbmd0aF0gPSBxdW90ZSA/ICRyZXBsYWNlKHN1YlN0cmluZywgcmVFc2NhcGVDaGFyLCAnJDEnKSA6IChudW1iZXIgfHwgbWF0Y2gpO1xuXHR9KTtcblx0cmV0dXJuIHJlc3VsdDtcbn07XG4vKiBlbmQgYWRhcHRhdGlvbiAqL1xuXG52YXIgZ2V0QmFzZUludHJpbnNpYyA9IGZ1bmN0aW9uIGdldEJhc2VJbnRyaW5zaWMobmFtZSwgYWxsb3dNaXNzaW5nKSB7XG5cdGlmICghKG5hbWUgaW4gSU5UUklOU0lDUykpIHtcblx0XHR0aHJvdyBuZXcgU3ludGF4RXJyb3IoJ2ludHJpbnNpYyAnICsgbmFtZSArICcgZG9lcyBub3QgZXhpc3QhJyk7XG5cdH1cblxuXHQvLyBpc3RhbmJ1bCBpZ25vcmUgaWYgLy8gaG9wZWZ1bGx5IHRoaXMgaXMgaW1wb3NzaWJsZSB0byB0ZXN0IDotKVxuXHRpZiAodHlwZW9mIElOVFJJTlNJQ1NbbmFtZV0gPT09ICd1bmRlZmluZWQnICYmICFhbGxvd01pc3NpbmcpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignaW50cmluc2ljICcgKyBuYW1lICsgJyBleGlzdHMsIGJ1dCBpcyBub3QgYXZhaWxhYmxlLiBQbGVhc2UgZmlsZSBhbiBpc3N1ZSEnKTtcblx0fVxuXG5cdHJldHVybiBJTlRSSU5TSUNTW25hbWVdO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBHZXRJbnRyaW5zaWMobmFtZSwgYWxsb3dNaXNzaW5nKSB7XG5cdGlmICh0eXBlb2YgbmFtZSAhPT0gJ3N0cmluZycgfHwgbmFtZS5sZW5ndGggPT09IDApIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnRyaW5zaWMgbmFtZSBtdXN0IGJlIGEgbm9uLWVtcHR5IHN0cmluZycpO1xuXHR9XG5cdGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSAmJiB0eXBlb2YgYWxsb3dNaXNzaW5nICE9PSAnYm9vbGVhbicpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdcImFsbG93TWlzc2luZ1wiIGFyZ3VtZW50IG11c3QgYmUgYSBib29sZWFuJyk7XG5cdH1cblxuXHR2YXIgcGFydHMgPSBzdHJpbmdUb1BhdGgobmFtZSk7XG5cblx0dmFyIHZhbHVlID0gZ2V0QmFzZUludHJpbnNpYygnJScgKyAocGFydHMubGVuZ3RoID4gMCA/IHBhcnRzWzBdIDogJycpICsgJyUnLCBhbGxvd01pc3NpbmcpO1xuXHRmb3IgKHZhciBpID0gMTsgaSA8IHBhcnRzLmxlbmd0aDsgaSArPSAxKSB7XG5cdFx0aWYgKHZhbHVlICE9IG51bGwpIHtcblx0XHRcdGlmICgkZ09QRCAmJiAoaSArIDEpID49IHBhcnRzLmxlbmd0aCkge1xuXHRcdFx0XHR2YXIgZGVzYyA9ICRnT1BEKHZhbHVlLCBwYXJ0c1tpXSk7XG5cdFx0XHRcdGlmICghYWxsb3dNaXNzaW5nICYmICEocGFydHNbaV0gaW4gdmFsdWUpKSB7XG5cdFx0XHRcdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ2Jhc2UgaW50cmluc2ljIGZvciAnICsgbmFtZSArICcgZXhpc3RzLCBidXQgdGhlIHByb3BlcnR5IGlzIG5vdCBhdmFpbGFibGUuJyk7XG5cdFx0XHRcdH1cblx0XHRcdFx0dmFsdWUgPSBkZXNjID8gKGRlc2MuZ2V0IHx8IGRlc2MudmFsdWUpIDogdmFsdWVbcGFydHNbaV1dO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dmFsdWUgPSB2YWx1ZVtwYXJ0c1tpXV07XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdHJldHVybiB2YWx1ZTtcbn07XG4iLCJpbXBvcnQgdXVpZCBmcm9tICd1dWlkJztcclxuXHJcbi8vIEFERF9FWFBFTlNFXHJcbmV4cG9ydCBjb25zdCBhZGRFeHBlbnNlID0gKFxyXG4gIHtcclxuICAgIGRlc2NyaXB0aW9uID0gJycsXHJcbiAgICBub3RlID0gJycsXHJcbiAgICBhbW91bnQgPSAwLFxyXG4gICAgY3JlYXRlZEF0ID0gMFxyXG4gIH0gPSB7fVxyXG4pPT4oe1xyXG4gIHR5cGU6ICdBRERfRVhQRU5TRScsXHJcbiAgZXhwZW5zZToge1xyXG4gICAgaWQ6IHV1aWQoKSxcclxuICAgIGRlc2NyaXB0aW9uLFxyXG4gICAgbm90ZSxcclxuICAgIGFtb3VudCxcclxuICAgIGNyZWF0ZWRBdFxyXG4gIH1cclxufSk7XHJcblxyXG4vLyBSRU1PVkVfRVhQRU5TRVxyXG5leHBvcnQgY29uc3QgcmVtb3ZlRXhwZW5zZSA9IChcclxuICB7IGlkID0gMH0gPSB7fVxyXG4pPT4oe1xyXG4gIHR5cGU6ICdSRU1PVkVfRVhQRU5TRScsXHJcbiAgaWRcclxufSk7XHJcblxyXG4vLyBFRElUX0VYUEVOU0VcclxuZXhwb3J0IGNvbnN0IGVkaXRFeHBlbnNlID0gKGlkLCB1cGRhdGVzKT0+KHtcclxuICB0eXBlOiAnRURJVF9FWFBFTlNFJyxcclxuICBpZCxcclxuICB1cGRhdGVzXHJcbn0pOyIsImltcG9ydCAkJG9ic2VydmFibGUgZnJvbSAnc3ltYm9sLW9ic2VydmFibGUnO1xuXG4vKipcbiAqIFRoZXNlIGFyZSBwcml2YXRlIGFjdGlvbiB0eXBlcyByZXNlcnZlZCBieSBSZWR1eC5cbiAqIEZvciBhbnkgdW5rbm93biBhY3Rpb25zLCB5b3UgbXVzdCByZXR1cm4gdGhlIGN1cnJlbnQgc3RhdGUuXG4gKiBJZiB0aGUgY3VycmVudCBzdGF0ZSBpcyB1bmRlZmluZWQsIHlvdSBtdXN0IHJldHVybiB0aGUgaW5pdGlhbCBzdGF0ZS5cbiAqIERvIG5vdCByZWZlcmVuY2UgdGhlc2UgYWN0aW9uIHR5cGVzIGRpcmVjdGx5IGluIHlvdXIgY29kZS5cbiAqL1xudmFyIHJhbmRvbVN0cmluZyA9IGZ1bmN0aW9uIHJhbmRvbVN0cmluZygpIHtcbiAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cmluZyg3KS5zcGxpdCgnJykuam9pbignLicpO1xufTtcblxudmFyIEFjdGlvblR5cGVzID0ge1xuICBJTklUOiBcIkBAcmVkdXgvSU5JVFwiICsgcmFuZG9tU3RyaW5nKCksXG4gIFJFUExBQ0U6IFwiQEByZWR1eC9SRVBMQUNFXCIgKyByYW5kb21TdHJpbmcoKSxcbiAgUFJPQkVfVU5LTk9XTl9BQ1RJT046IGZ1bmN0aW9uIFBST0JFX1VOS05PV05fQUNUSU9OKCkge1xuICAgIHJldHVybiBcIkBAcmVkdXgvUFJPQkVfVU5LTk9XTl9BQ1RJT05cIiArIHJhbmRvbVN0cmluZygpO1xuICB9XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7YW55fSBvYmogVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIGFyZ3VtZW50IGFwcGVhcnMgdG8gYmUgYSBwbGFpbiBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3Qob2JqKSB7XG4gIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0JyB8fCBvYmogPT09IG51bGwpIHJldHVybiBmYWxzZTtcbiAgdmFyIHByb3RvID0gb2JqO1xuXG4gIHdoaWxlIChPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG8pICE9PSBudWxsKSB7XG4gICAgcHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG8pO1xuICB9XG5cbiAgcmV0dXJuIE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmopID09PSBwcm90bztcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgUmVkdXggc3RvcmUgdGhhdCBob2xkcyB0aGUgc3RhdGUgdHJlZS5cbiAqIFRoZSBvbmx5IHdheSB0byBjaGFuZ2UgdGhlIGRhdGEgaW4gdGhlIHN0b3JlIGlzIHRvIGNhbGwgYGRpc3BhdGNoKClgIG9uIGl0LlxuICpcbiAqIFRoZXJlIHNob3VsZCBvbmx5IGJlIGEgc2luZ2xlIHN0b3JlIGluIHlvdXIgYXBwLiBUbyBzcGVjaWZ5IGhvdyBkaWZmZXJlbnRcbiAqIHBhcnRzIG9mIHRoZSBzdGF0ZSB0cmVlIHJlc3BvbmQgdG8gYWN0aW9ucywgeW91IG1heSBjb21iaW5lIHNldmVyYWwgcmVkdWNlcnNcbiAqIGludG8gYSBzaW5nbGUgcmVkdWNlciBmdW5jdGlvbiBieSB1c2luZyBgY29tYmluZVJlZHVjZXJzYC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWR1Y2VyIEEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSBuZXh0IHN0YXRlIHRyZWUsIGdpdmVuXG4gKiB0aGUgY3VycmVudCBzdGF0ZSB0cmVlIGFuZCB0aGUgYWN0aW9uIHRvIGhhbmRsZS5cbiAqXG4gKiBAcGFyYW0ge2FueX0gW3ByZWxvYWRlZFN0YXRlXSBUaGUgaW5pdGlhbCBzdGF0ZS4gWW91IG1heSBvcHRpb25hbGx5IHNwZWNpZnkgaXRcbiAqIHRvIGh5ZHJhdGUgdGhlIHN0YXRlIGZyb20gdGhlIHNlcnZlciBpbiB1bml2ZXJzYWwgYXBwcywgb3IgdG8gcmVzdG9yZSBhXG4gKiBwcmV2aW91c2x5IHNlcmlhbGl6ZWQgdXNlciBzZXNzaW9uLlxuICogSWYgeW91IHVzZSBgY29tYmluZVJlZHVjZXJzYCB0byBwcm9kdWNlIHRoZSByb290IHJlZHVjZXIgZnVuY3Rpb24sIHRoaXMgbXVzdCBiZVxuICogYW4gb2JqZWN0IHdpdGggdGhlIHNhbWUgc2hhcGUgYXMgYGNvbWJpbmVSZWR1Y2Vyc2Aga2V5cy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbZW5oYW5jZXJdIFRoZSBzdG9yZSBlbmhhbmNlci4gWW91IG1heSBvcHRpb25hbGx5IHNwZWNpZnkgaXRcbiAqIHRvIGVuaGFuY2UgdGhlIHN0b3JlIHdpdGggdGhpcmQtcGFydHkgY2FwYWJpbGl0aWVzIHN1Y2ggYXMgbWlkZGxld2FyZSxcbiAqIHRpbWUgdHJhdmVsLCBwZXJzaXN0ZW5jZSwgZXRjLiBUaGUgb25seSBzdG9yZSBlbmhhbmNlciB0aGF0IHNoaXBzIHdpdGggUmVkdXhcbiAqIGlzIGBhcHBseU1pZGRsZXdhcmUoKWAuXG4gKlxuICogQHJldHVybnMge1N0b3JlfSBBIFJlZHV4IHN0b3JlIHRoYXQgbGV0cyB5b3UgcmVhZCB0aGUgc3RhdGUsIGRpc3BhdGNoIGFjdGlvbnNcbiAqIGFuZCBzdWJzY3JpYmUgdG8gY2hhbmdlcy5cbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVTdG9yZShyZWR1Y2VyLCBwcmVsb2FkZWRTdGF0ZSwgZW5oYW5jZXIpIHtcbiAgdmFyIF9yZWYyO1xuXG4gIGlmICh0eXBlb2YgcHJlbG9hZGVkU3RhdGUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGVuaGFuY2VyID09PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBlbmhhbmNlciA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgYXJndW1lbnRzWzNdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJdCBsb29rcyBsaWtlIHlvdSBhcmUgcGFzc2luZyBzZXZlcmFsIHN0b3JlIGVuaGFuY2VycyB0byAnICsgJ2NyZWF0ZVN0b3JlKCkuIFRoaXMgaXMgbm90IHN1cHBvcnRlZC4gSW5zdGVhZCwgY29tcG9zZSB0aGVtICcgKyAndG9nZXRoZXIgdG8gYSBzaW5nbGUgZnVuY3Rpb24uJyk7XG4gIH1cblxuICBpZiAodHlwZW9mIHByZWxvYWRlZFN0YXRlID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBlbmhhbmNlciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBlbmhhbmNlciA9IHByZWxvYWRlZFN0YXRlO1xuICAgIHByZWxvYWRlZFN0YXRlID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBlbmhhbmNlciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBpZiAodHlwZW9mIGVuaGFuY2VyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHRoZSBlbmhhbmNlciB0byBiZSBhIGZ1bmN0aW9uLicpO1xuICAgIH1cblxuICAgIHJldHVybiBlbmhhbmNlcihjcmVhdGVTdG9yZSkocmVkdWNlciwgcHJlbG9hZGVkU3RhdGUpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiByZWR1Y2VyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCB0aGUgcmVkdWNlciB0byBiZSBhIGZ1bmN0aW9uLicpO1xuICB9XG5cbiAgdmFyIGN1cnJlbnRSZWR1Y2VyID0gcmVkdWNlcjtcbiAgdmFyIGN1cnJlbnRTdGF0ZSA9IHByZWxvYWRlZFN0YXRlO1xuICB2YXIgY3VycmVudExpc3RlbmVycyA9IFtdO1xuICB2YXIgbmV4dExpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnM7XG4gIHZhciBpc0Rpc3BhdGNoaW5nID0gZmFsc2U7XG4gIC8qKlxuICAgKiBUaGlzIG1ha2VzIGEgc2hhbGxvdyBjb3B5IG9mIGN1cnJlbnRMaXN0ZW5lcnMgc28gd2UgY2FuIHVzZVxuICAgKiBuZXh0TGlzdGVuZXJzIGFzIGEgdGVtcG9yYXJ5IGxpc3Qgd2hpbGUgZGlzcGF0Y2hpbmcuXG4gICAqXG4gICAqIFRoaXMgcHJldmVudHMgYW55IGJ1Z3MgYXJvdW5kIGNvbnN1bWVycyBjYWxsaW5nXG4gICAqIHN1YnNjcmliZS91bnN1YnNjcmliZSBpbiB0aGUgbWlkZGxlIG9mIGEgZGlzcGF0Y2guXG4gICAqL1xuXG4gIGZ1bmN0aW9uIGVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMoKSB7XG4gICAgaWYgKG5leHRMaXN0ZW5lcnMgPT09IGN1cnJlbnRMaXN0ZW5lcnMpIHtcbiAgICAgIG5leHRMaXN0ZW5lcnMgPSBjdXJyZW50TGlzdGVuZXJzLnNsaWNlKCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBSZWFkcyB0aGUgc3RhdGUgdHJlZSBtYW5hZ2VkIGJ5IHRoZSBzdG9yZS5cbiAgICpcbiAgICogQHJldHVybnMge2FueX0gVGhlIGN1cnJlbnQgc3RhdGUgdHJlZSBvZiB5b3VyIGFwcGxpY2F0aW9uLlxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGdldFN0YXRlKCkge1xuICAgIGlmIChpc0Rpc3BhdGNoaW5nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBtYXkgbm90IGNhbGwgc3RvcmUuZ2V0U3RhdGUoKSB3aGlsZSB0aGUgcmVkdWNlciBpcyBleGVjdXRpbmcuICcgKyAnVGhlIHJlZHVjZXIgaGFzIGFscmVhZHkgcmVjZWl2ZWQgdGhlIHN0YXRlIGFzIGFuIGFyZ3VtZW50LiAnICsgJ1Bhc3MgaXQgZG93biBmcm9tIHRoZSB0b3AgcmVkdWNlciBpbnN0ZWFkIG9mIHJlYWRpbmcgaXQgZnJvbSB0aGUgc3RvcmUuJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGN1cnJlbnRTdGF0ZTtcbiAgfVxuICAvKipcbiAgICogQWRkcyBhIGNoYW5nZSBsaXN0ZW5lci4gSXQgd2lsbCBiZSBjYWxsZWQgYW55IHRpbWUgYW4gYWN0aW9uIGlzIGRpc3BhdGNoZWQsXG4gICAqIGFuZCBzb21lIHBhcnQgb2YgdGhlIHN0YXRlIHRyZWUgbWF5IHBvdGVudGlhbGx5IGhhdmUgY2hhbmdlZC4gWW91IG1heSB0aGVuXG4gICAqIGNhbGwgYGdldFN0YXRlKClgIHRvIHJlYWQgdGhlIGN1cnJlbnQgc3RhdGUgdHJlZSBpbnNpZGUgdGhlIGNhbGxiYWNrLlxuICAgKlxuICAgKiBZb3UgbWF5IGNhbGwgYGRpc3BhdGNoKClgIGZyb20gYSBjaGFuZ2UgbGlzdGVuZXIsIHdpdGggdGhlIGZvbGxvd2luZ1xuICAgKiBjYXZlYXRzOlxuICAgKlxuICAgKiAxLiBUaGUgc3Vic2NyaXB0aW9ucyBhcmUgc25hcHNob3R0ZWQganVzdCBiZWZvcmUgZXZlcnkgYGRpc3BhdGNoKClgIGNhbGwuXG4gICAqIElmIHlvdSBzdWJzY3JpYmUgb3IgdW5zdWJzY3JpYmUgd2hpbGUgdGhlIGxpc3RlbmVycyBhcmUgYmVpbmcgaW52b2tlZCwgdGhpc1xuICAgKiB3aWxsIG5vdCBoYXZlIGFueSBlZmZlY3Qgb24gdGhlIGBkaXNwYXRjaCgpYCB0aGF0IGlzIGN1cnJlbnRseSBpbiBwcm9ncmVzcy5cbiAgICogSG93ZXZlciwgdGhlIG5leHQgYGRpc3BhdGNoKClgIGNhbGwsIHdoZXRoZXIgbmVzdGVkIG9yIG5vdCwgd2lsbCB1c2UgYSBtb3JlXG4gICAqIHJlY2VudCBzbmFwc2hvdCBvZiB0aGUgc3Vic2NyaXB0aW9uIGxpc3QuXG4gICAqXG4gICAqIDIuIFRoZSBsaXN0ZW5lciBzaG91bGQgbm90IGV4cGVjdCB0byBzZWUgYWxsIHN0YXRlIGNoYW5nZXMsIGFzIHRoZSBzdGF0ZVxuICAgKiBtaWdodCBoYXZlIGJlZW4gdXBkYXRlZCBtdWx0aXBsZSB0aW1lcyBkdXJpbmcgYSBuZXN0ZWQgYGRpc3BhdGNoKClgIGJlZm9yZVxuICAgKiB0aGUgbGlzdGVuZXIgaXMgY2FsbGVkLiBJdCBpcywgaG93ZXZlciwgZ3VhcmFudGVlZCB0aGF0IGFsbCBzdWJzY3JpYmVyc1xuICAgKiByZWdpc3RlcmVkIGJlZm9yZSB0aGUgYGRpc3BhdGNoKClgIHN0YXJ0ZWQgd2lsbCBiZSBjYWxsZWQgd2l0aCB0aGUgbGF0ZXN0XG4gICAqIHN0YXRlIGJ5IHRoZSB0aW1lIGl0IGV4aXRzLlxuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBsaXN0ZW5lciBBIGNhbGxiYWNrIHRvIGJlIGludm9rZWQgb24gZXZlcnkgZGlzcGF0Y2guXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBmdW5jdGlvbiB0byByZW1vdmUgdGhpcyBjaGFuZ2UgbGlzdGVuZXIuXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gc3Vic2NyaWJlKGxpc3RlbmVyKSB7XG4gICAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCB0aGUgbGlzdGVuZXIgdG8gYmUgYSBmdW5jdGlvbi4nKTtcbiAgICB9XG5cbiAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgbWF5IG5vdCBjYWxsIHN0b3JlLnN1YnNjcmliZSgpIHdoaWxlIHRoZSByZWR1Y2VyIGlzIGV4ZWN1dGluZy4gJyArICdJZiB5b3Ugd291bGQgbGlrZSB0byBiZSBub3RpZmllZCBhZnRlciB0aGUgc3RvcmUgaGFzIGJlZW4gdXBkYXRlZCwgc3Vic2NyaWJlIGZyb20gYSAnICsgJ2NvbXBvbmVudCBhbmQgaW52b2tlIHN0b3JlLmdldFN0YXRlKCkgaW4gdGhlIGNhbGxiYWNrIHRvIGFjY2VzcyB0aGUgbGF0ZXN0IHN0YXRlLiAnICsgJ1NlZSBodHRwczovL3JlZHV4LmpzLm9yZy9hcGktcmVmZXJlbmNlL3N0b3JlI3N1YnNjcmliZWxpc3RlbmVyIGZvciBtb3JlIGRldGFpbHMuJyk7XG4gICAgfVxuXG4gICAgdmFyIGlzU3Vic2NyaWJlZCA9IHRydWU7XG4gICAgZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycygpO1xuICAgIG5leHRMaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkge1xuICAgICAgaWYgKCFpc1N1YnNjcmliZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBtYXkgbm90IHVuc3Vic2NyaWJlIGZyb20gYSBzdG9yZSBsaXN0ZW5lciB3aGlsZSB0aGUgcmVkdWNlciBpcyBleGVjdXRpbmcuICcgKyAnU2VlIGh0dHBzOi8vcmVkdXguanMub3JnL2FwaS1yZWZlcmVuY2Uvc3RvcmUjc3Vic2NyaWJlbGlzdGVuZXIgZm9yIG1vcmUgZGV0YWlscy4nKTtcbiAgICAgIH1cblxuICAgICAgaXNTdWJzY3JpYmVkID0gZmFsc2U7XG4gICAgICBlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzKCk7XG4gICAgICB2YXIgaW5kZXggPSBuZXh0TGlzdGVuZXJzLmluZGV4T2YobGlzdGVuZXIpO1xuICAgICAgbmV4dExpc3RlbmVycy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgY3VycmVudExpc3RlbmVycyA9IG51bGw7XG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogRGlzcGF0Y2hlcyBhbiBhY3Rpb24uIEl0IGlzIHRoZSBvbmx5IHdheSB0byB0cmlnZ2VyIGEgc3RhdGUgY2hhbmdlLlxuICAgKlxuICAgKiBUaGUgYHJlZHVjZXJgIGZ1bmN0aW9uLCB1c2VkIHRvIGNyZWF0ZSB0aGUgc3RvcmUsIHdpbGwgYmUgY2FsbGVkIHdpdGggdGhlXG4gICAqIGN1cnJlbnQgc3RhdGUgdHJlZSBhbmQgdGhlIGdpdmVuIGBhY3Rpb25gLiBJdHMgcmV0dXJuIHZhbHVlIHdpbGxcbiAgICogYmUgY29uc2lkZXJlZCB0aGUgKipuZXh0Kiogc3RhdGUgb2YgdGhlIHRyZWUsIGFuZCB0aGUgY2hhbmdlIGxpc3RlbmVyc1xuICAgKiB3aWxsIGJlIG5vdGlmaWVkLlxuICAgKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvbmx5IHN1cHBvcnRzIHBsYWluIG9iamVjdCBhY3Rpb25zLiBJZiB5b3Ugd2FudCB0b1xuICAgKiBkaXNwYXRjaCBhIFByb21pc2UsIGFuIE9ic2VydmFibGUsIGEgdGh1bmssIG9yIHNvbWV0aGluZyBlbHNlLCB5b3UgbmVlZCB0b1xuICAgKiB3cmFwIHlvdXIgc3RvcmUgY3JlYXRpbmcgZnVuY3Rpb24gaW50byB0aGUgY29ycmVzcG9uZGluZyBtaWRkbGV3YXJlLiBGb3JcbiAgICogZXhhbXBsZSwgc2VlIHRoZSBkb2N1bWVudGF0aW9uIGZvciB0aGUgYHJlZHV4LXRodW5rYCBwYWNrYWdlLiBFdmVuIHRoZVxuICAgKiBtaWRkbGV3YXJlIHdpbGwgZXZlbnR1YWxseSBkaXNwYXRjaCBwbGFpbiBvYmplY3QgYWN0aW9ucyB1c2luZyB0aGlzIG1ldGhvZC5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IGFjdGlvbiBBIHBsYWluIG9iamVjdCByZXByZXNlbnRpbmcg4oCcd2hhdCBjaGFuZ2Vk4oCdLiBJdCBpc1xuICAgKiBhIGdvb2QgaWRlYSB0byBrZWVwIGFjdGlvbnMgc2VyaWFsaXphYmxlIHNvIHlvdSBjYW4gcmVjb3JkIGFuZCByZXBsYXkgdXNlclxuICAgKiBzZXNzaW9ucywgb3IgdXNlIHRoZSB0aW1lIHRyYXZlbGxpbmcgYHJlZHV4LWRldnRvb2xzYC4gQW4gYWN0aW9uIG11c3QgaGF2ZVxuICAgKiBhIGB0eXBlYCBwcm9wZXJ0eSB3aGljaCBtYXkgbm90IGJlIGB1bmRlZmluZWRgLiBJdCBpcyBhIGdvb2QgaWRlYSB0byB1c2VcbiAgICogc3RyaW5nIGNvbnN0YW50cyBmb3IgYWN0aW9uIHR5cGVzLlxuICAgKlxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBGb3IgY29udmVuaWVuY2UsIHRoZSBzYW1lIGFjdGlvbiBvYmplY3QgeW91IGRpc3BhdGNoZWQuXG4gICAqXG4gICAqIE5vdGUgdGhhdCwgaWYgeW91IHVzZSBhIGN1c3RvbSBtaWRkbGV3YXJlLCBpdCBtYXkgd3JhcCBgZGlzcGF0Y2goKWAgdG9cbiAgICogcmV0dXJuIHNvbWV0aGluZyBlbHNlIChmb3IgZXhhbXBsZSwgYSBQcm9taXNlIHlvdSBjYW4gYXdhaXQpLlxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGRpc3BhdGNoKGFjdGlvbikge1xuICAgIGlmICghaXNQbGFpbk9iamVjdChhY3Rpb24pKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0FjdGlvbnMgbXVzdCBiZSBwbGFpbiBvYmplY3RzLiAnICsgJ1VzZSBjdXN0b20gbWlkZGxld2FyZSBmb3IgYXN5bmMgYWN0aW9ucy4nKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGFjdGlvbi50eXBlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdBY3Rpb25zIG1heSBub3QgaGF2ZSBhbiB1bmRlZmluZWQgXCJ0eXBlXCIgcHJvcGVydHkuICcgKyAnSGF2ZSB5b3UgbWlzc3BlbGxlZCBhIGNvbnN0YW50PycpO1xuICAgIH1cblxuICAgIGlmIChpc0Rpc3BhdGNoaW5nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlZHVjZXJzIG1heSBub3QgZGlzcGF0Y2ggYWN0aW9ucy4nKTtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgaXNEaXNwYXRjaGluZyA9IHRydWU7XG4gICAgICBjdXJyZW50U3RhdGUgPSBjdXJyZW50UmVkdWNlcihjdXJyZW50U3RhdGUsIGFjdGlvbik7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGlzRGlzcGF0Y2hpbmcgPSBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgbGlzdGVuZXJzID0gY3VycmVudExpc3RlbmVycyA9IG5leHRMaXN0ZW5lcnM7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3RlbmVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGxpc3RlbmVyID0gbGlzdGVuZXJzW2ldO1xuICAgICAgbGlzdGVuZXIoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWN0aW9uO1xuICB9XG4gIC8qKlxuICAgKiBSZXBsYWNlcyB0aGUgcmVkdWNlciBjdXJyZW50bHkgdXNlZCBieSB0aGUgc3RvcmUgdG8gY2FsY3VsYXRlIHRoZSBzdGF0ZS5cbiAgICpcbiAgICogWW91IG1pZ2h0IG5lZWQgdGhpcyBpZiB5b3VyIGFwcCBpbXBsZW1lbnRzIGNvZGUgc3BsaXR0aW5nIGFuZCB5b3Ugd2FudCB0b1xuICAgKiBsb2FkIHNvbWUgb2YgdGhlIHJlZHVjZXJzIGR5bmFtaWNhbGx5LiBZb3UgbWlnaHQgYWxzbyBuZWVkIHRoaXMgaWYgeW91XG4gICAqIGltcGxlbWVudCBhIGhvdCByZWxvYWRpbmcgbWVjaGFuaXNtIGZvciBSZWR1eC5cbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gbmV4dFJlZHVjZXIgVGhlIHJlZHVjZXIgZm9yIHRoZSBzdG9yZSB0byB1c2UgaW5zdGVhZC5cbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gcmVwbGFjZVJlZHVjZXIobmV4dFJlZHVjZXIpIHtcbiAgICBpZiAodHlwZW9mIG5leHRSZWR1Y2VyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHRoZSBuZXh0UmVkdWNlciB0byBiZSBhIGZ1bmN0aW9uLicpO1xuICAgIH1cblxuICAgIGN1cnJlbnRSZWR1Y2VyID0gbmV4dFJlZHVjZXI7IC8vIFRoaXMgYWN0aW9uIGhhcyBhIHNpbWlsaWFyIGVmZmVjdCB0byBBY3Rpb25UeXBlcy5JTklULlxuICAgIC8vIEFueSByZWR1Y2VycyB0aGF0IGV4aXN0ZWQgaW4gYm90aCB0aGUgbmV3IGFuZCBvbGQgcm9vdFJlZHVjZXJcbiAgICAvLyB3aWxsIHJlY2VpdmUgdGhlIHByZXZpb3VzIHN0YXRlLiBUaGlzIGVmZmVjdGl2ZWx5IHBvcHVsYXRlc1xuICAgIC8vIHRoZSBuZXcgc3RhdGUgdHJlZSB3aXRoIGFueSByZWxldmFudCBkYXRhIGZyb20gdGhlIG9sZCBvbmUuXG5cbiAgICBkaXNwYXRjaCh7XG4gICAgICB0eXBlOiBBY3Rpb25UeXBlcy5SRVBMQUNFXG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIEludGVyb3BlcmFiaWxpdHkgcG9pbnQgZm9yIG9ic2VydmFibGUvcmVhY3RpdmUgbGlicmFyaWVzLlxuICAgKiBAcmV0dXJucyB7b2JzZXJ2YWJsZX0gQSBtaW5pbWFsIG9ic2VydmFibGUgb2Ygc3RhdGUgY2hhbmdlcy5cbiAgICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSB0aGUgb2JzZXJ2YWJsZSBwcm9wb3NhbDpcbiAgICogaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JzZXJ2YWJsZVxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIG9ic2VydmFibGUoKSB7XG4gICAgdmFyIF9yZWY7XG5cbiAgICB2YXIgb3V0ZXJTdWJzY3JpYmUgPSBzdWJzY3JpYmU7XG4gICAgcmV0dXJuIF9yZWYgPSB7XG4gICAgICAvKipcbiAgICAgICAqIFRoZSBtaW5pbWFsIG9ic2VydmFibGUgc3Vic2NyaXB0aW9uIG1ldGhvZC5cbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYnNlcnZlciBBbnkgb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgYXMgYW4gb2JzZXJ2ZXIuXG4gICAgICAgKiBUaGUgb2JzZXJ2ZXIgb2JqZWN0IHNob3VsZCBoYXZlIGEgYG5leHRgIG1ldGhvZC5cbiAgICAgICAqIEByZXR1cm5zIHtzdWJzY3JpcHRpb259IEFuIG9iamVjdCB3aXRoIGFuIGB1bnN1YnNjcmliZWAgbWV0aG9kIHRoYXQgY2FuXG4gICAgICAgKiBiZSB1c2VkIHRvIHVuc3Vic2NyaWJlIHRoZSBvYnNlcnZhYmxlIGZyb20gdGhlIHN0b3JlLCBhbmQgcHJldmVudCBmdXJ0aGVyXG4gICAgICAgKiBlbWlzc2lvbiBvZiB2YWx1ZXMgZnJvbSB0aGUgb2JzZXJ2YWJsZS5cbiAgICAgICAqL1xuICAgICAgc3Vic2NyaWJlOiBmdW5jdGlvbiBzdWJzY3JpYmUob2JzZXJ2ZXIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBvYnNlcnZlciAhPT0gJ29iamVjdCcgfHwgb2JzZXJ2ZXIgPT09IG51bGwpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCB0aGUgb2JzZXJ2ZXIgdG8gYmUgYW4gb2JqZWN0LicpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gb2JzZXJ2ZVN0YXRlKCkge1xuICAgICAgICAgIGlmIChvYnNlcnZlci5uZXh0KSB7XG4gICAgICAgICAgICBvYnNlcnZlci5uZXh0KGdldFN0YXRlKCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIG9ic2VydmVTdGF0ZSgpO1xuICAgICAgICB2YXIgdW5zdWJzY3JpYmUgPSBvdXRlclN1YnNjcmliZShvYnNlcnZlU3RhdGUpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHVuc3Vic2NyaWJlOiB1bnN1YnNjcmliZVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0sIF9yZWZbJCRvYnNlcnZhYmxlXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sIF9yZWY7XG4gIH0gLy8gV2hlbiBhIHN0b3JlIGlzIGNyZWF0ZWQsIGFuIFwiSU5JVFwiIGFjdGlvbiBpcyBkaXNwYXRjaGVkIHNvIHRoYXQgZXZlcnlcbiAgLy8gcmVkdWNlciByZXR1cm5zIHRoZWlyIGluaXRpYWwgc3RhdGUuIFRoaXMgZWZmZWN0aXZlbHkgcG9wdWxhdGVzXG4gIC8vIHRoZSBpbml0aWFsIHN0YXRlIHRyZWUuXG5cblxuICBkaXNwYXRjaCh7XG4gICAgdHlwZTogQWN0aW9uVHlwZXMuSU5JVFxuICB9KTtcbiAgcmV0dXJuIF9yZWYyID0ge1xuICAgIGRpc3BhdGNoOiBkaXNwYXRjaCxcbiAgICBzdWJzY3JpYmU6IHN1YnNjcmliZSxcbiAgICBnZXRTdGF0ZTogZ2V0U3RhdGUsXG4gICAgcmVwbGFjZVJlZHVjZXI6IHJlcGxhY2VSZWR1Y2VyXG4gIH0sIF9yZWYyWyQkb2JzZXJ2YWJsZV0gPSBvYnNlcnZhYmxlLCBfcmVmMjtcbn1cblxuLyoqXG4gKiBQcmludHMgYSB3YXJuaW5nIGluIHRoZSBjb25zb2xlIGlmIGl0IGV4aXN0cy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZSBUaGUgd2FybmluZyBtZXNzYWdlLlxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmZ1bmN0aW9uIHdhcm5pbmcobWVzc2FnZSkge1xuICAvKiBlc2xpbnQtZGlzYWJsZSBuby1jb25zb2xlICovXG4gIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGNvbnNvbGUuZXJyb3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjb25zb2xlLmVycm9yKG1lc3NhZ2UpO1xuICB9XG4gIC8qIGVzbGludC1lbmFibGUgbm8tY29uc29sZSAqL1xuXG5cbiAgdHJ5IHtcbiAgICAvLyBUaGlzIGVycm9yIHdhcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB0aGF0IGlmIHlvdSBlbmFibGVcbiAgICAvLyBcImJyZWFrIG9uIGFsbCBleGNlcHRpb25zXCIgaW4geW91ciBjb25zb2xlLFxuICAgIC8vIGl0IHdvdWxkIHBhdXNlIHRoZSBleGVjdXRpb24gYXQgdGhpcyBsaW5lLlxuICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgfSBjYXRjaCAoZSkge30gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1lbXB0eVxuXG59XG5cbmZ1bmN0aW9uIGdldFVuZGVmaW5lZFN0YXRlRXJyb3JNZXNzYWdlKGtleSwgYWN0aW9uKSB7XG4gIHZhciBhY3Rpb25UeXBlID0gYWN0aW9uICYmIGFjdGlvbi50eXBlO1xuICB2YXIgYWN0aW9uRGVzY3JpcHRpb24gPSBhY3Rpb25UeXBlICYmIFwiYWN0aW9uIFxcXCJcIiArIFN0cmluZyhhY3Rpb25UeXBlKSArIFwiXFxcIlwiIHx8ICdhbiBhY3Rpb24nO1xuICByZXR1cm4gXCJHaXZlbiBcIiArIGFjdGlvbkRlc2NyaXB0aW9uICsgXCIsIHJlZHVjZXIgXFxcIlwiICsga2V5ICsgXCJcXFwiIHJldHVybmVkIHVuZGVmaW5lZC4gXCIgKyBcIlRvIGlnbm9yZSBhbiBhY3Rpb24sIHlvdSBtdXN0IGV4cGxpY2l0bHkgcmV0dXJuIHRoZSBwcmV2aW91cyBzdGF0ZS4gXCIgKyBcIklmIHlvdSB3YW50IHRoaXMgcmVkdWNlciB0byBob2xkIG5vIHZhbHVlLCB5b3UgY2FuIHJldHVybiBudWxsIGluc3RlYWQgb2YgdW5kZWZpbmVkLlwiO1xufVxuXG5mdW5jdGlvbiBnZXRVbmV4cGVjdGVkU3RhdGVTaGFwZVdhcm5pbmdNZXNzYWdlKGlucHV0U3RhdGUsIHJlZHVjZXJzLCBhY3Rpb24sIHVuZXhwZWN0ZWRLZXlDYWNoZSkge1xuICB2YXIgcmVkdWNlcktleXMgPSBPYmplY3Qua2V5cyhyZWR1Y2Vycyk7XG4gIHZhciBhcmd1bWVudE5hbWUgPSBhY3Rpb24gJiYgYWN0aW9uLnR5cGUgPT09IEFjdGlvblR5cGVzLklOSVQgPyAncHJlbG9hZGVkU3RhdGUgYXJndW1lbnQgcGFzc2VkIHRvIGNyZWF0ZVN0b3JlJyA6ICdwcmV2aW91cyBzdGF0ZSByZWNlaXZlZCBieSB0aGUgcmVkdWNlcic7XG5cbiAgaWYgKHJlZHVjZXJLZXlzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiAnU3RvcmUgZG9lcyBub3QgaGF2ZSBhIHZhbGlkIHJlZHVjZXIuIE1ha2Ugc3VyZSB0aGUgYXJndW1lbnQgcGFzc2VkICcgKyAndG8gY29tYmluZVJlZHVjZXJzIGlzIGFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIHJlZHVjZXJzLic7XG4gIH1cblxuICBpZiAoIWlzUGxhaW5PYmplY3QoaW5wdXRTdGF0ZSkpIHtcbiAgICByZXR1cm4gXCJUaGUgXCIgKyBhcmd1bWVudE5hbWUgKyBcIiBoYXMgdW5leHBlY3RlZCB0eXBlIG9mIFxcXCJcIiArIHt9LnRvU3RyaW5nLmNhbGwoaW5wdXRTdGF0ZSkubWF0Y2goL1xccyhbYS16fEEtWl0rKS8pWzFdICsgXCJcXFwiLiBFeHBlY3RlZCBhcmd1bWVudCB0byBiZSBhbiBvYmplY3Qgd2l0aCB0aGUgZm9sbG93aW5nIFwiICsgKFwia2V5czogXFxcIlwiICsgcmVkdWNlcktleXMuam9pbignXCIsIFwiJykgKyBcIlxcXCJcIik7XG4gIH1cblxuICB2YXIgdW5leHBlY3RlZEtleXMgPSBPYmplY3Qua2V5cyhpbnB1dFN0YXRlKS5maWx0ZXIoZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiAhcmVkdWNlcnMuaGFzT3duUHJvcGVydHkoa2V5KSAmJiAhdW5leHBlY3RlZEtleUNhY2hlW2tleV07XG4gIH0pO1xuICB1bmV4cGVjdGVkS2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICB1bmV4cGVjdGVkS2V5Q2FjaGVba2V5XSA9IHRydWU7XG4gIH0pO1xuICBpZiAoYWN0aW9uICYmIGFjdGlvbi50eXBlID09PSBBY3Rpb25UeXBlcy5SRVBMQUNFKSByZXR1cm47XG5cbiAgaWYgKHVuZXhwZWN0ZWRLZXlzLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4gXCJVbmV4cGVjdGVkIFwiICsgKHVuZXhwZWN0ZWRLZXlzLmxlbmd0aCA+IDEgPyAna2V5cycgOiAna2V5JykgKyBcIiBcIiArIChcIlxcXCJcIiArIHVuZXhwZWN0ZWRLZXlzLmpvaW4oJ1wiLCBcIicpICsgXCJcXFwiIGZvdW5kIGluIFwiICsgYXJndW1lbnROYW1lICsgXCIuIFwiKSArIFwiRXhwZWN0ZWQgdG8gZmluZCBvbmUgb2YgdGhlIGtub3duIHJlZHVjZXIga2V5cyBpbnN0ZWFkOiBcIiArIChcIlxcXCJcIiArIHJlZHVjZXJLZXlzLmpvaW4oJ1wiLCBcIicpICsgXCJcXFwiLiBVbmV4cGVjdGVkIGtleXMgd2lsbCBiZSBpZ25vcmVkLlwiKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBhc3NlcnRSZWR1Y2VyU2hhcGUocmVkdWNlcnMpIHtcbiAgT2JqZWN0LmtleXMocmVkdWNlcnMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciByZWR1Y2VyID0gcmVkdWNlcnNba2V5XTtcbiAgICB2YXIgaW5pdGlhbFN0YXRlID0gcmVkdWNlcih1bmRlZmluZWQsIHtcbiAgICAgIHR5cGU6IEFjdGlvblR5cGVzLklOSVRcbiAgICB9KTtcblxuICAgIGlmICh0eXBlb2YgaW5pdGlhbFN0YXRlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUmVkdWNlciBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgcmV0dXJuZWQgdW5kZWZpbmVkIGR1cmluZyBpbml0aWFsaXphdGlvbi4gXCIgKyBcIklmIHRoZSBzdGF0ZSBwYXNzZWQgdG8gdGhlIHJlZHVjZXIgaXMgdW5kZWZpbmVkLCB5b3UgbXVzdCBcIiArIFwiZXhwbGljaXRseSByZXR1cm4gdGhlIGluaXRpYWwgc3RhdGUuIFRoZSBpbml0aWFsIHN0YXRlIG1heSBcIiArIFwibm90IGJlIHVuZGVmaW5lZC4gSWYgeW91IGRvbid0IHdhbnQgdG8gc2V0IGEgdmFsdWUgZm9yIHRoaXMgcmVkdWNlciwgXCIgKyBcInlvdSBjYW4gdXNlIG51bGwgaW5zdGVhZCBvZiB1bmRlZmluZWQuXCIpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgcmVkdWNlcih1bmRlZmluZWQsIHtcbiAgICAgIHR5cGU6IEFjdGlvblR5cGVzLlBST0JFX1VOS05PV05fQUNUSU9OKClcbiAgICB9KSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlJlZHVjZXIgXFxcIlwiICsga2V5ICsgXCJcXFwiIHJldHVybmVkIHVuZGVmaW5lZCB3aGVuIHByb2JlZCB3aXRoIGEgcmFuZG9tIHR5cGUuIFwiICsgKFwiRG9uJ3QgdHJ5IHRvIGhhbmRsZSBcIiArIEFjdGlvblR5cGVzLklOSVQgKyBcIiBvciBvdGhlciBhY3Rpb25zIGluIFxcXCJyZWR1eC8qXFxcIiBcIikgKyBcIm5hbWVzcGFjZS4gVGhleSBhcmUgY29uc2lkZXJlZCBwcml2YXRlLiBJbnN0ZWFkLCB5b3UgbXVzdCByZXR1cm4gdGhlIFwiICsgXCJjdXJyZW50IHN0YXRlIGZvciBhbnkgdW5rbm93biBhY3Rpb25zLCB1bmxlc3MgaXQgaXMgdW5kZWZpbmVkLCBcIiArIFwiaW4gd2hpY2ggY2FzZSB5b3UgbXVzdCByZXR1cm4gdGhlIGluaXRpYWwgc3RhdGUsIHJlZ2FyZGxlc3Mgb2YgdGhlIFwiICsgXCJhY3Rpb24gdHlwZS4gVGhlIGluaXRpYWwgc3RhdGUgbWF5IG5vdCBiZSB1bmRlZmluZWQsIGJ1dCBjYW4gYmUgbnVsbC5cIik7XG4gICAgfVxuICB9KTtcbn1cbi8qKlxuICogVHVybnMgYW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgZGlmZmVyZW50IHJlZHVjZXIgZnVuY3Rpb25zLCBpbnRvIGEgc2luZ2xlXG4gKiByZWR1Y2VyIGZ1bmN0aW9uLiBJdCB3aWxsIGNhbGwgZXZlcnkgY2hpbGQgcmVkdWNlciwgYW5kIGdhdGhlciB0aGVpciByZXN1bHRzXG4gKiBpbnRvIGEgc2luZ2xlIHN0YXRlIG9iamVjdCwgd2hvc2Uga2V5cyBjb3JyZXNwb25kIHRvIHRoZSBrZXlzIG9mIHRoZSBwYXNzZWRcbiAqIHJlZHVjZXIgZnVuY3Rpb25zLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSByZWR1Y2VycyBBbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGNvcnJlc3BvbmQgdG8gZGlmZmVyZW50XG4gKiByZWR1Y2VyIGZ1bmN0aW9ucyB0aGF0IG5lZWQgdG8gYmUgY29tYmluZWQgaW50byBvbmUuIE9uZSBoYW5keSB3YXkgdG8gb2J0YWluXG4gKiBpdCBpcyB0byB1c2UgRVM2IGBpbXBvcnQgKiBhcyByZWR1Y2Vyc2Agc3ludGF4LiBUaGUgcmVkdWNlcnMgbWF5IG5ldmVyIHJldHVyblxuICogdW5kZWZpbmVkIGZvciBhbnkgYWN0aW9uLiBJbnN0ZWFkLCB0aGV5IHNob3VsZCByZXR1cm4gdGhlaXIgaW5pdGlhbCBzdGF0ZVxuICogaWYgdGhlIHN0YXRlIHBhc3NlZCB0byB0aGVtIHdhcyB1bmRlZmluZWQsIGFuZCB0aGUgY3VycmVudCBzdGF0ZSBmb3IgYW55XG4gKiB1bnJlY29nbml6ZWQgYWN0aW9uLlxuICpcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSByZWR1Y2VyIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBldmVyeSByZWR1Y2VyIGluc2lkZSB0aGVcbiAqIHBhc3NlZCBvYmplY3QsIGFuZCBidWlsZHMgYSBzdGF0ZSBvYmplY3Qgd2l0aCB0aGUgc2FtZSBzaGFwZS5cbiAqL1xuXG5cbmZ1bmN0aW9uIGNvbWJpbmVSZWR1Y2VycyhyZWR1Y2Vycykge1xuICB2YXIgcmVkdWNlcktleXMgPSBPYmplY3Qua2V5cyhyZWR1Y2Vycyk7XG4gIHZhciBmaW5hbFJlZHVjZXJzID0ge307XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCByZWR1Y2VyS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBrZXkgPSByZWR1Y2VyS2V5c1tpXTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAodHlwZW9mIHJlZHVjZXJzW2tleV0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHdhcm5pbmcoXCJObyByZWR1Y2VyIHByb3ZpZGVkIGZvciBrZXkgXFxcIlwiICsga2V5ICsgXCJcXFwiXCIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0eXBlb2YgcmVkdWNlcnNba2V5XSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgZmluYWxSZWR1Y2Vyc1trZXldID0gcmVkdWNlcnNba2V5XTtcbiAgICB9XG4gIH1cblxuICB2YXIgZmluYWxSZWR1Y2VyS2V5cyA9IE9iamVjdC5rZXlzKGZpbmFsUmVkdWNlcnMpOyAvLyBUaGlzIGlzIHVzZWQgdG8gbWFrZSBzdXJlIHdlIGRvbid0IHdhcm4gYWJvdXQgdGhlIHNhbWVcbiAgLy8ga2V5cyBtdWx0aXBsZSB0aW1lcy5cblxuICB2YXIgdW5leHBlY3RlZEtleUNhY2hlO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgdW5leHBlY3RlZEtleUNhY2hlID0ge307XG4gIH1cblxuICB2YXIgc2hhcGVBc3NlcnRpb25FcnJvcjtcblxuICB0cnkge1xuICAgIGFzc2VydFJlZHVjZXJTaGFwZShmaW5hbFJlZHVjZXJzKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHNoYXBlQXNzZXJ0aW9uRXJyb3IgPSBlO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIGNvbWJpbmF0aW9uKHN0YXRlLCBhY3Rpb24pIHtcbiAgICBpZiAoc3RhdGUgPT09IHZvaWQgMCkge1xuICAgICAgc3RhdGUgPSB7fTtcbiAgICB9XG5cbiAgICBpZiAoc2hhcGVBc3NlcnRpb25FcnJvcikge1xuICAgICAgdGhyb3cgc2hhcGVBc3NlcnRpb25FcnJvcjtcbiAgICB9XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFyIHdhcm5pbmdNZXNzYWdlID0gZ2V0VW5leHBlY3RlZFN0YXRlU2hhcGVXYXJuaW5nTWVzc2FnZShzdGF0ZSwgZmluYWxSZWR1Y2VycywgYWN0aW9uLCB1bmV4cGVjdGVkS2V5Q2FjaGUpO1xuXG4gICAgICBpZiAod2FybmluZ01lc3NhZ2UpIHtcbiAgICAgICAgd2FybmluZyh3YXJuaW5nTWVzc2FnZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGhhc0NoYW5nZWQgPSBmYWxzZTtcbiAgICB2YXIgbmV4dFN0YXRlID0ge307XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgZmluYWxSZWR1Y2VyS2V5cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfa2V5ID0gZmluYWxSZWR1Y2VyS2V5c1tfaV07XG4gICAgICB2YXIgcmVkdWNlciA9IGZpbmFsUmVkdWNlcnNbX2tleV07XG4gICAgICB2YXIgcHJldmlvdXNTdGF0ZUZvcktleSA9IHN0YXRlW19rZXldO1xuICAgICAgdmFyIG5leHRTdGF0ZUZvcktleSA9IHJlZHVjZXIocHJldmlvdXNTdGF0ZUZvcktleSwgYWN0aW9uKTtcblxuICAgICAgaWYgKHR5cGVvZiBuZXh0U3RhdGVGb3JLZXkgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHZhciBlcnJvck1lc3NhZ2UgPSBnZXRVbmRlZmluZWRTdGF0ZUVycm9yTWVzc2FnZShfa2V5LCBhY3Rpb24pO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3JNZXNzYWdlKTtcbiAgICAgIH1cblxuICAgICAgbmV4dFN0YXRlW19rZXldID0gbmV4dFN0YXRlRm9yS2V5O1xuICAgICAgaGFzQ2hhbmdlZCA9IGhhc0NoYW5nZWQgfHwgbmV4dFN0YXRlRm9yS2V5ICE9PSBwcmV2aW91c1N0YXRlRm9yS2V5O1xuICAgIH1cblxuICAgIGhhc0NoYW5nZWQgPSBoYXNDaGFuZ2VkIHx8IGZpbmFsUmVkdWNlcktleXMubGVuZ3RoICE9PSBPYmplY3Qua2V5cyhzdGF0ZSkubGVuZ3RoO1xuICAgIHJldHVybiBoYXNDaGFuZ2VkID8gbmV4dFN0YXRlIDogc3RhdGU7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGJpbmRBY3Rpb25DcmVhdG9yKGFjdGlvbkNyZWF0b3IsIGRpc3BhdGNoKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGRpc3BhdGNoKGFjdGlvbkNyZWF0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH07XG59XG4vKipcbiAqIFR1cm5zIGFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIGFjdGlvbiBjcmVhdG9ycywgaW50byBhbiBvYmplY3Qgd2l0aCB0aGVcbiAqIHNhbWUga2V5cywgYnV0IHdpdGggZXZlcnkgZnVuY3Rpb24gd3JhcHBlZCBpbnRvIGEgYGRpc3BhdGNoYCBjYWxsIHNvIHRoZXlcbiAqIG1heSBiZSBpbnZva2VkIGRpcmVjdGx5LiBUaGlzIGlzIGp1c3QgYSBjb252ZW5pZW5jZSBtZXRob2QsIGFzIHlvdSBjYW4gY2FsbFxuICogYHN0b3JlLmRpc3BhdGNoKE15QWN0aW9uQ3JlYXRvcnMuZG9Tb21ldGhpbmcoKSlgIHlvdXJzZWxmIGp1c3QgZmluZS5cbiAqXG4gKiBGb3IgY29udmVuaWVuY2UsIHlvdSBjYW4gYWxzbyBwYXNzIGFuIGFjdGlvbiBjcmVhdG9yIGFzIHRoZSBmaXJzdCBhcmd1bWVudCxcbiAqIGFuZCBnZXQgYSBkaXNwYXRjaCB3cmFwcGVkIGZ1bmN0aW9uIGluIHJldHVybi5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdH0gYWN0aW9uQ3JlYXRvcnMgQW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgYWN0aW9uXG4gKiBjcmVhdG9yIGZ1bmN0aW9ucy4gT25lIGhhbmR5IHdheSB0byBvYnRhaW4gaXQgaXMgdG8gdXNlIEVTNiBgaW1wb3J0ICogYXNgXG4gKiBzeW50YXguIFlvdSBtYXkgYWxzbyBwYXNzIGEgc2luZ2xlIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGRpc3BhdGNoIFRoZSBgZGlzcGF0Y2hgIGZ1bmN0aW9uIGF2YWlsYWJsZSBvbiB5b3VyIFJlZHV4XG4gKiBzdG9yZS5cbiAqXG4gKiBAcmV0dXJucyB7RnVuY3Rpb258T2JqZWN0fSBUaGUgb2JqZWN0IG1pbWlja2luZyB0aGUgb3JpZ2luYWwgb2JqZWN0LCBidXQgd2l0aFxuICogZXZlcnkgYWN0aW9uIGNyZWF0b3Igd3JhcHBlZCBpbnRvIHRoZSBgZGlzcGF0Y2hgIGNhbGwuIElmIHlvdSBwYXNzZWQgYVxuICogZnVuY3Rpb24gYXMgYGFjdGlvbkNyZWF0b3JzYCwgdGhlIHJldHVybiB2YWx1ZSB3aWxsIGFsc28gYmUgYSBzaW5nbGVcbiAqIGZ1bmN0aW9uLlxuICovXG5cblxuZnVuY3Rpb24gYmluZEFjdGlvbkNyZWF0b3JzKGFjdGlvbkNyZWF0b3JzLCBkaXNwYXRjaCkge1xuICBpZiAodHlwZW9mIGFjdGlvbkNyZWF0b3JzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGJpbmRBY3Rpb25DcmVhdG9yKGFjdGlvbkNyZWF0b3JzLCBkaXNwYXRjaCk7XG4gIH1cblxuICBpZiAodHlwZW9mIGFjdGlvbkNyZWF0b3JzICE9PSAnb2JqZWN0JyB8fCBhY3Rpb25DcmVhdG9ycyA9PT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcImJpbmRBY3Rpb25DcmVhdG9ycyBleHBlY3RlZCBhbiBvYmplY3Qgb3IgYSBmdW5jdGlvbiwgaW5zdGVhZCByZWNlaXZlZCBcIiArIChhY3Rpb25DcmVhdG9ycyA9PT0gbnVsbCA/ICdudWxsJyA6IHR5cGVvZiBhY3Rpb25DcmVhdG9ycykgKyBcIi4gXCIgKyBcIkRpZCB5b3Ugd3JpdGUgXFxcImltcG9ydCBBY3Rpb25DcmVhdG9ycyBmcm9tXFxcIiBpbnN0ZWFkIG9mIFxcXCJpbXBvcnQgKiBhcyBBY3Rpb25DcmVhdG9ycyBmcm9tXFxcIj9cIik7XG4gIH1cblxuICB2YXIgYm91bmRBY3Rpb25DcmVhdG9ycyA9IHt9O1xuXG4gIGZvciAodmFyIGtleSBpbiBhY3Rpb25DcmVhdG9ycykge1xuICAgIHZhciBhY3Rpb25DcmVhdG9yID0gYWN0aW9uQ3JlYXRvcnNba2V5XTtcblxuICAgIGlmICh0eXBlb2YgYWN0aW9uQ3JlYXRvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgYm91bmRBY3Rpb25DcmVhdG9yc1trZXldID0gYmluZEFjdGlvbkNyZWF0b3IoYWN0aW9uQ3JlYXRvciwgZGlzcGF0Y2gpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBib3VuZEFjdGlvbkNyZWF0b3JzO1xufVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmpba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn1cblxuZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTtcblxuICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgIGtleXMucHVzaC5hcHBseShrZXlzLCBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCkpO1xuICB9XG5cbiAgaWYgKGVudW1lcmFibGVPbmx5KSBrZXlzID0ga2V5cy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkge1xuICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlO1xuICB9KTtcbiAgcmV0dXJuIGtleXM7XG59XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQyKHRhcmdldCkge1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9O1xuXG4gICAgaWYgKGkgJSAyKSB7XG4gICAgICBvd25LZXlzKHNvdXJjZSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3duS2V5cyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbi8qKlxuICogQ29tcG9zZXMgc2luZ2xlLWFyZ3VtZW50IGZ1bmN0aW9ucyBmcm9tIHJpZ2h0IHRvIGxlZnQuIFRoZSByaWdodG1vc3RcbiAqIGZ1bmN0aW9uIGNhbiB0YWtlIG11bHRpcGxlIGFyZ3VtZW50cyBhcyBpdCBwcm92aWRlcyB0aGUgc2lnbmF0dXJlIGZvclxuICogdGhlIHJlc3VsdGluZyBjb21wb3NpdGUgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIHsuLi5GdW5jdGlvbn0gZnVuY3MgVGhlIGZ1bmN0aW9ucyB0byBjb21wb3NlLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIGZ1bmN0aW9uIG9idGFpbmVkIGJ5IGNvbXBvc2luZyB0aGUgYXJndW1lbnQgZnVuY3Rpb25zXG4gKiBmcm9tIHJpZ2h0IHRvIGxlZnQuIEZvciBleGFtcGxlLCBjb21wb3NlKGYsIGcsIGgpIGlzIGlkZW50aWNhbCB0byBkb2luZ1xuICogKC4uLmFyZ3MpID0+IGYoZyhoKC4uLmFyZ3MpKSkuXG4gKi9cbmZ1bmN0aW9uIGNvbXBvc2UoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBmdW5jcyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBmdW5jc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIGlmIChmdW5jcy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGFyZykge1xuICAgICAgcmV0dXJuIGFyZztcbiAgICB9O1xuICB9XG5cbiAgaWYgKGZ1bmNzLmxlbmd0aCA9PT0gMSkge1xuICAgIHJldHVybiBmdW5jc1swXTtcbiAgfVxuXG4gIHJldHVybiBmdW5jcy5yZWR1Y2UoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGEoYi5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cykpO1xuICAgIH07XG4gIH0pO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBzdG9yZSBlbmhhbmNlciB0aGF0IGFwcGxpZXMgbWlkZGxld2FyZSB0byB0aGUgZGlzcGF0Y2ggbWV0aG9kXG4gKiBvZiB0aGUgUmVkdXggc3RvcmUuIFRoaXMgaXMgaGFuZHkgZm9yIGEgdmFyaWV0eSBvZiB0YXNrcywgc3VjaCBhcyBleHByZXNzaW5nXG4gKiBhc3luY2hyb25vdXMgYWN0aW9ucyBpbiBhIGNvbmNpc2UgbWFubmVyLCBvciBsb2dnaW5nIGV2ZXJ5IGFjdGlvbiBwYXlsb2FkLlxuICpcbiAqIFNlZSBgcmVkdXgtdGh1bmtgIHBhY2thZ2UgYXMgYW4gZXhhbXBsZSBvZiB0aGUgUmVkdXggbWlkZGxld2FyZS5cbiAqXG4gKiBCZWNhdXNlIG1pZGRsZXdhcmUgaXMgcG90ZW50aWFsbHkgYXN5bmNocm9ub3VzLCB0aGlzIHNob3VsZCBiZSB0aGUgZmlyc3RcbiAqIHN0b3JlIGVuaGFuY2VyIGluIHRoZSBjb21wb3NpdGlvbiBjaGFpbi5cbiAqXG4gKiBOb3RlIHRoYXQgZWFjaCBtaWRkbGV3YXJlIHdpbGwgYmUgZ2l2ZW4gdGhlIGBkaXNwYXRjaGAgYW5kIGBnZXRTdGF0ZWAgZnVuY3Rpb25zXG4gKiBhcyBuYW1lZCBhcmd1bWVudHMuXG4gKlxuICogQHBhcmFtIHsuLi5GdW5jdGlvbn0gbWlkZGxld2FyZXMgVGhlIG1pZGRsZXdhcmUgY2hhaW4gdG8gYmUgYXBwbGllZC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBzdG9yZSBlbmhhbmNlciBhcHBseWluZyB0aGUgbWlkZGxld2FyZS5cbiAqL1xuXG5mdW5jdGlvbiBhcHBseU1pZGRsZXdhcmUoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBtaWRkbGV3YXJlcyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBtaWRkbGV3YXJlc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoY3JlYXRlU3RvcmUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHN0b3JlID0gY3JlYXRlU3RvcmUuYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpO1xuXG4gICAgICB2YXIgX2Rpc3BhdGNoID0gZnVuY3Rpb24gZGlzcGF0Y2goKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRGlzcGF0Y2hpbmcgd2hpbGUgY29uc3RydWN0aW5nIHlvdXIgbWlkZGxld2FyZSBpcyBub3QgYWxsb3dlZC4gJyArICdPdGhlciBtaWRkbGV3YXJlIHdvdWxkIG5vdCBiZSBhcHBsaWVkIHRvIHRoaXMgZGlzcGF0Y2guJyk7XG4gICAgICB9O1xuXG4gICAgICB2YXIgbWlkZGxld2FyZUFQSSA9IHtcbiAgICAgICAgZ2V0U3RhdGU6IHN0b3JlLmdldFN0YXRlLFxuICAgICAgICBkaXNwYXRjaDogZnVuY3Rpb24gZGlzcGF0Y2goKSB7XG4gICAgICAgICAgcmV0dXJuIF9kaXNwYXRjaC5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cyk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICB2YXIgY2hhaW4gPSBtaWRkbGV3YXJlcy5tYXAoZnVuY3Rpb24gKG1pZGRsZXdhcmUpIHtcbiAgICAgICAgcmV0dXJuIG1pZGRsZXdhcmUobWlkZGxld2FyZUFQSSk7XG4gICAgICB9KTtcbiAgICAgIF9kaXNwYXRjaCA9IGNvbXBvc2UuYXBwbHkodm9pZCAwLCBjaGFpbikoc3RvcmUuZGlzcGF0Y2gpO1xuICAgICAgcmV0dXJuIF9vYmplY3RTcHJlYWQyKHt9LCBzdG9yZSwge1xuICAgICAgICBkaXNwYXRjaDogX2Rpc3BhdGNoXG4gICAgICB9KTtcbiAgICB9O1xuICB9O1xufVxuXG4vKlxuICogVGhpcyBpcyBhIGR1bW15IGZ1bmN0aW9uIHRvIGNoZWNrIGlmIHRoZSBmdW5jdGlvbiBuYW1lIGhhcyBiZWVuIGFsdGVyZWQgYnkgbWluaWZpY2F0aW9uLlxuICogSWYgdGhlIGZ1bmN0aW9uIGhhcyBiZWVuIG1pbmlmaWVkIGFuZCBOT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nLCB3YXJuIHRoZSB1c2VyLlxuICovXG5cbmZ1bmN0aW9uIGlzQ3J1c2hlZCgpIHt9XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHR5cGVvZiBpc0NydXNoZWQubmFtZSA9PT0gJ3N0cmluZycgJiYgaXNDcnVzaGVkLm5hbWUgIT09ICdpc0NydXNoZWQnKSB7XG4gIHdhcm5pbmcoJ1lvdSBhcmUgY3VycmVudGx5IHVzaW5nIG1pbmlmaWVkIGNvZGUgb3V0c2lkZSBvZiBOT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIuICcgKyAnVGhpcyBtZWFucyB0aGF0IHlvdSBhcmUgcnVubmluZyBhIHNsb3dlciBkZXZlbG9wbWVudCBidWlsZCBvZiBSZWR1eC4gJyArICdZb3UgY2FuIHVzZSBsb29zZS1lbnZpZnkgKGh0dHBzOi8vZ2l0aHViLmNvbS96ZXJ0b3NoL2xvb3NlLWVudmlmeSkgZm9yIGJyb3dzZXJpZnkgJyArICdvciBzZXR0aW5nIG1vZGUgdG8gcHJvZHVjdGlvbiBpbiB3ZWJwYWNrIChodHRwczovL3dlYnBhY2suanMub3JnL2NvbmNlcHRzL21vZGUvKSAnICsgJ3RvIGVuc3VyZSB5b3UgaGF2ZSB0aGUgY29ycmVjdCBjb2RlIGZvciB5b3VyIHByb2R1Y3Rpb24gYnVpbGQuJyk7XG59XG5cbmV4cG9ydCB7IEFjdGlvblR5cGVzIGFzIF9fRE9fTk9UX1VTRV9fQWN0aW9uVHlwZXMsIGFwcGx5TWlkZGxld2FyZSwgYmluZEFjdGlvbkNyZWF0b3JzLCBjb21iaW5lUmVkdWNlcnMsIGNvbXBvc2UsIGNyZWF0ZVN0b3JlIH07XG4iLCIvKiBnbG9iYWwgd2luZG93ICovXG5pbXBvcnQgcG9ueWZpbGwgZnJvbSAnLi9wb255ZmlsbC5qcyc7XG5cbnZhciByb290O1xuXG5pZiAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJvb3QgPSBzZWxmO1xufSBlbHNlIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICByb290ID0gd2luZG93O1xufSBlbHNlIGlmICh0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJykge1xuICByb290ID0gZ2xvYmFsO1xufSBlbHNlIGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJykge1xuICByb290ID0gbW9kdWxlO1xufSBlbHNlIHtcbiAgcm9vdCA9IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG59XG5cbnZhciByZXN1bHQgPSBwb255ZmlsbChyb290KTtcbmV4cG9ydCBkZWZhdWx0IHJlc3VsdDtcbiIsIi8qXG5vYmplY3QtYXNzaWduXG4oYykgU2luZHJlIFNvcmh1c1xuQGxpY2Vuc2UgTUlUXG4qL1xuXG4ndXNlIHN0cmljdCc7XG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIHByb3BJc0VudW1lcmFibGUgPSBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG5mdW5jdGlvbiB0b09iamVjdCh2YWwpIHtcblx0aWYgKHZhbCA9PT0gbnVsbCB8fCB2YWwgPT09IHVuZGVmaW5lZCkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ09iamVjdC5hc3NpZ24gY2Fubm90IGJlIGNhbGxlZCB3aXRoIG51bGwgb3IgdW5kZWZpbmVkJyk7XG5cdH1cblxuXHRyZXR1cm4gT2JqZWN0KHZhbCk7XG59XG5cbmZ1bmN0aW9uIHNob3VsZFVzZU5hdGl2ZSgpIHtcblx0dHJ5IHtcblx0XHRpZiAoIU9iamVjdC5hc3NpZ24pIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBEZXRlY3QgYnVnZ3kgcHJvcGVydHkgZW51bWVyYXRpb24gb3JkZXIgaW4gb2xkZXIgVjggdmVyc2lvbnMuXG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD00MTE4XG5cdFx0dmFyIHRlc3QxID0gbmV3IFN0cmluZygnYWJjJyk7ICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ldy13cmFwcGVyc1xuXHRcdHRlc3QxWzVdID0gJ2RlJztcblx0XHRpZiAoT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDEpWzBdID09PSAnNScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QyID0ge307XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCAxMDsgaSsrKSB7XG5cdFx0XHR0ZXN0MlsnXycgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKGkpXSA9IGk7XG5cdFx0fVxuXHRcdHZhciBvcmRlcjIgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MikubWFwKGZ1bmN0aW9uIChuKSB7XG5cdFx0XHRyZXR1cm4gdGVzdDJbbl07XG5cdFx0fSk7XG5cdFx0aWYgKG9yZGVyMi5qb2luKCcnKSAhPT0gJzAxMjM0NTY3ODknKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MyA9IHt9O1xuXHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24gKGxldHRlcikge1xuXHRcdFx0dGVzdDNbbGV0dGVyXSA9IGxldHRlcjtcblx0XHR9KTtcblx0XHRpZiAoT2JqZWN0LmtleXMoT2JqZWN0LmFzc2lnbih7fSwgdGVzdDMpKS5qb2luKCcnKSAhPT1cblx0XHRcdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHJldHVybiB0cnVlO1xuXHR9IGNhdGNoIChlcnIpIHtcblx0XHQvLyBXZSBkb24ndCBleHBlY3QgYW55IG9mIHRoZSBhYm92ZSB0byB0aHJvdywgYnV0IGJldHRlciB0byBiZSBzYWZlLlxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNob3VsZFVzZU5hdGl2ZSgpID8gT2JqZWN0LmFzc2lnbiA6IGZ1bmN0aW9uICh0YXJnZXQsIHNvdXJjZSkge1xuXHR2YXIgZnJvbTtcblx0dmFyIHRvID0gdG9PYmplY3QodGFyZ2V0KTtcblx0dmFyIHN5bWJvbHM7XG5cblx0Zm9yICh2YXIgcyA9IDE7IHMgPCBhcmd1bWVudHMubGVuZ3RoOyBzKyspIHtcblx0XHRmcm9tID0gT2JqZWN0KGFyZ3VtZW50c1tzXSk7XG5cblx0XHRmb3IgKHZhciBrZXkgaW4gZnJvbSkge1xuXHRcdFx0aWYgKGhhc093blByb3BlcnR5LmNhbGwoZnJvbSwga2V5KSkge1xuXHRcdFx0XHR0b1trZXldID0gZnJvbVtrZXldO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcblx0XHRcdHN5bWJvbHMgPSBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZnJvbSk7XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHN5bWJvbHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0aWYgKHByb3BJc0VudW1lcmFibGUuY2FsbChmcm9tLCBzeW1ib2xzW2ldKSkge1xuXHRcdFx0XHRcdHRvW3N5bWJvbHNbaV1dID0gZnJvbVtzeW1ib2xzW2ldXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB0bztcbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqL1xuXG5mdW5jdGlvbiBtYWtlRW1wdHlGdW5jdGlvbihhcmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gYXJnO1xuICB9O1xufVxuXG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gYWNjZXB0cyBhbmQgZGlzY2FyZHMgaW5wdXRzOyBpdCBoYXMgbm8gc2lkZSBlZmZlY3RzLiBUaGlzIGlzXG4gKiBwcmltYXJpbHkgdXNlZnVsIGlkaW9tYXRpY2FsbHkgZm9yIG92ZXJyaWRhYmxlIGZ1bmN0aW9uIGVuZHBvaW50cyB3aGljaFxuICogYWx3YXlzIG5lZWQgdG8gYmUgY2FsbGFibGUsIHNpbmNlIEpTIGxhY2tzIGEgbnVsbC1jYWxsIGlkaW9tIGFsYSBDb2NvYS5cbiAqL1xudmFyIGVtcHR5RnVuY3Rpb24gPSBmdW5jdGlvbiBlbXB0eUZ1bmN0aW9uKCkge307XG5cbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnMgPSBtYWtlRW1wdHlGdW5jdGlvbjtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNGYWxzZSA9IG1ha2VFbXB0eUZ1bmN0aW9uKGZhbHNlKTtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNUcnVlID0gbWFrZUVtcHR5RnVuY3Rpb24odHJ1ZSk7XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zTnVsbCA9IG1ha2VFbXB0eUZ1bmN0aW9uKG51bGwpO1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc1RoaXMgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzO1xufTtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNBcmd1bWVudCA9IGZ1bmN0aW9uIChhcmcpIHtcbiAgcmV0dXJuIGFyZztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZW1wdHlGdW5jdGlvbjsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEB0eXBlY2hlY2tzXG4gKiBcbiAqL1xuXG4vKmVzbGludC1kaXNhYmxlIG5vLXNlbGYtY29tcGFyZSAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogaW5saW5lZCBPYmplY3QuaXMgcG9seWZpbGwgdG8gYXZvaWQgcmVxdWlyaW5nIGNvbnN1bWVycyBzaGlwIHRoZWlyIG93blxuICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvT2JqZWN0L2lzXG4gKi9cbmZ1bmN0aW9uIGlzKHgsIHkpIHtcbiAgLy8gU2FtZVZhbHVlIGFsZ29yaXRobVxuICBpZiAoeCA9PT0geSkge1xuICAgIC8vIFN0ZXBzIDEtNSwgNy0xMFxuICAgIC8vIFN0ZXBzIDYuYi02LmU6ICswICE9IC0wXG4gICAgLy8gQWRkZWQgdGhlIG5vbnplcm8geSBjaGVjayB0byBtYWtlIEZsb3cgaGFwcHksIGJ1dCBpdCBpcyByZWR1bmRhbnRcbiAgICByZXR1cm4geCAhPT0gMCB8fCB5ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geTtcbiAgfSBlbHNlIHtcbiAgICAvLyBTdGVwIDYuYTogTmFOID09IE5hTlxuICAgIHJldHVybiB4ICE9PSB4ICYmIHkgIT09IHk7XG4gIH1cbn1cblxuLyoqXG4gKiBQZXJmb3JtcyBlcXVhbGl0eSBieSBpdGVyYXRpbmcgdGhyb3VnaCBrZXlzIG9uIGFuIG9iamVjdCBhbmQgcmV0dXJuaW5nIGZhbHNlXG4gKiB3aGVuIGFueSBrZXkgaGFzIHZhbHVlcyB3aGljaCBhcmUgbm90IHN0cmljdGx5IGVxdWFsIGJldHdlZW4gdGhlIGFyZ3VtZW50cy5cbiAqIFJldHVybnMgdHJ1ZSB3aGVuIHRoZSB2YWx1ZXMgb2YgYWxsIGtleXMgYXJlIHN0cmljdGx5IGVxdWFsLlxuICovXG5mdW5jdGlvbiBzaGFsbG93RXF1YWwob2JqQSwgb2JqQikge1xuICBpZiAoaXMob2JqQSwgb2JqQikpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygb2JqQSAhPT0gJ29iamVjdCcgfHwgb2JqQSA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqQiAhPT0gJ29iamVjdCcgfHwgb2JqQiA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBrZXlzQSA9IE9iamVjdC5rZXlzKG9iakEpO1xuICB2YXIga2V5c0IgPSBPYmplY3Qua2V5cyhvYmpCKTtcblxuICBpZiAoa2V5c0EubGVuZ3RoICE9PSBrZXlzQi5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvLyBUZXN0IGZvciBBJ3Mga2V5cyBkaWZmZXJlbnQgZnJvbSBCLlxuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXNBLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKCFoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iakIsIGtleXNBW2ldKSB8fCAhaXMob2JqQVtrZXlzQVtpXV0sIG9iakJba2V5c0FbaV1dKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNoYWxsb3dFcXVhbDsiLCJpbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudCc7XHJcblxyXG5jb25zdCBnZXRWaXNpYmxlRXhwZW5zZXMgPSAoZXhwZW5zZXMsIHsgdGV4dCwgc29ydEJ5LCBzdGFydERhdGUsIGVuZERhdGUgfSk9PntcclxuICByZXR1cm4gZXhwZW5zZXMuZmlsdGVyKChleHBlbnNlKT0+e1xyXG4gICAgY29uc3QgY3JlYXRlZEF0TW9tZW50ID0gbW9tZW50KGV4cGVuc2UuY3JlYXRlZEF0KTtcclxuXHJcbiAgICBjb25zdCBzdGFydERhdGVNYXRjaCA9IHN0YXJ0RGF0ZSA/IHN0YXJ0RGF0ZS5pc1NhbWVPckJlZm9yZShjcmVhdGVkQXRNb21lbnQsICdkYXknKSA6IHRydWU7XHJcbiAgICBjb25zdCBlbmREYXRlTWF0Y2ggPSBlbmREYXRlID8gZW5kRGF0ZS5pc1NhbWVPckFmdGVyKGNyZWF0ZWRBdE1vbWVudCwgJ2RheScpIDogdHJ1ZTtcclxuICAgIGNvbnN0IHRleHRNYXRjaCA9IGV4cGVuc2UuZGVzY3JpcHRpb24udG9Mb3dlckNhc2UoKS5pbmNsdWRlcyh0ZXh0LnRvTG93ZXJDYXNlKCkpO1xyXG4gICAgcmV0dXJuIHN0YXJ0RGF0ZU1hdGNoICYmIGVuZERhdGVNYXRjaCAmJiB0ZXh0TWF0Y2g7XHJcbiAgfSkuc29ydCgoYSwgYik9PntcclxuICAgIGlmKHNvcnRCeSA9PT0gJ2RhdGUnKXtcclxuICAgICAgcmV0dXJuIGEuY3JlYXRlZEF0IDwgYi5jcmVhdGVkQXQgPyAxIDogLTE7XHJcbiAgICB9ZWxzZSBpZihzb3J0QnkgPT09ICdhbW91bnQnKXtcclxuICAgICAgcmV0dXJuIGEuYW1vdW50IDwgYi5hbW91bnQgPyAxIDogLTE7XHJcbiAgICB9XHJcbiAgfSk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBnZXRWaXNpYmxlRXhwZW5zZXM7IiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEFmcmlrYWFucyBbYWZdXG4vLyEgYXV0aG9yIDogV2VybmVyIE1vbGxlbnR6ZSA6IGh0dHBzOi8vZ2l0aHViLmNvbS93ZXJuZXJtXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxudmFyIGFmID0gbW9tZW50LmRlZmluZUxvY2FsZSgnYWYnLCB7XG4gICAgbW9udGhzIDogJ0phbnVhcmllX0ZlYnJ1YXJpZV9NYWFydF9BcHJpbF9NZWlfSnVuaWVfSnVsaWVfQXVndXN0dXNfU2VwdGVtYmVyX09rdG9iZXJfTm92ZW1iZXJfRGVzZW1iZXInLnNwbGl0KCdfJyksXG4gICAgbW9udGhzU2hvcnQgOiAnSmFuX0ZlYl9NcnRfQXByX01laV9KdW5fSnVsX0F1Z19TZXBfT2t0X05vdl9EZXMnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXMgOiAnU29uZGFnX01hYW5kYWdfRGluc2RhZ19Xb2Vuc2RhZ19Eb25kZXJkYWdfVnJ5ZGFnX1NhdGVyZGFnJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzU2hvcnQgOiAnU29uX01hYV9EaW5fV29lX0Rvbl9WcnlfU2F0Jy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzTWluIDogJ1NvX01hX0RpX1dvX0RvX1ZyX1NhJy5zcGxpdCgnXycpLFxuICAgIG1lcmlkaWVtUGFyc2U6IC92bXxubS9pLFxuICAgIGlzUE0gOiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIC9ebm0kL2kudGVzdChpbnB1dCk7XG4gICAgfSxcbiAgICBtZXJpZGllbSA6IGZ1bmN0aW9uIChob3VycywgbWludXRlcywgaXNMb3dlcikge1xuICAgICAgICBpZiAoaG91cnMgPCAxMikge1xuICAgICAgICAgICAgcmV0dXJuIGlzTG93ZXIgPyAndm0nIDogJ1ZNJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBpc0xvd2VyID8gJ25tJyA6ICdOTSc7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgTExMTCA6ICdkZGRkLCBEIE1NTU0gWVlZWSBISDptbSdcbiAgICB9LFxuICAgIGNhbGVuZGFyIDoge1xuICAgICAgICBzYW1lRGF5IDogJ1tWYW5kYWcgb21dIExUJyxcbiAgICAgICAgbmV4dERheSA6ICdbTcO0cmUgb21dIExUJyxcbiAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCBbb21dIExUJyxcbiAgICAgICAgbGFzdERheSA6ICdbR2lzdGVyIG9tXSBMVCcsXG4gICAgICAgIGxhc3RXZWVrIDogJ1tMYWFzXSBkZGRkIFtvbV0gTFQnLFxuICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgIH0sXG4gICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICBmdXR1cmUgOiAnb29yICVzJyxcbiAgICAgICAgcGFzdCA6ICclcyBnZWxlZGUnLFxuICAgICAgICBzIDogJ1xcJ24gcGFhciBzZWtvbmRlcycsXG4gICAgICAgIG0gOiAnXFwnbiBtaW51dXQnLFxuICAgICAgICBtbSA6ICclZCBtaW51dGUnLFxuICAgICAgICBoIDogJ1xcJ24gdXVyJyxcbiAgICAgICAgaGggOiAnJWQgdXJlJyxcbiAgICAgICAgZCA6ICdcXCduIGRhZycsXG4gICAgICAgIGRkIDogJyVkIGRhZScsXG4gICAgICAgIE0gOiAnXFwnbiBtYWFuZCcsXG4gICAgICAgIE1NIDogJyVkIG1hYW5kZScsXG4gICAgICAgIHkgOiAnXFwnbiBqYWFyJyxcbiAgICAgICAgeXkgOiAnJWQgamFhcidcbiAgICB9LFxuICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfShzdGV8ZGUpLyxcbiAgICBvcmRpbmFsIDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICByZXR1cm4gbnVtYmVyICsgKChudW1iZXIgPT09IDEgfHwgbnVtYmVyID09PSA4IHx8IG51bWJlciA+PSAyMCkgPyAnc3RlJyA6ICdkZScpOyAvLyBUaGFua3MgdG8gSm9yaXMgUsO2bGluZyA6IGh0dHBzOi8vZ2l0aHViLmNvbS9qanVwaXRlclxuICAgIH0sXG4gICAgd2VlayA6IHtcbiAgICAgICAgZG93IDogMSwgLy8gTWFhbmRhZyBpcyBkaWUgZWVyc3RlIGRhZyB2YW4gZGllIHdlZWsuXG4gICAgICAgIGRveSA6IDQgIC8vIERpZSB3ZWVrIHdhdCBkaWUgNGRlIEphbnVhcmllIGJldmF0IGlzIGRpZSBlZXJzdGUgd2VlayB2YW4gZGllIGphYXIuXG4gICAgfVxufSk7XG5cbnJldHVybiBhZjtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBBcmFiaWMgW2FyXVxuLy8hIGF1dGhvciA6IEFiZGVsIFNhaWQ6IGh0dHBzOi8vZ2l0aHViLmNvbS9hYmRlbHNhaWRcbi8vISBhdXRob3IgOiBBaG1lZCBFbGtoYXRpYlxuLy8hIGF1dGhvciA6IGZvcmFiaSBodHRwczovL2dpdGh1Yi5jb20vZm9yYWJpXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxudmFyIHN5bWJvbE1hcCA9IHtcbiAgICAnMSc6ICfZoScsXG4gICAgJzInOiAn2aInLFxuICAgICczJzogJ9mjJyxcbiAgICAnNCc6ICfZpCcsXG4gICAgJzUnOiAn2aUnLFxuICAgICc2JzogJ9mmJyxcbiAgICAnNyc6ICfZpycsXG4gICAgJzgnOiAn2agnLFxuICAgICc5JzogJ9mpJyxcbiAgICAnMCc6ICfZoCdcbn07XG52YXIgbnVtYmVyTWFwID0ge1xuICAgICfZoSc6ICcxJyxcbiAgICAn2aInOiAnMicsXG4gICAgJ9mjJzogJzMnLFxuICAgICfZpCc6ICc0JyxcbiAgICAn2aUnOiAnNScsXG4gICAgJ9mmJzogJzYnLFxuICAgICfZpyc6ICc3JyxcbiAgICAn2agnOiAnOCcsXG4gICAgJ9mpJzogJzknLFxuICAgICfZoCc6ICcwJ1xufTtcbnZhciBwbHVyYWxGb3JtID0gZnVuY3Rpb24gKG4pIHtcbiAgICByZXR1cm4gbiA9PT0gMCA/IDAgOiBuID09PSAxID8gMSA6IG4gPT09IDIgPyAyIDogbiAlIDEwMCA+PSAzICYmIG4gJSAxMDAgPD0gMTAgPyAzIDogbiAlIDEwMCA+PSAxMSA/IDQgOiA1O1xufTtcbnZhciBwbHVyYWxzID0ge1xuICAgIHMgOiBbJ9ij2YLZhCDZhdmGINir2KfZhtmK2KknLCAn2KvYp9mG2YrYqSDZiNin2K3Yr9ipJywgWyfYq9in2YbZitiq2KfZhicsICfYq9in2YbZitiq2YrZhiddLCAnJWQg2KvZiNin2YYnLCAnJWQg2KvYp9mG2YrYqScsICclZCDYq9in2YbZitipJ10sXG4gICAgbSA6IFsn2KPZgtmEINmF2YYg2K/ZgtmK2YLYqScsICfYr9mC2YrZgtipINmI2KfYrdiv2KknLCBbJ9iv2YLZitmC2KrYp9mGJywgJ9iv2YLZitmC2KrZitmGJ10sICclZCDYr9mC2KfYptmCJywgJyVkINiv2YLZitmC2KknLCAnJWQg2K/ZgtmK2YLYqSddLFxuICAgIGggOiBbJ9ij2YLZhCDZhdmGINiz2KfYudipJywgJ9iz2KfYudipINmI2KfYrdiv2KknLCBbJ9iz2KfYudiq2KfZhicsICfYs9in2LnYqtmK2YYnXSwgJyVkINiz2KfYudin2KonLCAnJWQg2LPYp9i52KknLCAnJWQg2LPYp9i52KknXSxcbiAgICBkIDogWyfYo9mC2YQg2YXZhiDZitmI2YUnLCAn2YrZiNmFINmI2KfYrdivJywgWyfZitmI2YXYp9mGJywgJ9mK2YjZhdmK2YYnXSwgJyVkINij2YrYp9mFJywgJyVkINmK2YjZhdmL2KcnLCAnJWQg2YrZiNmFJ10sXG4gICAgTSA6IFsn2KPZgtmEINmF2YYg2LTZh9ixJywgJ9i02YfYsSDZiNin2K3YrycsIFsn2LTZh9ix2KfZhicsICfYtNmH2LHZitmGJ10sICclZCDYo9i02YfYsScsICclZCDYtNmH2LHYpycsICclZCDYtNmH2LEnXSxcbiAgICB5IDogWyfYo9mC2YQg2YXZhiDYudin2YUnLCAn2LnYp9mFINmI2KfYrdivJywgWyfYudin2YXYp9mGJywgJ9i52KfZhdmK2YYnXSwgJyVkINij2LnZiNin2YUnLCAnJWQg2LnYp9mF2YvYpycsICclZCDYudin2YUnXVxufTtcbnZhciBwbHVyYWxpemUgPSBmdW5jdGlvbiAodSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAobnVtYmVyLCB3aXRob3V0U3VmZml4LCBzdHJpbmcsIGlzRnV0dXJlKSB7XG4gICAgICAgIHZhciBmID0gcGx1cmFsRm9ybShudW1iZXIpLFxuICAgICAgICAgICAgc3RyID0gcGx1cmFsc1t1XVtwbHVyYWxGb3JtKG51bWJlcildO1xuICAgICAgICBpZiAoZiA9PT0gMikge1xuICAgICAgICAgICAgc3RyID0gc3RyW3dpdGhvdXRTdWZmaXggPyAwIDogMV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN0ci5yZXBsYWNlKC8lZC9pLCBudW1iZXIpO1xuICAgIH07XG59O1xudmFyIG1vbnRocyA9IFtcbiAgICAn2YPYp9mG2YjZhiDYp9mE2KvYp9mG2Yog2YrZhtin2YrYsScsXG4gICAgJ9i02KjYp9i3INmB2KjYsdin2YrYsScsXG4gICAgJ9ii2LDYp9ixINmF2KfYsdizJyxcbiAgICAn2YbZitiz2KfZhiDYo9io2LHZitmEJyxcbiAgICAn2KPZitin2LEg2YXYp9mK2YgnLFxuICAgICfYrdiy2YrYsdin2YYg2YrZiNmG2YrZiCcsXG4gICAgJ9iq2YXZiNiyINmK2YjZhNmK2YgnLFxuICAgICfYotioINij2LrYs9i32LMnLFxuICAgICfYo9mK2YTZiNmEINiz2KjYqtmF2KjYsScsXG4gICAgJ9iq2LTYsdmK2YYg2KfZhNij2YjZhCDYo9mD2KrZiNio2LEnLFxuICAgICfYqti02LHZitmGINin2YTYq9in2YbZiiDZhtmI2YHZhdio2LEnLFxuICAgICfZg9in2YbZiNmGINin2YTYo9mI2YQg2K/Zitiz2YXYqNixJ1xuXTtcblxudmFyIGFyID0gbW9tZW50LmRlZmluZUxvY2FsZSgnYXInLCB7XG4gICAgbW9udGhzIDogbW9udGhzLFxuICAgIG1vbnRoc1Nob3J0IDogbW9udGhzLFxuICAgIHdlZWtkYXlzIDogJ9in2YTYo9it2K9f2KfZhNil2KvZhtmK2YZf2KfZhNir2YTYp9ir2KfYoV/Yp9mE2KPYsdio2LnYp9ihX9in2YTYrtmF2YrYs1/Yp9mE2KzZhdi52Klf2KfZhNiz2KjYqicuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1Nob3J0IDogJ9ij2K3Yr1/Ypdir2YbZitmGX9ir2YTYp9ir2KfYoV/Yo9ix2KjYudin2KFf2K7ZhdmK2LNf2KzZhdi52Klf2LPYqNiqJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzTWluIDogJ9itX9mGX9irX9ixX9iuX9isX9izJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgTCA6ICdEL1xcdTIwMEZNL1xcdTIwMEZZWVlZJyxcbiAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICBMTExMIDogJ2RkZGQgRCBNTU1NIFlZWVkgSEg6bW0nXG4gICAgfSxcbiAgICBtZXJpZGllbVBhcnNlOiAv2LV82YUvLFxuICAgIGlzUE0gOiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuICfZhScgPT09IGlucHV0O1xuICAgIH0sXG4gICAgbWVyaWRpZW0gOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgIGlmIChob3VyIDwgMTIpIHtcbiAgICAgICAgICAgIHJldHVybiAn2LUnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuICfZhSc7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIGNhbGVuZGFyIDoge1xuICAgICAgICBzYW1lRGF5OiAnW9in2YTZitmI2YUg2LnZhtivINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICBuZXh0RGF5OiAnW9i62K/Zi9inINi52YbYryDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFvYudmG2K8g2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgIGxhc3REYXk6ICdb2KPZhdizINi52YbYryDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgbGFzdFdlZWs6ICdkZGRkIFvYudmG2K8g2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgIHNhbWVFbHNlOiAnTCdcbiAgICB9LFxuICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgZnV0dXJlIDogJ9io2LnYryAlcycsXG4gICAgICAgIHBhc3QgOiAn2YXZhtiwICVzJyxcbiAgICAgICAgcyA6IHBsdXJhbGl6ZSgncycpLFxuICAgICAgICBtIDogcGx1cmFsaXplKCdtJyksXG4gICAgICAgIG1tIDogcGx1cmFsaXplKCdtJyksXG4gICAgICAgIGggOiBwbHVyYWxpemUoJ2gnKSxcbiAgICAgICAgaGggOiBwbHVyYWxpemUoJ2gnKSxcbiAgICAgICAgZCA6IHBsdXJhbGl6ZSgnZCcpLFxuICAgICAgICBkZCA6IHBsdXJhbGl6ZSgnZCcpLFxuICAgICAgICBNIDogcGx1cmFsaXplKCdNJyksXG4gICAgICAgIE1NIDogcGx1cmFsaXplKCdNJyksXG4gICAgICAgIHkgOiBwbHVyYWxpemUoJ3knKSxcbiAgICAgICAgeXkgOiBwbHVyYWxpemUoJ3knKVxuICAgIH0sXG4gICAgcHJlcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9cXHUyMDBmL2csICcnKS5yZXBsYWNlKC9b2aHZotmj2aTZpdmm2afZqNmp2aBdL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlck1hcFttYXRjaF07XG4gICAgICAgIH0pLnJlcGxhY2UoL9iML2csICcsJyk7XG4gICAgfSxcbiAgICBwb3N0Zm9ybWF0OiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvXFxkL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgcmV0dXJuIHN5bWJvbE1hcFttYXRjaF07XG4gICAgICAgIH0pLnJlcGxhY2UoLywvZywgJ9iMJyk7XG4gICAgfSxcbiAgICB3ZWVrIDoge1xuICAgICAgICBkb3cgOiA2LCAvLyBTYXR1cmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICBkb3kgOiAxMiAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gMXN0IGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgIH1cbn0pO1xuXG5yZXR1cm4gYXI7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogQXJhYmljIChBbGdlcmlhKSBbYXItZHpdXG4vLyEgYXV0aG9yIDogTm91cmVkZGluZSBMT1VBSEVESiA6IGh0dHBzOi8vZ2l0aHViLmNvbS9ub3VyZWRkaW5lbWVcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG52YXIgYXJEeiA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2FyLWR6Jywge1xuICAgIG1vbnRocyA6ICfYrNin2YbZgdmKX9mB2YrZgdix2Ypf2YXYp9ix2LNf2KPZgdix2YrZhF/Zhdin2Ypf2KzZiNin2YZf2KzZiNmK2YTZitipX9ij2YjYql/Ys9io2KrZhdio2LFf2KPZg9iq2YjYqNixX9mG2YjZgdmF2KjYsV/Yr9mK2LPZhdio2LEnLnNwbGl0KCdfJyksXG4gICAgbW9udGhzU2hvcnQgOiAn2KzYp9mG2YHZil/ZgdmK2YHYsdmKX9mF2KfYsdizX9ij2YHYsdmK2YRf2YXYp9mKX9is2YjYp9mGX9is2YjZitmE2YrYqV/Yo9mI2Kpf2LPYqNiq2YXYqNixX9ij2YPYqtmI2KjYsV/ZhtmI2YHZhdio2LFf2K/Zitiz2YXYqNixJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzIDogJ9in2YTYo9it2K9f2KfZhNil2KvZhtmK2YZf2KfZhNir2YTYp9ir2KfYoV/Yp9mE2KPYsdio2LnYp9ihX9in2YTYrtmF2YrYs1/Yp9mE2KzZhdi52Klf2KfZhNiz2KjYqicuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1Nob3J0IDogJ9in2K3Yr1/Yp9ir2YbZitmGX9ir2YTYp9ir2KfYoV/Yp9ix2KjYudin2KFf2K7ZhdmK2LNf2KzZhdi52Klf2LPYqNiqJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzTWluIDogJ9ij2K1f2KXYq1/Yq9mE2Kdf2KPYsV/YrtmFX9is2YVf2LPYqCcuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgTExMTCA6ICdkZGRkIEQgTU1NTSBZWVlZIEhIOm1tJ1xuICAgIH0sXG4gICAgY2FsZW5kYXIgOiB7XG4gICAgICAgIHNhbWVEYXk6ICdb2KfZhNmK2YjZhSDYudmE2Ykg2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgIG5leHREYXk6ICdb2LrYr9inINi52YTZiSDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFvYudmE2Ykg2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgIGxhc3REYXk6ICdb2KPZhdizINi52YTZiSDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgbGFzdFdlZWs6ICdkZGRkIFvYudmE2Ykg2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgIHNhbWVFbHNlOiAnTCdcbiAgICB9LFxuICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgZnV0dXJlIDogJ9mB2YogJXMnLFxuICAgICAgICBwYXN0IDogJ9mF2YbYsCAlcycsXG4gICAgICAgIHMgOiAn2KvZiNin2YYnLFxuICAgICAgICBtIDogJ9iv2YLZitmC2KknLFxuICAgICAgICBtbSA6ICclZCDYr9mC2KfYptmCJyxcbiAgICAgICAgaCA6ICfYs9in2LnYqScsXG4gICAgICAgIGhoIDogJyVkINiz2KfYudin2KonLFxuICAgICAgICBkIDogJ9mK2YjZhScsXG4gICAgICAgIGRkIDogJyVkINij2YrYp9mFJyxcbiAgICAgICAgTSA6ICfYtNmH2LEnLFxuICAgICAgICBNTSA6ICclZCDYo9i02YfYsScsXG4gICAgICAgIHkgOiAn2LPZhtipJyxcbiAgICAgICAgeXkgOiAnJWQg2LPZhtmI2KfYqidcbiAgICB9LFxuICAgIHdlZWsgOiB7XG4gICAgICAgIGRvdyA6IDAsIC8vIFN1bmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiAxc3QgaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgfVxufSk7XG5cbnJldHVybiBhckR6O1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEFyYWJpYyAoS3V3YWl0KSBbYXIta3ddXG4vLyEgYXV0aG9yIDogTnVzcmV0IFBhcmxhazogaHR0cHM6Ly9naXRodWIuY29tL251c3JldHBhcmxha1xuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciBhckt3ID0gbW9tZW50LmRlZmluZUxvY2FsZSgnYXIta3cnLCB7XG4gICAgbW9udGhzIDogJ9mK2YbYp9mK2LFf2YHYqNix2KfZitixX9mF2KfYsdizX9ij2KjYsdmK2YRf2YXYp9mKX9mK2YjZhtmK2Yhf2YrZiNmE2YrZiNiyX9i62LTYql/YtNiq2YbYqNixX9ij2YPYqtmI2KjYsV/ZhtmI2YbYqNixX9iv2KzZhtio2LEnLnNwbGl0KCdfJyksXG4gICAgbW9udGhzU2hvcnQgOiAn2YrZhtin2YrYsV/Zgdio2LHYp9mK2LFf2YXYp9ix2LNf2KPYqNix2YrZhF/Zhdin2Ypf2YrZiNmG2YrZiF/ZitmI2YTZitmI2LJf2LrYtNiqX9i02KrZhtio2LFf2KPZg9iq2YjYqNixX9mG2YjZhtio2LFf2K/YrNmG2KjYsScuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5cyA6ICfYp9mE2KPYrdivX9in2YTYpdiq2YbZitmGX9in2YTYq9mE2KfYq9in2KFf2KfZhNij2LHYqNi52KfYoV/Yp9mE2K7ZhdmK2LNf2KfZhNis2YXYudipX9in2YTYs9io2KonLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNTaG9ydCA6ICfYp9it2K9f2KfYqtmG2YrZhl/Yq9mE2KfYq9in2KFf2KfYsdio2LnYp9ihX9iu2YXZitizX9is2YXYudipX9iz2KjYqicuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c01pbiA6ICfYrV/Zhl/Yq1/YsV/Yrl/YrF/Ysycuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgTExMTCA6ICdkZGRkIEQgTU1NTSBZWVlZIEhIOm1tJ1xuICAgIH0sXG4gICAgY2FsZW5kYXIgOiB7XG4gICAgICAgIHNhbWVEYXk6ICdb2KfZhNmK2YjZhSDYudmE2Ykg2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgIG5leHREYXk6ICdb2LrYr9inINi52YTZiSDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFvYudmE2Ykg2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgIGxhc3REYXk6ICdb2KPZhdizINi52YTZiSDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgbGFzdFdlZWs6ICdkZGRkIFvYudmE2Ykg2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgIHNhbWVFbHNlOiAnTCdcbiAgICB9LFxuICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgZnV0dXJlIDogJ9mB2YogJXMnLFxuICAgICAgICBwYXN0IDogJ9mF2YbYsCAlcycsXG4gICAgICAgIHMgOiAn2KvZiNin2YYnLFxuICAgICAgICBtIDogJ9iv2YLZitmC2KknLFxuICAgICAgICBtbSA6ICclZCDYr9mC2KfYptmCJyxcbiAgICAgICAgaCA6ICfYs9in2LnYqScsXG4gICAgICAgIGhoIDogJyVkINiz2KfYudin2KonLFxuICAgICAgICBkIDogJ9mK2YjZhScsXG4gICAgICAgIGRkIDogJyVkINij2YrYp9mFJyxcbiAgICAgICAgTSA6ICfYtNmH2LEnLFxuICAgICAgICBNTSA6ICclZCDYo9i02YfYsScsXG4gICAgICAgIHkgOiAn2LPZhtipJyxcbiAgICAgICAgeXkgOiAnJWQg2LPZhtmI2KfYqidcbiAgICB9LFxuICAgIHdlZWsgOiB7XG4gICAgICAgIGRvdyA6IDAsIC8vIFN1bmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICBkb3kgOiAxMiAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gMXN0IGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgIH1cbn0pO1xuXG5yZXR1cm4gYXJLdztcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBBcmFiaWMgKEx5YmlhKSBbYXItbHldXG4vLyEgYXV0aG9yIDogQWxpIEhtZXI6IGh0dHBzOi8vZ2l0aHViLmNvbS9raWtvYW5pc1xuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciBzeW1ib2xNYXAgPSB7XG4gICAgJzEnOiAnMScsXG4gICAgJzInOiAnMicsXG4gICAgJzMnOiAnMycsXG4gICAgJzQnOiAnNCcsXG4gICAgJzUnOiAnNScsXG4gICAgJzYnOiAnNicsXG4gICAgJzcnOiAnNycsXG4gICAgJzgnOiAnOCcsXG4gICAgJzknOiAnOScsXG4gICAgJzAnOiAnMCdcbn07XG52YXIgcGx1cmFsRm9ybSA9IGZ1bmN0aW9uIChuKSB7XG4gICAgcmV0dXJuIG4gPT09IDAgPyAwIDogbiA9PT0gMSA/IDEgOiBuID09PSAyID8gMiA6IG4gJSAxMDAgPj0gMyAmJiBuICUgMTAwIDw9IDEwID8gMyA6IG4gJSAxMDAgPj0gMTEgPyA0IDogNTtcbn07XG52YXIgcGx1cmFscyA9IHtcbiAgICBzIDogWyfYo9mC2YQg2YXZhiDYq9in2YbZitipJywgJ9ir2KfZhtmK2Kkg2YjYp9it2K/YqScsIFsn2KvYp9mG2YrYqtin2YYnLCAn2KvYp9mG2YrYqtmK2YYnXSwgJyVkINir2YjYp9mGJywgJyVkINir2KfZhtmK2KknLCAnJWQg2KvYp9mG2YrYqSddLFxuICAgIG0gOiBbJ9ij2YLZhCDZhdmGINiv2YLZitmC2KknLCAn2K/ZgtmK2YLYqSDZiNin2K3Yr9ipJywgWyfYr9mC2YrZgtiq2KfZhicsICfYr9mC2YrZgtiq2YrZhiddLCAnJWQg2K/Zgtin2KbZgicsICclZCDYr9mC2YrZgtipJywgJyVkINiv2YLZitmC2KknXSxcbiAgICBoIDogWyfYo9mC2YQg2YXZhiDYs9in2LnYqScsICfYs9in2LnYqSDZiNin2K3Yr9ipJywgWyfYs9in2LnYqtin2YYnLCAn2LPYp9i52KrZitmGJ10sICclZCDYs9in2LnYp9iqJywgJyVkINiz2KfYudipJywgJyVkINiz2KfYudipJ10sXG4gICAgZCA6IFsn2KPZgtmEINmF2YYg2YrZiNmFJywgJ9mK2YjZhSDZiNin2K3YrycsIFsn2YrZiNmF2KfZhicsICfZitmI2YXZitmGJ10sICclZCDYo9mK2KfZhScsICclZCDZitmI2YXZi9inJywgJyVkINmK2YjZhSddLFxuICAgIE0gOiBbJ9ij2YLZhCDZhdmGINi02YfYsScsICfYtNmH2LEg2YjYp9it2K8nLCBbJ9i02YfYsdin2YYnLCAn2LTZh9ix2YrZhiddLCAnJWQg2KPYtNmH2LEnLCAnJWQg2LTZh9ix2KcnLCAnJWQg2LTZh9ixJ10sXG4gICAgeSA6IFsn2KPZgtmEINmF2YYg2LnYp9mFJywgJ9i52KfZhSDZiNin2K3YrycsIFsn2LnYp9mF2KfZhicsICfYudin2YXZitmGJ10sICclZCDYo9i52YjYp9mFJywgJyVkINi52KfZhdmL2KcnLCAnJWQg2LnYp9mFJ11cbn07XG52YXIgcGx1cmFsaXplID0gZnVuY3Rpb24gKHUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKG51bWJlciwgd2l0aG91dFN1ZmZpeCwgc3RyaW5nLCBpc0Z1dHVyZSkge1xuICAgICAgICB2YXIgZiA9IHBsdXJhbEZvcm0obnVtYmVyKSxcbiAgICAgICAgICAgIHN0ciA9IHBsdXJhbHNbdV1bcGx1cmFsRm9ybShudW1iZXIpXTtcbiAgICAgICAgaWYgKGYgPT09IDIpIHtcbiAgICAgICAgICAgIHN0ciA9IHN0clt3aXRob3V0U3VmZml4ID8gMCA6IDFdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdHIucmVwbGFjZSgvJWQvaSwgbnVtYmVyKTtcbiAgICB9O1xufTtcbnZhciBtb250aHMgPSBbXG4gICAgJ9mK2YbYp9mK2LEnLFxuICAgICfZgdio2LHYp9mK2LEnLFxuICAgICfZhdin2LHYsycsXG4gICAgJ9ij2KjYsdmK2YQnLFxuICAgICfZhdin2YrZiCcsXG4gICAgJ9mK2YjZhtmK2YgnLFxuICAgICfZitmI2YTZitmIJyxcbiAgICAn2KPYutiz2LfYsycsXG4gICAgJ9iz2KjYqtmF2KjYsScsXG4gICAgJ9ij2YPYqtmI2KjYsScsXG4gICAgJ9mG2YjZgdmF2KjYsScsXG4gICAgJ9iv2YrYs9mF2KjYsSdcbl07XG5cbnZhciBhckx5ID0gbW9tZW50LmRlZmluZUxvY2FsZSgnYXItbHknLCB7XG4gICAgbW9udGhzIDogbW9udGhzLFxuICAgIG1vbnRoc1Nob3J0IDogbW9udGhzLFxuICAgIHdlZWtkYXlzIDogJ9in2YTYo9it2K9f2KfZhNil2KvZhtmK2YZf2KfZhNir2YTYp9ir2KfYoV/Yp9mE2KPYsdio2LnYp9ihX9in2YTYrtmF2YrYs1/Yp9mE2KzZhdi52Klf2KfZhNiz2KjYqicuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1Nob3J0IDogJ9ij2K3Yr1/Ypdir2YbZitmGX9ir2YTYp9ir2KfYoV/Yo9ix2KjYudin2KFf2K7ZhdmK2LNf2KzZhdi52Klf2LPYqNiqJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzTWluIDogJ9itX9mGX9irX9ixX9iuX9isX9izJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgTCA6ICdEL1xcdTIwMEZNL1xcdTIwMEZZWVlZJyxcbiAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICBMTExMIDogJ2RkZGQgRCBNTU1NIFlZWVkgSEg6bW0nXG4gICAgfSxcbiAgICBtZXJpZGllbVBhcnNlOiAv2LV82YUvLFxuICAgIGlzUE0gOiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuICfZhScgPT09IGlucHV0O1xuICAgIH0sXG4gICAgbWVyaWRpZW0gOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgIGlmIChob3VyIDwgMTIpIHtcbiAgICAgICAgICAgIHJldHVybiAn2LUnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuICfZhSc7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIGNhbGVuZGFyIDoge1xuICAgICAgICBzYW1lRGF5OiAnW9in2YTZitmI2YUg2LnZhtivINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICBuZXh0RGF5OiAnW9i62K/Zi9inINi52YbYryDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFvYudmG2K8g2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgIGxhc3REYXk6ICdb2KPZhdizINi52YbYryDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgbGFzdFdlZWs6ICdkZGRkIFvYudmG2K8g2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgIHNhbWVFbHNlOiAnTCdcbiAgICB9LFxuICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgZnV0dXJlIDogJ9io2LnYryAlcycsXG4gICAgICAgIHBhc3QgOiAn2YXZhtiwICVzJyxcbiAgICAgICAgcyA6IHBsdXJhbGl6ZSgncycpLFxuICAgICAgICBtIDogcGx1cmFsaXplKCdtJyksXG4gICAgICAgIG1tIDogcGx1cmFsaXplKCdtJyksXG4gICAgICAgIGggOiBwbHVyYWxpemUoJ2gnKSxcbiAgICAgICAgaGggOiBwbHVyYWxpemUoJ2gnKSxcbiAgICAgICAgZCA6IHBsdXJhbGl6ZSgnZCcpLFxuICAgICAgICBkZCA6IHBsdXJhbGl6ZSgnZCcpLFxuICAgICAgICBNIDogcGx1cmFsaXplKCdNJyksXG4gICAgICAgIE1NIDogcGx1cmFsaXplKCdNJyksXG4gICAgICAgIHkgOiBwbHVyYWxpemUoJ3knKSxcbiAgICAgICAgeXkgOiBwbHVyYWxpemUoJ3knKVxuICAgIH0sXG4gICAgcHJlcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9cXHUyMDBmL2csICcnKS5yZXBsYWNlKC/YjC9nLCAnLCcpO1xuICAgIH0sXG4gICAgcG9zdGZvcm1hdDogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1xcZC9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgIHJldHVybiBzeW1ib2xNYXBbbWF0Y2hdO1xuICAgICAgICB9KS5yZXBsYWNlKC8sL2csICfYjCcpO1xuICAgIH0sXG4gICAgd2VlayA6IHtcbiAgICAgICAgZG93IDogNiwgLy8gU2F0dXJkYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgZG95IDogMTIgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDFzdCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICB9XG59KTtcblxucmV0dXJuIGFyTHk7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogQXJhYmljIChNb3JvY2NvKSBbYXItbWFdXG4vLyEgYXV0aG9yIDogRWxGYWRpbGkgWWFzc2luZSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9FbEZhZGlsaVlcbi8vISBhdXRob3IgOiBBYmRlbCBTYWlkIDogaHR0cHM6Ly9naXRodWIuY29tL2FiZGVsc2FpZFxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciBhck1hID0gbW9tZW50LmRlZmluZUxvY2FsZSgnYXItbWEnLCB7XG4gICAgbW9udGhzIDogJ9mK2YbYp9mK2LFf2YHYqNix2KfZitixX9mF2KfYsdizX9ij2KjYsdmK2YRf2YXYp9mKX9mK2YjZhtmK2Yhf2YrZiNmE2YrZiNiyX9i62LTYql/YtNiq2YbYqNixX9ij2YPYqtmI2KjYsV/ZhtmI2YbYqNixX9iv2KzZhtio2LEnLnNwbGl0KCdfJyksXG4gICAgbW9udGhzU2hvcnQgOiAn2YrZhtin2YrYsV/Zgdio2LHYp9mK2LFf2YXYp9ix2LNf2KPYqNix2YrZhF/Zhdin2Ypf2YrZiNmG2YrZiF/ZitmI2YTZitmI2LJf2LrYtNiqX9i02KrZhtio2LFf2KPZg9iq2YjYqNixX9mG2YjZhtio2LFf2K/YrNmG2KjYsScuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5cyA6ICfYp9mE2KPYrdivX9in2YTYpdiq2YbZitmGX9in2YTYq9mE2KfYq9in2KFf2KfZhNij2LHYqNi52KfYoV/Yp9mE2K7ZhdmK2LNf2KfZhNis2YXYudipX9in2YTYs9io2KonLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNTaG9ydCA6ICfYp9it2K9f2KfYqtmG2YrZhl/Yq9mE2KfYq9in2KFf2KfYsdio2LnYp9ihX9iu2YXZitizX9is2YXYudipX9iz2KjYqicuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c01pbiA6ICfYrV/Zhl/Yq1/YsV/Yrl/YrF/Ysycuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgTExMTCA6ICdkZGRkIEQgTU1NTSBZWVlZIEhIOm1tJ1xuICAgIH0sXG4gICAgY2FsZW5kYXIgOiB7XG4gICAgICAgIHNhbWVEYXk6ICdb2KfZhNmK2YjZhSDYudmE2Ykg2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgIG5leHREYXk6ICdb2LrYr9inINi52YTZiSDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFvYudmE2Ykg2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgIGxhc3REYXk6ICdb2KPZhdizINi52YTZiSDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgbGFzdFdlZWs6ICdkZGRkIFvYudmE2Ykg2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgIHNhbWVFbHNlOiAnTCdcbiAgICB9LFxuICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgZnV0dXJlIDogJ9mB2YogJXMnLFxuICAgICAgICBwYXN0IDogJ9mF2YbYsCAlcycsXG4gICAgICAgIHMgOiAn2KvZiNin2YYnLFxuICAgICAgICBtIDogJ9iv2YLZitmC2KknLFxuICAgICAgICBtbSA6ICclZCDYr9mC2KfYptmCJyxcbiAgICAgICAgaCA6ICfYs9in2LnYqScsXG4gICAgICAgIGhoIDogJyVkINiz2KfYudin2KonLFxuICAgICAgICBkIDogJ9mK2YjZhScsXG4gICAgICAgIGRkIDogJyVkINij2YrYp9mFJyxcbiAgICAgICAgTSA6ICfYtNmH2LEnLFxuICAgICAgICBNTSA6ICclZCDYo9i02YfYsScsXG4gICAgICAgIHkgOiAn2LPZhtipJyxcbiAgICAgICAgeXkgOiAnJWQg2LPZhtmI2KfYqidcbiAgICB9LFxuICAgIHdlZWsgOiB7XG4gICAgICAgIGRvdyA6IDYsIC8vIFNhdHVyZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgIGRveSA6IDEyICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiAxc3QgaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgfVxufSk7XG5cbnJldHVybiBhck1hO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEFyYWJpYyAoU2F1ZGkgQXJhYmlhKSBbYXItc2FdXG4vLyEgYXV0aG9yIDogU3VoYWlsIEFsa293YWlsZWV0IDogaHR0cHM6Ly9naXRodWIuY29tL3hzb2hcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG52YXIgc3ltYm9sTWFwID0ge1xuICAgICcxJzogJ9mhJyxcbiAgICAnMic6ICfZoicsXG4gICAgJzMnOiAn2aMnLFxuICAgICc0JzogJ9mkJyxcbiAgICAnNSc6ICfZpScsXG4gICAgJzYnOiAn2aYnLFxuICAgICc3JzogJ9mnJyxcbiAgICAnOCc6ICfZqCcsXG4gICAgJzknOiAn2aknLFxuICAgICcwJzogJ9mgJ1xufTtcbnZhciBudW1iZXJNYXAgPSB7XG4gICAgJ9mhJzogJzEnLFxuICAgICfZoic6ICcyJyxcbiAgICAn2aMnOiAnMycsXG4gICAgJ9mkJzogJzQnLFxuICAgICfZpSc6ICc1JyxcbiAgICAn2aYnOiAnNicsXG4gICAgJ9mnJzogJzcnLFxuICAgICfZqCc6ICc4JyxcbiAgICAn2aknOiAnOScsXG4gICAgJ9mgJzogJzAnXG59O1xuXG52YXIgYXJTYSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2FyLXNhJywge1xuICAgIG1vbnRocyA6ICfZitmG2KfZitixX9mB2KjYsdin2YrYsV/Zhdin2LHYs1/Yo9io2LHZitmEX9mF2KfZitmIX9mK2YjZhtmK2Yhf2YrZiNmE2YrZiF/Yo9i62LPYt9izX9iz2KjYqtmF2KjYsV/Yo9mD2KrZiNio2LFf2YbZiNmB2YXYqNixX9iv2YrYs9mF2KjYsScuc3BsaXQoJ18nKSxcbiAgICBtb250aHNTaG9ydCA6ICfZitmG2KfZitixX9mB2KjYsdin2YrYsV/Zhdin2LHYs1/Yo9io2LHZitmEX9mF2KfZitmIX9mK2YjZhtmK2Yhf2YrZiNmE2YrZiF/Yo9i62LPYt9izX9iz2KjYqtmF2KjYsV/Yo9mD2KrZiNio2LFf2YbZiNmB2YXYqNixX9iv2YrYs9mF2KjYsScuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5cyA6ICfYp9mE2KPYrdivX9in2YTYpdir2YbZitmGX9in2YTYq9mE2KfYq9in2KFf2KfZhNij2LHYqNi52KfYoV/Yp9mE2K7ZhdmK2LNf2KfZhNis2YXYudipX9in2YTYs9io2KonLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNTaG9ydCA6ICfYo9it2K9f2KXYq9mG2YrZhl/Yq9mE2KfYq9in2KFf2KPYsdio2LnYp9ihX9iu2YXZitizX9is2YXYudipX9iz2KjYqicuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c01pbiA6ICfYrV/Zhl/Yq1/YsV/Yrl/YrF/Ysycuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgTExMTCA6ICdkZGRkIEQgTU1NTSBZWVlZIEhIOm1tJ1xuICAgIH0sXG4gICAgbWVyaWRpZW1QYXJzZTogL9i1fNmFLyxcbiAgICBpc1BNIDogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgIHJldHVybiAn2YUnID09PSBpbnB1dDtcbiAgICB9LFxuICAgIG1lcmlkaWVtIDogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICBpZiAoaG91ciA8IDEyKSB7XG4gICAgICAgICAgICByZXR1cm4gJ9i1JztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAn2YUnO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgc2FtZURheTogJ1vYp9mE2YrZiNmFINi52YTZiSDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgbmV4dERheTogJ1vYutiv2Kcg2LnZhNmJINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICBuZXh0V2VlazogJ2RkZGQgW9i52YTZiSDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgbGFzdERheTogJ1vYo9mF2LMg2LnZhNmJINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICBsYXN0V2VlazogJ2RkZGQgW9i52YTZiSDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgc2FtZUVsc2U6ICdMJ1xuICAgIH0sXG4gICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICBmdXR1cmUgOiAn2YHZiiAlcycsXG4gICAgICAgIHBhc3QgOiAn2YXZhtiwICVzJyxcbiAgICAgICAgcyA6ICfYq9mI2KfZhicsXG4gICAgICAgIG0gOiAn2K/ZgtmK2YLYqScsXG4gICAgICAgIG1tIDogJyVkINiv2YLYp9im2YInLFxuICAgICAgICBoIDogJ9iz2KfYudipJyxcbiAgICAgICAgaGggOiAnJWQg2LPYp9i52KfYqicsXG4gICAgICAgIGQgOiAn2YrZiNmFJyxcbiAgICAgICAgZGQgOiAnJWQg2KPZitin2YUnLFxuICAgICAgICBNIDogJ9i02YfYsScsXG4gICAgICAgIE1NIDogJyVkINij2LTZh9ixJyxcbiAgICAgICAgeSA6ICfYs9mG2KknLFxuICAgICAgICB5eSA6ICclZCDYs9mG2YjYp9iqJ1xuICAgIH0sXG4gICAgcHJlcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9b2aHZotmj2aTZpdmm2afZqNmp2aBdL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlck1hcFttYXRjaF07XG4gICAgICAgIH0pLnJlcGxhY2UoL9iML2csICcsJyk7XG4gICAgfSxcbiAgICBwb3N0Zm9ybWF0OiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvXFxkL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgcmV0dXJuIHN5bWJvbE1hcFttYXRjaF07XG4gICAgICAgIH0pLnJlcGxhY2UoLywvZywgJ9iMJyk7XG4gICAgfSxcbiAgICB3ZWVrIDoge1xuICAgICAgICBkb3cgOiAwLCAvLyBTdW5kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgZG95IDogNiAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gMXN0IGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgIH1cbn0pO1xuXG5yZXR1cm4gYXJTYTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgIDogIEFyYWJpYyAoVHVuaXNpYSkgW2FyLXRuXVxuLy8hIGF1dGhvciA6IE5hZGVyIFRvdWthYnJpIDogaHR0cHM6Ly9naXRodWIuY29tL25hZGVyaW9cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG52YXIgYXJUbiA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2FyLXRuJywge1xuICAgIG1vbnRoczogJ9is2KfZhtmB2Ypf2YHZitmB2LHZil/Zhdin2LHYs1/Yo9mB2LHZitmEX9mF2KfZil/YrNmI2KfZhl/YrNmI2YrZhNmK2Klf2KPZiNiqX9iz2KjYqtmF2KjYsV/Yo9mD2KrZiNio2LFf2YbZiNmB2YXYqNixX9iv2YrYs9mF2KjYsScuc3BsaXQoJ18nKSxcbiAgICBtb250aHNTaG9ydDogJ9is2KfZhtmB2Ypf2YHZitmB2LHZil/Zhdin2LHYs1/Yo9mB2LHZitmEX9mF2KfZil/YrNmI2KfZhl/YrNmI2YrZhNmK2Klf2KPZiNiqX9iz2KjYqtmF2KjYsV/Yo9mD2KrZiNio2LFf2YbZiNmB2YXYqNixX9iv2YrYs9mF2KjYsScuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5czogJ9in2YTYo9it2K9f2KfZhNil2KvZhtmK2YZf2KfZhNir2YTYp9ir2KfYoV/Yp9mE2KPYsdio2LnYp9ihX9in2YTYrtmF2YrYs1/Yp9mE2KzZhdi52Klf2KfZhNiz2KjYqicuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1Nob3J0OiAn2KPYrdivX9il2KvZhtmK2YZf2KvZhNin2KvYp9ihX9ij2LHYqNi52KfYoV/YrtmF2YrYs1/YrNmF2LnYqV/Ys9io2KonLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNNaW46ICfYrV/Zhl/Yq1/YsV/Yrl/YrF/Ysycuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgTExMTDogJ2RkZGQgRCBNTU1NIFlZWVkgSEg6bW0nXG4gICAgfSxcbiAgICBjYWxlbmRhcjoge1xuICAgICAgICBzYW1lRGF5OiAnW9in2YTZitmI2YUg2LnZhNmJINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICBuZXh0RGF5OiAnW9i62K/YpyDYudmE2Ykg2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgIG5leHRXZWVrOiAnZGRkZCBb2LnZhNmJINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICBsYXN0RGF5OiAnW9ij2YXYsyDYudmE2Ykg2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgIGxhc3RXZWVrOiAnZGRkZCBb2LnZhNmJINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICBzYW1lRWxzZTogJ0wnXG4gICAgfSxcbiAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgZnV0dXJlOiAn2YHZiiAlcycsXG4gICAgICAgIHBhc3Q6ICfZhdmG2LAgJXMnLFxuICAgICAgICBzOiAn2KvZiNin2YYnLFxuICAgICAgICBtOiAn2K/ZgtmK2YLYqScsXG4gICAgICAgIG1tOiAnJWQg2K/Zgtin2KbZgicsXG4gICAgICAgIGg6ICfYs9in2LnYqScsXG4gICAgICAgIGhoOiAnJWQg2LPYp9i52KfYqicsXG4gICAgICAgIGQ6ICfZitmI2YUnLFxuICAgICAgICBkZDogJyVkINij2YrYp9mFJyxcbiAgICAgICAgTTogJ9i02YfYsScsXG4gICAgICAgIE1NOiAnJWQg2KPYtNmH2LEnLFxuICAgICAgICB5OiAn2LPZhtipJyxcbiAgICAgICAgeXk6ICclZCDYs9mG2YjYp9iqJ1xuICAgIH0sXG4gICAgd2Vlazoge1xuICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICBkb3k6IDQgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgIH1cbn0pO1xuXG5yZXR1cm4gYXJUbjtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBBemVyYmFpamFuaSBbYXpdXG4vLyEgYXV0aG9yIDogdG9wY2hpeWV2IDogaHR0cHM6Ly9naXRodWIuY29tL3RvcGNoaXlldlxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciBzdWZmaXhlcyA9IHtcbiAgICAxOiAnLWluY2knLFxuICAgIDU6ICctaW5jaScsXG4gICAgODogJy1pbmNpJyxcbiAgICA3MDogJy1pbmNpJyxcbiAgICA4MDogJy1pbmNpJyxcbiAgICAyOiAnLW5jaScsXG4gICAgNzogJy1uY2knLFxuICAgIDIwOiAnLW5jaScsXG4gICAgNTA6ICctbmNpJyxcbiAgICAzOiAnLcO8bmPDvCcsXG4gICAgNDogJy3DvG5jw7wnLFxuICAgIDEwMDogJy3DvG5jw7wnLFxuICAgIDY6ICctbmPEsScsXG4gICAgOTogJy11bmN1JyxcbiAgICAxMDogJy11bmN1JyxcbiAgICAzMDogJy11bmN1JyxcbiAgICA2MDogJy3EsW5jxLEnLFxuICAgIDkwOiAnLcSxbmPEsSdcbn07XG5cbnZhciBheiA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2F6Jywge1xuICAgIG1vbnRocyA6ICd5YW52YXJfZmV2cmFsX21hcnRfYXByZWxfbWF5X2l5dW5faXl1bF9hdnF1c3Rfc2VudHlhYnJfb2t0eWFicl9ub3lhYnJfZGVrYWJyJy5zcGxpdCgnXycpLFxuICAgIG1vbnRoc1Nob3J0IDogJ3lhbl9mZXZfbWFyX2Fwcl9tYXlfaXluX2l5bF9hdnFfc2VuX29rdF9ub3lfZGVrJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzIDogJ0JhemFyX0JhemFyIGVydMmZc2lfw4fJmXLFn8mZbmLJmSBheMWfYW3EsV/Dh8mZcsWfyZluYsmZX0PDvG3JmSBheMWfYW3EsV9Dw7xtyZlfxZ7JmW5iyZknLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNTaG9ydCA6ICdCYXpfQnpFX8OHQXhfw4fJmXJfQ0F4X0PDvG1fxZ7JmW4nLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNNaW4gOiAnQnpfQkVfw4dBX8OHyZlfQ0FfQ8O8X8WeyZknLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICBMIDogJ0RELk1NLllZWVknLFxuICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIExMTEwgOiAnZGRkZCwgRCBNTU1NIFlZWVkgSEg6bW0nXG4gICAgfSxcbiAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgc2FtZURheSA6ICdbYnVnw7xuIHNhYXRdIExUJyxcbiAgICAgICAgbmV4dERheSA6ICdbc2FiYWggc2FhdF0gTFQnLFxuICAgICAgICBuZXh0V2VlayA6ICdbZ8mZbMmZbiBoyZlmdMmZXSBkZGRkIFtzYWF0XSBMVCcsXG4gICAgICAgIGxhc3REYXkgOiAnW2TDvG7JmW5dIExUJyxcbiAgICAgICAgbGFzdFdlZWsgOiAnW2tlw6fJmW4gaMmZZnTJmV0gZGRkZCBbc2FhdF0gTFQnLFxuICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgIH0sXG4gICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICBmdXR1cmUgOiAnJXMgc29ucmEnLFxuICAgICAgICBwYXN0IDogJyVzIMmZdnbJmWwnLFxuICAgICAgICBzIDogJ2Jpcm5lw6fJmSBzYW5peXnJmScsXG4gICAgICAgIG0gOiAnYmlyIGTJmXFpccmZJyxcbiAgICAgICAgbW0gOiAnJWQgZMmZcWlxyZknLFxuICAgICAgICBoIDogJ2JpciBzYWF0JyxcbiAgICAgICAgaGggOiAnJWQgc2FhdCcsXG4gICAgICAgIGQgOiAnYmlyIGfDvG4nLFxuICAgICAgICBkZCA6ICclZCBnw7xuJyxcbiAgICAgICAgTSA6ICdiaXIgYXknLFxuICAgICAgICBNTSA6ICclZCBheScsXG4gICAgICAgIHkgOiAnYmlyIGlsJyxcbiAgICAgICAgeXkgOiAnJWQgaWwnXG4gICAgfSxcbiAgICBtZXJpZGllbVBhcnNlOiAvZ2VjyZl8c8mZaMmZcnxnw7xuZMO8enxheMWfYW0vLFxuICAgIGlzUE0gOiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIC9eKGfDvG5kw7x6fGF4xZ9hbSkkLy50ZXN0KGlucHV0KTtcbiAgICB9LFxuICAgIG1lcmlkaWVtIDogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICBpZiAoaG91ciA8IDQpIHtcbiAgICAgICAgICAgIHJldHVybiAnZ2VjyZknO1xuICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxMikge1xuICAgICAgICAgICAgcmV0dXJuICdzyZloyZlyJztcbiAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTcpIHtcbiAgICAgICAgICAgIHJldHVybiAnZ8O8bmTDvHonO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuICdheMWfYW0nO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0tKMSxbmPEsXxpbmNpfG5jaXzDvG5jw7x8bmPEsXx1bmN1KS8sXG4gICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgaWYgKG51bWJlciA9PT0gMCkgeyAgLy8gc3BlY2lhbCBjYXNlIGZvciB6ZXJvXG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJy3EsW5jxLEnO1xuICAgICAgICB9XG4gICAgICAgIHZhciBhID0gbnVtYmVyICUgMTAsXG4gICAgICAgICAgICBiID0gbnVtYmVyICUgMTAwIC0gYSxcbiAgICAgICAgICAgIGMgPSBudW1iZXIgPj0gMTAwID8gMTAwIDogbnVsbDtcbiAgICAgICAgcmV0dXJuIG51bWJlciArIChzdWZmaXhlc1thXSB8fCBzdWZmaXhlc1tiXSB8fCBzdWZmaXhlc1tjXSk7XG4gICAgfSxcbiAgICB3ZWVrIDoge1xuICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgZG95IDogNyAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gMXN0IGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgIH1cbn0pO1xuXG5yZXR1cm4gYXo7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogQmVsYXJ1c2lhbiBbYmVdXG4vLyEgYXV0aG9yIDogRG1pdHJ5IERlbWlkb3YgOiBodHRwczovL2dpdGh1Yi5jb20vZGVtaWRvdjkxXG4vLyEgYXV0aG9yOiBQcmFsZXNrYTogaHR0cDovL3ByYWxlc2thLnByby9cbi8vISBBdXRob3IgOiBNZW5lbGlvbiBFbGVuc8O6bGUgOiBodHRwczovL2dpdGh1Yi5jb20vT2lyZVxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbmZ1bmN0aW9uIHBsdXJhbCh3b3JkLCBudW0pIHtcbiAgICB2YXIgZm9ybXMgPSB3b3JkLnNwbGl0KCdfJyk7XG4gICAgcmV0dXJuIG51bSAlIDEwID09PSAxICYmIG51bSAlIDEwMCAhPT0gMTEgPyBmb3Jtc1swXSA6IChudW0gJSAxMCA+PSAyICYmIG51bSAlIDEwIDw9IDQgJiYgKG51bSAlIDEwMCA8IDEwIHx8IG51bSAlIDEwMCA+PSAyMCkgPyBmb3Jtc1sxXSA6IGZvcm1zWzJdKTtcbn1cbmZ1bmN0aW9uIHJlbGF0aXZlVGltZVdpdGhQbHVyYWwobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXkpIHtcbiAgICB2YXIgZm9ybWF0ID0ge1xuICAgICAgICAnbW0nOiB3aXRob3V0U3VmZml4ID8gJ9GF0LLRltC70ZbQvdCwX9GF0LLRltC70ZbQvdGLX9GF0LLRltC70ZbQvScgOiAn0YXQstGW0LvRltC90YNf0YXQstGW0LvRltC90Ytf0YXQstGW0LvRltC9JyxcbiAgICAgICAgJ2hoJzogd2l0aG91dFN1ZmZpeCA/ICfQs9Cw0LTQt9GW0L3QsF/Qs9Cw0LTQt9GW0L3Ri1/Qs9Cw0LTQt9GW0L0nIDogJ9Cz0LDQtNC30ZbQvdGDX9Cz0LDQtNC30ZbQvdGLX9Cz0LDQtNC30ZbQvScsXG4gICAgICAgICdkZCc6ICfQtNC30LXQvdGMX9C00L3Rll/QtNC30ZHQvScsXG4gICAgICAgICdNTSc6ICfQvNC10YHRj9GGX9C80LXRgdGP0YbRi1/QvNC10YHRj9GG0LDRnicsXG4gICAgICAgICd5eSc6ICfQs9C+0LRf0LPQsNC00Ytf0LPQsNC00L7RnidcbiAgICB9O1xuICAgIGlmIChrZXkgPT09ICdtJykge1xuICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCA/ICfRhdCy0ZbQu9GW0L3QsCcgOiAn0YXQstGW0LvRltC90YMnO1xuICAgIH1cbiAgICBlbHNlIGlmIChrZXkgPT09ICdoJykge1xuICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCA/ICfQs9Cw0LTQt9GW0L3QsCcgOiAn0LPQsNC00LfRltC90YMnO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG51bWJlciArICcgJyArIHBsdXJhbChmb3JtYXRba2V5XSwgK251bWJlcik7XG4gICAgfVxufVxuXG52YXIgYmUgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdiZScsIHtcbiAgICBtb250aHMgOiB7XG4gICAgICAgIGZvcm1hdDogJ9GB0YLRg9C00LfQtdC90Y9f0LvRjtGC0LDQs9CwX9GB0LDQutCw0LLRltC60LBf0LrRgNCw0YHQsNCy0ZbQutCwX9GC0YDQsNGe0L3Rj1/Rh9GN0YDQstC10L3Rj1/Qu9GW0L/QtdC90Y9f0LbQvdGW0Z7QvdGPX9Cy0LXRgNCw0YHQvdGPX9C60LDRgdGC0YDRi9GH0L3RltC60LBf0LvRltGB0YLQsNC/0LDQtNCwX9GB0L3QtdC20L3Rjycuc3BsaXQoJ18nKSxcbiAgICAgICAgc3RhbmRhbG9uZTogJ9GB0YLRg9C00LfQtdC90Yxf0LvRjtGC0Ytf0YHQsNC60LDQstGW0Lpf0LrRgNCw0YHQsNCy0ZbQul/RgtGA0LDQstC10L3RjF/Rh9GN0YDQstC10L3RjF/Qu9GW0L/QtdC90Yxf0LbQvdGW0LLQtdC90Yxf0LLQtdGA0LDRgdC10L3RjF/QutCw0YHRgtGA0YvRh9C90ZbQul/Qu9GW0YHRgtCw0L/QsNC0X9GB0L3QtdC20LDQvdGMJy5zcGxpdCgnXycpXG4gICAgfSxcbiAgICBtb250aHNTaG9ydCA6ICfRgdGC0YPQtF/Qu9GO0YJf0YHQsNC6X9C60YDQsNGBX9GC0YDQsNCyX9GH0Y3RgNCyX9C70ZbQv1/QttC90ZbQsl/QstC10YBf0LrQsNGB0YJf0LvRltGB0YJf0YHQvdC10LYnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXMgOiB7XG4gICAgICAgIGZvcm1hdDogJ9C90Y/QtNC30LXQu9GOX9C/0LDQvdGP0LTQt9C10LvQsNC6X9Cw0Z7RgtC+0YDQsNC6X9GB0LXRgNCw0LTRg1/Rh9Cw0YbQstC10YBf0L/Rj9GC0L3RltGG0YNf0YHRg9Cx0L7RgtGDJy5zcGxpdCgnXycpLFxuICAgICAgICBzdGFuZGFsb25lOiAn0L3Rj9C00LfQtdC70Y9f0L/QsNC90Y/QtNC30LXQu9Cw0Lpf0LDRntGC0L7RgNCw0Lpf0YHQtdGA0LDQtNCwX9GH0LDRhtCy0LXRgF/Qv9GP0YLQvdGW0YbQsF/RgdGD0LHQvtGC0LAnLnNwbGl0KCdfJyksXG4gICAgICAgIGlzRm9ybWF0OiAvXFxbID9b0JLQsl0gPyg/OtC80ZbQvdGD0LvRg9GOfNC90LDRgdGC0YPQv9C90YPRjik/ID9cXF0gP2RkZGQvXG4gICAgfSxcbiAgICB3ZWVrZGF5c1Nob3J0IDogJ9C90LRf0L/QvV/QsNGCX9GB0YBf0YfRhl/Qv9GCX9GB0LEnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNNaW4gOiAn0L3QtF/Qv9C9X9Cw0YJf0YHRgF/Rh9GGX9C/0YJf0YHQsScuc3BsaXQoJ18nKSxcbiAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICBMIDogJ0RELk1NLllZWVknLFxuICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWSDQsy4nLFxuICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkg0LMuLCBISDptbScsXG4gICAgICAgIExMTEwgOiAnZGRkZCwgRCBNTU1NIFlZWVkg0LMuLCBISDptbSdcbiAgICB9LFxuICAgIGNhbGVuZGFyIDoge1xuICAgICAgICBzYW1lRGF5OiAnW9Ch0ZHQvdC90Y8g0Z5dIExUJyxcbiAgICAgICAgbmV4dERheTogJ1vQl9Cw0Z7RgtGA0LAg0Z5dIExUJyxcbiAgICAgICAgbGFzdERheTogJ1vQo9GH0L7RgNCwINGeXSBMVCcsXG4gICAgICAgIG5leHRXZWVrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gJ1vQo10gZGRkZCBb0Z5dIExUJztcbiAgICAgICAgfSxcbiAgICAgICAgbGFzdFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHN3aXRjaCAodGhpcy5kYXkoKSkge1xuICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdb0KMg0LzRltC90YPQu9GD0Y5dIGRkZGQgW9GeXSBMVCc7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnW9CjINC80ZbQvdGD0LvRi10gZGRkZCBb0Z5dIExUJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgc2FtZUVsc2U6ICdMJ1xuICAgIH0sXG4gICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICBmdXR1cmUgOiAn0L/RgNCw0LcgJXMnLFxuICAgICAgICBwYXN0IDogJyVzINGC0LDQvNGDJyxcbiAgICAgICAgcyA6ICfQvdC10LrQsNC70YzQutGWINGB0LXQutGD0L3QtCcsXG4gICAgICAgIG0gOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICBtbSA6IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgIGggOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICBoaCA6IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgIGQgOiAn0LTQt9C10L3RjCcsXG4gICAgICAgIGRkIDogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgTSA6ICfQvNC10YHRj9GGJyxcbiAgICAgICAgTU0gOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICB5IDogJ9Cz0L7QtCcsXG4gICAgICAgIHl5IDogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbFxuICAgIH0sXG4gICAgbWVyaWRpZW1QYXJzZTogL9C90L7Rh9GLfNGA0LDQvdGW0YbRi3zQtNC90Y980LLQtdGH0LDRgNCwLyxcbiAgICBpc1BNIDogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgIHJldHVybiAvXijQtNC90Y980LLQtdGH0LDRgNCwKSQvLnRlc3QoaW5wdXQpO1xuICAgIH0sXG4gICAgbWVyaWRpZW0gOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgIGlmIChob3VyIDwgNCkge1xuICAgICAgICAgICAgcmV0dXJuICfQvdC+0YfRiyc7XG4gICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDEyKSB7XG4gICAgICAgICAgICByZXR1cm4gJ9GA0LDQvdGW0YbRiyc7XG4gICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDE3KSB7XG4gICAgICAgICAgICByZXR1cm4gJ9C00L3Rjyc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gJ9Cy0LXRh9Cw0YDQsCc7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfS0o0ZZ80Yt80LPQsCkvLFxuICAgIG9yZGluYWw6IGZ1bmN0aW9uIChudW1iZXIsIHBlcmlvZCkge1xuICAgICAgICBzd2l0Y2ggKHBlcmlvZCkge1xuICAgICAgICAgICAgY2FzZSAnTSc6XG4gICAgICAgICAgICBjYXNlICdkJzpcbiAgICAgICAgICAgIGNhc2UgJ0RERCc6XG4gICAgICAgICAgICBjYXNlICd3JzpcbiAgICAgICAgICAgIGNhc2UgJ1cnOlxuICAgICAgICAgICAgICAgIHJldHVybiAobnVtYmVyICUgMTAgPT09IDIgfHwgbnVtYmVyICUgMTAgPT09IDMpICYmIChudW1iZXIgJSAxMDAgIT09IDEyICYmIG51bWJlciAlIDEwMCAhPT0gMTMpID8gbnVtYmVyICsgJy3RlicgOiBudW1iZXIgKyAnLdGLJztcbiAgICAgICAgICAgIGNhc2UgJ0QnOlxuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnLdCz0LAnO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyO1xuICAgICAgICB9XG4gICAgfSxcbiAgICB3ZWVrIDoge1xuICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgZG95IDogNyAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gMXN0IGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgIH1cbn0pO1xuXG5yZXR1cm4gYmU7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogQnVsZ2FyaWFuIFtiZ11cbi8vISBhdXRob3IgOiBLcmFzZW4gQm9yaXNvdiA6IGh0dHBzOi8vZ2l0aHViLmNvbS9rcmF6XG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxudmFyIGJnID0gbW9tZW50LmRlZmluZUxvY2FsZSgnYmcnLCB7XG4gICAgbW9udGhzIDogJ9GP0L3Rg9Cw0YDQuF/RhNC10LLRgNGD0LDRgNC4X9C80LDRgNGCX9Cw0L/RgNC40Ltf0LzQsNC5X9GO0L3QuF/RjtC70Lhf0LDQstCz0YPRgdGCX9GB0LXQv9GC0LXQvNCy0YDQuF/QvtC60YLQvtC80LLRgNC4X9C90L7QtdC80LLRgNC4X9C00LXQutC10LzQstGA0LgnLnNwbGl0KCdfJyksXG4gICAgbW9udGhzU2hvcnQgOiAn0Y/QvdGAX9GE0LXQsl/QvNCw0YBf0LDQv9GAX9C80LDQuV/RjtC90Lhf0Y7Qu9C4X9Cw0LLQs1/RgdC10L9f0L7QutGCX9C90L7QtV/QtNC10LonLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXMgOiAn0L3QtdC00LXQu9GPX9C/0L7QvdC10LTQtdC70L3QuNC6X9Cy0YLQvtGA0L3QuNC6X9GB0YDRj9C00LBf0YfQtdGC0LLRitGA0YLRitC6X9C/0LXRgtGK0Lpf0YHRitCx0L7RgtCwJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzU2hvcnQgOiAn0L3QtdC0X9C/0L7QvV/QstGC0L5f0YHRgNGPX9GH0LXRgl/Qv9C10YJf0YHRitCxJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzTWluIDogJ9C90LRf0L/QvV/QstGCX9GB0YBf0YfRgl/Qv9GCX9GB0LEnLnNwbGl0KCdfJyksXG4gICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgIExUIDogJ0g6bW0nLFxuICAgICAgICBMVFMgOiAnSDptbTpzcycsXG4gICAgICAgIEwgOiAnRC5NTS5ZWVlZJyxcbiAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgSDptbScsXG4gICAgICAgIExMTEwgOiAnZGRkZCwgRCBNTU1NIFlZWVkgSDptbSdcbiAgICB9LFxuICAgIGNhbGVuZGFyIDoge1xuICAgICAgICBzYW1lRGF5IDogJ1vQlNC90LXRgSDQsl0gTFQnLFxuICAgICAgICBuZXh0RGF5IDogJ1vQo9GC0YDQtSDQsl0gTFQnLFxuICAgICAgICBuZXh0V2VlayA6ICdkZGRkIFvQsl0gTFQnLFxuICAgICAgICBsYXN0RGF5IDogJ1vQktGH0LXRgNCwINCyXSBMVCcsXG4gICAgICAgIGxhc3RXZWVrIDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgc3dpdGNoICh0aGlzLmRheSgpKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnW9CSINC40LfQvNC40L3QsNC70LDRgtCwXSBkZGRkIFvQsl0gTFQnO1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdb0JIg0LjQt9C80LjQvdCw0LvQuNGPXSBkZGRkIFvQsl0gTFQnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgIH0sXG4gICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICBmdXR1cmUgOiAn0YHQu9C10LQgJXMnLFxuICAgICAgICBwYXN0IDogJ9C/0YDQtdC00LggJXMnLFxuICAgICAgICBzIDogJ9C90Y/QutC+0LvQutC+INGB0LXQutGD0L3QtNC4JyxcbiAgICAgICAgbSA6ICfQvNC40L3Rg9GC0LAnLFxuICAgICAgICBtbSA6ICclZCDQvNC40L3Rg9GC0LgnLFxuICAgICAgICBoIDogJ9GH0LDRgScsXG4gICAgICAgIGhoIDogJyVkINGH0LDRgdCwJyxcbiAgICAgICAgZCA6ICfQtNC10L0nLFxuICAgICAgICBkZCA6ICclZCDQtNC90LgnLFxuICAgICAgICBNIDogJ9C80LXRgdC10YYnLFxuICAgICAgICBNTSA6ICclZCDQvNC10YHQtdGG0LAnLFxuICAgICAgICB5IDogJ9Cz0L7QtNC40L3QsCcsXG4gICAgICAgIHl5IDogJyVkINCz0L7QtNC40L3QuCdcbiAgICB9LFxuICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfS0o0LXQsnzQtdC9fNGC0Lh80LLQuHzRgNC4fNC80LgpLyxcbiAgICBvcmRpbmFsIDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICB2YXIgbGFzdERpZ2l0ID0gbnVtYmVyICUgMTAsXG4gICAgICAgICAgICBsYXN0MkRpZ2l0cyA9IG51bWJlciAlIDEwMDtcbiAgICAgICAgaWYgKG51bWJlciA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICct0LXQsic7XG4gICAgICAgIH0gZWxzZSBpZiAobGFzdDJEaWdpdHMgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnLdC10L0nO1xuICAgICAgICB9IGVsc2UgaWYgKGxhc3QyRGlnaXRzID4gMTAgJiYgbGFzdDJEaWdpdHMgPCAyMCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICct0YLQuCc7XG4gICAgICAgIH0gZWxzZSBpZiAobGFzdERpZ2l0ID09PSAxKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJy3QstC4JztcbiAgICAgICAgfSBlbHNlIGlmIChsYXN0RGlnaXQgPT09IDIpIHtcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnLdGA0LgnO1xuICAgICAgICB9IGVsc2UgaWYgKGxhc3REaWdpdCA9PT0gNyB8fCBsYXN0RGlnaXQgPT09IDgpIHtcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnLdC80LgnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICct0YLQuCc7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIHdlZWsgOiB7XG4gICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICBkb3kgOiA3ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiAxc3QgaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgfVxufSk7XG5cbnJldHVybiBiZztcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBCZW5nYWxpIFtibl1cbi8vISBhdXRob3IgOiBLYXVzaGlrIEdhbmRoaSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9rYXVzaGlrZ2FuZGhpXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxudmFyIHN5bWJvbE1hcCA9IHtcbiAgICAnMSc6ICfgp6cnLFxuICAgICcyJzogJ+CnqCcsXG4gICAgJzMnOiAn4KepJyxcbiAgICAnNCc6ICfgp6onLFxuICAgICc1JzogJ+CnqycsXG4gICAgJzYnOiAn4KesJyxcbiAgICAnNyc6ICfgp60nLFxuICAgICc4JzogJ+CnricsXG4gICAgJzknOiAn4KevJyxcbiAgICAnMCc6ICfgp6YnXG59O1xudmFyIG51bWJlck1hcCA9IHtcbiAgICAn4KenJzogJzEnLFxuICAgICfgp6gnOiAnMicsXG4gICAgJ+CnqSc6ICczJyxcbiAgICAn4KeqJzogJzQnLFxuICAgICfgp6snOiAnNScsXG4gICAgJ+CnrCc6ICc2JyxcbiAgICAn4KetJzogJzcnLFxuICAgICfgp64nOiAnOCcsXG4gICAgJ+Cnryc6ICc5JyxcbiAgICAn4KemJzogJzAnXG59O1xuXG52YXIgYm4gPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdibicsIHtcbiAgICBtb250aHMgOiAn4Kac4Ka+4Kao4KeB4Kef4Ka+4Kaw4KeAX+Cmq+Cnh+CmrOCnjeCmsOCngeCnn+CmvuCmsOCmv1/gpq7gpr7gprDgp43gpppf4KaP4Kaq4KeN4Kaw4Ka/4KayX+CmruCnh1/gppzgp4Hgpqhf4Kac4KeB4Kay4Ka+4KaHX+CmhuCml+CmuOCnjeCmn1/gprjgp4fgpqrgp43gpp/gp4fgpq7gp43gpqzgprBf4KaF4KaV4KeN4Kaf4KeL4Kas4KawX+CmqOCmreCnh+CmruCnjeCmrOCmsF/gpqHgpr/gprjgp4fgpq7gp43gpqzgprAnLnNwbGl0KCdfJyksXG4gICAgbW9udGhzU2hvcnQgOiAn4Kac4Ka+4Kao4KeBX+Cmq+Cnh+CmrF/gpq7gpr7gprDgp43gpppf4KaP4Kaq4KeN4KawX+CmruCnh1/gppzgp4Hgpqhf4Kac4KeB4KayX+CmhuCml1/gprjgp4fgpqrgp43gpp9f4KaF4KaV4KeN4Kaf4KeLX+CmqOCmreCnh1/gpqHgpr/gprjgp4cnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXMgOiAn4Kaw4Kas4Ka/4Kas4Ka+4KawX+CmuOCni+CmruCmrOCmvuCmsF/gpq7gppngp43gppfgprLgpqzgpr7gprBf4Kas4KeB4Kan4Kas4Ka+4KawX+CmrOCng+CmueCmuOCnjeCmquCmpOCmv+CmrOCmvuCmsF/gprbgp4HgppXgp43gprDgpqzgpr7gprBf4Ka24Kao4Ka/4Kas4Ka+4KawJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzU2hvcnQgOiAn4Kaw4Kas4Ka/X+CmuOCni+Cmrl/gpq7gppngp43gppfgprJf4Kas4KeB4KanX+CmrOCng+CmueCmuOCnjeCmquCmpOCmv1/gprbgp4HgppXgp43gprBf4Ka24Kao4Ka/Jy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzTWluIDogJ+CmsOCmrOCmv1/gprjgp4vgpq5f4Kau4KaZ4KeN4KaXX+CmrOCngeCmp1/gpqzgp4PgprngpoNf4Ka24KeB4KaV4KeN4KawX+CmtuCmqOCmvycuc3BsaXQoJ18nKSxcbiAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgTFQgOiAnQSBoOm1tIOCmuOCmruCnnycsXG4gICAgICAgIExUUyA6ICdBIGg6bW06c3Mg4Ka44Kau4KefJyxcbiAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVksIEEgaDptbSDgprjgpq7gp58nLFxuICAgICAgICBMTExMIDogJ2RkZGQsIEQgTU1NTSBZWVlZLCBBIGg6bW0g4Ka44Kau4KefJ1xuICAgIH0sXG4gICAgY2FsZW5kYXIgOiB7XG4gICAgICAgIHNhbWVEYXkgOiAnW+CmhuCmnF0gTFQnLFxuICAgICAgICBuZXh0RGF5IDogJ1vgpobgppfgpr7gpq7gp4DgppXgpr7gprJdIExUJyxcbiAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCwgTFQnLFxuICAgICAgICBsYXN0RGF5IDogJ1vgppfgpqTgppXgpr7gprJdIExUJyxcbiAgICAgICAgbGFzdFdlZWsgOiAnW+Cml+CmpF0gZGRkZCwgTFQnLFxuICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgIH0sXG4gICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICBmdXR1cmUgOiAnJXMg4Kaq4Kaw4KeHJyxcbiAgICAgICAgcGFzdCA6ICclcyDgpobgppfgp4cnLFxuICAgICAgICBzIDogJ+CmleCnn+Cnh+CmlSDgprjgp4fgppXgp4fgpqjgp43gpqEnLFxuICAgICAgICBtIDogJ+Cmj+CmlSDgpq7gpr/gpqjgpr/gpp8nLFxuICAgICAgICBtbSA6ICclZCDgpq7gpr/gpqjgpr/gpp8nLFxuICAgICAgICBoIDogJ+Cmj+CmlSDgppjgpqjgp43gpp/gpr4nLFxuICAgICAgICBoaCA6ICclZCDgppjgpqjgp43gpp/gpr4nLFxuICAgICAgICBkIDogJ+Cmj+CmlSDgpqbgpr/gpqgnLFxuICAgICAgICBkZCA6ICclZCDgpqbgpr/gpqgnLFxuICAgICAgICBNIDogJ+Cmj+CmlSDgpq7gpr7gprgnLFxuICAgICAgICBNTSA6ICclZCDgpq7gpr7gprgnLFxuICAgICAgICB5IDogJ+Cmj+CmlSDgpqzgppvgprAnLFxuICAgICAgICB5eSA6ICclZCDgpqzgppvgprAnXG4gICAgfSxcbiAgICBwcmVwYXJzZTogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1vgp6fgp6jgp6ngp6rgp6vgp6zgp63gp67gp6/gp6ZdL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlck1hcFttYXRjaF07XG4gICAgICAgIH0pO1xuICAgIH0sXG4gICAgcG9zdGZvcm1hdDogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1xcZC9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgIHJldHVybiBzeW1ib2xNYXBbbWF0Y2hdO1xuICAgICAgICB9KTtcbiAgICB9LFxuICAgIG1lcmlkaWVtUGFyc2U6IC/gprDgpr7gpqR84Ka44KaV4Ka+4KayfOCmpuCngeCmquCngeCmsHzgpqzgpr/gppXgpr7gprJ84Kaw4Ka+4KakLyxcbiAgICBtZXJpZGllbUhvdXIgOiBmdW5jdGlvbiAoaG91ciwgbWVyaWRpZW0pIHtcbiAgICAgICAgaWYgKGhvdXIgPT09IDEyKSB7XG4gICAgICAgICAgICBob3VyID0gMDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKG1lcmlkaWVtID09PSAn4Kaw4Ka+4KakJyAmJiBob3VyID49IDQpIHx8XG4gICAgICAgICAgICAgICAgKG1lcmlkaWVtID09PSAn4Kam4KeB4Kaq4KeB4KawJyAmJiBob3VyIDwgNSkgfHxcbiAgICAgICAgICAgICAgICBtZXJpZGllbSA9PT0gJ+CmrOCmv+CmleCmvuCmsicpIHtcbiAgICAgICAgICAgIHJldHVybiBob3VyICsgMTI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gaG91cjtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgbWVyaWRpZW0gOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgIGlmIChob3VyIDwgNCkge1xuICAgICAgICAgICAgcmV0dXJuICfgprDgpr7gpqQnO1xuICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxMCkge1xuICAgICAgICAgICAgcmV0dXJuICfgprjgppXgpr7gprInO1xuICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxNykge1xuICAgICAgICAgICAgcmV0dXJuICfgpqbgp4Hgpqrgp4HgprAnO1xuICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAyMCkge1xuICAgICAgICAgICAgcmV0dXJuICfgpqzgpr/gppXgpr7gprInO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuICfgprDgpr7gpqQnO1xuICAgICAgICB9XG4gICAgfSxcbiAgICB3ZWVrIDoge1xuICAgICAgICBkb3cgOiAwLCAvLyBTdW5kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgZG95IDogNiAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gMXN0IGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgIH1cbn0pO1xuXG5yZXR1cm4gYm47XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogVGliZXRhbiBbYm9dXG4vLyEgYXV0aG9yIDogVGh1cHRlbiBOLiBDaGFrcmlzaGFyIDogaHR0cHM6Ly9naXRodWIuY29tL3ZhanJhZG9nXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxudmFyIHN5bWJvbE1hcCA9IHtcbiAgICAnMSc6ICfgvKEnLFxuICAgICcyJzogJ+C8oicsXG4gICAgJzMnOiAn4LyjJyxcbiAgICAnNCc6ICfgvKQnLFxuICAgICc1JzogJ+C8pScsXG4gICAgJzYnOiAn4LymJyxcbiAgICAnNyc6ICfgvKcnLFxuICAgICc4JzogJ+C8qCcsXG4gICAgJzknOiAn4LypJyxcbiAgICAnMCc6ICfgvKAnXG59O1xudmFyIG51bWJlck1hcCA9IHtcbiAgICAn4LyhJzogJzEnLFxuICAgICfgvKInOiAnMicsXG4gICAgJ+C8oyc6ICczJyxcbiAgICAn4LykJzogJzQnLFxuICAgICfgvKUnOiAnNScsXG4gICAgJ+C8pic6ICc2JyxcbiAgICAn4LynJzogJzcnLFxuICAgICfgvKgnOiAnOCcsXG4gICAgJ+C8qSc6ICc5JyxcbiAgICAn4LygJzogJzAnXG59O1xuXG52YXIgYm8gPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdibycsIHtcbiAgICBtb250aHMgOiAn4L2f4L6z4LyL4L2W4LyL4L2R4L2E4LyL4L2U4L28X+C9n+C+s+C8i+C9luC8i+C9guC9ieC9suC9puC8i+C9lF/gvZ/gvrPgvIvgvZbgvIvgvYLgvabgvbTgvZjgvIvgvZRf4L2f4L6z4LyL4L2W4LyL4L2W4L2e4L2y4LyL4L2UX+C9n+C+s+C8i+C9luC8i+C9o+C+lOC8i+C9lF/gvZ/gvrPgvIvgvZbgvIvgvZHgvrLgvbTgvYLgvIvgvZRf4L2f4L6z4LyL4L2W4LyL4L2W4L2R4L204L2T4LyL4L2UX+C9n+C+s+C8i+C9luC8i+C9luC9ouC+kuC+seC9keC8i+C9lF/gvZ/gvrPgvIvgvZbgvIvgvZHgvYLgvbTgvIvgvZRf4L2f4L6z4LyL4L2W4LyL4L2W4L2F4L204LyL4L2UX+C9n+C+s+C8i+C9luC8i+C9luC9heC9tOC8i+C9guC9heC9suC9guC8i+C9lF/gvZ/gvrPgvIvgvZbgvIvgvZbgvYXgvbTgvIvgvYLgvYngvbLgvabgvIvgvZQnLnNwbGl0KCdfJyksXG4gICAgbW9udGhzU2hvcnQgOiAn4L2f4L6z4LyL4L2W4LyL4L2R4L2E4LyL4L2U4L28X+C9n+C+s+C8i+C9luC8i+C9guC9ieC9suC9puC8i+C9lF/gvZ/gvrPgvIvgvZbgvIvgvYLgvabgvbTgvZjgvIvgvZRf4L2f4L6z4LyL4L2W4LyL4L2W4L2e4L2y4LyL4L2UX+C9n+C+s+C8i+C9luC8i+C9o+C+lOC8i+C9lF/gvZ/gvrPgvIvgvZbgvIvgvZHgvrLgvbTgvYLgvIvgvZRf4L2f4L6z4LyL4L2W4LyL4L2W4L2R4L204L2T4LyL4L2UX+C9n+C+s+C8i+C9luC8i+C9luC9ouC+kuC+seC9keC8i+C9lF/gvZ/gvrPgvIvgvZbgvIvgvZHgvYLgvbTgvIvgvZRf4L2f4L6z4LyL4L2W4LyL4L2W4L2F4L204LyL4L2UX+C9n+C+s+C8i+C9luC8i+C9luC9heC9tOC8i+C9guC9heC9suC9guC8i+C9lF/gvZ/gvrPgvIvgvZbgvIvgvZbgvYXgvbTgvIvgvYLgvYngvbLgvabgvIvgvZQnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXMgOiAn4L2C4L2f4L2g4LyL4L2J4L2y4LyL4L2Y4LyLX+C9guC9n+C9oOC8i+C9n+C+s+C8i+C9luC8i1/gvYLgvZ/gvaDgvIvgvZjgvbLgvYLgvIvgvZHgvZjgvaLgvItf4L2C4L2f4L2g4LyL4L2j4L634L2C4LyL4L2U4LyLX+C9guC9n+C9oOC8i+C9leC9tOC9ouC8i+C9luC9tF/gvYLgvZ/gvaDgvIvgvZTgvIvgvabgvYTgvabgvItf4L2C4L2f4L2g4LyL4L2m4L6k4L264L2T4LyL4L2U4LyLJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzU2hvcnQgOiAn4L2J4L2y4LyL4L2Y4LyLX+C9n+C+s+C8i+C9luC8i1/gvZjgvbLgvYLgvIvgvZHgvZjgvaLgvItf4L2j4L634L2C4LyL4L2U4LyLX+C9leC9tOC9ouC8i+C9luC9tF/gvZTgvIvgvabgvYTgvabgvItf4L2m4L6k4L264L2T4LyL4L2U4LyLJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzTWluIDogJ+C9ieC9suC8i+C9mOC8i1/gvZ/gvrPgvIvgvZbgvItf4L2Y4L2y4L2C4LyL4L2R4L2Y4L2i4LyLX+C9o+C+t+C9guC8i+C9lOC8i1/gvZXgvbTgvaLgvIvgvZbgvbRf4L2U4LyL4L2m4L2E4L2m4LyLX+C9puC+pOC9uuC9k+C8i+C9lOC8iycuc3BsaXQoJ18nKSxcbiAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgTFQgOiAnQSBoOm1tJyxcbiAgICAgICAgTFRTIDogJ0EgaDptbTpzcycsXG4gICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZLCBBIGg6bW0nLFxuICAgICAgICBMTExMIDogJ2RkZGQsIEQgTU1NTSBZWVlZLCBBIGg6bW0nXG4gICAgfSxcbiAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgc2FtZURheSA6ICdb4L2R4L2y4LyL4L2i4L2y4L2EXSBMVCcsXG4gICAgICAgIG5leHREYXkgOiAnW+C9puC9hOC8i+C9ieC9suC9k10gTFQnLFxuICAgICAgICBuZXh0V2VlayA6ICdb4L2W4L2R4L204L2T4LyL4L2V4L6y4L2C4LyL4L2i4L6X4L264L2m4LyL4L2YXSwgTFQnLFxuICAgICAgICBsYXN0RGF5IDogJ1vgvYHgvIvgvabgvYRdIExUJyxcbiAgICAgICAgbGFzdFdlZWsgOiAnW+C9luC9keC9tOC9k+C8i+C9leC+suC9guC8i+C9mOC9kOC9oOC8i+C9mF0gZGRkZCwgTFQnLFxuICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgIH0sXG4gICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICBmdXR1cmUgOiAnJXMg4L2j4LyLJyxcbiAgICAgICAgcGFzdCA6ICclcyDgvabgvpTgvZPgvIvgvaMnLFxuICAgICAgICBzIDogJ+C9o+C9mOC8i+C9puC9hCcsXG4gICAgICAgIG0gOiAn4L2m4L6Q4L2i4LyL4L2Y4LyL4L2C4L2F4L2y4L2CJyxcbiAgICAgICAgbW0gOiAnJWQg4L2m4L6Q4L2i4LyL4L2YJyxcbiAgICAgICAgaCA6ICfgvYbgvbTgvIvgvZrgvbzgvZHgvIvgvYLgvYXgvbLgvYInLFxuICAgICAgICBoaCA6ICclZCDgvYbgvbTgvIvgvZrgvbzgvZEnLFxuICAgICAgICBkIDogJ+C9ieC9suC9k+C8i+C9guC9heC9suC9gicsXG4gICAgICAgIGRkIDogJyVkIOC9ieC9suC9k+C8iycsXG4gICAgICAgIE0gOiAn4L2f4L6z4LyL4L2W4LyL4L2C4L2F4L2y4L2CJyxcbiAgICAgICAgTU0gOiAnJWQg4L2f4L6z4LyL4L2WJyxcbiAgICAgICAgeSA6ICfgvaPgvbzgvIvgvYLgvYXgvbLgvYInLFxuICAgICAgICB5eSA6ICclZCDgvaPgvbwnXG4gICAgfSxcbiAgICBwcmVwYXJzZTogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1vgvKHgvKLgvKPgvKTgvKXgvKbgvKfgvKjgvKngvKBdL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlck1hcFttYXRjaF07XG4gICAgICAgIH0pO1xuICAgIH0sXG4gICAgcG9zdGZvcm1hdDogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1xcZC9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgIHJldHVybiBzeW1ib2xNYXBbbWF0Y2hdO1xuICAgICAgICB9KTtcbiAgICB9LFxuICAgIG1lcmlkaWVtUGFyc2U6IC/gvZjgvZrgvZPgvIvgvZjgvbx84L2e4L284L2C4L2m4LyL4L2A4L2mfOC9ieC9suC9k+C8i+C9guC9tOC9hHzgvZHgvYLgvbzgvYTgvIvgvZHgvYJ84L2Y4L2a4L2T4LyL4L2Y4L28LyxcbiAgICBtZXJpZGllbUhvdXIgOiBmdW5jdGlvbiAoaG91ciwgbWVyaWRpZW0pIHtcbiAgICAgICAgaWYgKGhvdXIgPT09IDEyKSB7XG4gICAgICAgICAgICBob3VyID0gMDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKG1lcmlkaWVtID09PSAn4L2Y4L2a4L2T4LyL4L2Y4L28JyAmJiBob3VyID49IDQpIHx8XG4gICAgICAgICAgICAgICAgKG1lcmlkaWVtID09PSAn4L2J4L2y4L2T4LyL4L2C4L204L2EJyAmJiBob3VyIDwgNSkgfHxcbiAgICAgICAgICAgICAgICBtZXJpZGllbSA9PT0gJ+C9keC9guC9vOC9hOC8i+C9keC9gicpIHtcbiAgICAgICAgICAgIHJldHVybiBob3VyICsgMTI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gaG91cjtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgbWVyaWRpZW0gOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgIGlmIChob3VyIDwgNCkge1xuICAgICAgICAgICAgcmV0dXJuICfgvZjgvZrgvZPgvIvgvZjgvbwnO1xuICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxMCkge1xuICAgICAgICAgICAgcmV0dXJuICfgvZ7gvbzgvYLgvabgvIvgvYDgvaYnO1xuICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxNykge1xuICAgICAgICAgICAgcmV0dXJuICfgvYngvbLgvZPgvIvgvYLgvbTgvYQnO1xuICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAyMCkge1xuICAgICAgICAgICAgcmV0dXJuICfgvZHgvYLgvbzgvYTgvIvgvZHgvYInO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuICfgvZjgvZrgvZPgvIvgvZjgvbwnO1xuICAgICAgICB9XG4gICAgfSxcbiAgICB3ZWVrIDoge1xuICAgICAgICBkb3cgOiAwLCAvLyBTdW5kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgZG95IDogNiAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gMXN0IGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgIH1cbn0pO1xuXG5yZXR1cm4gYm87XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogQnJldG9uIFticl1cbi8vISBhdXRob3IgOiBKZWFuLUJhcHRpc3RlIExlIER1aWdvdSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9qYmxlZHVpZ291XG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuZnVuY3Rpb24gcmVsYXRpdmVUaW1lV2l0aE11dGF0aW9uKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5KSB7XG4gICAgdmFyIGZvcm1hdCA9IHtcbiAgICAgICAgJ21tJzogJ211bnV0ZW5uJyxcbiAgICAgICAgJ01NJzogJ21peicsXG4gICAgICAgICdkZCc6ICdkZXZlemgnXG4gICAgfTtcbiAgICByZXR1cm4gbnVtYmVyICsgJyAnICsgbXV0YXRpb24oZm9ybWF0W2tleV0sIG51bWJlcik7XG59XG5mdW5jdGlvbiBzcGVjaWFsTXV0YXRpb25Gb3JZZWFycyhudW1iZXIpIHtcbiAgICBzd2l0Y2ggKGxhc3ROdW1iZXIobnVtYmVyKSkge1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgY2FzZSA0OlxuICAgICAgICBjYXNlIDU6XG4gICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnIGJsb2F6JztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnIHZsb2F6JztcbiAgICB9XG59XG5mdW5jdGlvbiBsYXN0TnVtYmVyKG51bWJlcikge1xuICAgIGlmIChudW1iZXIgPiA5KSB7XG4gICAgICAgIHJldHVybiBsYXN0TnVtYmVyKG51bWJlciAlIDEwKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bWJlcjtcbn1cbmZ1bmN0aW9uIG11dGF0aW9uKHRleHQsIG51bWJlcikge1xuICAgIGlmIChudW1iZXIgPT09IDIpIHtcbiAgICAgICAgcmV0dXJuIHNvZnRNdXRhdGlvbih0ZXh0KTtcbiAgICB9XG4gICAgcmV0dXJuIHRleHQ7XG59XG5mdW5jdGlvbiBzb2Z0TXV0YXRpb24odGV4dCkge1xuICAgIHZhciBtdXRhdGlvblRhYmxlID0ge1xuICAgICAgICAnbSc6ICd2JyxcbiAgICAgICAgJ2InOiAndicsXG4gICAgICAgICdkJzogJ3onXG4gICAgfTtcbiAgICBpZiAobXV0YXRpb25UYWJsZVt0ZXh0LmNoYXJBdCgwKV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gdGV4dDtcbiAgICB9XG4gICAgcmV0dXJuIG11dGF0aW9uVGFibGVbdGV4dC5jaGFyQXQoMCldICsgdGV4dC5zdWJzdHJpbmcoMSk7XG59XG5cbnZhciBiciA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2JyJywge1xuICAgIG1vbnRocyA6ICdHZW52ZXJfQ1xcJ2h3ZXZyZXJfTWV1cnpoX0VicmVsX01hZV9NZXpoZXZlbl9Hb3VlcmVfRW9zdF9Hd2VuZ29sb19IZXJlX0R1X0tlcnp1Jy5zcGxpdCgnXycpLFxuICAgIG1vbnRoc1Nob3J0IDogJ0dlbl9DXFwnaHdlX01ldV9FYnJfTWFlX0V2ZV9Hb3VfRW9zX0d3ZV9IZXJfRHVfS2VyJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzIDogJ1N1bF9MdW5fTWV1cnpoX01lcmNcXCdoZXJfWWFvdV9Hd2VuZXJfU2Fkb3JuJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzU2hvcnQgOiAnU3VsX0x1bl9NZXVfTWVyX1lhb19Hd2VfU2FkJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzTWluIDogJ1N1X0x1X01lX01lcl9ZYV9Hd19TYScuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICBMVCA6ICdoW2VdbW0gQScsXG4gICAgICAgIExUUyA6ICdoW2VdbW06c3MgQScsXG4gICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgIExMIDogJ0QgW2Egdml6XSBNTU1NIFlZWVknLFxuICAgICAgICBMTEwgOiAnRCBbYSB2aXpdIE1NTU0gWVlZWSBoW2VdbW0gQScsXG4gICAgICAgIExMTEwgOiAnZGRkZCwgRCBbYSB2aXpdIE1NTU0gWVlZWSBoW2VdbW0gQSdcbiAgICB9LFxuICAgIGNhbGVuZGFyIDoge1xuICAgICAgICBzYW1lRGF5IDogJ1tIaXppdiBkYV0gTFQnLFxuICAgICAgICBuZXh0RGF5IDogJ1tXYXJjXFwnaG9hemggZGFdIExUJyxcbiAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCBbZGFdIExUJyxcbiAgICAgICAgbGFzdERheSA6ICdbRGVjXFwnaCBkYV0gTFQnLFxuICAgICAgICBsYXN0V2VlayA6ICdkZGRkIFtwYXNldCBkYV0gTFQnLFxuICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgIH0sXG4gICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICBmdXR1cmUgOiAnYS1iZW5uICVzJyxcbiAgICAgICAgcGFzdCA6ICclcyBcXCd6bycsXG4gICAgICAgIHMgOiAndW4gbmViZXVkIHNlZ29uZGVubm/DuScsXG4gICAgICAgIG0gOiAndXIgdnVudXRlbm4nLFxuICAgICAgICBtbSA6IHJlbGF0aXZlVGltZVdpdGhNdXRhdGlvbixcbiAgICAgICAgaCA6ICd1biBldXInLFxuICAgICAgICBoaCA6ICclZCBldXInLFxuICAgICAgICBkIDogJ3VuIGRldmV6aCcsXG4gICAgICAgIGRkIDogcmVsYXRpdmVUaW1lV2l0aE11dGF0aW9uLFxuICAgICAgICBNIDogJ3VyIG1peicsXG4gICAgICAgIE1NIDogcmVsYXRpdmVUaW1lV2l0aE11dGF0aW9uLFxuICAgICAgICB5IDogJ3VyIGJsb2F6JyxcbiAgICAgICAgeXkgOiBzcGVjaWFsTXV0YXRpb25Gb3JZZWFyc1xuICAgIH0sXG4gICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9KGHDsXx2ZXQpLyxcbiAgICBvcmRpbmFsIDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICB2YXIgb3V0cHV0ID0gKG51bWJlciA9PT0gMSkgPyAnYcOxJyA6ICd2ZXQnO1xuICAgICAgICByZXR1cm4gbnVtYmVyICsgb3V0cHV0O1xuICAgIH0sXG4gICAgd2VlayA6IHtcbiAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICB9XG59KTtcblxucmV0dXJuIGJyO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEJvc25pYW4gW2JzXVxuLy8hIGF1dGhvciA6IE5lZGltIENob2xpY2ggOiBodHRwczovL2dpdGh1Yi5jb20vZnJvbnR5YXJkXG4vLyEgYmFzZWQgb24gKGhyKSB0cmFuc2xhdGlvbiBieSBCb2phbiBNYXJrb3ZpxIdcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG5mdW5jdGlvbiB0cmFuc2xhdGUobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXkpIHtcbiAgICB2YXIgcmVzdWx0ID0gbnVtYmVyICsgJyAnO1xuICAgIHN3aXRjaCAoa2V5KSB7XG4gICAgICAgIGNhc2UgJ20nOlxuICAgICAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggPyAnamVkbmEgbWludXRhJyA6ICdqZWRuZSBtaW51dGUnO1xuICAgICAgICBjYXNlICdtbSc6XG4gICAgICAgICAgICBpZiAobnVtYmVyID09PSAxKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdtaW51dGEnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChudW1iZXIgPT09IDIgfHwgbnVtYmVyID09PSAzIHx8IG51bWJlciA9PT0gNCkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnbWludXRlJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdtaW51dGEnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgY2FzZSAnaCc6XG4gICAgICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCA/ICdqZWRhbiBzYXQnIDogJ2plZG5vZyBzYXRhJztcbiAgICAgICAgY2FzZSAnaGgnOlxuICAgICAgICAgICAgaWYgKG51bWJlciA9PT0gMSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnc2F0JztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobnVtYmVyID09PSAyIHx8IG51bWJlciA9PT0gMyB8fCBudW1iZXIgPT09IDQpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ3NhdGEnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ3NhdGknO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgY2FzZSAnZGQnOlxuICAgICAgICAgICAgaWYgKG51bWJlciA9PT0gMSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnZGFuJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdkYW5hJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIGNhc2UgJ01NJzpcbiAgICAgICAgICAgIGlmIChudW1iZXIgPT09IDEpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ21qZXNlYyc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG51bWJlciA9PT0gMiB8fCBudW1iZXIgPT09IDMgfHwgbnVtYmVyID09PSA0KSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdtamVzZWNhJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdtamVzZWNpJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIGNhc2UgJ3l5JzpcbiAgICAgICAgICAgIGlmIChudW1iZXIgPT09IDEpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ2dvZGluYSc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG51bWJlciA9PT0gMiB8fCBudW1iZXIgPT09IDMgfHwgbnVtYmVyID09PSA0KSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdnb2RpbmUnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ2dvZGluYSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cblxudmFyIGJzID0gbW9tZW50LmRlZmluZUxvY2FsZSgnYnMnLCB7XG4gICAgbW9udGhzIDogJ2phbnVhcl9mZWJydWFyX21hcnRfYXByaWxfbWFqX2p1bmlfanVsaV9hdWd1c3Rfc2VwdGVtYmFyX29rdG9iYXJfbm92ZW1iYXJfZGVjZW1iYXInLnNwbGl0KCdfJyksXG4gICAgbW9udGhzU2hvcnQgOiAnamFuLl9mZWIuX21hci5fYXByLl9tYWouX2p1bi5fanVsLl9hdWcuX3NlcC5fb2t0Ll9ub3YuX2RlYy4nLnNwbGl0KCdfJyksXG4gICAgbW9udGhzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICB3ZWVrZGF5cyA6ICduZWRqZWxqYV9wb25lZGplbGpha191dG9yYWtfc3JpamVkYV/EjWV0dnJ0YWtfcGV0YWtfc3Vib3RhJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzU2hvcnQgOiAnbmVkLl9wb24uX3V0by5fc3JpLl/EjWV0Ll9wZXQuX3N1Yi4nLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNNaW4gOiAnbmVfcG9fdXRfc3JfxI1lX3BlX3N1Jy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgIExUIDogJ0g6bW0nLFxuICAgICAgICBMVFMgOiAnSDptbTpzcycsXG4gICAgICAgIEwgOiAnREQuTU0uWVlZWScsXG4gICAgICAgIExMIDogJ0QuIE1NTU0gWVlZWScsXG4gICAgICAgIExMTCA6ICdELiBNTU1NIFlZWVkgSDptbScsXG4gICAgICAgIExMTEwgOiAnZGRkZCwgRC4gTU1NTSBZWVlZIEg6bW0nXG4gICAgfSxcbiAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgc2FtZURheSAgOiAnW2RhbmFzIHVdIExUJyxcbiAgICAgICAgbmV4dERheSAgOiAnW3N1dHJhIHVdIExUJyxcbiAgICAgICAgbmV4dFdlZWsgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHRoaXMuZGF5KCkpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3VdIFtuZWRqZWxqdV0gW3VdIExUJztcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3VdIFtzcmlqZWR1XSBbdV0gTFQnO1xuICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbdV0gW3N1Ym90dV0gW3VdIExUJztcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3VdIGRkZGQgW3VdIExUJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbGFzdERheSAgOiAnW2p1xI1lciB1XSBMVCcsXG4gICAgICAgIGxhc3RXZWVrIDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgc3dpdGNoICh0aGlzLmRheSgpKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbcHJvxaFsdV0gZGRkZCBbdV0gTFQnO1xuICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbcHJvxaFsZV0gW3N1Ym90ZV0gW3VdIExUJztcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3Byb8WhbGldIGRkZGQgW3VdIExUJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICB9LFxuICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgZnV0dXJlIDogJ3phICVzJyxcbiAgICAgICAgcGFzdCAgIDogJ3ByaWplICVzJyxcbiAgICAgICAgcyAgICAgIDogJ3BhciBzZWt1bmRpJyxcbiAgICAgICAgbSAgICAgIDogdHJhbnNsYXRlLFxuICAgICAgICBtbSAgICAgOiB0cmFuc2xhdGUsXG4gICAgICAgIGggICAgICA6IHRyYW5zbGF0ZSxcbiAgICAgICAgaGggICAgIDogdHJhbnNsYXRlLFxuICAgICAgICBkICAgICAgOiAnZGFuJyxcbiAgICAgICAgZGQgICAgIDogdHJhbnNsYXRlLFxuICAgICAgICBNICAgICAgOiAnbWplc2VjJyxcbiAgICAgICAgTU0gICAgIDogdHJhbnNsYXRlLFxuICAgICAgICB5ICAgICAgOiAnZ29kaW51JyxcbiAgICAgICAgeXkgICAgIDogdHJhbnNsYXRlXG4gICAgfSxcbiAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn1cXC4vLFxuICAgIG9yZGluYWwgOiAnJWQuJyxcbiAgICB3ZWVrIDoge1xuICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgZG95IDogNyAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gMXN0IGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgIH1cbn0pO1xuXG5yZXR1cm4gYnM7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogQ2F0YWxhbiBbY2FdXG4vLyEgYXV0aG9yIDogSnVhbiBHLiBIdXJ0YWRvIDogaHR0cHM6Ly9naXRodWIuY29tL2p1YW5naHVydGFkb1xuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciBjYSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2NhJywge1xuICAgIG1vbnRocyA6IHtcbiAgICAgICAgc3RhbmRhbG9uZTogJ2dlbmVyX2ZlYnJlcl9tYXLDp19hYnJpbF9tYWlnX2p1bnlfanVsaW9sX2Fnb3N0X3NldGVtYnJlX29jdHVicmVfbm92ZW1icmVfZGVzZW1icmUnLnNwbGl0KCdfJyksXG4gICAgICAgIGZvcm1hdDogJ2RlIGdlbmVyX2RlIGZlYnJlcl9kZSBtYXLDp19kXFwnYWJyaWxfZGUgbWFpZ19kZSBqdW55X2RlIGp1bGlvbF9kXFwnYWdvc3RfZGUgc2V0ZW1icmVfZFxcJ29jdHVicmVfZGUgbm92ZW1icmVfZGUgZGVzZW1icmUnLnNwbGl0KCdfJyksXG4gICAgICAgIGlzRm9ybWF0OiAvRFtvRF0/KFxccykrTU1NTS9cbiAgICB9LFxuICAgIG1vbnRoc1Nob3J0IDogJ2dlbi5fZmVici5fbWFyw6dfYWJyLl9tYWlnX2p1bnlfanVsLl9hZy5fc2V0Ll9vY3QuX25vdi5fZGVzLicuc3BsaXQoJ18nKSxcbiAgICBtb250aHNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICB3ZWVrZGF5cyA6ICdkaXVtZW5nZV9kaWxsdW5zX2RpbWFydHNfZGltZWNyZXNfZGlqb3VzX2RpdmVuZHJlc19kaXNzYWJ0ZScuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1Nob3J0IDogJ2RnLl9kbC5fZHQuX2RjLl9kai5fZHYuX2RzLicuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c01pbiA6ICdEZ19EbF9EdF9EY19Eal9Edl9Ecycuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICBMVCA6ICdIOm1tJyxcbiAgICAgICAgTFRTIDogJ0g6bW06c3MnLFxuICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICBMTCA6ICdbZWxdIEQgTU1NTSBbZGVdIFlZWVknLFxuICAgICAgICBsbCA6ICdEIE1NTSBZWVlZJyxcbiAgICAgICAgTExMIDogJ1tlbF0gRCBNTU1NIFtkZV0gWVlZWSBbYSBsZXNdIEg6bW0nLFxuICAgICAgICBsbGwgOiAnRCBNTU0gWVlZWSwgSDptbScsXG4gICAgICAgIExMTEwgOiAnW2VsXSBkZGRkIEQgTU1NTSBbZGVdIFlZWVkgW2EgbGVzXSBIOm1tJyxcbiAgICAgICAgbGxsbCA6ICdkZGQgRCBNTU0gWVlZWSwgSDptbSdcbiAgICB9LFxuICAgIGNhbGVuZGFyIDoge1xuICAgICAgICBzYW1lRGF5IDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuICdbYXZ1aSBhICcgKyAoKHRoaXMuaG91cnMoKSAhPT0gMSkgPyAnbGVzJyA6ICdsYScpICsgJ10gTFQnO1xuICAgICAgICB9LFxuICAgICAgICBuZXh0RGF5IDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuICdbZGVtw6AgYSAnICsgKCh0aGlzLmhvdXJzKCkgIT09IDEpID8gJ2xlcycgOiAnbGEnKSArICddIExUJztcbiAgICAgICAgfSxcbiAgICAgICAgbmV4dFdlZWsgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gJ2RkZGQgW2EgJyArICgodGhpcy5ob3VycygpICE9PSAxKSA/ICdsZXMnIDogJ2xhJykgKyAnXSBMVCc7XG4gICAgICAgIH0sXG4gICAgICAgIGxhc3REYXkgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gJ1thaGlyIGEgJyArICgodGhpcy5ob3VycygpICE9PSAxKSA/ICdsZXMnIDogJ2xhJykgKyAnXSBMVCc7XG4gICAgICAgIH0sXG4gICAgICAgIGxhc3RXZWVrIDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuICdbZWxdIGRkZGQgW3Bhc3NhdCBhICcgKyAoKHRoaXMuaG91cnMoKSAhPT0gMSkgPyAnbGVzJyA6ICdsYScpICsgJ10gTFQnO1xuICAgICAgICB9LFxuICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgIH0sXG4gICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICBmdXR1cmUgOiAnZFxcJ2FxdcOtICVzJyxcbiAgICAgICAgcGFzdCA6ICdmYSAlcycsXG4gICAgICAgIHMgOiAndW5zIHNlZ29ucycsXG4gICAgICAgIG0gOiAndW4gbWludXQnLFxuICAgICAgICBtbSA6ICclZCBtaW51dHMnLFxuICAgICAgICBoIDogJ3VuYSBob3JhJyxcbiAgICAgICAgaGggOiAnJWQgaG9yZXMnLFxuICAgICAgICBkIDogJ3VuIGRpYScsXG4gICAgICAgIGRkIDogJyVkIGRpZXMnLFxuICAgICAgICBNIDogJ3VuIG1lcycsXG4gICAgICAgIE1NIDogJyVkIG1lc29zJyxcbiAgICAgICAgeSA6ICd1biBhbnknLFxuICAgICAgICB5eSA6ICclZCBhbnlzJ1xuICAgIH0sXG4gICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9KHJ8bnx0fMOofGEpLyxcbiAgICBvcmRpbmFsIDogZnVuY3Rpb24gKG51bWJlciwgcGVyaW9kKSB7XG4gICAgICAgIHZhciBvdXRwdXQgPSAobnVtYmVyID09PSAxKSA/ICdyJyA6XG4gICAgICAgICAgICAobnVtYmVyID09PSAyKSA/ICduJyA6XG4gICAgICAgICAgICAobnVtYmVyID09PSAzKSA/ICdyJyA6XG4gICAgICAgICAgICAobnVtYmVyID09PSA0KSA/ICd0JyA6ICfDqCc7XG4gICAgICAgIGlmIChwZXJpb2QgPT09ICd3JyB8fCBwZXJpb2QgPT09ICdXJykge1xuICAgICAgICAgICAgb3V0cHV0ID0gJ2EnO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudW1iZXIgKyBvdXRwdXQ7XG4gICAgfSxcbiAgICB3ZWVrIDoge1xuICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgZG95IDogNCAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgIH1cbn0pO1xuXG5yZXR1cm4gY2E7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogQ3plY2ggW2NzXVxuLy8hIGF1dGhvciA6IHBldHJiZWxhIDogaHR0cHM6Ly9naXRodWIuY29tL3BldHJiZWxhXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxudmFyIG1vbnRocyA9ICdsZWRlbl/Dum5vcl9ixZllemVuX2R1YmVuX2t2xJt0ZW5fxI1lcnZlbl/EjWVydmVuZWNfc3JwZW5fesOhxZnDrV/FmcOtamVuX2xpc3RvcGFkX3Byb3NpbmVjJy5zcGxpdCgnXycpO1xudmFyIG1vbnRoc1Nob3J0ID0gJ2xlZF/Dum5vX2LFmWVfZHViX2t2xJtfxI12bl/EjXZjX3NycF96w6HFmV/FmcOtal9saXNfcHJvJy5zcGxpdCgnXycpO1xuZnVuY3Rpb24gcGx1cmFsKG4pIHtcbiAgICByZXR1cm4gKG4gPiAxKSAmJiAobiA8IDUpICYmICh+fihuIC8gMTApICE9PSAxKTtcbn1cbmZ1bmN0aW9uIHRyYW5zbGF0ZShudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGtleSwgaXNGdXR1cmUpIHtcbiAgICB2YXIgcmVzdWx0ID0gbnVtYmVyICsgJyAnO1xuICAgIHN3aXRjaCAoa2V5KSB7XG4gICAgICAgIGNhc2UgJ3MnOiAgLy8gYSBmZXcgc2Vjb25kcyAvIGluIGEgZmV3IHNlY29uZHMgLyBhIGZldyBzZWNvbmRzIGFnb1xuICAgICAgICAgICAgcmV0dXJuICh3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlKSA/ICdww6FyIHNla3VuZCcgOiAncMOhciBzZWt1bmRhbWknO1xuICAgICAgICBjYXNlICdtJzogIC8vIGEgbWludXRlIC8gaW4gYSBtaW51dGUgLyBhIG1pbnV0ZSBhZ29cbiAgICAgICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4ID8gJ21pbnV0YScgOiAoaXNGdXR1cmUgPyAnbWludXR1JyA6ICdtaW51dG91Jyk7XG4gICAgICAgIGNhc2UgJ21tJzogLy8gOSBtaW51dGVzIC8gaW4gOSBtaW51dGVzIC8gOSBtaW51dGVzIGFnb1xuICAgICAgICAgICAgaWYgKHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgKHBsdXJhbChudW1iZXIpID8gJ21pbnV0eScgOiAnbWludXQnKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArICdtaW51dGFtaSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnaCc6ICAvLyBhbiBob3VyIC8gaW4gYW4gaG91ciAvIGFuIGhvdXIgYWdvXG4gICAgICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCA/ICdob2RpbmEnIDogKGlzRnV0dXJlID8gJ2hvZGludScgOiAnaG9kaW5vdScpO1xuICAgICAgICBjYXNlICdoaCc6IC8vIDkgaG91cnMgLyBpbiA5IGhvdXJzIC8gOSBob3VycyBhZ29cbiAgICAgICAgICAgIGlmICh3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArIChwbHVyYWwobnVtYmVyKSA/ICdob2RpbnknIDogJ2hvZGluJyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAnaG9kaW5hbWknO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2QnOiAgLy8gYSBkYXkgLyBpbiBhIGRheSAvIGEgZGF5IGFnb1xuICAgICAgICAgICAgcmV0dXJuICh3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlKSA/ICdkZW4nIDogJ2RuZW0nO1xuICAgICAgICBjYXNlICdkZCc6IC8vIDkgZGF5cyAvIGluIDkgZGF5cyAvIDkgZGF5cyBhZ29cbiAgICAgICAgICAgIGlmICh3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArIChwbHVyYWwobnVtYmVyKSA/ICdkbnknIDogJ2Ruw60nKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArICdkbnknO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ00nOiAgLy8gYSBtb250aCAvIGluIGEgbW9udGggLyBhIG1vbnRoIGFnb1xuICAgICAgICAgICAgcmV0dXJuICh3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlKSA/ICdtxJtzw61jJyA6ICdtxJtzw61jZW0nO1xuICAgICAgICBjYXNlICdNTSc6IC8vIDkgbW9udGhzIC8gaW4gOSBtb250aHMgLyA5IG1vbnRocyBhZ29cbiAgICAgICAgICAgIGlmICh3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArIChwbHVyYWwobnVtYmVyKSA/ICdtxJtzw61jZScgOiAnbcSbc8OtY8WvJyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAnbcSbc8OtY2knO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3knOiAgLy8gYSB5ZWFyIC8gaW4gYSB5ZWFyIC8gYSB5ZWFyIGFnb1xuICAgICAgICAgICAgcmV0dXJuICh3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlKSA/ICdyb2snIDogJ3Jva2VtJztcbiAgICAgICAgY2FzZSAneXknOiAvLyA5IHllYXJzIC8gaW4gOSB5ZWFycyAvIDkgeWVhcnMgYWdvXG4gICAgICAgICAgICBpZiAod2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAocGx1cmFsKG51bWJlcikgPyAncm9reScgOiAnbGV0Jyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAnbGV0eSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICB9XG59XG5cbnZhciBjcyA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2NzJywge1xuICAgIG1vbnRocyA6IG1vbnRocyxcbiAgICBtb250aHNTaG9ydCA6IG1vbnRoc1Nob3J0LFxuICAgIG1vbnRoc1BhcnNlIDogKGZ1bmN0aW9uIChtb250aHMsIG1vbnRoc1Nob3J0KSB7XG4gICAgICAgIHZhciBpLCBfbW9udGhzUGFyc2UgPSBbXTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IDEyOyBpKyspIHtcbiAgICAgICAgICAgIC8vIHVzZSBjdXN0b20gcGFyc2VyIHRvIHNvbHZlIHByb2JsZW0gd2l0aCBKdWx5ICjEjWVydmVuZWMpXG4gICAgICAgICAgICBfbW9udGhzUGFyc2VbaV0gPSBuZXcgUmVnRXhwKCdeJyArIG1vbnRoc1tpXSArICckfF4nICsgbW9udGhzU2hvcnRbaV0gKyAnJCcsICdpJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIF9tb250aHNQYXJzZTtcbiAgICB9KG1vbnRocywgbW9udGhzU2hvcnQpKSxcbiAgICBzaG9ydE1vbnRoc1BhcnNlIDogKGZ1bmN0aW9uIChtb250aHNTaG9ydCkge1xuICAgICAgICB2YXIgaSwgX3Nob3J0TW9udGhzUGFyc2UgPSBbXTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IDEyOyBpKyspIHtcbiAgICAgICAgICAgIF9zaG9ydE1vbnRoc1BhcnNlW2ldID0gbmV3IFJlZ0V4cCgnXicgKyBtb250aHNTaG9ydFtpXSArICckJywgJ2knKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gX3Nob3J0TW9udGhzUGFyc2U7XG4gICAgfShtb250aHNTaG9ydCkpLFxuICAgIGxvbmdNb250aHNQYXJzZSA6IChmdW5jdGlvbiAobW9udGhzKSB7XG4gICAgICAgIHZhciBpLCBfbG9uZ01vbnRoc1BhcnNlID0gW107XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCAxMjsgaSsrKSB7XG4gICAgICAgICAgICBfbG9uZ01vbnRoc1BhcnNlW2ldID0gbmV3IFJlZ0V4cCgnXicgKyBtb250aHNbaV0gKyAnJCcsICdpJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIF9sb25nTW9udGhzUGFyc2U7XG4gICAgfShtb250aHMpKSxcbiAgICB3ZWVrZGF5cyA6ICduZWTEm2xlX3BvbmTEm2zDrV/DunRlcsO9X3N0xZllZGFfxI10dnJ0ZWtfcMOhdGVrX3NvYm90YScuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1Nob3J0IDogJ25lX3BvX8O6dF9zdF/EjXRfcMOhX3NvJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzTWluIDogJ25lX3BvX8O6dF9zdF/EjXRfcMOhX3NvJy5zcGxpdCgnXycpLFxuICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICBMVDogJ0g6bW0nLFxuICAgICAgICBMVFMgOiAnSDptbTpzcycsXG4gICAgICAgIEwgOiAnREQuTU0uWVlZWScsXG4gICAgICAgIExMIDogJ0QuIE1NTU0gWVlZWScsXG4gICAgICAgIExMTCA6ICdELiBNTU1NIFlZWVkgSDptbScsXG4gICAgICAgIExMTEwgOiAnZGRkZCBELiBNTU1NIFlZWVkgSDptbScsXG4gICAgICAgIGwgOiAnRC4gTS4gWVlZWSdcbiAgICB9LFxuICAgIGNhbGVuZGFyIDoge1xuICAgICAgICBzYW1lRGF5OiAnW2RuZXMgdl0gTFQnLFxuICAgICAgICBuZXh0RGF5OiAnW3rDrXRyYSB2XSBMVCcsXG4gICAgICAgIG5leHRXZWVrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHRoaXMuZGF5KCkpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3YgbmVkxJtsaSB2XSBMVCc7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbdl0gZGRkZCBbdl0gTFQnO1xuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbdmUgc3TFmWVkdSB2XSBMVCc7XG4gICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t2ZSDEjXR2cnRlayB2XSBMVCc7XG4gICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t2IHDDoXRlayB2XSBMVCc7XG4gICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t2IHNvYm90dSB2XSBMVCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGxhc3REYXk6ICdbdsSNZXJhIHZdIExUJyxcbiAgICAgICAgbGFzdFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHN3aXRjaCAodGhpcy5kYXkoKSkge1xuICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbbWludWxvdSBuZWTEm2xpIHZdIExUJztcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1ttaW51bMOpXSBkZGRkIFt2XSBMVCc7XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1ttaW51bG91IHN0xZllZHUgdl0gTFQnO1xuICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnW21pbnVsw71dIGRkZGQgW3ZdIExUJztcbiAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnW21pbnVsb3Ugc29ib3R1IHZdIExUJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgc2FtZUVsc2U6ICdMJ1xuICAgIH0sXG4gICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICBmdXR1cmUgOiAnemEgJXMnLFxuICAgICAgICBwYXN0IDogJ3DFmWVkICVzJyxcbiAgICAgICAgcyA6IHRyYW5zbGF0ZSxcbiAgICAgICAgbSA6IHRyYW5zbGF0ZSxcbiAgICAgICAgbW0gOiB0cmFuc2xhdGUsXG4gICAgICAgIGggOiB0cmFuc2xhdGUsXG4gICAgICAgIGhoIDogdHJhbnNsYXRlLFxuICAgICAgICBkIDogdHJhbnNsYXRlLFxuICAgICAgICBkZCA6IHRyYW5zbGF0ZSxcbiAgICAgICAgTSA6IHRyYW5zbGF0ZSxcbiAgICAgICAgTU0gOiB0cmFuc2xhdGUsXG4gICAgICAgIHkgOiB0cmFuc2xhdGUsXG4gICAgICAgIHl5IDogdHJhbnNsYXRlXG4gICAgfSxcbiAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlIDogL1xcZHsxLDJ9XFwuLyxcbiAgICBvcmRpbmFsIDogJyVkLicsXG4gICAgd2VlayA6IHtcbiAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICB9XG59KTtcblxucmV0dXJuIGNzO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IENodXZhc2ggW2N2XVxuLy8hIGF1dGhvciA6IEFuYXRvbHkgTWlyb25vdiA6IGh0dHBzOi8vZ2l0aHViLmNvbS9taXJvbnRvbGlcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG52YXIgY3YgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdjdicsIHtcbiAgICBtb250aHMgOiAn0LrTkdGA0LvQsNGHX9C90LDRgNOR0YFf0L/Rg9GIX9Cw0LrQsF/QvNCw0Llf0qvTl9GA0YLQvNC1X9GD0YLTkV/Sq9GD0YDQu9CwX9Cw0LLTkdC9X9GO0L/QsF/Rh9Oz0Lpf0YDQsNGI0YLQsNCyJy5zcGxpdCgnXycpLFxuICAgIG1vbnRoc1Nob3J0IDogJ9C605HRgF/QvdCw0YBf0L/Rg9GIX9Cw0LrQsF/QvNCw0Llf0qvTl9GAX9GD0YLTkV/Sq9GD0YBf0LDQstC9X9GO0L/QsF/Rh9Oz0Lpf0YDQsNGIJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzIDogJ9Cy0YvRgNGB0LDRgNC90LjQutGD0L1f0YLRg9C90YLQuNC60YPQvV/Ri9GC0LvQsNGA0LjQutGD0L1f0Y7QvdC60YPQvV/QutOX0qvQvdC10YDQvdC40LrRg9C9X9GN0YDQvdC10LrRg9C9X9GI05HQvNCw0YLQutGD0L0nLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNTaG9ydCA6ICfQstGL0YBf0YLRg9C9X9GL0YLQu1/RjtC9X9C605fSq1/RjdGA0L1f0YjTkdC8Jy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzTWluIDogJ9Cy0YBf0YLQvV/Ri9GCX9GO0L1f0LrSq1/RjdGAX9GI0LwnLnNwbGl0KCdfJyksXG4gICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgTCA6ICdERC1NTS1ZWVlZJyxcbiAgICAgICAgTEwgOiAnWVlZWSBb0qvRg9C70YXQuF0gTU1NTSBb0YPQudOR0YXTl9C9XSBEWy3QvNOX0YjTl10nLFxuICAgICAgICBMTEwgOiAnWVlZWSBb0qvRg9C70YXQuF0gTU1NTSBb0YPQudOR0YXTl9C9XSBEWy3QvNOX0YjTl10sIEhIOm1tJyxcbiAgICAgICAgTExMTCA6ICdkZGRkLCBZWVlZIFvSq9GD0LvRhdC4XSBNTU1NIFvRg9C505HRhdOX0L1dIERbLdC805fRiNOXXSwgSEg6bW0nXG4gICAgfSxcbiAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgc2FtZURheTogJ1vQn9Cw0Y/QvV0gTFQgW9GB0LXRhdC10YLRgNC1XScsXG4gICAgICAgIG5leHREYXk6ICdb0KvRgNCw0L1dIExUIFvRgdC10YXQtdGC0YDQtV0nLFxuICAgICAgICBsYXN0RGF5OiAnW9OW0L3QtdGAXSBMVCBb0YHQtdGF0LXRgtGA0LVdJyxcbiAgICAgICAgbmV4dFdlZWs6ICdb0qrQuNGC0LXRgV0gZGRkZCBMVCBb0YHQtdGF0LXRgtGA0LVdJyxcbiAgICAgICAgbGFzdFdlZWs6ICdb0JjRgNGC0L3Tl10gZGRkZCBMVCBb0YHQtdGF0LXRgtGA0LVdJyxcbiAgICAgICAgc2FtZUVsc2U6ICdMJ1xuICAgIH0sXG4gICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICBmdXR1cmUgOiBmdW5jdGlvbiAob3V0cHV0KSB7XG4gICAgICAgICAgICB2YXIgYWZmaXggPSAv0YHQtdGF0LXRgiQvaS5leGVjKG91dHB1dCkgPyAn0YDQtdC9JyA6IC/Sq9GD0LskL2kuZXhlYyhvdXRwdXQpID8gJ9GC0LDQvScgOiAn0YDQsNC9JztcbiAgICAgICAgICAgIHJldHVybiBvdXRwdXQgKyBhZmZpeDtcbiAgICAgICAgfSxcbiAgICAgICAgcGFzdCA6ICclcyDQutCw0Y/Qu9C70LAnLFxuICAgICAgICBzIDogJ9C/05fRgC3QuNC6INKr0LXQutC60YPQvdGCJyxcbiAgICAgICAgbSA6ICfQv9OX0YAg0LzQuNC90YPRgicsXG4gICAgICAgIG1tIDogJyVkINC80LjQvdGD0YInLFxuICAgICAgICBoIDogJ9C/05fRgCDRgdC10YXQtdGCJyxcbiAgICAgICAgaGggOiAnJWQg0YHQtdGF0LXRgicsXG4gICAgICAgIGQgOiAn0L/Tl9GAINC60YPQvScsXG4gICAgICAgIGRkIDogJyVkINC60YPQvScsXG4gICAgICAgIE0gOiAn0L/Tl9GAINGD0LnTkdGFJyxcbiAgICAgICAgTU0gOiAnJWQg0YPQudOR0YUnLFxuICAgICAgICB5IDogJ9C/05fRgCDSq9GD0LsnLFxuICAgICAgICB5eSA6ICclZCDSq9GD0LsnXG4gICAgfSxcbiAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0t0LzTl9GILyxcbiAgICBvcmRpbmFsIDogJyVkLdC805fRiCcsXG4gICAgd2VlayA6IHtcbiAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgIGRveSA6IDcgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDFzdCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICB9XG59KTtcblxucmV0dXJuIGN2O1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IFdlbHNoIFtjeV1cbi8vISBhdXRob3IgOiBSb2JlcnQgQWxsZW4gOiBodHRwczovL2dpdGh1Yi5jb20vcm9iZ2FsbGVuXG4vLyEgYXV0aG9yIDogaHR0cHM6Ly9naXRodWIuY29tL3J5YW5ncmVhdmVzXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxudmFyIGN5ID0gbW9tZW50LmRlZmluZUxvY2FsZSgnY3knLCB7XG4gICAgbW9udGhzOiAnSW9uYXdyX0Nod2Vmcm9yX01hd3J0aF9FYnJpbGxfTWFpX01laGVmaW5fR29yZmZlbm5hZl9Bd3N0X01lZGlfSHlkcmVmX1RhY2h3ZWRkX1JoYWdmeXInLnNwbGl0KCdfJyksXG4gICAgbW9udGhzU2hvcnQ6ICdJb25fQ2h3ZV9NYXdfRWJyX01haV9NZWhfR29yX0F3c19NZWRfSHlkX1RhY2hfUmhhZycuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5czogJ0R5ZGQgU3VsX0R5ZGQgTGx1bl9EeWRkIE1hd3J0aF9EeWRkIE1lcmNoZXJfRHlkZCBJYXVfRHlkZCBHd2VuZXJfRHlkZCBTYWR3cm4nLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNTaG9ydDogJ1N1bF9MbHVuX01hd19NZXJfSWF1X0d3ZV9TYWQnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNNaW46ICdTdV9MbF9NYV9NZV9JYV9Hd19TYScuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgIC8vIHRpbWUgZm9ybWF0cyBhcmUgdGhlIHNhbWUgYXMgZW4tZ2JcbiAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICBMTExMOiAnZGRkZCwgRCBNTU1NIFlZWVkgSEg6bW0nXG4gICAgfSxcbiAgICBjYWxlbmRhcjoge1xuICAgICAgICBzYW1lRGF5OiAnW0hlZGRpdyBhbV0gTFQnLFxuICAgICAgICBuZXh0RGF5OiAnW1lmb3J5IGFtXSBMVCcsXG4gICAgICAgIG5leHRXZWVrOiAnZGRkZCBbYW1dIExUJyxcbiAgICAgICAgbGFzdERheTogJ1tEZG9lIGFtXSBMVCcsXG4gICAgICAgIGxhc3RXZWVrOiAnZGRkZCBbZGl3ZXRoYWYgYW1dIExUJyxcbiAgICAgICAgc2FtZUVsc2U6ICdMJ1xuICAgIH0sXG4gICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgIGZ1dHVyZTogJ21ld24gJXMnLFxuICAgICAgICBwYXN0OiAnJXMgeW4gw7RsJyxcbiAgICAgICAgczogJ3ljaHlkaWcgZWlsaWFkYXUnLFxuICAgICAgICBtOiAnbXVudWQnLFxuICAgICAgICBtbTogJyVkIG11bnVkJyxcbiAgICAgICAgaDogJ2F3cicsXG4gICAgICAgIGhoOiAnJWQgYXdyJyxcbiAgICAgICAgZDogJ2Rpd3Jub2QnLFxuICAgICAgICBkZDogJyVkIGRpd3Jub2QnLFxuICAgICAgICBNOiAnbWlzJyxcbiAgICAgICAgTU06ICclZCBtaXMnLFxuICAgICAgICB5OiAnYmx3eWRkeW4nLFxuICAgICAgICB5eTogJyVkIGZseW5lZGQnXG4gICAgfSxcbiAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0oZmVkfGFpbnxhZnxpbHx5ZGR8ZWR8ZWcpLyxcbiAgICAvLyB0cmFkaXRpb25hbCBvcmRpbmFsIG51bWJlcnMgYWJvdmUgMzEgYXJlIG5vdCBjb21tb25seSB1c2VkIGluIGNvbGxvcXVpYWwgV2Vsc2hcbiAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgIHZhciBiID0gbnVtYmVyLFxuICAgICAgICAgICAgb3V0cHV0ID0gJycsXG4gICAgICAgICAgICBsb29rdXAgPSBbXG4gICAgICAgICAgICAgICAgJycsICdhZicsICdpbCcsICd5ZGQnLCAneWRkJywgJ2VkJywgJ2VkJywgJ2VkJywgJ2ZlZCcsICdmZWQnLCAnZmVkJywgLy8gMWFmIHRvIDEwZmVkXG4gICAgICAgICAgICAgICAgJ2VnJywgJ2ZlZCcsICdlZycsICdlZycsICdmZWQnLCAnZWcnLCAnZWcnLCAnZmVkJywgJ2VnJywgJ2ZlZCcgLy8gMTFlZyB0byAyMGZlZFxuICAgICAgICAgICAgXTtcbiAgICAgICAgaWYgKGIgPiAyMCkge1xuICAgICAgICAgICAgaWYgKGIgPT09IDQwIHx8IGIgPT09IDUwIHx8IGIgPT09IDYwIHx8IGIgPT09IDgwIHx8IGIgPT09IDEwMCkge1xuICAgICAgICAgICAgICAgIG91dHB1dCA9ICdmZWQnOyAvLyBub3QgMzBhaW4sIDcwYWluIG9yIDkwYWluXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG91dHB1dCA9ICdhaW4nO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGIgPiAwKSB7XG4gICAgICAgICAgICBvdXRwdXQgPSBsb29rdXBbYl07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bWJlciArIG91dHB1dDtcbiAgICB9LFxuICAgIHdlZWsgOiB7XG4gICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgfVxufSk7XG5cbnJldHVybiBjeTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBEYW5pc2ggW2RhXVxuLy8hIGF1dGhvciA6IFVscmlrIE5pZWxzZW4gOiBodHRwczovL2dpdGh1Yi5jb20vbXJiYXNlXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxudmFyIGRhID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZGEnLCB7XG4gICAgbW9udGhzIDogJ2phbnVhcl9mZWJydWFyX21hcnRzX2FwcmlsX21hal9qdW5pX2p1bGlfYXVndXN0X3NlcHRlbWJlcl9va3RvYmVyX25vdmVtYmVyX2RlY2VtYmVyJy5zcGxpdCgnXycpLFxuICAgIG1vbnRoc1Nob3J0IDogJ2phbl9mZWJfbWFyX2Fwcl9tYWpfanVuX2p1bF9hdWdfc2VwX29rdF9ub3ZfZGVjJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzIDogJ3PDuG5kYWdfbWFuZGFnX3RpcnNkYWdfb25zZGFnX3RvcnNkYWdfZnJlZGFnX2zDuHJkYWcnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNTaG9ydCA6ICdzw7huX21hbl90aXJfb25zX3Rvcl9mcmVfbMO4cicuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c01pbiA6ICdzw7hfbWFfdGlfb25fdG9fZnJfbMO4Jy5zcGxpdCgnXycpLFxuICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgIExMIDogJ0QuIE1NTU0gWVlZWScsXG4gICAgICAgIExMTCA6ICdELiBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICBMTExMIDogJ2RkZGQgW2QuXSBELiBNTU1NIFlZWVkgW2tsLl0gSEg6bW0nXG4gICAgfSxcbiAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgc2FtZURheSA6ICdbaSBkYWcga2wuXSBMVCcsXG4gICAgICAgIG5leHREYXkgOiAnW2kgbW9yZ2VuIGtsLl0gTFQnLFxuICAgICAgICBuZXh0V2VlayA6ICdww6UgZGRkZCBba2wuXSBMVCcsXG4gICAgICAgIGxhc3REYXkgOiAnW2kgZ8OlciBrbC5dIExUJyxcbiAgICAgICAgbGFzdFdlZWsgOiAnW2ldIGRkZGRbcyBrbC5dIExUJyxcbiAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICB9LFxuICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgZnV0dXJlIDogJ29tICVzJyxcbiAgICAgICAgcGFzdCA6ICclcyBzaWRlbicsXG4gICAgICAgIHMgOiAnZsOlIHNla3VuZGVyJyxcbiAgICAgICAgbSA6ICdldCBtaW51dCcsXG4gICAgICAgIG1tIDogJyVkIG1pbnV0dGVyJyxcbiAgICAgICAgaCA6ICdlbiB0aW1lJyxcbiAgICAgICAgaGggOiAnJWQgdGltZXInLFxuICAgICAgICBkIDogJ2VuIGRhZycsXG4gICAgICAgIGRkIDogJyVkIGRhZ2UnLFxuICAgICAgICBNIDogJ2VuIG3DpW5lZCcsXG4gICAgICAgIE1NIDogJyVkIG3DpW5lZGVyJyxcbiAgICAgICAgeSA6ICdldCDDpXInLFxuICAgICAgICB5eSA6ICclZCDDpXInXG4gICAgfSxcbiAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn1cXC4vLFxuICAgIG9yZGluYWwgOiAnJWQuJyxcbiAgICB3ZWVrIDoge1xuICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgZG95IDogNCAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgIH1cbn0pO1xuXG5yZXR1cm4gZGE7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogR2VybWFuIFtkZV1cbi8vISBhdXRob3IgOiBsbHVjaHMgOiBodHRwczovL2dpdGh1Yi5jb20vbGx1Y2hzXG4vLyEgYXV0aG9yOiBNZW5lbGlvbiBFbGVuc8O6bGU6IGh0dHBzOi8vZ2l0aHViLmNvbS9PaXJlXG4vLyEgYXV0aG9yIDogTWlrb2xhaiBEYWRlbGEgOiBodHRwczovL2dpdGh1Yi5jb20vbWlrMDFhalxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbmZ1bmN0aW9uIHByb2Nlc3NSZWxhdGl2ZVRpbWUobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXksIGlzRnV0dXJlKSB7XG4gICAgdmFyIGZvcm1hdCA9IHtcbiAgICAgICAgJ20nOiBbJ2VpbmUgTWludXRlJywgJ2VpbmVyIE1pbnV0ZSddLFxuICAgICAgICAnaCc6IFsnZWluZSBTdHVuZGUnLCAnZWluZXIgU3R1bmRlJ10sXG4gICAgICAgICdkJzogWydlaW4gVGFnJywgJ2VpbmVtIFRhZyddLFxuICAgICAgICAnZGQnOiBbbnVtYmVyICsgJyBUYWdlJywgbnVtYmVyICsgJyBUYWdlbiddLFxuICAgICAgICAnTSc6IFsnZWluIE1vbmF0JywgJ2VpbmVtIE1vbmF0J10sXG4gICAgICAgICdNTSc6IFtudW1iZXIgKyAnIE1vbmF0ZScsIG51bWJlciArICcgTW9uYXRlbiddLFxuICAgICAgICAneSc6IFsnZWluIEphaHInLCAnZWluZW0gSmFociddLFxuICAgICAgICAneXknOiBbbnVtYmVyICsgJyBKYWhyZScsIG51bWJlciArICcgSmFocmVuJ11cbiAgICB9O1xuICAgIHJldHVybiB3aXRob3V0U3VmZml4ID8gZm9ybWF0W2tleV1bMF0gOiBmb3JtYXRba2V5XVsxXTtcbn1cblxudmFyIGRlID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZGUnLCB7XG4gICAgbW9udGhzIDogJ0phbnVhcl9GZWJydWFyX03DpHJ6X0FwcmlsX01haV9KdW5pX0p1bGlfQXVndXN0X1NlcHRlbWJlcl9Pa3RvYmVyX05vdmVtYmVyX0RlemVtYmVyJy5zcGxpdCgnXycpLFxuICAgIG1vbnRoc1Nob3J0IDogJ0phbi5fRmVici5fTXJ6Ll9BcHIuX01haV9KdW4uX0p1bC5fQXVnLl9TZXB0Ll9Pa3QuX05vdi5fRGV6Licuc3BsaXQoJ18nKSxcbiAgICBtb250aHNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICB3ZWVrZGF5cyA6ICdTb25udGFnX01vbnRhZ19EaWVuc3RhZ19NaXR0d29jaF9Eb25uZXJzdGFnX0ZyZWl0YWdfU2Ftc3RhZycuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1Nob3J0IDogJ1NvLl9Nby5fRGkuX01pLl9Eby5fRnIuX1NhLicuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c01pbiA6ICdTb19Nb19EaV9NaV9Eb19Gcl9TYScuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICBMIDogJ0RELk1NLllZWVknLFxuICAgICAgICBMTCA6ICdELiBNTU1NIFlZWVknLFxuICAgICAgICBMTEwgOiAnRC4gTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgTExMTCA6ICdkZGRkLCBELiBNTU1NIFlZWVkgSEg6bW0nXG4gICAgfSxcbiAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgc2FtZURheTogJ1toZXV0ZSB1bV0gTFQgW1Vocl0nLFxuICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICBuZXh0RGF5OiAnW21vcmdlbiB1bV0gTFQgW1Vocl0nLFxuICAgICAgICBuZXh0V2VlazogJ2RkZGQgW3VtXSBMVCBbVWhyXScsXG4gICAgICAgIGxhc3REYXk6ICdbZ2VzdGVybiB1bV0gTFQgW1Vocl0nLFxuICAgICAgICBsYXN0V2VlazogJ1tsZXR6dGVuXSBkZGRkIFt1bV0gTFQgW1Vocl0nXG4gICAgfSxcbiAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgIGZ1dHVyZSA6ICdpbiAlcycsXG4gICAgICAgIHBhc3QgOiAndm9yICVzJyxcbiAgICAgICAgcyA6ICdlaW4gcGFhciBTZWt1bmRlbicsXG4gICAgICAgIG0gOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICBtbSA6ICclZCBNaW51dGVuJyxcbiAgICAgICAgaCA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgIGhoIDogJyVkIFN0dW5kZW4nLFxuICAgICAgICBkIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgZGQgOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICBNIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgTU0gOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICB5IDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgeXkgOiBwcm9jZXNzUmVsYXRpdmVUaW1lXG4gICAgfSxcbiAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn1cXC4vLFxuICAgIG9yZGluYWwgOiAnJWQuJyxcbiAgICB3ZWVrIDoge1xuICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgZG95IDogNCAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgIH1cbn0pO1xuXG5yZXR1cm4gZGU7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogR2VybWFuIChBdXN0cmlhKSBbZGUtYXRdXG4vLyEgYXV0aG9yIDogbGx1Y2hzIDogaHR0cHM6Ly9naXRodWIuY29tL2xsdWNoc1xuLy8hIGF1dGhvcjogTWVuZWxpb24gRWxlbnPDumxlOiBodHRwczovL2dpdGh1Yi5jb20vT2lyZVxuLy8hIGF1dGhvciA6IE1hcnRpbiBHcm9sbGVyIDogaHR0cHM6Ly9naXRodWIuY29tL01hZE1HXG4vLyEgYXV0aG9yIDogTWlrb2xhaiBEYWRlbGEgOiBodHRwczovL2dpdGh1Yi5jb20vbWlrMDFhalxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbmZ1bmN0aW9uIHByb2Nlc3NSZWxhdGl2ZVRpbWUobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXksIGlzRnV0dXJlKSB7XG4gICAgdmFyIGZvcm1hdCA9IHtcbiAgICAgICAgJ20nOiBbJ2VpbmUgTWludXRlJywgJ2VpbmVyIE1pbnV0ZSddLFxuICAgICAgICAnaCc6IFsnZWluZSBTdHVuZGUnLCAnZWluZXIgU3R1bmRlJ10sXG4gICAgICAgICdkJzogWydlaW4gVGFnJywgJ2VpbmVtIFRhZyddLFxuICAgICAgICAnZGQnOiBbbnVtYmVyICsgJyBUYWdlJywgbnVtYmVyICsgJyBUYWdlbiddLFxuICAgICAgICAnTSc6IFsnZWluIE1vbmF0JywgJ2VpbmVtIE1vbmF0J10sXG4gICAgICAgICdNTSc6IFtudW1iZXIgKyAnIE1vbmF0ZScsIG51bWJlciArICcgTW9uYXRlbiddLFxuICAgICAgICAneSc6IFsnZWluIEphaHInLCAnZWluZW0gSmFociddLFxuICAgICAgICAneXknOiBbbnVtYmVyICsgJyBKYWhyZScsIG51bWJlciArICcgSmFocmVuJ11cbiAgICB9O1xuICAgIHJldHVybiB3aXRob3V0U3VmZml4ID8gZm9ybWF0W2tleV1bMF0gOiBmb3JtYXRba2V5XVsxXTtcbn1cblxudmFyIGRlQXQgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdkZS1hdCcsIHtcbiAgICBtb250aHMgOiAnSsOkbm5lcl9GZWJydWFyX03DpHJ6X0FwcmlsX01haV9KdW5pX0p1bGlfQXVndXN0X1NlcHRlbWJlcl9Pa3RvYmVyX05vdmVtYmVyX0RlemVtYmVyJy5zcGxpdCgnXycpLFxuICAgIG1vbnRoc1Nob3J0IDogJ0rDpG4uX0ZlYnIuX01yei5fQXByLl9NYWlfSnVuLl9KdWwuX0F1Zy5fU2VwdC5fT2t0Ll9Ob3YuX0Rlei4nLnNwbGl0KCdfJyksXG4gICAgbW9udGhzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgd2Vla2RheXMgOiAnU29ubnRhZ19Nb250YWdfRGllbnN0YWdfTWl0dHdvY2hfRG9ubmVyc3RhZ19GcmVpdGFnX1NhbXN0YWcnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNTaG9ydCA6ICdTby5fTW8uX0RpLl9NaS5fRG8uX0ZyLl9TYS4nLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNNaW4gOiAnU29fTW9fRGlfTWlfRG9fRnJfU2EnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgTCA6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgTEwgOiAnRC4gTU1NTSBZWVlZJyxcbiAgICAgICAgTExMIDogJ0QuIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIExMTEwgOiAnZGRkZCwgRC4gTU1NTSBZWVlZIEhIOm1tJ1xuICAgIH0sXG4gICAgY2FsZW5kYXIgOiB7XG4gICAgICAgIHNhbWVEYXk6ICdbaGV1dGUgdW1dIExUIFtVaHJdJyxcbiAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgbmV4dERheTogJ1ttb3JnZW4gdW1dIExUIFtVaHJdJyxcbiAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFt1bV0gTFQgW1Vocl0nLFxuICAgICAgICBsYXN0RGF5OiAnW2dlc3Rlcm4gdW1dIExUIFtVaHJdJyxcbiAgICAgICAgbGFzdFdlZWs6ICdbbGV0enRlbl0gZGRkZCBbdW1dIExUIFtVaHJdJ1xuICAgIH0sXG4gICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICBmdXR1cmUgOiAnaW4gJXMnLFxuICAgICAgICBwYXN0IDogJ3ZvciAlcycsXG4gICAgICAgIHMgOiAnZWluIHBhYXIgU2VrdW5kZW4nLFxuICAgICAgICBtIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgbW0gOiAnJWQgTWludXRlbicsXG4gICAgICAgIGggOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICBoaCA6ICclZCBTdHVuZGVuJyxcbiAgICAgICAgZCA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgIGRkIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgTSA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgIE1NIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgeSA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgIHl5IDogcHJvY2Vzc1JlbGF0aXZlVGltZVxuICAgIH0sXG4gICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9XFwuLyxcbiAgICBvcmRpbmFsIDogJyVkLicsXG4gICAgd2VlayA6IHtcbiAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICB9XG59KTtcblxucmV0dXJuIGRlQXQ7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogR2VybWFuIChTd2l0emVybGFuZCkgW2RlLWNoXVxuLy8hIGF1dGhvciA6IHNzY2h1ZWxsZXIgOiBodHRwczovL2dpdGh1Yi5jb20vc3NjaHVlbGxlclxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbi8vIGJhc2VkIG9uOiBodHRwczovL3d3dy5iay5hZG1pbi5jaC9kb2t1bWVudGF0aW9uL3NwcmFjaGVuLzA0OTE1LzA1MDE2L2luZGV4Lmh0bWw/bGFuZz1kZSNcblxuZnVuY3Rpb24gcHJvY2Vzc1JlbGF0aXZlVGltZShudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGtleSwgaXNGdXR1cmUpIHtcbiAgICB2YXIgZm9ybWF0ID0ge1xuICAgICAgICAnbSc6IFsnZWluZSBNaW51dGUnLCAnZWluZXIgTWludXRlJ10sXG4gICAgICAgICdoJzogWydlaW5lIFN0dW5kZScsICdlaW5lciBTdHVuZGUnXSxcbiAgICAgICAgJ2QnOiBbJ2VpbiBUYWcnLCAnZWluZW0gVGFnJ10sXG4gICAgICAgICdkZCc6IFtudW1iZXIgKyAnIFRhZ2UnLCBudW1iZXIgKyAnIFRhZ2VuJ10sXG4gICAgICAgICdNJzogWydlaW4gTW9uYXQnLCAnZWluZW0gTW9uYXQnXSxcbiAgICAgICAgJ01NJzogW251bWJlciArICcgTW9uYXRlJywgbnVtYmVyICsgJyBNb25hdGVuJ10sXG4gICAgICAgICd5JzogWydlaW4gSmFocicsICdlaW5lbSBKYWhyJ10sXG4gICAgICAgICd5eSc6IFtudW1iZXIgKyAnIEphaHJlJywgbnVtYmVyICsgJyBKYWhyZW4nXVxuICAgIH07XG4gICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggPyBmb3JtYXRba2V5XVswXSA6IGZvcm1hdFtrZXldWzFdO1xufVxuXG52YXIgZGVDaCA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2RlLWNoJywge1xuICAgIG1vbnRocyA6ICdKYW51YXJfRmVicnVhcl9Nw6Ryel9BcHJpbF9NYWlfSnVuaV9KdWxpX0F1Z3VzdF9TZXB0ZW1iZXJfT2t0b2Jlcl9Ob3ZlbWJlcl9EZXplbWJlcicuc3BsaXQoJ18nKSxcbiAgICBtb250aHNTaG9ydCA6ICdKYW4uX0ZlYnIuX03DpHJ6X0FwcmlsX01haV9KdW5pX0p1bGlfQXVnLl9TZXB0Ll9Pa3QuX05vdi5fRGV6Licuc3BsaXQoJ18nKSxcbiAgICBtb250aHNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICB3ZWVrZGF5cyA6ICdTb25udGFnX01vbnRhZ19EaWVuc3RhZ19NaXR0d29jaF9Eb25uZXJzdGFnX0ZyZWl0YWdfU2Ftc3RhZycuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1Nob3J0IDogJ1NvX01vX0RpX01pX0RvX0ZyX1NhJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzTWluIDogJ1NvX01vX0RpX01pX0RvX0ZyX1NhJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgIExUOiAnSEgubW0nLFxuICAgICAgICBMVFM6ICdISC5tbS5zcycsXG4gICAgICAgIEwgOiAnREQuTU0uWVlZWScsXG4gICAgICAgIExMIDogJ0QuIE1NTU0gWVlZWScsXG4gICAgICAgIExMTCA6ICdELiBNTU1NIFlZWVkgSEgubW0nLFxuICAgICAgICBMTExMIDogJ2RkZGQsIEQuIE1NTU0gWVlZWSBISC5tbSdcbiAgICB9LFxuICAgIGNhbGVuZGFyIDoge1xuICAgICAgICBzYW1lRGF5OiAnW2hldXRlIHVtXSBMVCBbVWhyXScsXG4gICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIG5leHREYXk6ICdbbW9yZ2VuIHVtXSBMVCBbVWhyXScsXG4gICAgICAgIG5leHRXZWVrOiAnZGRkZCBbdW1dIExUIFtVaHJdJyxcbiAgICAgICAgbGFzdERheTogJ1tnZXN0ZXJuIHVtXSBMVCBbVWhyXScsXG4gICAgICAgIGxhc3RXZWVrOiAnW2xldHp0ZW5dIGRkZGQgW3VtXSBMVCBbVWhyXSdcbiAgICB9LFxuICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgZnV0dXJlIDogJ2luICVzJyxcbiAgICAgICAgcGFzdCA6ICd2b3IgJXMnLFxuICAgICAgICBzIDogJ2VpbiBwYWFyIFNla3VuZGVuJyxcbiAgICAgICAgbSA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgIG1tIDogJyVkIE1pbnV0ZW4nLFxuICAgICAgICBoIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgaGggOiAnJWQgU3R1bmRlbicsXG4gICAgICAgIGQgOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICBkZCA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgIE0gOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICBNTSA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgIHkgOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICB5eSA6IHByb2Nlc3NSZWxhdGl2ZVRpbWVcbiAgICB9LFxuICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfVxcLi8sXG4gICAgb3JkaW5hbCA6ICclZC4nLFxuICAgIHdlZWsgOiB7XG4gICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgfVxufSk7XG5cbnJldHVybiBkZUNoO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IE1hbGRpdmlhbiBbZHZdXG4vLyEgYXV0aG9yIDogSmF3aXNoIEhhbWVlZCA6IGh0dHBzOi8vZ2l0aHViLmNvbS9qYXdpc2hcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG52YXIgbW9udGhzID0gW1xuICAgICfelt6s3oLeqt6H3qbeg96pJyxcbiAgICAn3orerN6E3rDeg96q3ofept6D3qknLFxuICAgICfeid6n3oPeqN6X3qonLFxuICAgICfeh96t3pXesN6D3qnejd6qJyxcbiAgICAn3onerScsXG4gICAgJ96W3qvegt6wJyxcbiAgICAn3pbeqt6N3qbeh96oJyxcbiAgICAn3ofer96O3qbekN6w3pPeqicsXG4gICAgJ96Q3qzeld6w3pPerN6J3rDehN6m3oPeqicsXG4gICAgJ96H3q7eht6w3pPer96E3qbeg96qJyxcbiAgICAn3oLert6I3qzeid6w3oTept6D3qonLFxuICAgICfekd6o3pDerN6J3rDehN6m3oPeqidcbl07XG52YXIgd2Vla2RheXMgPSBbXG4gICAgJ96H3qfei96o3ofesN6M3qYnLFxuICAgICfegN6v3onepicsXG4gICAgJ96H3qbegt6w3o7ep96D3qYnLFxuICAgICfehN6q3ovepicsXG4gICAgJ96E3qreg96n3pDesN6K3qbejN6oJyxcbiAgICAn3oDeqt6G3qreg96qJyxcbiAgICAn3oDert6C3qjegN6o3oPeqidcbl07XG5cbnZhciBkdiA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2R2Jywge1xuICAgIG1vbnRocyA6IG1vbnRocyxcbiAgICBtb250aHNTaG9ydCA6IG1vbnRocyxcbiAgICB3ZWVrZGF5cyA6IHdlZWtkYXlzLFxuICAgIHdlZWtkYXlzU2hvcnQgOiB3ZWVrZGF5cyxcbiAgICB3ZWVrZGF5c01pbiA6ICfeh96n3oveqF/egN6v3onepl/eh96m3oLesF/ehN6q3ovepl/ehN6q3oPep1/egN6q3obeql/egN6u3oLeqCcuc3BsaXQoJ18nKSxcbiAgICBsb25nRGF0ZUZvcm1hdCA6IHtcblxuICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgIEwgOiAnRC9NL1lZWVknLFxuICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIExMTEwgOiAnZGRkZCBEIE1NTU0gWVlZWSBISDptbSdcbiAgICB9LFxuICAgIG1lcmlkaWVtUGFyc2U6IC/eid6GfN6J3oovLFxuICAgIGlzUE0gOiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuICfeid6KJyA9PT0gaW5wdXQ7XG4gICAgfSxcbiAgICBtZXJpZGllbSA6IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgaWYgKGhvdXIgPCAxMikge1xuICAgICAgICAgICAgcmV0dXJuICfeid6GJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAn3oneiic7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIGNhbGVuZGFyIDoge1xuICAgICAgICBzYW1lRGF5IDogJ1veid6o3ofept6L3qpdIExUJyxcbiAgICAgICAgbmV4dERheSA6ICdb3onep96L3qbeid6nXSBMVCcsXG4gICAgICAgIG5leHRXZWVrIDogJ2RkZGQgTFQnLFxuICAgICAgICBsYXN0RGF5IDogJ1veh96o3ofesN6U3qxdIExUJyxcbiAgICAgICAgbGFzdFdlZWsgOiAnW96K3qfeh96o3ozeqt6I3qhdIGRkZGQgTFQnLFxuICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgIH0sXG4gICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICBmdXR1cmUgOiAn3ozerN6D3q3ejt6m3ofeqCAlcycsXG4gICAgICAgIHBhc3QgOiAn3obeqt6D3qjegt6wICVzJyxcbiAgICAgICAgcyA6ICfekN6o3obeqt6C3rDejN6q3obert6F3qzeh96wJyxcbiAgICAgICAgbSA6ICfeid6o3oLeqN6T3qzeh96wJyxcbiAgICAgICAgbW0gOiAn3oneqN6C3qjek96qICVkJyxcbiAgICAgICAgaCA6ICfejt6m3pHeqN6H3qjeg96s3ofesCcsXG4gICAgICAgIGhoIDogJ96O3qbekd6o3ofeqN6D3qogJWQnLFxuICAgICAgICBkIDogJ96L3qreiN6m3oDerN6H3rAnLFxuICAgICAgICBkZCA6ICfei96q3ojept6Q3rAgJWQnLFxuICAgICAgICBNIDogJ96J3qbegN6s3ofesCcsXG4gICAgICAgIE1NIDogJ96J3qbekN6wICVkJyxcbiAgICAgICAgeSA6ICfeh96m3oDept6D3qzeh96wJyxcbiAgICAgICAgeXkgOiAn3ofept6A3qbeg96qICVkJ1xuICAgIH0sXG4gICAgcHJlcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC/YjC9nLCAnLCcpO1xuICAgIH0sXG4gICAgcG9zdGZvcm1hdDogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoLywvZywgJ9iMJyk7XG4gICAgfSxcbiAgICB3ZWVrIDoge1xuICAgICAgICBkb3cgOiA3LCAgLy8gU3VuZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgIGRveSA6IDEyICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiAxc3QgaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgfVxufSk7XG5cbnJldHVybiBkdjtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBHcmVlayBbZWxdXG4vLyEgYXV0aG9yIDogQWdnZWxvcyBLYXJhbGlhcyA6IGh0dHBzOi8vZ2l0aHViLmNvbS9tZWhpZWxcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gaXNGdW5jdGlvbihpbnB1dCkge1xuICAgIHJldHVybiBpbnB1dCBpbnN0YW5jZW9mIEZ1bmN0aW9uIHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpbnB1dCkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG59XG5cblxudmFyIGVsID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZWwnLCB7XG4gICAgbW9udGhzTm9taW5hdGl2ZUVsIDogJ86ZzrHOvc6/z4XOrM+BzrnOv8+CX86mzrXOss+Bzr/Phc6sz4HOuc6/z4JfzpzOrM+Bz4TOuc6/z4JfzpHPgM+Bzq/Ou865zr/Pgl/OnM6szrnOv8+CX86Zzr/Pjc69zrnOv8+CX86Zzr/Pjc67zrnOv8+CX86Rz43Os86/z4XPg8+Ezr/Pgl/Oo861z4DPhM6tzrzOss+BzrnOv8+CX86fzrrPhM+OzrLPgc65zr/Pgl/Onc6/zq3OvM6yz4HOuc6/z4JfzpTOtc66zq3OvM6yz4HOuc6/z4InLnNwbGl0KCdfJyksXG4gICAgbW9udGhzR2VuaXRpdmVFbCA6ICfOmc6xzr3Ov8+FzrHPgc6vzr/PhV/Ops61zrLPgc6/z4XOsc+Bzq/Ov8+FX86czrHPgc+Ezq/Ov8+FX86Rz4DPgc65zrvOr86/z4VfzpzOsc6Qzr/PhV/Omc6/z4XOvc6vzr/PhV/Omc6/z4XOu86vzr/PhV/Okc+FzrPOv8+Nz4PPhM6/z4VfzqPOtc+Az4TOtc68zrLPgc6vzr/PhV/On866z4TPic6yz4HOr86/z4Vfzp3Ov861zrzOss+Bzq/Ov8+FX86UzrXOus61zrzOss+Bzq/Ov8+FJy5zcGxpdCgnXycpLFxuICAgIG1vbnRocyA6IGZ1bmN0aW9uIChtb21lbnRUb0Zvcm1hdCwgZm9ybWF0KSB7XG4gICAgICAgIGlmICghbW9tZW50VG9Gb3JtYXQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9tb250aHNOb21pbmF0aXZlRWw7XG4gICAgICAgIH0gZWxzZSBpZiAoL0QvLnRlc3QoZm9ybWF0LnN1YnN0cmluZygwLCBmb3JtYXQuaW5kZXhPZignTU1NTScpKSkpIHsgLy8gaWYgdGhlcmUgaXMgYSBkYXkgbnVtYmVyIGJlZm9yZSAnTU1NTSdcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9tb250aHNHZW5pdGl2ZUVsW21vbWVudFRvRm9ybWF0Lm1vbnRoKCldO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21vbnRoc05vbWluYXRpdmVFbFttb21lbnRUb0Zvcm1hdC5tb250aCgpXTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgbW9udGhzU2hvcnQgOiAnzpnOsc69X86mzrXOsl/OnM6xz4FfzpHPgM+BX86czrHPil/Omc6/z4XOvV/Omc6/z4XOu1/Okc+FzrNfzqPOtc+AX86fzrrPhF/Onc6/zrVfzpTOtc66Jy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzIDogJ86az4XPgc65zrHOus6uX86UzrXPhc+Ezq3Pgc6xX86kz4HOr8+EzrdfzqTOtc+EzqzPgc+EzrdfzqDOrc68z4DPhM63X86gzrHPgc6xz4POus61z4XOrl/Oo86szrLOss6xz4TOvycuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1Nob3J0IDogJ86az4XPgV/OlM61z4VfzqTPgc65X86kzrXPhF/OoM61zrxfzqDOsc+BX86jzrHOsicuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c01pbiA6ICfOms+FX86UzrVfzqTPgV/OpM61X86gzrVfzqDOsV/Oo86xJy5zcGxpdCgnXycpLFxuICAgIG1lcmlkaWVtIDogZnVuY3Rpb24gKGhvdXJzLCBtaW51dGVzLCBpc0xvd2VyKSB7XG4gICAgICAgIGlmIChob3VycyA+IDExKSB7XG4gICAgICAgICAgICByZXR1cm4gaXNMb3dlciA/ICfOvM68JyA6ICfOnM6cJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBpc0xvd2VyID8gJ8+AzrwnIDogJ86gzpwnO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBpc1BNIDogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgIHJldHVybiAoKGlucHV0ICsgJycpLnRvTG93ZXJDYXNlKClbMF0gPT09ICfOvCcpO1xuICAgIH0sXG4gICAgbWVyaWRpZW1QYXJzZSA6IC9bzqDOnF1cXC4/zpw/XFwuPy9pLFxuICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICBMVCA6ICdoOm1tIEEnLFxuICAgICAgICBMVFMgOiAnaDptbTpzcyBBJyxcbiAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgaDptbSBBJyxcbiAgICAgICAgTExMTCA6ICdkZGRkLCBEIE1NTU0gWVlZWSBoOm1tIEEnXG4gICAgfSxcbiAgICBjYWxlbmRhckVsIDoge1xuICAgICAgICBzYW1lRGF5IDogJ1vOo86uzrzOtc+BzrEge31dIExUJyxcbiAgICAgICAgbmV4dERheSA6ICdbzpHPjc+BzrnOvyB7fV0gTFQnLFxuICAgICAgICBuZXh0V2VlayA6ICdkZGRkIFt7fV0gTFQnLFxuICAgICAgICBsYXN0RGF5IDogJ1vOp864zrXPgiB7fV0gTFQnLFxuICAgICAgICBsYXN0V2VlayA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHN3aXRjaCAodGhpcy5kYXkoKSkge1xuICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbz4TOvyDPgM+Bzr/Ot86zzr/Pjc68zrXOvc6/XSBkZGRkIFt7fV0gTFQnO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnW8+EzrfOvSDPgM+Bzr/Ot86zzr/Pjc68zrXOvc63XSBkZGRkIFt7fV0gTFQnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgIH0sXG4gICAgY2FsZW5kYXIgOiBmdW5jdGlvbiAoa2V5LCBtb20pIHtcbiAgICAgICAgdmFyIG91dHB1dCA9IHRoaXMuX2NhbGVuZGFyRWxba2V5XSxcbiAgICAgICAgICAgIGhvdXJzID0gbW9tICYmIG1vbS5ob3VycygpO1xuICAgICAgICBpZiAoaXNGdW5jdGlvbihvdXRwdXQpKSB7XG4gICAgICAgICAgICBvdXRwdXQgPSBvdXRwdXQuYXBwbHkobW9tKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3V0cHV0LnJlcGxhY2UoJ3t9JywgKGhvdXJzICUgMTIgPT09IDEgPyAnz4PPhM63JyA6ICfPg8+EzrnPgicpKTtcbiAgICB9LFxuICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgZnV0dXJlIDogJ8+DzrUgJXMnLFxuICAgICAgICBwYXN0IDogJyVzIM+Az4HOuc69JyxcbiAgICAgICAgcyA6ICfOu86vzrPOsSDOtM61z4XPhM61z4HPjM67zrXPgM+EzrEnLFxuICAgICAgICBtIDogJ86tzr3OsSDOu861z4DPhM+MJyxcbiAgICAgICAgbW0gOiAnJWQgzrvOtc+Az4TOrCcsXG4gICAgICAgIGggOiAnzrzOr86xIM+Oz4HOsScsXG4gICAgICAgIGhoIDogJyVkIM+Oz4HOtc+CJyxcbiAgICAgICAgZCA6ICfOvM6vzrEgzrzOrc+BzrEnLFxuICAgICAgICBkZCA6ICclZCDOvM6tz4HOtc+CJyxcbiAgICAgICAgTSA6ICfOrc69zrHPgiDOvM6uzr3Osc+CJyxcbiAgICAgICAgTU0gOiAnJWQgzrzOrs69zrXPgicsXG4gICAgICAgIHkgOiAnzq3Ovc6xz4Igz4fPgc+Mzr3Ov8+CJyxcbiAgICAgICAgeXkgOiAnJWQgz4fPgc+Mzr3Ouc6xJ1xuICAgIH0sXG4gICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9zrcvLFxuICAgIG9yZGluYWw6ICclZM63JyxcbiAgICB3ZWVrIDoge1xuICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgZG95IDogNCAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHN0IGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgIH1cbn0pO1xuXG5yZXR1cm4gZWw7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogRW5nbGlzaCAoQXVzdHJhbGlhKSBbZW4tYXVdXG4vLyEgYXV0aG9yIDogSmFyZWQgTW9yc2UgOiBodHRwczovL2dpdGh1Yi5jb20vamFyY29hbFxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciBlbkF1ID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZW4tYXUnLCB7XG4gICAgbW9udGhzIDogJ0phbnVhcnlfRmVicnVhcnlfTWFyY2hfQXByaWxfTWF5X0p1bmVfSnVseV9BdWd1c3RfU2VwdGVtYmVyX09jdG9iZXJfTm92ZW1iZXJfRGVjZW1iZXInLnNwbGl0KCdfJyksXG4gICAgbW9udGhzU2hvcnQgOiAnSmFuX0ZlYl9NYXJfQXByX01heV9KdW5fSnVsX0F1Z19TZXBfT2N0X05vdl9EZWMnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXMgOiAnU3VuZGF5X01vbmRheV9UdWVzZGF5X1dlZG5lc2RheV9UaHVyc2RheV9GcmlkYXlfU2F0dXJkYXknLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNTaG9ydCA6ICdTdW5fTW9uX1R1ZV9XZWRfVGh1X0ZyaV9TYXQnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNNaW4gOiAnU3VfTW9fVHVfV2VfVGhfRnJfU2EnLnNwbGl0KCdfJyksXG4gICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgIExUIDogJ2g6bW0gQScsXG4gICAgICAgIExUUyA6ICdoOm1tOnNzIEEnLFxuICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBoOm1tIEEnLFxuICAgICAgICBMTExMIDogJ2RkZGQsIEQgTU1NTSBZWVlZIGg6bW0gQSdcbiAgICB9LFxuICAgIGNhbGVuZGFyIDoge1xuICAgICAgICBzYW1lRGF5IDogJ1tUb2RheSBhdF0gTFQnLFxuICAgICAgICBuZXh0RGF5IDogJ1tUb21vcnJvdyBhdF0gTFQnLFxuICAgICAgICBuZXh0V2VlayA6ICdkZGRkIFthdF0gTFQnLFxuICAgICAgICBsYXN0RGF5IDogJ1tZZXN0ZXJkYXkgYXRdIExUJyxcbiAgICAgICAgbGFzdFdlZWsgOiAnW0xhc3RdIGRkZGQgW2F0XSBMVCcsXG4gICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgfSxcbiAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgIGZ1dHVyZSA6ICdpbiAlcycsXG4gICAgICAgIHBhc3QgOiAnJXMgYWdvJyxcbiAgICAgICAgcyA6ICdhIGZldyBzZWNvbmRzJyxcbiAgICAgICAgbSA6ICdhIG1pbnV0ZScsXG4gICAgICAgIG1tIDogJyVkIG1pbnV0ZXMnLFxuICAgICAgICBoIDogJ2FuIGhvdXInLFxuICAgICAgICBoaCA6ICclZCBob3VycycsXG4gICAgICAgIGQgOiAnYSBkYXknLFxuICAgICAgICBkZCA6ICclZCBkYXlzJyxcbiAgICAgICAgTSA6ICdhIG1vbnRoJyxcbiAgICAgICAgTU0gOiAnJWQgbW9udGhzJyxcbiAgICAgICAgeSA6ICdhIHllYXInLFxuICAgICAgICB5eSA6ICclZCB5ZWFycydcbiAgICB9LFxuICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfShzdHxuZHxyZHx0aCkvLFxuICAgIG9yZGluYWwgOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgIHZhciBiID0gbnVtYmVyICUgMTAsXG4gICAgICAgICAgICBvdXRwdXQgPSAofn4obnVtYmVyICUgMTAwIC8gMTApID09PSAxKSA/ICd0aCcgOlxuICAgICAgICAgICAgKGIgPT09IDEpID8gJ3N0JyA6XG4gICAgICAgICAgICAoYiA9PT0gMikgPyAnbmQnIDpcbiAgICAgICAgICAgIChiID09PSAzKSA/ICdyZCcgOiAndGgnO1xuICAgICAgICByZXR1cm4gbnVtYmVyICsgb3V0cHV0O1xuICAgIH0sXG4gICAgd2VlayA6IHtcbiAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICB9XG59KTtcblxucmV0dXJuIGVuQXU7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogRW5nbGlzaCAoQ2FuYWRhKSBbZW4tY2FdXG4vLyEgYXV0aG9yIDogSm9uYXRoYW4gQWJvdXJiaWggOiBodHRwczovL2dpdGh1Yi5jb20vam9uYmNhXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxudmFyIGVuQ2EgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdlbi1jYScsIHtcbiAgICBtb250aHMgOiAnSmFudWFyeV9GZWJydWFyeV9NYXJjaF9BcHJpbF9NYXlfSnVuZV9KdWx5X0F1Z3VzdF9TZXB0ZW1iZXJfT2N0b2Jlcl9Ob3ZlbWJlcl9EZWNlbWJlcicuc3BsaXQoJ18nKSxcbiAgICBtb250aHNTaG9ydCA6ICdKYW5fRmViX01hcl9BcHJfTWF5X0p1bl9KdWxfQXVnX1NlcF9PY3RfTm92X0RlYycuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5cyA6ICdTdW5kYXlfTW9uZGF5X1R1ZXNkYXlfV2VkbmVzZGF5X1RodXJzZGF5X0ZyaWRheV9TYXR1cmRheScuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1Nob3J0IDogJ1N1bl9Nb25fVHVlX1dlZF9UaHVfRnJpX1NhdCcuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c01pbiA6ICdTdV9Nb19UdV9XZV9UaF9Gcl9TYScuc3BsaXQoJ18nKSxcbiAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgTFQgOiAnaDptbSBBJyxcbiAgICAgICAgTFRTIDogJ2g6bW06c3MgQScsXG4gICAgICAgIEwgOiAnWVlZWS1NTS1ERCcsXG4gICAgICAgIExMIDogJ01NTU0gRCwgWVlZWScsXG4gICAgICAgIExMTCA6ICdNTU1NIEQsIFlZWVkgaDptbSBBJyxcbiAgICAgICAgTExMTCA6ICdkZGRkLCBNTU1NIEQsIFlZWVkgaDptbSBBJ1xuICAgIH0sXG4gICAgY2FsZW5kYXIgOiB7XG4gICAgICAgIHNhbWVEYXkgOiAnW1RvZGF5IGF0XSBMVCcsXG4gICAgICAgIG5leHREYXkgOiAnW1RvbW9ycm93IGF0XSBMVCcsXG4gICAgICAgIG5leHRXZWVrIDogJ2RkZGQgW2F0XSBMVCcsXG4gICAgICAgIGxhc3REYXkgOiAnW1llc3RlcmRheSBhdF0gTFQnLFxuICAgICAgICBsYXN0V2VlayA6ICdbTGFzdF0gZGRkZCBbYXRdIExUJyxcbiAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICB9LFxuICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgZnV0dXJlIDogJ2luICVzJyxcbiAgICAgICAgcGFzdCA6ICclcyBhZ28nLFxuICAgICAgICBzIDogJ2EgZmV3IHNlY29uZHMnLFxuICAgICAgICBtIDogJ2EgbWludXRlJyxcbiAgICAgICAgbW0gOiAnJWQgbWludXRlcycsXG4gICAgICAgIGggOiAnYW4gaG91cicsXG4gICAgICAgIGhoIDogJyVkIGhvdXJzJyxcbiAgICAgICAgZCA6ICdhIGRheScsXG4gICAgICAgIGRkIDogJyVkIGRheXMnLFxuICAgICAgICBNIDogJ2EgbW9udGgnLFxuICAgICAgICBNTSA6ICclZCBtb250aHMnLFxuICAgICAgICB5IDogJ2EgeWVhcicsXG4gICAgICAgIHl5IDogJyVkIHllYXJzJ1xuICAgIH0sXG4gICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9KHN0fG5kfHJkfHRoKS8sXG4gICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgdmFyIGIgPSBudW1iZXIgJSAxMCxcbiAgICAgICAgICAgIG91dHB1dCA9ICh+fihudW1iZXIgJSAxMDAgLyAxMCkgPT09IDEpID8gJ3RoJyA6XG4gICAgICAgICAgICAoYiA9PT0gMSkgPyAnc3QnIDpcbiAgICAgICAgICAgIChiID09PSAyKSA/ICduZCcgOlxuICAgICAgICAgICAgKGIgPT09IDMpID8gJ3JkJyA6ICd0aCc7XG4gICAgICAgIHJldHVybiBudW1iZXIgKyBvdXRwdXQ7XG4gICAgfVxufSk7XG5cbnJldHVybiBlbkNhO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEVuZ2xpc2ggKFVuaXRlZCBLaW5nZG9tKSBbZW4tZ2JdXG4vLyEgYXV0aG9yIDogQ2hyaXMgR2VkcmltIDogaHR0cHM6Ly9naXRodWIuY29tL2NocmlzZ2VkcmltXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxudmFyIGVuR2IgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdlbi1nYicsIHtcbiAgICBtb250aHMgOiAnSmFudWFyeV9GZWJydWFyeV9NYXJjaF9BcHJpbF9NYXlfSnVuZV9KdWx5X0F1Z3VzdF9TZXB0ZW1iZXJfT2N0b2Jlcl9Ob3ZlbWJlcl9EZWNlbWJlcicuc3BsaXQoJ18nKSxcbiAgICBtb250aHNTaG9ydCA6ICdKYW5fRmViX01hcl9BcHJfTWF5X0p1bl9KdWxfQXVnX1NlcF9PY3RfTm92X0RlYycuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5cyA6ICdTdW5kYXlfTW9uZGF5X1R1ZXNkYXlfV2VkbmVzZGF5X1RodXJzZGF5X0ZyaWRheV9TYXR1cmRheScuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1Nob3J0IDogJ1N1bl9Nb25fVHVlX1dlZF9UaHVfRnJpX1NhdCcuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c01pbiA6ICdTdV9Nb19UdV9XZV9UaF9Gcl9TYScuc3BsaXQoJ18nKSxcbiAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIExMTEwgOiAnZGRkZCwgRCBNTU1NIFlZWVkgSEg6bW0nXG4gICAgfSxcbiAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgc2FtZURheSA6ICdbVG9kYXkgYXRdIExUJyxcbiAgICAgICAgbmV4dERheSA6ICdbVG9tb3Jyb3cgYXRdIExUJyxcbiAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCBbYXRdIExUJyxcbiAgICAgICAgbGFzdERheSA6ICdbWWVzdGVyZGF5IGF0XSBMVCcsXG4gICAgICAgIGxhc3RXZWVrIDogJ1tMYXN0XSBkZGRkIFthdF0gTFQnLFxuICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgIH0sXG4gICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICBmdXR1cmUgOiAnaW4gJXMnLFxuICAgICAgICBwYXN0IDogJyVzIGFnbycsXG4gICAgICAgIHMgOiAnYSBmZXcgc2Vjb25kcycsXG4gICAgICAgIG0gOiAnYSBtaW51dGUnLFxuICAgICAgICBtbSA6ICclZCBtaW51dGVzJyxcbiAgICAgICAgaCA6ICdhbiBob3VyJyxcbiAgICAgICAgaGggOiAnJWQgaG91cnMnLFxuICAgICAgICBkIDogJ2EgZGF5JyxcbiAgICAgICAgZGQgOiAnJWQgZGF5cycsXG4gICAgICAgIE0gOiAnYSBtb250aCcsXG4gICAgICAgIE1NIDogJyVkIG1vbnRocycsXG4gICAgICAgIHkgOiAnYSB5ZWFyJyxcbiAgICAgICAgeXkgOiAnJWQgeWVhcnMnXG4gICAgfSxcbiAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0oc3R8bmR8cmR8dGgpLyxcbiAgICBvcmRpbmFsIDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICB2YXIgYiA9IG51bWJlciAlIDEwLFxuICAgICAgICAgICAgb3V0cHV0ID0gKH5+KG51bWJlciAlIDEwMCAvIDEwKSA9PT0gMSkgPyAndGgnIDpcbiAgICAgICAgICAgIChiID09PSAxKSA/ICdzdCcgOlxuICAgICAgICAgICAgKGIgPT09IDIpID8gJ25kJyA6XG4gICAgICAgICAgICAoYiA9PT0gMykgPyAncmQnIDogJ3RoJztcbiAgICAgICAgcmV0dXJuIG51bWJlciArIG91dHB1dDtcbiAgICB9LFxuICAgIHdlZWsgOiB7XG4gICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgfVxufSk7XG5cbnJldHVybiBlbkdiO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEVuZ2xpc2ggKElyZWxhbmQpIFtlbi1pZV1cbi8vISBhdXRob3IgOiBDaHJpcyBDYXJ0bGlkZ2UgOiBodHRwczovL2dpdGh1Yi5jb20vY2hyaXNjYXJ0bGlkZ2VcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG52YXIgZW5JZSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2VuLWllJywge1xuICAgIG1vbnRocyA6ICdKYW51YXJ5X0ZlYnJ1YXJ5X01hcmNoX0FwcmlsX01heV9KdW5lX0p1bHlfQXVndXN0X1NlcHRlbWJlcl9PY3RvYmVyX05vdmVtYmVyX0RlY2VtYmVyJy5zcGxpdCgnXycpLFxuICAgIG1vbnRoc1Nob3J0IDogJ0phbl9GZWJfTWFyX0Fwcl9NYXlfSnVuX0p1bF9BdWdfU2VwX09jdF9Ob3ZfRGVjJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzIDogJ1N1bmRheV9Nb25kYXlfVHVlc2RheV9XZWRuZXNkYXlfVGh1cnNkYXlfRnJpZGF5X1NhdHVyZGF5Jy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzU2hvcnQgOiAnU3VuX01vbl9UdWVfV2VkX1RodV9GcmlfU2F0Jy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzTWluIDogJ1N1X01vX1R1X1dlX1RoX0ZyX1NhJy5zcGxpdCgnXycpLFxuICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgIEwgOiAnREQtTU0tWVlZWScsXG4gICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgTExMTCA6ICdkZGRkIEQgTU1NTSBZWVlZIEhIOm1tJ1xuICAgIH0sXG4gICAgY2FsZW5kYXIgOiB7XG4gICAgICAgIHNhbWVEYXkgOiAnW1RvZGF5IGF0XSBMVCcsXG4gICAgICAgIG5leHREYXkgOiAnW1RvbW9ycm93IGF0XSBMVCcsXG4gICAgICAgIG5leHRXZWVrIDogJ2RkZGQgW2F0XSBMVCcsXG4gICAgICAgIGxhc3REYXkgOiAnW1llc3RlcmRheSBhdF0gTFQnLFxuICAgICAgICBsYXN0V2VlayA6ICdbTGFzdF0gZGRkZCBbYXRdIExUJyxcbiAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICB9LFxuICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgZnV0dXJlIDogJ2luICVzJyxcbiAgICAgICAgcGFzdCA6ICclcyBhZ28nLFxuICAgICAgICBzIDogJ2EgZmV3IHNlY29uZHMnLFxuICAgICAgICBtIDogJ2EgbWludXRlJyxcbiAgICAgICAgbW0gOiAnJWQgbWludXRlcycsXG4gICAgICAgIGggOiAnYW4gaG91cicsXG4gICAgICAgIGhoIDogJyVkIGhvdXJzJyxcbiAgICAgICAgZCA6ICdhIGRheScsXG4gICAgICAgIGRkIDogJyVkIGRheXMnLFxuICAgICAgICBNIDogJ2EgbW9udGgnLFxuICAgICAgICBNTSA6ICclZCBtb250aHMnLFxuICAgICAgICB5IDogJ2EgeWVhcicsXG4gICAgICAgIHl5IDogJyVkIHllYXJzJ1xuICAgIH0sXG4gICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9KHN0fG5kfHJkfHRoKS8sXG4gICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgdmFyIGIgPSBudW1iZXIgJSAxMCxcbiAgICAgICAgICAgIG91dHB1dCA9ICh+fihudW1iZXIgJSAxMDAgLyAxMCkgPT09IDEpID8gJ3RoJyA6XG4gICAgICAgICAgICAoYiA9PT0gMSkgPyAnc3QnIDpcbiAgICAgICAgICAgIChiID09PSAyKSA/ICduZCcgOlxuICAgICAgICAgICAgKGIgPT09IDMpID8gJ3JkJyA6ICd0aCc7XG4gICAgICAgIHJldHVybiBudW1iZXIgKyBvdXRwdXQ7XG4gICAgfSxcbiAgICB3ZWVrIDoge1xuICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgZG95IDogNCAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgIH1cbn0pO1xuXG5yZXR1cm4gZW5JZTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBFbmdsaXNoIChOZXcgWmVhbGFuZCkgW2VuLW56XVxuLy8hIGF1dGhvciA6IEx1a2UgTWNHcmVnb3IgOiBodHRwczovL2dpdGh1Yi5jb20vbHVrZW1jZ3JlZ29yXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxudmFyIGVuTnogPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdlbi1ueicsIHtcbiAgICBtb250aHMgOiAnSmFudWFyeV9GZWJydWFyeV9NYXJjaF9BcHJpbF9NYXlfSnVuZV9KdWx5X0F1Z3VzdF9TZXB0ZW1iZXJfT2N0b2Jlcl9Ob3ZlbWJlcl9EZWNlbWJlcicuc3BsaXQoJ18nKSxcbiAgICBtb250aHNTaG9ydCA6ICdKYW5fRmViX01hcl9BcHJfTWF5X0p1bl9KdWxfQXVnX1NlcF9PY3RfTm92X0RlYycuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5cyA6ICdTdW5kYXlfTW9uZGF5X1R1ZXNkYXlfV2VkbmVzZGF5X1RodXJzZGF5X0ZyaWRheV9TYXR1cmRheScuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1Nob3J0IDogJ1N1bl9Nb25fVHVlX1dlZF9UaHVfRnJpX1NhdCcuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c01pbiA6ICdTdV9Nb19UdV9XZV9UaF9Gcl9TYScuc3BsaXQoJ18nKSxcbiAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgTFQgOiAnaDptbSBBJyxcbiAgICAgICAgTFRTIDogJ2g6bW06c3MgQScsXG4gICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIGg6bW0gQScsXG4gICAgICAgIExMTEwgOiAnZGRkZCwgRCBNTU1NIFlZWVkgaDptbSBBJ1xuICAgIH0sXG4gICAgY2FsZW5kYXIgOiB7XG4gICAgICAgIHNhbWVEYXkgOiAnW1RvZGF5IGF0XSBMVCcsXG4gICAgICAgIG5leHREYXkgOiAnW1RvbW9ycm93IGF0XSBMVCcsXG4gICAgICAgIG5leHRXZWVrIDogJ2RkZGQgW2F0XSBMVCcsXG4gICAgICAgIGxhc3REYXkgOiAnW1llc3RlcmRheSBhdF0gTFQnLFxuICAgICAgICBsYXN0V2VlayA6ICdbTGFzdF0gZGRkZCBbYXRdIExUJyxcbiAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICB9LFxuICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgZnV0dXJlIDogJ2luICVzJyxcbiAgICAgICAgcGFzdCA6ICclcyBhZ28nLFxuICAgICAgICBzIDogJ2EgZmV3IHNlY29uZHMnLFxuICAgICAgICBtIDogJ2EgbWludXRlJyxcbiAgICAgICAgbW0gOiAnJWQgbWludXRlcycsXG4gICAgICAgIGggOiAnYW4gaG91cicsXG4gICAgICAgIGhoIDogJyVkIGhvdXJzJyxcbiAgICAgICAgZCA6ICdhIGRheScsXG4gICAgICAgIGRkIDogJyVkIGRheXMnLFxuICAgICAgICBNIDogJ2EgbW9udGgnLFxuICAgICAgICBNTSA6ICclZCBtb250aHMnLFxuICAgICAgICB5IDogJ2EgeWVhcicsXG4gICAgICAgIHl5IDogJyVkIHllYXJzJ1xuICAgIH0sXG4gICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9KHN0fG5kfHJkfHRoKS8sXG4gICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgdmFyIGIgPSBudW1iZXIgJSAxMCxcbiAgICAgICAgICAgIG91dHB1dCA9ICh+fihudW1iZXIgJSAxMDAgLyAxMCkgPT09IDEpID8gJ3RoJyA6XG4gICAgICAgICAgICAoYiA9PT0gMSkgPyAnc3QnIDpcbiAgICAgICAgICAgIChiID09PSAyKSA/ICduZCcgOlxuICAgICAgICAgICAgKGIgPT09IDMpID8gJ3JkJyA6ICd0aCc7XG4gICAgICAgIHJldHVybiBudW1iZXIgKyBvdXRwdXQ7XG4gICAgfSxcbiAgICB3ZWVrIDoge1xuICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgZG95IDogNCAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgIH1cbn0pO1xuXG5yZXR1cm4gZW5OejtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBFc3BlcmFudG8gW2VvXVxuLy8hIGF1dGhvciA6IENvbGluIERlYW4gOiBodHRwczovL2dpdGh1Yi5jb20vY29saW5kZWFuXG4vLyEgYXV0aG9yIDogTWlhIE5vcmRlbnRvZnQgSW1wZXJhdG9yaSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9taWVzdGFzbWlhXG4vLyEgY29tbWVudCA6IG1pZXN0YXNtaWEgY29ycmVjdGVkIHRoZSB0cmFuc2xhdGlvbiBieSBjb2xpbmRlYW5cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG52YXIgZW8gPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdlbycsIHtcbiAgICBtb250aHMgOiAnamFudWFyb19mZWJydWFyb19tYXJ0b19hcHJpbG9fbWFqb19qdW5pb19qdWxpb19hxa1ndXN0b19zZXB0ZW1icm9fb2t0b2Jyb19ub3ZlbWJyb19kZWNlbWJybycuc3BsaXQoJ18nKSxcbiAgICBtb250aHNTaG9ydCA6ICdqYW5fZmViX21hcl9hcHJfbWFqX2p1bl9qdWxfYcWtZ19zZXBfb2t0X25vdl9kZWMnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXMgOiAnZGltYW7EiW9fbHVuZG9fbWFyZG9fbWVya3JlZG9fxLVhxa1kb192ZW5kcmVkb19zYWJhdG8nLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNTaG9ydCA6ICdkaW1fbHVuX21hcmRfbWVya1/EtWHFrV92ZW5fc2FiJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzTWluIDogJ2RpX2x1X21hX21lX8S1YV92ZV9zYScuc3BsaXQoJ18nKSxcbiAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICBMIDogJ1lZWVktTU0tREQnLFxuICAgICAgICBMTCA6ICdEWy1hIGRlXSBNTU1NLCBZWVlZJyxcbiAgICAgICAgTExMIDogJ0RbLWEgZGVdIE1NTU0sIFlZWVkgSEg6bW0nLFxuICAgICAgICBMTExMIDogJ2RkZGQsIFtsYV0gRFstYSBkZV0gTU1NTSwgWVlZWSBISDptbSdcbiAgICB9LFxuICAgIG1lcmlkaWVtUGFyc2U6IC9bYXBdXFwudFxcLm0vaSxcbiAgICBpc1BNOiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0LmNoYXJBdCgwKS50b0xvd2VyQ2FzZSgpID09PSAncCc7XG4gICAgfSxcbiAgICBtZXJpZGllbSA6IGZ1bmN0aW9uIChob3VycywgbWludXRlcywgaXNMb3dlcikge1xuICAgICAgICBpZiAoaG91cnMgPiAxMSkge1xuICAgICAgICAgICAgcmV0dXJuIGlzTG93ZXIgPyAncC50Lm0uJyA6ICdQLlQuTS4nO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGlzTG93ZXIgPyAnYS50Lm0uJyA6ICdBLlQuTS4nO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgc2FtZURheSA6ICdbSG9kaWHFrSBqZV0gTFQnLFxuICAgICAgICBuZXh0RGF5IDogJ1tNb3JnYcWtIGplXSBMVCcsXG4gICAgICAgIG5leHRXZWVrIDogJ2RkZGQgW2plXSBMVCcsXG4gICAgICAgIGxhc3REYXkgOiAnW0hpZXJhxa0gamVdIExUJyxcbiAgICAgICAgbGFzdFdlZWsgOiAnW3Bhc2ludGFdIGRkZGQgW2plXSBMVCcsXG4gICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgfSxcbiAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgIGZ1dHVyZSA6ICdwb3N0ICVzJyxcbiAgICAgICAgcGFzdCA6ICdhbnRhxa0gJXMnLFxuICAgICAgICBzIDogJ3Nla3VuZG9qJyxcbiAgICAgICAgbSA6ICdtaW51dG8nLFxuICAgICAgICBtbSA6ICclZCBtaW51dG9qJyxcbiAgICAgICAgaCA6ICdob3JvJyxcbiAgICAgICAgaGggOiAnJWQgaG9yb2onLFxuICAgICAgICBkIDogJ3RhZ28nLC8vbmUgJ2RpdXJubycsIMSJYXIgZXN0YXMgdXppdGEgcG9yIHByb2tzaW11bW9cbiAgICAgICAgZGQgOiAnJWQgdGFnb2onLFxuICAgICAgICBNIDogJ21vbmF0bycsXG4gICAgICAgIE1NIDogJyVkIG1vbmF0b2onLFxuICAgICAgICB5IDogJ2phcm8nLFxuICAgICAgICB5eSA6ICclZCBqYXJvaidcbiAgICB9LFxuICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfWEvLFxuICAgIG9yZGluYWwgOiAnJWRhJyxcbiAgICB3ZWVrIDoge1xuICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgZG95IDogNyAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gMXN0IGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgIH1cbn0pO1xuXG5yZXR1cm4gZW87XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogU3BhbmlzaCBbZXNdXG4vLyEgYXV0aG9yIDogSnVsaW8gTmFwdXLDrSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9qdWxpb25jXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxudmFyIG1vbnRoc1Nob3J0RG90ID0gJ2VuZS5fZmViLl9tYXIuX2Fici5fbWF5Ll9qdW4uX2p1bC5fYWdvLl9zZXAuX29jdC5fbm92Ll9kaWMuJy5zcGxpdCgnXycpO1xudmFyIG1vbnRoc1Nob3J0ID0gJ2VuZV9mZWJfbWFyX2Ficl9tYXlfanVuX2p1bF9hZ29fc2VwX29jdF9ub3ZfZGljJy5zcGxpdCgnXycpO1xuXG52YXIgZXMgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdlcycsIHtcbiAgICBtb250aHMgOiAnZW5lcm9fZmVicmVyb19tYXJ6b19hYnJpbF9tYXlvX2p1bmlvX2p1bGlvX2Fnb3N0b19zZXB0aWVtYnJlX29jdHVicmVfbm92aWVtYnJlX2RpY2llbWJyZScuc3BsaXQoJ18nKSxcbiAgICBtb250aHNTaG9ydCA6IGZ1bmN0aW9uIChtLCBmb3JtYXQpIHtcbiAgICAgICAgaWYgKCFtKSB7XG4gICAgICAgICAgICByZXR1cm4gbW9udGhzU2hvcnREb3Q7XG4gICAgICAgIH0gZWxzZSBpZiAoLy1NTU0tLy50ZXN0KGZvcm1hdCkpIHtcbiAgICAgICAgICAgIHJldHVybiBtb250aHNTaG9ydFttLm1vbnRoKCldO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG1vbnRoc1Nob3J0RG90W20ubW9udGgoKV07XG4gICAgICAgIH1cbiAgICB9LFxuICAgIG1vbnRoc1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgIHdlZWtkYXlzIDogJ2RvbWluZ29fbHVuZXNfbWFydGVzX21pw6lyY29sZXNfanVldmVzX3ZpZXJuZXNfc8OhYmFkbycuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1Nob3J0IDogJ2RvbS5fbHVuLl9tYXIuX21pw6kuX2p1ZS5fdmllLl9zw6FiLicuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c01pbiA6ICdkb19sdV9tYV9taV9qdV92aV9zw6EnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgTFQgOiAnSDptbScsXG4gICAgICAgIExUUyA6ICdIOm1tOnNzJyxcbiAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgTEwgOiAnRCBbZGVdIE1NTU0gW2RlXSBZWVlZJyxcbiAgICAgICAgTExMIDogJ0QgW2RlXSBNTU1NIFtkZV0gWVlZWSBIOm1tJyxcbiAgICAgICAgTExMTCA6ICdkZGRkLCBEIFtkZV0gTU1NTSBbZGVdIFlZWVkgSDptbSdcbiAgICB9LFxuICAgIGNhbGVuZGFyIDoge1xuICAgICAgICBzYW1lRGF5IDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuICdbaG95IGEgbGEnICsgKCh0aGlzLmhvdXJzKCkgIT09IDEpID8gJ3MnIDogJycpICsgJ10gTFQnO1xuICAgICAgICB9LFxuICAgICAgICBuZXh0RGF5IDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuICdbbWHDsWFuYSBhIGxhJyArICgodGhpcy5ob3VycygpICE9PSAxKSA/ICdzJyA6ICcnKSArICddIExUJztcbiAgICAgICAgfSxcbiAgICAgICAgbmV4dFdlZWsgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gJ2RkZGQgW2EgbGEnICsgKCh0aGlzLmhvdXJzKCkgIT09IDEpID8gJ3MnIDogJycpICsgJ10gTFQnO1xuICAgICAgICB9LFxuICAgICAgICBsYXN0RGF5IDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuICdbYXllciBhIGxhJyArICgodGhpcy5ob3VycygpICE9PSAxKSA/ICdzJyA6ICcnKSArICddIExUJztcbiAgICAgICAgfSxcbiAgICAgICAgbGFzdFdlZWsgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gJ1tlbF0gZGRkZCBbcGFzYWRvIGEgbGEnICsgKCh0aGlzLmhvdXJzKCkgIT09IDEpID8gJ3MnIDogJycpICsgJ10gTFQnO1xuICAgICAgICB9LFxuICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgIH0sXG4gICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICBmdXR1cmUgOiAnZW4gJXMnLFxuICAgICAgICBwYXN0IDogJ2hhY2UgJXMnLFxuICAgICAgICBzIDogJ3Vub3Mgc2VndW5kb3MnLFxuICAgICAgICBtIDogJ3VuIG1pbnV0bycsXG4gICAgICAgIG1tIDogJyVkIG1pbnV0b3MnLFxuICAgICAgICBoIDogJ3VuYSBob3JhJyxcbiAgICAgICAgaGggOiAnJWQgaG9yYXMnLFxuICAgICAgICBkIDogJ3VuIGTDrWEnLFxuICAgICAgICBkZCA6ICclZCBkw61hcycsXG4gICAgICAgIE0gOiAndW4gbWVzJyxcbiAgICAgICAgTU0gOiAnJWQgbWVzZXMnLFxuICAgICAgICB5IDogJ3VuIGHDsW8nLFxuICAgICAgICB5eSA6ICclZCBhw7FvcydcbiAgICB9LFxuICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2UgOiAvXFxkezEsMn3Cui8sXG4gICAgb3JkaW5hbCA6ICclZMK6JyxcbiAgICB3ZWVrIDoge1xuICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgZG95IDogNCAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgIH1cbn0pO1xuXG5yZXR1cm4gZXM7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogU3BhbmlzaCAoRG9taW5pY2FuIFJlcHVibGljKSBbZXMtZG9dXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxudmFyIG1vbnRoc1Nob3J0RG90ID0gJ2VuZS5fZmViLl9tYXIuX2Fici5fbWF5Ll9qdW4uX2p1bC5fYWdvLl9zZXAuX29jdC5fbm92Ll9kaWMuJy5zcGxpdCgnXycpO1xudmFyIG1vbnRoc1Nob3J0ID0gJ2VuZV9mZWJfbWFyX2Ficl9tYXlfanVuX2p1bF9hZ29fc2VwX29jdF9ub3ZfZGljJy5zcGxpdCgnXycpO1xuXG52YXIgZXNEbyA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2VzLWRvJywge1xuICAgIG1vbnRocyA6ICdlbmVyb19mZWJyZXJvX21hcnpvX2FicmlsX21heW9fanVuaW9fanVsaW9fYWdvc3RvX3NlcHRpZW1icmVfb2N0dWJyZV9ub3ZpZW1icmVfZGljaWVtYnJlJy5zcGxpdCgnXycpLFxuICAgIG1vbnRoc1Nob3J0IDogZnVuY3Rpb24gKG0sIGZvcm1hdCkge1xuICAgICAgICBpZiAoIW0pIHtcbiAgICAgICAgICAgIHJldHVybiBtb250aHNTaG9ydERvdDtcbiAgICAgICAgfSBlbHNlIGlmICgvLU1NTS0vLnRlc3QoZm9ybWF0KSkge1xuICAgICAgICAgICAgcmV0dXJuIG1vbnRoc1Nob3J0W20ubW9udGgoKV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbW9udGhzU2hvcnREb3RbbS5tb250aCgpXTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgbW9udGhzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgd2Vla2RheXMgOiAnZG9taW5nb19sdW5lc19tYXJ0ZXNfbWnDqXJjb2xlc19qdWV2ZXNfdmllcm5lc19zw6FiYWRvJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzU2hvcnQgOiAnZG9tLl9sdW4uX21hci5fbWnDqS5fanVlLl92aWUuX3PDoWIuJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzTWluIDogJ2RvX2x1X21hX21pX2p1X3ZpX3PDoScuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICBMVCA6ICdoOm1tIEEnLFxuICAgICAgICBMVFMgOiAnaDptbTpzcyBBJyxcbiAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgTEwgOiAnRCBbZGVdIE1NTU0gW2RlXSBZWVlZJyxcbiAgICAgICAgTExMIDogJ0QgW2RlXSBNTU1NIFtkZV0gWVlZWSBoOm1tIEEnLFxuICAgICAgICBMTExMIDogJ2RkZGQsIEQgW2RlXSBNTU1NIFtkZV0gWVlZWSBoOm1tIEEnXG4gICAgfSxcbiAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgc2FtZURheSA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiAnW2hveSBhIGxhJyArICgodGhpcy5ob3VycygpICE9PSAxKSA/ICdzJyA6ICcnKSArICddIExUJztcbiAgICAgICAgfSxcbiAgICAgICAgbmV4dERheSA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiAnW21hw7FhbmEgYSBsYScgKyAoKHRoaXMuaG91cnMoKSAhPT0gMSkgPyAncycgOiAnJykgKyAnXSBMVCc7XG4gICAgICAgIH0sXG4gICAgICAgIG5leHRXZWVrIDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuICdkZGRkIFthIGxhJyArICgodGhpcy5ob3VycygpICE9PSAxKSA/ICdzJyA6ICcnKSArICddIExUJztcbiAgICAgICAgfSxcbiAgICAgICAgbGFzdERheSA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiAnW2F5ZXIgYSBsYScgKyAoKHRoaXMuaG91cnMoKSAhPT0gMSkgPyAncycgOiAnJykgKyAnXSBMVCc7XG4gICAgICAgIH0sXG4gICAgICAgIGxhc3RXZWVrIDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuICdbZWxdIGRkZGQgW3Bhc2FkbyBhIGxhJyArICgodGhpcy5ob3VycygpICE9PSAxKSA/ICdzJyA6ICcnKSArICddIExUJztcbiAgICAgICAgfSxcbiAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICB9LFxuICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgZnV0dXJlIDogJ2VuICVzJyxcbiAgICAgICAgcGFzdCA6ICdoYWNlICVzJyxcbiAgICAgICAgcyA6ICd1bm9zIHNlZ3VuZG9zJyxcbiAgICAgICAgbSA6ICd1biBtaW51dG8nLFxuICAgICAgICBtbSA6ICclZCBtaW51dG9zJyxcbiAgICAgICAgaCA6ICd1bmEgaG9yYScsXG4gICAgICAgIGhoIDogJyVkIGhvcmFzJyxcbiAgICAgICAgZCA6ICd1biBkw61hJyxcbiAgICAgICAgZGQgOiAnJWQgZMOtYXMnLFxuICAgICAgICBNIDogJ3VuIG1lcycsXG4gICAgICAgIE1NIDogJyVkIG1lc2VzJyxcbiAgICAgICAgeSA6ICd1biBhw7FvJyxcbiAgICAgICAgeXkgOiAnJWQgYcOxb3MnXG4gICAgfSxcbiAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlIDogL1xcZHsxLDJ9wrovLFxuICAgIG9yZGluYWwgOiAnJWTCuicsXG4gICAgd2VlayA6IHtcbiAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICB9XG59KTtcblxucmV0dXJuIGVzRG87XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogRXN0b25pYW4gW2V0XVxuLy8hIGF1dGhvciA6IEhlbnJ5IEtlaGxtYW5uIDogaHR0cHM6Ly9naXRodWIuY29tL21hZGhlbnJ5XG4vLyEgaW1wcm92ZW1lbnRzIDogSWxsaW1hciBUYW1iZWsgOiBodHRwczovL2dpdGh1Yi5jb20vcmFndWxrYVxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbmZ1bmN0aW9uIHByb2Nlc3NSZWxhdGl2ZVRpbWUobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXksIGlzRnV0dXJlKSB7XG4gICAgdmFyIGZvcm1hdCA9IHtcbiAgICAgICAgJ3MnIDogWydtw7VuZSBzZWt1bmRpJywgJ23DtW5pIHNla3VuZCcsICdwYWFyIHNla3VuZGl0J10sXG4gICAgICAgICdtJyA6IFsnw7xoZSBtaW51dGknLCAnw7xrcyBtaW51dCddLFxuICAgICAgICAnbW0nOiBbbnVtYmVyICsgJyBtaW51dGknLCBudW1iZXIgKyAnIG1pbnV0aXQnXSxcbiAgICAgICAgJ2gnIDogWyfDvGhlIHR1bm5pJywgJ3R1bmQgYWVnYScsICfDvGtzIHR1bmQnXSxcbiAgICAgICAgJ2hoJzogW251bWJlciArICcgdHVubmknLCBudW1iZXIgKyAnIHR1bmRpJ10sXG4gICAgICAgICdkJyA6IFsnw7xoZSBww6RldmEnLCAnw7xrcyBww6RldiddLFxuICAgICAgICAnTScgOiBbJ2t1dSBhamEnLCAna3V1IGFlZ2EnLCAnw7xrcyBrdXUnXSxcbiAgICAgICAgJ01NJzogW251bWJlciArICcga3V1JywgbnVtYmVyICsgJyBrdXVkJ10sXG4gICAgICAgICd5JyA6IFsnw7xoZSBhYXN0YScsICdhYXN0YScsICfDvGtzIGFhc3RhJ10sXG4gICAgICAgICd5eSc6IFtudW1iZXIgKyAnIGFhc3RhJywgbnVtYmVyICsgJyBhYXN0YXQnXVxuICAgIH07XG4gICAgaWYgKHdpdGhvdXRTdWZmaXgpIHtcbiAgICAgICAgcmV0dXJuIGZvcm1hdFtrZXldWzJdID8gZm9ybWF0W2tleV1bMl0gOiBmb3JtYXRba2V5XVsxXTtcbiAgICB9XG4gICAgcmV0dXJuIGlzRnV0dXJlID8gZm9ybWF0W2tleV1bMF0gOiBmb3JtYXRba2V5XVsxXTtcbn1cblxudmFyIGV0ID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZXQnLCB7XG4gICAgbW9udGhzICAgICAgICA6ICdqYWFudWFyX3ZlZWJydWFyX23DpHJ0c19hcHJpbGxfbWFpX2p1dW5pX2p1dWxpX2F1Z3VzdF9zZXB0ZW1iZXJfb2t0b29iZXJfbm92ZW1iZXJfZGV0c2VtYmVyJy5zcGxpdCgnXycpLFxuICAgIG1vbnRoc1Nob3J0ICAgOiAnamFhbl92ZWVicl9tw6RydHNfYXByX21haV9qdXVuaV9qdXVsaV9hdWdfc2VwdF9va3Rfbm92X2RldHMnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXMgICAgICA6ICdww7xoYXDDpGV2X2VzbWFzcMOkZXZfdGVpc2lww6Rldl9rb2xtYXDDpGV2X25lbGphcMOkZXZfcmVlZGVfbGF1cMOkZXYnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNTaG9ydCA6ICdQX0VfVF9LX05fUl9MJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzTWluICAgOiAnUF9FX1RfS19OX1JfTCcuc3BsaXQoJ18nKSxcbiAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgTFQgICA6ICdIOm1tJyxcbiAgICAgICAgTFRTIDogJ0g6bW06c3MnLFxuICAgICAgICBMICAgIDogJ0RELk1NLllZWVknLFxuICAgICAgICBMTCAgIDogJ0QuIE1NTU0gWVlZWScsXG4gICAgICAgIExMTCAgOiAnRC4gTU1NTSBZWVlZIEg6bW0nLFxuICAgICAgICBMTExMIDogJ2RkZGQsIEQuIE1NTU0gWVlZWSBIOm1tJ1xuICAgIH0sXG4gICAgY2FsZW5kYXIgOiB7XG4gICAgICAgIHNhbWVEYXkgIDogJ1tUw6RuYSxdIExUJyxcbiAgICAgICAgbmV4dERheSAgOiAnW0hvbW1lLF0gTFQnLFxuICAgICAgICBuZXh0V2VlayA6ICdbSsOkcmdtaW5lXSBkZGRkIExUJyxcbiAgICAgICAgbGFzdERheSAgOiAnW0VpbGUsXSBMVCcsXG4gICAgICAgIGxhc3RXZWVrIDogJ1tFZWxtaW5lXSBkZGRkIExUJyxcbiAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICB9LFxuICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgZnV0dXJlIDogJyVzIHDDpHJhc3QnLFxuICAgICAgICBwYXN0ICAgOiAnJXMgdGFnYXNpJyxcbiAgICAgICAgcyAgICAgIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgbSAgICAgIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgbW0gICAgIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgaCAgICAgIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgaGggICAgIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgZCAgICAgIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgZGQgICAgIDogJyVkIHDDpGV2YScsXG4gICAgICAgIE0gICAgICA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgIE1NICAgICA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgIHkgICAgICA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgIHl5ICAgICA6IHByb2Nlc3NSZWxhdGl2ZVRpbWVcbiAgICB9LFxuICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfVxcLi8sXG4gICAgb3JkaW5hbCA6ICclZC4nLFxuICAgIHdlZWsgOiB7XG4gICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgfVxufSk7XG5cbnJldHVybiBldDtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBCYXNxdWUgW2V1XVxuLy8hIGF1dGhvciA6IEVuZWtvIElsbGFycmFtZW5kaSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9laWxsYXJyYVxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciBldSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2V1Jywge1xuICAgIG1vbnRocyA6ICd1cnRhcnJpbGFfb3RzYWlsYV9tYXJ0eG9hX2FwaXJpbGFfbWFpYXR6YV9la2FpbmFfdXp0YWlsYV9hYnV6dHVhX2lyYWlsYV91cnJpYV9hemFyb2FfYWJlbmR1YScuc3BsaXQoJ18nKSxcbiAgICBtb250aHNTaG9ydCA6ICd1cnQuX290cy5fbWFyLl9hcGkuX21haS5fZWthLl91enQuX2FidS5faXJhLl91cnIuX2F6YS5fYWJlLicuc3BsaXQoJ18nKSxcbiAgICBtb250aHNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICB3ZWVrZGF5cyA6ICdpZ2FuZGVhX2FzdGVsZWhlbmFfYXN0ZWFydGVhX2FzdGVhemtlbmFfb3N0ZWd1bmFfb3N0aXJhbGFfbGFydW5iYXRhJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzU2hvcnQgOiAnaWcuX2FsLl9hci5fYXouX29nLl9vbC5fbHIuJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzTWluIDogJ2lnX2FsX2FyX2F6X29nX29sX2xyJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgTCA6ICdZWVlZLU1NLUREJyxcbiAgICAgICAgTEwgOiAnWVlZWVtrb10gTU1NTVtyZW5dIERbYV0nLFxuICAgICAgICBMTEwgOiAnWVlZWVtrb10gTU1NTVtyZW5dIERbYV0gSEg6bW0nLFxuICAgICAgICBMTExMIDogJ2RkZGQsIFlZWVlba29dIE1NTU1bcmVuXSBEW2FdIEhIOm1tJyxcbiAgICAgICAgbCA6ICdZWVlZLU0tRCcsXG4gICAgICAgIGxsIDogJ1lZWVlba29dIE1NTSBEW2FdJyxcbiAgICAgICAgbGxsIDogJ1lZWVlba29dIE1NTSBEW2FdIEhIOm1tJyxcbiAgICAgICAgbGxsbCA6ICdkZGQsIFlZWVlba29dIE1NTSBEW2FdIEhIOm1tJ1xuICAgIH0sXG4gICAgY2FsZW5kYXIgOiB7XG4gICAgICAgIHNhbWVEYXkgOiAnW2dhdXJdIExUW2V0YW5dJyxcbiAgICAgICAgbmV4dERheSA6ICdbYmloYXJdIExUW2V0YW5dJyxcbiAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCBMVFtldGFuXScsXG4gICAgICAgIGxhc3REYXkgOiAnW2F0em9dIExUW2V0YW5dJyxcbiAgICAgICAgbGFzdFdlZWsgOiAnW2F1cnJla29dIGRkZGQgTFRbZXRhbl0nLFxuICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgIH0sXG4gICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICBmdXR1cmUgOiAnJXMgYmFycnUnLFxuICAgICAgICBwYXN0IDogJ2R1ZWxhICVzJyxcbiAgICAgICAgcyA6ICdzZWd1bmRvIGJhdHp1aycsXG4gICAgICAgIG0gOiAnbWludXR1IGJhdCcsXG4gICAgICAgIG1tIDogJyVkIG1pbnV0dScsXG4gICAgICAgIGggOiAnb3JkdSBiYXQnLFxuICAgICAgICBoaCA6ICclZCBvcmR1JyxcbiAgICAgICAgZCA6ICdlZ3VuIGJhdCcsXG4gICAgICAgIGRkIDogJyVkIGVndW4nLFxuICAgICAgICBNIDogJ2hpbGFiZXRlIGJhdCcsXG4gICAgICAgIE1NIDogJyVkIGhpbGFiZXRlJyxcbiAgICAgICAgeSA6ICd1cnRlIGJhdCcsXG4gICAgICAgIHl5IDogJyVkIHVydGUnXG4gICAgfSxcbiAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn1cXC4vLFxuICAgIG9yZGluYWwgOiAnJWQuJyxcbiAgICB3ZWVrIDoge1xuICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgZG95IDogNyAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gMXN0IGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgIH1cbn0pO1xuXG5yZXR1cm4gZXU7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogUGVyc2lhbiBbZmFdXG4vLyEgYXV0aG9yIDogRWJyYWhpbSBCeWFnb3dpIDogaHR0cHM6Ly9naXRodWIuY29tL2VicmFtaW5pb1xuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciBzeW1ib2xNYXAgPSB7XG4gICAgJzEnOiAn27EnLFxuICAgICcyJzogJ9uyJyxcbiAgICAnMyc6ICfbsycsXG4gICAgJzQnOiAn27QnLFxuICAgICc1JzogJ9u1JyxcbiAgICAnNic6ICfbticsXG4gICAgJzcnOiAn27cnLFxuICAgICc4JzogJ9u4JyxcbiAgICAnOSc6ICfbuScsXG4gICAgJzAnOiAn27AnXG59O1xudmFyIG51bWJlck1hcCA9IHtcbiAgICAn27EnOiAnMScsXG4gICAgJ9uyJzogJzInLFxuICAgICfbsyc6ICczJyxcbiAgICAn27QnOiAnNCcsXG4gICAgJ9u1JzogJzUnLFxuICAgICfbtic6ICc2JyxcbiAgICAn27cnOiAnNycsXG4gICAgJ9u4JzogJzgnLFxuICAgICfbuSc6ICc5JyxcbiAgICAn27AnOiAnMCdcbn07XG5cbnZhciBmYSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2ZhJywge1xuICAgIG1vbnRocyA6ICfamNin2YbZiNuM2Ydf2YHZiNix24zZh1/Zhdin2LHYs1/YotmI2LHbjNmEX9mF2Ydf2pjZiNim2YZf2pjZiNim24zZh1/Yp9mI2Kpf2LPZvtiq2KfZhdio2LFf2Kfaqdiq2KjYsV/ZhtmI2KfZhdio2LFf2K/Ys9in2YXYqNixJy5zcGxpdCgnXycpLFxuICAgIG1vbnRoc1Nob3J0IDogJ9qY2KfZhtmI24zZh1/ZgdmI2LHbjNmHX9mF2KfYsdizX9ii2YjYsduM2YRf2YXZh1/amNmI2KbZhl/amNmI2KbbjNmHX9in2YjYql/Ys9m+2KrYp9mF2KjYsV/Yp9qp2KrYqNixX9mG2YjYp9mF2KjYsV/Yr9iz2KfZhdio2LEnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXMgOiAn24zaqVxcdTIwMGPYtNmG2KjZh1/Yr9mI2LTZhtio2Ydf2LPZh1xcdTIwMGPYtNmG2KjZh1/ahtmH2KfYsdi02YbYqNmHX9m+2YbYrFxcdTIwMGPYtNmG2KjZh1/YrNmF2LnZh1/YtNmG2KjZhycuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1Nob3J0IDogJ9uM2qlcXHUyMDBj2LTZhtio2Ydf2K/ZiNi02YbYqNmHX9iz2YdcXHUyMDBj2LTZhtio2Ydf2obZh9in2LHYtNmG2KjZh1/ZvtmG2KxcXHUyMDBj2LTZhtio2Ydf2KzZhdi52Ydf2LTZhtio2YcnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNNaW4gOiAn24xf2K9f2LNf2oZf2b5f2Kxf2LQnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIExMTEwgOiAnZGRkZCwgRCBNTU1NIFlZWVkgSEg6bW0nXG4gICAgfSxcbiAgICBtZXJpZGllbVBhcnNlOiAv2YLYqNmEINin2LIg2LjZh9ixfNio2LnYryDYp9iyINi42YfYsS8sXG4gICAgaXNQTTogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgIHJldHVybiAv2KjYudivINin2LIg2LjZh9ixLy50ZXN0KGlucHV0KTtcbiAgICB9LFxuICAgIG1lcmlkaWVtIDogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICBpZiAoaG91ciA8IDEyKSB7XG4gICAgICAgICAgICByZXR1cm4gJ9mC2KjZhCDYp9iyINi42YfYsSc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gJ9io2LnYryDYp9iyINi42YfYsSc7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIGNhbGVuZGFyIDoge1xuICAgICAgICBzYW1lRGF5IDogJ1vYp9mF2LHZiNiyINiz2KfYudiqXSBMVCcsXG4gICAgICAgIG5leHREYXkgOiAnW9mB2LHYr9inINiz2KfYudiqXSBMVCcsXG4gICAgICAgIG5leHRXZWVrIDogJ2RkZGQgW9iz2KfYudiqXSBMVCcsXG4gICAgICAgIGxhc3REYXkgOiAnW9iv24zYsdmI2LIg2LPYp9i52KpdIExUJyxcbiAgICAgICAgbGFzdFdlZWsgOiAnZGRkZCBb2b7bjNi0XSBb2LPYp9i52KpdIExUJyxcbiAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICB9LFxuICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgZnV0dXJlIDogJ9iv2LEgJXMnLFxuICAgICAgICBwYXN0IDogJyVzINm+24zYtCcsXG4gICAgICAgIHMgOiAn2obZhtivINir2KfZhtuM2YcnLFxuICAgICAgICBtIDogJ9uM2qkg2K/ZgtuM2YLZhycsXG4gICAgICAgIG1tIDogJyVkINiv2YLbjNmC2YcnLFxuICAgICAgICBoIDogJ9uM2qkg2LPYp9i52KonLFxuICAgICAgICBoaCA6ICclZCDYs9in2LnYqicsXG4gICAgICAgIGQgOiAn24zaqSDYsdmI2LInLFxuICAgICAgICBkZCA6ICclZCDYsdmI2LInLFxuICAgICAgICBNIDogJ9uM2qkg2YXYp9mHJyxcbiAgICAgICAgTU0gOiAnJWQg2YXYp9mHJyxcbiAgICAgICAgeSA6ICfbjNqpINiz2KfZhCcsXG4gICAgICAgIHl5IDogJyVkINiz2KfZhCdcbiAgICB9LFxuICAgIHByZXBhcnNlOiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvW9uwLdu5XS9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgIHJldHVybiBudW1iZXJNYXBbbWF0Y2hdO1xuICAgICAgICB9KS5yZXBsYWNlKC/YjC9nLCAnLCcpO1xuICAgIH0sXG4gICAgcG9zdGZvcm1hdDogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1xcZC9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgIHJldHVybiBzeW1ib2xNYXBbbWF0Y2hdO1xuICAgICAgICB9KS5yZXBsYWNlKC8sL2csICfYjCcpO1xuICAgIH0sXG4gICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ92YUvLFxuICAgIG9yZGluYWwgOiAnJWTZhScsXG4gICAgd2VlayA6IHtcbiAgICAgICAgZG93IDogNiwgLy8gU2F0dXJkYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgZG95IDogMTIgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gMXN0IGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgIH1cbn0pO1xuXG5yZXR1cm4gZmE7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogRmlubmlzaCBbZmldXG4vLyEgYXV0aG9yIDogVGFybW8gQWlkYW50YXVzdGEgOiBodHRwczovL2dpdGh1Yi5jb20vYmxlYWRvZlxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciBudW1iZXJzUGFzdCA9ICdub2xsYSB5a3NpIGtha3NpIGtvbG1lIG5lbGrDpCB2aWlzaSBrdXVzaSBzZWl0c2Vtw6RuIGthaGRla3NhbiB5aGRla3PDpG4nLnNwbGl0KCcgJyk7XG52YXIgbnVtYmVyc0Z1dHVyZSA9IFtcbiAgICAgICAgJ25vbGxhJywgJ3loZGVuJywgJ2thaGRlbicsICdrb2xtZW4nLCAnbmVsasOkbicsICd2aWlkZW4nLCAna3V1ZGVuJyxcbiAgICAgICAgbnVtYmVyc1Bhc3RbN10sIG51bWJlcnNQYXN0WzhdLCBudW1iZXJzUGFzdFs5XVxuICAgIF07XG5mdW5jdGlvbiB0cmFuc2xhdGUobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXksIGlzRnV0dXJlKSB7XG4gICAgdmFyIHJlc3VsdCA9ICcnO1xuICAgIHN3aXRjaCAoa2V5KSB7XG4gICAgICAgIGNhc2UgJ3MnOlxuICAgICAgICAgICAgcmV0dXJuIGlzRnV0dXJlID8gJ211dXRhbWFuIHNla3VubmluJyA6ICdtdXV0YW1hIHNla3VudGknO1xuICAgICAgICBjYXNlICdtJzpcbiAgICAgICAgICAgIHJldHVybiBpc0Z1dHVyZSA/ICdtaW51dXRpbicgOiAnbWludXV0dGknO1xuICAgICAgICBjYXNlICdtbSc6XG4gICAgICAgICAgICByZXN1bHQgPSBpc0Z1dHVyZSA/ICdtaW51dXRpbicgOiAnbWludXV0dGlhJztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdoJzpcbiAgICAgICAgICAgIHJldHVybiBpc0Z1dHVyZSA/ICd0dW5uaW4nIDogJ3R1bnRpJztcbiAgICAgICAgY2FzZSAnaGgnOlxuICAgICAgICAgICAgcmVzdWx0ID0gaXNGdXR1cmUgPyAndHVubmluJyA6ICd0dW50aWEnO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2QnOlxuICAgICAgICAgICAgcmV0dXJuIGlzRnV0dXJlID8gJ3DDpGl2w6RuJyA6ICdww6RpdsOkJztcbiAgICAgICAgY2FzZSAnZGQnOlxuICAgICAgICAgICAgcmVzdWx0ID0gaXNGdXR1cmUgPyAncMOkaXbDpG4nIDogJ3DDpGl2w6TDpCc7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnTSc6XG4gICAgICAgICAgICByZXR1cm4gaXNGdXR1cmUgPyAna3V1a2F1ZGVuJyA6ICdrdXVrYXVzaSc7XG4gICAgICAgIGNhc2UgJ01NJzpcbiAgICAgICAgICAgIHJlc3VsdCA9IGlzRnV0dXJlID8gJ2t1dWthdWRlbicgOiAna3V1a2F1dHRhJztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICd5JzpcbiAgICAgICAgICAgIHJldHVybiBpc0Z1dHVyZSA/ICd2dW9kZW4nIDogJ3Z1b3NpJztcbiAgICAgICAgY2FzZSAneXknOlxuICAgICAgICAgICAgcmVzdWx0ID0gaXNGdXR1cmUgPyAndnVvZGVuJyA6ICd2dW90dGEnO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHJlc3VsdCA9IHZlcmJhbE51bWJlcihudW1iZXIsIGlzRnV0dXJlKSArICcgJyArIHJlc3VsdDtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gdmVyYmFsTnVtYmVyKG51bWJlciwgaXNGdXR1cmUpIHtcbiAgICByZXR1cm4gbnVtYmVyIDwgMTAgPyAoaXNGdXR1cmUgPyBudW1iZXJzRnV0dXJlW251bWJlcl0gOiBudW1iZXJzUGFzdFtudW1iZXJdKSA6IG51bWJlcjtcbn1cblxudmFyIGZpID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZmknLCB7XG4gICAgbW9udGhzIDogJ3RhbW1pa3V1X2hlbG1pa3V1X21hYWxpc2t1dV9odWh0aWt1dV90b3Vrb2t1dV9rZXPDpGt1dV9oZWluw6RrdXVfZWxva3V1X3N5eXNrdXVfbG9rYWt1dV9tYXJyYXNrdXVfam91bHVrdXUnLnNwbGl0KCdfJyksXG4gICAgbW9udGhzU2hvcnQgOiAndGFtbWlfaGVsbWlfbWFhbGlzX2h1aHRpX3RvdWtvX2tlc8OkX2hlaW7DpF9lbG9fc3l5c19sb2thX21hcnJhc19qb3VsdScuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5cyA6ICdzdW5udW50YWlfbWFhbmFudGFpX3RpaXN0YWlfa2Vza2l2aWlra29fdG9yc3RhaV9wZXJqYW50YWlfbGF1YW50YWknLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNTaG9ydCA6ICdzdV9tYV90aV9rZV90b19wZV9sYScuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c01pbiA6ICdzdV9tYV90aV9rZV90b19wZV9sYScuc3BsaXQoJ18nKSxcbiAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgTFQgOiAnSEgubW0nLFxuICAgICAgICBMVFMgOiAnSEgubW0uc3MnLFxuICAgICAgICBMIDogJ0RELk1NLllZWVknLFxuICAgICAgICBMTCA6ICdEbyBNTU1NW3RhXSBZWVlZJyxcbiAgICAgICAgTExMIDogJ0RvIE1NTU1bdGFdIFlZWVksIFtrbG9dIEhILm1tJyxcbiAgICAgICAgTExMTCA6ICdkZGRkLCBEbyBNTU1NW3RhXSBZWVlZLCBba2xvXSBISC5tbScsXG4gICAgICAgIGwgOiAnRC5NLllZWVknLFxuICAgICAgICBsbCA6ICdEbyBNTU0gWVlZWScsXG4gICAgICAgIGxsbCA6ICdEbyBNTU0gWVlZWSwgW2tsb10gSEgubW0nLFxuICAgICAgICBsbGxsIDogJ2RkZCwgRG8gTU1NIFlZWVksIFtrbG9dIEhILm1tJ1xuICAgIH0sXG4gICAgY2FsZW5kYXIgOiB7XG4gICAgICAgIHNhbWVEYXkgOiAnW3TDpG7DpMOkbl0gW2tsb10gTFQnLFxuICAgICAgICBuZXh0RGF5IDogJ1todW9tZW5uYV0gW2tsb10gTFQnLFxuICAgICAgICBuZXh0V2VlayA6ICdkZGRkIFtrbG9dIExUJyxcbiAgICAgICAgbGFzdERheSA6ICdbZWlsZW5dIFtrbG9dIExUJyxcbiAgICAgICAgbGFzdFdlZWsgOiAnW3ZpaW1lXSBkZGRkW25hXSBba2xvXSBMVCcsXG4gICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgfSxcbiAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgIGZ1dHVyZSA6ICclcyBww6TDpHN0w6QnLFxuICAgICAgICBwYXN0IDogJyVzIHNpdHRlbicsXG4gICAgICAgIHMgOiB0cmFuc2xhdGUsXG4gICAgICAgIG0gOiB0cmFuc2xhdGUsXG4gICAgICAgIG1tIDogdHJhbnNsYXRlLFxuICAgICAgICBoIDogdHJhbnNsYXRlLFxuICAgICAgICBoaCA6IHRyYW5zbGF0ZSxcbiAgICAgICAgZCA6IHRyYW5zbGF0ZSxcbiAgICAgICAgZGQgOiB0cmFuc2xhdGUsXG4gICAgICAgIE0gOiB0cmFuc2xhdGUsXG4gICAgICAgIE1NIDogdHJhbnNsYXRlLFxuICAgICAgICB5IDogdHJhbnNsYXRlLFxuICAgICAgICB5eSA6IHRyYW5zbGF0ZVxuICAgIH0sXG4gICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9XFwuLyxcbiAgICBvcmRpbmFsIDogJyVkLicsXG4gICAgd2VlayA6IHtcbiAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICB9XG59KTtcblxucmV0dXJuIGZpO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEZhcm9lc2UgW2ZvXVxuLy8hIGF1dGhvciA6IFJhZ25hciBKb2hhbm5lc2VuIDogaHR0cHM6Ly9naXRodWIuY29tL3JhZ25hcjEyM1xuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciBmbyA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2ZvJywge1xuICAgIG1vbnRocyA6ICdqYW51YXJfZmVicnVhcl9tYXJzX2FwcsOtbF9tYWlfanVuaV9qdWxpX2F1Z3VzdF9zZXB0ZW1iZXJfb2t0b2Jlcl9ub3ZlbWJlcl9kZXNlbWJlcicuc3BsaXQoJ18nKSxcbiAgICBtb250aHNTaG9ydCA6ICdqYW5fZmViX21hcl9hcHJfbWFpX2p1bl9qdWxfYXVnX3NlcF9va3Rfbm92X2Rlcycuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5cyA6ICdzdW5udWRhZ3VyX23DoW5hZGFndXJfdMO9c2RhZ3VyX21pa3VkYWd1cl9ow7NzZGFndXJfZnLDrWdnamFkYWd1cl9sZXlnYXJkYWd1cicuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1Nob3J0IDogJ3N1bl9tw6FuX3TDvXNfbWlrX2jDs3NfZnLDrV9sZXknLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNNaW4gOiAnc3VfbcOhX3TDvV9taV9ow7NfZnJfbGUnLnNwbGl0KCdfJyksXG4gICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICBMTExMIDogJ2RkZGQgRC4gTU1NTSwgWVlZWSBISDptbSdcbiAgICB9LFxuICAgIGNhbGVuZGFyIDoge1xuICAgICAgICBzYW1lRGF5IDogJ1vDjSBkYWcga2wuXSBMVCcsXG4gICAgICAgIG5leHREYXkgOiAnW8ONIG1vcmdpbiBrbC5dIExUJyxcbiAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCBba2wuXSBMVCcsXG4gICAgICAgIGxhc3REYXkgOiAnW8ONIGdqw6FyIGtsLl0gTFQnLFxuICAgICAgICBsYXN0V2VlayA6ICdbc8Otw7BzdHVdIGRkZGQgW2tsXSBMVCcsXG4gICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgfSxcbiAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgIGZ1dHVyZSA6ICd1bSAlcycsXG4gICAgICAgIHBhc3QgOiAnJXMgc8Otw7BhbmknLFxuICAgICAgICBzIDogJ2bDoSBzZWt1bmQnLFxuICAgICAgICBtIDogJ2VpbiBtaW51dHQnLFxuICAgICAgICBtbSA6ICclZCBtaW51dHRpcicsXG4gICAgICAgIGggOiAnZWluIHTDrW1pJyxcbiAgICAgICAgaGggOiAnJWQgdMOtbWFyJyxcbiAgICAgICAgZCA6ICdlaW4gZGFndXInLFxuICAgICAgICBkZCA6ICclZCBkYWdhcicsXG4gICAgICAgIE0gOiAnZWluIG3DoW5hw7BpJyxcbiAgICAgICAgTU0gOiAnJWQgbcOhbmHDsGlyJyxcbiAgICAgICAgeSA6ICdlaXR0IMOhcicsXG4gICAgICAgIHl5IDogJyVkIMOhcidcbiAgICB9LFxuICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfVxcLi8sXG4gICAgb3JkaW5hbCA6ICclZC4nLFxuICAgIHdlZWsgOiB7XG4gICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgfVxufSk7XG5cbnJldHVybiBmbztcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBGcmVuY2ggW2ZyXVxuLy8hIGF1dGhvciA6IEpvaG4gRmlzY2hlciA6IGh0dHBzOi8vZ2l0aHViLmNvbS9qZnJvZmZpY2VcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG52YXIgZnIgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdmcicsIHtcbiAgICBtb250aHMgOiAnamFudmllcl9mw6l2cmllcl9tYXJzX2F2cmlsX21haV9qdWluX2p1aWxsZXRfYW/Du3Rfc2VwdGVtYnJlX29jdG9icmVfbm92ZW1icmVfZMOpY2VtYnJlJy5zcGxpdCgnXycpLFxuICAgIG1vbnRoc1Nob3J0IDogJ2phbnYuX2bDqXZyLl9tYXJzX2F2ci5fbWFpX2p1aW5fanVpbC5fYW/Du3Rfc2VwdC5fb2N0Ll9ub3YuX2TDqWMuJy5zcGxpdCgnXycpLFxuICAgIG1vbnRoc1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgIHdlZWtkYXlzIDogJ2RpbWFuY2hlX2x1bmRpX21hcmRpX21lcmNyZWRpX2pldWRpX3ZlbmRyZWRpX3NhbWVkaScuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1Nob3J0IDogJ2RpbS5fbHVuLl9tYXIuX21lci5famV1Ll92ZW4uX3NhbS4nLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNNaW4gOiAnRGlfTHVfTWFfTWVfSmVfVmVfU2EnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIExMTEwgOiAnZGRkZCBEIE1NTU0gWVlZWSBISDptbSdcbiAgICB9LFxuICAgIGNhbGVuZGFyIDoge1xuICAgICAgICBzYW1lRGF5IDogJ1tBdWpvdXJk4oCZaHVpIMOgXSBMVCcsXG4gICAgICAgIG5leHREYXkgOiAnW0RlbWFpbiDDoF0gTFQnLFxuICAgICAgICBuZXh0V2VlayA6ICdkZGRkIFvDoF0gTFQnLFxuICAgICAgICBsYXN0RGF5IDogJ1tIaWVyIMOgXSBMVCcsXG4gICAgICAgIGxhc3RXZWVrIDogJ2RkZGQgW2Rlcm5pZXIgw6BdIExUJyxcbiAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICB9LFxuICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgZnV0dXJlIDogJ2RhbnMgJXMnLFxuICAgICAgICBwYXN0IDogJ2lsIHkgYSAlcycsXG4gICAgICAgIHMgOiAncXVlbHF1ZXMgc2Vjb25kZXMnLFxuICAgICAgICBtIDogJ3VuZSBtaW51dGUnLFxuICAgICAgICBtbSA6ICclZCBtaW51dGVzJyxcbiAgICAgICAgaCA6ICd1bmUgaGV1cmUnLFxuICAgICAgICBoaCA6ICclZCBoZXVyZXMnLFxuICAgICAgICBkIDogJ3VuIGpvdXInLFxuICAgICAgICBkZCA6ICclZCBqb3VycycsXG4gICAgICAgIE0gOiAndW4gbW9pcycsXG4gICAgICAgIE1NIDogJyVkIG1vaXMnLFxuICAgICAgICB5IDogJ3VuIGFuJyxcbiAgICAgICAgeXkgOiAnJWQgYW5zJ1xuICAgIH0sXG4gICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9KGVyfCkvLFxuICAgIG9yZGluYWwgOiBmdW5jdGlvbiAobnVtYmVyLCBwZXJpb2QpIHtcbiAgICAgICAgc3dpdGNoIChwZXJpb2QpIHtcbiAgICAgICAgICAgIC8vIFRPRE86IFJldHVybiAnZScgd2hlbiBkYXkgb2YgbW9udGggPiAxLiBNb3ZlIHRoaXMgY2FzZSBpbnNpZGVcbiAgICAgICAgICAgIC8vIGJsb2NrIGZvciBtYXNjdWxpbmUgd29yZHMgYmVsb3cuXG4gICAgICAgICAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL21vbWVudC9tb21lbnQvaXNzdWVzLzMzNzVcbiAgICAgICAgICAgIGNhc2UgJ0QnOlxuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAobnVtYmVyID09PSAxID8gJ2VyJyA6ICcnKTtcblxuICAgICAgICAgICAgLy8gV29yZHMgd2l0aCBtYXNjdWxpbmUgZ3JhbW1hdGljYWwgZ2VuZGVyOiBtb2lzLCB0cmltZXN0cmUsIGpvdXJcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBjYXNlICdNJzpcbiAgICAgICAgICAgIGNhc2UgJ1EnOlxuICAgICAgICAgICAgY2FzZSAnREREJzpcbiAgICAgICAgICAgIGNhc2UgJ2QnOlxuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAobnVtYmVyID09PSAxID8gJ2VyJyA6ICdlJyk7XG5cbiAgICAgICAgICAgIC8vIFdvcmRzIHdpdGggZmVtaW5pbmUgZ3JhbW1hdGljYWwgZ2VuZGVyOiBzZW1haW5lXG4gICAgICAgICAgICBjYXNlICd3JzpcbiAgICAgICAgICAgIGNhc2UgJ1cnOlxuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAobnVtYmVyID09PSAxID8gJ3JlJyA6ICdlJyk7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIHdlZWsgOiB7XG4gICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgfVxufSk7XG5cbnJldHVybiBmcjtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBGcmVuY2ggKENhbmFkYSkgW2ZyLWNhXVxuLy8hIGF1dGhvciA6IEpvbmF0aGFuIEFib3VyYmloIDogaHR0cHM6Ly9naXRodWIuY29tL2pvbmJjYVxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciBmckNhID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZnItY2EnLCB7XG4gICAgbW9udGhzIDogJ2phbnZpZXJfZsOpdnJpZXJfbWFyc19hdnJpbF9tYWlfanVpbl9qdWlsbGV0X2Fvw7t0X3NlcHRlbWJyZV9vY3RvYnJlX25vdmVtYnJlX2TDqWNlbWJyZScuc3BsaXQoJ18nKSxcbiAgICBtb250aHNTaG9ydCA6ICdqYW52Ll9mw6l2ci5fbWFyc19hdnIuX21haV9qdWluX2p1aWwuX2Fvw7t0X3NlcHQuX29jdC5fbm92Ll9kw6ljLicuc3BsaXQoJ18nKSxcbiAgICBtb250aHNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICB3ZWVrZGF5cyA6ICdkaW1hbmNoZV9sdW5kaV9tYXJkaV9tZXJjcmVkaV9qZXVkaV92ZW5kcmVkaV9zYW1lZGknLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNTaG9ydCA6ICdkaW0uX2x1bi5fbWFyLl9tZXIuX2pldS5fdmVuLl9zYW0uJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzTWluIDogJ0RpX0x1X01hX01lX0plX1ZlX1NhJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgTCA6ICdZWVlZLU1NLUREJyxcbiAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICBMTExMIDogJ2RkZGQgRCBNTU1NIFlZWVkgSEg6bW0nXG4gICAgfSxcbiAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgc2FtZURheSA6ICdbQXVqb3VyZOKAmWh1aSDDoF0gTFQnLFxuICAgICAgICBuZXh0RGF5IDogJ1tEZW1haW4gw6BdIExUJyxcbiAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCBbw6BdIExUJyxcbiAgICAgICAgbGFzdERheSA6ICdbSGllciDDoF0gTFQnLFxuICAgICAgICBsYXN0V2VlayA6ICdkZGRkIFtkZXJuaWVyIMOgXSBMVCcsXG4gICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgfSxcbiAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgIGZ1dHVyZSA6ICdkYW5zICVzJyxcbiAgICAgICAgcGFzdCA6ICdpbCB5IGEgJXMnLFxuICAgICAgICBzIDogJ3F1ZWxxdWVzIHNlY29uZGVzJyxcbiAgICAgICAgbSA6ICd1bmUgbWludXRlJyxcbiAgICAgICAgbW0gOiAnJWQgbWludXRlcycsXG4gICAgICAgIGggOiAndW5lIGhldXJlJyxcbiAgICAgICAgaGggOiAnJWQgaGV1cmVzJyxcbiAgICAgICAgZCA6ICd1biBqb3VyJyxcbiAgICAgICAgZGQgOiAnJWQgam91cnMnLFxuICAgICAgICBNIDogJ3VuIG1vaXMnLFxuICAgICAgICBNTSA6ICclZCBtb2lzJyxcbiAgICAgICAgeSA6ICd1biBhbicsXG4gICAgICAgIHl5IDogJyVkIGFucydcbiAgICB9LFxuICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfShlcnxlKS8sXG4gICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIsIHBlcmlvZCkge1xuICAgICAgICBzd2l0Y2ggKHBlcmlvZCkge1xuICAgICAgICAgICAgLy8gV29yZHMgd2l0aCBtYXNjdWxpbmUgZ3JhbW1hdGljYWwgZ2VuZGVyOiBtb2lzLCB0cmltZXN0cmUsIGpvdXJcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBjYXNlICdNJzpcbiAgICAgICAgICAgIGNhc2UgJ1EnOlxuICAgICAgICAgICAgY2FzZSAnRCc6XG4gICAgICAgICAgICBjYXNlICdEREQnOlxuICAgICAgICAgICAgY2FzZSAnZCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArIChudW1iZXIgPT09IDEgPyAnZXInIDogJ2UnKTtcblxuICAgICAgICAgICAgLy8gV29yZHMgd2l0aCBmZW1pbmluZSBncmFtbWF0aWNhbCBnZW5kZXI6IHNlbWFpbmVcbiAgICAgICAgICAgIGNhc2UgJ3cnOlxuICAgICAgICAgICAgY2FzZSAnVyc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArIChudW1iZXIgPT09IDEgPyAncmUnIDogJ2UnKTtcbiAgICAgICAgfVxuICAgIH1cbn0pO1xuXG5yZXR1cm4gZnJDYTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBGcmVuY2ggKFN3aXR6ZXJsYW5kKSBbZnItY2hdXG4vLyEgYXV0aG9yIDogR2FzcGFyZCBCdWNoZXIgOiBodHRwczovL2dpdGh1Yi5jb20vZ2FzcGFyZFxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciBmckNoID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZnItY2gnLCB7XG4gICAgbW9udGhzIDogJ2phbnZpZXJfZsOpdnJpZXJfbWFyc19hdnJpbF9tYWlfanVpbl9qdWlsbGV0X2Fvw7t0X3NlcHRlbWJyZV9vY3RvYnJlX25vdmVtYnJlX2TDqWNlbWJyZScuc3BsaXQoJ18nKSxcbiAgICBtb250aHNTaG9ydCA6ICdqYW52Ll9mw6l2ci5fbWFyc19hdnIuX21haV9qdWluX2p1aWwuX2Fvw7t0X3NlcHQuX29jdC5fbm92Ll9kw6ljLicuc3BsaXQoJ18nKSxcbiAgICBtb250aHNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICB3ZWVrZGF5cyA6ICdkaW1hbmNoZV9sdW5kaV9tYXJkaV9tZXJjcmVkaV9qZXVkaV92ZW5kcmVkaV9zYW1lZGknLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNTaG9ydCA6ICdkaW0uX2x1bi5fbWFyLl9tZXIuX2pldS5fdmVuLl9zYW0uJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzTWluIDogJ0RpX0x1X01hX01lX0plX1ZlX1NhJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgTCA6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICBMTExMIDogJ2RkZGQgRCBNTU1NIFlZWVkgSEg6bW0nXG4gICAgfSxcbiAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgc2FtZURheSA6ICdbQXVqb3VyZOKAmWh1aSDDoF0gTFQnLFxuICAgICAgICBuZXh0RGF5IDogJ1tEZW1haW4gw6BdIExUJyxcbiAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCBbw6BdIExUJyxcbiAgICAgICAgbGFzdERheSA6ICdbSGllciDDoF0gTFQnLFxuICAgICAgICBsYXN0V2VlayA6ICdkZGRkIFtkZXJuaWVyIMOgXSBMVCcsXG4gICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgfSxcbiAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgIGZ1dHVyZSA6ICdkYW5zICVzJyxcbiAgICAgICAgcGFzdCA6ICdpbCB5IGEgJXMnLFxuICAgICAgICBzIDogJ3F1ZWxxdWVzIHNlY29uZGVzJyxcbiAgICAgICAgbSA6ICd1bmUgbWludXRlJyxcbiAgICAgICAgbW0gOiAnJWQgbWludXRlcycsXG4gICAgICAgIGggOiAndW5lIGhldXJlJyxcbiAgICAgICAgaGggOiAnJWQgaGV1cmVzJyxcbiAgICAgICAgZCA6ICd1biBqb3VyJyxcbiAgICAgICAgZGQgOiAnJWQgam91cnMnLFxuICAgICAgICBNIDogJ3VuIG1vaXMnLFxuICAgICAgICBNTSA6ICclZCBtb2lzJyxcbiAgICAgICAgeSA6ICd1biBhbicsXG4gICAgICAgIHl5IDogJyVkIGFucydcbiAgICB9LFxuICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfShlcnxlKS8sXG4gICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIsIHBlcmlvZCkge1xuICAgICAgICBzd2l0Y2ggKHBlcmlvZCkge1xuICAgICAgICAgICAgLy8gV29yZHMgd2l0aCBtYXNjdWxpbmUgZ3JhbW1hdGljYWwgZ2VuZGVyOiBtb2lzLCB0cmltZXN0cmUsIGpvdXJcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBjYXNlICdNJzpcbiAgICAgICAgICAgIGNhc2UgJ1EnOlxuICAgICAgICAgICAgY2FzZSAnRCc6XG4gICAgICAgICAgICBjYXNlICdEREQnOlxuICAgICAgICAgICAgY2FzZSAnZCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArIChudW1iZXIgPT09IDEgPyAnZXInIDogJ2UnKTtcblxuICAgICAgICAgICAgLy8gV29yZHMgd2l0aCBmZW1pbmluZSBncmFtbWF0aWNhbCBnZW5kZXI6IHNlbWFpbmVcbiAgICAgICAgICAgIGNhc2UgJ3cnOlxuICAgICAgICAgICAgY2FzZSAnVyc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArIChudW1iZXIgPT09IDEgPyAncmUnIDogJ2UnKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgd2VlayA6IHtcbiAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICB9XG59KTtcblxucmV0dXJuIGZyQ2g7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogRnJpc2lhbiBbZnldXG4vLyEgYXV0aG9yIDogUm9iaW4gdmFuIGRlciBWbGlldCA6IGh0dHBzOi8vZ2l0aHViLmNvbS9yb2JpbjB2YW4wZGVyMHZcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG52YXIgbW9udGhzU2hvcnRXaXRoRG90cyA9ICdqYW4uX2ZlYi5fbXJ0Ll9hcHIuX21haV9qdW4uX2p1bC5fYXVnLl9zZXAuX29rdC5fbm92Ll9kZXMuJy5zcGxpdCgnXycpO1xudmFyIG1vbnRoc1Nob3J0V2l0aG91dERvdHMgPSAnamFuX2ZlYl9tcnRfYXByX21haV9qdW5fanVsX2F1Z19zZXBfb2t0X25vdl9kZXMnLnNwbGl0KCdfJyk7XG5cbnZhciBmeSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2Z5Jywge1xuICAgIG1vbnRocyA6ICdqYW5uZXdhcmlzX2ZlYnJld2FyaXNfbWFhcnRfYXByaWxfbWFhaWVfanVueV9qdWx5X2F1Z3VzdHVzX3NlcHRpbWJlcl9va3RvYmVyX25vdmltYmVyX2Rlc2ltYmVyJy5zcGxpdCgnXycpLFxuICAgIG1vbnRoc1Nob3J0IDogZnVuY3Rpb24gKG0sIGZvcm1hdCkge1xuICAgICAgICBpZiAoIW0pIHtcbiAgICAgICAgICAgIHJldHVybiBtb250aHNTaG9ydFdpdGhEb3RzO1xuICAgICAgICB9IGVsc2UgaWYgKC8tTU1NLS8udGVzdChmb3JtYXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gbW9udGhzU2hvcnRXaXRob3V0RG90c1ttLm1vbnRoKCldO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG1vbnRoc1Nob3J0V2l0aERvdHNbbS5tb250aCgpXTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgbW9udGhzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgd2Vla2RheXMgOiAnc25laW5fbW9hbmRlaV90aWlzZGVpX3dvYW5zZGVpX3RvbmdlcnNkZWlfZnJlZWRfc25lb24nLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNTaG9ydCA6ICdzaS5fbW8uX3RpLl93by5fdG8uX2ZyLl9zby4nLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNNaW4gOiAnU2lfTW9fVGlfV29fVG9fRnJfU28nLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICBMIDogJ0RELU1NLVlZWVknLFxuICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIExMTEwgOiAnZGRkZCBEIE1NTU0gWVlZWSBISDptbSdcbiAgICB9LFxuICAgIGNhbGVuZGFyIDoge1xuICAgICAgICBzYW1lRGF5OiAnW2hqb2VkIG9tXSBMVCcsXG4gICAgICAgIG5leHREYXk6ICdbbW9hcm4gb21dIExUJyxcbiAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFtvbV0gTFQnLFxuICAgICAgICBsYXN0RGF5OiAnW2p1c3RlciBvbV0gTFQnLFxuICAgICAgICBsYXN0V2VlazogJ1vDtGZyw7tuZV0gZGRkZCBbb21dIExUJyxcbiAgICAgICAgc2FtZUVsc2U6ICdMJ1xuICAgIH0sXG4gICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICBmdXR1cmUgOiAnb2VyICVzJyxcbiAgICAgICAgcGFzdCA6ICclcyBseW4nLFxuICAgICAgICBzIDogJ2luIHBlYXIgc2Vrb25kZW4nLFxuICAgICAgICBtIDogJ2llbiBtaW7DunQnLFxuICAgICAgICBtbSA6ICclZCBtaW51dGVuJyxcbiAgICAgICAgaCA6ICdpZW4gb2VyZScsXG4gICAgICAgIGhoIDogJyVkIG9lcmVuJyxcbiAgICAgICAgZCA6ICdpZW4gZGVpJyxcbiAgICAgICAgZGQgOiAnJWQgZGFnZW4nLFxuICAgICAgICBNIDogJ2llbiBtb2FubmUnLFxuICAgICAgICBNTSA6ICclZCBtb2FubmVuJyxcbiAgICAgICAgeSA6ICdpZW4gamllcicsXG4gICAgICAgIHl5IDogJyVkIGppZXJyZW4nXG4gICAgfSxcbiAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0oc3RlfGRlKS8sXG4gICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgcmV0dXJuIG51bWJlciArICgobnVtYmVyID09PSAxIHx8IG51bWJlciA9PT0gOCB8fCBudW1iZXIgPj0gMjApID8gJ3N0ZScgOiAnZGUnKTtcbiAgICB9LFxuICAgIHdlZWsgOiB7XG4gICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgfVxufSk7XG5cbnJldHVybiBmeTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBTY290dGlzaCBHYWVsaWMgW2dkXVxuLy8hIGF1dGhvciA6IEpvbiBBc2hkb3duIDogaHR0cHM6Ly9naXRodWIuY29tL2pvbmFzaGRvd25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG52YXIgbW9udGhzID0gW1xuICAgICdBbSBGYW9pbGxlYWNoJywgJ0FuIEdlYXJyYW4nLCAnQW0gTcOgcnQnLCAnQW4gR2libGVhbicsICdBbiBDw6hpdGVhbicsICdBbiB0LcOSZ21oaW9zJywgJ0FuIHQtSXVjaGFyJywgJ0FuIEzDuW5hc3RhbCcsICdBbiB0LVN1bHRhaW4nLCAnQW4gRMOgbWhhaXInLCAnQW4gdC1TYW1oYWluJywgJ0FuIETDuWJobGFjaGQnXG5dO1xuXG52YXIgbW9udGhzU2hvcnQgPSBbJ0Zhb2knLCAnR2VhcicsICdNw6BydCcsICdHaWJsJywgJ0PDqGl0JywgJ8OSZ21oJywgJ0l1Y2gnLCAnTMO5bicsICdTdWx0JywgJ0TDoG1oJywgJ1NhbWgnLCAnRMO5YmgnXTtcblxudmFyIHdlZWtkYXlzID0gWydEaWTDsm1obmFpY2gnLCAnRGlsdWFpbicsICdEaW3DoGlydCcsICdEaWNpYWRhaW4nLCAnRGlhcmRhb2luJywgJ0RpaGFvaW5lJywgJ0Rpc2F0aGFpcm5lJ107XG5cbnZhciB3ZWVrZGF5c1Nob3J0ID0gWydEaWQnLCAnRGlsJywgJ0RpbScsICdEaWMnLCAnRGlhJywgJ0RpaCcsICdEaXMnXTtcblxudmFyIHdlZWtkYXlzTWluID0gWydEw7InLCAnTHUnLCAnTcOgJywgJ0NpJywgJ0FyJywgJ0hhJywgJ1NhJ107XG5cbnZhciBnZCA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2dkJywge1xuICAgIG1vbnRocyA6IG1vbnRocyxcbiAgICBtb250aHNTaG9ydCA6IG1vbnRoc1Nob3J0LFxuICAgIG1vbnRoc1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgIHdlZWtkYXlzIDogd2Vla2RheXMsXG4gICAgd2Vla2RheXNTaG9ydCA6IHdlZWtkYXlzU2hvcnQsXG4gICAgd2Vla2RheXNNaW4gOiB3ZWVrZGF5c01pbixcbiAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIExMTEwgOiAnZGRkZCwgRCBNTU1NIFlZWVkgSEg6bW0nXG4gICAgfSxcbiAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgc2FtZURheSA6ICdbQW4tZGl1Z2ggYWlnXSBMVCcsXG4gICAgICAgIG5leHREYXkgOiAnW0EtbcOgaXJlYWNoIGFpZ10gTFQnLFxuICAgICAgICBuZXh0V2VlayA6ICdkZGRkIFthaWddIExUJyxcbiAgICAgICAgbGFzdERheSA6ICdbQW4tZMOoIGFpZ10gTFQnLFxuICAgICAgICBsYXN0V2VlayA6ICdkZGRkIFtzZW8gY2hhaWRoXSBbYWlnXSBMVCcsXG4gICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgfSxcbiAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgIGZ1dHVyZSA6ICdhbm4gYW4gJXMnLFxuICAgICAgICBwYXN0IDogJ2JobyBjaGlvbm4gJXMnLFxuICAgICAgICBzIDogJ2JlYWdhbiBkaW9nYW4nLFxuICAgICAgICBtIDogJ21pb25haWQnLFxuICAgICAgICBtbSA6ICclZCBtaW9uYWlkZWFuJyxcbiAgICAgICAgaCA6ICd1YWlyJyxcbiAgICAgICAgaGggOiAnJWQgdWFpcmVhbicsXG4gICAgICAgIGQgOiAnbGF0aGEnLFxuICAgICAgICBkZCA6ICclZCBsYXRoYScsXG4gICAgICAgIE0gOiAnbcOsb3MnLFxuICAgICAgICBNTSA6ICclZCBtw6xvc2FuJyxcbiAgICAgICAgeSA6ICdibGlhZGhuYScsXG4gICAgICAgIHl5IDogJyVkIGJsaWFkaG5hJ1xuICAgIH0sXG4gICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZSA6IC9cXGR7MSwyfShkfG5hfG1oKS8sXG4gICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgdmFyIG91dHB1dCA9IG51bWJlciA9PT0gMSA/ICdkJyA6IG51bWJlciAlIDEwID09PSAyID8gJ25hJyA6ICdtaCc7XG4gICAgICAgIHJldHVybiBudW1iZXIgKyBvdXRwdXQ7XG4gICAgfSxcbiAgICB3ZWVrIDoge1xuICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgZG95IDogNCAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgIH1cbn0pO1xuXG5yZXR1cm4gZ2Q7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogR2FsaWNpYW4gW2dsXVxuLy8hIGF1dGhvciA6IEp1YW4gRy4gSHVydGFkbyA6IGh0dHBzOi8vZ2l0aHViLmNvbS9qdWFuZ2h1cnRhZG9cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG52YXIgZ2wgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdnbCcsIHtcbiAgICBtb250aHMgOiAneGFuZWlyb19mZWJyZWlyb19tYXJ6b19hYnJpbF9tYWlvX3h1w7FvX3h1bGxvX2Fnb3N0b19zZXRlbWJyb19vdXR1YnJvX25vdmVtYnJvX2RlY2VtYnJvJy5zcGxpdCgnXycpLFxuICAgIG1vbnRoc1Nob3J0IDogJ3hhbi5fZmViLl9tYXIuX2Fici5fbWFpLl94dcOxLl94dWwuX2Fnby5fc2V0Ll9vdXQuX25vdi5fZGVjLicuc3BsaXQoJ18nKSxcbiAgICBtb250aHNQYXJzZUV4YWN0OiB0cnVlLFxuICAgIHdlZWtkYXlzIDogJ2RvbWluZ29fbHVuc19tYXJ0ZXNfbcOpcmNvcmVzX3hvdmVzX3ZlbnJlc19zw6FiYWRvJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzU2hvcnQgOiAnZG9tLl9sdW4uX21hci5fbcOpci5feG92Ll92ZW4uX3PDoWIuJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzTWluIDogJ2RvX2x1X21hX23DqV94b192ZV9zw6EnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgTFQgOiAnSDptbScsXG4gICAgICAgIExUUyA6ICdIOm1tOnNzJyxcbiAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgTEwgOiAnRCBbZGVdIE1NTU0gW2RlXSBZWVlZJyxcbiAgICAgICAgTExMIDogJ0QgW2RlXSBNTU1NIFtkZV0gWVlZWSBIOm1tJyxcbiAgICAgICAgTExMTCA6ICdkZGRkLCBEIFtkZV0gTU1NTSBbZGVdIFlZWVkgSDptbSdcbiAgICB9LFxuICAgIGNhbGVuZGFyIDoge1xuICAgICAgICBzYW1lRGF5IDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuICdbaG94ZSAnICsgKCh0aGlzLmhvdXJzKCkgIT09IDEpID8gJ8OhcycgOiAnw6EnKSArICddIExUJztcbiAgICAgICAgfSxcbiAgICAgICAgbmV4dERheSA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiAnW21hw7HDoSAnICsgKCh0aGlzLmhvdXJzKCkgIT09IDEpID8gJ8OhcycgOiAnw6EnKSArICddIExUJztcbiAgICAgICAgfSxcbiAgICAgICAgbmV4dFdlZWsgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gJ2RkZGQgWycgKyAoKHRoaXMuaG91cnMoKSAhPT0gMSkgPyAnw6FzJyA6ICdhJykgKyAnXSBMVCc7XG4gICAgICAgIH0sXG4gICAgICAgIGxhc3REYXkgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gJ1tvbnRlICcgKyAoKHRoaXMuaG91cnMoKSAhPT0gMSkgPyAnw6EnIDogJ2EnKSArICddIExUJztcbiAgICAgICAgfSxcbiAgICAgICAgbGFzdFdlZWsgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gJ1tvXSBkZGRkIFtwYXNhZG8gJyArICgodGhpcy5ob3VycygpICE9PSAxKSA/ICfDoXMnIDogJ2EnKSArICddIExUJztcbiAgICAgICAgfSxcbiAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICB9LFxuICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgZnV0dXJlIDogZnVuY3Rpb24gKHN0cikge1xuICAgICAgICAgICAgaWYgKHN0ci5pbmRleE9mKCd1bicpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICduJyArIHN0cjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAnZW4gJyArIHN0cjtcbiAgICAgICAgfSxcbiAgICAgICAgcGFzdCA6ICdoYWkgJXMnLFxuICAgICAgICBzIDogJ3VucyBzZWd1bmRvcycsXG4gICAgICAgIG0gOiAndW4gbWludXRvJyxcbiAgICAgICAgbW0gOiAnJWQgbWludXRvcycsXG4gICAgICAgIGggOiAndW5oYSBob3JhJyxcbiAgICAgICAgaGggOiAnJWQgaG9yYXMnLFxuICAgICAgICBkIDogJ3VuIGTDrWEnLFxuICAgICAgICBkZCA6ICclZCBkw61hcycsXG4gICAgICAgIE0gOiAndW4gbWVzJyxcbiAgICAgICAgTU0gOiAnJWQgbWVzZXMnLFxuICAgICAgICB5IDogJ3VuIGFubycsXG4gICAgICAgIHl5IDogJyVkIGFub3MnXG4gICAgfSxcbiAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlIDogL1xcZHsxLDJ9wrovLFxuICAgIG9yZGluYWwgOiAnJWTCuicsXG4gICAgd2VlayA6IHtcbiAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICB9XG59KTtcblxucmV0dXJuIGdsO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEtvbmthbmkgTGF0aW4gc2NyaXB0IFtnb20tbGF0bl1cbi8vISBhdXRob3IgOiBUaGUgRGlzY292ZXJlciA6IGh0dHBzOi8vZ2l0aHViLmNvbS9XaWtpRGlzY292ZXJlclxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbmZ1bmN0aW9uIHByb2Nlc3NSZWxhdGl2ZVRpbWUobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXksIGlzRnV0dXJlKSB7XG4gICAgdmFyIGZvcm1hdCA9IHtcbiAgICAgICAgJ3MnOiBbJ3Rob2RkZSBzZWNvbmRhbmltJywgJ3Rob2RkZSBzZWNvbmQnXSxcbiAgICAgICAgJ20nOiBbJ2VrYSBtaW50YW4nLCAnZWsgbWludXRlJ10sXG4gICAgICAgICdtbSc6IFtudW1iZXIgKyAnIG1pbnRhbmltJywgbnVtYmVyICsgJyBtaW50YW0nXSxcbiAgICAgICAgJ2gnOiBbJ2VrYSBob3JhbicsICdlayBob3InXSxcbiAgICAgICAgJ2hoJzogW251bWJlciArICcgaG9yYW5pbScsIG51bWJlciArICcgaG9yJ10sXG4gICAgICAgICdkJzogWydla2EgZGlzYW4nLCAnZWsgZGlzJ10sXG4gICAgICAgICdkZCc6IFtudW1iZXIgKyAnIGRpc2FuaW0nLCBudW1iZXIgKyAnIGRpcyddLFxuICAgICAgICAnTSc6IFsnZWthIG1ob2luZWFuJywgJ2VrIG1ob2lubyddLFxuICAgICAgICAnTU0nOiBbbnVtYmVyICsgJyBtaG9pbmVhbmltJywgbnVtYmVyICsgJyBtaG9pbmUnXSxcbiAgICAgICAgJ3knOiBbJ2VrYSB2b3JzYW4nLCAnZWsgdm9yb3MnXSxcbiAgICAgICAgJ3l5JzogW251bWJlciArICcgdm9yc2FuaW0nLCBudW1iZXIgKyAnIHZvcnNhbSddXG4gICAgfTtcbiAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCA/IGZvcm1hdFtrZXldWzBdIDogZm9ybWF0W2tleV1bMV07XG59XG5cbnZhciBnb21MYXRuID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZ29tLWxhdG4nLCB7XG4gICAgbW9udGhzIDogJ0phbmVyX0ZlYnJlcl9NYXJzX0FicmlsX01haV9KdW5fSnVsYWlfQWdvc3RfU2V0ZW1icl9PdHVicl9Ob3ZlbWJyX0RlemVtYnInLnNwbGl0KCdfJyksXG4gICAgbW9udGhzU2hvcnQgOiAnSmFuLl9GZWIuX01hcnNfQWJyLl9NYWlfSnVuX0p1bC5fQWdvLl9TZXQuX090dS5fTm92Ll9EZXouJy5zcGxpdCgnXycpLFxuICAgIG1vbnRoc1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgIHdlZWtkYXlzIDogJ0FpdGFyX1NvbWFyX01vbmdsbGFyX0J1ZHZhcl9CcmVzdGFyX1N1a3Jhcl9Tb25cXCd2YXInLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNTaG9ydCA6ICdBaXQuX1NvbS5fTW9uLl9CdWQuX0JyZS5fU3VrLl9Tb24uJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzTWluIDogJ0FpX1NtX01vX0J1X0JyX1N1X1NuJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgIExUIDogJ0EgaDptbSBbdmF6dGFdJyxcbiAgICAgICAgTFRTIDogJ0EgaDptbTpzcyBbdmF6dGFdJyxcbiAgICAgICAgTCA6ICdERC1NTS1ZWVlZJyxcbiAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgQSBoOm1tIFt2YXp0YV0nLFxuICAgICAgICBMTExMIDogJ2RkZGQsIE1NTU1bYWNoZWFdIERvLCBZWVlZLCBBIGg6bW0gW3ZhenRhXScsXG4gICAgICAgIGxsbGw6ICdkZGQsIEQgTU1NIFlZWVksIEEgaDptbSBbdmF6dGFdJ1xuICAgIH0sXG4gICAgY2FsZW5kYXIgOiB7XG4gICAgICAgIHNhbWVEYXk6ICdbQWl6XSBMVCcsXG4gICAgICAgIG5leHREYXk6ICdbRmFsZWFtXSBMVCcsXG4gICAgICAgIG5leHRXZWVrOiAnW0lldGEgdG9dIGRkZGRbLF0gTFQnLFxuICAgICAgICBsYXN0RGF5OiAnW0thbF0gTFQnLFxuICAgICAgICBsYXN0V2VlazogJ1tGYXRsb10gZGRkZFssXSBMVCcsXG4gICAgICAgIHNhbWVFbHNlOiAnTCdcbiAgICB9LFxuICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgZnV0dXJlIDogJyVzJyxcbiAgICAgICAgcGFzdCA6ICclcyBhZGltJyxcbiAgICAgICAgcyA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgIG0gOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICBtbSA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgIGggOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICBoaCA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgIGQgOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICBkZCA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgIE0gOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICBNTSA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgIHkgOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICB5eSA6IHByb2Nlc3NSZWxhdGl2ZVRpbWVcbiAgICB9LFxuICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2UgOiAvXFxkezEsMn0oZXIpLyxcbiAgICBvcmRpbmFsIDogZnVuY3Rpb24gKG51bWJlciwgcGVyaW9kKSB7XG4gICAgICAgIHN3aXRjaCAocGVyaW9kKSB7XG4gICAgICAgICAgICAvLyB0aGUgb3JkaW5hbCAnZXInIG9ubHkgYXBwbGllcyB0byBkYXkgb2YgdGhlIG1vbnRoXG4gICAgICAgICAgICBjYXNlICdEJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJ2VyJztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBjYXNlICdNJzpcbiAgICAgICAgICAgIGNhc2UgJ1EnOlxuICAgICAgICAgICAgY2FzZSAnREREJzpcbiAgICAgICAgICAgIGNhc2UgJ2QnOlxuICAgICAgICAgICAgY2FzZSAndyc6XG4gICAgICAgICAgICBjYXNlICdXJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyO1xuICAgICAgICB9XG4gICAgfSxcbiAgICB3ZWVrIDoge1xuICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgZG95IDogNCAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgIH0sXG4gICAgbWVyaWRpZW1QYXJzZTogL3JhdGl8c29rYWxsaXxkb25wYXJhbXxzYW5qZS8sXG4gICAgbWVyaWRpZW1Ib3VyIDogZnVuY3Rpb24gKGhvdXIsIG1lcmlkaWVtKSB7XG4gICAgICAgIGlmIChob3VyID09PSAxMikge1xuICAgICAgICAgICAgaG91ciA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lcmlkaWVtID09PSAncmF0aScpIHtcbiAgICAgICAgICAgIHJldHVybiBob3VyIDwgNCA/IGhvdXIgOiBob3VyICsgMTI7XG4gICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICdzb2thbGxpJykge1xuICAgICAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICdkb25wYXJhbScpIHtcbiAgICAgICAgICAgIHJldHVybiBob3VyID4gMTIgPyBob3VyIDogaG91ciArIDEyO1xuICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAnc2FuamUnKSB7XG4gICAgICAgICAgICByZXR1cm4gaG91ciArIDEyO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBtZXJpZGllbSA6IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgaWYgKGhvdXIgPCA0KSB7XG4gICAgICAgICAgICByZXR1cm4gJ3JhdGknO1xuICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxMikge1xuICAgICAgICAgICAgcmV0dXJuICdzb2thbGxpJztcbiAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTYpIHtcbiAgICAgICAgICAgIHJldHVybiAnZG9ucGFyYW0nO1xuICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAyMCkge1xuICAgICAgICAgICAgcmV0dXJuICdzYW5qZSc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gJ3JhdGknO1xuICAgICAgICB9XG4gICAgfVxufSk7XG5cbnJldHVybiBnb21MYXRuO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEhlYnJldyBbaGVdXG4vLyEgYXV0aG9yIDogVG9tZXIgQ29oZW4gOiBodHRwczovL2dpdGh1Yi5jb20vdG9tZXJcbi8vISBhdXRob3IgOiBNb3NoZSBTaW1hbnRvdiA6IGh0dHBzOi8vZ2l0aHViLmNvbS9EZXZlbG9wbWVudElMXG4vLyEgYXV0aG9yIDogVGFsIEF0ZXIgOiBodHRwczovL2dpdGh1Yi5jb20vVGFsQXRlclxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciBoZSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2hlJywge1xuICAgIG1vbnRocyA6ICfXmdeg15XXkNeoX9ek15HXqNeV15DXqF/Xnteo16Vf15DXpNeo15nXnF/XnteQ15lf15nXldeg15lf15nXldec15lf15DXldeS15XXodeYX9eh16TXmNee15HXqF/XkNeV16fXmNeV15HXqF/XoNeV15HXnteR16hf15PXptee15HXqCcuc3BsaXQoJ18nKSxcbiAgICBtb250aHNTaG9ydCA6ICfXmdeg15XXs1/XpNeR16jXs1/Xnteo16Vf15DXpNeo17Nf157XkNeZX9eZ15XXoNeZX9eZ15XXnNeZX9eQ15XXktezX9eh16TXmNezX9eQ15XXp9ezX9eg15XXkdezX9eT16bXntezJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzIDogJ9eo15DXqdeV159f16nXoNeZX9ep15zXmdep15lf16jXkdeZ16LXmV/Xl9ee15nXqdeZX9ep15nXqdeZX9ep15HXqicuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1Nob3J0IDogJ9eQ17Nf15HXs1/XktezX9eT17Nf15TXs1/XldezX9ep17MnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNNaW4gOiAn15Bf15Ff15Jf15Nf15Rf15Vf16knLnNwbGl0KCdfJyksXG4gICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgTEwgOiAnRCBb15FdTU1NTSBZWVlZJyxcbiAgICAgICAgTExMIDogJ0QgW9eRXU1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIExMTEwgOiAnZGRkZCwgRCBb15FdTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgbCA6ICdEL00vWVlZWScsXG4gICAgICAgIGxsIDogJ0QgTU1NIFlZWVknLFxuICAgICAgICBsbGwgOiAnRCBNTU0gWVlZWSBISDptbScsXG4gICAgICAgIGxsbGwgOiAnZGRkLCBEIE1NTSBZWVlZIEhIOm1tJ1xuICAgIH0sXG4gICAgY2FsZW5kYXIgOiB7XG4gICAgICAgIHNhbWVEYXkgOiAnW9eU15nXldedINeR1r5dTFQnLFxuICAgICAgICBuZXh0RGF5IDogJ1vXnteX16gg15HWvl1MVCcsXG4gICAgICAgIG5leHRXZWVrIDogJ2RkZGQgW9eR16nXoteUXSBMVCcsXG4gICAgICAgIGxhc3REYXkgOiAnW9eQ16rXnteV15wg15HWvl1MVCcsXG4gICAgICAgIGxhc3RXZWVrIDogJ1vXkdeZ15XXnV0gZGRkZCBb15TXkNeX16jXldefINeR16nXoteUXSBMVCcsXG4gICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgfSxcbiAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgIGZ1dHVyZSA6ICfXkdei15XXkyAlcycsXG4gICAgICAgIHBhc3QgOiAn15zXpNeg15kgJXMnLFxuICAgICAgICBzIDogJ9ee16HXpNeoINep16DXmdeV16onLFxuICAgICAgICBtIDogJ9eT16fXlCcsXG4gICAgICAgIG1tIDogJyVkINeT16fXldeqJyxcbiAgICAgICAgaCA6ICfXqdei15QnLFxuICAgICAgICBoaCA6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIGlmIChudW1iZXIgPT09IDIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9ep16LXqteZ15nXnSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJyDXqdei15XXqic7XG4gICAgICAgIH0sXG4gICAgICAgIGQgOiAn15nXldedJyxcbiAgICAgICAgZGQgOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICBpZiAobnVtYmVyID09PSAyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfXmdeV157XmdeZ150nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICcg15nXnteZ150nO1xuICAgICAgICB9LFxuICAgICAgICBNIDogJ9eX15XXk9epJyxcbiAgICAgICAgTU0gOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICBpZiAobnVtYmVyID09PSAyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfXl9eV15PXqdeZ15nXnSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJyDXl9eV15PXqdeZ150nO1xuICAgICAgICB9LFxuICAgICAgICB5IDogJ9ep16DXlCcsXG4gICAgICAgIHl5IDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgaWYgKG51bWJlciA9PT0gMikge1xuICAgICAgICAgICAgICAgIHJldHVybiAn16nXoNeq15nXmdedJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobnVtYmVyICUgMTAgPT09IDAgJiYgbnVtYmVyICE9PSAxMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnINep16DXlCc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJyDXqdeg15nXnSc7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIG1lcmlkaWVtUGFyc2U6IC/XkNeX15RcItemfNec16TXoNeUXCLXpnzXkNeX16jXmSDXlNem15TXqNeZ15nXnXzXnNek16DXmSDXlNem15TXqNeZ15nXnXzXnNek16DXldeqINeR15XXp9eofNeR15HXlden16h815HXoteo15EvaSxcbiAgICBpc1BNIDogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgIHJldHVybiAvXijXkNeX15RcItemfNeQ15fXqNeZINeU16bXlNeo15nXmdedfNeR16LXqNeRKSQvLnRlc3QoaW5wdXQpO1xuICAgIH0sXG4gICAgbWVyaWRpZW0gOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgIGlmIChob3VyIDwgNSkge1xuICAgICAgICAgICAgcmV0dXJuICfXnNek16DXldeqINeR15XXp9eoJztcbiAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTApIHtcbiAgICAgICAgICAgIHJldHVybiAn15HXkdeV16fXqCc7XG4gICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDEyKSB7XG4gICAgICAgICAgICByZXR1cm4gaXNMb3dlciA/ICfXnNek16DXlFwi16YnIDogJ9ec16TXoNeZINeU16bXlNeo15nXmdedJztcbiAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTgpIHtcbiAgICAgICAgICAgIHJldHVybiBpc0xvd2VyID8gJ9eQ15fXlFwi16YnIDogJ9eQ15fXqNeZINeU16bXlNeo15nXmdedJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAn15HXoteo15EnO1xuICAgICAgICB9XG4gICAgfVxufSk7XG5cbnJldHVybiBoZTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBIaW5kaSBbaGldXG4vLyEgYXV0aG9yIDogTWF5YW5rIFNpbmdoYWwgOiBodHRwczovL2dpdGh1Yi5jb20vbWF5YW5rc2luZ2hhbFxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciBzeW1ib2xNYXAgPSB7XG4gICAgJzEnOiAn4KWnJyxcbiAgICAnMic6ICfgpagnLFxuICAgICczJzogJ+ClqScsXG4gICAgJzQnOiAn4KWqJyxcbiAgICAnNSc6ICfgpasnLFxuICAgICc2JzogJ+ClrCcsXG4gICAgJzcnOiAn4KWtJyxcbiAgICAnOCc6ICfgpa4nLFxuICAgICc5JzogJ+ClrycsXG4gICAgJzAnOiAn4KWmJ1xufTtcbnZhciBudW1iZXJNYXAgPSB7XG4gICAgJ+Clpyc6ICcxJyxcbiAgICAn4KWoJzogJzInLFxuICAgICfgpaknOiAnMycsXG4gICAgJ+Clqic6ICc0JyxcbiAgICAn4KWrJzogJzUnLFxuICAgICfgpawnOiAnNicsXG4gICAgJ+ClrSc6ICc3JyxcbiAgICAn4KWuJzogJzgnLFxuICAgICfgpa8nOiAnOScsXG4gICAgJ+Clpic6ICcwJ1xufTtcblxudmFyIGhpID0gbW9tZW50LmRlZmluZUxvY2FsZSgnaGknLCB7XG4gICAgbW9udGhzIDogJ+CknOCkqOCkteCksOClgF/gpKvgpLzgpLDgpLXgpLDgpYBf4KSu4KS+4KSw4KWN4KSaX+CkheCkquCljeCksOCliOCksl/gpK7gpIhf4KSc4KWC4KSoX+CknOClgeCksuCkvuCkiF/gpIXgpJfgpLjgpY3gpKRf4KS44KS/4KSk4KSu4KWN4KSs4KSwX+CkheCkleCljeCkn+ClguCkrOCksF/gpKjgpLXgpK7gpY3gpKzgpLBf4KSm4KS/4KS44KSu4KWN4KSs4KSwJy5zcGxpdCgnXycpLFxuICAgIG1vbnRoc1Nob3J0IDogJ+CknOCkqC5f4KSr4KS84KSwLl/gpK7gpL7gpLDgpY3gpJpf4KSF4KSq4KWN4KSw4KWILl/gpK7gpIhf4KSc4KWC4KSoX+CknOClgeCksi5f4KSF4KSXLl/gpLjgpL/gpKQuX+CkheCkleCljeCkn+Clgi5f4KSo4KS1Ll/gpKbgpL/gpLguJy5zcGxpdCgnXycpLFxuICAgIG1vbnRoc1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgd2Vla2RheXMgOiAn4KSw4KS14KS/4KS14KS+4KSwX+CkuOCli+CkruCkteCkvuCksF/gpK7gpILgpJfgpLLgpLXgpL7gpLBf4KSs4KWB4KSn4KS14KS+4KSwX+Ckl+ClgeCksOClguCkteCkvuCksF/gpLbgpYHgpJXgpY3gpLDgpLXgpL7gpLBf4KS24KSo4KS/4KS14KS+4KSwJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzU2hvcnQgOiAn4KSw4KS14KS/X+CkuOCli+Ckrl/gpK7gpILgpJfgpLJf4KSs4KWB4KSnX+Ckl+ClgeCksOClgl/gpLbgpYHgpJXgpY3gpLBf4KS24KSo4KS/Jy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzTWluIDogJ+CksF/gpLjgpYtf4KSu4KSCX+CkrOClgV/gpJfgpYFf4KS24KWBX+Ckticuc3BsaXQoJ18nKSxcbiAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgTFQgOiAnQSBoOm1tIOCkrOCknOClhycsXG4gICAgICAgIExUUyA6ICdBIGg6bW06c3Mg4KSs4KSc4KWHJyxcbiAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVksIEEgaDptbSDgpKzgpJzgpYcnLFxuICAgICAgICBMTExMIDogJ2RkZGQsIEQgTU1NTSBZWVlZLCBBIGg6bW0g4KSs4KSc4KWHJ1xuICAgIH0sXG4gICAgY2FsZW5kYXIgOiB7XG4gICAgICAgIHNhbWVEYXkgOiAnW+CkhuCknF0gTFQnLFxuICAgICAgICBuZXh0RGF5IDogJ1vgpJXgpLJdIExUJyxcbiAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCwgTFQnLFxuICAgICAgICBsYXN0RGF5IDogJ1vgpJXgpLJdIExUJyxcbiAgICAgICAgbGFzdFdlZWsgOiAnW+CkquCkv+Ckm+CksuClh10gZGRkZCwgTFQnLFxuICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgIH0sXG4gICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICBmdXR1cmUgOiAnJXMg4KSu4KWH4KSCJyxcbiAgICAgICAgcGFzdCA6ICclcyDgpKrgpLngpLLgpYcnLFxuICAgICAgICBzIDogJ+CkleClgeCkmyDgpLngpYAg4KSV4KWN4KS34KSjJyxcbiAgICAgICAgbSA6ICfgpI/gpJUg4KSu4KS/4KSo4KSfJyxcbiAgICAgICAgbW0gOiAnJWQg4KSu4KS/4KSo4KSfJyxcbiAgICAgICAgaCA6ICfgpI/gpJUg4KSY4KSC4KSf4KS+JyxcbiAgICAgICAgaGggOiAnJWQg4KSY4KSC4KSf4KWHJyxcbiAgICAgICAgZCA6ICfgpI/gpJUg4KSm4KS/4KSoJyxcbiAgICAgICAgZGQgOiAnJWQg4KSm4KS/4KSoJyxcbiAgICAgICAgTSA6ICfgpI/gpJUg4KSu4KS54KWA4KSo4KWHJyxcbiAgICAgICAgTU0gOiAnJWQg4KSu4KS54KWA4KSo4KWHJyxcbiAgICAgICAgeSA6ICfgpI/gpJUg4KS14KSw4KWN4KS3JyxcbiAgICAgICAgeXkgOiAnJWQg4KS14KSw4KWN4KS3J1xuICAgIH0sXG4gICAgcHJlcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9b4KWn4KWo4KWp4KWq4KWr4KWs4KWt4KWu4KWv4KWmXS9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgIHJldHVybiBudW1iZXJNYXBbbWF0Y2hdO1xuICAgICAgICB9KTtcbiAgICB9LFxuICAgIHBvc3Rmb3JtYXQ6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9cXGQvZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICByZXR1cm4gc3ltYm9sTWFwW21hdGNoXTtcbiAgICAgICAgfSk7XG4gICAgfSxcbiAgICAvLyBIaW5kaSBub3RhdGlvbiBmb3IgbWVyaWRpZW1zIGFyZSBxdWl0ZSBmdXp6eSBpbiBwcmFjdGljZS4gV2hpbGUgdGhlcmUgZXhpc3RzXG4gICAgLy8gYSByaWdpZCBub3Rpb24gb2YgYSAnUGFoYXInIGl0IGlzIG5vdCB1c2VkIGFzIHJpZ2lkbHkgaW4gbW9kZXJuIEhpbmRpLlxuICAgIG1lcmlkaWVtUGFyc2U6IC/gpLDgpL7gpKR84KS44KWB4KSs4KS5fOCkpuCli+CkquCkueCksHzgpLbgpL7gpK4vLFxuICAgIG1lcmlkaWVtSG91ciA6IGZ1bmN0aW9uIChob3VyLCBtZXJpZGllbSkge1xuICAgICAgICBpZiAoaG91ciA9PT0gMTIpIHtcbiAgICAgICAgICAgIGhvdXIgPSAwO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXJpZGllbSA9PT0gJ+CksOCkvuCkpCcpIHtcbiAgICAgICAgICAgIHJldHVybiBob3VyIDwgNCA/IGhvdXIgOiBob3VyICsgMTI7XG4gICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfgpLjgpYHgpKzgpLknKSB7XG4gICAgICAgICAgICByZXR1cm4gaG91cjtcbiAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ+CkpuCli+CkquCkueCksCcpIHtcbiAgICAgICAgICAgIHJldHVybiBob3VyID49IDEwID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ+CktuCkvuCkricpIHtcbiAgICAgICAgICAgIHJldHVybiBob3VyICsgMTI7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIG1lcmlkaWVtIDogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICBpZiAoaG91ciA8IDQpIHtcbiAgICAgICAgICAgIHJldHVybiAn4KSw4KS+4KSkJztcbiAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTApIHtcbiAgICAgICAgICAgIHJldHVybiAn4KS44KWB4KSs4KS5JztcbiAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTcpIHtcbiAgICAgICAgICAgIHJldHVybiAn4KSm4KWL4KSq4KS54KSwJztcbiAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMjApIHtcbiAgICAgICAgICAgIHJldHVybiAn4KS24KS+4KSuJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAn4KSw4KS+4KSkJztcbiAgICAgICAgfVxuICAgIH0sXG4gICAgd2VlayA6IHtcbiAgICAgICAgZG93IDogMCwgLy8gU3VuZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgIGRveSA6IDYgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDFzdCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICB9XG59KTtcblxucmV0dXJuIGhpO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IENyb2F0aWFuIFtocl1cbi8vISBhdXRob3IgOiBCb2phbiBNYXJrb3ZpxIcgOiBodHRwczovL2dpdGh1Yi5jb20vYm1hcmtvdmljXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuZnVuY3Rpb24gdHJhbnNsYXRlKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5KSB7XG4gICAgdmFyIHJlc3VsdCA9IG51bWJlciArICcgJztcbiAgICBzd2l0Y2ggKGtleSkge1xuICAgICAgICBjYXNlICdtJzpcbiAgICAgICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4ID8gJ2plZG5hIG1pbnV0YScgOiAnamVkbmUgbWludXRlJztcbiAgICAgICAgY2FzZSAnbW0nOlxuICAgICAgICAgICAgaWYgKG51bWJlciA9PT0gMSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnbWludXRhJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobnVtYmVyID09PSAyIHx8IG51bWJlciA9PT0gMyB8fCBudW1iZXIgPT09IDQpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ21pbnV0ZSc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnbWludXRhJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIGNhc2UgJ2gnOlxuICAgICAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggPyAnamVkYW4gc2F0JyA6ICdqZWRub2cgc2F0YSc7XG4gICAgICAgIGNhc2UgJ2hoJzpcbiAgICAgICAgICAgIGlmIChudW1iZXIgPT09IDEpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ3NhdCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG51bWJlciA9PT0gMiB8fCBudW1iZXIgPT09IDMgfHwgbnVtYmVyID09PSA0KSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdzYXRhJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdzYXRpJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIGNhc2UgJ2RkJzpcbiAgICAgICAgICAgIGlmIChudW1iZXIgPT09IDEpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ2Rhbic7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnZGFuYSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICBjYXNlICdNTSc6XG4gICAgICAgICAgICBpZiAobnVtYmVyID09PSAxKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdtamVzZWMnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChudW1iZXIgPT09IDIgfHwgbnVtYmVyID09PSAzIHx8IG51bWJlciA9PT0gNCkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnbWplc2VjYSc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnbWplc2VjaSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICBjYXNlICd5eSc6XG4gICAgICAgICAgICBpZiAobnVtYmVyID09PSAxKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdnb2RpbmEnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChudW1iZXIgPT09IDIgfHwgbnVtYmVyID09PSAzIHx8IG51bWJlciA9PT0gNCkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnZ29kaW5lJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdnb2RpbmEnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59XG5cbnZhciBociA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2hyJywge1xuICAgIG1vbnRocyA6IHtcbiAgICAgICAgZm9ybWF0OiAnc2lqZcSNbmphX3ZlbGphxI1lX2/FvnVqa2FfdHJhdm5qYV9zdmlibmphX2xpcG5qYV9zcnBuamFfa29sb3ZvemFfcnVqbmFfbGlzdG9wYWRhX3N0dWRlbm9nYV9wcm9zaW5jYScuc3BsaXQoJ18nKSxcbiAgICAgICAgc3RhbmRhbG9uZTogJ3NpamXEjWFual92ZWxqYcSNYV9vxb51amFrX3RyYXZhbmpfc3ZpYmFual9saXBhbmpfc3JwYW5qX2tvbG92b3pfcnVqYW5fbGlzdG9wYWRfc3R1ZGVuaV9wcm9zaW5hYycuc3BsaXQoJ18nKVxuICAgIH0sXG4gICAgbW9udGhzU2hvcnQgOiAnc2lqLl92ZWxqLl9vxb51Ll90cmEuX3N2aS5fbGlwLl9zcnAuX2tvbC5fcnVqLl9saXMuX3N0dS5fcHJvLicuc3BsaXQoJ18nKSxcbiAgICBtb250aHNQYXJzZUV4YWN0OiB0cnVlLFxuICAgIHdlZWtkYXlzIDogJ25lZGplbGphX3BvbmVkamVsamFrX3V0b3Jha19zcmlqZWRhX8SNZXR2cnRha19wZXRha19zdWJvdGEnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNTaG9ydCA6ICduZWQuX3Bvbi5fdXRvLl9zcmkuX8SNZXQuX3BldC5fc3ViLicuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c01pbiA6ICduZV9wb191dF9zcl/EjWVfcGVfc3UnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgTFQgOiAnSDptbScsXG4gICAgICAgIExUUyA6ICdIOm1tOnNzJyxcbiAgICAgICAgTCA6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgTEwgOiAnRC4gTU1NTSBZWVlZJyxcbiAgICAgICAgTExMIDogJ0QuIE1NTU0gWVlZWSBIOm1tJyxcbiAgICAgICAgTExMTCA6ICdkZGRkLCBELiBNTU1NIFlZWVkgSDptbSdcbiAgICB9LFxuICAgIGNhbGVuZGFyIDoge1xuICAgICAgICBzYW1lRGF5ICA6ICdbZGFuYXMgdV0gTFQnLFxuICAgICAgICBuZXh0RGF5ICA6ICdbc3V0cmEgdV0gTFQnLFxuICAgICAgICBuZXh0V2VlayA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHN3aXRjaCAodGhpcy5kYXkoKSkge1xuICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbdV0gW25lZGplbGp1XSBbdV0gTFQnO1xuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbdV0gW3NyaWplZHVdIFt1XSBMVCc7XG4gICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t1XSBbc3Vib3R1XSBbdV0gTFQnO1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbdV0gZGRkZCBbdV0gTFQnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBsYXN0RGF5ICA6ICdbanXEjWVyIHVdIExUJyxcbiAgICAgICAgbGFzdFdlZWsgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHRoaXMuZGF5KCkpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1twcm/FoWx1XSBkZGRkIFt1XSBMVCc7XG4gICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1twcm/FoWxlXSBbc3Vib3RlXSBbdV0gTFQnO1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbcHJvxaFsaV0gZGRkZCBbdV0gTFQnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgIH0sXG4gICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICBmdXR1cmUgOiAnemEgJXMnLFxuICAgICAgICBwYXN0ICAgOiAncHJpamUgJXMnLFxuICAgICAgICBzICAgICAgOiAncGFyIHNla3VuZGknLFxuICAgICAgICBtICAgICAgOiB0cmFuc2xhdGUsXG4gICAgICAgIG1tICAgICA6IHRyYW5zbGF0ZSxcbiAgICAgICAgaCAgICAgIDogdHJhbnNsYXRlLFxuICAgICAgICBoaCAgICAgOiB0cmFuc2xhdGUsXG4gICAgICAgIGQgICAgICA6ICdkYW4nLFxuICAgICAgICBkZCAgICAgOiB0cmFuc2xhdGUsXG4gICAgICAgIE0gICAgICA6ICdtamVzZWMnLFxuICAgICAgICBNTSAgICAgOiB0cmFuc2xhdGUsXG4gICAgICAgIHkgICAgICA6ICdnb2RpbnUnLFxuICAgICAgICB5eSAgICAgOiB0cmFuc2xhdGVcbiAgICB9LFxuICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfVxcLi8sXG4gICAgb3JkaW5hbCA6ICclZC4nLFxuICAgIHdlZWsgOiB7XG4gICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICBkb3kgOiA3ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiAxc3QgaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgfVxufSk7XG5cbnJldHVybiBocjtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBIdW5nYXJpYW4gW2h1XVxuLy8hIGF1dGhvciA6IEFkYW0gQnJ1bm5lciA6IGh0dHBzOi8vZ2l0aHViLmNvbS9hZGFtYnJ1bm5lclxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciB3ZWVrRW5kaW5ncyA9ICd2YXPDoXJuYXAgaMOpdGbFkW4ga2VkZGVuIHN6ZXJkw6FuIGNzw7x0w7ZydMO2a8O2biBww6ludGVrZW4gc3pvbWJhdG9uJy5zcGxpdCgnICcpO1xuZnVuY3Rpb24gdHJhbnNsYXRlKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5LCBpc0Z1dHVyZSkge1xuICAgIHZhciBudW0gPSBudW1iZXIsXG4gICAgICAgIHN1ZmZpeDtcbiAgICBzd2l0Y2ggKGtleSkge1xuICAgICAgICBjYXNlICdzJzpcbiAgICAgICAgICAgIHJldHVybiAoaXNGdXR1cmUgfHwgd2l0aG91dFN1ZmZpeCkgPyAnbsOpaMOhbnkgbcOhc29kcGVyYycgOiAnbsOpaMOhbnkgbcOhc29kcGVyY2UnO1xuICAgICAgICBjYXNlICdtJzpcbiAgICAgICAgICAgIHJldHVybiAnZWd5JyArIChpc0Z1dHVyZSB8fCB3aXRob3V0U3VmZml4ID8gJyBwZXJjJyA6ICcgcGVyY2UnKTtcbiAgICAgICAgY2FzZSAnbW0nOlxuICAgICAgICAgICAgcmV0dXJuIG51bSArIChpc0Z1dHVyZSB8fCB3aXRob3V0U3VmZml4ID8gJyBwZXJjJyA6ICcgcGVyY2UnKTtcbiAgICAgICAgY2FzZSAnaCc6XG4gICAgICAgICAgICByZXR1cm4gJ2VneScgKyAoaXNGdXR1cmUgfHwgd2l0aG91dFN1ZmZpeCA/ICcgw7NyYScgOiAnIMOzcsOhamEnKTtcbiAgICAgICAgY2FzZSAnaGgnOlxuICAgICAgICAgICAgcmV0dXJuIG51bSArIChpc0Z1dHVyZSB8fCB3aXRob3V0U3VmZml4ID8gJyDDs3JhJyA6ICcgw7Nyw6FqYScpO1xuICAgICAgICBjYXNlICdkJzpcbiAgICAgICAgICAgIHJldHVybiAnZWd5JyArIChpc0Z1dHVyZSB8fCB3aXRob3V0U3VmZml4ID8gJyBuYXAnIDogJyBuYXBqYScpO1xuICAgICAgICBjYXNlICdkZCc6XG4gICAgICAgICAgICByZXR1cm4gbnVtICsgKGlzRnV0dXJlIHx8IHdpdGhvdXRTdWZmaXggPyAnIG5hcCcgOiAnIG5hcGphJyk7XG4gICAgICAgIGNhc2UgJ00nOlxuICAgICAgICAgICAgcmV0dXJuICdlZ3knICsgKGlzRnV0dXJlIHx8IHdpdGhvdXRTdWZmaXggPyAnIGjDs25hcCcgOiAnIGjDs25hcGphJyk7XG4gICAgICAgIGNhc2UgJ01NJzpcbiAgICAgICAgICAgIHJldHVybiBudW0gKyAoaXNGdXR1cmUgfHwgd2l0aG91dFN1ZmZpeCA/ICcgaMOzbmFwJyA6ICcgaMOzbmFwamEnKTtcbiAgICAgICAgY2FzZSAneSc6XG4gICAgICAgICAgICByZXR1cm4gJ2VneScgKyAoaXNGdXR1cmUgfHwgd2l0aG91dFN1ZmZpeCA/ICcgw6l2JyA6ICcgw6l2ZScpO1xuICAgICAgICBjYXNlICd5eSc6XG4gICAgICAgICAgICByZXR1cm4gbnVtICsgKGlzRnV0dXJlIHx8IHdpdGhvdXRTdWZmaXggPyAnIMOpdicgOiAnIMOpdmUnKTtcbiAgICB9XG4gICAgcmV0dXJuICcnO1xufVxuZnVuY3Rpb24gd2Vlayhpc0Z1dHVyZSkge1xuICAgIHJldHVybiAoaXNGdXR1cmUgPyAnJyA6ICdbbcO6bHRdICcpICsgJ1snICsgd2Vla0VuZGluZ3NbdGhpcy5kYXkoKV0gKyAnXSBMVFsta29yXSc7XG59XG5cbnZhciBodSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2h1Jywge1xuICAgIG1vbnRocyA6ICdqYW51w6FyX2ZlYnJ1w6FyX23DoXJjaXVzX8OhcHJpbGlzX23DoWp1c19qw7puaXVzX2rDumxpdXNfYXVndXN6dHVzX3N6ZXB0ZW1iZXJfb2t0w7NiZXJfbm92ZW1iZXJfZGVjZW1iZXInLnNwbGl0KCdfJyksXG4gICAgbW9udGhzU2hvcnQgOiAnamFuX2ZlYl9tw6FyY1/DoXByX23DoWpfasO6bl9qw7psX2F1Z19zemVwdF9va3Rfbm92X2RlYycuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5cyA6ICd2YXPDoXJuYXBfaMOpdGbFkV9rZWRkX3N6ZXJkYV9jc8O8dMO2cnTDtmtfcMOpbnRla19zem9tYmF0Jy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzU2hvcnQgOiAndmFzX2jDqXRfa2VkZF9zemVfY3PDvHRfcMOpbl9zem8nLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNNaW4gOiAndl9oX2tfc3plX2NzX3Bfc3pvJy5zcGxpdCgnXycpLFxuICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICBMVCA6ICdIOm1tJyxcbiAgICAgICAgTFRTIDogJ0g6bW06c3MnLFxuICAgICAgICBMIDogJ1lZWVkuTU0uREQuJyxcbiAgICAgICAgTEwgOiAnWVlZWS4gTU1NTSBELicsXG4gICAgICAgIExMTCA6ICdZWVlZLiBNTU1NIEQuIEg6bW0nLFxuICAgICAgICBMTExMIDogJ1lZWVkuIE1NTU0gRC4sIGRkZGQgSDptbSdcbiAgICB9LFxuICAgIG1lcmlkaWVtUGFyc2U6IC9kZXxkdS9pLFxuICAgIGlzUE06IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICByZXR1cm4gaW5wdXQuY2hhckF0KDEpLnRvTG93ZXJDYXNlKCkgPT09ICd1JztcbiAgICB9LFxuICAgIG1lcmlkaWVtIDogZnVuY3Rpb24gKGhvdXJzLCBtaW51dGVzLCBpc0xvd2VyKSB7XG4gICAgICAgIGlmIChob3VycyA8IDEyKSB7XG4gICAgICAgICAgICByZXR1cm4gaXNMb3dlciA9PT0gdHJ1ZSA/ICdkZScgOiAnREUnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGlzTG93ZXIgPT09IHRydWUgPyAnZHUnIDogJ0RVJztcbiAgICAgICAgfVxuICAgIH0sXG4gICAgY2FsZW5kYXIgOiB7XG4gICAgICAgIHNhbWVEYXkgOiAnW21hXSBMVFsta29yXScsXG4gICAgICAgIG5leHREYXkgOiAnW2hvbG5hcF0gTFRbLWtvcl0nLFxuICAgICAgICBuZXh0V2VlayA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB3ZWVrLmNhbGwodGhpcywgdHJ1ZSk7XG4gICAgICAgIH0sXG4gICAgICAgIGxhc3REYXkgOiAnW3RlZ25hcF0gTFRbLWtvcl0nLFxuICAgICAgICBsYXN0V2VlayA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB3ZWVrLmNhbGwodGhpcywgZmFsc2UpO1xuICAgICAgICB9LFxuICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgIH0sXG4gICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICBmdXR1cmUgOiAnJXMgbcO6bHZhJyxcbiAgICAgICAgcGFzdCA6ICclcycsXG4gICAgICAgIHMgOiB0cmFuc2xhdGUsXG4gICAgICAgIG0gOiB0cmFuc2xhdGUsXG4gICAgICAgIG1tIDogdHJhbnNsYXRlLFxuICAgICAgICBoIDogdHJhbnNsYXRlLFxuICAgICAgICBoaCA6IHRyYW5zbGF0ZSxcbiAgICAgICAgZCA6IHRyYW5zbGF0ZSxcbiAgICAgICAgZGQgOiB0cmFuc2xhdGUsXG4gICAgICAgIE0gOiB0cmFuc2xhdGUsXG4gICAgICAgIE1NIDogdHJhbnNsYXRlLFxuICAgICAgICB5IDogdHJhbnNsYXRlLFxuICAgICAgICB5eSA6IHRyYW5zbGF0ZVxuICAgIH0sXG4gICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9XFwuLyxcbiAgICBvcmRpbmFsIDogJyVkLicsXG4gICAgd2VlayA6IHtcbiAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICB9XG59KTtcblxucmV0dXJuIGh1O1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEFybWVuaWFuIFtoeS1hbV1cbi8vISBhdXRob3IgOiBBcm1lbmRhcmFieWFuIDogaHR0cHM6Ly9naXRodWIuY29tL2FybWVuZGFyYWJ5YW5cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG52YXIgaHlBbSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2h5LWFtJywge1xuICAgIG1vbnRocyA6IHtcbiAgICAgICAgZm9ybWF0OiAn1bDVuNaC1bbVvtWh1oDVq1/Wg9Wl1b/WgNW+1aHWgNWrX9W01aHWgNW/1atf1aHVutaA1avVrNWrX9W01aHVtdWr1b3Vq1/VsNW41oLVttWr1b3Vq1/VsNW41oLVrNWr1b3Vq1/WhdWj1bjVvdW/1bjVvdWrX9W91aXVutW/1aXVtNWi1aXWgNWrX9Ww1bjVr9W/1aXVtNWi1aXWgNWrX9W21bjVtdWl1bTVotWl1oDVq1/VpNWl1a/Vv9Wl1bTVotWl1oDVqycuc3BsaXQoJ18nKSxcbiAgICAgICAgc3RhbmRhbG9uZTogJ9Ww1bjWgtW21b7VodaAX9aD1aXVv9aA1b7VodaAX9W01aHWgNW/X9Wh1brWgNWr1axf1bTVodW11avVvV/VsNW41oLVttWr1b1f1bDVuNaC1azVq9W9X9aF1aPVuNW91b/VuNW9X9W91aXVutW/1aXVtNWi1aXWgF/VsNW41a/Vv9Wl1bTVotWl1oBf1bbVuNW11aXVtNWi1aXWgF/VpNWl1a/Vv9Wl1bTVotWl1oAnLnNwbGl0KCdfJylcbiAgICB9LFxuICAgIG1vbnRoc1Nob3J0IDogJ9Ww1bbVvl/Wg9W/1oBf1bTWgNW/X9Wh1brWgF/VtNW11b1f1bDVttW9X9Ww1azVvV/WhdWj1b1f1b3VutW/X9Ww1a/Vv1/VttW01aJf1aTVr9W/Jy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzIDogJ9Wv1avWgNWh1a/Vq1/VpdaA1a/VuNaC1bfVodWi1anVq1/VpdaA1aXWhNW31aHVotWp1atf1bnVuNaA1aXWhNW31aHVotWp1atf1bDVq9W21aPVt9Wh1aLVqdWrX9W41oLWgNWi1aHVqV/Vt9Wh1aLVodWpJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzU2hvcnQgOiAn1a/WgNWvX9Wl1oDVr1/VpdaA1oRf1bnWgNaEX9Ww1bbVo1/VuNaC1oDVol/Vt9Wi1aknLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNNaW4gOiAn1a/WgNWvX9Wl1oDVr1/VpdaA1oRf1bnWgNaEX9Ww1bbVo1/VuNaC1oDVol/Vt9Wi1aknLnNwbGl0KCdfJyksXG4gICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgTCA6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVkg1akuJyxcbiAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZINWpLiwgSEg6bW0nLFxuICAgICAgICBMTExMIDogJ2RkZGQsIEQgTU1NTSBZWVlZINWpLiwgSEg6bW0nXG4gICAgfSxcbiAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgc2FtZURheTogJ1vVodW11b3WhdaAXSBMVCcsXG4gICAgICAgIG5leHREYXk6ICdb1b7VodWy1ahdIExUJyxcbiAgICAgICAgbGFzdERheTogJ1vVpdaA1aXVr10gTFQnLFxuICAgICAgICBuZXh0V2VlazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuICdkZGRkIFvWhdaA1agg1arVodW01ahdIExUJztcbiAgICAgICAgfSxcbiAgICAgICAgbGFzdFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiAnW9Wh1bbWgdWh1a5dIGRkZGQgW9aF1oDVqCDVqtWh1bTVqF0gTFQnO1xuICAgICAgICB9LFxuICAgICAgICBzYW1lRWxzZTogJ0wnXG4gICAgfSxcbiAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgIGZ1dHVyZSA6ICclcyDVsNWl1b/VuCcsXG4gICAgICAgIHBhc3QgOiAnJXMg1aHVvNWh1bsnLFxuICAgICAgICBzIDogJ9W01asg1oTVodW21asg1b7VodW11oDVr9W11aHVticsXG4gICAgICAgIG0gOiAn1oDVuNW61aUnLFxuICAgICAgICBtbSA6ICclZCDWgNW41brVpScsXG4gICAgICAgIGggOiAn1arVodW0JyxcbiAgICAgICAgaGggOiAnJWQg1arVodW0JyxcbiAgICAgICAgZCA6ICfWhdaAJyxcbiAgICAgICAgZGQgOiAnJWQg1oXWgCcsXG4gICAgICAgIE0gOiAn1aHVtNWr1b0nLFxuICAgICAgICBNTSA6ICclZCDVodW01avVvScsXG4gICAgICAgIHkgOiAn1b/VodaA1asnLFxuICAgICAgICB5eSA6ICclZCDVv9Wh1oDVqydcbiAgICB9LFxuICAgIG1lcmlkaWVtUGFyc2U6IC/Vo9Wr1bfVpdaA1b7VoXzVodW81aHVvtW41b/VvtWhfNaB1aXWgNWl1a/VvtWhfNWl1oDVpdWv1bjVtdWh1bYvLFxuICAgIGlzUE06IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICByZXR1cm4gL14o1oHVpdaA1aXVr9W+1aF81aXWgNWl1a/VuNW11aHVtikkLy50ZXN0KGlucHV0KTtcbiAgICB9LFxuICAgIG1lcmlkaWVtIDogZnVuY3Rpb24gKGhvdXIpIHtcbiAgICAgICAgaWYgKGhvdXIgPCA0KSB7XG4gICAgICAgICAgICByZXR1cm4gJ9Wj1avVt9Wl1oDVvtWhJztcbiAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTIpIHtcbiAgICAgICAgICAgIHJldHVybiAn1aHVvNWh1b7VuNW/1b7VoSc7XG4gICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDE3KSB7XG4gICAgICAgICAgICByZXR1cm4gJ9aB1aXWgNWl1a/VvtWhJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAn1aXWgNWl1a/VuNW11aHVtic7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfXxcXGR7MSwyfS0o1avVtnzWgNWkKS8sXG4gICAgb3JkaW5hbDogZnVuY3Rpb24gKG51bWJlciwgcGVyaW9kKSB7XG4gICAgICAgIHN3aXRjaCAocGVyaW9kKSB7XG4gICAgICAgICAgICBjYXNlICdEREQnOlxuICAgICAgICAgICAgY2FzZSAndyc6XG4gICAgICAgICAgICBjYXNlICdXJzpcbiAgICAgICAgICAgIGNhc2UgJ0RERG8nOlxuICAgICAgICAgICAgICAgIGlmIChudW1iZXIgPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICct1avVtic7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnLdaA1aQnO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyO1xuICAgICAgICB9XG4gICAgfSxcbiAgICB3ZWVrIDoge1xuICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgZG95IDogNyAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gMXN0IGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgIH1cbn0pO1xuXG5yZXR1cm4gaHlBbTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBJbmRvbmVzaWFuIFtpZF1cbi8vISBhdXRob3IgOiBNb2hhbW1hZCBTYXRyaW8gVXRvbW8gOiBodHRwczovL2dpdGh1Yi5jb20vdHlva1xuLy8hIHJlZmVyZW5jZTogaHR0cDovL2lkLndpa2lzb3VyY2Uub3JnL3dpa2kvUGVkb21hbl9VbXVtX0VqYWFuX0JhaGFzYV9JbmRvbmVzaWFfeWFuZ19EaXNlbXB1cm5ha2FuXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxudmFyIGlkID0gbW9tZW50LmRlZmluZUxvY2FsZSgnaWQnLCB7XG4gICAgbW9udGhzIDogJ0phbnVhcmlfRmVicnVhcmlfTWFyZXRfQXByaWxfTWVpX0p1bmlfSnVsaV9BZ3VzdHVzX1NlcHRlbWJlcl9Pa3RvYmVyX05vdmVtYmVyX0Rlc2VtYmVyJy5zcGxpdCgnXycpLFxuICAgIG1vbnRoc1Nob3J0IDogJ0phbl9GZWJfTWFyX0Fwcl9NZWlfSnVuX0p1bF9BZ3NfU2VwX09rdF9Ob3ZfRGVzJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzIDogJ01pbmdndV9TZW5pbl9TZWxhc2FfUmFidV9LYW1pc19KdW1hdF9TYWJ0dScuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1Nob3J0IDogJ01pbl9TZW5fU2VsX1JhYl9LYW1fSnVtX1NhYicuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c01pbiA6ICdNZ19Tbl9TbF9SYl9LbV9KbV9TYicuc3BsaXQoJ18nKSxcbiAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgTFQgOiAnSEgubW0nLFxuICAgICAgICBMVFMgOiAnSEgubW0uc3MnLFxuICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBbcHVrdWxdIEhILm1tJyxcbiAgICAgICAgTExMTCA6ICdkZGRkLCBEIE1NTU0gWVlZWSBbcHVrdWxdIEhILm1tJ1xuICAgIH0sXG4gICAgbWVyaWRpZW1QYXJzZTogL3BhZ2l8c2lhbmd8c29yZXxtYWxhbS8sXG4gICAgbWVyaWRpZW1Ib3VyIDogZnVuY3Rpb24gKGhvdXIsIG1lcmlkaWVtKSB7XG4gICAgICAgIGlmIChob3VyID09PSAxMikge1xuICAgICAgICAgICAgaG91ciA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lcmlkaWVtID09PSAncGFnaScpIHtcbiAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAnc2lhbmcnKSB7XG4gICAgICAgICAgICByZXR1cm4gaG91ciA+PSAxMSA/IGhvdXIgOiBob3VyICsgMTI7XG4gICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICdzb3JlJyB8fCBtZXJpZGllbSA9PT0gJ21hbGFtJykge1xuICAgICAgICAgICAgcmV0dXJuIGhvdXIgKyAxMjtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgbWVyaWRpZW0gOiBmdW5jdGlvbiAoaG91cnMsIG1pbnV0ZXMsIGlzTG93ZXIpIHtcbiAgICAgICAgaWYgKGhvdXJzIDwgMTEpIHtcbiAgICAgICAgICAgIHJldHVybiAncGFnaSc7XG4gICAgICAgIH0gZWxzZSBpZiAoaG91cnMgPCAxNSkge1xuICAgICAgICAgICAgcmV0dXJuICdzaWFuZyc7XG4gICAgICAgIH0gZWxzZSBpZiAoaG91cnMgPCAxOSkge1xuICAgICAgICAgICAgcmV0dXJuICdzb3JlJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAnbWFsYW0nO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgc2FtZURheSA6ICdbSGFyaSBpbmkgcHVrdWxdIExUJyxcbiAgICAgICAgbmV4dERheSA6ICdbQmVzb2sgcHVrdWxdIExUJyxcbiAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCBbcHVrdWxdIExUJyxcbiAgICAgICAgbGFzdERheSA6ICdbS2VtYXJpbiBwdWt1bF0gTFQnLFxuICAgICAgICBsYXN0V2VlayA6ICdkZGRkIFtsYWx1IHB1a3VsXSBMVCcsXG4gICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgfSxcbiAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgIGZ1dHVyZSA6ICdkYWxhbSAlcycsXG4gICAgICAgIHBhc3QgOiAnJXMgeWFuZyBsYWx1JyxcbiAgICAgICAgcyA6ICdiZWJlcmFwYSBkZXRpaycsXG4gICAgICAgIG0gOiAnc2VtZW5pdCcsXG4gICAgICAgIG1tIDogJyVkIG1lbml0JyxcbiAgICAgICAgaCA6ICdzZWphbScsXG4gICAgICAgIGhoIDogJyVkIGphbScsXG4gICAgICAgIGQgOiAnc2VoYXJpJyxcbiAgICAgICAgZGQgOiAnJWQgaGFyaScsXG4gICAgICAgIE0gOiAnc2VidWxhbicsXG4gICAgICAgIE1NIDogJyVkIGJ1bGFuJyxcbiAgICAgICAgeSA6ICdzZXRhaHVuJyxcbiAgICAgICAgeXkgOiAnJWQgdGFodW4nXG4gICAgfSxcbiAgICB3ZWVrIDoge1xuICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgZG95IDogNyAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gMXN0IGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgIH1cbn0pO1xuXG5yZXR1cm4gaWQ7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogSWNlbGFuZGljIFtpc11cbi8vISBhdXRob3IgOiBIaW5yaWsgw5ZybiBTaWd1csOwc3NvbiA6IGh0dHBzOi8vZ2l0aHViLmNvbS9oaW5yaWtcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG5mdW5jdGlvbiBwbHVyYWwobikge1xuICAgIGlmIChuICUgMTAwID09PSAxMSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKG4gJSAxMCA9PT0gMSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuZnVuY3Rpb24gdHJhbnNsYXRlKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5LCBpc0Z1dHVyZSkge1xuICAgIHZhciByZXN1bHQgPSBudW1iZXIgKyAnICc7XG4gICAgc3dpdGNoIChrZXkpIHtcbiAgICAgICAgY2FzZSAncyc6XG4gICAgICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICdub2trcmFyIHNla8O6bmR1cicgOiAnbm9ra3J1bSBzZWvDum5kdW0nO1xuICAgICAgICBjYXNlICdtJzpcbiAgICAgICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4ID8gJ23DrW7DunRhJyA6ICdtw61uw7p0dSc7XG4gICAgICAgIGNhc2UgJ21tJzpcbiAgICAgICAgICAgIGlmIChwbHVyYWwobnVtYmVyKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAod2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICdtw61uw7p0dXInIDogJ23DrW7DunR1bScpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh3aXRob3V0U3VmZml4KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArICdtw61uw7p0YSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgJ23DrW7DunR1JztcbiAgICAgICAgY2FzZSAnaGgnOlxuICAgICAgICAgICAgaWYgKHBsdXJhbChudW1iZXIpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArICh3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ2tsdWtrdXN0dW5kaXInIDogJ2tsdWtrdXN0dW5kdW0nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAna2x1a2t1c3R1bmQnO1xuICAgICAgICBjYXNlICdkJzpcbiAgICAgICAgICAgIGlmICh3aXRob3V0U3VmZml4KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdkYWd1cic7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gaXNGdXR1cmUgPyAnZGFnJyA6ICdkZWdpJztcbiAgICAgICAgY2FzZSAnZGQnOlxuICAgICAgICAgICAgaWYgKHBsdXJhbChudW1iZXIpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHdpdGhvdXRTdWZmaXgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArICdkYWdhcic7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAoaXNGdXR1cmUgPyAnZGFnYScgOiAnZMO2Z3VtJyk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHdpdGhvdXRTdWZmaXgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgJ2RhZ3VyJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAoaXNGdXR1cmUgPyAnZGFnJyA6ICdkZWdpJyk7XG4gICAgICAgIGNhc2UgJ00nOlxuICAgICAgICAgICAgaWYgKHdpdGhvdXRTdWZmaXgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ23DoW51w7B1cic7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gaXNGdXR1cmUgPyAnbcOhbnXDsCcgOiAnbcOhbnXDsGknO1xuICAgICAgICBjYXNlICdNTSc6XG4gICAgICAgICAgICBpZiAocGx1cmFsKG51bWJlcikpIHtcbiAgICAgICAgICAgICAgICBpZiAod2l0aG91dFN1ZmZpeCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgJ23DoW51w7Bpcic7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAoaXNGdXR1cmUgPyAnbcOhbnXDsGknIDogJ23DoW51w7B1bScpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh3aXRob3V0U3VmZml4KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArICdtw6FudcOwdXInO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArIChpc0Z1dHVyZSA/ICdtw6FudcOwJyA6ICdtw6FudcOwaScpO1xuICAgICAgICBjYXNlICd5JzpcbiAgICAgICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ8OhcicgOiAnw6FyaSc7XG4gICAgICAgIGNhc2UgJ3l5JzpcbiAgICAgICAgICAgIGlmIChwbHVyYWwobnVtYmVyKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAod2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICfDoXInIDogJ8OhcnVtJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgKHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAnw6FyJyA6ICfDoXJpJyk7XG4gICAgfVxufVxuXG52YXIgaXMgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdpcycsIHtcbiAgICBtb250aHMgOiAnamFuw7phcl9mZWJyw7phcl9tYXJzX2FwcsOtbF9tYcOtX2rDum7DrV9qw7psw61fw6Fnw7pzdF9zZXB0ZW1iZXJfb2t0w7NiZXJfbsOzdmVtYmVyX2Rlc2VtYmVyJy5zcGxpdCgnXycpLFxuICAgIG1vbnRoc1Nob3J0IDogJ2phbl9mZWJfbWFyX2Fwcl9tYcOtX2rDum5fasO6bF/DoWfDul9zZXBfb2t0X27Ds3ZfZGVzJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzIDogJ3N1bm51ZGFndXJfbcOhbnVkYWd1cl/DvnJpw7BqdWRhZ3VyX21pw7B2aWt1ZGFndXJfZmltbXR1ZGFndXJfZsO2c3R1ZGFndXJfbGF1Z2FyZGFndXInLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNTaG9ydCA6ICdzdW5fbcOhbl/DvnJpX21pw7BfZmltX2bDtnNfbGF1Jy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzTWluIDogJ1N1X03DoV/DnnJfTWlfRmlfRsO2X0xhJy5zcGxpdCgnXycpLFxuICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICBMVCA6ICdIOm1tJyxcbiAgICAgICAgTFRTIDogJ0g6bW06c3MnLFxuICAgICAgICBMIDogJ0RELk1NLllZWVknLFxuICAgICAgICBMTCA6ICdELiBNTU1NIFlZWVknLFxuICAgICAgICBMTEwgOiAnRC4gTU1NTSBZWVlZIFtrbC5dIEg6bW0nLFxuICAgICAgICBMTExMIDogJ2RkZGQsIEQuIE1NTU0gWVlZWSBba2wuXSBIOm1tJ1xuICAgIH0sXG4gICAgY2FsZW5kYXIgOiB7XG4gICAgICAgIHNhbWVEYXkgOiAnW8OtIGRhZyBrbC5dIExUJyxcbiAgICAgICAgbmV4dERheSA6ICdbw6EgbW9yZ3VuIGtsLl0gTFQnLFxuICAgICAgICBuZXh0V2VlayA6ICdkZGRkIFtrbC5dIExUJyxcbiAgICAgICAgbGFzdERheSA6ICdbw60gZ8OmciBrbC5dIExUJyxcbiAgICAgICAgbGFzdFdlZWsgOiAnW3PDrcOwYXN0YV0gZGRkZCBba2wuXSBMVCcsXG4gICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgfSxcbiAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgIGZ1dHVyZSA6ICdlZnRpciAlcycsXG4gICAgICAgIHBhc3QgOiAnZnlyaXIgJXMgc8Otw7BhbicsXG4gICAgICAgIHMgOiB0cmFuc2xhdGUsXG4gICAgICAgIG0gOiB0cmFuc2xhdGUsXG4gICAgICAgIG1tIDogdHJhbnNsYXRlLFxuICAgICAgICBoIDogJ2tsdWtrdXN0dW5kJyxcbiAgICAgICAgaGggOiB0cmFuc2xhdGUsXG4gICAgICAgIGQgOiB0cmFuc2xhdGUsXG4gICAgICAgIGRkIDogdHJhbnNsYXRlLFxuICAgICAgICBNIDogdHJhbnNsYXRlLFxuICAgICAgICBNTSA6IHRyYW5zbGF0ZSxcbiAgICAgICAgeSA6IHRyYW5zbGF0ZSxcbiAgICAgICAgeXkgOiB0cmFuc2xhdGVcbiAgICB9LFxuICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfVxcLi8sXG4gICAgb3JkaW5hbCA6ICclZC4nLFxuICAgIHdlZWsgOiB7XG4gICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgfVxufSk7XG5cbnJldHVybiBpcztcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBJdGFsaWFuIFtpdF1cbi8vISBhdXRob3IgOiBMb3JlbnpvIDogaHR0cHM6Ly9naXRodWIuY29tL2FsaWVtXG4vLyEgYXV0aG9yOiBNYXR0aWEgTGFyZW50aXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9ub3N0YWxnaWF6XG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxudmFyIGl0ID0gbW9tZW50LmRlZmluZUxvY2FsZSgnaXQnLCB7XG4gICAgbW9udGhzIDogJ2dlbm5haW9fZmViYnJhaW9fbWFyem9fYXByaWxlX21hZ2dpb19naXVnbm9fbHVnbGlvX2Fnb3N0b19zZXR0ZW1icmVfb3R0b2JyZV9ub3ZlbWJyZV9kaWNlbWJyZScuc3BsaXQoJ18nKSxcbiAgICBtb250aHNTaG9ydCA6ICdnZW5fZmViX21hcl9hcHJfbWFnX2dpdV9sdWdfYWdvX3NldF9vdHRfbm92X2RpYycuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5cyA6ICdkb21lbmljYV9sdW5lZMOsX21hcnRlZMOsX21lcmNvbGVkw6xfZ2lvdmVkw6xfdmVuZXJkw6xfc2FiYXRvJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzU2hvcnQgOiAnZG9tX2x1bl9tYXJfbWVyX2dpb192ZW5fc2FiJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzTWluIDogJ2RvX2x1X21hX21lX2dpX3ZlX3NhJy5zcGxpdCgnXycpLFxuICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgTExMTCA6ICdkZGRkLCBEIE1NTU0gWVlZWSBISDptbSdcbiAgICB9LFxuICAgIGNhbGVuZGFyIDoge1xuICAgICAgICBzYW1lRGF5OiAnW09nZ2kgYWxsZV0gTFQnLFxuICAgICAgICBuZXh0RGF5OiAnW0RvbWFuaSBhbGxlXSBMVCcsXG4gICAgICAgIG5leHRXZWVrOiAnZGRkZCBbYWxsZV0gTFQnLFxuICAgICAgICBsYXN0RGF5OiAnW0llcmkgYWxsZV0gTFQnLFxuICAgICAgICBsYXN0V2VlazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgc3dpdGNoICh0aGlzLmRheSgpKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1tsYSBzY29yc2FdIGRkZGQgW2FsbGVdIExUJztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1tsbyBzY29yc29dIGRkZGQgW2FsbGVdIExUJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgc2FtZUVsc2U6ICdMJ1xuICAgIH0sXG4gICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICBmdXR1cmUgOiBmdW5jdGlvbiAocykge1xuICAgICAgICAgICAgcmV0dXJuICgoL15bMC05XS4rJC8pLnRlc3QocykgPyAndHJhJyA6ICdpbicpICsgJyAnICsgcztcbiAgICAgICAgfSxcbiAgICAgICAgcGFzdCA6ICclcyBmYScsXG4gICAgICAgIHMgOiAnYWxjdW5pIHNlY29uZGknLFxuICAgICAgICBtIDogJ3VuIG1pbnV0bycsXG4gICAgICAgIG1tIDogJyVkIG1pbnV0aScsXG4gICAgICAgIGggOiAndW5cXCdvcmEnLFxuICAgICAgICBoaCA6ICclZCBvcmUnLFxuICAgICAgICBkIDogJ3VuIGdpb3JubycsXG4gICAgICAgIGRkIDogJyVkIGdpb3JuaScsXG4gICAgICAgIE0gOiAndW4gbWVzZScsXG4gICAgICAgIE1NIDogJyVkIG1lc2knLFxuICAgICAgICB5IDogJ3VuIGFubm8nLFxuICAgICAgICB5eSA6ICclZCBhbm5pJ1xuICAgIH0sXG4gICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZSA6IC9cXGR7MSwyfcK6LyxcbiAgICBvcmRpbmFsOiAnJWTCuicsXG4gICAgd2VlayA6IHtcbiAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICB9XG59KTtcblxucmV0dXJuIGl0O1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEphcGFuZXNlIFtqYV1cbi8vISBhdXRob3IgOiBMSSBMb25nIDogaHR0cHM6Ly9naXRodWIuY29tL2JhcnlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciBqYSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2phJywge1xuICAgIG1vbnRocyA6ICcx5pyIXzLmnIhfM+aciF805pyIXzXmnIhfNuaciF835pyIXzjmnIhfOeaciF8xMOaciF8xMeaciF8xMuaciCcuc3BsaXQoJ18nKSxcbiAgICBtb250aHNTaG9ydCA6ICcx5pyIXzLmnIhfM+aciF805pyIXzXmnIhfNuaciF835pyIXzjmnIhfOeaciF8xMOaciF8xMeaciF8xMuaciCcuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5cyA6ICfml6Xmm5zml6Vf5pyI5puc5pelX+eBq+abnOaXpV/msLTmm5zml6Vf5pyo5puc5pelX+mHkeabnOaXpV/lnJ/mm5zml6UnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNTaG9ydCA6ICfml6Vf5pyIX+eBq1/msLRf5pyoX+mHkV/lnJ8nLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNNaW4gOiAn5pelX+aciF/ngatf5rC0X+acqF/ph5Ff5ZyfJy5zcGxpdCgnXycpLFxuICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgIEwgOiAnWVlZWS9NTS9ERCcsXG4gICAgICAgIExMIDogJ1lZWVnlubRN5pyIROaXpScsXG4gICAgICAgIExMTCA6ICdZWVlZ5bm0TeaciETml6UgSEg6bW0nLFxuICAgICAgICBMTExMIDogJ1lZWVnlubRN5pyIROaXpSBISDptbSBkZGRkJyxcbiAgICAgICAgbCA6ICdZWVlZL01NL0REJyxcbiAgICAgICAgbGwgOiAnWVlZWeW5tE3mnIhE5pelJyxcbiAgICAgICAgbGxsIDogJ1lZWVnlubRN5pyIROaXpSBISDptbScsXG4gICAgICAgIGxsbGwgOiAnWVlZWeW5tE3mnIhE5pelIEhIOm1tIGRkZGQnXG4gICAgfSxcbiAgICBtZXJpZGllbVBhcnNlOiAv5Y2I5YmNfOWNiOW+jC9pLFxuICAgIGlzUE0gOiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0ID09PSAn5Y2I5b6MJztcbiAgICB9LFxuICAgIG1lcmlkaWVtIDogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICBpZiAoaG91ciA8IDEyKSB7XG4gICAgICAgICAgICByZXR1cm4gJ+WNiOWJjSc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gJ+WNiOW+jCc7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIGNhbGVuZGFyIDoge1xuICAgICAgICBzYW1lRGF5IDogJ1vku4rml6VdIExUJyxcbiAgICAgICAgbmV4dERheSA6ICdb5piO5pelXSBMVCcsXG4gICAgICAgIG5leHRXZWVrIDogJ1vmnaXpgLFdZGRkZCBMVCcsXG4gICAgICAgIGxhc3REYXkgOiAnW+aYqOaXpV0gTFQnLFxuICAgICAgICBsYXN0V2VlayA6ICdb5YmN6YCxXWRkZGQgTFQnLFxuICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgIH0sXG4gICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZSA6IC9cXGR7MSwyfeaXpS8sXG4gICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIsIHBlcmlvZCkge1xuICAgICAgICBzd2l0Y2ggKHBlcmlvZCkge1xuICAgICAgICAgICAgY2FzZSAnZCc6XG4gICAgICAgICAgICBjYXNlICdEJzpcbiAgICAgICAgICAgIGNhc2UgJ0RERCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICfml6UnO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyO1xuICAgICAgICB9XG4gICAgfSxcbiAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgIGZ1dHVyZSA6ICclc+W+jCcsXG4gICAgICAgIHBhc3QgOiAnJXPliY0nLFxuICAgICAgICBzIDogJ+aVsOenkicsXG4gICAgICAgIG0gOiAnMeWIhicsXG4gICAgICAgIG1tIDogJyVk5YiGJyxcbiAgICAgICAgaCA6ICcx5pmC6ZaTJyxcbiAgICAgICAgaGggOiAnJWTmmYLplpMnLFxuICAgICAgICBkIDogJzHml6UnLFxuICAgICAgICBkZCA6ICclZOaXpScsXG4gICAgICAgIE0gOiAnMeODtuaciCcsXG4gICAgICAgIE1NIDogJyVk44O25pyIJyxcbiAgICAgICAgeSA6ICcx5bm0JyxcbiAgICAgICAgeXkgOiAnJWTlubQnXG4gICAgfVxufSk7XG5cbnJldHVybiBqYTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBKYXZhbmVzZSBbanZdXG4vLyEgYXV0aG9yIDogUm9ueSBMYW50aXAgOiBodHRwczovL2dpdGh1Yi5jb20vbGFudGlwXG4vLyEgcmVmZXJlbmNlOiBodHRwOi8vanYud2lraXBlZGlhLm9yZy93aWtpL0Jhc2FfSmF3YVxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciBqdiA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2p2Jywge1xuICAgIG1vbnRocyA6ICdKYW51YXJpX0ZlYnJ1YXJpX01hcmV0X0FwcmlsX01laV9KdW5pX0p1bGlfQWd1c3R1c19TZXB0ZW1iZXJfT2t0b2Jlcl9Ob3BlbWJlcl9EZXNlbWJlcicuc3BsaXQoJ18nKSxcbiAgICBtb250aHNTaG9ydCA6ICdKYW5fRmViX01hcl9BcHJfTWVpX0p1bl9KdWxfQWdzX1NlcF9Pa3RfTm9wX0Rlcycuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5cyA6ICdNaW5nZ3VfU2VuZW5fU2Vsb3NvX1JlYnVfS2VtaXNfSmVtdXdhaF9TZXB0dScuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1Nob3J0IDogJ01pbl9TZW5fU2VsX1JlYl9LZW1fSmVtX1NlcCcuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c01pbiA6ICdNZ19Tbl9TbF9SYl9LbV9KbV9TcCcuc3BsaXQoJ18nKSxcbiAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgTFQgOiAnSEgubW0nLFxuICAgICAgICBMVFMgOiAnSEgubW0uc3MnLFxuICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBbcHVrdWxdIEhILm1tJyxcbiAgICAgICAgTExMTCA6ICdkZGRkLCBEIE1NTU0gWVlZWSBbcHVrdWxdIEhILm1tJ1xuICAgIH0sXG4gICAgbWVyaWRpZW1QYXJzZTogL2VuamluZ3xzaXlhbmd8c29udGVufG5kYWx1LyxcbiAgICBtZXJpZGllbUhvdXIgOiBmdW5jdGlvbiAoaG91ciwgbWVyaWRpZW0pIHtcbiAgICAgICAgaWYgKGhvdXIgPT09IDEyKSB7XG4gICAgICAgICAgICBob3VyID0gMDtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVyaWRpZW0gPT09ICdlbmppbmcnKSB7XG4gICAgICAgICAgICByZXR1cm4gaG91cjtcbiAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ3NpeWFuZycpIHtcbiAgICAgICAgICAgIHJldHVybiBob3VyID49IDExID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ3NvbnRlbicgfHwgbWVyaWRpZW0gPT09ICduZGFsdScpIHtcbiAgICAgICAgICAgIHJldHVybiBob3VyICsgMTI7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIG1lcmlkaWVtIDogZnVuY3Rpb24gKGhvdXJzLCBtaW51dGVzLCBpc0xvd2VyKSB7XG4gICAgICAgIGlmIChob3VycyA8IDExKSB7XG4gICAgICAgICAgICByZXR1cm4gJ2VuamluZyc7XG4gICAgICAgIH0gZWxzZSBpZiAoaG91cnMgPCAxNSkge1xuICAgICAgICAgICAgcmV0dXJuICdzaXlhbmcnO1xuICAgICAgICB9IGVsc2UgaWYgKGhvdXJzIDwgMTkpIHtcbiAgICAgICAgICAgIHJldHVybiAnc29udGVuJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAnbmRhbHUnO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgc2FtZURheSA6ICdbRGludGVuIHB1bmlrbyBwdWt1bF0gTFQnLFxuICAgICAgICBuZXh0RGF5IDogJ1tNYmVuamFuZyBwdWt1bF0gTFQnLFxuICAgICAgICBuZXh0V2VlayA6ICdkZGRkIFtwdWt1bF0gTFQnLFxuICAgICAgICBsYXN0RGF5IDogJ1tLYWxhIHdpbmdpIHB1a3VsXSBMVCcsXG4gICAgICAgIGxhc3RXZWVrIDogJ2RkZGQgW2tlcGVuZ2tlciBwdWt1bF0gTFQnLFxuICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgIH0sXG4gICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICBmdXR1cmUgOiAnd29udGVuIGluZyAlcycsXG4gICAgICAgIHBhc3QgOiAnJXMgaW5na2FuZyBrZXBlbmdrZXInLFxuICAgICAgICBzIDogJ3Nhd2V0YXdpcyBkZXRpaycsXG4gICAgICAgIG0gOiAnc2V0dW5nZ2FsIG1lbml0JyxcbiAgICAgICAgbW0gOiAnJWQgbWVuaXQnLFxuICAgICAgICBoIDogJ3NldHVuZ2dhbCBqYW0nLFxuICAgICAgICBoaCA6ICclZCBqYW0nLFxuICAgICAgICBkIDogJ3NlZGludGVuJyxcbiAgICAgICAgZGQgOiAnJWQgZGludGVuJyxcbiAgICAgICAgTSA6ICdzZXd1bGFuJyxcbiAgICAgICAgTU0gOiAnJWQgd3VsYW4nLFxuICAgICAgICB5IDogJ3NldGF1bicsXG4gICAgICAgIHl5IDogJyVkIHRhdW4nXG4gICAgfSxcbiAgICB3ZWVrIDoge1xuICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgZG95IDogNyAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gMXN0IGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgIH1cbn0pO1xuXG5yZXR1cm4ganY7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogR2VvcmdpYW4gW2thXVxuLy8hIGF1dGhvciA6IElyYWtsaSBKYW5pYXNodmlsaSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9pcmFrbGktamFuaWFzaHZpbGlcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG52YXIga2EgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdrYScsIHtcbiAgICBtb250aHMgOiB7XG4gICAgICAgIHN0YW5kYWxvbmU6ICfhg5jhg5Dhg5zhg5Xhg5Dhg6Dhg5hf4YOX4YOU4YOR4YOU4YOg4YOV4YOQ4YOa4YOYX+GDm+GDkOGDoOGDouGDmF/hg5Dhg57hg6Dhg5jhg5rhg5hf4YOb4YOQ4YOY4YOh4YOYX+GDmOGDleGDnOGDmOGDoeGDmF/hg5jhg5Xhg5rhg5jhg6Hhg5hf4YOQ4YOS4YOV4YOY4YOh4YOi4YOdX+GDoeGDlOGDpeGDouGDlOGDm+GDkeGDlOGDoOGDmF/hg53hg6Xhg6Lhg53hg5vhg5Hhg5Thg6Dhg5hf4YOc4YOd4YOU4YOb4YOR4YOU4YOg4YOYX+GDk+GDlOGDmeGDlOGDm+GDkeGDlOGDoOGDmCcuc3BsaXQoJ18nKSxcbiAgICAgICAgZm9ybWF0OiAn4YOY4YOQ4YOc4YOV4YOQ4YOg4YOhX+GDl+GDlOGDkeGDlOGDoOGDleGDkOGDmuGDoV/hg5vhg5Dhg6Dhg6Lhg6Ff4YOQ4YOe4YOg4YOY4YOa4YOY4YOhX+GDm+GDkOGDmOGDoeGDoV/hg5jhg5Xhg5zhg5jhg6Hhg6Ff4YOY4YOV4YOa4YOY4YOh4YOhX+GDkOGDkuGDleGDmOGDoeGDouGDoV/hg6Hhg5Thg6Xhg6Lhg5Thg5vhg5Hhg5Thg6Dhg6Ff4YOd4YOl4YOi4YOd4YOb4YOR4YOU4YOg4YOhX+GDnOGDneGDlOGDm+GDkeGDlOGDoOGDoV/hg5Phg5Thg5nhg5Thg5vhg5Hhg5Thg6Dhg6EnLnNwbGl0KCdfJylcbiAgICB9LFxuICAgIG1vbnRoc1Nob3J0IDogJ+GDmOGDkOGDnF/hg5fhg5Thg5Ff4YOb4YOQ4YOgX+GDkOGDnuGDoF/hg5vhg5Dhg5hf4YOY4YOV4YOcX+GDmOGDleGDml/hg5Dhg5Lhg5Vf4YOh4YOU4YOlX+GDneGDpeGDol/hg5zhg53hg5Rf4YOT4YOU4YOZJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzIDoge1xuICAgICAgICBzdGFuZGFsb25lOiAn4YOZ4YOV4YOY4YOg4YOQX+GDneGDoOGDqOGDkOGDkeGDkOGDl+GDmF/hg6Hhg5Dhg5vhg6jhg5Dhg5Hhg5Dhg5fhg5hf4YOd4YOX4YOu4YOo4YOQ4YOR4YOQ4YOX4YOYX+GDruGDo+GDl+GDqOGDkOGDkeGDkOGDl+GDmF/hg57hg5Dhg6Dhg5Dhg6Hhg5nhg5Thg5Xhg5hf4YOo4YOQ4YOR4YOQ4YOX4YOYJy5zcGxpdCgnXycpLFxuICAgICAgICBmb3JtYXQ6ICfhg5nhg5Xhg5jhg6Dhg5Dhg6Ff4YOd4YOg4YOo4YOQ4YOR4YOQ4YOX4YOhX+GDoeGDkOGDm+GDqOGDkOGDkeGDkOGDl+GDoV/hg53hg5fhg67hg6jhg5Dhg5Hhg5Dhg5fhg6Ff4YOu4YOj4YOX4YOo4YOQ4YOR4YOQ4YOX4YOhX+GDnuGDkOGDoOGDkOGDoeGDmeGDlOGDleGDoV/hg6jhg5Dhg5Hhg5Dhg5fhg6EnLnNwbGl0KCdfJyksXG4gICAgICAgIGlzRm9ybWF0OiAvKOGDrOGDmOGDnOGDkHzhg6jhg5Thg5vhg5Phg5Thg5IpL1xuICAgIH0sXG4gICAgd2Vla2RheXNTaG9ydCA6ICfhg5nhg5Xhg5hf4YOd4YOg4YOoX+GDoeGDkOGDm1/hg53hg5fhg65f4YOu4YOj4YOXX+GDnuGDkOGDoF/hg6jhg5Dhg5EnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNNaW4gOiAn4YOZ4YOVX+GDneGDoF/hg6Hhg5Bf4YOd4YOXX+GDruGDo1/hg57hg5Bf4YOo4YOQJy5zcGxpdCgnXycpLFxuICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICBMVCA6ICdoOm1tIEEnLFxuICAgICAgICBMVFMgOiAnaDptbTpzcyBBJyxcbiAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgaDptbSBBJyxcbiAgICAgICAgTExMTCA6ICdkZGRkLCBEIE1NTU0gWVlZWSBoOm1tIEEnXG4gICAgfSxcbiAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgc2FtZURheSA6ICdb4YOT4YOm4YOU4YOhXSBMVFst4YOW4YOUXScsXG4gICAgICAgIG5leHREYXkgOiAnW+GDruGDleGDkOGDml0gTFRbLeGDluGDlF0nLFxuICAgICAgICBsYXN0RGF5IDogJ1vhg5Lhg6Phg6jhg5jhg5xdIExUWy3hg5bhg5RdJyxcbiAgICAgICAgbmV4dFdlZWsgOiAnW+GDqOGDlOGDm+GDk+GDlOGDkl0gZGRkZCBMVFst4YOW4YOUXScsXG4gICAgICAgIGxhc3RXZWVrIDogJ1vhg6zhg5jhg5zhg5BdIGRkZGQgTFQt4YOW4YOUJyxcbiAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICB9LFxuICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgZnV0dXJlIDogZnVuY3Rpb24gKHMpIHtcbiAgICAgICAgICAgIHJldHVybiAoLyjhg6zhg5Dhg5vhg5h84YOs4YOj4YOX4YOYfOGDoeGDkOGDkOGDl+GDmHzhg6zhg5Thg5rhg5gpLykudGVzdChzKSA/XG4gICAgICAgICAgICAgICAgcy5yZXBsYWNlKC/hg5gkLywgJ+GDqOGDmCcpIDpcbiAgICAgICAgICAgICAgICBzICsgJ+GDqOGDmCc7XG4gICAgICAgIH0sXG4gICAgICAgIHBhc3QgOiBmdW5jdGlvbiAocykge1xuICAgICAgICAgICAgaWYgKCgvKOGDrOGDkOGDm+GDmHzhg6zhg6Phg5fhg5h84YOh4YOQ4YOQ4YOX4YOYfOGDk+GDpuGDlHzhg5fhg5Xhg5QpLykudGVzdChzKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzLnJlcGxhY2UoLyjhg5h84YOUKSQvLCAn4YOY4YOhIOGDo+GDmeGDkOGDnCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCgv4YOs4YOU4YOa4YOYLykudGVzdChzKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzLnJlcGxhY2UoL+GDrOGDlOGDmuGDmCQvLCAn4YOs4YOa4YOY4YOhIOGDo+GDmeGDkOGDnCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBzIDogJ+GDoOGDkOGDm+GDk+GDlOGDnOGDmOGDm+GDlCDhg6zhg5Dhg5vhg5gnLFxuICAgICAgICBtIDogJ+GDrOGDo+GDl+GDmCcsXG4gICAgICAgIG1tIDogJyVkIOGDrOGDo+GDl+GDmCcsXG4gICAgICAgIGggOiAn4YOh4YOQ4YOQ4YOX4YOYJyxcbiAgICAgICAgaGggOiAnJWQg4YOh4YOQ4YOQ4YOX4YOYJyxcbiAgICAgICAgZCA6ICfhg5Phg6bhg5QnLFxuICAgICAgICBkZCA6ICclZCDhg5Phg6bhg5QnLFxuICAgICAgICBNIDogJ+GDl+GDleGDlCcsXG4gICAgICAgIE1NIDogJyVkIOGDl+GDleGDlCcsXG4gICAgICAgIHkgOiAn4YOs4YOU4YOa4YOYJyxcbiAgICAgICAgeXkgOiAnJWQg4YOs4YOU4YOa4YOYJ1xuICAgIH0sXG4gICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogLzB8MS3hg5rhg5h84YOb4YOULVxcZHsxLDJ9fFxcZHsxLDJ9LeGDlC8sXG4gICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgaWYgKG51bWJlciA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICAgICAgfVxuICAgICAgICBpZiAobnVtYmVyID09PSAxKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJy3hg5rhg5gnO1xuICAgICAgICB9XG4gICAgICAgIGlmICgobnVtYmVyIDwgMjApIHx8IChudW1iZXIgPD0gMTAwICYmIChudW1iZXIgJSAyMCA9PT0gMCkpIHx8IChudW1iZXIgJSAxMDAgPT09IDApKSB7XG4gICAgICAgICAgICByZXR1cm4gJ+GDm+GDlC0nICsgbnVtYmVyO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudW1iZXIgKyAnLeGDlCc7XG4gICAgfSxcbiAgICB3ZWVrIDoge1xuICAgICAgICBkb3cgOiAxLFxuICAgICAgICBkb3kgOiA3XG4gICAgfVxufSk7XG5cbnJldHVybiBrYTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBLYXpha2ggW2trXVxuLy8hIGF1dGhvcnMgOiBOdXJsYW4gUmFraGltemhhbm92IDogaHR0cHM6Ly9naXRodWIuY29tL251cmxhblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciBzdWZmaXhlcyA9IHtcbiAgICAwOiAnLdGI0ZYnLFxuICAgIDE6ICct0YjRlicsXG4gICAgMjogJy3RiNGWJyxcbiAgICAzOiAnLdGI0ZYnLFxuICAgIDQ6ICct0YjRlicsXG4gICAgNTogJy3RiNGWJyxcbiAgICA2OiAnLdGI0YsnLFxuICAgIDc6ICct0YjRlicsXG4gICAgODogJy3RiNGWJyxcbiAgICA5OiAnLdGI0YsnLFxuICAgIDEwOiAnLdGI0YsnLFxuICAgIDIwOiAnLdGI0YsnLFxuICAgIDMwOiAnLdGI0YsnLFxuICAgIDQwOiAnLdGI0YsnLFxuICAgIDUwOiAnLdGI0ZYnLFxuICAgIDYwOiAnLdGI0YsnLFxuICAgIDcwOiAnLdGI0ZYnLFxuICAgIDgwOiAnLdGI0ZYnLFxuICAgIDkwOiAnLdGI0YsnLFxuICAgIDEwMDogJy3RiNGWJ1xufTtcblxudmFyIGtrID0gbW9tZW50LmRlZmluZUxvY2FsZSgna2snLCB7XG4gICAgbW9udGhzIDogJ9Kb0LDSo9GC0LDRgF/QsNKb0L/QsNC9X9C90LDRg9GA0YvQt1/RgdOZ0YPRltGAX9C80LDQvNGL0YBf0LzQsNGD0YHRi9C8X9GI0ZbQu9C00LVf0YLQsNC80YvQt1/Sm9GL0YDQutKv0LnQtdC6X9Kb0LDQt9Cw0L1f0pvQsNGA0LDRiNCwX9C20LXQu9GC0L7Sm9GB0LDQvScuc3BsaXQoJ18nKSxcbiAgICBtb250aHNTaG9ydCA6ICfSm9Cw0qNf0LDSm9C/X9C90LDRg1/RgdOZ0YNf0LzQsNC8X9C80LDRg1/RiNGW0Ltf0YLQsNC8X9Kb0YvRgF/Sm9Cw0Ldf0pvQsNGAX9C20LXQuycuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5cyA6ICfQttC10LrRgdC10L3QsdGWX9C00q/QudGB0LXQvdCx0ZZf0YHQtdC50YHQtdC90LHRll/RgdOZ0YDRgdC10L3QsdGWX9Cx0LXQudGB0LXQvdCx0ZZf0LbSsdC80LBf0YHQtdC90LHRlicuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1Nob3J0IDogJ9C20LXQul/QtNKv0Llf0YHQtdC5X9GB05nRgF/QsdC10Llf0LbSsdC8X9GB0LXQvScuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c01pbiA6ICfQttC6X9C00Llf0YHQuV/RgdGAX9Cx0Llf0LbQvF/RgdC9Jy5zcGxpdCgnXycpLFxuICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgIEwgOiAnREQuTU0uWVlZWScsXG4gICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgTExMTCA6ICdkZGRkLCBEIE1NTU0gWVlZWSBISDptbSdcbiAgICB9LFxuICAgIGNhbGVuZGFyIDoge1xuICAgICAgICBzYW1lRGF5IDogJ1vQkdKv0LPRltC9INGB0LDSk9Cw0YJdIExUJyxcbiAgICAgICAgbmV4dERheSA6ICdb0JXRgNGC0LXSoyDRgdCw0pPQsNGCXSBMVCcsXG4gICAgICAgIG5leHRXZWVrIDogJ2RkZGQgW9GB0LDSk9Cw0YJdIExUJyxcbiAgICAgICAgbGFzdERheSA6ICdb0JrQtdGI0LUg0YHQsNKT0LDRgl0gTFQnLFxuICAgICAgICBsYXN0V2VlayA6ICdb06jRgtC60LXQvSDQsNC/0YLQsNC90YvSo10gZGRkZCBb0YHQsNKT0LDRgl0gTFQnLFxuICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgIH0sXG4gICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICBmdXR1cmUgOiAnJXMg0ZbRiNGW0L3QtNC1JyxcbiAgICAgICAgcGFzdCA6ICclcyDQsdKx0YDRi9C9JyxcbiAgICAgICAgcyA6ICfQsdGW0YDQvdC10YjQtSDRgdC10LrRg9C90LQnLFxuICAgICAgICBtIDogJ9Cx0ZbRgCDQvNC40L3Rg9GCJyxcbiAgICAgICAgbW0gOiAnJWQg0LzQuNC90YPRgicsXG4gICAgICAgIGggOiAn0LHRltGAINGB0LDSk9Cw0YInLFxuICAgICAgICBoaCA6ICclZCDRgdCw0pPQsNGCJyxcbiAgICAgICAgZCA6ICfQsdGW0YAg0LrSr9C9JyxcbiAgICAgICAgZGQgOiAnJWQg0LrSr9C9JyxcbiAgICAgICAgTSA6ICfQsdGW0YAg0LDQuScsXG4gICAgICAgIE1NIDogJyVkINCw0LknLFxuICAgICAgICB5IDogJ9Cx0ZbRgCDQttGL0LsnLFxuICAgICAgICB5eSA6ICclZCDQttGL0LsnXG4gICAgfSxcbiAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0tKNGI0ZZ80YjRiykvLFxuICAgIG9yZGluYWwgOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgIHZhciBhID0gbnVtYmVyICUgMTAsXG4gICAgICAgICAgICBiID0gbnVtYmVyID49IDEwMCA/IDEwMCA6IG51bGw7XG4gICAgICAgIHJldHVybiBudW1iZXIgKyAoc3VmZml4ZXNbbnVtYmVyXSB8fCBzdWZmaXhlc1thXSB8fCBzdWZmaXhlc1tiXSk7XG4gICAgfSxcbiAgICB3ZWVrIDoge1xuICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgZG95IDogNyAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gMXN0IGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgIH1cbn0pO1xuXG5yZXR1cm4ga2s7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogQ2FtYm9kaWFuIFtrbV1cbi8vISBhdXRob3IgOiBLcnV5IFZhbm5hIDogaHR0cHM6Ly9naXRodWIuY29tL2tydXl2YW5uYVxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciBrbSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2ttJywge1xuICAgIG1vbnRoczogJ+GemOGegOGemuGetl/hnoDhnrvhnpjhn5Lhnpfhn4hf4Z6Y4Z644Z6T4Z62X+GemOGfgeGen+Getl/hnqfhnp/hnpfhnrZf4Z6Y4Z634Z6Q4Z674Z6T4Z62X+GegOGegOGfkuGegOGeiuGetl/hnp/hnrjhnqDhnrZf4Z6A4Z6J4Z+S4Z6J4Z62X+Gej+Geu+Gem+Getl/hnpzhnrfhnoXhn5LhnobhnrfhnoDhnrZf4Z6S4Z+S4Z6T4Z68Jy5zcGxpdCgnXycpLFxuICAgIG1vbnRoc1Nob3J0OiAn4Z6Y4Z6A4Z6a4Z62X+GegOGeu+GemOGfkuGel+GfiF/hnpjhnrjhnpPhnrZf4Z6Y4Z+B4Z6f4Z62X+Gep+Gen+Gel+Getl/hnpjhnrfhnpDhnrvhnpPhnrZf4Z6A4Z6A4Z+S4Z6A4Z6K4Z62X+Gen+GeuOGeoOGetl/hnoDhnonhn5LhnonhnrZf4Z6P4Z674Z6b4Z62X+GenOGet+GeheGfkuGehuGet+GegOGetl/hnpLhn5LhnpPhnrwnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXM6ICfhnqLhnrbhnpHhnrfhno/hn5Lhnplf4Z6F4Z+Q4Z6T4Z+S4Z6RX+GeouGehOGfkuGeguGetuGeml/hnpbhnrvhnpJf4Z6W4Z+S4Z6a4Z6g4Z6f4Z+S4Z6U4Z6P4Z634Z+NX+Gen+Geu+GegOGfkuGeml/hnp/hn4Xhnprhn40nLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNTaG9ydDogJ+GeouGetuGekeGet+Gej+GfkuGemV/hnoXhn5DhnpPhn5LhnpFf4Z6i4Z6E4Z+S4Z6C4Z624Z6aX+GeluGeu+Gekl/hnpbhn5LhnprhnqDhnp/hn5LhnpThno/hnrfhn41f4Z6f4Z674Z6A4Z+S4Z6aX+Gen+GfheGemuGfjScuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c01pbjogJ+GeouGetuGekeGet+Gej+GfkuGemV/hnoXhn5DhnpPhn5LhnpFf4Z6i4Z6E4Z+S4Z6C4Z624Z6aX+GeluGeu+Gekl/hnpbhn5LhnprhnqDhnp/hn5LhnpThno/hnrfhn41f4Z6f4Z674Z6A4Z+S4Z6aX+Gen+GfheGemuGfjScuc3BsaXQoJ18nKSxcbiAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICBMTExMOiAnZGRkZCwgRCBNTU1NIFlZWVkgSEg6bW0nXG4gICAgfSxcbiAgICBjYWxlbmRhcjoge1xuICAgICAgICBzYW1lRGF5OiAnW+GekOGfkuGehOGfg+Gek+GfgeGfhyDhnpjhn4nhn4ThnoRdIExUJyxcbiAgICAgICAgbmV4dERheTogJ1vhnp/hn5LhnqLhn4LhnoAg4Z6Y4Z+J4Z+E4Z6EXSBMVCcsXG4gICAgICAgIG5leHRXZWVrOiAnZGRkZCBb4Z6Y4Z+J4Z+E4Z6EXSBMVCcsXG4gICAgICAgIGxhc3REYXk6ICdb4Z6Y4Z+S4Z6f4Z634Z6b4Z6Y4Z634Z6JIOGemOGfieGfhOGehF0gTFQnLFxuICAgICAgICBsYXN0V2VlazogJ2RkZGQgW+Gen+GelOGfkuGej+GetuGeoOGfjeGemOGeu+Gek10gW+GemOGfieGfhOGehF0gTFQnLFxuICAgICAgICBzYW1lRWxzZTogJ0wnXG4gICAgfSxcbiAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgZnV0dXJlOiAnJXPhnpHhn4Dhno8nLFxuICAgICAgICBwYXN0OiAnJXPhnpjhnrvhnpMnLFxuICAgICAgICBzOiAn4Z6U4Z+J4Z674Z6T4Z+S4Z6Y4Z624Z6T4Z6c4Z634Z6T4Z624Z6R4Z64JyxcbiAgICAgICAgbTogJ+GemOGeveGemeGek+GetuGekeGeuCcsXG4gICAgICAgIG1tOiAnJWQg4Z6T4Z624Z6R4Z64JyxcbiAgICAgICAgaDogJ+GemOGeveGemeGemOGfieGfhOGehCcsXG4gICAgICAgIGhoOiAnJWQg4Z6Y4Z+J4Z+E4Z6EJyxcbiAgICAgICAgZDogJ+GemOGeveGemeGekOGfkuGehOGfgycsXG4gICAgICAgIGRkOiAnJWQg4Z6Q4Z+S4Z6E4Z+DJyxcbiAgICAgICAgTTogJ+GemOGeveGemeGegeGfgicsXG4gICAgICAgIE1NOiAnJWQg4Z6B4Z+CJyxcbiAgICAgICAgeTogJ+GemOGeveGemeGehuGfkuGek+GetuGfhicsXG4gICAgICAgIHl5OiAnJWQg4Z6G4Z+S4Z6T4Z624Z+GJ1xuICAgIH0sXG4gICAgd2Vlazoge1xuICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICBkb3k6IDQgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgIH1cbn0pO1xuXG5yZXR1cm4ga207XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogS2FubmFkYSBba25dXG4vLyEgYXV0aG9yIDogUmFqZWV2IE5haWsgOiBodHRwczovL2dpdGh1Yi5jb20vcmFqZWV2bmFpa3RlXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxudmFyIHN5bWJvbE1hcCA9IHtcbiAgICAnMSc6ICfgs6cnLFxuICAgICcyJzogJ+CzqCcsXG4gICAgJzMnOiAn4LOpJyxcbiAgICAnNCc6ICfgs6onLFxuICAgICc1JzogJ+CzqycsXG4gICAgJzYnOiAn4LOsJyxcbiAgICAnNyc6ICfgs60nLFxuICAgICc4JzogJ+CzricsXG4gICAgJzknOiAn4LOvJyxcbiAgICAnMCc6ICfgs6YnXG59O1xudmFyIG51bWJlck1hcCA9IHtcbiAgICAn4LOnJzogJzEnLFxuICAgICfgs6gnOiAnMicsXG4gICAgJ+CzqSc6ICczJyxcbiAgICAn4LOqJzogJzQnLFxuICAgICfgs6snOiAnNScsXG4gICAgJ+CzrCc6ICc2JyxcbiAgICAn4LOtJzogJzcnLFxuICAgICfgs64nOiAnOCcsXG4gICAgJ+Czryc6ICc5JyxcbiAgICAn4LOmJzogJzAnXG59O1xuXG52YXIga24gPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdrbicsIHtcbiAgICBtb250aHMgOiAn4LKc4LKo4LK14LKw4LK/X+Cyq+CzhuCyrOCzjeCysOCyteCysOCyv1/gsq7gsr7gsrDgs43gsprgs41f4LKP4LKq4LON4LKw4LK/4LKy4LONX+CyruCzhuCzlV/gspzgs4Lgsqjgs41f4LKc4LOB4LKy4LOG4LOWX+CyhuCyl+CyuOCzjeCyn+CzjV/gsrjgs4bgsqrgs43gsp/gs4bgsoLgsqzgsrDgs41f4LKF4LKV4LON4LKf4LOG4LOC4LOV4LKs4LKw4LONX+CyqOCyteCzhuCyguCyrOCysOCzjV/gsqHgsr/gsrjgs4bgsoLgsqzgsrDgs40nLnNwbGl0KCdfJyksXG4gICAgbW9udGhzU2hvcnQgOiAn4LKc4LKoX+Cyq+CzhuCyrOCzjeCysF/gsq7gsr7gsrDgs43gsprgs41f4LKP4LKq4LON4LKw4LK/4LKy4LONX+CyruCzhuCzlV/gspzgs4Lgsqjgs41f4LKc4LOB4LKy4LOG4LOWX+CyhuCyl+CyuOCzjeCyn+CzjV/gsrjgs4bgsqrgs43gsp/gs4bgsoLgsqxf4LKF4LKV4LON4LKf4LOG4LOC4LOV4LKsX+CyqOCyteCzhuCyguCyrF/gsqHgsr/gsrjgs4bgsoLgsqwnLnNwbGl0KCdfJyksXG4gICAgbW9udGhzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICB3ZWVrZGF5cyA6ICfgsq3gsr7gsqjgs4HgsrXgsr7gsrBf4LK44LOG4LOC4LOV4LKu4LK14LK+4LKwX+CyruCyguCyl+Cys+CyteCyvuCysF/gsqzgs4HgsqfgsrXgsr7gsrBf4LKX4LOB4LKw4LOB4LK14LK+4LKwX+CytuCzgeCyleCzjeCysOCyteCyvuCysF/gsrbgsqjgsr/gsrXgsr7gsrAnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNTaG9ydCA6ICfgsq3gsr7gsqjgs4Ff4LK44LOG4LOC4LOV4LKuX+CyruCyguCyl+Cys1/gsqzgs4Hgsqdf4LKX4LOB4LKw4LOBX+CytuCzgeCyleCzjeCysF/gsrbgsqjgsr8nLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNNaW4gOiAn4LKt4LK+X+CyuOCzhuCzguCzlV/gsq7gsoJf4LKs4LOBX+Cyl+CzgV/gsrbgs4Ff4LK2Jy5zcGxpdCgnXycpLFxuICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICBMVCA6ICdBIGg6bW0nLFxuICAgICAgICBMVFMgOiAnQSBoOm1tOnNzJyxcbiAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVksIEEgaDptbScsXG4gICAgICAgIExMTEwgOiAnZGRkZCwgRCBNTU1NIFlZWVksIEEgaDptbSdcbiAgICB9LFxuICAgIGNhbGVuZGFyIDoge1xuICAgICAgICBzYW1lRGF5IDogJ1vgsofgsoLgsqbgs4FdIExUJyxcbiAgICAgICAgbmV4dERheSA6ICdb4LKo4LK+4LKz4LOGXSBMVCcsXG4gICAgICAgIG5leHRXZWVrIDogJ2RkZGQsIExUJyxcbiAgICAgICAgbGFzdERheSA6ICdb4LKo4LK/4LKo4LON4LKo4LOGXSBMVCcsXG4gICAgICAgIGxhc3RXZWVrIDogJ1vgspXgs4bgs4Lgsqjgs4bgsq9dIGRkZGQsIExUJyxcbiAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICB9LFxuICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgZnV0dXJlIDogJyVzIOCyqOCyguCypOCysCcsXG4gICAgICAgIHBhc3QgOiAnJXMg4LK54LK/4LKC4LKm4LOGJyxcbiAgICAgICAgcyA6ICfgspXgs4bgsrLgsrXgs4Eg4LKV4LON4LK34LKj4LKX4LKz4LOBJyxcbiAgICAgICAgbSA6ICfgspLgsoLgsqbgs4Eg4LKo4LK/4LKu4LK/4LK3JyxcbiAgICAgICAgbW0gOiAnJWQg4LKo4LK/4LKu4LK/4LK3JyxcbiAgICAgICAgaCA6ICfgspLgsoLgsqbgs4Eg4LKX4LKC4LKf4LOGJyxcbiAgICAgICAgaGggOiAnJWQg4LKX4LKC4LKf4LOGJyxcbiAgICAgICAgZCA6ICfgspLgsoLgsqbgs4Eg4LKm4LK/4LKoJyxcbiAgICAgICAgZGQgOiAnJWQg4LKm4LK/4LKoJyxcbiAgICAgICAgTSA6ICfgspLgsoLgsqbgs4Eg4LKk4LK/4LKC4LKX4LKz4LOBJyxcbiAgICAgICAgTU0gOiAnJWQg4LKk4LK/4LKC4LKX4LKz4LOBJyxcbiAgICAgICAgeSA6ICfgspLgsoLgsqbgs4Eg4LK14LKw4LON4LK3JyxcbiAgICAgICAgeXkgOiAnJWQg4LK14LKw4LON4LK3J1xuICAgIH0sXG4gICAgcHJlcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9b4LOn4LOo4LOp4LOq4LOr4LOs4LOt4LOu4LOv4LOmXS9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgIHJldHVybiBudW1iZXJNYXBbbWF0Y2hdO1xuICAgICAgICB9KTtcbiAgICB9LFxuICAgIHBvc3Rmb3JtYXQ6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9cXGQvZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICByZXR1cm4gc3ltYm9sTWFwW21hdGNoXTtcbiAgICAgICAgfSk7XG4gICAgfSxcbiAgICBtZXJpZGllbVBhcnNlOiAv4LKw4LK+4LKk4LON4LKw4LK/fOCyrOCzhuCys+Cyv+Cyl+CzjeCyl+Czhnzgsq7gsqfgs43gsq/gsr7gsrngs43gsqh84LK44LKC4LKc4LOGLyxcbiAgICBtZXJpZGllbUhvdXIgOiBmdW5jdGlvbiAoaG91ciwgbWVyaWRpZW0pIHtcbiAgICAgICAgaWYgKGhvdXIgPT09IDEyKSB7XG4gICAgICAgICAgICBob3VyID0gMDtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVyaWRpZW0gPT09ICfgsrDgsr7gsqTgs43gsrDgsr8nKSB7XG4gICAgICAgICAgICByZXR1cm4gaG91ciA8IDQgPyBob3VyIDogaG91ciArIDEyO1xuICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn4LKs4LOG4LKz4LK/4LKX4LON4LKX4LOGJykge1xuICAgICAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfgsq7gsqfgs43gsq/gsr7gsrngs43gsqgnKSB7XG4gICAgICAgICAgICByZXR1cm4gaG91ciA+PSAxMCA/IGhvdXIgOiBob3VyICsgMTI7XG4gICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfgsrjgsoLgspzgs4YnKSB7XG4gICAgICAgICAgICByZXR1cm4gaG91ciArIDEyO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBtZXJpZGllbSA6IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgaWYgKGhvdXIgPCA0KSB7XG4gICAgICAgICAgICByZXR1cm4gJ+CysOCyvuCypOCzjeCysOCyvyc7XG4gICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDEwKSB7XG4gICAgICAgICAgICByZXR1cm4gJ+CyrOCzhuCys+Cyv+Cyl+CzjeCyl+Czhic7XG4gICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDE3KSB7XG4gICAgICAgICAgICByZXR1cm4gJ+CyruCyp+CzjeCyr+CyvuCyueCzjeCyqCc7XG4gICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDIwKSB7XG4gICAgICAgICAgICByZXR1cm4gJ+CyuOCyguCynOCzhic7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gJ+CysOCyvuCypOCzjeCysOCyvyc7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfSjgsqjgs4bgs5UpLyxcbiAgICBvcmRpbmFsIDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICByZXR1cm4gbnVtYmVyICsgJ+CyqOCzhuCzlSc7XG4gICAgfSxcbiAgICB3ZWVrIDoge1xuICAgICAgICBkb3cgOiAwLCAvLyBTdW5kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgZG95IDogNiAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gMXN0IGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgIH1cbn0pO1xuXG5yZXR1cm4ga247XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogS29yZWFuIFtrb11cbi8vISBhdXRob3IgOiBLeXVuZ3dvb2ssIFBhcmsgOiBodHRwczovL2dpdGh1Yi5jb20va3l1bmd3MDBrXG4vLyEgYXV0aG9yIDogSmVlZXl1bCBMZWUgPGplZWV5dWxAZ21haWwuY29tPlxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciBrbyA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2tvJywge1xuICAgIG1vbnRocyA6ICcx7JuUXzLsm5RfM+yblF807JuUXzXsm5RfNuyblF837JuUXzjsm5RfOeyblF8xMOyblF8xMeyblF8xMuyblCcuc3BsaXQoJ18nKSxcbiAgICBtb250aHNTaG9ydCA6ICcx7JuUXzLsm5RfM+yblF807JuUXzXsm5RfNuyblF837JuUXzjsm5RfOeyblF8xMOyblF8xMeyblF8xMuyblCcuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5cyA6ICfsnbzsmpTsnbxf7JuU7JqU7J28X+2ZlOyalOydvF/siJjsmpTsnbxf66qp7JqU7J28X+q4iOyalOydvF/thqDsmpTsnbwnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNTaG9ydCA6ICfsnbxf7JuUX+2ZlF/siJhf66qpX+q4iF/thqAnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNNaW4gOiAn7J28X+yblF/tmZRf7IiYX+uqqV/quIhf7YagJy5zcGxpdCgnXycpLFxuICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICBMVCA6ICdBIGg6bW0nLFxuICAgICAgICBMVFMgOiAnQSBoOm1tOnNzJyxcbiAgICAgICAgTCA6ICdZWVlZLk1NLkREJyxcbiAgICAgICAgTEwgOiAnWVlZWeuFhCBNTU1NIETsnbwnLFxuICAgICAgICBMTEwgOiAnWVlZWeuFhCBNTU1NIETsnbwgQSBoOm1tJyxcbiAgICAgICAgTExMTCA6ICdZWVlZ64WEIE1NTU0gROydvCBkZGRkIEEgaDptbScsXG4gICAgICAgIGwgOiAnWVlZWS5NTS5ERCcsXG4gICAgICAgIGxsIDogJ1lZWVnrhYQgTU1NTSBE7J28JyxcbiAgICAgICAgbGxsIDogJ1lZWVnrhYQgTU1NTSBE7J28IEEgaDptbScsXG4gICAgICAgIGxsbGwgOiAnWVlZWeuFhCBNTU1NIETsnbwgZGRkZCBBIGg6bW0nXG4gICAgfSxcbiAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgc2FtZURheSA6ICfsmKTripggTFQnLFxuICAgICAgICBuZXh0RGF5IDogJ+uCtOydvCBMVCcsXG4gICAgICAgIG5leHRXZWVrIDogJ2RkZGQgTFQnLFxuICAgICAgICBsYXN0RGF5IDogJ+yWtOygnCBMVCcsXG4gICAgICAgIGxhc3RXZWVrIDogJ+yngOuCnOyjvCBkZGRkIExUJyxcbiAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICB9LFxuICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgZnV0dXJlIDogJyVzIO2bhCcsXG4gICAgICAgIHBhc3QgOiAnJXMg7KCEJyxcbiAgICAgICAgcyA6ICfrqocg7LSIJyxcbiAgICAgICAgc3MgOiAnJWTstIgnLFxuICAgICAgICBtIDogJzHrtoQnLFxuICAgICAgICBtbSA6ICclZOu2hCcsXG4gICAgICAgIGggOiAn7ZWcIOyLnOqwhCcsXG4gICAgICAgIGhoIDogJyVk7Iuc6rCEJyxcbiAgICAgICAgZCA6ICftlZjro6gnLFxuICAgICAgICBkZCA6ICclZOydvCcsXG4gICAgICAgIE0gOiAn7ZWcIOuLrCcsXG4gICAgICAgIE1NIDogJyVk64usJyxcbiAgICAgICAgeSA6ICfsnbwg64WEJyxcbiAgICAgICAgeXkgOiAnJWTrhYQnXG4gICAgfSxcbiAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlIDogL1xcZHsxLDJ97J28LyxcbiAgICBvcmRpbmFsIDogJyVk7J28JyxcbiAgICBtZXJpZGllbVBhcnNlIDogL+yYpOyghHzsmKTtm4QvLFxuICAgIGlzUE0gOiBmdW5jdGlvbiAodG9rZW4pIHtcbiAgICAgICAgcmV0dXJuIHRva2VuID09PSAn7Jik7ZuEJztcbiAgICB9LFxuICAgIG1lcmlkaWVtIDogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNVcHBlcikge1xuICAgICAgICByZXR1cm4gaG91ciA8IDEyID8gJ+yYpOyghCcgOiAn7Jik7ZuEJztcbiAgICB9XG59KTtcblxucmV0dXJuIGtvO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEt5cmd5eiBba3ldXG4vLyEgYXV0aG9yIDogQ2h5bmd5eiBBcnlzdGFuIHV1bHUgOiBodHRwczovL2dpdGh1Yi5jb20vY2h5bmd5elxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cblxudmFyIHN1ZmZpeGVzID0ge1xuICAgIDA6ICct0YfSrycsXG4gICAgMTogJy3Rh9C4JyxcbiAgICAyOiAnLdGH0LgnLFxuICAgIDM6ICct0YfSrycsXG4gICAgNDogJy3Rh9KvJyxcbiAgICA1OiAnLdGH0LgnLFxuICAgIDY6ICct0YfRiycsXG4gICAgNzogJy3Rh9C4JyxcbiAgICA4OiAnLdGH0LgnLFxuICAgIDk6ICct0YfRgycsXG4gICAgMTA6ICct0YfRgycsXG4gICAgMjA6ICct0YfRiycsXG4gICAgMzA6ICct0YfRgycsXG4gICAgNDA6ICct0YfRiycsXG4gICAgNTA6ICct0YfSrycsXG4gICAgNjA6ICct0YfRiycsXG4gICAgNzA6ICct0YfQuCcsXG4gICAgODA6ICct0YfQuCcsXG4gICAgOTA6ICct0YfRgycsXG4gICAgMTAwOiAnLdGH0q8nXG59O1xuXG52YXIga3kgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdreScsIHtcbiAgICBtb250aHMgOiAn0Y/QvdCy0LDRgNGMX9GE0LXQstGA0LDQu9GMX9C80LDRgNGCX9Cw0L/RgNC10LvRjF/QvNCw0Llf0LjRjtC90Yxf0LjRjtC70Yxf0LDQstCz0YPRgdGCX9GB0LXQvdGC0Y/QsdGA0Yxf0L7QutGC0Y/QsdGA0Yxf0L3QvtGP0LHRgNGMX9C00LXQutCw0LHRgNGMJy5zcGxpdCgnXycpLFxuICAgIG1vbnRoc1Nob3J0IDogJ9GP0L3Qsl/RhNC10LJf0LzQsNGA0YJf0LDQv9GAX9C80LDQuV/QuNGO0L3RjF/QuNGO0LvRjF/QsNCy0LNf0YHQtdC9X9C+0LrRgl/QvdC+0Y9f0LTQtdC6Jy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzIDogJ9CW0LXQutGI0LXQvNCx0Lhf0JTSr9C50YjTqdC80LHSr1/QqNC10LnRiNC10LzQsdC4X9Co0LDRgNGI0LXQvNCx0Lhf0JHQtdC50YjQtdC80LHQuF/QltGD0LzQsF/QmNGI0LXQvNCx0LgnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNTaG9ydCA6ICfQltC10Lpf0JTSr9C5X9Co0LXQuV/QqNCw0YBf0JHQtdC5X9CW0YPQvF/QmNGI0LUnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNNaW4gOiAn0JbQul/QlNC5X9Co0Llf0KjRgF/QkdC5X9CW0Lxf0JjRiCcuc3BsaXQoJ18nKSxcbiAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICBMIDogJ0RELk1NLllZWVknLFxuICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIExMTEwgOiAnZGRkZCwgRCBNTU1NIFlZWVkgSEg6bW0nXG4gICAgfSxcbiAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgc2FtZURheSA6ICdb0JHSr9Cz0q/QvSDRgdCw0LDRgl0gTFQnLFxuICAgICAgICBuZXh0RGF5IDogJ1vQrdGA0YLQtdKjINGB0LDQsNGCXSBMVCcsXG4gICAgICAgIG5leHRXZWVrIDogJ2RkZGQgW9GB0LDQsNGCXSBMVCcsXG4gICAgICAgIGxhc3REYXkgOiAnW9Ca0LXRh9C1INGB0LDQsNGCXSBMVCcsXG4gICAgICAgIGxhc3RXZWVrIDogJ1vTqNGC0LrQtdC9INCw0L/RgtCw0L3Ri9C9XSBkZGRkIFvQutKv0L3Sr10gW9GB0LDQsNGCXSBMVCcsXG4gICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgfSxcbiAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgIGZ1dHVyZSA6ICclcyDQuNGH0LjQvdC00LUnLFxuICAgICAgICBwYXN0IDogJyVzINC80YPRgNGD0L0nLFxuICAgICAgICBzIDogJ9Cx0LjRgNC90LXRh9C1INGB0LXQutGD0L3QtCcsXG4gICAgICAgIG0gOiAn0LHQuNGAINC80q/QvdOp0YInLFxuICAgICAgICBtbSA6ICclZCDQvNKv0L3TqdGCJyxcbiAgICAgICAgaCA6ICfQsdC40YAg0YHQsNCw0YInLFxuICAgICAgICBoaCA6ICclZCDRgdCw0LDRgicsXG4gICAgICAgIGQgOiAn0LHQuNGAINC60q/QvScsXG4gICAgICAgIGRkIDogJyVkINC60q/QvScsXG4gICAgICAgIE0gOiAn0LHQuNGAINCw0LknLFxuICAgICAgICBNTSA6ICclZCDQsNC5JyxcbiAgICAgICAgeSA6ICfQsdC40YAg0LbRi9C7JyxcbiAgICAgICAgeXkgOiAnJWQg0LbRi9C7J1xuICAgIH0sXG4gICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9LSjRh9C4fNGH0Yt80YfSr3zRh9GDKS8sXG4gICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgdmFyIGEgPSBudW1iZXIgJSAxMCxcbiAgICAgICAgICAgIGIgPSBudW1iZXIgPj0gMTAwID8gMTAwIDogbnVsbDtcbiAgICAgICAgcmV0dXJuIG51bWJlciArIChzdWZmaXhlc1tudW1iZXJdIHx8IHN1ZmZpeGVzW2FdIHx8IHN1ZmZpeGVzW2JdKTtcbiAgICB9LFxuICAgIHdlZWsgOiB7XG4gICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICBkb3kgOiA3ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiAxc3QgaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgfVxufSk7XG5cbnJldHVybiBreTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBMdXhlbWJvdXJnaXNoIFtsYl1cbi8vISBhdXRob3IgOiBtd2VpbWVyc2tpcmNoIDogaHR0cHM6Ly9naXRodWIuY29tL213ZWltZXJza2lyY2hcbi8vISBhdXRob3IgOiBEYXZpZCBSYWlzb24gOiBodHRwczovL2dpdGh1Yi5jb20va3dpc2F0elxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbmZ1bmN0aW9uIHByb2Nlc3NSZWxhdGl2ZVRpbWUobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXksIGlzRnV0dXJlKSB7XG4gICAgdmFyIGZvcm1hdCA9IHtcbiAgICAgICAgJ20nOiBbJ2VuZyBNaW51dHQnLCAnZW5nZXIgTWludXR0J10sXG4gICAgICAgICdoJzogWydlbmcgU3Rvbm4nLCAnZW5nZXIgU3Rvbm4nXSxcbiAgICAgICAgJ2QnOiBbJ2VlbiBEYWcnLCAnZW5nZW0gRGFnJ10sXG4gICAgICAgICdNJzogWydlZSBNb3VudCcsICdlbmdlbSBNb3VudCddLFxuICAgICAgICAneSc6IFsnZWUgSm9lcicsICdlbmdlbSBKb2VyJ11cbiAgICB9O1xuICAgIHJldHVybiB3aXRob3V0U3VmZml4ID8gZm9ybWF0W2tleV1bMF0gOiBmb3JtYXRba2V5XVsxXTtcbn1cbmZ1bmN0aW9uIHByb2Nlc3NGdXR1cmVUaW1lKHN0cmluZykge1xuICAgIHZhciBudW1iZXIgPSBzdHJpbmcuc3Vic3RyKDAsIHN0cmluZy5pbmRleE9mKCcgJykpO1xuICAgIGlmIChlaWZlbGVyUmVnZWxBcHBsaWVzVG9OdW1iZXIobnVtYmVyKSkge1xuICAgICAgICByZXR1cm4gJ2EgJyArIHN0cmluZztcbiAgICB9XG4gICAgcmV0dXJuICdhbiAnICsgc3RyaW5nO1xufVxuZnVuY3Rpb24gcHJvY2Vzc1Bhc3RUaW1lKHN0cmluZykge1xuICAgIHZhciBudW1iZXIgPSBzdHJpbmcuc3Vic3RyKDAsIHN0cmluZy5pbmRleE9mKCcgJykpO1xuICAgIGlmIChlaWZlbGVyUmVnZWxBcHBsaWVzVG9OdW1iZXIobnVtYmVyKSkge1xuICAgICAgICByZXR1cm4gJ3ZpcnUgJyArIHN0cmluZztcbiAgICB9XG4gICAgcmV0dXJuICd2aXJ1biAnICsgc3RyaW5nO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIHdvcmQgYmVmb3JlIHRoZSBnaXZlbiBudW1iZXIgbG9zZXMgdGhlICctbicgZW5kaW5nLlxuICogZS5nLiAnYW4gMTAgRGVlZycgYnV0ICdhIDUgRGVlZydcbiAqXG4gKiBAcGFyYW0gbnVtYmVyIHtpbnRlZ2VyfVxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGVpZmVsZXJSZWdlbEFwcGxpZXNUb051bWJlcihudW1iZXIpIHtcbiAgICBudW1iZXIgPSBwYXJzZUludChudW1iZXIsIDEwKTtcbiAgICBpZiAoaXNOYU4obnVtYmVyKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChudW1iZXIgPCAwKSB7XG4gICAgICAgIC8vIE5lZ2F0aXZlIE51bWJlciAtLT4gYWx3YXlzIHRydWVcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIGlmIChudW1iZXIgPCAxMCkge1xuICAgICAgICAvLyBPbmx5IDEgZGlnaXRcbiAgICAgICAgaWYgKDQgPD0gbnVtYmVyICYmIG51bWJlciA8PSA3KSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSBlbHNlIGlmIChudW1iZXIgPCAxMDApIHtcbiAgICAgICAgLy8gMiBkaWdpdHNcbiAgICAgICAgdmFyIGxhc3REaWdpdCA9IG51bWJlciAlIDEwLCBmaXJzdERpZ2l0ID0gbnVtYmVyIC8gMTA7XG4gICAgICAgIGlmIChsYXN0RGlnaXQgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBlaWZlbGVyUmVnZWxBcHBsaWVzVG9OdW1iZXIoZmlyc3REaWdpdCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGVpZmVsZXJSZWdlbEFwcGxpZXNUb051bWJlcihsYXN0RGlnaXQpO1xuICAgIH0gZWxzZSBpZiAobnVtYmVyIDwgMTAwMDApIHtcbiAgICAgICAgLy8gMyBvciA0IGRpZ2l0cyAtLT4gcmVjdXJzaXZlbHkgY2hlY2sgZmlyc3QgZGlnaXRcbiAgICAgICAgd2hpbGUgKG51bWJlciA+PSAxMCkge1xuICAgICAgICAgICAgbnVtYmVyID0gbnVtYmVyIC8gMTA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGVpZmVsZXJSZWdlbEFwcGxpZXNUb051bWJlcihudW1iZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEFueXRoaW5nIGxhcmdlciB0aGFuIDQgZGlnaXRzOiByZWN1cnNpdmVseSBjaGVjayBmaXJzdCBuLTMgZGlnaXRzXG4gICAgICAgIG51bWJlciA9IG51bWJlciAvIDEwMDA7XG4gICAgICAgIHJldHVybiBlaWZlbGVyUmVnZWxBcHBsaWVzVG9OdW1iZXIobnVtYmVyKTtcbiAgICB9XG59XG5cbnZhciBsYiA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2xiJywge1xuICAgIG1vbnRoczogJ0phbnVhcl9GZWJydWFyX03DpGVyel9BYnLDq2xsX01lZV9KdW5pX0p1bGlfQXVndXN0X1NlcHRlbWJlcl9Pa3RvYmVyX05vdmVtYmVyX0RlemVtYmVyJy5zcGxpdCgnXycpLFxuICAgIG1vbnRoc1Nob3J0OiAnSmFuLl9GZWJyLl9NcnouX0Fici5fTWVlX0p1bi5fSnVsLl9BdWcuX1NlcHQuX09rdC5fTm92Ll9EZXouJy5zcGxpdCgnXycpLFxuICAgIG1vbnRoc1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgIHdlZWtkYXlzOiAnU29ubmRlZ19Nw6lpbmRlZ19Ew6tuc2NoZGVnX03Dq3R0d29jaF9Eb25uZXNjaGRlZ19GcmVpZGVnX1NhbXNjaGRlZycuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1Nob3J0OiAnU28uX03DqS5fRMOrLl9Nw6suX0RvLl9Gci5fU2EuJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzTWluOiAnU29fTcOpX0TDq19Nw6tfRG9fRnJfU2EnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICBMVDogJ0g6bW0gW0F1ZXJdJyxcbiAgICAgICAgTFRTOiAnSDptbTpzcyBbQXVlcl0nLFxuICAgICAgICBMOiAnREQuTU0uWVlZWScsXG4gICAgICAgIExMOiAnRC4gTU1NTSBZWVlZJyxcbiAgICAgICAgTExMOiAnRC4gTU1NTSBZWVlZIEg6bW0gW0F1ZXJdJyxcbiAgICAgICAgTExMTDogJ2RkZGQsIEQuIE1NTU0gWVlZWSBIOm1tIFtBdWVyXSdcbiAgICB9LFxuICAgIGNhbGVuZGFyOiB7XG4gICAgICAgIHNhbWVEYXk6ICdbSGF1dCB1bV0gTFQnLFxuICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICBuZXh0RGF5OiAnW011ZXIgdW1dIExUJyxcbiAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFt1bV0gTFQnLFxuICAgICAgICBsYXN0RGF5OiAnW0fDq3NjaHRlciB1bV0gTFQnLFxuICAgICAgICBsYXN0V2VlazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgLy8gRGlmZmVyZW50IGRhdGUgc3RyaW5nIGZvciAnRMOrbnNjaGRlZycgKFR1ZXNkYXkpIGFuZCAnRG9ubmVzY2hkZWcnIChUaHVyc2RheSkgZHVlIHRvIHBob25vbG9naWNhbCBydWxlXG4gICAgICAgICAgICBzd2l0Y2ggKHRoaXMuZGF5KCkpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1tMZXNjaHRlbl0gZGRkZCBbdW1dIExUJztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1tMZXNjaHRlXSBkZGRkIFt1bV0gTFQnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcbiAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgIGZ1dHVyZSA6IHByb2Nlc3NGdXR1cmVUaW1lLFxuICAgICAgICBwYXN0IDogcHJvY2Vzc1Bhc3RUaW1lLFxuICAgICAgICBzIDogJ2UgcHVlciBTZWtvbm5lbicsXG4gICAgICAgIG0gOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICBtbSA6ICclZCBNaW51dHRlbicsXG4gICAgICAgIGggOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICBoaCA6ICclZCBTdG9ubmVuJyxcbiAgICAgICAgZCA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgIGRkIDogJyVkIERlZWcnLFxuICAgICAgICBNIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgTU0gOiAnJWQgTcOpaW50JyxcbiAgICAgICAgeSA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgIHl5IDogJyVkIEpvZXInXG4gICAgfSxcbiAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn1cXC4vLFxuICAgIG9yZGluYWw6ICclZC4nLFxuICAgIHdlZWs6IHtcbiAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgZG95OiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgfVxufSk7XG5cbnJldHVybiBsYjtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBMYW8gW2xvXVxuLy8hIGF1dGhvciA6IFJ5YW4gSGFydCA6IGh0dHBzOi8vZ2l0aHViLmNvbS9yeWFuaGFydDJcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG52YXIgbG8gPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdsbycsIHtcbiAgICBtb250aHMgOiAn4Lqh4Lqx4LqH4LqB4Lqt4LqZX+C6geC6uOC6oeC6nuC6sl/guqHgurXgupngurJf4LuA4Lqh4Lqq4LqyX+C6nuC6tuC6lOC6quC6sOC6nuC6sl/guqHgurTgupbgurjgupngurJf4LqB4LuN4Lql4Lqw4LqB4Lq74LqUX+C6quC6tOC6h+C6q+C6sl/guoHgurHgupnguo3gurJf4LqV4Lq44Lql4LqyX+C6nuC6sOC6iOC6tOC6gV/gupfgurHgupnguqfgurInLnNwbGl0KCdfJyksXG4gICAgbW9udGhzU2hvcnQgOiAn4Lqh4Lqx4LqH4LqB4Lqt4LqZX+C6geC6uOC6oeC6nuC6sl/guqHgurXgupngurJf4LuA4Lqh4Lqq4LqyX+C6nuC6tuC6lOC6quC6sOC6nuC6sl/guqHgurTgupbgurjgupngurJf4LqB4LuN4Lql4Lqw4LqB4Lq74LqUX+C6quC6tOC6h+C6q+C6sl/guoHgurHgupnguo3gurJf4LqV4Lq44Lql4LqyX+C6nuC6sOC6iOC6tOC6gV/gupfgurHgupnguqfgurInLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXMgOiAn4Lqt4Lqy4LqX4Lq04LqUX+C6iOC6seC6mV/guq3gurHguofguoTgurLguplf4Lqe4Lq44LqUX+C6nuC6sOC6q+C6seC6lF/guqrgurjguoFf4LuA4Lqq4Lq74LqyJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzU2hvcnQgOiAn4LqX4Lq04LqUX+C6iOC6seC6mV/guq3gurHguofguoTgurLguplf4Lqe4Lq44LqUX+C6nuC6sOC6q+C6seC6lF/guqrgurjguoFf4LuA4Lqq4Lq74LqyJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzTWluIDogJ+C6l1/guohf4Lqt4LqEX+C6nl/gup7guqtf4Lqq4LqBX+C6qicuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgTExMTCA6ICfguqfgurHguplkZGRkIEQgTU1NTSBZWVlZIEhIOm1tJ1xuICAgIH0sXG4gICAgbWVyaWRpZW1QYXJzZTogL+C6leC6reC6meC7gOC6iuC6u+C7ieC6snzgupXguq3gupngu4HguqXguocvLFxuICAgIGlzUE06IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICByZXR1cm4gaW5wdXQgPT09ICfgupXguq3gupngu4HguqXguocnO1xuICAgIH0sXG4gICAgbWVyaWRpZW0gOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgIGlmIChob3VyIDwgMTIpIHtcbiAgICAgICAgICAgIHJldHVybiAn4LqV4Lqt4LqZ4LuA4LqK4Lq74LuJ4LqyJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAn4LqV4Lqt4LqZ4LuB4Lql4LqHJztcbiAgICAgICAgfVxuICAgIH0sXG4gICAgY2FsZW5kYXIgOiB7XG4gICAgICAgIHNhbWVEYXkgOiAnW+C6oeC6t+C7ieC6meC6teC7ieC7gOC6p+C6peC6sl0gTFQnLFxuICAgICAgICBuZXh0RGF5IDogJ1vguqHgurfgu4nguq3gurfgu4jgupngu4DguqfguqXgurJdIExUJyxcbiAgICAgICAgbmV4dFdlZWsgOiAnW+C6p+C6seC6mV1kZGRkW+C7nOC7ieC6suC7gOC6p+C6peC6sl0gTFQnLFxuICAgICAgICBsYXN0RGF5IDogJ1vguqHgurfgu4nguqfgurLgupngupngurXgu4ngu4DguqfguqXgurJdIExUJyxcbiAgICAgICAgbGFzdFdlZWsgOiAnW+C6p+C6seC6mV1kZGRkW+C7geC6peC7ieC6p+C6meC6teC7ieC7gOC6p+C6peC6sl0gTFQnLFxuICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgIH0sXG4gICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICBmdXR1cmUgOiAn4Lqt4Lq14LqBICVzJyxcbiAgICAgICAgcGFzdCA6ICclc+C6nOC7iOC6suC6meC6oeC6sicsXG4gICAgICAgIHMgOiAn4Lqa4LuN4LuI4LuA4LqX4Lq74LuI4Lqy4LuD4LqU4Lqn4Lq04LqZ4Lqy4LqX4Lq1JyxcbiAgICAgICAgbSA6ICcxIOC6meC6suC6l+C6tScsXG4gICAgICAgIG1tIDogJyVkIOC6meC6suC6l+C6tScsXG4gICAgICAgIGggOiAnMSDguorgurvgu4jguqfgu4LguqHguocnLFxuICAgICAgICBoaCA6ICclZCDguorgurvgu4jguqfgu4LguqHguocnLFxuICAgICAgICBkIDogJzEg4Lqh4Lq34LuJJyxcbiAgICAgICAgZGQgOiAnJWQg4Lqh4Lq34LuJJyxcbiAgICAgICAgTSA6ICcxIOC7gOC6lOC6t+C6reC6mScsXG4gICAgICAgIE1NIDogJyVkIOC7gOC6lOC6t+C6reC6mScsXG4gICAgICAgIHkgOiAnMSDgupvgurUnLFxuICAgICAgICB5eSA6ICclZCDgupvgurUnXG4gICAgfSxcbiAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvKOC6l+C6teC7iClcXGR7MSwyfS8sXG4gICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgcmV0dXJuICfgupfgurXgu4gnICsgbnVtYmVyO1xuICAgIH1cbn0pO1xuXG5yZXR1cm4gbG87XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogTGl0aHVhbmlhbiBbbHRdXG4vLyEgYXV0aG9yIDogTWluZGF1Z2FzIE1vesWrcmFzIDogaHR0cHM6Ly9naXRodWIuY29tL21tb3p1cmFzXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxudmFyIHVuaXRzID0ge1xuICAgICdtJyA6ICdtaW51dMSXX21pbnV0xJdzX21pbnV0xJknLFxuICAgICdtbSc6ICdtaW51dMSXc19taW51xI1pxbNfbWludXRlcycsXG4gICAgJ2gnIDogJ3ZhbGFuZGFfdmFsYW5kb3NfdmFsYW5kxIUnLFxuICAgICdoaCc6ICd2YWxhbmRvc192YWxhbmTFs192YWxhbmRhcycsXG4gICAgJ2QnIDogJ2RpZW5hX2RpZW5vc19kaWVuxIUnLFxuICAgICdkZCc6ICdkaWVub3NfZGllbsWzX2RpZW5hcycsXG4gICAgJ00nIDogJ23El251b19txJduZXNpb19txJduZXPErycsXG4gICAgJ01NJzogJ23El25lc2lhaV9txJduZXNpxbNfbcSXbmVzaXVzJyxcbiAgICAneScgOiAnbWV0YWlfbWV0xbNfbWV0dXMnLFxuICAgICd5eSc6ICdtZXRhaV9tZXTFs19tZXR1cydcbn07XG5mdW5jdGlvbiB0cmFuc2xhdGVTZWNvbmRzKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5LCBpc0Z1dHVyZSkge1xuICAgIGlmICh3aXRob3V0U3VmZml4KSB7XG4gICAgICAgIHJldHVybiAna2VsaW9zIHNla3VuZMSXcyc7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGlzRnV0dXJlID8gJ2tlbGnFsyBzZWt1bmTFvmnFsycgOiAna2VsaWFzIHNla3VuZGVzJztcbiAgICB9XG59XG5mdW5jdGlvbiB0cmFuc2xhdGVTaW5ndWxhcihudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGtleSwgaXNGdXR1cmUpIHtcbiAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCA/IGZvcm1zKGtleSlbMF0gOiAoaXNGdXR1cmUgPyBmb3JtcyhrZXkpWzFdIDogZm9ybXMoa2V5KVsyXSk7XG59XG5mdW5jdGlvbiBzcGVjaWFsKG51bWJlcikge1xuICAgIHJldHVybiBudW1iZXIgJSAxMCA9PT0gMCB8fCAobnVtYmVyID4gMTAgJiYgbnVtYmVyIDwgMjApO1xufVxuZnVuY3Rpb24gZm9ybXMoa2V5KSB7XG4gICAgcmV0dXJuIHVuaXRzW2tleV0uc3BsaXQoJ18nKTtcbn1cbmZ1bmN0aW9uIHRyYW5zbGF0ZShudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGtleSwgaXNGdXR1cmUpIHtcbiAgICB2YXIgcmVzdWx0ID0gbnVtYmVyICsgJyAnO1xuICAgIGlmIChudW1iZXIgPT09IDEpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdCArIHRyYW5zbGF0ZVNpbmd1bGFyKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5WzBdLCBpc0Z1dHVyZSk7XG4gICAgfSBlbHNlIGlmICh3aXRob3V0U3VmZml4KSB7XG4gICAgICAgIHJldHVybiByZXN1bHQgKyAoc3BlY2lhbChudW1iZXIpID8gZm9ybXMoa2V5KVsxXSA6IGZvcm1zKGtleSlbMF0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChpc0Z1dHVyZSkge1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArIGZvcm1zKGtleSlbMV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgKHNwZWNpYWwobnVtYmVyKSA/IGZvcm1zKGtleSlbMV0gOiBmb3JtcyhrZXkpWzJdKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbnZhciBsdCA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2x0Jywge1xuICAgIG1vbnRocyA6IHtcbiAgICAgICAgZm9ybWF0OiAnc2F1c2lvX3Zhc2FyaW9fa292b19iYWxhbmTFvmlvX2dlZ3XFvsSXc19iaXLFvmVsaW9fbGllcG9zX3J1Z3BqxavEjWlvX3J1Z3PEl2pvX3NwYWxpb19sYXBrcmnEjWlvX2dydW9kxb5pbycuc3BsaXQoJ18nKSxcbiAgICAgICAgc3RhbmRhbG9uZTogJ3NhdXNpc192YXNhcmlzX2tvdmFzX2JhbGFuZGlzX2dlZ3XFvsSXX2JpcsW+ZWxpc19saWVwYV9ydWdwasWrdGlzX3J1Z3PEl2ppc19zcGFsaXNfbGFwa3JpdGlzX2dydW9kaXMnLnNwbGl0KCdfJyksXG4gICAgICAgIGlzRm9ybWF0OiAvRFtvRF0/KFxcW1teXFxbXFxdXSpcXF18XFxzKStNTU1NP3xNTU1NPyhcXFtbXlxcW1xcXV0qXFxdfFxccykrRFtvRF0/L1xuICAgIH0sXG4gICAgbW9udGhzU2hvcnQgOiAnc2F1X3Zhc19rb3ZfYmFsX2dlZ19iaXJfbGllX3JncF9yZ3Nfc3BhX2xhcF9ncmQnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXMgOiB7XG4gICAgICAgIGZvcm1hdDogJ3Nla21hZGllbsSvX3Bpcm1hZGllbsSvX2FudHJhZGllbsSvX3RyZcSNaWFkaWVuxK9fa2V0dmlydGFkaWVuxK9fcGVua3RhZGllbsSvX8WhZcWhdGFkaWVuxK8nLnNwbGl0KCdfJyksXG4gICAgICAgIHN0YW5kYWxvbmU6ICdzZWttYWRpZW5pc19waXJtYWRpZW5pc19hbnRyYWRpZW5pc190cmXEjWlhZGllbmlzX2tldHZpcnRhZGllbmlzX3Blbmt0YWRpZW5pc1/FoWXFoXRhZGllbmlzJy5zcGxpdCgnXycpLFxuICAgICAgICBpc0Zvcm1hdDogL2RkZGQgSEg6bW0vXG4gICAgfSxcbiAgICB3ZWVrZGF5c1Nob3J0IDogJ1Nla19QaXJfQW50X1RyZV9LZXRfUGVuX8WgZcWhJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzTWluIDogJ1NfUF9BX1RfS19Qbl/FoCcuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgIEwgOiAnWVlZWS1NTS1ERCcsXG4gICAgICAgIExMIDogJ1lZWVkgW20uXSBNTU1NIEQgW2QuXScsXG4gICAgICAgIExMTCA6ICdZWVlZIFttLl0gTU1NTSBEIFtkLl0sIEhIOm1tIFt2YWwuXScsXG4gICAgICAgIExMTEwgOiAnWVlZWSBbbS5dIE1NTU0gRCBbZC5dLCBkZGRkLCBISDptbSBbdmFsLl0nLFxuICAgICAgICBsIDogJ1lZWVktTU0tREQnLFxuICAgICAgICBsbCA6ICdZWVlZIFttLl0gTU1NTSBEIFtkLl0nLFxuICAgICAgICBsbGwgOiAnWVlZWSBbbS5dIE1NTU0gRCBbZC5dLCBISDptbSBbdmFsLl0nLFxuICAgICAgICBsbGxsIDogJ1lZWVkgW20uXSBNTU1NIEQgW2QuXSwgZGRkLCBISDptbSBbdmFsLl0nXG4gICAgfSxcbiAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgc2FtZURheSA6ICdbxaBpYW5kaWVuXSBMVCcsXG4gICAgICAgIG5leHREYXkgOiAnW1J5dG9qXSBMVCcsXG4gICAgICAgIG5leHRXZWVrIDogJ2RkZGQgTFQnLFxuICAgICAgICBsYXN0RGF5IDogJ1tWYWthcl0gTFQnLFxuICAgICAgICBsYXN0V2VlayA6ICdbUHJhxJdqdXPEr10gZGRkZCBMVCcsXG4gICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgfSxcbiAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgIGZ1dHVyZSA6ICdwbyAlcycsXG4gICAgICAgIHBhc3QgOiAncHJpZcWhICVzJyxcbiAgICAgICAgcyA6IHRyYW5zbGF0ZVNlY29uZHMsXG4gICAgICAgIG0gOiB0cmFuc2xhdGVTaW5ndWxhcixcbiAgICAgICAgbW0gOiB0cmFuc2xhdGUsXG4gICAgICAgIGggOiB0cmFuc2xhdGVTaW5ndWxhcixcbiAgICAgICAgaGggOiB0cmFuc2xhdGUsXG4gICAgICAgIGQgOiB0cmFuc2xhdGVTaW5ndWxhcixcbiAgICAgICAgZGQgOiB0cmFuc2xhdGUsXG4gICAgICAgIE0gOiB0cmFuc2xhdGVTaW5ndWxhcixcbiAgICAgICAgTU0gOiB0cmFuc2xhdGUsXG4gICAgICAgIHkgOiB0cmFuc2xhdGVTaW5ndWxhcixcbiAgICAgICAgeXkgOiB0cmFuc2xhdGVcbiAgICB9LFxuICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfS1vamkvLFxuICAgIG9yZGluYWwgOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgIHJldHVybiBudW1iZXIgKyAnLW9qaSc7XG4gICAgfSxcbiAgICB3ZWVrIDoge1xuICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgZG95IDogNCAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgIH1cbn0pO1xuXG5yZXR1cm4gbHQ7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogTGF0dmlhbiBbbHZdXG4vLyEgYXV0aG9yIDogS3Jpc3RhcHMgS2FybHNvbnMgOiBodHRwczovL2dpdGh1Yi5jb20vc2tha3JpXG4vLyEgYXV0aG9yIDogSsSBbmlzIEVsbWVyaXMgOiBodHRwczovL2dpdGh1Yi5jb20vSmFuaXNFXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxudmFyIHVuaXRzID0ge1xuICAgICdtJzogJ21pbsWrdGVzX21pbsWrdMSTbV9taW7Fq3RlX21pbsWrdGVzJy5zcGxpdCgnXycpLFxuICAgICdtbSc6ICdtaW7Fq3Rlc19taW7Fq3TEk21fbWluxat0ZV9taW7Fq3Rlcycuc3BsaXQoJ18nKSxcbiAgICAnaCc6ICdzdHVuZGFzX3N0dW5kxIFtX3N0dW5kYV9zdHVuZGFzJy5zcGxpdCgnXycpLFxuICAgICdoaCc6ICdzdHVuZGFzX3N0dW5kxIFtX3N0dW5kYV9zdHVuZGFzJy5zcGxpdCgnXycpLFxuICAgICdkJzogJ2RpZW5hc19kaWVuxIFtX2RpZW5hX2RpZW5hcycuc3BsaXQoJ18nKSxcbiAgICAnZGQnOiAnZGllbmFzX2RpZW7EgW1fZGllbmFfZGllbmFzJy5zcGxpdCgnXycpLFxuICAgICdNJzogJ23Ek25lxaFhX23Ek25lxaFpZW1fbcSTbmVzaXNfbcSTbmXFoWknLnNwbGl0KCdfJyksXG4gICAgJ01NJzogJ23Ek25lxaFhX23Ek25lxaFpZW1fbcSTbmVzaXNfbcSTbmXFoWknLnNwbGl0KCdfJyksXG4gICAgJ3knOiAnZ2FkYV9nYWRpZW1fZ2Fkc19nYWRpJy5zcGxpdCgnXycpLFxuICAgICd5eSc6ICdnYWRhX2dhZGllbV9nYWRzX2dhZGknLnNwbGl0KCdfJylcbn07XG4vKipcbiAqIEBwYXJhbSB3aXRob3V0U3VmZml4IGJvb2xlYW4gdHJ1ZSA9IGEgbGVuZ3RoIG9mIHRpbWU7IGZhbHNlID0gYmVmb3JlL2FmdGVyIGEgcGVyaW9kIG9mIHRpbWUuXG4gKi9cbmZ1bmN0aW9uIGZvcm1hdChmb3JtcywgbnVtYmVyLCB3aXRob3V0U3VmZml4KSB7XG4gICAgaWYgKHdpdGhvdXRTdWZmaXgpIHtcbiAgICAgICAgLy8gRS5nLiBcIjIxIG1pbsWrdGVcIiwgXCIzIG1pbsWrdGVzXCIuXG4gICAgICAgIHJldHVybiBudW1iZXIgJSAxMCA9PT0gMSAmJiBudW1iZXIgJSAxMDAgIT09IDExID8gZm9ybXNbMl0gOiBmb3Jtc1szXTtcbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyBFLmcuIFwiMjEgbWluxat0ZXNcIiBhcyBpbiBcInDEk2MgMjEgbWluxat0ZXNcIi5cbiAgICAgICAgLy8gRS5nLiBcIjMgbWluxat0xJNtXCIgYXMgaW4gXCJwxJNjIDMgbWluxat0xJNtXCIuXG4gICAgICAgIHJldHVybiBudW1iZXIgJSAxMCA9PT0gMSAmJiBudW1iZXIgJSAxMDAgIT09IDExID8gZm9ybXNbMF0gOiBmb3Jtc1sxXTtcbiAgICB9XG59XG5mdW5jdGlvbiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5KSB7XG4gICAgcmV0dXJuIG51bWJlciArICcgJyArIGZvcm1hdCh1bml0c1trZXldLCBudW1iZXIsIHdpdGhvdXRTdWZmaXgpO1xufVxuZnVuY3Rpb24gcmVsYXRpdmVUaW1lV2l0aFNpbmd1bGFyKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5KSB7XG4gICAgcmV0dXJuIGZvcm1hdCh1bml0c1trZXldLCBudW1iZXIsIHdpdGhvdXRTdWZmaXgpO1xufVxuZnVuY3Rpb24gcmVsYXRpdmVTZWNvbmRzKG51bWJlciwgd2l0aG91dFN1ZmZpeCkge1xuICAgIHJldHVybiB3aXRob3V0U3VmZml4ID8gJ2Rhxb5hcyBzZWt1bmRlcycgOiAnZGHFvsSBbSBzZWt1bmTEk20nO1xufVxuXG52YXIgbHYgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdsdicsIHtcbiAgICBtb250aHMgOiAnamFudsSBcmlzX2ZlYnJ1xIFyaXNfbWFydHNfYXByxKtsaXNfbWFpanNfasWrbmlqc19qxatsaWpzX2F1Z3VzdHNfc2VwdGVtYnJpc19va3RvYnJpc19ub3ZlbWJyaXNfZGVjZW1icmlzJy5zcGxpdCgnXycpLFxuICAgIG1vbnRoc1Nob3J0IDogJ2phbl9mZWJfbWFyX2Fwcl9tYWlfasWrbl9qxatsX2F1Z19zZXBfb2t0X25vdl9kZWMnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXMgOiAnc3bEk3RkaWVuYV9waXJtZGllbmFfb3RyZGllbmFfdHJlxaFkaWVuYV9jZXR1cnRkaWVuYV9waWVrdGRpZW5hX3Nlc3RkaWVuYScuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1Nob3J0IDogJ1N2X1BfT19UX0NfUGtfUycuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c01pbiA6ICdTdl9QX09fVF9DX1BrX1MnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICBMIDogJ0RELk1NLllZWVkuJyxcbiAgICAgICAgTEwgOiAnWVlZWS4gW2dhZGFdIEQuIE1NTU0nLFxuICAgICAgICBMTEwgOiAnWVlZWS4gW2dhZGFdIEQuIE1NTU0sIEhIOm1tJyxcbiAgICAgICAgTExMTCA6ICdZWVlZLiBbZ2FkYV0gRC4gTU1NTSwgZGRkZCwgSEg6bW0nXG4gICAgfSxcbiAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgc2FtZURheSA6ICdbxaBvZGllbiBwdWxrc3Rlbl0gTFQnLFxuICAgICAgICBuZXh0RGF5IDogJ1tSxKt0IHB1bGtzdGVuXSBMVCcsXG4gICAgICAgIG5leHRXZWVrIDogJ2RkZGQgW3B1bGtzdGVuXSBMVCcsXG4gICAgICAgIGxhc3REYXkgOiAnW1Zha2FyIHB1bGtzdGVuXSBMVCcsXG4gICAgICAgIGxhc3RXZWVrIDogJ1tQYWfEgWp1xaHEgV0gZGRkZCBbcHVsa3N0ZW5dIExUJyxcbiAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICB9LFxuICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgZnV0dXJlIDogJ3DEk2MgJXMnLFxuICAgICAgICBwYXN0IDogJ3Bpcm1zICVzJyxcbiAgICAgICAgcyA6IHJlbGF0aXZlU2Vjb25kcyxcbiAgICAgICAgbSA6IHJlbGF0aXZlVGltZVdpdGhTaW5ndWxhcixcbiAgICAgICAgbW0gOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICBoIDogcmVsYXRpdmVUaW1lV2l0aFNpbmd1bGFyLFxuICAgICAgICBoaCA6IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgIGQgOiByZWxhdGl2ZVRpbWVXaXRoU2luZ3VsYXIsXG4gICAgICAgIGRkIDogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgTSA6IHJlbGF0aXZlVGltZVdpdGhTaW5ndWxhcixcbiAgICAgICAgTU0gOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICB5IDogcmVsYXRpdmVUaW1lV2l0aFNpbmd1bGFyLFxuICAgICAgICB5eSA6IHJlbGF0aXZlVGltZVdpdGhQbHVyYWxcbiAgICB9LFxuICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfVxcLi8sXG4gICAgb3JkaW5hbCA6ICclZC4nLFxuICAgIHdlZWsgOiB7XG4gICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgfVxufSk7XG5cbnJldHVybiBsdjtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBNb250ZW5lZ3JpbiBbbWVdXG4vLyEgYXV0aG9yIDogTWlvZHJhZyBOaWthxI0gPG1pb2RyYWdAcmVzdGFydGl0Lm1lPiA6IGh0dHBzOi8vZ2l0aHViLmNvbS9taW9kcmFnbmlrYWNcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG52YXIgdHJhbnNsYXRvciA9IHtcbiAgICB3b3JkczogeyAvL0RpZmZlcmVudCBncmFtbWF0aWNhbCBjYXNlc1xuICAgICAgICBtOiBbJ2plZGFuIG1pbnV0JywgJ2plZG5vZyBtaW51dGEnXSxcbiAgICAgICAgbW06IFsnbWludXQnLCAnbWludXRhJywgJ21pbnV0YSddLFxuICAgICAgICBoOiBbJ2plZGFuIHNhdCcsICdqZWRub2cgc2F0YSddLFxuICAgICAgICBoaDogWydzYXQnLCAnc2F0YScsICdzYXRpJ10sXG4gICAgICAgIGRkOiBbJ2RhbicsICdkYW5hJywgJ2RhbmEnXSxcbiAgICAgICAgTU06IFsnbWplc2VjJywgJ21qZXNlY2EnLCAnbWplc2VjaSddLFxuICAgICAgICB5eTogWydnb2RpbmEnLCAnZ29kaW5lJywgJ2dvZGluYSddXG4gICAgfSxcbiAgICBjb3JyZWN0R3JhbW1hdGljYWxDYXNlOiBmdW5jdGlvbiAobnVtYmVyLCB3b3JkS2V5KSB7XG4gICAgICAgIHJldHVybiBudW1iZXIgPT09IDEgPyB3b3JkS2V5WzBdIDogKG51bWJlciA+PSAyICYmIG51bWJlciA8PSA0ID8gd29yZEtleVsxXSA6IHdvcmRLZXlbMl0pO1xuICAgIH0sXG4gICAgdHJhbnNsYXRlOiBmdW5jdGlvbiAobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXkpIHtcbiAgICAgICAgdmFyIHdvcmRLZXkgPSB0cmFuc2xhdG9yLndvcmRzW2tleV07XG4gICAgICAgIGlmIChrZXkubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCA/IHdvcmRLZXlbMF0gOiB3b3JkS2V5WzFdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICcgJyArIHRyYW5zbGF0b3IuY29ycmVjdEdyYW1tYXRpY2FsQ2FzZShudW1iZXIsIHdvcmRLZXkpO1xuICAgICAgICB9XG4gICAgfVxufTtcblxudmFyIG1lID0gbW9tZW50LmRlZmluZUxvY2FsZSgnbWUnLCB7XG4gICAgbW9udGhzOiAnamFudWFyX2ZlYnJ1YXJfbWFydF9hcHJpbF9tYWpfanVuX2p1bF9hdmd1c3Rfc2VwdGVtYmFyX29rdG9iYXJfbm92ZW1iYXJfZGVjZW1iYXInLnNwbGl0KCdfJyksXG4gICAgbW9udGhzU2hvcnQ6ICdqYW4uX2ZlYi5fbWFyLl9hcHIuX21hal9qdW5fanVsX2F2Zy5fc2VwLl9va3QuX25vdi5fZGVjLicuc3BsaXQoJ18nKSxcbiAgICBtb250aHNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICB3ZWVrZGF5czogJ25lZGplbGphX3BvbmVkamVsamFrX3V0b3Jha19zcmlqZWRhX8SNZXR2cnRha19wZXRha19zdWJvdGEnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNTaG9ydDogJ25lZC5fcG9uLl91dG8uX3NyaS5fxI1ldC5fcGV0Ll9zdWIuJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzTWluOiAnbmVfcG9fdXRfc3JfxI1lX3BlX3N1Jy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgTFQ6ICdIOm1tJyxcbiAgICAgICAgTFRTIDogJ0g6bW06c3MnLFxuICAgICAgICBMOiAnREQuTU0uWVlZWScsXG4gICAgICAgIExMOiAnRC4gTU1NTSBZWVlZJyxcbiAgICAgICAgTExMOiAnRC4gTU1NTSBZWVlZIEg6bW0nLFxuICAgICAgICBMTExMOiAnZGRkZCwgRC4gTU1NTSBZWVlZIEg6bW0nXG4gICAgfSxcbiAgICBjYWxlbmRhcjoge1xuICAgICAgICBzYW1lRGF5OiAnW2RhbmFzIHVdIExUJyxcbiAgICAgICAgbmV4dERheTogJ1tzanV0cmEgdV0gTFQnLFxuXG4gICAgICAgIG5leHRXZWVrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHRoaXMuZGF5KCkpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3VdIFtuZWRqZWxqdV0gW3VdIExUJztcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3VdIFtzcmlqZWR1XSBbdV0gTFQnO1xuICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbdV0gW3N1Ym90dV0gW3VdIExUJztcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3VdIGRkZGQgW3VdIExUJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbGFzdERheSAgOiAnW2p1xI1lIHVdIExUJyxcbiAgICAgICAgbGFzdFdlZWsgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgbGFzdFdlZWtEYXlzID0gW1xuICAgICAgICAgICAgICAgICdbcHJvxaFsZV0gW25lZGplbGplXSBbdV0gTFQnLFxuICAgICAgICAgICAgICAgICdbcHJvxaFsb2ddIFtwb25lZGplbGprYV0gW3VdIExUJyxcbiAgICAgICAgICAgICAgICAnW3Byb8WhbG9nXSBbdXRvcmthXSBbdV0gTFQnLFxuICAgICAgICAgICAgICAgICdbcHJvxaFsZV0gW3NyaWplZGVdIFt1XSBMVCcsXG4gICAgICAgICAgICAgICAgJ1twcm/FoWxvZ10gW8SNZXR2cnRrYV0gW3VdIExUJyxcbiAgICAgICAgICAgICAgICAnW3Byb8WhbG9nXSBbcGV0a2FdIFt1XSBMVCcsXG4gICAgICAgICAgICAgICAgJ1twcm/FoWxlXSBbc3Vib3RlXSBbdV0gTFQnXG4gICAgICAgICAgICBdO1xuICAgICAgICAgICAgcmV0dXJuIGxhc3RXZWVrRGF5c1t0aGlzLmRheSgpXTtcbiAgICAgICAgfSxcbiAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICB9LFxuICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgZnV0dXJlIDogJ3phICVzJyxcbiAgICAgICAgcGFzdCAgIDogJ3ByaWplICVzJyxcbiAgICAgICAgcyAgICAgIDogJ25la29saWtvIHNla3VuZGknLFxuICAgICAgICBtICAgICAgOiB0cmFuc2xhdG9yLnRyYW5zbGF0ZSxcbiAgICAgICAgbW0gICAgIDogdHJhbnNsYXRvci50cmFuc2xhdGUsXG4gICAgICAgIGggICAgICA6IHRyYW5zbGF0b3IudHJhbnNsYXRlLFxuICAgICAgICBoaCAgICAgOiB0cmFuc2xhdG9yLnRyYW5zbGF0ZSxcbiAgICAgICAgZCAgICAgIDogJ2RhbicsXG4gICAgICAgIGRkICAgICA6IHRyYW5zbGF0b3IudHJhbnNsYXRlLFxuICAgICAgICBNICAgICAgOiAnbWplc2VjJyxcbiAgICAgICAgTU0gICAgIDogdHJhbnNsYXRvci50cmFuc2xhdGUsXG4gICAgICAgIHkgICAgICA6ICdnb2RpbnUnLFxuICAgICAgICB5eSAgICAgOiB0cmFuc2xhdG9yLnRyYW5zbGF0ZVxuICAgIH0sXG4gICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9XFwuLyxcbiAgICBvcmRpbmFsIDogJyVkLicsXG4gICAgd2VlayA6IHtcbiAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgIGRveSA6IDcgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDFzdCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICB9XG59KTtcblxucmV0dXJuIG1lO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IE1hb3JpIFttaV1cbi8vISBhdXRob3IgOiBKb2huIENvcnJpZ2FuIDxyb2JiaWVjbG9zZXRAZ21haWwuY29tPiA6IGh0dHBzOi8vZ2l0aHViLmNvbS9qb2huaWRlYWxcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG52YXIgbWkgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdtaScsIHtcbiAgICBtb250aHM6ICdLb2hpLXTEgXRlX0h1aS10YW5ndXJ1X1BvdXTFqy10ZS1yYW5naV9QYWVuZ2Etd2jEgXdoxIFfSGFyYXR1YV9QaXBpcmlfSMWNbmdvaW5nb2lfSGVyZS10dXJpLWvFjWvEgV9NYWh1cnVfV2hpcmluZ2EtxIEtbnVrdV9XaGlyaW5nYS3EgS1yYW5naV9IYWtpaGVhJy5zcGxpdCgnXycpLFxuICAgIG1vbnRoc1Nob3J0OiAnS29oaV9IdWlfUG91X1BhZV9IYXJhX1BpcGlfSMWNbmdvaV9IZXJlX01haHVfV2hpLW51X1doaS1yYV9IYWtpJy5zcGxpdCgnXycpLFxuICAgIG1vbnRoc1JlZ2V4OiAvKD86WydhLXpcXHUwMTAxXFx1MDE0RFxcdTAxNkJdK1xcLT8pezEsM30vaSxcbiAgICBtb250aHNTdHJpY3RSZWdleDogLyg/OlsnYS16XFx1MDEwMVxcdTAxNERcXHUwMTZCXStcXC0/KXsxLDN9L2ksXG4gICAgbW9udGhzU2hvcnRSZWdleDogLyg/OlsnYS16XFx1MDEwMVxcdTAxNERcXHUwMTZCXStcXC0/KXsxLDN9L2ksXG4gICAgbW9udGhzU2hvcnRTdHJpY3RSZWdleDogLyg/OlsnYS16XFx1MDEwMVxcdTAxNERcXHUwMTZCXStcXC0/KXsxLDJ9L2ksXG4gICAgd2Vla2RheXM6ICdSxIF0YXB1X01hbmVfVMWrcmVpX1dlbmVyZWlfVMSBaXRlX1BhcmFpcmVfSMSBdGFyZWknLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNTaG9ydDogJ1RhX01hX1TFq19XZV9UxIFpX1BhX0jEgScuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c01pbjogJ1RhX01hX1TFq19XZV9UxIFpX1BhX0jEgScuc3BsaXQoJ18nKSxcbiAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICBMOiAnREQvTU0vWVlZWScsXG4gICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSBbaV0gSEg6bW0nLFxuICAgICAgICBMTExMOiAnZGRkZCwgRCBNTU1NIFlZWVkgW2ldIEhIOm1tJ1xuICAgIH0sXG4gICAgY2FsZW5kYXI6IHtcbiAgICAgICAgc2FtZURheTogJ1tpIHRlaWUgbWFoYW5hLCBpXSBMVCcsXG4gICAgICAgIG5leHREYXk6ICdbYXBvcG8gaV0gTFQnLFxuICAgICAgICBuZXh0V2VlazogJ2RkZGQgW2ldIExUJyxcbiAgICAgICAgbGFzdERheTogJ1tpbmFuYWhpIGldIExUJyxcbiAgICAgICAgbGFzdFdlZWs6ICdkZGRkIFt3aGFrYW11dHVuZ2EgaV0gTFQnLFxuICAgICAgICBzYW1lRWxzZTogJ0wnXG4gICAgfSxcbiAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgZnV0dXJlOiAnaSByb3RvIGkgJXMnLFxuICAgICAgICBwYXN0OiAnJXMgaSBtdWEnLFxuICAgICAgICBzOiAndGUgaMSTa29uYSBydWFydWEnLFxuICAgICAgICBtOiAnaGUgbWVuZXRpJyxcbiAgICAgICAgbW06ICclZCBtZW5ldGknLFxuICAgICAgICBoOiAndGUgaGFvcmEnLFxuICAgICAgICBoaDogJyVkIGhhb3JhJyxcbiAgICAgICAgZDogJ2hlIHJhJyxcbiAgICAgICAgZGQ6ICclZCByYScsXG4gICAgICAgIE06ICdoZSBtYXJhbWEnLFxuICAgICAgICBNTTogJyVkIG1hcmFtYScsXG4gICAgICAgIHk6ICdoZSB0YXUnLFxuICAgICAgICB5eTogJyVkIHRhdSdcbiAgICB9LFxuICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfcK6LyxcbiAgICBvcmRpbmFsOiAnJWTCuicsXG4gICAgd2VlayA6IHtcbiAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICB9XG59KTtcblxucmV0dXJuIG1pO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IE1hY2Vkb25pYW4gW21rXVxuLy8hIGF1dGhvciA6IEJvcmlzbGF2IE1pY2tvdiA6IGh0dHBzOi8vZ2l0aHViLmNvbS9CMGswXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxudmFyIG1rID0gbW9tZW50LmRlZmluZUxvY2FsZSgnbWsnLCB7XG4gICAgbW9udGhzIDogJ9GY0LDQvdGD0LDRgNC4X9GE0LXQstGA0YPQsNGA0Lhf0LzQsNGA0YJf0LDQv9GA0LjQu1/QvNCw0Zhf0ZjRg9C90Lhf0ZjRg9C70Lhf0LDQstCz0YPRgdGCX9GB0LXQv9GC0LXQvNCy0YDQuF/QvtC60YLQvtC80LLRgNC4X9C90L7QtdC80LLRgNC4X9C00LXQutC10LzQstGA0LgnLnNwbGl0KCdfJyksXG4gICAgbW9udGhzU2hvcnQgOiAn0ZjQsNC9X9GE0LXQsl/QvNCw0YBf0LDQv9GAX9C80LDRmF/RmNGD0L1f0ZjRg9C7X9Cw0LLQs1/RgdC10L9f0L7QutGCX9C90L7QtV/QtNC10LonLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXMgOiAn0L3QtdC00LXQu9CwX9C/0L7QvdC10LTQtdC70L3QuNC6X9Cy0YLQvtGA0L3QuNC6X9GB0YDQtdC00LBf0YfQtdGC0LLRgNGC0L7Qul/Qv9C10YLQvtC6X9GB0LDQsdC+0YLQsCcuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1Nob3J0IDogJ9C90LXQtF/Qv9C+0L1f0LLRgtC+X9GB0YDQtV/Rh9C10YJf0L/QtdGCX9GB0LDQsScuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c01pbiA6ICfQvWVf0L9vX9Cy0YJf0YHRgF/Rh9C1X9C/0LVf0YFhJy5zcGxpdCgnXycpLFxuICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICBMVCA6ICdIOm1tJyxcbiAgICAgICAgTFRTIDogJ0g6bW06c3MnLFxuICAgICAgICBMIDogJ0QuTU0uWVlZWScsXG4gICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIEg6bW0nLFxuICAgICAgICBMTExMIDogJ2RkZGQsIEQgTU1NTSBZWVlZIEg6bW0nXG4gICAgfSxcbiAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgc2FtZURheSA6ICdb0JTQtdC90LXRgSDQstC+XSBMVCcsXG4gICAgICAgIG5leHREYXkgOiAnW9Cj0YLRgNC1INCy0L5dIExUJyxcbiAgICAgICAgbmV4dFdlZWsgOiAnW9CS0L5dIGRkZGQgW9Cy0L5dIExUJyxcbiAgICAgICAgbGFzdERheSA6ICdb0JLRh9C10YDQsCDQstC+XSBMVCcsXG4gICAgICAgIGxhc3RXZWVrIDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgc3dpdGNoICh0aGlzLmRheSgpKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnW9CY0LfQvNC40L3QsNGC0LDRgtCwXSBkZGRkIFvQstC+XSBMVCc7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1vQmNC30LzQuNC90LDRgtC40L7Rgl0gZGRkZCBb0LLQvl0gTFQnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgIH0sXG4gICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICBmdXR1cmUgOiAn0L/QvtGB0LvQtSAlcycsXG4gICAgICAgIHBhc3QgOiAn0L/RgNC10LQgJXMnLFxuICAgICAgICBzIDogJ9C90LXQutC+0LvQutGDINGB0LXQutGD0L3QtNC4JyxcbiAgICAgICAgbSA6ICfQvNC40L3Rg9GC0LAnLFxuICAgICAgICBtbSA6ICclZCDQvNC40L3Rg9GC0LgnLFxuICAgICAgICBoIDogJ9GH0LDRgScsXG4gICAgICAgIGhoIDogJyVkINGH0LDRgdCwJyxcbiAgICAgICAgZCA6ICfQtNC10L0nLFxuICAgICAgICBkZCA6ICclZCDQtNC10L3QsCcsXG4gICAgICAgIE0gOiAn0LzQtdGB0LXRhicsXG4gICAgICAgIE1NIDogJyVkINC80LXRgdC10YbQuCcsXG4gICAgICAgIHkgOiAn0LPQvtC00LjQvdCwJyxcbiAgICAgICAgeXkgOiAnJWQg0LPQvtC00LjQvdC4J1xuICAgIH0sXG4gICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9LSjQtdCyfNC10L180YLQuHzQstC4fNGA0Lh80LzQuCkvLFxuICAgIG9yZGluYWwgOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgIHZhciBsYXN0RGlnaXQgPSBudW1iZXIgJSAxMCxcbiAgICAgICAgICAgIGxhc3QyRGlnaXRzID0gbnVtYmVyICUgMTAwO1xuICAgICAgICBpZiAobnVtYmVyID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJy3QtdCyJztcbiAgICAgICAgfSBlbHNlIGlmIChsYXN0MkRpZ2l0cyA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICct0LXQvSc7XG4gICAgICAgIH0gZWxzZSBpZiAobGFzdDJEaWdpdHMgPiAxMCAmJiBsYXN0MkRpZ2l0cyA8IDIwKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJy3RgtC4JztcbiAgICAgICAgfSBlbHNlIGlmIChsYXN0RGlnaXQgPT09IDEpIHtcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnLdCy0LgnO1xuICAgICAgICB9IGVsc2UgaWYgKGxhc3REaWdpdCA9PT0gMikge1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICct0YDQuCc7XG4gICAgICAgIH0gZWxzZSBpZiAobGFzdERpZ2l0ID09PSA3IHx8IGxhc3REaWdpdCA9PT0gOCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICct0LzQuCc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJy3RgtC4JztcbiAgICAgICAgfVxuICAgIH0sXG4gICAgd2VlayA6IHtcbiAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgIGRveSA6IDcgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDFzdCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICB9XG59KTtcblxucmV0dXJuIG1rO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IE1hbGF5YWxhbSBbbWxdXG4vLyEgYXV0aG9yIDogRmxveWQgUGluayA6IGh0dHBzOi8vZ2l0aHViLmNvbS9mbG95ZHBpbmtcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG52YXIgbWwgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdtbCcsIHtcbiAgICBtb250aHMgOiAn4LSc4LSo4LWB4LS14LSw4LS/X+C0q+C1huC0rOC1jeC0sOC1geC0teC0sOC0v1/gtK7gtL7gtbzgtJrgtY3gtJrgtY1f4LSP4LSq4LWN4LSw4LS/4LW9X+C0ruC1h+C0r+C1jV/gtJzgtYLgtbpf4LSc4LWC4LSy4LWIX+C0k+C0l+C0uOC1jeC0seC1jeC0seC1jV/gtLjgtYbgtKrgtY3gtLHgtY3gtLHgtILgtKzgtbxf4LSS4LSV4LWN4LSf4LWL4LSs4LW8X+C0qOC0teC0guC0rOC1vF/gtKHgtL/gtLjgtILgtKzgtbwnLnNwbGl0KCdfJyksXG4gICAgbW9udGhzU2hvcnQgOiAn4LSc4LSo4LWBLl/gtKvgtYbgtKzgtY3gtLDgtYEuX+C0ruC0vuC1vC5f4LSP4LSq4LWN4LSw4LS/Ll/gtK7gtYfgtK/gtY1f4LSc4LWC4LW6X+C0nOC1guC0suC1iC5f4LST4LSXLl/gtLjgtYbgtKrgtY3gtLHgtY3gtLEuX+C0kuC0leC1jeC0n+C1iy5f4LSo4LS14LSCLl/gtKHgtL/gtLjgtIIuJy5zcGxpdCgnXycpLFxuICAgIG1vbnRoc1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgIHdlZWtkYXlzIDogJ+C0nuC0vuC0r+C0seC0vuC0tOC1jeC0ml/gtKTgtL/gtJngtY3gtJXgtLPgtL7gtLTgtY3gtJpf4LSa4LWK4LS14LWN4LS14LS+4LS04LWN4LSaX+C0rOC1geC0p+C0qOC0vuC0tOC1jeC0ml/gtLXgtY3gtK/gtL7gtLTgtL7gtLTgtY3gtJpf4LS14LWG4LSz4LWN4LSz4LS/4LSv4LS+4LS04LWN4LSaX+C0tuC0qOC0v+C0r+C0vuC0tOC1jeC0micuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1Nob3J0IDogJ+C0nuC0vuC0r+C1vF/gtKTgtL/gtJngtY3gtJXgtb5f4LSa4LWK4LS14LWN4LS1X+C0rOC1geC0p+C1u1/gtLXgtY3gtK/gtL7gtLTgtIJf4LS14LWG4LSz4LWN4LSz4LS/X+C0tuC0qOC0vycuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c01pbiA6ICfgtJ7gtL5f4LSk4LS/X+C0muC1il/gtKzgtYFf4LS14LWN4LSv4LS+X+C0teC1hl/gtLYnLnNwbGl0KCdfJyksXG4gICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgIExUIDogJ0EgaDptbSAt4LSo4LWBJyxcbiAgICAgICAgTFRTIDogJ0EgaDptbTpzcyAt4LSo4LWBJyxcbiAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVksIEEgaDptbSAt4LSo4LWBJyxcbiAgICAgICAgTExMTCA6ICdkZGRkLCBEIE1NTU0gWVlZWSwgQSBoOm1tIC3gtKjgtYEnXG4gICAgfSxcbiAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgc2FtZURheSA6ICdb4LSH4LSo4LWN4LSo4LWNXSBMVCcsXG4gICAgICAgIG5leHREYXkgOiAnW+C0qOC0vuC0s+C1hl0gTFQnLFxuICAgICAgICBuZXh0V2VlayA6ICdkZGRkLCBMVCcsXG4gICAgICAgIGxhc3REYXkgOiAnW+C0h+C0qOC1jeC0qOC0suC1hl0gTFQnLFxuICAgICAgICBsYXN0V2VlayA6ICdb4LSV4LS04LS/4LSe4LWN4LSeXSBkZGRkLCBMVCcsXG4gICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgfSxcbiAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgIGZ1dHVyZSA6ICclcyDgtJXgtLTgtL/gtJ7gtY3gtJ7gtY0nLFxuICAgICAgICBwYXN0IDogJyVzIOC0ruC1geC1u+C0quC1jScsXG4gICAgICAgIHMgOiAn4LSF4LW94LSqIOC0qOC0v+C0ruC0v+C0t+C0meC1jeC0meC1vicsXG4gICAgICAgIG0gOiAn4LSS4LSw4LWBIOC0ruC0v+C0qOC0v+C0seC1jeC0seC1jScsXG4gICAgICAgIG1tIDogJyVkIOC0ruC0v+C0qOC0v+C0seC1jeC0seC1jScsXG4gICAgICAgIGggOiAn4LSS4LSw4LWBIOC0ruC0o+C0v+C0leC1jeC0leC1guC1vCcsXG4gICAgICAgIGhoIDogJyVkIOC0ruC0o+C0v+C0leC1jeC0leC1guC1vCcsXG4gICAgICAgIGQgOiAn4LSS4LSw4LWBIOC0puC0v+C0teC0uOC0gicsXG4gICAgICAgIGRkIDogJyVkIOC0puC0v+C0teC0uOC0gicsXG4gICAgICAgIE0gOiAn4LSS4LSw4LWBIOC0ruC0vuC0uOC0gicsXG4gICAgICAgIE1NIDogJyVkIOC0ruC0vuC0uOC0gicsXG4gICAgICAgIHkgOiAn4LSS4LSw4LWBIOC0teC1vOC0t+C0gicsXG4gICAgICAgIHl5IDogJyVkIOC0teC1vOC0t+C0gidcbiAgICB9LFxuICAgIG1lcmlkaWVtUGFyc2U6IC/gtLDgtL7gtKTgtY3gtLDgtL984LSw4LS+4LS14LS/4LSy4LWGfOC0ieC0muC1jeC0miDgtJXgtLTgtL/gtJ7gtY3gtJ7gtY184LS14LWI4LSV4LWB4LSo4LWN4LSo4LWH4LSw4LSCfOC0sOC0vuC0pOC1jeC0sOC0vy9pLFxuICAgIG1lcmlkaWVtSG91ciA6IGZ1bmN0aW9uIChob3VyLCBtZXJpZGllbSkge1xuICAgICAgICBpZiAoaG91ciA9PT0gMTIpIHtcbiAgICAgICAgICAgIGhvdXIgPSAwO1xuICAgICAgICB9XG4gICAgICAgIGlmICgobWVyaWRpZW0gPT09ICfgtLDgtL7gtKTgtY3gtLDgtL8nICYmIGhvdXIgPj0gNCkgfHxcbiAgICAgICAgICAgICAgICBtZXJpZGllbSA9PT0gJ+C0ieC0muC1jeC0miDgtJXgtLTgtL/gtJ7gtY3gtJ7gtY0nIHx8XG4gICAgICAgICAgICAgICAgbWVyaWRpZW0gPT09ICfgtLXgtYjgtJXgtYHgtKjgtY3gtKjgtYfgtLDgtIInKSB7XG4gICAgICAgICAgICByZXR1cm4gaG91ciArIDEyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIG1lcmlkaWVtIDogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICBpZiAoaG91ciA8IDQpIHtcbiAgICAgICAgICAgIHJldHVybiAn4LSw4LS+4LSk4LWN4LSw4LS/JztcbiAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTIpIHtcbiAgICAgICAgICAgIHJldHVybiAn4LSw4LS+4LS14LS/4LSy4LWGJztcbiAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTcpIHtcbiAgICAgICAgICAgIHJldHVybiAn4LSJ4LSa4LWN4LSaIOC0leC0tOC0v+C0nuC1jeC0nuC1jSc7XG4gICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDIwKSB7XG4gICAgICAgICAgICByZXR1cm4gJ+C0teC1iOC0leC1geC0qOC1jeC0qOC1h+C0sOC0gic7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gJ+C0sOC0vuC0pOC1jeC0sOC0vyc7XG4gICAgICAgIH1cbiAgICB9XG59KTtcblxucmV0dXJuIG1sO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IE1hcmF0aGkgW21yXVxuLy8hIGF1dGhvciA6IEhhcnNoYWQgS2FsZSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9rYWxlaHZcbi8vISBhdXRob3IgOiBWaXZlayBBdGhhbHllIDogaHR0cHM6Ly9naXRodWIuY29tL3ZuYXRoYWx5ZVxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciBzeW1ib2xNYXAgPSB7XG4gICAgJzEnOiAn4KWnJyxcbiAgICAnMic6ICfgpagnLFxuICAgICczJzogJ+ClqScsXG4gICAgJzQnOiAn4KWqJyxcbiAgICAnNSc6ICfgpasnLFxuICAgICc2JzogJ+ClrCcsXG4gICAgJzcnOiAn4KWtJyxcbiAgICAnOCc6ICfgpa4nLFxuICAgICc5JzogJ+ClrycsXG4gICAgJzAnOiAn4KWmJ1xufTtcbnZhciBudW1iZXJNYXAgPSB7XG4gICAgJ+Clpyc6ICcxJyxcbiAgICAn4KWoJzogJzInLFxuICAgICfgpaknOiAnMycsXG4gICAgJ+Clqic6ICc0JyxcbiAgICAn4KWrJzogJzUnLFxuICAgICfgpawnOiAnNicsXG4gICAgJ+ClrSc6ICc3JyxcbiAgICAn4KWuJzogJzgnLFxuICAgICfgpa8nOiAnOScsXG4gICAgJ+Clpic6ICcwJ1xufTtcblxuZnVuY3Rpb24gcmVsYXRpdmVUaW1lTXIobnVtYmVyLCB3aXRob3V0U3VmZml4LCBzdHJpbmcsIGlzRnV0dXJlKVxue1xuICAgIHZhciBvdXRwdXQgPSAnJztcbiAgICBpZiAod2l0aG91dFN1ZmZpeCkge1xuICAgICAgICBzd2l0Y2ggKHN0cmluZykge1xuICAgICAgICAgICAgY2FzZSAncyc6IG91dHB1dCA9ICfgpJXgpL7gpLngpYAg4KS44KWH4KSV4KSC4KSmJzsgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdtJzogb3V0cHV0ID0gJ+Ckj+CklSDgpK7gpL/gpKjgpL/gpJ8nOyBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ21tJzogb3V0cHV0ID0gJyVkIOCkruCkv+CkqOCkv+Ckn+Clhyc7IGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnaCc6IG91dHB1dCA9ICfgpI/gpJUg4KSk4KS+4KS4JzsgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdoaCc6IG91dHB1dCA9ICclZCDgpKTgpL7gpLgnOyBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2QnOiBvdXRwdXQgPSAn4KSP4KSVIOCkpuCkv+CkteCkuCc7IGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnZGQnOiBvdXRwdXQgPSAnJWQg4KSm4KS/4KS14KS4JzsgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdNJzogb3V0cHV0ID0gJ+Ckj+CklSDgpK7gpLngpL/gpKjgpL4nOyBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ01NJzogb3V0cHV0ID0gJyVkIOCkruCkueCkv+CkqOClhyc7IGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAneSc6IG91dHB1dCA9ICfgpI/gpJUg4KS14KSw4KWN4KS3JzsgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICd5eSc6IG91dHB1dCA9ICclZCDgpLXgpLDgpY3gpLfgpYcnOyBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgc3dpdGNoIChzdHJpbmcpIHtcbiAgICAgICAgICAgIGNhc2UgJ3MnOiBvdXRwdXQgPSAn4KSV4KS+4KS54KWAIOCkuOClh+CkleCkguCkpuCkvuCkgic7IGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnbSc6IG91dHB1dCA9ICfgpI/gpJXgpL4g4KSu4KS/4KSo4KS/4KSf4KS+JzsgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdtbSc6IG91dHB1dCA9ICclZCDgpK7gpL/gpKjgpL/gpJ/gpL7gpIInOyBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2gnOiBvdXRwdXQgPSAn4KSP4KSV4KS+IOCkpOCkvuCkuOCkvic7IGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnaGgnOiBvdXRwdXQgPSAnJWQg4KSk4KS+4KS44KS+4KSCJzsgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdkJzogb3V0cHV0ID0gJ+Ckj+CkleCkviDgpKbgpL/gpLXgpLjgpL4nOyBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2RkJzogb3V0cHV0ID0gJyVkIOCkpuCkv+CkteCkuOCkvuCkgic7IGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnTSc6IG91dHB1dCA9ICfgpI/gpJXgpL4g4KSu4KS54KS/4KSo4KWN4KSv4KS+JzsgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdNTSc6IG91dHB1dCA9ICclZCDgpK7gpLngpL/gpKjgpY3gpK/gpL7gpIInOyBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3knOiBvdXRwdXQgPSAn4KSP4KSV4KS+IOCkteCksOCljeCkt+Ckvic7IGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAneXknOiBvdXRwdXQgPSAnJWQg4KS14KSw4KWN4KS34KS+4KSCJzsgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG91dHB1dC5yZXBsYWNlKC8lZC9pLCBudW1iZXIpO1xufVxuXG52YXIgbXIgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdtcicsIHtcbiAgICBtb250aHMgOiAn4KSc4KS+4KSo4KWH4KS14KS+4KSw4KWAX+Ckq+Clh+CkrOCljeCksOClgeCkteCkvuCksOClgF/gpK7gpL7gpLDgpY3gpJpf4KSP4KSq4KWN4KSw4KS/4KSyX+CkruClh1/gpJzgpYLgpKhf4KSc4KWB4KSy4KWIX+CkkeCkl+CkuOCljeCkn1/gpLjgpKrgpY3gpJ/gpYfgpILgpKzgpLBf4KSR4KSV4KWN4KSf4KWL4KSs4KSwX+CkqOCli+CkteCljeCkueClh+CkguCkrOCksF/gpKHgpL/gpLjgpYfgpILgpKzgpLAnLnNwbGl0KCdfJyksXG4gICAgbW9udGhzU2hvcnQ6ICfgpJzgpL7gpKjgpYcuX+Ckq+Clh+CkrOCljeCksOClgS5f4KSu4KS+4KSw4KWN4KSaLl/gpI/gpKrgpY3gpLDgpL8uX+CkruClhy5f4KSc4KWC4KSoLl/gpJzgpYHgpLLgpYguX+CkkeCkly5f4KS44KSq4KWN4KSf4KWH4KSCLl/gpJHgpJXgpY3gpJ/gpYsuX+CkqOCli+CkteCljeCkueClh+Ckgi5f4KSh4KS/4KS44KWH4KSCLicuc3BsaXQoJ18nKSxcbiAgICBtb250aHNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICB3ZWVrZGF5cyA6ICfgpLDgpLXgpL/gpLXgpL7gpLBf4KS44KWL4KSu4KS14KS+4KSwX+CkruCkguCkl+Cks+CkteCkvuCksF/gpKzgpYHgpKfgpLXgpL7gpLBf4KSX4KWB4KSw4KWC4KS14KS+4KSwX+CktuClgeCkleCljeCksOCkteCkvuCksF/gpLbgpKjgpL/gpLXgpL7gpLAnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNTaG9ydCA6ICfgpLDgpLXgpL9f4KS44KWL4KSuX+CkruCkguCkl+Cks1/gpKzgpYHgpKdf4KSX4KWB4KSw4KWCX+CktuClgeCkleCljeCksF/gpLbgpKjgpL8nLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNNaW4gOiAn4KSwX+CkuOCli1/gpK7gpIJf4KSs4KWBX+Ckl+ClgV/gpLbgpYFf4KS2Jy5zcGxpdCgnXycpLFxuICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICBMVCA6ICdBIGg6bW0g4KS14KS+4KSc4KSk4KS+JyxcbiAgICAgICAgTFRTIDogJ0EgaDptbTpzcyDgpLXgpL7gpJzgpKTgpL4nLFxuICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSwgQSBoOm1tIOCkteCkvuCknOCkpOCkvicsXG4gICAgICAgIExMTEwgOiAnZGRkZCwgRCBNTU1NIFlZWVksIEEgaDptbSDgpLXgpL7gpJzgpKTgpL4nXG4gICAgfSxcbiAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgc2FtZURheSA6ICdb4KSG4KScXSBMVCcsXG4gICAgICAgIG5leHREYXkgOiAnW+CkieCkpuCljeCkr+Ckvl0gTFQnLFxuICAgICAgICBuZXh0V2VlayA6ICdkZGRkLCBMVCcsXG4gICAgICAgIGxhc3REYXkgOiAnW+CkleCkvuCksl0gTFQnLFxuICAgICAgICBsYXN0V2VlazogJ1vgpK7gpL7gpJfgpYDgpLJdIGRkZGQsIExUJyxcbiAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICB9LFxuICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgZnV0dXJlOiAnJXPgpK7gpKfgpY3gpK/gpYcnLFxuICAgICAgICBwYXN0OiAnJXPgpKrgpYLgpLDgpY3gpLXgpYAnLFxuICAgICAgICBzOiByZWxhdGl2ZVRpbWVNcixcbiAgICAgICAgbTogcmVsYXRpdmVUaW1lTXIsXG4gICAgICAgIG1tOiByZWxhdGl2ZVRpbWVNcixcbiAgICAgICAgaDogcmVsYXRpdmVUaW1lTXIsXG4gICAgICAgIGhoOiByZWxhdGl2ZVRpbWVNcixcbiAgICAgICAgZDogcmVsYXRpdmVUaW1lTXIsXG4gICAgICAgIGRkOiByZWxhdGl2ZVRpbWVNcixcbiAgICAgICAgTTogcmVsYXRpdmVUaW1lTXIsXG4gICAgICAgIE1NOiByZWxhdGl2ZVRpbWVNcixcbiAgICAgICAgeTogcmVsYXRpdmVUaW1lTXIsXG4gICAgICAgIHl5OiByZWxhdGl2ZVRpbWVNclxuICAgIH0sXG4gICAgcHJlcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9b4KWn4KWo4KWp4KWq4KWr4KWs4KWt4KWu4KWv4KWmXS9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgIHJldHVybiBudW1iZXJNYXBbbWF0Y2hdO1xuICAgICAgICB9KTtcbiAgICB9LFxuICAgIHBvc3Rmb3JtYXQ6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9cXGQvZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICByZXR1cm4gc3ltYm9sTWFwW21hdGNoXTtcbiAgICAgICAgfSk7XG4gICAgfSxcbiAgICBtZXJpZGllbVBhcnNlOiAv4KSw4KS+4KSk4KWN4KSw4KWAfOCkuOCkleCkvuCks+ClgHzgpKbgpYHgpKrgpL7gpLDgpYB84KS44KS+4KSv4KSC4KSV4KS+4KSz4KWALyxcbiAgICBtZXJpZGllbUhvdXIgOiBmdW5jdGlvbiAoaG91ciwgbWVyaWRpZW0pIHtcbiAgICAgICAgaWYgKGhvdXIgPT09IDEyKSB7XG4gICAgICAgICAgICBob3VyID0gMDtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVyaWRpZW0gPT09ICfgpLDgpL7gpKTgpY3gpLDgpYAnKSB7XG4gICAgICAgICAgICByZXR1cm4gaG91ciA8IDQgPyBob3VyIDogaG91ciArIDEyO1xuICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn4KS44KSV4KS+4KSz4KWAJykge1xuICAgICAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfgpKbgpYHgpKrgpL7gpLDgpYAnKSB7XG4gICAgICAgICAgICByZXR1cm4gaG91ciA+PSAxMCA/IGhvdXIgOiBob3VyICsgMTI7XG4gICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfgpLjgpL7gpK/gpILgpJXgpL7gpLPgpYAnKSB7XG4gICAgICAgICAgICByZXR1cm4gaG91ciArIDEyO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBtZXJpZGllbTogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICBpZiAoaG91ciA8IDQpIHtcbiAgICAgICAgICAgIHJldHVybiAn4KSw4KS+4KSk4KWN4KSw4KWAJztcbiAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTApIHtcbiAgICAgICAgICAgIHJldHVybiAn4KS44KSV4KS+4KSz4KWAJztcbiAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTcpIHtcbiAgICAgICAgICAgIHJldHVybiAn4KSm4KWB4KSq4KS+4KSw4KWAJztcbiAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMjApIHtcbiAgICAgICAgICAgIHJldHVybiAn4KS44KS+4KSv4KSC4KSV4KS+4KSz4KWAJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAn4KSw4KS+4KSk4KWN4KSw4KWAJztcbiAgICAgICAgfVxuICAgIH0sXG4gICAgd2VlayA6IHtcbiAgICAgICAgZG93IDogMCwgLy8gU3VuZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgIGRveSA6IDYgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDFzdCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICB9XG59KTtcblxucmV0dXJuIG1yO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IE1hbGF5IFttc11cbi8vISBhdXRob3IgOiBXZWxkYW4gSmFtaWxpIDogaHR0cHM6Ly9naXRodWIuY29tL3dlbGRhblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciBtcyA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ21zJywge1xuICAgIG1vbnRocyA6ICdKYW51YXJpX0ZlYnJ1YXJpX01hY19BcHJpbF9NZWlfSnVuX0p1bGFpX09nb3NfU2VwdGVtYmVyX09rdG9iZXJfTm92ZW1iZXJfRGlzZW1iZXInLnNwbGl0KCdfJyksXG4gICAgbW9udGhzU2hvcnQgOiAnSmFuX0ZlYl9NYWNfQXByX01laV9KdW5fSnVsX09nc19TZXBfT2t0X05vdl9EaXMnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXMgOiAnQWhhZF9Jc25pbl9TZWxhc2FfUmFidV9LaGFtaXNfSnVtYWF0X1NhYnR1Jy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzU2hvcnQgOiAnQWhkX0lzbl9TZWxfUmFiX0toYV9KdW1fU2FiJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzTWluIDogJ0FoX0lzX1NsX1JiX0ttX0ptX1NiJy5zcGxpdCgnXycpLFxuICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICBMVCA6ICdISC5tbScsXG4gICAgICAgIExUUyA6ICdISC5tbS5zcycsXG4gICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIFtwdWt1bF0gSEgubW0nLFxuICAgICAgICBMTExMIDogJ2RkZGQsIEQgTU1NTSBZWVlZIFtwdWt1bF0gSEgubW0nXG4gICAgfSxcbiAgICBtZXJpZGllbVBhcnNlOiAvcGFnaXx0ZW5nYWhhcml8cGV0YW5nfG1hbGFtLyxcbiAgICBtZXJpZGllbUhvdXI6IGZ1bmN0aW9uIChob3VyLCBtZXJpZGllbSkge1xuICAgICAgICBpZiAoaG91ciA9PT0gMTIpIHtcbiAgICAgICAgICAgIGhvdXIgPSAwO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXJpZGllbSA9PT0gJ3BhZ2knKSB7XG4gICAgICAgICAgICByZXR1cm4gaG91cjtcbiAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ3RlbmdhaGFyaScpIHtcbiAgICAgICAgICAgIHJldHVybiBob3VyID49IDExID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ3BldGFuZycgfHwgbWVyaWRpZW0gPT09ICdtYWxhbScpIHtcbiAgICAgICAgICAgIHJldHVybiBob3VyICsgMTI7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIG1lcmlkaWVtIDogZnVuY3Rpb24gKGhvdXJzLCBtaW51dGVzLCBpc0xvd2VyKSB7XG4gICAgICAgIGlmIChob3VycyA8IDExKSB7XG4gICAgICAgICAgICByZXR1cm4gJ3BhZ2knO1xuICAgICAgICB9IGVsc2UgaWYgKGhvdXJzIDwgMTUpIHtcbiAgICAgICAgICAgIHJldHVybiAndGVuZ2FoYXJpJztcbiAgICAgICAgfSBlbHNlIGlmIChob3VycyA8IDE5KSB7XG4gICAgICAgICAgICByZXR1cm4gJ3BldGFuZyc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gJ21hbGFtJztcbiAgICAgICAgfVxuICAgIH0sXG4gICAgY2FsZW5kYXIgOiB7XG4gICAgICAgIHNhbWVEYXkgOiAnW0hhcmkgaW5pIHB1a3VsXSBMVCcsXG4gICAgICAgIG5leHREYXkgOiAnW0Vzb2sgcHVrdWxdIExUJyxcbiAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCBbcHVrdWxdIExUJyxcbiAgICAgICAgbGFzdERheSA6ICdbS2VsbWFyaW4gcHVrdWxdIExUJyxcbiAgICAgICAgbGFzdFdlZWsgOiAnZGRkZCBbbGVwYXMgcHVrdWxdIExUJyxcbiAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICB9LFxuICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgZnV0dXJlIDogJ2RhbGFtICVzJyxcbiAgICAgICAgcGFzdCA6ICclcyB5YW5nIGxlcGFzJyxcbiAgICAgICAgcyA6ICdiZWJlcmFwYSBzYWF0JyxcbiAgICAgICAgbSA6ICdzZW1pbml0JyxcbiAgICAgICAgbW0gOiAnJWQgbWluaXQnLFxuICAgICAgICBoIDogJ3NlamFtJyxcbiAgICAgICAgaGggOiAnJWQgamFtJyxcbiAgICAgICAgZCA6ICdzZWhhcmknLFxuICAgICAgICBkZCA6ICclZCBoYXJpJyxcbiAgICAgICAgTSA6ICdzZWJ1bGFuJyxcbiAgICAgICAgTU0gOiAnJWQgYnVsYW4nLFxuICAgICAgICB5IDogJ3NldGFodW4nLFxuICAgICAgICB5eSA6ICclZCB0YWh1bidcbiAgICB9LFxuICAgIHdlZWsgOiB7XG4gICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICBkb3kgOiA3ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiAxc3QgaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgfVxufSk7XG5cbnJldHVybiBtcztcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBNYWxheSBbbXMtbXldXG4vLyEgbm90ZSA6IERFUFJFQ0FURUQsIHRoZSBjb3JyZWN0IG9uZSBpcyBbbXNdXG4vLyEgYXV0aG9yIDogV2VsZGFuIEphbWlsaSA6IGh0dHBzOi8vZ2l0aHViLmNvbS93ZWxkYW5cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG52YXIgbXNNeSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ21zLW15Jywge1xuICAgIG1vbnRocyA6ICdKYW51YXJpX0ZlYnJ1YXJpX01hY19BcHJpbF9NZWlfSnVuX0p1bGFpX09nb3NfU2VwdGVtYmVyX09rdG9iZXJfTm92ZW1iZXJfRGlzZW1iZXInLnNwbGl0KCdfJyksXG4gICAgbW9udGhzU2hvcnQgOiAnSmFuX0ZlYl9NYWNfQXByX01laV9KdW5fSnVsX09nc19TZXBfT2t0X05vdl9EaXMnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXMgOiAnQWhhZF9Jc25pbl9TZWxhc2FfUmFidV9LaGFtaXNfSnVtYWF0X1NhYnR1Jy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzU2hvcnQgOiAnQWhkX0lzbl9TZWxfUmFiX0toYV9KdW1fU2FiJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzTWluIDogJ0FoX0lzX1NsX1JiX0ttX0ptX1NiJy5zcGxpdCgnXycpLFxuICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICBMVCA6ICdISC5tbScsXG4gICAgICAgIExUUyA6ICdISC5tbS5zcycsXG4gICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIFtwdWt1bF0gSEgubW0nLFxuICAgICAgICBMTExMIDogJ2RkZGQsIEQgTU1NTSBZWVlZIFtwdWt1bF0gSEgubW0nXG4gICAgfSxcbiAgICBtZXJpZGllbVBhcnNlOiAvcGFnaXx0ZW5nYWhhcml8cGV0YW5nfG1hbGFtLyxcbiAgICBtZXJpZGllbUhvdXI6IGZ1bmN0aW9uIChob3VyLCBtZXJpZGllbSkge1xuICAgICAgICBpZiAoaG91ciA9PT0gMTIpIHtcbiAgICAgICAgICAgIGhvdXIgPSAwO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXJpZGllbSA9PT0gJ3BhZ2knKSB7XG4gICAgICAgICAgICByZXR1cm4gaG91cjtcbiAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ3RlbmdhaGFyaScpIHtcbiAgICAgICAgICAgIHJldHVybiBob3VyID49IDExID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ3BldGFuZycgfHwgbWVyaWRpZW0gPT09ICdtYWxhbScpIHtcbiAgICAgICAgICAgIHJldHVybiBob3VyICsgMTI7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIG1lcmlkaWVtIDogZnVuY3Rpb24gKGhvdXJzLCBtaW51dGVzLCBpc0xvd2VyKSB7XG4gICAgICAgIGlmIChob3VycyA8IDExKSB7XG4gICAgICAgICAgICByZXR1cm4gJ3BhZ2knO1xuICAgICAgICB9IGVsc2UgaWYgKGhvdXJzIDwgMTUpIHtcbiAgICAgICAgICAgIHJldHVybiAndGVuZ2FoYXJpJztcbiAgICAgICAgfSBlbHNlIGlmIChob3VycyA8IDE5KSB7XG4gICAgICAgICAgICByZXR1cm4gJ3BldGFuZyc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gJ21hbGFtJztcbiAgICAgICAgfVxuICAgIH0sXG4gICAgY2FsZW5kYXIgOiB7XG4gICAgICAgIHNhbWVEYXkgOiAnW0hhcmkgaW5pIHB1a3VsXSBMVCcsXG4gICAgICAgIG5leHREYXkgOiAnW0Vzb2sgcHVrdWxdIExUJyxcbiAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCBbcHVrdWxdIExUJyxcbiAgICAgICAgbGFzdERheSA6ICdbS2VsbWFyaW4gcHVrdWxdIExUJyxcbiAgICAgICAgbGFzdFdlZWsgOiAnZGRkZCBbbGVwYXMgcHVrdWxdIExUJyxcbiAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICB9LFxuICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgZnV0dXJlIDogJ2RhbGFtICVzJyxcbiAgICAgICAgcGFzdCA6ICclcyB5YW5nIGxlcGFzJyxcbiAgICAgICAgcyA6ICdiZWJlcmFwYSBzYWF0JyxcbiAgICAgICAgbSA6ICdzZW1pbml0JyxcbiAgICAgICAgbW0gOiAnJWQgbWluaXQnLFxuICAgICAgICBoIDogJ3NlamFtJyxcbiAgICAgICAgaGggOiAnJWQgamFtJyxcbiAgICAgICAgZCA6ICdzZWhhcmknLFxuICAgICAgICBkZCA6ICclZCBoYXJpJyxcbiAgICAgICAgTSA6ICdzZWJ1bGFuJyxcbiAgICAgICAgTU0gOiAnJWQgYnVsYW4nLFxuICAgICAgICB5IDogJ3NldGFodW4nLFxuICAgICAgICB5eSA6ICclZCB0YWh1bidcbiAgICB9LFxuICAgIHdlZWsgOiB7XG4gICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICBkb3kgOiA3ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiAxc3QgaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgfVxufSk7XG5cbnJldHVybiBtc015O1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEJ1cm1lc2UgW215XVxuLy8hIGF1dGhvciA6IFNxdWFyIHRlYW0sIG15c3F1YXIuY29tXG4vLyEgYXV0aG9yIDogRGF2aWQgUm9zc2VsbGF0IDogaHR0cHM6Ly9naXRodWIuY29tL2dob2xhZHJcbi8vISBhdXRob3IgOiBUaW4gQXVuZyBMaW4gOiBodHRwczovL2dpdGh1Yi5jb20vdGhhbnlhd3ppbm1pblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciBzeW1ib2xNYXAgPSB7XG4gICAgJzEnOiAn4YGBJyxcbiAgICAnMic6ICfhgYInLFxuICAgICczJzogJ+GBgycsXG4gICAgJzQnOiAn4YGEJyxcbiAgICAnNSc6ICfhgYUnLFxuICAgICc2JzogJ+GBhicsXG4gICAgJzcnOiAn4YGHJyxcbiAgICAnOCc6ICfhgYgnLFxuICAgICc5JzogJ+GBiScsXG4gICAgJzAnOiAn4YGAJ1xufTtcbnZhciBudW1iZXJNYXAgPSB7XG4gICAgJ+GBgSc6ICcxJyxcbiAgICAn4YGCJzogJzInLFxuICAgICfhgYMnOiAnMycsXG4gICAgJ+GBhCc6ICc0JyxcbiAgICAn4YGFJzogJzUnLFxuICAgICfhgYYnOiAnNicsXG4gICAgJ+GBhyc6ICc3JyxcbiAgICAn4YGIJzogJzgnLFxuICAgICfhgYknOiAnOScsXG4gICAgJ+GBgCc6ICcwJ1xufTtcblxudmFyIG15ID0gbW9tZW50LmRlZmluZUxvY2FsZSgnbXknLCB7XG4gICAgbW9udGhzOiAn4YCH4YCU4YC64YCU4YCd4YCr4YCb4YCuX+GAluGAseGAluGAseGArOGAuuGAneGAq+GAm+GArl/hgJnhgJDhgLpf4YCn4YCV4YC84YCuX+GAmeGAsV/hgIfhgL3hgJThgLpf4YCH4YCw4YCc4YCt4YCv4YCE4YC6X+GAnuGAvOGAguGAr+GAkOGAul/hgIXhgIDhgLrhgJDhgIThgLrhgJjhgKxf4YCh4YCx4YCs4YCA4YC64YCQ4YCt4YCv4YCY4YCsX+GAlOGAreGAr+GAneGAhOGAuuGAmOGArF/hgJLhgK7hgIfhgIThgLrhgJjhgKwnLnNwbGl0KCdfJyksXG4gICAgbW9udGhzU2hvcnQ6ICfhgIfhgJThgLpf4YCW4YCxX+GAmeGAkOGAul/hgJXhgLzhgK5f4YCZ4YCxX+GAh+GAveGAlOGAul/hgJzhgK3hgK/hgIThgLpf4YCe4YC8X+GAheGAgOGAul/hgKHhgLHhgKzhgIDhgLpf4YCU4YCt4YCvX+GAkuGAricuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5czogJ+GAkOGAlOGAhOGAuuGAueGAguGAlOGAveGAsV/hgJDhgJThgIThgLrhgLnhgJzhgKxf4YCh4YCE4YC64YC54YCC4YCrX+GAl+GAr+GAkuGAueGAk+GAn+GAsOGAuF/hgIDhgLzhgKzhgJ7hgJXhgJDhgLHhgLhf4YCe4YCx4YCs4YCA4YC84YCsX+GAheGAlOGAsScuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1Nob3J0OiAn4YCU4YC94YCxX+GAnOGArF/hgILhgKtf4YCf4YCw4YC4X+GAgOGAvOGArF/hgJ7hgLHhgKxf4YCU4YCxJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzTWluOiAn4YCU4YC94YCxX+GAnOGArF/hgILhgKtf4YCf4YCw4YC4X+GAgOGAvOGArF/hgJ7hgLHhgKxf4YCU4YCxJy5zcGxpdCgnXycpLFxuXG4gICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICBMTExMOiAnZGRkZCBEIE1NTU0gWVlZWSBISDptbSdcbiAgICB9LFxuICAgIGNhbGVuZGFyOiB7XG4gICAgICAgIHNhbWVEYXk6ICdb4YCa4YCU4YCxLl0gTFQgW+GAmeGAvuGArF0nLFxuICAgICAgICBuZXh0RGF5OiAnW+GAmeGAlOGAgOGAuuGAluGAvOGAlOGAul0gTFQgW+GAmeGAvuGArF0nLFxuICAgICAgICBuZXh0V2VlazogJ2RkZGQgTFQgW+GAmeGAvuGArF0nLFxuICAgICAgICBsYXN0RGF5OiAnW+GAmeGAlOGAsS7hgIBdIExUIFvhgJnhgL7hgKxdJyxcbiAgICAgICAgbGFzdFdlZWs6ICdb4YCV4YC84YCu4YC44YCB4YCy4YC34YCe4YCx4YCsXSBkZGRkIExUIFvhgJnhgL7hgKxdJyxcbiAgICAgICAgc2FtZUVsc2U6ICdMJ1xuICAgIH0sXG4gICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgIGZ1dHVyZTogJ+GAnOGArOGAmeGAiuGAuuGAtyAlcyDhgJnhgL7hgKwnLFxuICAgICAgICBwYXN0OiAn4YCc4YC94YCU4YC64YCB4YCy4YC34YCe4YCx4YCsICVzIOGAgCcsXG4gICAgICAgIHM6ICfhgIXhgIDhgLnhgIDhgJThgLou4YCh4YCU4YCK4YC64YC44YCE4YCa4YC6JyxcbiAgICAgICAgbTogJ+GAkOGAheGAuuGAmeGAreGAlOGAheGAuicsXG4gICAgICAgIG1tOiAnJWQg4YCZ4YCt4YCU4YCF4YC6JyxcbiAgICAgICAgaDogJ+GAkOGAheGAuuGAlOGArOGAm+GAricsXG4gICAgICAgIGhoOiAnJWQg4YCU4YCs4YCb4YCuJyxcbiAgICAgICAgZDogJ+GAkOGAheGAuuGAm+GAgOGAuicsXG4gICAgICAgIGRkOiAnJWQg4YCb4YCA4YC6JyxcbiAgICAgICAgTTogJ+GAkOGAheGAuuGAnCcsXG4gICAgICAgIE1NOiAnJWQg4YCcJyxcbiAgICAgICAgeTogJ+GAkOGAheGAuuGAlOGAvuGAheGAuicsXG4gICAgICAgIHl5OiAnJWQg4YCU4YC+4YCF4YC6J1xuICAgIH0sXG4gICAgcHJlcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9b4YGB4YGC4YGD4YGE4YGF4YGG4YGH4YGI4YGJ4YGAXS9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgIHJldHVybiBudW1iZXJNYXBbbWF0Y2hdO1xuICAgICAgICB9KTtcbiAgICB9LFxuICAgIHBvc3Rmb3JtYXQ6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9cXGQvZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICByZXR1cm4gc3ltYm9sTWFwW21hdGNoXTtcbiAgICAgICAgfSk7XG4gICAgfSxcbiAgICB3ZWVrOiB7XG4gICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgIGRveTogNCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiAxc3QgaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgfVxufSk7XG5cbnJldHVybiBteTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBOb3J3ZWdpYW4gQm9rbcOlbCBbbmJdXG4vLyEgYXV0aG9ycyA6IEVzcGVuIEhvdmxhbmRzZGFsIDogaHR0cHM6Ly9naXRodWIuY29tL3JleHhhcnNcbi8vISAgICAgICAgICAgU2lndXJkIEdhcnRtYW5uIDogaHR0cHM6Ly9naXRodWIuY29tL3NpZ3VyZGdhXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxudmFyIG5iID0gbW9tZW50LmRlZmluZUxvY2FsZSgnbmInLCB7XG4gICAgbW9udGhzIDogJ2phbnVhcl9mZWJydWFyX21hcnNfYXByaWxfbWFpX2p1bmlfanVsaV9hdWd1c3Rfc2VwdGVtYmVyX29rdG9iZXJfbm92ZW1iZXJfZGVzZW1iZXInLnNwbGl0KCdfJyksXG4gICAgbW9udGhzU2hvcnQgOiAnamFuLl9mZWIuX21hcnNfYXByaWxfbWFpX2p1bmlfanVsaV9hdWcuX3NlcC5fb2t0Ll9ub3YuX2Rlcy4nLnNwbGl0KCdfJyksXG4gICAgbW9udGhzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgd2Vla2RheXMgOiAnc8O4bmRhZ19tYW5kYWdfdGlyc2RhZ19vbnNkYWdfdG9yc2RhZ19mcmVkYWdfbMO4cmRhZycuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1Nob3J0IDogJ3PDuC5fbWEuX3RpLl9vbi5fdG8uX2ZyLl9sw7guJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzTWluIDogJ3PDuF9tYV90aV9vbl90b19mcl9sw7gnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICBMIDogJ0RELk1NLllZWVknLFxuICAgICAgICBMTCA6ICdELiBNTU1NIFlZWVknLFxuICAgICAgICBMTEwgOiAnRC4gTU1NTSBZWVlZIFtrbC5dIEhIOm1tJyxcbiAgICAgICAgTExMTCA6ICdkZGRkIEQuIE1NTU0gWVlZWSBba2wuXSBISDptbSdcbiAgICB9LFxuICAgIGNhbGVuZGFyIDoge1xuICAgICAgICBzYW1lRGF5OiAnW2kgZGFnIGtsLl0gTFQnLFxuICAgICAgICBuZXh0RGF5OiAnW2kgbW9yZ2VuIGtsLl0gTFQnLFxuICAgICAgICBuZXh0V2VlazogJ2RkZGQgW2tsLl0gTFQnLFxuICAgICAgICBsYXN0RGF5OiAnW2kgZ8OlciBrbC5dIExUJyxcbiAgICAgICAgbGFzdFdlZWs6ICdbZm9ycmlnZV0gZGRkZCBba2wuXSBMVCcsXG4gICAgICAgIHNhbWVFbHNlOiAnTCdcbiAgICB9LFxuICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgZnV0dXJlIDogJ29tICVzJyxcbiAgICAgICAgcGFzdCA6ICclcyBzaWRlbicsXG4gICAgICAgIHMgOiAnbm9lbiBzZWt1bmRlcicsXG4gICAgICAgIG0gOiAnZXR0IG1pbnV0dCcsXG4gICAgICAgIG1tIDogJyVkIG1pbnV0dGVyJyxcbiAgICAgICAgaCA6ICdlbiB0aW1lJyxcbiAgICAgICAgaGggOiAnJWQgdGltZXInLFxuICAgICAgICBkIDogJ2VuIGRhZycsXG4gICAgICAgIGRkIDogJyVkIGRhZ2VyJyxcbiAgICAgICAgTSA6ICdlbiBtw6VuZWQnLFxuICAgICAgICBNTSA6ICclZCBtw6VuZWRlcicsXG4gICAgICAgIHkgOiAnZXR0IMOlcicsXG4gICAgICAgIHl5IDogJyVkIMOlcidcbiAgICB9LFxuICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfVxcLi8sXG4gICAgb3JkaW5hbCA6ICclZC4nLFxuICAgIHdlZWsgOiB7XG4gICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgfVxufSk7XG5cbnJldHVybiBuYjtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBOZXBhbGVzZSBbbmVdXG4vLyEgYXV0aG9yIDogc3V2YXNoIDogaHR0cHM6Ly9naXRodWIuY29tL3N1dmFzaFxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciBzeW1ib2xNYXAgPSB7XG4gICAgJzEnOiAn4KWnJyxcbiAgICAnMic6ICfgpagnLFxuICAgICczJzogJ+ClqScsXG4gICAgJzQnOiAn4KWqJyxcbiAgICAnNSc6ICfgpasnLFxuICAgICc2JzogJ+ClrCcsXG4gICAgJzcnOiAn4KWtJyxcbiAgICAnOCc6ICfgpa4nLFxuICAgICc5JzogJ+ClrycsXG4gICAgJzAnOiAn4KWmJ1xufTtcbnZhciBudW1iZXJNYXAgPSB7XG4gICAgJ+Clpyc6ICcxJyxcbiAgICAn4KWoJzogJzInLFxuICAgICfgpaknOiAnMycsXG4gICAgJ+Clqic6ICc0JyxcbiAgICAn4KWrJzogJzUnLFxuICAgICfgpawnOiAnNicsXG4gICAgJ+ClrSc6ICc3JyxcbiAgICAn4KWuJzogJzgnLFxuICAgICfgpa8nOiAnOScsXG4gICAgJ+Clpic6ICcwJ1xufTtcblxudmFyIG5lID0gbW9tZW50LmRlZmluZUxvY2FsZSgnbmUnLCB7XG4gICAgbW9udGhzIDogJ+CknOCkqOCkteCksOClgF/gpKvgpYfgpKzgpY3gpLDgpYHgpLXgpLDgpYBf4KSu4KS+4KSw4KWN4KSaX+CkheCkquCljeCksOCkv+Cksl/gpK7gpIhf4KSc4KWB4KSoX+CknOClgeCksuCkvuCkiF/gpIXgpJfgpLfgpY3gpJ9f4KS44KWH4KSq4KWN4KSf4KWH4KSu4KWN4KSs4KSwX+CkheCkleCljeCkn+Cli+CkrOCksF/gpKjgpYvgpK3gpYfgpK7gpY3gpKzgpLBf4KSh4KS/4KS44KWH4KSu4KWN4KSs4KSwJy5zcGxpdCgnXycpLFxuICAgIG1vbnRoc1Nob3J0IDogJ+CknOCkqC5f4KSr4KWH4KSs4KWN4KSw4KWBLl/gpK7gpL7gpLDgpY3gpJpf4KSF4KSq4KWN4KSw4KS/Ll/gpK7gpIhf4KSc4KWB4KSoX+CknOClgeCksuCkvuCkiC5f4KSF4KSXLl/gpLjgpYfgpKrgpY3gpJ8uX+CkheCkleCljeCkn+Cliy5f4KSo4KWL4KSt4KWHLl/gpKHgpL/gpLjgpYcuJy5zcGxpdCgnXycpLFxuICAgIG1vbnRoc1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgIHdlZWtkYXlzIDogJ+CkhuCkh+CkpOCkrOCkvuCksF/gpLjgpYvgpK7gpKzgpL7gpLBf4KSu4KSZ4KWN4KSX4KSy4KSs4KS+4KSwX+CkrOClgeCkp+CkrOCkvuCksF/gpKzgpL/gpLngpL/gpKzgpL7gpLBf4KS24KWB4KSV4KWN4KSw4KSs4KS+4KSwX+CktuCkqOCkv+CkrOCkvuCksCcuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1Nob3J0IDogJ+CkhuCkh+CkpC5f4KS44KWL4KSuLl/gpK7gpJngpY3gpJfgpLIuX+CkrOClgeCkpy5f4KSs4KS/4KS54KS/Ll/gpLbgpYHgpJXgpY3gpLAuX+CktuCkqOCkvy4nLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNNaW4gOiAn4KSGLl/gpLjgpYsuX+CkruCkgi5f4KSs4KWBLl/gpKzgpL8uX+CktuClgS5f4KS2Licuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICBMVCA6ICdB4KSV4KWLIGg6bW0g4KSs4KSc4KWHJyxcbiAgICAgICAgTFRTIDogJ0HgpJXgpYsgaDptbTpzcyDgpKzgpJzgpYcnLFxuICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSwgQeCkleCliyBoOm1tIOCkrOCknOClhycsXG4gICAgICAgIExMTEwgOiAnZGRkZCwgRCBNTU1NIFlZWVksIEHgpJXgpYsgaDptbSDgpKzgpJzgpYcnXG4gICAgfSxcbiAgICBwcmVwYXJzZTogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1vgpafgpajgpangpargpavgpazgpa3gpa7gpa/gpaZdL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlck1hcFttYXRjaF07XG4gICAgICAgIH0pO1xuICAgIH0sXG4gICAgcG9zdGZvcm1hdDogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1xcZC9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgIHJldHVybiBzeW1ib2xNYXBbbWF0Y2hdO1xuICAgICAgICB9KTtcbiAgICB9LFxuICAgIG1lcmlkaWVtUGFyc2U6IC/gpLDgpL7gpKTgpL984KSs4KS/4KS54KS+4KSofOCkpuCkv+CkieCkgeCkuOCli3zgpLjgpL7gpIHgpJ0vLFxuICAgIG1lcmlkaWVtSG91ciA6IGZ1bmN0aW9uIChob3VyLCBtZXJpZGllbSkge1xuICAgICAgICBpZiAoaG91ciA9PT0gMTIpIHtcbiAgICAgICAgICAgIGhvdXIgPSAwO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXJpZGllbSA9PT0gJ+CksOCkvuCkpOCkvycpIHtcbiAgICAgICAgICAgIHJldHVybiBob3VyIDwgNCA/IGhvdXIgOiBob3VyICsgMTI7XG4gICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfgpKzgpL/gpLngpL7gpKgnKSB7XG4gICAgICAgICAgICByZXR1cm4gaG91cjtcbiAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ+CkpuCkv+CkieCkgeCkuOCliycpIHtcbiAgICAgICAgICAgIHJldHVybiBob3VyID49IDEwID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ+CkuOCkvuCkgeCknScpIHtcbiAgICAgICAgICAgIHJldHVybiBob3VyICsgMTI7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIG1lcmlkaWVtIDogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICBpZiAoaG91ciA8IDMpIHtcbiAgICAgICAgICAgIHJldHVybiAn4KSw4KS+4KSk4KS/JztcbiAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTIpIHtcbiAgICAgICAgICAgIHJldHVybiAn4KSs4KS/4KS54KS+4KSoJztcbiAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTYpIHtcbiAgICAgICAgICAgIHJldHVybiAn4KSm4KS/4KSJ4KSB4KS44KWLJztcbiAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMjApIHtcbiAgICAgICAgICAgIHJldHVybiAn4KS44KS+4KSB4KSdJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAn4KSw4KS+4KSk4KS/JztcbiAgICAgICAgfVxuICAgIH0sXG4gICAgY2FsZW5kYXIgOiB7XG4gICAgICAgIHNhbWVEYXkgOiAnW+CkhuCknF0gTFQnLFxuICAgICAgICBuZXh0RGF5IDogJ1vgpK3gpYvgpLLgpL9dIExUJyxcbiAgICAgICAgbmV4dFdlZWsgOiAnW+CkhuCkieCkgeCkpuCli10gZGRkZFssXSBMVCcsXG4gICAgICAgIGxhc3REYXkgOiAnW+CkueCkv+CknOCli10gTFQnLFxuICAgICAgICBsYXN0V2VlayA6ICdb4KSX4KSP4KSV4KWLXSBkZGRkWyxdIExUJyxcbiAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICB9LFxuICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgZnV0dXJlIDogJyVz4KSu4KS+JyxcbiAgICAgICAgcGFzdCA6ICclcyDgpIXgpJfgpL7gpKHgpL8nLFxuICAgICAgICBzIDogJ+CkleClh+CkueClgCDgpJXgpY3gpLfgpKMnLFxuICAgICAgICBtIDogJ+Ckj+CklSDgpK7gpL/gpKjgpYfgpJ8nLFxuICAgICAgICBtbSA6ICclZCDgpK7gpL/gpKjgpYfgpJ8nLFxuICAgICAgICBoIDogJ+Ckj+CklSDgpJjgpKPgpY3gpJ/gpL4nLFxuICAgICAgICBoaCA6ICclZCDgpJjgpKPgpY3gpJ/gpL4nLFxuICAgICAgICBkIDogJ+Ckj+CklSDgpKbgpL/gpKgnLFxuICAgICAgICBkZCA6ICclZCDgpKbgpL/gpKgnLFxuICAgICAgICBNIDogJ+Ckj+CklSDgpK7gpLngpL/gpKjgpL4nLFxuICAgICAgICBNTSA6ICclZCDgpK7gpLngpL/gpKjgpL4nLFxuICAgICAgICB5IDogJ+Ckj+CklSDgpKzgpLDgpY3gpLcnLFxuICAgICAgICB5eSA6ICclZCDgpKzgpLDgpY3gpLcnXG4gICAgfSxcbiAgICB3ZWVrIDoge1xuICAgICAgICBkb3cgOiAwLCAvLyBTdW5kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgZG95IDogNiAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gMXN0IGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgIH1cbn0pO1xuXG5yZXR1cm4gbmU7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogRHV0Y2ggW25sXVxuLy8hIGF1dGhvciA6IEpvcmlzIFLDtmxpbmcgOiBodHRwczovL2dpdGh1Yi5jb20vam9yaXNyb2xpbmdcbi8vISBhdXRob3IgOiBKYWNvYiBNaWRkYWcgOiBodHRwczovL2dpdGh1Yi5jb20vbWlkZGFnalxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciBtb250aHNTaG9ydFdpdGhEb3RzID0gJ2phbi5fZmViLl9tcnQuX2Fwci5fbWVpX2p1bi5fanVsLl9hdWcuX3NlcC5fb2t0Ll9ub3YuX2RlYy4nLnNwbGl0KCdfJyk7XG52YXIgbW9udGhzU2hvcnRXaXRob3V0RG90cyA9ICdqYW5fZmViX21ydF9hcHJfbWVpX2p1bl9qdWxfYXVnX3NlcF9va3Rfbm92X2RlYycuc3BsaXQoJ18nKTtcblxudmFyIG1vbnRoc1BhcnNlID0gWy9eamFuL2ksIC9eZmViL2ksIC9ebWFhcnR8bXJ0Lj8kL2ksIC9eYXByL2ksIC9ebWVpJC9pLCAvXmp1bltpLl0/JC9pLCAvXmp1bFtpLl0/JC9pLCAvXmF1Zy9pLCAvXnNlcC9pLCAvXm9rdC9pLCAvXm5vdi9pLCAvXmRlYy9pXTtcbnZhciBtb250aHNSZWdleCA9IC9eKGphbnVhcml8ZmVicnVhcml8bWFhcnR8YXByaWx8bWVpfGFwcmlsfGp1W25sXWl8YXVndXN0dXN8c2VwdGVtYmVyfG9rdG9iZXJ8bm92ZW1iZXJ8ZGVjZW1iZXJ8amFuXFwuP3xmZWJcXC4/fG1ydFxcLj98YXByXFwuP3xqdVtubF1cXC4/fGF1Z1xcLj98c2VwXFwuP3xva3RcXC4/fG5vdlxcLj98ZGVjXFwuPykvaTtcblxudmFyIG5sID0gbW9tZW50LmRlZmluZUxvY2FsZSgnbmwnLCB7XG4gICAgbW9udGhzIDogJ2phbnVhcmlfZmVicnVhcmlfbWFhcnRfYXByaWxfbWVpX2p1bmlfanVsaV9hdWd1c3R1c19zZXB0ZW1iZXJfb2t0b2Jlcl9ub3ZlbWJlcl9kZWNlbWJlcicuc3BsaXQoJ18nKSxcbiAgICBtb250aHNTaG9ydCA6IGZ1bmN0aW9uIChtLCBmb3JtYXQpIHtcbiAgICAgICAgaWYgKCFtKSB7XG4gICAgICAgICAgICByZXR1cm4gbW9udGhzU2hvcnRXaXRoRG90cztcbiAgICAgICAgfSBlbHNlIGlmICgvLU1NTS0vLnRlc3QoZm9ybWF0KSkge1xuICAgICAgICAgICAgcmV0dXJuIG1vbnRoc1Nob3J0V2l0aG91dERvdHNbbS5tb250aCgpXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBtb250aHNTaG9ydFdpdGhEb3RzW20ubW9udGgoKV07XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgbW9udGhzUmVnZXg6IG1vbnRoc1JlZ2V4LFxuICAgIG1vbnRoc1Nob3J0UmVnZXg6IG1vbnRoc1JlZ2V4LFxuICAgIG1vbnRoc1N0cmljdFJlZ2V4OiAvXihqYW51YXJpfGZlYnJ1YXJpfG1hYXJ0fG1laXxqdVtubF1pfGFwcmlsfGF1Z3VzdHVzfHNlcHRlbWJlcnxva3RvYmVyfG5vdmVtYmVyfGRlY2VtYmVyKS9pLFxuICAgIG1vbnRoc1Nob3J0U3RyaWN0UmVnZXg6IC9eKGphblxcLj98ZmViXFwuP3xtcnRcXC4/fGFwclxcLj98bWVpfGp1W25sXVxcLj98YXVnXFwuP3xzZXBcXC4/fG9rdFxcLj98bm92XFwuP3xkZWNcXC4/KS9pLFxuXG4gICAgbW9udGhzUGFyc2UgOiBtb250aHNQYXJzZSxcbiAgICBsb25nTW9udGhzUGFyc2UgOiBtb250aHNQYXJzZSxcbiAgICBzaG9ydE1vbnRoc1BhcnNlIDogbW9udGhzUGFyc2UsXG5cbiAgICB3ZWVrZGF5cyA6ICd6b25kYWdfbWFhbmRhZ19kaW5zZGFnX3dvZW5zZGFnX2RvbmRlcmRhZ192cmlqZGFnX3phdGVyZGFnJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzU2hvcnQgOiAnem8uX21hLl9kaS5fd28uX2RvLl92ci5femEuJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzTWluIDogJ1pvX01hX0RpX1dvX0RvX1ZyX1phJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgTCA6ICdERC1NTS1ZWVlZJyxcbiAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICBMTExMIDogJ2RkZGQgRCBNTU1NIFlZWVkgSEg6bW0nXG4gICAgfSxcbiAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgc2FtZURheTogJ1t2YW5kYWFnIG9tXSBMVCcsXG4gICAgICAgIG5leHREYXk6ICdbbW9yZ2VuIG9tXSBMVCcsXG4gICAgICAgIG5leHRXZWVrOiAnZGRkZCBbb21dIExUJyxcbiAgICAgICAgbGFzdERheTogJ1tnaXN0ZXJlbiBvbV0gTFQnLFxuICAgICAgICBsYXN0V2VlazogJ1thZmdlbG9wZW5dIGRkZGQgW29tXSBMVCcsXG4gICAgICAgIHNhbWVFbHNlOiAnTCdcbiAgICB9LFxuICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgZnV0dXJlIDogJ292ZXIgJXMnLFxuICAgICAgICBwYXN0IDogJyVzIGdlbGVkZW4nLFxuICAgICAgICBzIDogJ2VlbiBwYWFyIHNlY29uZGVuJyxcbiAgICAgICAgbSA6ICfDqcOpbiBtaW51dXQnLFxuICAgICAgICBtbSA6ICclZCBtaW51dGVuJyxcbiAgICAgICAgaCA6ICfDqcOpbiB1dXInLFxuICAgICAgICBoaCA6ICclZCB1dXInLFxuICAgICAgICBkIDogJ8Opw6luIGRhZycsXG4gICAgICAgIGRkIDogJyVkIGRhZ2VuJyxcbiAgICAgICAgTSA6ICfDqcOpbiBtYWFuZCcsXG4gICAgICAgIE1NIDogJyVkIG1hYW5kZW4nLFxuICAgICAgICB5IDogJ8Opw6luIGphYXInLFxuICAgICAgICB5eSA6ICclZCBqYWFyJ1xuICAgIH0sXG4gICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9KHN0ZXxkZSkvLFxuICAgIG9yZGluYWwgOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgIHJldHVybiBudW1iZXIgKyAoKG51bWJlciA9PT0gMSB8fCBudW1iZXIgPT09IDggfHwgbnVtYmVyID49IDIwKSA/ICdzdGUnIDogJ2RlJyk7XG4gICAgfSxcbiAgICB3ZWVrIDoge1xuICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgZG95IDogNCAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgIH1cbn0pO1xuXG5yZXR1cm4gbmw7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogRHV0Y2ggKEJlbGdpdW0pIFtubC1iZV1cbi8vISBhdXRob3IgOiBKb3JpcyBSw7ZsaW5nIDogaHR0cHM6Ly9naXRodWIuY29tL2pvcmlzcm9saW5nXG4vLyEgYXV0aG9yIDogSmFjb2IgTWlkZGFnIDogaHR0cHM6Ly9naXRodWIuY29tL21pZGRhZ2pcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG52YXIgbW9udGhzU2hvcnRXaXRoRG90cyA9ICdqYW4uX2ZlYi5fbXJ0Ll9hcHIuX21laV9qdW4uX2p1bC5fYXVnLl9zZXAuX29rdC5fbm92Ll9kZWMuJy5zcGxpdCgnXycpO1xudmFyIG1vbnRoc1Nob3J0V2l0aG91dERvdHMgPSAnamFuX2ZlYl9tcnRfYXByX21laV9qdW5fanVsX2F1Z19zZXBfb2t0X25vdl9kZWMnLnNwbGl0KCdfJyk7XG5cbnZhciBtb250aHNQYXJzZSA9IFsvXmphbi9pLCAvXmZlYi9pLCAvXm1hYXJ0fG1ydC4/JC9pLCAvXmFwci9pLCAvXm1laSQvaSwgL15qdW5baS5dPyQvaSwgL15qdWxbaS5dPyQvaSwgL15hdWcvaSwgL15zZXAvaSwgL15va3QvaSwgL15ub3YvaSwgL15kZWMvaV07XG52YXIgbW9udGhzUmVnZXggPSAvXihqYW51YXJpfGZlYnJ1YXJpfG1hYXJ0fGFwcmlsfG1laXxhcHJpbHxqdVtubF1pfGF1Z3VzdHVzfHNlcHRlbWJlcnxva3RvYmVyfG5vdmVtYmVyfGRlY2VtYmVyfGphblxcLj98ZmViXFwuP3xtcnRcXC4/fGFwclxcLj98anVbbmxdXFwuP3xhdWdcXC4/fHNlcFxcLj98b2t0XFwuP3xub3ZcXC4/fGRlY1xcLj8pL2k7XG5cbnZhciBubEJlID0gbW9tZW50LmRlZmluZUxvY2FsZSgnbmwtYmUnLCB7XG4gICAgbW9udGhzIDogJ2phbnVhcmlfZmVicnVhcmlfbWFhcnRfYXByaWxfbWVpX2p1bmlfanVsaV9hdWd1c3R1c19zZXB0ZW1iZXJfb2t0b2Jlcl9ub3ZlbWJlcl9kZWNlbWJlcicuc3BsaXQoJ18nKSxcbiAgICBtb250aHNTaG9ydCA6IGZ1bmN0aW9uIChtLCBmb3JtYXQpIHtcbiAgICAgICAgaWYgKCFtKSB7XG4gICAgICAgICAgICByZXR1cm4gbW9udGhzU2hvcnRXaXRoRG90cztcbiAgICAgICAgfSBlbHNlIGlmICgvLU1NTS0vLnRlc3QoZm9ybWF0KSkge1xuICAgICAgICAgICAgcmV0dXJuIG1vbnRoc1Nob3J0V2l0aG91dERvdHNbbS5tb250aCgpXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBtb250aHNTaG9ydFdpdGhEb3RzW20ubW9udGgoKV07XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgbW9udGhzUmVnZXg6IG1vbnRoc1JlZ2V4LFxuICAgIG1vbnRoc1Nob3J0UmVnZXg6IG1vbnRoc1JlZ2V4LFxuICAgIG1vbnRoc1N0cmljdFJlZ2V4OiAvXihqYW51YXJpfGZlYnJ1YXJpfG1hYXJ0fG1laXxqdVtubF1pfGFwcmlsfGF1Z3VzdHVzfHNlcHRlbWJlcnxva3RvYmVyfG5vdmVtYmVyfGRlY2VtYmVyKS9pLFxuICAgIG1vbnRoc1Nob3J0U3RyaWN0UmVnZXg6IC9eKGphblxcLj98ZmViXFwuP3xtcnRcXC4/fGFwclxcLj98bWVpfGp1W25sXVxcLj98YXVnXFwuP3xzZXBcXC4/fG9rdFxcLj98bm92XFwuP3xkZWNcXC4/KS9pLFxuXG4gICAgbW9udGhzUGFyc2UgOiBtb250aHNQYXJzZSxcbiAgICBsb25nTW9udGhzUGFyc2UgOiBtb250aHNQYXJzZSxcbiAgICBzaG9ydE1vbnRoc1BhcnNlIDogbW9udGhzUGFyc2UsXG5cbiAgICB3ZWVrZGF5cyA6ICd6b25kYWdfbWFhbmRhZ19kaW5zZGFnX3dvZW5zZGFnX2RvbmRlcmRhZ192cmlqZGFnX3phdGVyZGFnJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzU2hvcnQgOiAnem8uX21hLl9kaS5fd28uX2RvLl92ci5femEuJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzTWluIDogJ1pvX01hX0RpX1dvX0RvX1ZyX1phJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICBMTExMIDogJ2RkZGQgRCBNTU1NIFlZWVkgSEg6bW0nXG4gICAgfSxcbiAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgc2FtZURheTogJ1t2YW5kYWFnIG9tXSBMVCcsXG4gICAgICAgIG5leHREYXk6ICdbbW9yZ2VuIG9tXSBMVCcsXG4gICAgICAgIG5leHRXZWVrOiAnZGRkZCBbb21dIExUJyxcbiAgICAgICAgbGFzdERheTogJ1tnaXN0ZXJlbiBvbV0gTFQnLFxuICAgICAgICBsYXN0V2VlazogJ1thZmdlbG9wZW5dIGRkZGQgW29tXSBMVCcsXG4gICAgICAgIHNhbWVFbHNlOiAnTCdcbiAgICB9LFxuICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgZnV0dXJlIDogJ292ZXIgJXMnLFxuICAgICAgICBwYXN0IDogJyVzIGdlbGVkZW4nLFxuICAgICAgICBzIDogJ2VlbiBwYWFyIHNlY29uZGVuJyxcbiAgICAgICAgbSA6ICfDqcOpbiBtaW51dXQnLFxuICAgICAgICBtbSA6ICclZCBtaW51dGVuJyxcbiAgICAgICAgaCA6ICfDqcOpbiB1dXInLFxuICAgICAgICBoaCA6ICclZCB1dXInLFxuICAgICAgICBkIDogJ8Opw6luIGRhZycsXG4gICAgICAgIGRkIDogJyVkIGRhZ2VuJyxcbiAgICAgICAgTSA6ICfDqcOpbiBtYWFuZCcsXG4gICAgICAgIE1NIDogJyVkIG1hYW5kZW4nLFxuICAgICAgICB5IDogJ8Opw6luIGphYXInLFxuICAgICAgICB5eSA6ICclZCBqYWFyJ1xuICAgIH0sXG4gICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9KHN0ZXxkZSkvLFxuICAgIG9yZGluYWwgOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgIHJldHVybiBudW1iZXIgKyAoKG51bWJlciA9PT0gMSB8fCBudW1iZXIgPT09IDggfHwgbnVtYmVyID49IDIwKSA/ICdzdGUnIDogJ2RlJyk7XG4gICAgfSxcbiAgICB3ZWVrIDoge1xuICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgZG95IDogNCAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgIH1cbn0pO1xuXG5yZXR1cm4gbmxCZTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBOeW5vcnNrIFtubl1cbi8vISBhdXRob3IgOiBodHRwczovL2dpdGh1Yi5jb20vbWVjaHV3aW5kXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxudmFyIG5uID0gbW9tZW50LmRlZmluZUxvY2FsZSgnbm4nLCB7XG4gICAgbW9udGhzIDogJ2phbnVhcl9mZWJydWFyX21hcnNfYXByaWxfbWFpX2p1bmlfanVsaV9hdWd1c3Rfc2VwdGVtYmVyX29rdG9iZXJfbm92ZW1iZXJfZGVzZW1iZXInLnNwbGl0KCdfJyksXG4gICAgbW9udGhzU2hvcnQgOiAnamFuX2ZlYl9tYXJfYXByX21haV9qdW5fanVsX2F1Z19zZXBfb2t0X25vdl9kZXMnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXMgOiAnc3VuZGFnX23DpW5kYWdfdHlzZGFnX29uc2RhZ190b3JzZGFnX2ZyZWRhZ19sYXVyZGFnJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzU2hvcnQgOiAnc3VuX23DpW5fdHlzX29uc190b3JfZnJlX2xhdScuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c01pbiA6ICdzdV9tw6VfdHlfb25fdG9fZnJfbMO4Jy5zcGxpdCgnXycpLFxuICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgIEwgOiAnREQuTU0uWVlZWScsXG4gICAgICAgIExMIDogJ0QuIE1NTU0gWVlZWScsXG4gICAgICAgIExMTCA6ICdELiBNTU1NIFlZWVkgW2tsLl0gSDptbScsXG4gICAgICAgIExMTEwgOiAnZGRkZCBELiBNTU1NIFlZWVkgW2tsLl0gSEg6bW0nXG4gICAgfSxcbiAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgc2FtZURheTogJ1tJIGRhZyBrbG9ra2FdIExUJyxcbiAgICAgICAgbmV4dERheTogJ1tJIG1vcmdvbiBrbG9ra2FdIExUJyxcbiAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFtrbG9ra2FdIExUJyxcbiAgICAgICAgbGFzdERheTogJ1tJIGfDpXIga2xva2thXSBMVCcsXG4gICAgICAgIGxhc3RXZWVrOiAnW0bDuHJlZ8OlYW5kZV0gZGRkZCBba2xva2thXSBMVCcsXG4gICAgICAgIHNhbWVFbHNlOiAnTCdcbiAgICB9LFxuICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgZnV0dXJlIDogJ29tICVzJyxcbiAgICAgICAgcGFzdCA6ICclcyBzaWRhbicsXG4gICAgICAgIHMgOiAnbm9rcmUgc2VrdW5kJyxcbiAgICAgICAgbSA6ICdlaXQgbWludXR0JyxcbiAgICAgICAgbW0gOiAnJWQgbWludXR0JyxcbiAgICAgICAgaCA6ICdlaW4gdGltZScsXG4gICAgICAgIGhoIDogJyVkIHRpbWFyJyxcbiAgICAgICAgZCA6ICdlaW4gZGFnJyxcbiAgICAgICAgZGQgOiAnJWQgZGFnYXInLFxuICAgICAgICBNIDogJ2VpbiBtw6VuYWQnLFxuICAgICAgICBNTSA6ICclZCBtw6VuYWRlcicsXG4gICAgICAgIHkgOiAnZWl0IMOlcicsXG4gICAgICAgIHl5IDogJyVkIMOlcidcbiAgICB9LFxuICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfVxcLi8sXG4gICAgb3JkaW5hbCA6ICclZC4nLFxuICAgIHdlZWsgOiB7XG4gICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgfVxufSk7XG5cbnJldHVybiBubjtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBQdW5qYWJpIChJbmRpYSkgW3BhLWluXVxuLy8hIGF1dGhvciA6IEhhcnByZWV0IFNpbmdoIDogaHR0cHM6Ly9naXRodWIuY29tL2hhcnByZWV0a2hhbHNhZ3RiaXRcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG52YXIgc3ltYm9sTWFwID0ge1xuICAgICcxJzogJ+CppycsXG4gICAgJzInOiAn4KmoJyxcbiAgICAnMyc6ICfgqaknLFxuICAgICc0JzogJ+CpqicsXG4gICAgJzUnOiAn4KmrJyxcbiAgICAnNic6ICfgqawnLFxuICAgICc3JzogJ+CprScsXG4gICAgJzgnOiAn4KmuJyxcbiAgICAnOSc6ICfgqa8nLFxuICAgICcwJzogJ+Cppidcbn07XG52YXIgbnVtYmVyTWFwID0ge1xuICAgICfgqacnOiAnMScsXG4gICAgJ+CpqCc6ICcyJyxcbiAgICAn4KmpJzogJzMnLFxuICAgICfgqaonOiAnNCcsXG4gICAgJ+Cpqyc6ICc1JyxcbiAgICAn4KmsJzogJzYnLFxuICAgICfgqa0nOiAnNycsXG4gICAgJ+Cpric6ICc4JyxcbiAgICAn4KmvJzogJzknLFxuICAgICfgqaYnOiAnMCdcbn07XG5cbnZhciBwYUluID0gbW9tZW50LmRlZmluZUxvY2FsZSgncGEtaW4nLCB7XG4gICAgLy8gVGhlcmUgYXJlIG1vbnRocyBuYW1lIGFzIHBlciBOYW5ha3NoYWhpIENhbGVuZGVyIGJ1dCB0aGV5IGFyZSBub3QgdXNlZCBhcyByaWdpZGx5IGluIG1vZGVybiBQdW5qYWJpLlxuICAgIG1vbnRocyA6ICfgqJzgqKjgqLXgqLDgqYBf4Kir4Ki84Kiw4Ki14Kiw4KmAX+CoruCovuCosOComl/gqIXgqKrgqY3gqLDgqYjgqLJf4Kiu4KiIX+ConOCpguCoqF/gqJzgqYHgqLLgqL7gqIhf4KiF4KiX4Ki44KikX+CouOCopOCpsOCorOCosF/gqIXgqJXgqKTgqYLgqKzgqLBf4Kio4Ki14Kmw4Kis4KiwX+CopuCouOCpsOCorOCosCcuc3BsaXQoJ18nKSxcbiAgICBtb250aHNTaG9ydCA6ICfgqJzgqKjgqLXgqLDgqYBf4Kir4Ki84Kiw4Ki14Kiw4KmAX+CoruCovuCosOComl/gqIXgqKrgqY3gqLDgqYjgqLJf4Kiu4KiIX+ConOCpguCoqF/gqJzgqYHgqLLgqL7gqIhf4KiF4KiX4Ki44KikX+CouOCopOCpsOCorOCosF/gqIXgqJXgqKTgqYLgqKzgqLBf4Kio4Ki14Kmw4Kis4KiwX+CopuCouOCpsOCorOCosCcuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5cyA6ICfgqJDgqKTgqLXgqL7gqLBf4Ki44KmL4Kiu4Ki14Ki+4KiwX+CoruCpsOCol+CosuCoteCovuCosF/gqKzgqYHgqKfgqLXgqL7gqLBf4Ki14KmA4Kiw4Ki14Ki+4KiwX+CouOCovOCpgeCpseColeCosOCoteCovuCosF/gqLjgqLzgqKjgqYDgqJrgqLDgqLXgqL7gqLAnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNTaG9ydCA6ICfgqJDgqKRf4Ki44KmL4KiuX+CoruCpsOCol+Cosl/gqKzgqYHgqKdf4Ki14KmA4KiwX+CouOCovOCpgeColeCosF/gqLjgqLzgqKjgqYAnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNNaW4gOiAn4KiQ4KikX+CouOCpi+Corl/gqK7gqbDgqJfgqLJf4Kis4KmB4KinX+CoteCpgOCosF/gqLjgqLzgqYHgqJXgqLBf4Ki44Ki84Kio4KmAJy5zcGxpdCgnXycpLFxuICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICBMVCA6ICdBIGg6bW0g4Ki14Kic4KmHJyxcbiAgICAgICAgTFRTIDogJ0EgaDptbTpzcyDgqLXgqJzgqYcnLFxuICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSwgQSBoOm1tIOCoteConOCphycsXG4gICAgICAgIExMTEwgOiAnZGRkZCwgRCBNTU1NIFlZWVksIEEgaDptbSDgqLXgqJzgqYcnXG4gICAgfSxcbiAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgc2FtZURheSA6ICdb4KiF4KicXSBMVCcsXG4gICAgICAgIG5leHREYXkgOiAnW+ColeCosl0gTFQnLFxuICAgICAgICBuZXh0V2VlayA6ICdkZGRkLCBMVCcsXG4gICAgICAgIGxhc3REYXkgOiAnW+ColeCosl0gTFQnLFxuICAgICAgICBsYXN0V2VlayA6ICdb4Kiq4Ki/4Kib4Kiy4KmHXSBkZGRkLCBMVCcsXG4gICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgfSxcbiAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgIGZ1dHVyZSA6ICclcyDgqLXgqL/gqbHgqJonLFxuICAgICAgICBwYXN0IDogJyVzIOCoquCov+Com+CosuCphycsXG4gICAgICAgIHMgOiAn4KiV4KmB4KidIOCouOColeCov+CpsOConycsXG4gICAgICAgIG0gOiAn4KiH4KiVIOCoruCov+CpsOConycsXG4gICAgICAgIG1tIDogJyVkIOCoruCov+CpsOConycsXG4gICAgICAgIGggOiAn4KiH4Kmx4KiVIOComOCpsOCon+CovicsXG4gICAgICAgIGhoIDogJyVkIOComOCpsOCon+CphycsXG4gICAgICAgIGQgOiAn4KiH4Kmx4KiVIOCopuCov+CoqCcsXG4gICAgICAgIGRkIDogJyVkIOCopuCov+CoqCcsXG4gICAgICAgIE0gOiAn4KiH4Kmx4KiVIOCoruCoueCpgOCoqOCovicsXG4gICAgICAgIE1NIDogJyVkIOCoruCoueCpgOCoqOCphycsXG4gICAgICAgIHkgOiAn4KiH4Kmx4KiVIOCouOCovuCosicsXG4gICAgICAgIHl5IDogJyVkIOCouOCovuCosidcbiAgICB9LFxuICAgIHByZXBhcnNlOiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvW+Cpp+CpqOCpqeCpquCpq+CprOCpreCpruCpr+Cppl0vZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyTWFwW21hdGNoXTtcbiAgICAgICAgfSk7XG4gICAgfSxcbiAgICBwb3N0Zm9ybWF0OiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvXFxkL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgcmV0dXJuIHN5bWJvbE1hcFttYXRjaF07XG4gICAgICAgIH0pO1xuICAgIH0sXG4gICAgLy8gUHVuamFiaSBub3RhdGlvbiBmb3IgbWVyaWRpZW1zIGFyZSBxdWl0ZSBmdXp6eSBpbiBwcmFjdGljZS4gV2hpbGUgdGhlcmUgZXhpc3RzXG4gICAgLy8gYSByaWdpZCBub3Rpb24gb2YgYSAnUGFoYXInIGl0IGlzIG5vdCB1c2VkIGFzIHJpZ2lkbHkgaW4gbW9kZXJuIFB1bmphYmkuXG4gICAgbWVyaWRpZW1QYXJzZTogL+CosOCovuCopHzgqLjgqLXgqYfgqLB84Kim4KmB4Kiq4Ki54Ki/4KiwfOCouOCovOCovuCori8sXG4gICAgbWVyaWRpZW1Ib3VyIDogZnVuY3Rpb24gKGhvdXIsIG1lcmlkaWVtKSB7XG4gICAgICAgIGlmIChob3VyID09PSAxMikge1xuICAgICAgICAgICAgaG91ciA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lcmlkaWVtID09PSAn4Kiw4Ki+4KikJykge1xuICAgICAgICAgICAgcmV0dXJuIGhvdXIgPCA0ID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ+CouOCoteCph+CosCcpIHtcbiAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn4Kim4KmB4Kiq4Ki54Ki/4KiwJykge1xuICAgICAgICAgICAgcmV0dXJuIGhvdXIgPj0gMTAgPyBob3VyIDogaG91ciArIDEyO1xuICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn4Ki44Ki84Ki+4KiuJykge1xuICAgICAgICAgICAgcmV0dXJuIGhvdXIgKyAxMjtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgbWVyaWRpZW0gOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgIGlmIChob3VyIDwgNCkge1xuICAgICAgICAgICAgcmV0dXJuICfgqLDgqL7gqKQnO1xuICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxMCkge1xuICAgICAgICAgICAgcmV0dXJuICfgqLjgqLXgqYfgqLAnO1xuICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxNykge1xuICAgICAgICAgICAgcmV0dXJuICfgqKbgqYHgqKrgqLngqL/gqLAnO1xuICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAyMCkge1xuICAgICAgICAgICAgcmV0dXJuICfgqLjgqLzgqL7gqK4nO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuICfgqLDgqL7gqKQnO1xuICAgICAgICB9XG4gICAgfSxcbiAgICB3ZWVrIDoge1xuICAgICAgICBkb3cgOiAwLCAvLyBTdW5kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgZG95IDogNiAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gMXN0IGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgIH1cbn0pO1xuXG5yZXR1cm4gcGFJbjtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBQb2xpc2ggW3BsXVxuLy8hIGF1dGhvciA6IFJhZmFsIEhpcnN6IDogaHR0cHM6Ly9naXRodWIuY29tL2V2b0xcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG52YXIgbW9udGhzTm9taW5hdGl2ZSA9ICdzdHljemXFhF9sdXR5X21hcnplY19rd2llY2llxYRfbWFqX2N6ZXJ3aWVjX2xpcGllY19zaWVycGllxYRfd3J6ZXNpZcWEX3Bhxbpkemllcm5pa19saXN0b3BhZF9ncnVkemllxYQnLnNwbGl0KCdfJyk7XG52YXIgbW9udGhzU3ViamVjdGl2ZSA9ICdzdHljem5pYV9sdXRlZ29fbWFyY2Ffa3dpZXRuaWFfbWFqYV9jemVyd2NhX2xpcGNhX3NpZXJwbmlhX3dyemXFm25pYV9wYcW6ZHppZXJuaWthX2xpc3RvcGFkYV9ncnVkbmlhJy5zcGxpdCgnXycpO1xuZnVuY3Rpb24gcGx1cmFsKG4pIHtcbiAgICByZXR1cm4gKG4gJSAxMCA8IDUpICYmIChuICUgMTAgPiAxKSAmJiAoKH5+KG4gLyAxMCkgJSAxMCkgIT09IDEpO1xufVxuZnVuY3Rpb24gdHJhbnNsYXRlKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5KSB7XG4gICAgdmFyIHJlc3VsdCA9IG51bWJlciArICcgJztcbiAgICBzd2l0Y2ggKGtleSkge1xuICAgICAgICBjYXNlICdtJzpcbiAgICAgICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4ID8gJ21pbnV0YScgOiAnbWludXTEmSc7XG4gICAgICAgIGNhc2UgJ21tJzpcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAocGx1cmFsKG51bWJlcikgPyAnbWludXR5JyA6ICdtaW51dCcpO1xuICAgICAgICBjYXNlICdoJzpcbiAgICAgICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4ICA/ICdnb2R6aW5hJyAgOiAnZ29kemluxJknO1xuICAgICAgICBjYXNlICdoaCc6XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgKHBsdXJhbChudW1iZXIpID8gJ2dvZHppbnknIDogJ2dvZHppbicpO1xuICAgICAgICBjYXNlICdNTSc6XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgKHBsdXJhbChudW1iZXIpID8gJ21pZXNpxIVjZScgOiAnbWllc2nEmWN5Jyk7XG4gICAgICAgIGNhc2UgJ3l5JzpcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAocGx1cmFsKG51bWJlcikgPyAnbGF0YScgOiAnbGF0Jyk7XG4gICAgfVxufVxuXG52YXIgcGwgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdwbCcsIHtcbiAgICBtb250aHMgOiBmdW5jdGlvbiAobW9tZW50VG9Gb3JtYXQsIGZvcm1hdCkge1xuICAgICAgICBpZiAoIW1vbWVudFRvRm9ybWF0KSB7XG4gICAgICAgICAgICByZXR1cm4gbW9udGhzTm9taW5hdGl2ZTtcbiAgICAgICAgfSBlbHNlIGlmIChmb3JtYXQgPT09ICcnKSB7XG4gICAgICAgICAgICAvLyBIYWNrOiBpZiBmb3JtYXQgZW1wdHkgd2Uga25vdyB0aGlzIGlzIHVzZWQgdG8gZ2VuZXJhdGVcbiAgICAgICAgICAgIC8vIFJlZ0V4cCBieSBtb21lbnQuIEdpdmUgdGhlbiBiYWNrIGJvdGggdmFsaWQgZm9ybXMgb2YgbW9udGhzXG4gICAgICAgICAgICAvLyBpbiBSZWdFeHAgcmVhZHkgZm9ybWF0LlxuICAgICAgICAgICAgcmV0dXJuICcoJyArIG1vbnRoc1N1YmplY3RpdmVbbW9tZW50VG9Gb3JtYXQubW9udGgoKV0gKyAnfCcgKyBtb250aHNOb21pbmF0aXZlW21vbWVudFRvRm9ybWF0Lm1vbnRoKCldICsgJyknO1xuICAgICAgICB9IGVsc2UgaWYgKC9EIE1NTU0vLnRlc3QoZm9ybWF0KSkge1xuICAgICAgICAgICAgcmV0dXJuIG1vbnRoc1N1YmplY3RpdmVbbW9tZW50VG9Gb3JtYXQubW9udGgoKV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbW9udGhzTm9taW5hdGl2ZVttb21lbnRUb0Zvcm1hdC5tb250aCgpXTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgbW9udGhzU2hvcnQgOiAnc3R5X2x1dF9tYXJfa3dpX21hal9jemVfbGlwX3NpZV93cnpfcGHFul9saXNfZ3J1Jy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzIDogJ25pZWR6aWVsYV9wb25pZWR6aWHFgmVrX3d0b3Jla1/Fm3JvZGFfY3p3YXJ0ZWtfcGnEhXRla19zb2JvdGEnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNTaG9ydCA6ICduZHpfcG9uX3d0X8Wbcl9jendfcHRfc29iJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzTWluIDogJ05kX1BuX1d0X8Wacl9Del9QdF9Tbycuc3BsaXQoJ18nKSxcbiAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICBMIDogJ0RELk1NLllZWVknLFxuICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIExMTEwgOiAnZGRkZCwgRCBNTU1NIFlZWVkgSEg6bW0nXG4gICAgfSxcbiAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgc2FtZURheTogJ1tEemnFmyBvXSBMVCcsXG4gICAgICAgIG5leHREYXk6ICdbSnV0cm8gb10gTFQnLFxuICAgICAgICBuZXh0V2VlazogJ1tXXSBkZGRkIFtvXSBMVCcsXG4gICAgICAgIGxhc3REYXk6ICdbV2N6b3JhaiBvXSBMVCcsXG4gICAgICAgIGxhc3RXZWVrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHRoaXMuZGF5KCkpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnW1cgemVzesWCxIUgbmllZHppZWzEmSBvXSBMVCc7XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1tXIHplc3rFgsSFIMWbcm9kxJkgb10gTFQnO1xuICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbVyB6ZXN6xYLEhSBzb2JvdMSZIG9dIExUJztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1tXIHplc3rFgnldIGRkZGQgW29dIExUJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgc2FtZUVsc2U6ICdMJ1xuICAgIH0sXG4gICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICBmdXR1cmUgOiAnemEgJXMnLFxuICAgICAgICBwYXN0IDogJyVzIHRlbXUnLFxuICAgICAgICBzIDogJ2tpbGthIHNla3VuZCcsXG4gICAgICAgIG0gOiB0cmFuc2xhdGUsXG4gICAgICAgIG1tIDogdHJhbnNsYXRlLFxuICAgICAgICBoIDogdHJhbnNsYXRlLFxuICAgICAgICBoaCA6IHRyYW5zbGF0ZSxcbiAgICAgICAgZCA6ICcxIGR6aWXFhCcsXG4gICAgICAgIGRkIDogJyVkIGRuaScsXG4gICAgICAgIE0gOiAnbWllc2nEhWMnLFxuICAgICAgICBNTSA6IHRyYW5zbGF0ZSxcbiAgICAgICAgeSA6ICdyb2snLFxuICAgICAgICB5eSA6IHRyYW5zbGF0ZVxuICAgIH0sXG4gICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9XFwuLyxcbiAgICBvcmRpbmFsIDogJyVkLicsXG4gICAgd2VlayA6IHtcbiAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICB9XG59KTtcblxucmV0dXJuIHBsO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IFBvcnR1Z3Vlc2UgW3B0XVxuLy8hIGF1dGhvciA6IEplZmZlcnNvbiA6IGh0dHBzOi8vZ2l0aHViLmNvbS9qYWxleDc5XG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxudmFyIHB0ID0gbW9tZW50LmRlZmluZUxvY2FsZSgncHQnLCB7XG4gICAgbW9udGhzIDogJ0phbmVpcm9fRmV2ZXJlaXJvX01hcsOnb19BYnJpbF9NYWlvX0p1bmhvX0p1bGhvX0Fnb3N0b19TZXRlbWJyb19PdXR1YnJvX05vdmVtYnJvX0RlemVtYnJvJy5zcGxpdCgnXycpLFxuICAgIG1vbnRoc1Nob3J0IDogJ0phbl9GZXZfTWFyX0Ficl9NYWlfSnVuX0p1bF9BZ29fU2V0X091dF9Ob3ZfRGV6Jy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzIDogJ0RvbWluZ29fU2VndW5kYS1GZWlyYV9UZXLDp2EtRmVpcmFfUXVhcnRhLUZlaXJhX1F1aW50YS1GZWlyYV9TZXh0YS1GZWlyYV9Tw6FiYWRvJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzU2hvcnQgOiAnRG9tX1NlZ19UZXJfUXVhX1F1aV9TZXhfU8OhYicuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c01pbiA6ICdEb18ywqpfM8KqXzTCql81wqpfNsKqX1PDoScuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgIExMIDogJ0QgW2RlXSBNTU1NIFtkZV0gWVlZWScsXG4gICAgICAgIExMTCA6ICdEIFtkZV0gTU1NTSBbZGVdIFlZWVkgSEg6bW0nLFxuICAgICAgICBMTExMIDogJ2RkZGQsIEQgW2RlXSBNTU1NIFtkZV0gWVlZWSBISDptbSdcbiAgICB9LFxuICAgIGNhbGVuZGFyIDoge1xuICAgICAgICBzYW1lRGF5OiAnW0hvamUgw6BzXSBMVCcsXG4gICAgICAgIG5leHREYXk6ICdbQW1hbmjDoyDDoHNdIExUJyxcbiAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFvDoHNdIExUJyxcbiAgICAgICAgbGFzdERheTogJ1tPbnRlbSDDoHNdIExUJyxcbiAgICAgICAgbGFzdFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiAodGhpcy5kYXkoKSA9PT0gMCB8fCB0aGlzLmRheSgpID09PSA2KSA/XG4gICAgICAgICAgICAgICAgJ1vDmmx0aW1vXSBkZGRkIFvDoHNdIExUJyA6IC8vIFNhdHVyZGF5ICsgU3VuZGF5XG4gICAgICAgICAgICAgICAgJ1vDmmx0aW1hXSBkZGRkIFvDoHNdIExUJzsgLy8gTW9uZGF5IC0gRnJpZGF5XG4gICAgICAgIH0sXG4gICAgICAgIHNhbWVFbHNlOiAnTCdcbiAgICB9LFxuICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgZnV0dXJlIDogJ2VtICVzJyxcbiAgICAgICAgcGFzdCA6ICdow6EgJXMnLFxuICAgICAgICBzIDogJ3NlZ3VuZG9zJyxcbiAgICAgICAgbSA6ICd1bSBtaW51dG8nLFxuICAgICAgICBtbSA6ICclZCBtaW51dG9zJyxcbiAgICAgICAgaCA6ICd1bWEgaG9yYScsXG4gICAgICAgIGhoIDogJyVkIGhvcmFzJyxcbiAgICAgICAgZCA6ICd1bSBkaWEnLFxuICAgICAgICBkZCA6ICclZCBkaWFzJyxcbiAgICAgICAgTSA6ICd1bSBtw6pzJyxcbiAgICAgICAgTU0gOiAnJWQgbWVzZXMnLFxuICAgICAgICB5IDogJ3VtIGFubycsXG4gICAgICAgIHl5IDogJyVkIGFub3MnXG4gICAgfSxcbiAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn3Cui8sXG4gICAgb3JkaW5hbCA6ICclZMK6JyxcbiAgICB3ZWVrIDoge1xuICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgZG95IDogNCAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgIH1cbn0pO1xuXG5yZXR1cm4gcHQ7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogUG9ydHVndWVzZSAoQnJhemlsKSBbcHQtYnJdXG4vLyEgYXV0aG9yIDogQ2FpbyBSaWJlaXJvIFBlcmVpcmEgOiBodHRwczovL2dpdGh1Yi5jb20vY2Fpby1yaWJlaXJvLXBlcmVpcmFcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG52YXIgcHRCciA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3B0LWJyJywge1xuICAgIG1vbnRocyA6ICdKYW5laXJvX0ZldmVyZWlyb19NYXLDp29fQWJyaWxfTWFpb19KdW5ob19KdWxob19BZ29zdG9fU2V0ZW1icm9fT3V0dWJyb19Ob3ZlbWJyb19EZXplbWJybycuc3BsaXQoJ18nKSxcbiAgICBtb250aHNTaG9ydCA6ICdKYW5fRmV2X01hcl9BYnJfTWFpX0p1bl9KdWxfQWdvX1NldF9PdXRfTm92X0Rleicuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5cyA6ICdEb21pbmdvX1NlZ3VuZGEtZmVpcmFfVGVyw6dhLWZlaXJhX1F1YXJ0YS1mZWlyYV9RdWludGEtZmVpcmFfU2V4dGEtZmVpcmFfU8OhYmFkbycuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1Nob3J0IDogJ0RvbV9TZWdfVGVyX1F1YV9RdWlfU2V4X1PDoWInLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNNaW4gOiAnRG9fMsKqXzPCql80wqpfNcKqXzbCql9Tw6EnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICBMTCA6ICdEIFtkZV0gTU1NTSBbZGVdIFlZWVknLFxuICAgICAgICBMTEwgOiAnRCBbZGVdIE1NTU0gW2RlXSBZWVlZIFvDoHNdIEhIOm1tJyxcbiAgICAgICAgTExMTCA6ICdkZGRkLCBEIFtkZV0gTU1NTSBbZGVdIFlZWVkgW8Ogc10gSEg6bW0nXG4gICAgfSxcbiAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgc2FtZURheTogJ1tIb2plIMOgc10gTFQnLFxuICAgICAgICBuZXh0RGF5OiAnW0FtYW5ow6Mgw6BzXSBMVCcsXG4gICAgICAgIG5leHRXZWVrOiAnZGRkZCBbw6BzXSBMVCcsXG4gICAgICAgIGxhc3REYXk6ICdbT250ZW0gw6BzXSBMVCcsXG4gICAgICAgIGxhc3RXZWVrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gKHRoaXMuZGF5KCkgPT09IDAgfHwgdGhpcy5kYXkoKSA9PT0gNikgP1xuICAgICAgICAgICAgICAgICdbw5psdGltb10gZGRkZCBbw6BzXSBMVCcgOiAvLyBTYXR1cmRheSArIFN1bmRheVxuICAgICAgICAgICAgICAgICdbw5psdGltYV0gZGRkZCBbw6BzXSBMVCc7IC8vIE1vbmRheSAtIEZyaWRheVxuICAgICAgICB9LFxuICAgICAgICBzYW1lRWxzZTogJ0wnXG4gICAgfSxcbiAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgIGZ1dHVyZSA6ICdlbSAlcycsXG4gICAgICAgIHBhc3QgOiAnJXMgYXRyw6FzJyxcbiAgICAgICAgcyA6ICdwb3Vjb3Mgc2VndW5kb3MnLFxuICAgICAgICBtIDogJ3VtIG1pbnV0bycsXG4gICAgICAgIG1tIDogJyVkIG1pbnV0b3MnLFxuICAgICAgICBoIDogJ3VtYSBob3JhJyxcbiAgICAgICAgaGggOiAnJWQgaG9yYXMnLFxuICAgICAgICBkIDogJ3VtIGRpYScsXG4gICAgICAgIGRkIDogJyVkIGRpYXMnLFxuICAgICAgICBNIDogJ3VtIG3DqnMnLFxuICAgICAgICBNTSA6ICclZCBtZXNlcycsXG4gICAgICAgIHkgOiAndW0gYW5vJyxcbiAgICAgICAgeXkgOiAnJWQgYW5vcydcbiAgICB9LFxuICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfcK6LyxcbiAgICBvcmRpbmFsIDogJyVkwronXG59KTtcblxucmV0dXJuIHB0QnI7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogUm9tYW5pYW4gW3JvXVxuLy8hIGF1dGhvciA6IFZsYWQgR3VyZGlnYSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9ndXJkaWdhXG4vLyEgYXV0aG9yIDogVmFsZW50aW4gQWdhY2hpIDogaHR0cHM6Ly9naXRodWIuY29tL2F2YWx5XG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuZnVuY3Rpb24gcmVsYXRpdmVUaW1lV2l0aFBsdXJhbChudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGtleSkge1xuICAgIHZhciBmb3JtYXQgPSB7XG4gICAgICAgICAgICAnbW0nOiAnbWludXRlJyxcbiAgICAgICAgICAgICdoaCc6ICdvcmUnLFxuICAgICAgICAgICAgJ2RkJzogJ3ppbGUnLFxuICAgICAgICAgICAgJ01NJzogJ2x1bmknLFxuICAgICAgICAgICAgJ3l5JzogJ2FuaSdcbiAgICAgICAgfSxcbiAgICAgICAgc2VwYXJhdG9yID0gJyAnO1xuICAgIGlmIChudW1iZXIgJSAxMDAgPj0gMjAgfHwgKG51bWJlciA+PSAxMDAgJiYgbnVtYmVyICUgMTAwID09PSAwKSkge1xuICAgICAgICBzZXBhcmF0b3IgPSAnIGRlICc7XG4gICAgfVxuICAgIHJldHVybiBudW1iZXIgKyBzZXBhcmF0b3IgKyBmb3JtYXRba2V5XTtcbn1cblxudmFyIHJvID0gbW9tZW50LmRlZmluZUxvY2FsZSgncm8nLCB7XG4gICAgbW9udGhzIDogJ2lhbnVhcmllX2ZlYnJ1YXJpZV9tYXJ0aWVfYXByaWxpZV9tYWlfaXVuaWVfaXVsaWVfYXVndXN0X3NlcHRlbWJyaWVfb2N0b21icmllX25vaWVtYnJpZV9kZWNlbWJyaWUnLnNwbGl0KCdfJyksXG4gICAgbW9udGhzU2hvcnQgOiAnaWFuLl9mZWJyLl9tYXJ0Ll9hcHIuX21haV9pdW4uX2l1bC5fYXVnLl9zZXB0Ll9vY3QuX25vdi5fZGVjLicuc3BsaXQoJ18nKSxcbiAgICBtb250aHNQYXJzZUV4YWN0OiB0cnVlLFxuICAgIHdlZWtkYXlzIDogJ2R1bWluaWPEg19sdW5pX21hcsibaV9taWVyY3VyaV9qb2lfdmluZXJpX3PDom1ixIN0xIMnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNTaG9ydCA6ICdEdW1fTHVuX01hcl9NaWVfSm9pX1Zpbl9Tw6JtJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzTWluIDogJ0R1X0x1X01hX01pX0pvX1ZpX1PDoicuc3BsaXQoJ18nKSxcbiAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgTFQgOiAnSDptbScsXG4gICAgICAgIExUUyA6ICdIOm1tOnNzJyxcbiAgICAgICAgTCA6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgSDptbScsXG4gICAgICAgIExMTEwgOiAnZGRkZCwgRCBNTU1NIFlZWVkgSDptbSdcbiAgICB9LFxuICAgIGNhbGVuZGFyIDoge1xuICAgICAgICBzYW1lRGF5OiAnW2F6aSBsYV0gTFQnLFxuICAgICAgICBuZXh0RGF5OiAnW23DomluZSBsYV0gTFQnLFxuICAgICAgICBuZXh0V2VlazogJ2RkZGQgW2xhXSBMVCcsXG4gICAgICAgIGxhc3REYXk6ICdbaWVyaSBsYV0gTFQnLFxuICAgICAgICBsYXN0V2VlazogJ1tmb3N0YV0gZGRkZCBbbGFdIExUJyxcbiAgICAgICAgc2FtZUVsc2U6ICdMJ1xuICAgIH0sXG4gICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICBmdXR1cmUgOiAncGVzdGUgJXMnLFxuICAgICAgICBwYXN0IDogJyVzIMOubiB1cm3EgycsXG4gICAgICAgIHMgOiAnY8OidGV2YSBzZWN1bmRlJyxcbiAgICAgICAgbSA6ICd1biBtaW51dCcsXG4gICAgICAgIG1tIDogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgaCA6ICdvIG9yxIMnLFxuICAgICAgICBoaCA6IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgIGQgOiAnbyB6aScsXG4gICAgICAgIGRkIDogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgTSA6ICdvIGx1bsSDJyxcbiAgICAgICAgTU0gOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICB5IDogJ3VuIGFuJyxcbiAgICAgICAgeXkgOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsXG4gICAgfSxcbiAgICB3ZWVrIDoge1xuICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgZG95IDogNyAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gMXN0IGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgIH1cbn0pO1xuXG5yZXR1cm4gcm87XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogUnVzc2lhbiBbcnVdXG4vLyEgYXV0aG9yIDogVmlrdG9ybWluYXRvciA6IGh0dHBzOi8vZ2l0aHViLmNvbS9WaWt0b3JtaW5hdG9yXG4vLyEgQXV0aG9yIDogTWVuZWxpb24gRWxlbnPDumxlIDogaHR0cHM6Ly9naXRodWIuY29tL09pcmVcbi8vISBhdXRob3IgOiDQmtC+0YDQtdC90LHQtdGA0LMg0JzQsNGA0LogOiBodHRwczovL2dpdGh1Yi5jb20vc29ja2V0cGFpclxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbmZ1bmN0aW9uIHBsdXJhbCh3b3JkLCBudW0pIHtcbiAgICB2YXIgZm9ybXMgPSB3b3JkLnNwbGl0KCdfJyk7XG4gICAgcmV0dXJuIG51bSAlIDEwID09PSAxICYmIG51bSAlIDEwMCAhPT0gMTEgPyBmb3Jtc1swXSA6IChudW0gJSAxMCA+PSAyICYmIG51bSAlIDEwIDw9IDQgJiYgKG51bSAlIDEwMCA8IDEwIHx8IG51bSAlIDEwMCA+PSAyMCkgPyBmb3Jtc1sxXSA6IGZvcm1zWzJdKTtcbn1cbmZ1bmN0aW9uIHJlbGF0aXZlVGltZVdpdGhQbHVyYWwobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXkpIHtcbiAgICB2YXIgZm9ybWF0ID0ge1xuICAgICAgICAnbW0nOiB3aXRob3V0U3VmZml4ID8gJ9C80LjQvdGD0YLQsF/QvNC40L3Rg9GC0Ytf0LzQuNC90YPRgicgOiAn0LzQuNC90YPRgtGDX9C80LjQvdGD0YLRi1/QvNC40L3Rg9GCJyxcbiAgICAgICAgJ2hoJzogJ9GH0LDRgV/Rh9Cw0YHQsF/Rh9Cw0YHQvtCyJyxcbiAgICAgICAgJ2RkJzogJ9C00LXQvdGMX9C00L3Rj1/QtNC90LXQuScsXG4gICAgICAgICdNTSc6ICfQvNC10YHRj9GGX9C80LXRgdGP0YbQsF/QvNC10YHRj9GG0LXQsicsXG4gICAgICAgICd5eSc6ICfQs9C+0LRf0LPQvtC00LBf0LvQtdGCJ1xuICAgIH07XG4gICAgaWYgKGtleSA9PT0gJ20nKSB7XG4gICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4ID8gJ9C80LjQvdGD0YLQsCcgOiAn0LzQuNC90YPRgtGDJztcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBudW1iZXIgKyAnICcgKyBwbHVyYWwoZm9ybWF0W2tleV0sICtudW1iZXIpO1xuICAgIH1cbn1cbnZhciBtb250aHNQYXJzZSA9IFsvXtGP0L3Qsi9pLCAvXtGE0LXQsi9pLCAvXtC80LDRgC9pLCAvXtCw0L/RgC9pLCAvXtC80LBb0LnRj10vaSwgL17QuNGO0L0vaSwgL17QuNGO0LsvaSwgL17QsNCy0LMvaSwgL17RgdC10L0vaSwgL17QvtC60YIvaSwgL17QvdC+0Y8vaSwgL17QtNC10LovaV07XG5cbi8vIGh0dHA6Ly9uZXcuZ3JhbW90YS5ydS9zcHJhdmthL3J1bGVzLzEzOS1wcm9wIDogwqcgMTAzXG4vLyDQodC+0LrRgNCw0YnQtdC90LjRjyDQvNC10YHRj9GG0LXQsjogaHR0cDovL25ldy5ncmFtb3RhLnJ1L3NwcmF2a2EvYnVyby9zZWFyY2gtYW5zd2VyP3M9MjQyNjM3XG4vLyBDTERSIGRhdGE6ICAgICAgICAgIGh0dHA6Ly93d3cudW5pY29kZS5vcmcvY2xkci9jaGFydHMvMjgvc3VtbWFyeS9ydS5odG1sIzE3NTNcbnZhciBydSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3J1Jywge1xuICAgIG1vbnRocyA6IHtcbiAgICAgICAgZm9ybWF0OiAn0Y/QvdCy0LDRgNGPX9GE0LXQstGA0LDQu9GPX9C80LDRgNGC0LBf0LDQv9GA0LXQu9GPX9C80LDRj1/QuNGO0L3Rj1/QuNGO0LvRj1/QsNCy0LPRg9GB0YLQsF/RgdC10L3RgtGP0LHRgNGPX9C+0LrRgtGP0LHRgNGPX9C90L7Rj9Cx0YDRj1/QtNC10LrQsNCx0YDRjycuc3BsaXQoJ18nKSxcbiAgICAgICAgc3RhbmRhbG9uZTogJ9GP0L3QstCw0YDRjF/RhNC10LLRgNCw0LvRjF/QvNCw0YDRgl/QsNC/0YDQtdC70Yxf0LzQsNC5X9C40Y7QvdGMX9C40Y7Qu9GMX9Cw0LLQs9GD0YHRgl/RgdC10L3RgtGP0LHRgNGMX9C+0LrRgtGP0LHRgNGMX9C90L7Rj9Cx0YDRjF/QtNC10LrQsNCx0YDRjCcuc3BsaXQoJ18nKVxuICAgIH0sXG4gICAgbW9udGhzU2hvcnQgOiB7XG4gICAgICAgIC8vINC/0L4gQ0xEUiDQuNC80LXQvdC90L4gXCLQuNGO0LsuXCIg0LggXCLQuNGO0L0uXCIsINC90L4g0LrQsNC60L7QuSDRgdC80YvRgdC7INC80LXQvdGP0YLRjCDQsdGD0LrQstGDINC90LAg0YLQvtGH0LrRgyA/XG4gICAgICAgIGZvcm1hdDogJ9GP0L3Qsi5f0YTQtdCy0YAuX9C80LDRgC5f0LDQv9GALl/QvNCw0Y9f0LjRjtC90Y9f0LjRjtC70Y9f0LDQstCzLl/RgdC10L3Rgi5f0L7QutGCLl/QvdC+0Y/QsS5f0LTQtdC6Licuc3BsaXQoJ18nKSxcbiAgICAgICAgc3RhbmRhbG9uZTogJ9GP0L3Qsi5f0YTQtdCy0YAuX9C80LDRgNGCX9Cw0L/RgC5f0LzQsNC5X9C40Y7QvdGMX9C40Y7Qu9GMX9Cw0LLQsy5f0YHQtdC90YIuX9C+0LrRgi5f0L3QvtGP0LEuX9C00LXQui4nLnNwbGl0KCdfJylcbiAgICB9LFxuICAgIHdlZWtkYXlzIDoge1xuICAgICAgICBzdGFuZGFsb25lOiAn0LLQvtGB0LrRgNC10YHQtdC90YzQtV/Qv9C+0L3QtdC00LXQu9GM0L3QuNC6X9Cy0YLQvtGA0L3QuNC6X9GB0YDQtdC00LBf0YfQtdGC0LLQtdGA0LNf0L/Rj9GC0L3QuNGG0LBf0YHRg9Cx0LHQvtGC0LAnLnNwbGl0KCdfJyksXG4gICAgICAgIGZvcm1hdDogJ9Cy0L7RgdC60YDQtdGB0LXQvdGM0LVf0L/QvtC90LXQtNC10LvRjNC90LjQul/QstGC0L7RgNC90LjQul/RgdGA0LXQtNGDX9GH0LXRgtCy0LXRgNCzX9C/0Y/RgtC90LjRhtGDX9GB0YPQsdCx0L7RgtGDJy5zcGxpdCgnXycpLFxuICAgICAgICBpc0Zvcm1hdDogL1xcWyA/W9CS0LJdID8oPzrQv9GA0L7RiNC70YPRjnzRgdC70LXQtNGD0Y7RidGD0Y580Y3RgtGDKT8gP1xcXSA/ZGRkZC9cbiAgICB9LFxuICAgIHdlZWtkYXlzU2hvcnQgOiAn0LLRgV/Qv9C9X9Cy0YJf0YHRgF/Rh9GCX9C/0YJf0YHQsScuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c01pbiA6ICfQstGBX9C/0L1f0LLRgl/RgdGAX9GH0YJf0L/Rgl/RgdCxJy5zcGxpdCgnXycpLFxuICAgIG1vbnRoc1BhcnNlIDogbW9udGhzUGFyc2UsXG4gICAgbG9uZ01vbnRoc1BhcnNlIDogbW9udGhzUGFyc2UsXG4gICAgc2hvcnRNb250aHNQYXJzZSA6IG1vbnRoc1BhcnNlLFxuXG4gICAgLy8g0L/QvtC70L3Ri9C1INC90LDQt9Cy0LDQvdC40Y8g0YEg0L/QsNC00LXQttCw0LzQuCwg0L/QviDRgtGA0Lgg0LHRg9C60LLRiywg0LTQu9GPINC90LXQutC+0YLQvtGA0YvRhSwg0L/QviA0INCx0YPQutCy0YssINGB0L7QutGA0LDRidC10L3QuNGPINGBINGC0L7Rh9C60L7QuSDQuCDQsdC10Lcg0YLQvtGH0LrQuFxuICAgIG1vbnRoc1JlZ2V4OiAvXijRj9C90LLQsNGAW9GM0Y9dfNGP0L3QslxcLj980YTQtdCy0YDQsNC7W9GM0Y9dfNGE0LXQstGAP1xcLj980LzQsNGA0YLQsD980LzQsNGAXFwuP3zQsNC/0YDQtdC7W9GM0Y9dfNCw0L/RgFxcLj980LzQsFvQudGPXXzQuNGO0L1b0YzRj1180LjRjtC9XFwuP3zQuNGO0Ltb0YzRj1180LjRjtC7XFwuP3zQsNCy0LPRg9GB0YLQsD980LDQstCzXFwuP3zRgdC10L3RgtGP0LHRgFvRjNGPXXzRgdC10L3Rgj9cXC4/fNC+0LrRgtGP0LHRgFvRjNGPXXzQvtC60YJcXC4/fNC90L7Rj9Cx0YBb0YzRj1180L3QvtGP0LE/XFwuP3zQtNC10LrQsNCx0YBb0YzRj1180LTQtdC6XFwuPykvaSxcblxuICAgIC8vINC60L7Qv9C40Y8g0L/RgNC10LTRi9C00YPRidC10LPQvlxuICAgIG1vbnRoc1Nob3J0UmVnZXg6IC9eKNGP0L3QstCw0YBb0YzRj1180Y/QvdCyXFwuP3zRhNC10LLRgNCw0Ltb0YzRj1180YTQtdCy0YA/XFwuP3zQvNCw0YDRgtCwP3zQvNCw0YBcXC4/fNCw0L/RgNC10Ltb0YzRj1180LDQv9GAXFwuP3zQvNCwW9C50Y9dfNC40Y7QvVvRjNGPXXzQuNGO0L1cXC4/fNC40Y7Qu1vRjNGPXXzQuNGO0LtcXC4/fNCw0LLQs9GD0YHRgtCwP3zQsNCy0LNcXC4/fNGB0LXQvdGC0Y/QsdGAW9GM0Y9dfNGB0LXQvdGCP1xcLj980L7QutGC0Y/QsdGAW9GM0Y9dfNC+0LrRglxcLj980L3QvtGP0LHRgFvRjNGPXXzQvdC+0Y/QsT9cXC4/fNC00LXQutCw0LHRgFvRjNGPXXzQtNC10LpcXC4/KS9pLFxuXG4gICAgLy8g0L/QvtC70L3Ri9C1INC90LDQt9Cy0LDQvdC40Y8g0YEg0L/QsNC00LXQttCw0LzQuFxuICAgIG1vbnRoc1N0cmljdFJlZ2V4OiAvXijRj9C90LLQsNGAW9GP0YxdfNGE0LXQstGA0LDQu1vRj9GMXXzQvNCw0YDRgtCwP3zQsNC/0YDQtdC7W9GP0YxdfNC80LBb0Y/QuV180LjRjtC9W9GP0YxdfNC40Y7Qu1vRj9GMXXzQsNCy0LPRg9GB0YLQsD980YHQtdC90YLRj9Cx0YBb0Y/RjF180L7QutGC0Y/QsdGAW9GP0YxdfNC90L7Rj9Cx0YBb0Y/RjF180LTQtdC60LDQsdGAW9GP0YxdKS9pLFxuXG4gICAgLy8g0JLRi9GA0LDQttC10L3QuNC1LCDQutC+0YLQvtGA0L7QtSDRgdC+0L7RgtCy0LXRgdGC0LLRg9C10YIg0YLQvtC70YzQutC+INGB0L7QutGA0LDRidGR0L3QvdGL0Lwg0YTQvtGA0LzQsNC8XG4gICAgbW9udGhzU2hvcnRTdHJpY3RSZWdleDogL14o0Y/QvdCyXFwufNGE0LXQstGAP1xcLnzQvNCw0YBb0YIuXXzQsNC/0YBcXC580LzQsFvRj9C5XXzQuNGO0L1b0YzRjy5dfNC40Y7Qu1vRjNGPLl180LDQstCzXFwufNGB0LXQvdGCP1xcLnzQvtC60YJcXC580L3QvtGP0LE/XFwufNC00LXQulxcLikvaSxcbiAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICBMIDogJ0RELk1NLllZWVknLFxuICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWSDQsy4nLFxuICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkg0LMuLCBISDptbScsXG4gICAgICAgIExMTEwgOiAnZGRkZCwgRCBNTU1NIFlZWVkg0LMuLCBISDptbSdcbiAgICB9LFxuICAgIGNhbGVuZGFyIDoge1xuICAgICAgICBzYW1lRGF5OiAnW9Ch0LXQs9C+0LTQvdGPINCyXSBMVCcsXG4gICAgICAgIG5leHREYXk6ICdb0JfQsNCy0YLRgNCwINCyXSBMVCcsXG4gICAgICAgIGxhc3REYXk6ICdb0JLRh9C10YDQsCDQsl0gTFQnLFxuICAgICAgICBuZXh0V2VlazogZnVuY3Rpb24gKG5vdykge1xuICAgICAgICAgICAgaWYgKG5vdy53ZWVrKCkgIT09IHRoaXMud2VlaygpKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLmRheSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW9CSINGB0LvQtdC00YPRjtGJ0LXQtV0gZGRkZCBb0LJdIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW9CSINGB0LvQtdC00YPRjtGJ0LjQuV0gZGRkZCBb0LJdIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW9CSINGB0LvQtdC00YPRjtGJ0YPRjl0gZGRkZCBb0LJdIExUJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmRheSgpID09PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnW9CS0L5dIGRkZGQgW9CyXSBMVCc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdb0JJdIGRkZGQgW9CyXSBMVCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBsYXN0V2VlazogZnVuY3Rpb24gKG5vdykge1xuICAgICAgICAgICAgaWYgKG5vdy53ZWVrKCkgIT09IHRoaXMud2VlaygpKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLmRheSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW9CSINC/0YDQvtGI0LvQvtC1XSBkZGRkIFvQsl0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdb0JIg0L/RgNC+0YjQu9GL0LldIGRkZGQgW9CyXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1vQkiDQv9GA0L7RiNC70YPRjl0gZGRkZCBb0LJdIExUJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmRheSgpID09PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnW9CS0L5dIGRkZGQgW9CyXSBMVCc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdb0JJdIGRkZGQgW9CyXSBMVCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBzYW1lRWxzZTogJ0wnXG4gICAgfSxcbiAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgIGZ1dHVyZSA6ICfRh9C10YDQtdC3ICVzJyxcbiAgICAgICAgcGFzdCA6ICclcyDQvdCw0LfQsNC0JyxcbiAgICAgICAgcyA6ICfQvdC10YHQutC+0LvRjNC60L4g0YHQtdC60YPQvdC0JyxcbiAgICAgICAgbSA6IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgIG1tIDogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgaCA6ICfRh9Cw0YEnLFxuICAgICAgICBoaCA6IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgIGQgOiAn0LTQtdC90YwnLFxuICAgICAgICBkZCA6IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgIE0gOiAn0LzQtdGB0Y/RhicsXG4gICAgICAgIE1NIDogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgeSA6ICfQs9C+0LQnLFxuICAgICAgICB5eSA6IHJlbGF0aXZlVGltZVdpdGhQbHVyYWxcbiAgICB9LFxuICAgIG1lcmlkaWVtUGFyc2U6IC/QvdC+0YfQuHzRg9GC0YDQsHzQtNC90Y980LLQtdGH0LXRgNCwL2ksXG4gICAgaXNQTSA6IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICByZXR1cm4gL14o0LTQvdGPfNCy0LXRh9C10YDQsCkkLy50ZXN0KGlucHV0KTtcbiAgICB9LFxuICAgIG1lcmlkaWVtIDogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICBpZiAoaG91ciA8IDQpIHtcbiAgICAgICAgICAgIHJldHVybiAn0L3QvtGH0LgnO1xuICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxMikge1xuICAgICAgICAgICAgcmV0dXJuICfRg9GC0YDQsCc7XG4gICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDE3KSB7XG4gICAgICAgICAgICByZXR1cm4gJ9C00L3Rjyc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gJ9Cy0LXRh9C10YDQsCc7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfS0o0Ll80LPQvnzRjykvLFxuICAgIG9yZGluYWw6IGZ1bmN0aW9uIChudW1iZXIsIHBlcmlvZCkge1xuICAgICAgICBzd2l0Y2ggKHBlcmlvZCkge1xuICAgICAgICAgICAgY2FzZSAnTSc6XG4gICAgICAgICAgICBjYXNlICdkJzpcbiAgICAgICAgICAgIGNhc2UgJ0RERCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICct0LknO1xuICAgICAgICAgICAgY2FzZSAnRCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICct0LPQvic7XG4gICAgICAgICAgICBjYXNlICd3JzpcbiAgICAgICAgICAgIGNhc2UgJ1cnOlxuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnLdGPJztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgd2VlayA6IHtcbiAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgIGRveSA6IDcgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDFzdCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICB9XG59KTtcblxucmV0dXJuIHJ1O1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IFNpbmRoaSBbc2RdXG4vLyEgYXV0aG9yIDogTmFyYWluIFNhZ2FyIDogaHR0cHM6Ly9naXRodWIuY29tL25hcmFpbnNhZ2FyXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxudmFyIG1vbnRocyA9IFtcbiAgICAn2KzZhtmI2LHZiicsXG4gICAgJ9mB2YrYqNix2YjYsdmKJyxcbiAgICAn2YXYp9ix2oYnLFxuICAgICfYp9m+2LHZitmEJyxcbiAgICAn2YXYptmKJyxcbiAgICAn2KzZiNmGJyxcbiAgICAn2KzZiNmE2KfYodmQJyxcbiAgICAn2KLar9iz2b0nLFxuICAgICfYs9mK2b7ZvdmF2KjYsScsXG4gICAgJ9ii2qrZvdmI2KjYsScsXG4gICAgJ9mG2YjZhdio2LEnLFxuICAgICfaitiz2YXYqNixJ1xuXTtcbnZhciBkYXlzID0gW1xuICAgICfYotqG2LEnLFxuICAgICfYs9mI2YXYsScsXG4gICAgJ9in2rHYp9ix2YgnLFxuICAgICfYp9ix2KjYuScsXG4gICAgJ9iu2YXZitizJyxcbiAgICAn2KzZhdi5JyxcbiAgICAn2ofZhtqH2LEnXG5dO1xuXG52YXIgc2QgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdzZCcsIHtcbiAgICBtb250aHMgOiBtb250aHMsXG4gICAgbW9udGhzU2hvcnQgOiBtb250aHMsXG4gICAgd2Vla2RheXMgOiBkYXlzLFxuICAgIHdlZWtkYXlzU2hvcnQgOiBkYXlzLFxuICAgIHdlZWtkYXlzTWluIDogZGF5cyxcbiAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIExMTEwgOiAnZGRkZNiMIEQgTU1NTSBZWVlZIEhIOm1tJ1xuICAgIH0sXG4gICAgbWVyaWRpZW1QYXJzZTogL9i12KjYrXzYtNin2YUvLFxuICAgIGlzUE0gOiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuICfYtNin2YUnID09PSBpbnB1dDtcbiAgICB9LFxuICAgIG1lcmlkaWVtIDogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICBpZiAoaG91ciA8IDEyKSB7XG4gICAgICAgICAgICByZXR1cm4gJ9i12KjYrSc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICfYtNin2YUnO1xuICAgIH0sXG4gICAgY2FsZW5kYXIgOiB7XG4gICAgICAgIHNhbWVEYXkgOiAnW9in2oRdIExUJyxcbiAgICAgICAgbmV4dERheSA6ICdb2LPagNin2rvZil0gTFQnLFxuICAgICAgICBuZXh0V2VlayA6ICdkZGRkIFvYp9qz2YrZhiDZh9mB2KrZiiDYqtmKXSBMVCcsXG4gICAgICAgIGxhc3REYXkgOiAnW9qq2KfZhNmH2YddIExUJyxcbiAgICAgICAgbGFzdFdlZWsgOiAnW9qv2LLYsdmK2YQg2YfZgdiq2YpdIGRkZGQgW9iq2YpdIExUJyxcbiAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICB9LFxuICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgZnV0dXJlIDogJyVzINm+2YjYoScsXG4gICAgICAgIHBhc3QgOiAnJXMg2KfasycsXG4gICAgICAgIHMgOiAn2obZhtivINiz2YraqtmG2oonLFxuICAgICAgICBtIDogJ9mH2qog2YXZhtm9JyxcbiAgICAgICAgbW0gOiAnJWQg2YXZhtm9JyxcbiAgICAgICAgaCA6ICfZh9qqINqq2YTYp9qqJyxcbiAgICAgICAgaGggOiAnJWQg2qrZhNin2qonLFxuICAgICAgICBkIDogJ9mH2qog2o/ZitmG2YfZhicsXG4gICAgICAgIGRkIDogJyVkINqP2YrZhtmH2YYnLFxuICAgICAgICBNIDogJ9mH2qog2YXZh9mK2YbZiCcsXG4gICAgICAgIE1NIDogJyVkINmF2YfZitmG2KcnLFxuICAgICAgICB5IDogJ9mH2qog2LPYp9mEJyxcbiAgICAgICAgeXkgOiAnJWQg2LPYp9mEJ1xuICAgIH0sXG4gICAgcHJlcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC/YjC9nLCAnLCcpO1xuICAgIH0sXG4gICAgcG9zdGZvcm1hdDogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoLywvZywgJ9iMJyk7XG4gICAgfSxcbiAgICB3ZWVrIDoge1xuICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgZG95IDogNCAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgIH1cbn0pO1xuXG5yZXR1cm4gc2Q7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogTm9ydGhlcm4gU2FtaSBbc2VdXG4vLyEgYXV0aG9ycyA6IELDpXJkIFJvbHN0YWQgSGVucmlrc2VuIDogaHR0cHM6Ly9naXRodWIuY29tL2thcmFtZWxsXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuXG52YXIgc2UgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdzZScsIHtcbiAgICBtb250aHMgOiAnb8SRxJFhamFnZW3DoW5udV9ndW92dmFtw6FubnVfbmp1a8SNYW3DoW5udV9jdW/Fi29tw6FubnVfbWllc3NlbcOhbm51X2dlYXNzZW3DoW5udV9zdW9pZG5lbcOhbm51X2JvcmdlbcOhbm51X8SNYWvEjWFtw6FubnVfZ29sZ2dvdG3DoW5udV9za8OhYm1hbcOhbm51X2p1b3ZsYW3DoW5udScuc3BsaXQoJ18nKSxcbiAgICBtb250aHNTaG9ydCA6ICdvxJHEkWpfZ3Vvdl9uanVrX2N1b19taWVzX2dlYXNfc3VvaV9ib3JnX8SNYWvEjV9nb2xnX3Nrw6FiX2p1b3YnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXMgOiAnc290bmFiZWFpdmlfdnVvc3PDoXJnYV9tYcWLxYtlYsOhcmdhX2dhc2thdmFoa2t1X2R1b3Jhc3RhdF9iZWFyamFkYXRfbMOhdnZhcmRhdCcuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1Nob3J0IDogJ3NvdG5fdnVvc19tYcWLX2dhc2tfZHVvcl9iZWFyX2zDoXYnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNNaW4gOiAnc192X21fZ19kX2JfTCcuc3BsaXQoJ18nKSxcbiAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICBMIDogJ0RELk1NLllZWVknLFxuICAgICAgICBMTCA6ICdNTU1NIEQuIFtiLl0gWVlZWScsXG4gICAgICAgIExMTCA6ICdNTU1NIEQuIFtiLl0gWVlZWSBbdGkuXSBISDptbScsXG4gICAgICAgIExMTEwgOiAnZGRkZCwgTU1NTSBELiBbYi5dIFlZWVkgW3RpLl0gSEg6bW0nXG4gICAgfSxcbiAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgc2FtZURheTogJ1tvdG5lIHRpXSBMVCcsXG4gICAgICAgIG5leHREYXk6ICdbaWh0dGluIHRpXSBMVCcsXG4gICAgICAgIG5leHRXZWVrOiAnZGRkZCBbdGldIExUJyxcbiAgICAgICAgbGFzdERheTogJ1tpa3RlIHRpXSBMVCcsXG4gICAgICAgIGxhc3RXZWVrOiAnW292ZGRpdF0gZGRkZCBbdGldIExUJyxcbiAgICAgICAgc2FtZUVsc2U6ICdMJ1xuICAgIH0sXG4gICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICBmdXR1cmUgOiAnJXMgZ2Vhxb5lcycsXG4gICAgICAgIHBhc3QgOiAnbWHFi2l0ICVzJyxcbiAgICAgICAgcyA6ICdtb2FkZGUgc2VrdW5kZGF0JyxcbiAgICAgICAgbSA6ICdva3RhIG1pbnVodGEnLFxuICAgICAgICBtbSA6ICclZCBtaW51aHRhdCcsXG4gICAgICAgIGggOiAnb2t0YSBkaWltbXUnLFxuICAgICAgICBoaCA6ICclZCBkaWltbXV0JyxcbiAgICAgICAgZCA6ICdva3RhIGJlYWl2aScsXG4gICAgICAgIGRkIDogJyVkIGJlYWl2dml0JyxcbiAgICAgICAgTSA6ICdva3RhIG3DoW5udScsXG4gICAgICAgIE1NIDogJyVkIG3DoW51dCcsXG4gICAgICAgIHkgOiAnb2t0YSBqYWhraScsXG4gICAgICAgIHl5IDogJyVkIGphZ2l0J1xuICAgIH0sXG4gICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9XFwuLyxcbiAgICBvcmRpbmFsIDogJyVkLicsXG4gICAgd2VlayA6IHtcbiAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICB9XG59KTtcblxucmV0dXJuIHNlO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IFNpbmhhbGVzZSBbc2ldXG4vLyEgYXV0aG9yIDogU2FtcGF0aCBTaXRpbmFtYWx1d2EgOiBodHRwczovL2dpdGh1Yi5jb20vc2FtcGF0aHNyaXNcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4vKmpzaGludCAtVzEwMCovXG52YXIgc2kgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdzaScsIHtcbiAgICBtb250aHMgOiAn4Lai4Lax4LeA4LeP4La74LeSX+C2tOC3meC2tuC2u+C3gOC3j+C2u+C3kl/gtrjgt4/gtrvgt4rgtq3gt5Rf4LaF4La04LeK4oCN4La74Lea4La94LeKX+C2uOC3kOC2uuC3kl/gtqLgt5bgtrHgt5Jf4Lai4LeW4La94LeSX+C2heC2nOC3neC3g+C3iuC2reC3lF/gt4Pgt5DgtrTgt4rgtq3gt5Dgtrjgt4rgtrbgtrvgt4pf4LaU4Laa4LeK4Lat4Led4La24La74LeKX+C2seC3nOC3gOC3kOC2uOC3iuC2tuC2u+C3il/gtq/gt5ngt4Pgt5Dgtrjgt4rgtrbgtrvgt4onLnNwbGl0KCdfJyksXG4gICAgbW9udGhzU2hvcnQgOiAn4Lai4LaxX+C2tOC3meC2tl/gtrjgt4/gtrvgt4pf4LaF4La04LeKX+C2uOC3kOC2uuC3kl/gtqLgt5bgtrHgt5Jf4Lai4LeW4La94LeSX+C2heC2nOC3nV/gt4Pgt5DgtrTgt4pf4LaU4Laa4LeKX+C2seC3nOC3gOC3kF/gtq/gt5ngt4Pgt5AnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXMgOiAn4LaJ4La74LeS4Lav4LePX+C3g+C2s+C3lOC2r+C3j1/gtoXgtp/gt4Tgtrvgt5Tgt4Dgt4/gtq/gt49f4La24Lav4LeP4Lav4LePX+C2tuC3iuKAjeC2u+C3hOC3g+C3iuC2tOC2reC3kuC2seC3iuC2r+C3j1/gt4Pgt5Lgtprgt5Tgtrvgt4/gtq/gt49f4LeD4LeZ4Lax4LeD4LeU4La74LeP4Lav4LePJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzU2hvcnQgOiAn4LaJ4La74LeSX+C3g+C2s+C3lF/gtoXgtp9f4La24Lav4LePX+C2tuC3iuKAjeC2u+C3hF/gt4Pgt5Lgtprgt5Rf4LeD4LeZ4LaxJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzTWluIDogJ+C2iV/gt4Nf4LaFX+C2tl/gtrbgt4rigI3gtrtf4LeD4LeSX+C3g+C3mScuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICBMVCA6ICdhIGg6bW0nLFxuICAgICAgICBMVFMgOiAnYSBoOm1tOnNzJyxcbiAgICAgICAgTCA6ICdZWVlZL01NL0REJyxcbiAgICAgICAgTEwgOiAnWVlZWSBNTU1NIEQnLFxuICAgICAgICBMTEwgOiAnWVlZWSBNTU1NIEQsIGEgaDptbScsXG4gICAgICAgIExMTEwgOiAnWVlZWSBNTU1NIEQgW+C3gOC3kOC2seC3kl0gZGRkZCwgYSBoOm1tOnNzJ1xuICAgIH0sXG4gICAgY2FsZW5kYXIgOiB7XG4gICAgICAgIHNhbWVEYXkgOiAnW+C2heC2r10gTFRb4LanXScsXG4gICAgICAgIG5leHREYXkgOiAnW+C3hOC3meC2p10gTFRb4LanXScsXG4gICAgICAgIG5leHRXZWVrIDogJ2RkZGQgTFRb4LanXScsXG4gICAgICAgIGxhc3REYXkgOiAnW+C2iuC2uuC3ml0gTFRb4LanXScsXG4gICAgICAgIGxhc3RXZWVrIDogJ1vgtrTgt4Pgt5Tgtpzgt5LgtrpdIGRkZGQgTFRb4LanXScsXG4gICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgfSxcbiAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgIGZ1dHVyZSA6ICclc+C2muC3kuC2seC3iicsXG4gICAgICAgIHBhc3QgOiAnJXPgtprgtqcg4La04LeZ4La7JyxcbiAgICAgICAgcyA6ICfgtq3gtq3gt4rgtrTgtrsg4Laa4LeS4LeE4LeS4La04La6JyxcbiAgICAgICAgbSA6ICfgtrjgt5LgtrHgt5Lgtq3gt4rgtq3gt5Tgt4AnLFxuICAgICAgICBtbSA6ICfgtrjgt5LgtrHgt5Lgtq3gt4rgtq3gt5QgJWQnLFxuICAgICAgICBoIDogJ+C2tOC3kOC2uicsXG4gICAgICAgIGhoIDogJ+C2tOC3kOC2uiAlZCcsXG4gICAgICAgIGQgOiAn4Lav4LeS4Lax4La6JyxcbiAgICAgICAgZGQgOiAn4Lav4LeS4LaxICVkJyxcbiAgICAgICAgTSA6ICfgtrjgt4/gt4PgtronLFxuICAgICAgICBNTSA6ICfgtrjgt4/gt4MgJWQnLFxuICAgICAgICB5IDogJ+C3gOC3g+C2uycsXG4gICAgICAgIHl5IDogJ+C3gOC3g+C2uyAlZCdcbiAgICB9LFxuICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfSDgt4Dgt5DgtrHgt5IvLFxuICAgIG9yZGluYWwgOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgIHJldHVybiBudW1iZXIgKyAnIOC3gOC3kOC2seC3kic7XG4gICAgfSxcbiAgICBtZXJpZGllbVBhcnNlIDogL+C2tOC3meC2uyDgt4Dgtrvgt5R84La04LeD4LeKIOC3gOC2u+C3lHzgtrTgt5ku4LeAfOC2tC7gt4AuLyxcbiAgICBpc1BNIDogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgIHJldHVybiBpbnB1dCA9PT0gJ+C2tC7gt4AuJyB8fCBpbnB1dCA9PT0gJ+C2tOC3g+C3iiDgt4Dgtrvgt5QnO1xuICAgIH0sXG4gICAgbWVyaWRpZW0gOiBmdW5jdGlvbiAoaG91cnMsIG1pbnV0ZXMsIGlzTG93ZXIpIHtcbiAgICAgICAgaWYgKGhvdXJzID4gMTEpIHtcbiAgICAgICAgICAgIHJldHVybiBpc0xvd2VyID8gJ+C2tC7gt4AuJyA6ICfgtrTgt4Pgt4og4LeA4La74LeUJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBpc0xvd2VyID8gJ+C2tOC3mS7gt4AuJyA6ICfgtrTgt5ngtrsg4LeA4La74LeUJztcbiAgICAgICAgfVxuICAgIH1cbn0pO1xuXG5yZXR1cm4gc2k7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogU2xvdmFrIFtza11cbi8vISBhdXRob3IgOiBNYXJ0aW4gTWlua2EgOiBodHRwczovL2dpdGh1Yi5jb20vazJzXG4vLyEgYmFzZWQgb24gd29yayBvZiBwZXRyYmVsYSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9wZXRyYmVsYVxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciBtb250aHMgPSAnamFudcOhcl9mZWJydcOhcl9tYXJlY19hcHLDrWxfbcOhal9qw7puX2rDumxfYXVndXN0X3NlcHRlbWJlcl9va3TDs2Jlcl9ub3ZlbWJlcl9kZWNlbWJlcicuc3BsaXQoJ18nKTtcbnZhciBtb250aHNTaG9ydCA9ICdqYW5fZmViX21hcl9hcHJfbcOhal9qw7puX2rDumxfYXVnX3NlcF9va3Rfbm92X2RlYycuc3BsaXQoJ18nKTtcbmZ1bmN0aW9uIHBsdXJhbChuKSB7XG4gICAgcmV0dXJuIChuID4gMSkgJiYgKG4gPCA1KTtcbn1cbmZ1bmN0aW9uIHRyYW5zbGF0ZShudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGtleSwgaXNGdXR1cmUpIHtcbiAgICB2YXIgcmVzdWx0ID0gbnVtYmVyICsgJyAnO1xuICAgIHN3aXRjaCAoa2V5KSB7XG4gICAgICAgIGNhc2UgJ3MnOiAgLy8gYSBmZXcgc2Vjb25kcyAvIGluIGEgZmV3IHNlY29uZHMgLyBhIGZldyBzZWNvbmRzIGFnb1xuICAgICAgICAgICAgcmV0dXJuICh3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlKSA/ICdww6FyIHNla8O6bmQnIDogJ3DDoXIgc2VrdW5kYW1pJztcbiAgICAgICAgY2FzZSAnbSc6ICAvLyBhIG1pbnV0ZSAvIGluIGEgbWludXRlIC8gYSBtaW51dGUgYWdvXG4gICAgICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCA/ICdtaW7DunRhJyA6IChpc0Z1dHVyZSA/ICdtaW7DunR1JyA6ICdtaW7DunRvdScpO1xuICAgICAgICBjYXNlICdtbSc6IC8vIDkgbWludXRlcyAvIGluIDkgbWludXRlcyAvIDkgbWludXRlcyBhZ29cbiAgICAgICAgICAgIGlmICh3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArIChwbHVyYWwobnVtYmVyKSA/ICdtaW7DunR5JyA6ICdtaW7DunQnKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArICdtaW7DunRhbWknO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2gnOiAgLy8gYW4gaG91ciAvIGluIGFuIGhvdXIgLyBhbiBob3VyIGFnb1xuICAgICAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggPyAnaG9kaW5hJyA6IChpc0Z1dHVyZSA/ICdob2RpbnUnIDogJ2hvZGlub3UnKTtcbiAgICAgICAgY2FzZSAnaGgnOiAvLyA5IGhvdXJzIC8gaW4gOSBob3VycyAvIDkgaG91cnMgYWdvXG4gICAgICAgICAgICBpZiAod2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAocGx1cmFsKG51bWJlcikgPyAnaG9kaW55JyA6ICdob2TDrW4nKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArICdob2RpbmFtaSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnZCc6ICAvLyBhIGRheSAvIGluIGEgZGF5IC8gYSBkYXkgYWdvXG4gICAgICAgICAgICByZXR1cm4gKHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUpID8gJ2RlxYgnIDogJ2TFiG9tJztcbiAgICAgICAgY2FzZSAnZGQnOiAvLyA5IGRheXMgLyBpbiA5IGRheXMgLyA5IGRheXMgYWdvXG4gICAgICAgICAgICBpZiAod2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAocGx1cmFsKG51bWJlcikgPyAnZG5pJyA6ICdkbsOtJyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAnZMWIYW1pJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdNJzogIC8vIGEgbW9udGggLyBpbiBhIG1vbnRoIC8gYSBtb250aCBhZ29cbiAgICAgICAgICAgIHJldHVybiAod2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSkgPyAnbWVzaWFjJyA6ICdtZXNpYWNvbSc7XG4gICAgICAgIGNhc2UgJ01NJzogLy8gOSBtb250aHMgLyBpbiA5IG1vbnRocyAvIDkgbW9udGhzIGFnb1xuICAgICAgICAgICAgaWYgKHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgKHBsdXJhbChudW1iZXIpID8gJ21lc2lhY2UnIDogJ21lc2lhY292Jyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAnbWVzaWFjbWknO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3knOiAgLy8gYSB5ZWFyIC8gaW4gYSB5ZWFyIC8gYSB5ZWFyIGFnb1xuICAgICAgICAgICAgcmV0dXJuICh3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlKSA/ICdyb2snIDogJ3Jva29tJztcbiAgICAgICAgY2FzZSAneXknOiAvLyA5IHllYXJzIC8gaW4gOSB5ZWFycyAvIDkgeWVhcnMgYWdvXG4gICAgICAgICAgICBpZiAod2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAocGx1cmFsKG51bWJlcikgPyAncm9reScgOiAncm9rb3YnKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArICdyb2ttaSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICB9XG59XG5cbnZhciBzayA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3NrJywge1xuICAgIG1vbnRocyA6IG1vbnRocyxcbiAgICBtb250aHNTaG9ydCA6IG1vbnRoc1Nob3J0LFxuICAgIHdlZWtkYXlzIDogJ25lZGXEvmFfcG9uZGVsb2tfdXRvcm9rX3N0cmVkYV/FoXR2cnRva19waWF0b2tfc29ib3RhJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzU2hvcnQgOiAnbmVfcG9fdXRfc3RfxaF0X3BpX3NvJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzTWluIDogJ25lX3BvX3V0X3N0X8WhdF9waV9zbycuc3BsaXQoJ18nKSxcbiAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgTFQ6ICdIOm1tJyxcbiAgICAgICAgTFRTIDogJ0g6bW06c3MnLFxuICAgICAgICBMIDogJ0RELk1NLllZWVknLFxuICAgICAgICBMTCA6ICdELiBNTU1NIFlZWVknLFxuICAgICAgICBMTEwgOiAnRC4gTU1NTSBZWVlZIEg6bW0nLFxuICAgICAgICBMTExMIDogJ2RkZGQgRC4gTU1NTSBZWVlZIEg6bW0nXG4gICAgfSxcbiAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgc2FtZURheTogJ1tkbmVzIG9dIExUJyxcbiAgICAgICAgbmV4dERheTogJ1t6YWp0cmEgb10gTFQnLFxuICAgICAgICBuZXh0V2VlazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgc3dpdGNoICh0aGlzLmRheSgpKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t2IG5lZGXEvnUgb10gTFQnO1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3ZdIGRkZGQgW29dIExUJztcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3Ygc3RyZWR1IG9dIExUJztcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3ZvIMWhdHZydG9rIG9dIExUJztcbiAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3YgcGlhdG9rIG9dIExUJztcbiAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3Ygc29ib3R1IG9dIExUJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbGFzdERheTogJ1t2xI1lcmEgb10gTFQnLFxuICAgICAgICBsYXN0V2VlazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgc3dpdGNoICh0aGlzLmRheSgpKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1ttaW51bMO6IG5lZGXEvnUgb10gTFQnO1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnW21pbnVsw71dIGRkZGQgW29dIExUJztcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnW21pbnVsw7ogc3RyZWR1IG9dIExUJztcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1ttaW51bMO9XSBkZGRkIFtvXSBMVCc7XG4gICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1ttaW51bMO6IHNvYm90dSBvXSBMVCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHNhbWVFbHNlOiAnTCdcbiAgICB9LFxuICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgZnV0dXJlIDogJ3phICVzJyxcbiAgICAgICAgcGFzdCA6ICdwcmVkICVzJyxcbiAgICAgICAgcyA6IHRyYW5zbGF0ZSxcbiAgICAgICAgbSA6IHRyYW5zbGF0ZSxcbiAgICAgICAgbW0gOiB0cmFuc2xhdGUsXG4gICAgICAgIGggOiB0cmFuc2xhdGUsXG4gICAgICAgIGhoIDogdHJhbnNsYXRlLFxuICAgICAgICBkIDogdHJhbnNsYXRlLFxuICAgICAgICBkZCA6IHRyYW5zbGF0ZSxcbiAgICAgICAgTSA6IHRyYW5zbGF0ZSxcbiAgICAgICAgTU0gOiB0cmFuc2xhdGUsXG4gICAgICAgIHkgOiB0cmFuc2xhdGUsXG4gICAgICAgIHl5IDogdHJhbnNsYXRlXG4gICAgfSxcbiAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn1cXC4vLFxuICAgIG9yZGluYWwgOiAnJWQuJyxcbiAgICB3ZWVrIDoge1xuICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgZG95IDogNCAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgIH1cbn0pO1xuXG5yZXR1cm4gc2s7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogU2xvdmVuaWFuIFtzbF1cbi8vISBhdXRob3IgOiBSb2JlcnQgU2Vkb3bFoWVrIDogaHR0cHM6Ly9naXRodWIuY29tL3NlZG92c2VrXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuZnVuY3Rpb24gcHJvY2Vzc1JlbGF0aXZlVGltZShudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGtleSwgaXNGdXR1cmUpIHtcbiAgICB2YXIgcmVzdWx0ID0gbnVtYmVyICsgJyAnO1xuICAgIHN3aXRjaCAoa2V5KSB7XG4gICAgICAgIGNhc2UgJ3MnOlxuICAgICAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAnbmVrYWogc2VrdW5kJyA6ICduZWthaiBzZWt1bmRhbWknO1xuICAgICAgICBjYXNlICdtJzpcbiAgICAgICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4ID8gJ2VuYSBtaW51dGEnIDogJ2VubyBtaW51dG8nO1xuICAgICAgICBjYXNlICdtbSc6XG4gICAgICAgICAgICBpZiAobnVtYmVyID09PSAxKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9IHdpdGhvdXRTdWZmaXggPyAnbWludXRhJyA6ICdtaW51dG8nO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChudW1iZXIgPT09IDIpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgKz0gd2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICdtaW51dGknIDogJ21pbnV0YW1hJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobnVtYmVyIDwgNSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCArPSB3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ21pbnV0ZScgOiAnbWludXRhbWknO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgKz0gd2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICdtaW51dCcgOiAnbWludXRhbWknO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgY2FzZSAnaCc6XG4gICAgICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCA/ICdlbmEgdXJhJyA6ICdlbm8gdXJvJztcbiAgICAgICAgY2FzZSAnaGgnOlxuICAgICAgICAgICAgaWYgKG51bWJlciA9PT0gMSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCArPSB3aXRob3V0U3VmZml4ID8gJ3VyYScgOiAndXJvJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobnVtYmVyID09PSAyKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9IHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAndXJpJyA6ICd1cmFtYSc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG51bWJlciA8IDUpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgKz0gd2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICd1cmUnIDogJ3VyYW1pJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9IHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAndXInIDogJ3VyYW1pJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIGNhc2UgJ2QnOlxuICAgICAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAnZW4gZGFuJyA6ICdlbmltIGRuZW0nO1xuICAgICAgICBjYXNlICdkZCc6XG4gICAgICAgICAgICBpZiAobnVtYmVyID09PSAxKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9IHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAnZGFuJyA6ICdkbmVtJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobnVtYmVyID09PSAyKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9IHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAnZG5pJyA6ICdkbmV2b21hJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9IHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAnZG5pJyA6ICdkbmV2aSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICBjYXNlICdNJzpcbiAgICAgICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ2VuIG1lc2VjJyA6ICdlbmltIG1lc2VjZW0nO1xuICAgICAgICBjYXNlICdNTSc6XG4gICAgICAgICAgICBpZiAobnVtYmVyID09PSAxKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9IHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAnbWVzZWMnIDogJ21lc2VjZW0nO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChudW1iZXIgPT09IDIpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgKz0gd2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICdtZXNlY2EnIDogJ21lc2VjZW1hJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobnVtYmVyIDwgNSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCArPSB3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ21lc2VjZScgOiAnbWVzZWNpJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9IHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAnbWVzZWNldicgOiAnbWVzZWNpJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIGNhc2UgJ3knOlxuICAgICAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAnZW5vIGxldG8nIDogJ2VuaW0gbGV0b20nO1xuICAgICAgICBjYXNlICd5eSc6XG4gICAgICAgICAgICBpZiAobnVtYmVyID09PSAxKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9IHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAnbGV0bycgOiAnbGV0b20nO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChudW1iZXIgPT09IDIpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgKz0gd2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICdsZXRpJyA6ICdsZXRvbWEnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChudW1iZXIgPCA1KSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9IHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAnbGV0YScgOiAnbGV0aSc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlc3VsdCArPSB3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ2xldCcgOiAnbGV0aSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cblxudmFyIHNsID0gbW9tZW50LmRlZmluZUxvY2FsZSgnc2wnLCB7XG4gICAgbW9udGhzIDogJ2phbnVhcl9mZWJydWFyX21hcmVjX2FwcmlsX21hal9qdW5pal9qdWxpal9hdmd1c3Rfc2VwdGVtYmVyX29rdG9iZXJfbm92ZW1iZXJfZGVjZW1iZXInLnNwbGl0KCdfJyksXG4gICAgbW9udGhzU2hvcnQgOiAnamFuLl9mZWIuX21hci5fYXByLl9tYWouX2p1bi5fanVsLl9hdmcuX3NlcC5fb2t0Ll9ub3YuX2RlYy4nLnNwbGl0KCdfJyksXG4gICAgbW9udGhzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICB3ZWVrZGF5cyA6ICduZWRlbGphX3BvbmVkZWxqZWtfdG9yZWtfc3JlZGFfxI1ldHJ0ZWtfcGV0ZWtfc29ib3RhJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzU2hvcnQgOiAnbmVkLl9wb24uX3Rvci5fc3JlLl/EjWV0Ll9wZXQuX3NvYi4nLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNNaW4gOiAnbmVfcG9fdG9fc3JfxI1lX3BlX3NvJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgIExUIDogJ0g6bW0nLFxuICAgICAgICBMVFMgOiAnSDptbTpzcycsXG4gICAgICAgIEwgOiAnREQuTU0uWVlZWScsXG4gICAgICAgIExMIDogJ0QuIE1NTU0gWVlZWScsXG4gICAgICAgIExMTCA6ICdELiBNTU1NIFlZWVkgSDptbScsXG4gICAgICAgIExMTEwgOiAnZGRkZCwgRC4gTU1NTSBZWVlZIEg6bW0nXG4gICAgfSxcbiAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgc2FtZURheSAgOiAnW2RhbmVzIG9iXSBMVCcsXG4gICAgICAgIG5leHREYXkgIDogJ1tqdXRyaSBvYl0gTFQnLFxuXG4gICAgICAgIG5leHRXZWVrIDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgc3dpdGNoICh0aGlzLmRheSgpKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t2XSBbbmVkZWxqb10gW29iXSBMVCc7XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t2XSBbc3JlZG9dIFtvYl0gTFQnO1xuICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbdl0gW3NvYm90b10gW29iXSBMVCc7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t2XSBkZGRkIFtvYl0gTFQnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBsYXN0RGF5ICA6ICdbdsSNZXJhaiBvYl0gTFQnLFxuICAgICAgICBsYXN0V2VlayA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHN3aXRjaCAodGhpcy5kYXkoKSkge1xuICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbcHJlasWhbmpvXSBbbmVkZWxqb10gW29iXSBMVCc7XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1twcmVqxaFuam9dIFtzcmVkb10gW29iXSBMVCc7XG4gICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1twcmVqxaFuam9dIFtzb2JvdG9dIFtvYl0gTFQnO1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbcHJlasWhbmppXSBkZGRkIFtvYl0gTFQnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgIH0sXG4gICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICBmdXR1cmUgOiAnxI1leiAlcycsXG4gICAgICAgIHBhc3QgICA6ICdwcmVkICVzJyxcbiAgICAgICAgcyAgICAgIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgbSAgICAgIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgbW0gICAgIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgaCAgICAgIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgaGggICAgIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgZCAgICAgIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgZGQgICAgIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgTSAgICAgIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgTU0gICAgIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgeSAgICAgIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgeXkgICAgIDogcHJvY2Vzc1JlbGF0aXZlVGltZVxuICAgIH0sXG4gICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9XFwuLyxcbiAgICBvcmRpbmFsIDogJyVkLicsXG4gICAgd2VlayA6IHtcbiAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgIGRveSA6IDcgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDFzdCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICB9XG59KTtcblxucmV0dXJuIHNsO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEFsYmFuaWFuIFtzcV1cbi8vISBhdXRob3IgOiBGbGFrw6tyaW0gSXNtYW5pIDogaHR0cHM6Ly9naXRodWIuY29tL2ZsYWtlcmltaVxuLy8hIGF1dGhvciA6IE1lbmVsaW9uIEVsZW5zw7psZSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9PaXJlXG4vLyEgYXV0aG9yIDogT2VyZCBDdWthbGxhIDogaHR0cHM6Ly9naXRodWIuY29tL29lcmRcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG52YXIgc3EgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdzcScsIHtcbiAgICBtb250aHMgOiAnSmFuYXJfU2hrdXJ0X01hcnNfUHJpbGxfTWFqX1FlcnNob3JfS29ycmlrX0d1c2h0X1NodGF0b3JfVGV0b3JfTsOrbnRvcl9EaGpldG9yJy5zcGxpdCgnXycpLFxuICAgIG1vbnRoc1Nob3J0IDogJ0phbl9TaGtfTWFyX1ByaV9NYWpfUWVyX0tvcl9HdXNfU2h0X1RldF9Ow6tuX0Roaicuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5cyA6ICdFIERpZWxfRSBIw6tuw6tfRSBNYXJ0w6tfRSBNw6tya3Vyw6tfRSBFbmp0ZV9FIFByZW10ZV9FIFNodHVuw6snLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNTaG9ydCA6ICdEaWVfSMOrbl9NYXJfTcOrcl9FbmpfUHJlX1NodCcuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c01pbiA6ICdEX0hfTWFfTcOrX0VfUF9TaCcuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgIG1lcmlkaWVtUGFyc2U6IC9QRHxNRC8sXG4gICAgaXNQTTogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgIHJldHVybiBpbnB1dC5jaGFyQXQoMCkgPT09ICdNJztcbiAgICB9LFxuICAgIG1lcmlkaWVtIDogZnVuY3Rpb24gKGhvdXJzLCBtaW51dGVzLCBpc0xvd2VyKSB7XG4gICAgICAgIHJldHVybiBob3VycyA8IDEyID8gJ1BEJyA6ICdNRCc7XG4gICAgfSxcbiAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIExMTEwgOiAnZGRkZCwgRCBNTU1NIFlZWVkgSEg6bW0nXG4gICAgfSxcbiAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgc2FtZURheSA6ICdbU290IG7Dq10gTFQnLFxuICAgICAgICBuZXh0RGF5IDogJ1tOZXPDq3IgbsOrXSBMVCcsXG4gICAgICAgIG5leHRXZWVrIDogJ2RkZGQgW27Dq10gTFQnLFxuICAgICAgICBsYXN0RGF5IDogJ1tEamUgbsOrXSBMVCcsXG4gICAgICAgIGxhc3RXZWVrIDogJ2RkZGQgW2Uga2FsdWFyIG7Dq10gTFQnLFxuICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgIH0sXG4gICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICBmdXR1cmUgOiAnbsOrICVzJyxcbiAgICAgICAgcGFzdCA6ICclcyBtw6sgcGFyw6snLFxuICAgICAgICBzIDogJ2Rpc2Egc2Vrb25kYScsXG4gICAgICAgIG0gOiAnbmrDqyBtaW51dMOrJyxcbiAgICAgICAgbW0gOiAnJWQgbWludXRhJyxcbiAgICAgICAgaCA6ICduasOrIG9yw6snLFxuICAgICAgICBoaCA6ICclZCBvcsOrJyxcbiAgICAgICAgZCA6ICduasOrIGRpdMOrJyxcbiAgICAgICAgZGQgOiAnJWQgZGl0w6snLFxuICAgICAgICBNIDogJ25qw6sgbXVhaicsXG4gICAgICAgIE1NIDogJyVkIG11YWonLFxuICAgICAgICB5IDogJ25qw6sgdml0JyxcbiAgICAgICAgeXkgOiAnJWQgdml0ZSdcbiAgICB9LFxuICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfVxcLi8sXG4gICAgb3JkaW5hbCA6ICclZC4nLFxuICAgIHdlZWsgOiB7XG4gICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgfVxufSk7XG5cbnJldHVybiBzcTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBTZXJiaWFuIFtzcl1cbi8vISBhdXRob3IgOiBNaWxhbiBKYW5hxI1rb3ZpxIc8bWlsYW5qYW5hY2tvdmljQGdtYWlsLmNvbT4gOiBodHRwczovL2dpdGh1Yi5jb20vbWlsYW4talxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciB0cmFuc2xhdG9yID0ge1xuICAgIHdvcmRzOiB7IC8vRGlmZmVyZW50IGdyYW1tYXRpY2FsIGNhc2VzXG4gICAgICAgIG06IFsnamVkYW4gbWludXQnLCAnamVkbmUgbWludXRlJ10sXG4gICAgICAgIG1tOiBbJ21pbnV0JywgJ21pbnV0ZScsICdtaW51dGEnXSxcbiAgICAgICAgaDogWydqZWRhbiBzYXQnLCAnamVkbm9nIHNhdGEnXSxcbiAgICAgICAgaGg6IFsnc2F0JywgJ3NhdGEnLCAnc2F0aSddLFxuICAgICAgICBkZDogWydkYW4nLCAnZGFuYScsICdkYW5hJ10sXG4gICAgICAgIE1NOiBbJ21lc2VjJywgJ21lc2VjYScsICdtZXNlY2knXSxcbiAgICAgICAgeXk6IFsnZ29kaW5hJywgJ2dvZGluZScsICdnb2RpbmEnXVxuICAgIH0sXG4gICAgY29ycmVjdEdyYW1tYXRpY2FsQ2FzZTogZnVuY3Rpb24gKG51bWJlciwgd29yZEtleSkge1xuICAgICAgICByZXR1cm4gbnVtYmVyID09PSAxID8gd29yZEtleVswXSA6IChudW1iZXIgPj0gMiAmJiBudW1iZXIgPD0gNCA/IHdvcmRLZXlbMV0gOiB3b3JkS2V5WzJdKTtcbiAgICB9LFxuICAgIHRyYW5zbGF0ZTogZnVuY3Rpb24gKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5KSB7XG4gICAgICAgIHZhciB3b3JkS2V5ID0gdHJhbnNsYXRvci53b3Jkc1trZXldO1xuICAgICAgICBpZiAoa2V5Lmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggPyB3b3JkS2V5WzBdIDogd29yZEtleVsxXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnICcgKyB0cmFuc2xhdG9yLmNvcnJlY3RHcmFtbWF0aWNhbENhc2UobnVtYmVyLCB3b3JkS2V5KTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbnZhciBzciA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3NyJywge1xuICAgIG1vbnRoczogJ2phbnVhcl9mZWJydWFyX21hcnRfYXByaWxfbWFqX2p1bl9qdWxfYXZndXN0X3NlcHRlbWJhcl9va3RvYmFyX25vdmVtYmFyX2RlY2VtYmFyJy5zcGxpdCgnXycpLFxuICAgIG1vbnRoc1Nob3J0OiAnamFuLl9mZWIuX21hci5fYXByLl9tYWpfanVuX2p1bF9hdmcuX3NlcC5fb2t0Ll9ub3YuX2RlYy4nLnNwbGl0KCdfJyksXG4gICAgbW9udGhzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICB3ZWVrZGF5czogJ25lZGVsamFfcG9uZWRlbGpha191dG9yYWtfc3JlZGFfxI1ldHZydGFrX3BldGFrX3N1Ym90YScuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1Nob3J0OiAnbmVkLl9wb24uX3V0by5fc3JlLl/EjWV0Ll9wZXQuX3N1Yi4nLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNNaW46ICduZV9wb191dF9zcl/EjWVfcGVfc3UnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICBMVDogJ0g6bW0nLFxuICAgICAgICBMVFMgOiAnSDptbTpzcycsXG4gICAgICAgIEw6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgTEw6ICdELiBNTU1NIFlZWVknLFxuICAgICAgICBMTEw6ICdELiBNTU1NIFlZWVkgSDptbScsXG4gICAgICAgIExMTEw6ICdkZGRkLCBELiBNTU1NIFlZWVkgSDptbSdcbiAgICB9LFxuICAgIGNhbGVuZGFyOiB7XG4gICAgICAgIHNhbWVEYXk6ICdbZGFuYXMgdV0gTFQnLFxuICAgICAgICBuZXh0RGF5OiAnW3N1dHJhIHVdIExUJyxcbiAgICAgICAgbmV4dFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHN3aXRjaCAodGhpcy5kYXkoKSkge1xuICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbdV0gW25lZGVsanVdIFt1XSBMVCc7XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t1XSBbc3JlZHVdIFt1XSBMVCc7XG4gICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t1XSBbc3Vib3R1XSBbdV0gTFQnO1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbdV0gZGRkZCBbdV0gTFQnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBsYXN0RGF5ICA6ICdbanXEjWUgdV0gTFQnLFxuICAgICAgICBsYXN0V2VlayA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBsYXN0V2Vla0RheXMgPSBbXG4gICAgICAgICAgICAgICAgJ1twcm/FoWxlXSBbbmVkZWxqZV0gW3VdIExUJyxcbiAgICAgICAgICAgICAgICAnW3Byb8WhbG9nXSBbcG9uZWRlbGprYV0gW3VdIExUJyxcbiAgICAgICAgICAgICAgICAnW3Byb8WhbG9nXSBbdXRvcmthXSBbdV0gTFQnLFxuICAgICAgICAgICAgICAgICdbcHJvxaFsZV0gW3NyZWRlXSBbdV0gTFQnLFxuICAgICAgICAgICAgICAgICdbcHJvxaFsb2ddIFvEjWV0dnJ0a2FdIFt1XSBMVCcsXG4gICAgICAgICAgICAgICAgJ1twcm/FoWxvZ10gW3BldGthXSBbdV0gTFQnLFxuICAgICAgICAgICAgICAgICdbcHJvxaFsZV0gW3N1Ym90ZV0gW3VdIExUJ1xuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIHJldHVybiBsYXN0V2Vla0RheXNbdGhpcy5kYXkoKV07XG4gICAgICAgIH0sXG4gICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgfSxcbiAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgIGZ1dHVyZSA6ICd6YSAlcycsXG4gICAgICAgIHBhc3QgICA6ICdwcmUgJXMnLFxuICAgICAgICBzICAgICAgOiAnbmVrb2xpa28gc2VrdW5kaScsXG4gICAgICAgIG0gICAgICA6IHRyYW5zbGF0b3IudHJhbnNsYXRlLFxuICAgICAgICBtbSAgICAgOiB0cmFuc2xhdG9yLnRyYW5zbGF0ZSxcbiAgICAgICAgaCAgICAgIDogdHJhbnNsYXRvci50cmFuc2xhdGUsXG4gICAgICAgIGhoICAgICA6IHRyYW5zbGF0b3IudHJhbnNsYXRlLFxuICAgICAgICBkICAgICAgOiAnZGFuJyxcbiAgICAgICAgZGQgICAgIDogdHJhbnNsYXRvci50cmFuc2xhdGUsXG4gICAgICAgIE0gICAgICA6ICdtZXNlYycsXG4gICAgICAgIE1NICAgICA6IHRyYW5zbGF0b3IudHJhbnNsYXRlLFxuICAgICAgICB5ICAgICAgOiAnZ29kaW51JyxcbiAgICAgICAgeXkgICAgIDogdHJhbnNsYXRvci50cmFuc2xhdGVcbiAgICB9LFxuICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfVxcLi8sXG4gICAgb3JkaW5hbCA6ICclZC4nLFxuICAgIHdlZWsgOiB7XG4gICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICBkb3kgOiA3ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiAxc3QgaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgfVxufSk7XG5cbnJldHVybiBzcjtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBTZXJiaWFuIEN5cmlsbGljIFtzci1jeXJsXVxuLy8hIGF1dGhvciA6IE1pbGFuIEphbmHEjWtvdmnEhzxtaWxhbmphbmFja292aWNAZ21haWwuY29tPiA6IGh0dHBzOi8vZ2l0aHViLmNvbS9taWxhbi1qXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxudmFyIHRyYW5zbGF0b3IgPSB7XG4gICAgd29yZHM6IHsgLy9EaWZmZXJlbnQgZ3JhbW1hdGljYWwgY2FzZXNcbiAgICAgICAgbTogWyfRmNC10LTQsNC9INC80LjQvdGD0YInLCAn0ZjQtdC00L3QtSDQvNC40L3Rg9GC0LUnXSxcbiAgICAgICAgbW06IFsn0LzQuNC90YPRgicsICfQvNC40L3Rg9GC0LUnLCAn0LzQuNC90YPRgtCwJ10sXG4gICAgICAgIGg6IFsn0ZjQtdC00LDQvSDRgdCw0YInLCAn0ZjQtdC00L3QvtCzINGB0LDRgtCwJ10sXG4gICAgICAgIGhoOiBbJ9GB0LDRgicsICfRgdCw0YLQsCcsICfRgdCw0YLQuCddLFxuICAgICAgICBkZDogWyfQtNCw0L0nLCAn0LTQsNC90LAnLCAn0LTQsNC90LAnXSxcbiAgICAgICAgTU06IFsn0LzQtdGB0LXRhicsICfQvNC10YHQtdGG0LAnLCAn0LzQtdGB0LXRhtC4J10sXG4gICAgICAgIHl5OiBbJ9Cz0L7QtNC40L3QsCcsICfQs9C+0LTQuNC90LUnLCAn0LPQvtC00LjQvdCwJ11cbiAgICB9LFxuICAgIGNvcnJlY3RHcmFtbWF0aWNhbENhc2U6IGZ1bmN0aW9uIChudW1iZXIsIHdvcmRLZXkpIHtcbiAgICAgICAgcmV0dXJuIG51bWJlciA9PT0gMSA/IHdvcmRLZXlbMF0gOiAobnVtYmVyID49IDIgJiYgbnVtYmVyIDw9IDQgPyB3b3JkS2V5WzFdIDogd29yZEtleVsyXSk7XG4gICAgfSxcbiAgICB0cmFuc2xhdGU6IGZ1bmN0aW9uIChudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGtleSkge1xuICAgICAgICB2YXIgd29yZEtleSA9IHRyYW5zbGF0b3Iud29yZHNba2V5XTtcbiAgICAgICAgaWYgKGtleS5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4ID8gd29yZEtleVswXSA6IHdvcmRLZXlbMV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJyAnICsgdHJhbnNsYXRvci5jb3JyZWN0R3JhbW1hdGljYWxDYXNlKG51bWJlciwgd29yZEtleSk7XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG52YXIgc3JDeXJsID0gbW9tZW50LmRlZmluZUxvY2FsZSgnc3ItY3lybCcsIHtcbiAgICBtb250aHM6ICfRmNCw0L3Rg9Cw0YBf0YTQtdCx0YDRg9Cw0YBf0LzQsNGA0YJf0LDQv9GA0LjQu1/QvNCw0Zhf0ZjRg9C9X9GY0YPQu1/QsNCy0LPRg9GB0YJf0YHQtdC/0YLQtdC80LHQsNGAX9C+0LrRgtC+0LHQsNGAX9C90L7QstC10LzQsdCw0YBf0LTQtdGG0LXQvNCx0LDRgCcuc3BsaXQoJ18nKSxcbiAgICBtb250aHNTaG9ydDogJ9GY0LDQvS5f0YTQtdCxLl/QvNCw0YAuX9Cw0L/RgC5f0LzQsNGYX9GY0YPQvV/RmNGD0Ltf0LDQstCzLl/RgdC10L8uX9C+0LrRgi5f0L3QvtCyLl/QtNC10YYuJy5zcGxpdCgnXycpLFxuICAgIG1vbnRoc1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgd2Vla2RheXM6ICfQvdC10LTQtdGZ0LBf0L/QvtC90LXQtNC10ZnQsNC6X9GD0YLQvtGA0LDQul/RgdGA0LXQtNCwX9GH0LXRgtCy0YDRgtCw0Lpf0L/QtdGC0LDQul/RgdGD0LHQvtGC0LAnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNTaG9ydDogJ9C90LXQtC5f0L/QvtC9Ll/Rg9GC0L4uX9GB0YDQtS5f0YfQtdGCLl/Qv9C10YIuX9GB0YPQsS4nLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNNaW46ICfQvdC1X9C/0L5f0YPRgl/RgdGAX9GH0LVf0L/QtV/RgdGDJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgTFQ6ICdIOm1tJyxcbiAgICAgICAgTFRTIDogJ0g6bW06c3MnLFxuICAgICAgICBMOiAnREQuTU0uWVlZWScsXG4gICAgICAgIExMOiAnRC4gTU1NTSBZWVlZJyxcbiAgICAgICAgTExMOiAnRC4gTU1NTSBZWVlZIEg6bW0nLFxuICAgICAgICBMTExMOiAnZGRkZCwgRC4gTU1NTSBZWVlZIEg6bW0nXG4gICAgfSxcbiAgICBjYWxlbmRhcjoge1xuICAgICAgICBzYW1lRGF5OiAnW9C00LDQvdCw0YEg0YNdIExUJyxcbiAgICAgICAgbmV4dERheTogJ1vRgdGD0YLRgNCwINGDXSBMVCcsXG4gICAgICAgIG5leHRXZWVrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHRoaXMuZGF5KCkpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnW9GDXSBb0L3QtdC00LXRmdGDXSBb0YNdIExUJztcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnW9GDXSBb0YHRgNC10LTRg10gW9GDXSBMVCc7XG4gICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1vRg10gW9GB0YPQsdC+0YLRg10gW9GDXSBMVCc7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1vRg10gZGRkZCBb0YNdIExUJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbGFzdERheSAgOiAnW9GY0YPRh9C1INGDXSBMVCcsXG4gICAgICAgIGxhc3RXZWVrIDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGxhc3RXZWVrRGF5cyA9IFtcbiAgICAgICAgICAgICAgICAnW9C/0YDQvtGI0LvQtV0gW9C90LXQtNC10ZnQtV0gW9GDXSBMVCcsXG4gICAgICAgICAgICAgICAgJ1vQv9GA0L7RiNC70L7Qs10gW9C/0L7QvdC10LTQtdGZ0LrQsF0gW9GDXSBMVCcsXG4gICAgICAgICAgICAgICAgJ1vQv9GA0L7RiNC70L7Qs10gW9GD0YLQvtGA0LrQsF0gW9GDXSBMVCcsXG4gICAgICAgICAgICAgICAgJ1vQv9GA0L7RiNC70LVdIFvRgdGA0LXQtNC1XSBb0YNdIExUJyxcbiAgICAgICAgICAgICAgICAnW9C/0YDQvtGI0LvQvtCzXSBb0YfQtdGC0LLRgNGC0LrQsF0gW9GDXSBMVCcsXG4gICAgICAgICAgICAgICAgJ1vQv9GA0L7RiNC70L7Qs10gW9C/0LXRgtC60LBdIFvRg10gTFQnLFxuICAgICAgICAgICAgICAgICdb0L/RgNC+0YjQu9C1XSBb0YHRg9Cx0L7RgtC1XSBb0YNdIExUJ1xuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIHJldHVybiBsYXN0V2Vla0RheXNbdGhpcy5kYXkoKV07XG4gICAgICAgIH0sXG4gICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgfSxcbiAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgIGZ1dHVyZSA6ICfQt9CwICVzJyxcbiAgICAgICAgcGFzdCAgIDogJ9C/0YDQtSAlcycsXG4gICAgICAgIHMgICAgICA6ICfQvdC10LrQvtC70LjQutC+INGB0LXQutGD0L3QtNC4JyxcbiAgICAgICAgbSAgICAgIDogdHJhbnNsYXRvci50cmFuc2xhdGUsXG4gICAgICAgIG1tICAgICA6IHRyYW5zbGF0b3IudHJhbnNsYXRlLFxuICAgICAgICBoICAgICAgOiB0cmFuc2xhdG9yLnRyYW5zbGF0ZSxcbiAgICAgICAgaGggICAgIDogdHJhbnNsYXRvci50cmFuc2xhdGUsXG4gICAgICAgIGQgICAgICA6ICfQtNCw0L0nLFxuICAgICAgICBkZCAgICAgOiB0cmFuc2xhdG9yLnRyYW5zbGF0ZSxcbiAgICAgICAgTSAgICAgIDogJ9C80LXRgdC10YYnLFxuICAgICAgICBNTSAgICAgOiB0cmFuc2xhdG9yLnRyYW5zbGF0ZSxcbiAgICAgICAgeSAgICAgIDogJ9Cz0L7QtNC40L3RgycsXG4gICAgICAgIHl5ICAgICA6IHRyYW5zbGF0b3IudHJhbnNsYXRlXG4gICAgfSxcbiAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn1cXC4vLFxuICAgIG9yZGluYWwgOiAnJWQuJyxcbiAgICB3ZWVrIDoge1xuICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgZG95IDogNyAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gMXN0IGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgIH1cbn0pO1xuXG5yZXR1cm4gc3JDeXJsO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IHNpU3dhdGkgW3NzXVxuLy8hIGF1dGhvciA6IE5pY29sYWkgRGF2aWVzPG1haWxAbmljb2xhaS5pbz4gOiBodHRwczovL2dpdGh1Yi5jb20vbmljb2xhaWRhdmllc1xuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cblxudmFyIHNzID0gbW9tZW50LmRlZmluZUxvY2FsZSgnc3MnLCB7XG4gICAgbW9udGhzIDogXCJCaGltYmlkdndhbmVfSW5kbG92YW5hX0luZGxvdidsZW5raHVsdV9NYWJhc2FfSW5raHdla2h3ZXRpX0luaGxhYmFfS2hvbHdhbmVfSW5nY2lfSW55b25pX0ltcGhhbGFfTHdldGlfSW5nb25nb25pXCIuc3BsaXQoJ18nKSxcbiAgICBtb250aHNTaG9ydCA6ICdCaGlfSW5hX0ludV9NYWJfSW5rX0luaF9LaG9fSWdjX0lueV9JbXBfTHdlX0lnbycuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5cyA6ICdMaXNvbnRmb19VbXNvbWJ1bHVrb19MZXNpYmlsaV9MZXNpdHNhdGZ1X0xlc2luZV9MZXNpaGxhbnVfVW1nY2liZWxvJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzU2hvcnQgOiAnTGlzX1VtYl9Mc2JfTGVzX0xzaV9Mc2hfVW1nJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzTWluIDogJ0xpX1VzX0xiX0x0X0xzX0xoX1VnJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgIExUIDogJ2g6bW0gQScsXG4gICAgICAgIExUUyA6ICdoOm1tOnNzIEEnLFxuICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBoOm1tIEEnLFxuICAgICAgICBMTExMIDogJ2RkZGQsIEQgTU1NTSBZWVlZIGg6bW0gQSdcbiAgICB9LFxuICAgIGNhbGVuZGFyIDoge1xuICAgICAgICBzYW1lRGF5IDogJ1tOYW11aGxhIG5nYV0gTFQnLFxuICAgICAgICBuZXh0RGF5IDogJ1tLdXNhc2EgbmdhXSBMVCcsXG4gICAgICAgIG5leHRXZWVrIDogJ2RkZGQgW25nYV0gTFQnLFxuICAgICAgICBsYXN0RGF5IDogJ1tJdG9sbyBuZ2FdIExUJyxcbiAgICAgICAgbGFzdFdlZWsgOiAnZGRkZCBbbGVsaXBoZWxpbGVdIFtuZ2FdIExUJyxcbiAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICB9LFxuICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgZnV0dXJlIDogJ25nYSAlcycsXG4gICAgICAgIHBhc3QgOiAnd2VudGVrYSBuZ2EgJXMnLFxuICAgICAgICBzIDogJ2VtaXp1endhbmEgbG9tY2FuZScsXG4gICAgICAgIG0gOiAndW16dXp1JyxcbiAgICAgICAgbW0gOiAnJWQgZW1penV6dScsXG4gICAgICAgIGggOiAnbGlob3JhJyxcbiAgICAgICAgaGggOiAnJWQgZW1haG9yYScsXG4gICAgICAgIGQgOiAnbGlsYW5nYScsXG4gICAgICAgIGRkIDogJyVkIGVtYWxhbmdhJyxcbiAgICAgICAgTSA6ICdpbnlhbmdhJyxcbiAgICAgICAgTU0gOiAnJWQgdGlueWFuZ2EnLFxuICAgICAgICB5IDogJ3Vtbnlha2EnLFxuICAgICAgICB5eSA6ICclZCBpbWlueWFrYSdcbiAgICB9LFxuICAgIG1lcmlkaWVtUGFyc2U6IC9la3VzZW5pfGVtaW5pfGVudHNhbWJhbWF8ZWJ1c3VrdS8sXG4gICAgbWVyaWRpZW0gOiBmdW5jdGlvbiAoaG91cnMsIG1pbnV0ZXMsIGlzTG93ZXIpIHtcbiAgICAgICAgaWYgKGhvdXJzIDwgMTEpIHtcbiAgICAgICAgICAgIHJldHVybiAnZWt1c2VuaSc7XG4gICAgICAgIH0gZWxzZSBpZiAoaG91cnMgPCAxNSkge1xuICAgICAgICAgICAgcmV0dXJuICdlbWluaSc7XG4gICAgICAgIH0gZWxzZSBpZiAoaG91cnMgPCAxOSkge1xuICAgICAgICAgICAgcmV0dXJuICdlbnRzYW1iYW1hJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAnZWJ1c3VrdSc7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIG1lcmlkaWVtSG91ciA6IGZ1bmN0aW9uIChob3VyLCBtZXJpZGllbSkge1xuICAgICAgICBpZiAoaG91ciA9PT0gMTIpIHtcbiAgICAgICAgICAgIGhvdXIgPSAwO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXJpZGllbSA9PT0gJ2VrdXNlbmknKSB7XG4gICAgICAgICAgICByZXR1cm4gaG91cjtcbiAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ2VtaW5pJykge1xuICAgICAgICAgICAgcmV0dXJuIGhvdXIgPj0gMTEgPyBob3VyIDogaG91ciArIDEyO1xuICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAnZW50c2FtYmFtYScgfHwgbWVyaWRpZW0gPT09ICdlYnVzdWt1Jykge1xuICAgICAgICAgICAgaWYgKGhvdXIgPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBob3VyICsgMTI7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfS8sXG4gICAgb3JkaW5hbCA6ICclZCcsXG4gICAgd2VlayA6IHtcbiAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICB9XG59KTtcblxucmV0dXJuIHNzO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IFN3ZWRpc2ggW3N2XVxuLy8hIGF1dGhvciA6IEplbnMgQWxtIDogaHR0cHM6Ly9naXRodWIuY29tL3VsbXVzXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxudmFyIHN2ID0gbW9tZW50LmRlZmluZUxvY2FsZSgnc3YnLCB7XG4gICAgbW9udGhzIDogJ2phbnVhcmlfZmVicnVhcmlfbWFyc19hcHJpbF9tYWpfanVuaV9qdWxpX2F1Z3VzdGlfc2VwdGVtYmVyX29rdG9iZXJfbm92ZW1iZXJfZGVjZW1iZXInLnNwbGl0KCdfJyksXG4gICAgbW9udGhzU2hvcnQgOiAnamFuX2ZlYl9tYXJfYXByX21hal9qdW5fanVsX2F1Z19zZXBfb2t0X25vdl9kZWMnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXMgOiAnc8O2bmRhZ19tw6VuZGFnX3Rpc2RhZ19vbnNkYWdfdG9yc2RhZ19mcmVkYWdfbMO2cmRhZycuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1Nob3J0IDogJ3PDtm5fbcOlbl90aXNfb25zX3Rvcl9mcmVfbMO2cicuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c01pbiA6ICdzw7ZfbcOlX3RpX29uX3RvX2ZyX2zDticuc3BsaXQoJ18nKSxcbiAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICBMIDogJ1lZWVktTU0tREQnLFxuICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBba2wuXSBISDptbScsXG4gICAgICAgIExMTEwgOiAnZGRkZCBEIE1NTU0gWVlZWSBba2wuXSBISDptbScsXG4gICAgICAgIGxsbCA6ICdEIE1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgbGxsbCA6ICdkZGQgRCBNTU0gWVlZWSBISDptbSdcbiAgICB9LFxuICAgIGNhbGVuZGFyIDoge1xuICAgICAgICBzYW1lRGF5OiAnW0lkYWddIExUJyxcbiAgICAgICAgbmV4dERheTogJ1tJbW9yZ29uXSBMVCcsXG4gICAgICAgIGxhc3REYXk6ICdbSWfDpXJdIExUJyxcbiAgICAgICAgbmV4dFdlZWs6ICdbUMOlXSBkZGRkIExUJyxcbiAgICAgICAgbGFzdFdlZWs6ICdbSV0gZGRkZFtzXSBMVCcsXG4gICAgICAgIHNhbWVFbHNlOiAnTCdcbiAgICB9LFxuICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgZnV0dXJlIDogJ29tICVzJyxcbiAgICAgICAgcGFzdCA6ICdmw7ZyICVzIHNlZGFuJyxcbiAgICAgICAgcyA6ICduw6VncmEgc2VrdW5kZXInLFxuICAgICAgICBtIDogJ2VuIG1pbnV0JyxcbiAgICAgICAgbW0gOiAnJWQgbWludXRlcicsXG4gICAgICAgIGggOiAnZW4gdGltbWUnLFxuICAgICAgICBoaCA6ICclZCB0aW1tYXInLFxuICAgICAgICBkIDogJ2VuIGRhZycsXG4gICAgICAgIGRkIDogJyVkIGRhZ2FyJyxcbiAgICAgICAgTSA6ICdlbiBtw6VuYWQnLFxuICAgICAgICBNTSA6ICclZCBtw6VuYWRlcicsXG4gICAgICAgIHkgOiAnZXR0IMOlcicsXG4gICAgICAgIHl5IDogJyVkIMOlcidcbiAgICB9LFxuICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfShlfGEpLyxcbiAgICBvcmRpbmFsIDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICB2YXIgYiA9IG51bWJlciAlIDEwLFxuICAgICAgICAgICAgb3V0cHV0ID0gKH5+KG51bWJlciAlIDEwMCAvIDEwKSA9PT0gMSkgPyAnZScgOlxuICAgICAgICAgICAgKGIgPT09IDEpID8gJ2EnIDpcbiAgICAgICAgICAgIChiID09PSAyKSA/ICdhJyA6XG4gICAgICAgICAgICAoYiA9PT0gMykgPyAnZScgOiAnZSc7XG4gICAgICAgIHJldHVybiBudW1iZXIgKyBvdXRwdXQ7XG4gICAgfSxcbiAgICB3ZWVrIDoge1xuICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgZG95IDogNCAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgIH1cbn0pO1xuXG5yZXR1cm4gc3Y7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogU3dhaGlsaSBbc3ddXG4vLyEgYXV0aG9yIDogRmFoYWQgS2Fzc2ltIDogaHR0cHM6Ly9naXRodWIuY29tL2ZhZHNlbFxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciBzdyA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3N3Jywge1xuICAgIG1vbnRocyA6ICdKYW51YXJpX0ZlYnJ1YXJpX01hY2hpX0FwcmlsaV9NZWlfSnVuaV9KdWxhaV9BZ29zdGlfU2VwdGVtYmFfT2t0b2JhX05vdmVtYmFfRGVzZW1iYScuc3BsaXQoJ18nKSxcbiAgICBtb250aHNTaG9ydCA6ICdKYW5fRmViX01hY19BcHJfTWVpX0p1bl9KdWxfQWdvX1NlcF9Pa3RfTm92X0Rlcycuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5cyA6ICdKdW1hcGlsaV9KdW1hdGF0dV9KdW1hbm5lX0p1bWF0YW5vX0FsaGFtaXNpX0lqdW1hYV9KdW1hbW9zaScuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1Nob3J0IDogJ0pwbF9KdGF0X0pubmVfSnRhbl9BbGhfSWptX0ptb3MnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNNaW4gOiAnSjJfSjNfSjRfSjVfQWxfSWpfSjEnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICBMIDogJ0RELk1NLllZWVknLFxuICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIExMTEwgOiAnZGRkZCwgRCBNTU1NIFlZWVkgSEg6bW0nXG4gICAgfSxcbiAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgc2FtZURheSA6ICdbbGVvIHNhYV0gTFQnLFxuICAgICAgICBuZXh0RGF5IDogJ1trZXNobyBzYWFdIExUJyxcbiAgICAgICAgbmV4dFdlZWsgOiAnW3dpa2kgaWpheW9dIGRkZGQgW3NhYXRdIExUJyxcbiAgICAgICAgbGFzdERheSA6ICdbamFuYV0gTFQnLFxuICAgICAgICBsYXN0V2VlayA6ICdbd2lraSBpbGl5b3BpdGFdIGRkZGQgW3NhYXRdIExUJyxcbiAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICB9LFxuICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgZnV0dXJlIDogJyVzIGJhYWRheWUnLFxuICAgICAgICBwYXN0IDogJ3Rva2VhICVzJyxcbiAgICAgICAgcyA6ICdoaXZpIHB1bmRlJyxcbiAgICAgICAgbSA6ICdkYWtpa2EgbW9qYScsXG4gICAgICAgIG1tIDogJ2Rha2lrYSAlZCcsXG4gICAgICAgIGggOiAnc2FhIGxpbW9qYScsXG4gICAgICAgIGhoIDogJ21hc2FhICVkJyxcbiAgICAgICAgZCA6ICdzaWt1IG1vamEnLFxuICAgICAgICBkZCA6ICdtYXNpa3UgJWQnLFxuICAgICAgICBNIDogJ213ZXppIG1tb2phJyxcbiAgICAgICAgTU0gOiAnbWllemkgJWQnLFxuICAgICAgICB5IDogJ213YWthIG1tb2phJyxcbiAgICAgICAgeXkgOiAnbWlha2EgJWQnXG4gICAgfSxcbiAgICB3ZWVrIDoge1xuICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgZG95IDogNyAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gMXN0IGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgIH1cbn0pO1xuXG5yZXR1cm4gc3c7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogVGFtaWwgW3RhXVxuLy8hIGF1dGhvciA6IEFyanVua3VtYXIgS3Jpc2huYW1vb3J0aHkgOiBodHRwczovL2dpdGh1Yi5jb20vdGsxMjA0MDRcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG52YXIgc3ltYm9sTWFwID0ge1xuICAgICcxJzogJ+CvpycsXG4gICAgJzInOiAn4K+oJyxcbiAgICAnMyc6ICfgr6knLFxuICAgICc0JzogJ+CvqicsXG4gICAgJzUnOiAn4K+rJyxcbiAgICAnNic6ICfgr6wnLFxuICAgICc3JzogJ+CvrScsXG4gICAgJzgnOiAn4K+uJyxcbiAgICAnOSc6ICfgr68nLFxuICAgICcwJzogJ+Cvpidcbn07XG52YXIgbnVtYmVyTWFwID0ge1xuICAgICfgr6cnOiAnMScsXG4gICAgJ+CvqCc6ICcyJyxcbiAgICAn4K+pJzogJzMnLFxuICAgICfgr6onOiAnNCcsXG4gICAgJ+Cvqyc6ICc1JyxcbiAgICAn4K+sJzogJzYnLFxuICAgICfgr60nOiAnNycsXG4gICAgJ+Cvric6ICc4JyxcbiAgICAn4K+vJzogJzknLFxuICAgICfgr6YnOiAnMCdcbn07XG5cbnZhciB0YSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3RhJywge1xuICAgIG1vbnRocyA6ICfgrpzgrqngrrXgrrDgrr9f4K6q4K6/4K6q4K+N4K6w4K614K6w4K6/X+CuruCuvuCusOCvjeCumuCvjV/gro/grqrgr43grrDgrrLgr41f4K6u4K+HX+CunOCvguCuqeCvjV/grpzgr4LgrrLgr4hf4K6G4K6V4K644K+N4K6f4K+NX+CumuCvhuCuquCvjeCun+CvhuCuruCvjeCuquCusOCvjV/groXgrpXgr43grp/gr4fgrr7grqrgrrDgr41f4K6o4K614K6u4K+N4K6q4K6w4K+NX+Cun+Cuv+CumuCuruCvjeCuquCusOCvjScuc3BsaXQoJ18nKSxcbiAgICBtb250aHNTaG9ydCA6ICfgrpzgrqngrrXgrrDgrr9f4K6q4K6/4K6q4K+N4K6w4K614K6w4K6/X+CuruCuvuCusOCvjeCumuCvjV/gro/grqrgr43grrDgrrLgr41f4K6u4K+HX+CunOCvguCuqeCvjV/grpzgr4LgrrLgr4hf4K6G4K6V4K644K+N4K6f4K+NX+CumuCvhuCuquCvjeCun+CvhuCuruCvjeCuquCusOCvjV/groXgrpXgr43grp/gr4fgrr7grqrgrrDgr41f4K6o4K614K6u4K+N4K6q4K6w4K+NX+Cun+Cuv+CumuCuruCvjeCuquCusOCvjScuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5cyA6ICfgrp7grr7grq/grr/grrHgr43grrHgr4HgrpXgr43grpXgrr/grrTgrq7gr4hf4K6k4K6/4K6Z4K+N4K6V4K6f4K+N4K6V4K6/4K604K6u4K+IX+CumuCvhuCuteCvjeCuteCuvuCur+CvjeCuleCuv+CutOCuruCviF/grqrgr4HgrqTgrqngr43grpXgrr/grrTgrq7gr4hf4K614K6/4K6v4K6+4K604K6V4K+N4K6V4K6/4K604K6u4K+IX+CuteCvhuCus+CvjeCus+Cuv+CuleCvjeCuleCuv+CutOCuruCviF/grprgrqngrr/grpXgr43grpXgrr/grrTgrq7gr4gnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNTaG9ydCA6ICfgrp7grr7grq/grr/grrHgr4Ff4K6k4K6/4K6Z4K+N4K6V4K6z4K+NX+CumuCvhuCuteCvjeCuteCuvuCur+CvjV/grqrgr4HgrqTgrqngr41f4K614K6/4K6v4K6+4K604K6p4K+NX+CuteCvhuCus+CvjeCus+Cuv1/grprgrqngrr8nLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNNaW4gOiAn4K6e4K6+X+CupOCuv1/grprgr4Zf4K6q4K+BX+CuteCuv1/grrXgr4Zf4K6aJy5zcGxpdCgnXycpLFxuICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZLCBISDptbScsXG4gICAgICAgIExMTEwgOiAnZGRkZCwgRCBNTU1NIFlZWVksIEhIOm1tJ1xuICAgIH0sXG4gICAgY2FsZW5kYXIgOiB7XG4gICAgICAgIHNhbWVEYXkgOiAnW+Cuh+CuqeCvjeCuseCvgV0gTFQnLFxuICAgICAgICBuZXh0RGF5IDogJ1vgrqjgrr7grrPgr4hdIExUJyxcbiAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCwgTFQnLFxuICAgICAgICBsYXN0RGF5IDogJ1vgrqjgr4fgrrHgr43grrHgr4FdIExUJyxcbiAgICAgICAgbGFzdFdlZWsgOiAnW+CuleCun+CuqOCvjeCupCDgrrXgrr7grrDgrq7gr41dIGRkZGQsIExUJyxcbiAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICB9LFxuICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgZnV0dXJlIDogJyVzIOCuh+CusuCvjScsXG4gICAgICAgIHBhc3QgOiAnJXMg4K6u4K+B4K6p4K+NJyxcbiAgICAgICAgcyA6ICfgrpLgrrDgr4Eg4K6a4K6/4K6yIOCuteCuv+CuqOCuvuCun+Cuv+CuleCus+CvjScsXG4gICAgICAgIG0gOiAn4K6S4K6w4K+BIOCuqOCuv+CuruCuv+Cun+CuruCvjScsXG4gICAgICAgIG1tIDogJyVkIOCuqOCuv+CuruCuv+Cun+CumeCvjeCuleCus+CvjScsXG4gICAgICAgIGggOiAn4K6S4K6w4K+BIOCuruCuo+CuvyDgrqjgr4fgrrDgrq7gr40nLFxuICAgICAgICBoaCA6ICclZCDgrq7grqPgrr8g4K6o4K+H4K6w4K6u4K+NJyxcbiAgICAgICAgZCA6ICfgrpLgrrDgr4Eg4K6o4K6+4K6z4K+NJyxcbiAgICAgICAgZGQgOiAnJWQg4K6o4K6+4K6f4K+N4K6V4K6z4K+NJyxcbiAgICAgICAgTSA6ICfgrpLgrrDgr4Eg4K6u4K6+4K6k4K6u4K+NJyxcbiAgICAgICAgTU0gOiAnJWQg4K6u4K6+4K6k4K6Z4K+N4K6V4K6z4K+NJyxcbiAgICAgICAgeSA6ICfgrpLgrrDgr4Eg4K614K6w4K+B4K6f4K6u4K+NJyxcbiAgICAgICAgeXkgOiAnJWQg4K6G4K6j4K+N4K6f4K+B4K6V4K6z4K+NJ1xuICAgIH0sXG4gICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ94K614K6k4K+BLyxcbiAgICBvcmRpbmFsIDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICByZXR1cm4gbnVtYmVyICsgJ+CuteCupOCvgSc7XG4gICAgfSxcbiAgICBwcmVwYXJzZTogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1vgr6fgr6jgr6ngr6rgr6vgr6zgr63gr67gr6/gr6ZdL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlck1hcFttYXRjaF07XG4gICAgICAgIH0pO1xuICAgIH0sXG4gICAgcG9zdGZvcm1hdDogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1xcZC9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgIHJldHVybiBzeW1ib2xNYXBbbWF0Y2hdO1xuICAgICAgICB9KTtcbiAgICB9LFxuICAgIC8vIHJlZmVyIGh0dHA6Ly90YS53aWtpcGVkaWEub3JnL3MvMWVyMVxuICAgIG1lcmlkaWVtUGFyc2U6IC/grq/grr7grq7grq7gr4184K614K+I4K6V4K6x4K+IfOCuleCuvuCusuCviHzgrqjgrqPgr43grqrgrpXgrrLgr4184K6O4K6x4K+N4K6q4K6+4K6f4K+BfOCuruCuvuCusuCviC8sXG4gICAgbWVyaWRpZW0gOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgIGlmIChob3VyIDwgMikge1xuICAgICAgICAgICAgcmV0dXJuICcg4K6v4K6+4K6u4K6u4K+NJztcbiAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgNikge1xuICAgICAgICAgICAgcmV0dXJuICcg4K614K+I4K6V4K6x4K+IJzsgIC8vIOCuteCviOCuleCuseCviFxuICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxMCkge1xuICAgICAgICAgICAgcmV0dXJuICcg4K6V4K6+4K6y4K+IJzsgLy8g4K6V4K6+4K6y4K+IXG4gICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDE0KSB7XG4gICAgICAgICAgICByZXR1cm4gJyDgrqjgrqPgr43grqrgrpXgrrLgr40nOyAvLyDgrqjgrqPgr43grqrgrpXgrrLgr41cbiAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTgpIHtcbiAgICAgICAgICAgIHJldHVybiAnIOCujuCuseCvjeCuquCuvuCun+CvgSc7IC8vIOCujuCuseCvjeCuquCuvuCun+CvgVxuICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAyMikge1xuICAgICAgICAgICAgcmV0dXJuICcg4K6u4K6+4K6y4K+IJzsgLy8g4K6u4K6+4K6y4K+IXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gJyDgrq/grr7grq7grq7gr40nO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBtZXJpZGllbUhvdXIgOiBmdW5jdGlvbiAoaG91ciwgbWVyaWRpZW0pIHtcbiAgICAgICAgaWYgKGhvdXIgPT09IDEyKSB7XG4gICAgICAgICAgICBob3VyID0gMDtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVyaWRpZW0gPT09ICfgrq/grr7grq7grq7gr40nKSB7XG4gICAgICAgICAgICByZXR1cm4gaG91ciA8IDIgPyBob3VyIDogaG91ciArIDEyO1xuICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn4K614K+I4K6V4K6x4K+IJyB8fCBtZXJpZGllbSA9PT0gJ+CuleCuvuCusuCviCcpIHtcbiAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn4K6o4K6j4K+N4K6q4K6V4K6y4K+NJykge1xuICAgICAgICAgICAgcmV0dXJuIGhvdXIgPj0gMTAgPyBob3VyIDogaG91ciArIDEyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGhvdXIgKyAxMjtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgd2VlayA6IHtcbiAgICAgICAgZG93IDogMCwgLy8gU3VuZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgIGRveSA6IDYgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDFzdCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICB9XG59KTtcblxucmV0dXJuIHRhO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IFRlbHVndSBbdGVdXG4vLyEgYXV0aG9yIDogS3Jpc2huYSBDaGFpdGFueWEgVGhvdGEgOiBodHRwczovL2dpdGh1Yi5jb20va2N0aG90YVxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciB0ZSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3RlJywge1xuICAgIG1vbnRocyA6ICfgsJzgsKjgsLXgsLDgsL9f4LCr4LC/4LCs4LGN4LCw4LC14LCw4LC/X+CwruCwvuCwsOCxjeCwmuCwv1/gsI/gsKrgsY3gsLDgsL/gsLLgsY1f4LCu4LGHX+CwnOCxguCwqOCxjV/gsJzgsYLgsLLgsYbgsZZf4LCG4LCX4LC44LGN4LCf4LGBX+CwuOCxhuCwquCxjeCwn+CxhuCwguCwrOCwsOCxjV/gsIXgsJXgsY3gsJ/gsYvgsKzgsLDgsY1f4LCo4LC14LCC4LCs4LCw4LGNX+CwoeCwv+CwuOCxhuCwguCwrOCwsOCxjScuc3BsaXQoJ18nKSxcbiAgICBtb250aHNTaG9ydCA6ICfgsJzgsKguX+Cwq+Cwv+CwrOCxjeCwsC5f4LCu4LC+4LCw4LGN4LCa4LC/X+Cwj+CwquCxjeCwsOCwvy5f4LCu4LGHX+CwnOCxguCwqOCxjV/gsJzgsYLgsLLgsYbgsZZf4LCG4LCXLl/gsLjgsYbgsKrgsY0uX+CwheCwleCxjeCwn+Cxiy5f4LCo4LC1Ll/gsKHgsL/gsLjgsYYuJy5zcGxpdCgnXycpLFxuICAgIG1vbnRoc1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgIHdlZWtkYXlzIDogJ+CwhuCwpuCwv+CwteCwvuCwsOCwgl/gsLjgsYvgsK7gsLXgsL7gsLDgsIJf4LCu4LCC4LCX4LCz4LC14LC+4LCw4LCCX+CwrOCxgeCwp+CwteCwvuCwsOCwgl/gsJfgsYHgsLDgsYHgsLXgsL7gsLDgsIJf4LC24LGB4LCV4LGN4LCw4LC14LC+4LCw4LCCX+CwtuCwqOCwv+CwteCwvuCwsOCwgicuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1Nob3J0IDogJ+CwhuCwpuCwv1/gsLjgsYvgsK5f4LCu4LCC4LCX4LCzX+CwrOCxgeCwp1/gsJfgsYHgsLDgsYFf4LC24LGB4LCV4LGN4LCwX+CwtuCwqOCwvycuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c01pbiA6ICfgsIZf4LC44LGLX+CwruCwgl/gsKzgsYFf4LCX4LGBX+CwtuCxgV/gsLYnLnNwbGl0KCdfJyksXG4gICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgIExUIDogJ0EgaDptbScsXG4gICAgICAgIExUUyA6ICdBIGg6bW06c3MnLFxuICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSwgQSBoOm1tJyxcbiAgICAgICAgTExMTCA6ICdkZGRkLCBEIE1NTU0gWVlZWSwgQSBoOm1tJ1xuICAgIH0sXG4gICAgY2FsZW5kYXIgOiB7XG4gICAgICAgIHNhbWVEYXkgOiAnW+CwqOCxh+CwoeCxgV0gTFQnLFxuICAgICAgICBuZXh0RGF5IDogJ1vgsLDgsYfgsKrgsYFdIExUJyxcbiAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCwgTFQnLFxuICAgICAgICBsYXN0RGF5IDogJ1vgsKjgsL/gsKjgsY3gsKhdIExUJyxcbiAgICAgICAgbGFzdFdlZWsgOiAnW+Cwl+CwpF0gZGRkZCwgTFQnLFxuICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgIH0sXG4gICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICBmdXR1cmUgOiAnJXMg4LCy4LGLJyxcbiAgICAgICAgcGFzdCA6ICclcyDgsJXgsY3gsLDgsL/gsKTgsIInLFxuICAgICAgICBzIDogJ+CwleCxiuCwqOCxjeCwqOCwvyDgsJXgsY3gsLfgsKPgsL7gsLLgsYEnLFxuICAgICAgICBtIDogJ+CwkuCwlSDgsKjgsL/gsK7gsL/gsLfgsIInLFxuICAgICAgICBtbSA6ICclZCDgsKjgsL/gsK7gsL/gsLfgsL7gsLLgsYEnLFxuICAgICAgICBoIDogJ+CwkuCwlSDgsJfgsILgsJ8nLFxuICAgICAgICBoaCA6ICclZCDgsJfgsILgsJ/gsLLgsYEnLFxuICAgICAgICBkIDogJ+CwkuCwlSDgsLDgsYvgsJzgsYEnLFxuICAgICAgICBkZCA6ICclZCDgsLDgsYvgsJzgsYHgsLLgsYEnLFxuICAgICAgICBNIDogJ+CwkuCwlSDgsKjgsYbgsLInLFxuICAgICAgICBNTSA6ICclZCDgsKjgsYbgsLLgsLLgsYEnLFxuICAgICAgICB5IDogJ+CwkuCwlSDgsLjgsILgsLXgsKTgsY3gsLjgsLDgsIInLFxuICAgICAgICB5eSA6ICclZCDgsLjgsILgsLXgsKTgsY3gsLjgsLDgsL7gsLLgsYEnXG4gICAgfSxcbiAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlIDogL1xcZHsxLDJ94LC1LyxcbiAgICBvcmRpbmFsIDogJyVk4LC1JyxcbiAgICBtZXJpZGllbVBhcnNlOiAv4LCw4LC+4LCk4LGN4LCw4LC/fOCwieCwpuCwr+CwgnzgsK7gsKfgsY3gsK/gsL7gsLngsY3gsKjgsIJ84LC44LC+4LCv4LCC4LCk4LGN4LCw4LCCLyxcbiAgICBtZXJpZGllbUhvdXIgOiBmdW5jdGlvbiAoaG91ciwgbWVyaWRpZW0pIHtcbiAgICAgICAgaWYgKGhvdXIgPT09IDEyKSB7XG4gICAgICAgICAgICBob3VyID0gMDtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVyaWRpZW0gPT09ICfgsLDgsL7gsKTgsY3gsLDgsL8nKSB7XG4gICAgICAgICAgICByZXR1cm4gaG91ciA8IDQgPyBob3VyIDogaG91ciArIDEyO1xuICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn4LCJ4LCm4LCv4LCCJykge1xuICAgICAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfgsK7gsKfgsY3gsK/gsL7gsLngsY3gsKjgsIInKSB7XG4gICAgICAgICAgICByZXR1cm4gaG91ciA+PSAxMCA/IGhvdXIgOiBob3VyICsgMTI7XG4gICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfgsLjgsL7gsK/gsILgsKTgsY3gsLDgsIInKSB7XG4gICAgICAgICAgICByZXR1cm4gaG91ciArIDEyO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBtZXJpZGllbSA6IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgaWYgKGhvdXIgPCA0KSB7XG4gICAgICAgICAgICByZXR1cm4gJ+CwsOCwvuCwpOCxjeCwsOCwvyc7XG4gICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDEwKSB7XG4gICAgICAgICAgICByZXR1cm4gJ+CwieCwpuCwr+Cwgic7XG4gICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDE3KSB7XG4gICAgICAgICAgICByZXR1cm4gJ+CwruCwp+CxjeCwr+CwvuCwueCxjeCwqOCwgic7XG4gICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDIwKSB7XG4gICAgICAgICAgICByZXR1cm4gJ+CwuOCwvuCwr+CwguCwpOCxjeCwsOCwgic7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gJ+CwsOCwvuCwpOCxjeCwsOCwvyc7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIHdlZWsgOiB7XG4gICAgICAgIGRvdyA6IDAsIC8vIFN1bmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICBkb3kgOiA2ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiAxc3QgaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgfVxufSk7XG5cbnJldHVybiB0ZTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBUZXR1biBEaWxpIChFYXN0IFRpbW9yKSBbdGV0XVxuLy8hIGF1dGhvciA6IEpvc2h1YSBCcm9va3MgOiBodHRwczovL2dpdGh1Yi5jb20vam9zaGJyb29rc1xuLy8hIGF1dGhvciA6IE9ub3JpbyBEZSBKLiBBZm9uc28gOiBodHRwczovL2dpdGh1Yi5jb20vbWFyb2JvXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxudmFyIHRldCA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3RldCcsIHtcbiAgICBtb250aHMgOiAnSmFuZWlydV9GZXZlcmVpcnVfTWFyc3VfQWJyaWxfTWFpdV9KdW5pdV9KdWxpdV9BdWd1c3R1X1NldGVtYnJ1X091dHVicnVfTm92ZW1icnVfRGV6ZW1icnUnLnNwbGl0KCdfJyksXG4gICAgbW9udGhzU2hvcnQgOiAnSmFuX0Zldl9NYXJfQWJyX01haV9KdW5fSnVsX0F1Z19TZXRfT3V0X05vdl9EZXonLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXMgOiAnRG9taW5ndV9TZWd1bmRhX1RlcnNhX0t1YXJ0YV9LaW50YV9TZXh0YV9TYWJhZHUnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNTaG9ydCA6ICdEb21fU2VnX1RlcnNfS3VhX0tpbnRfU2V4dF9TYWInLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNNaW4gOiAnRG9fU2VnX1RlX0t1X0tpX1NleF9TYScuc3BsaXQoJ18nKSxcbiAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIExMTEwgOiAnZGRkZCwgRCBNTU1NIFlZWVkgSEg6bW0nXG4gICAgfSxcbiAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgc2FtZURheTogJ1tPaGluIGloYV0gTFQnLFxuICAgICAgICBuZXh0RGF5OiAnW0FiYW4gaWhhXSBMVCcsXG4gICAgICAgIG5leHRXZWVrOiAnZGRkZCBbaWhhXSBMVCcsXG4gICAgICAgIGxhc3REYXk6ICdbSG9yaXNlaWsgaWhhXSBMVCcsXG4gICAgICAgIGxhc3RXZWVrOiAnZGRkZCBbc2VtYW5hIGtvdHVrXSBbaWhhXSBMVCcsXG4gICAgICAgIHNhbWVFbHNlOiAnTCdcbiAgICB9LFxuICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgZnV0dXJlIDogJ2loYSAlcycsXG4gICAgICAgIHBhc3QgOiAnJXMgbGl1YmEnLFxuICAgICAgICBzIDogJ21pbnV0dSBiYWx1bicsXG4gICAgICAgIG0gOiAnbWludXR1IGlkYScsXG4gICAgICAgIG1tIDogJ21pbnV0dXMgJWQnLFxuICAgICAgICBoIDogJ2hvcmFzIGlkYScsXG4gICAgICAgIGhoIDogJ2hvcmFzICVkJyxcbiAgICAgICAgZCA6ICdsb3JvbiBpZGEnLFxuICAgICAgICBkZCA6ICdsb3JvbiAlZCcsXG4gICAgICAgIE0gOiAnZnVsYW4gaWRhJyxcbiAgICAgICAgTU0gOiAnZnVsYW4gJWQnLFxuICAgICAgICB5IDogJ3RpbmFuIGlkYScsXG4gICAgICAgIHl5IDogJ3RpbmFuICVkJ1xuICAgIH0sXG4gICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9KHN0fG5kfHJkfHRoKS8sXG4gICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgdmFyIGIgPSBudW1iZXIgJSAxMCxcbiAgICAgICAgICAgIG91dHB1dCA9ICh+fihudW1iZXIgJSAxMDAgLyAxMCkgPT09IDEpID8gJ3RoJyA6XG4gICAgICAgICAgICAoYiA9PT0gMSkgPyAnc3QnIDpcbiAgICAgICAgICAgIChiID09PSAyKSA/ICduZCcgOlxuICAgICAgICAgICAgKGIgPT09IDMpID8gJ3JkJyA6ICd0aCc7XG4gICAgICAgIHJldHVybiBudW1iZXIgKyBvdXRwdXQ7XG4gICAgfSxcbiAgICB3ZWVrIDoge1xuICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgZG95IDogNCAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgIH1cbn0pO1xuXG5yZXR1cm4gdGV0O1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IFRoYWkgW3RoXVxuLy8hIGF1dGhvciA6IEtyaWRzYWRhIFRoYW5hYnVscG9uZyA6IGh0dHBzOi8vZ2l0aHViLmNvbS9zaXJuXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxudmFyIHRoID0gbW9tZW50LmRlZmluZUxvY2FsZSgndGgnLCB7XG4gICAgbW9udGhzIDogJ+C4oeC4geC4o+C4suC4hOC4oV/guIHguLjguKHguKDguLLguJ7guLHguJnguJjguYxf4Lih4Li14LiZ4Liy4LiE4LihX+C5gOC4oeC4qeC4suC4ouC4mV/guJ7guKTguKnguKDguLLguITguKFf4Lih4Li04LiW4Li44LiZ4Liy4Lii4LiZX+C4geC4o+C4geC4juC4suC4hOC4oV/guKrguLTguIfguKvguLLguITguKFf4LiB4Lix4LiZ4Lii4Liy4Lii4LiZX+C4leC4uOC4peC4suC4hOC4oV/guJ7guKTguKjguIjguLTguIHguLLguKLguJlf4LiY4Lix4LiZ4Lin4Liy4LiE4LihJy5zcGxpdCgnXycpLFxuICAgIG1vbnRoc1Nob3J0IDogJ+C4oS7guIQuX+C4gS7guJ4uX+C4oeC4tS7guIQuX+C5gOC4oS7guKIuX+C4ni7guIQuX+C4oeC4tC7guKIuX+C4gS7guIQuX+C4qi7guIQuX+C4gS7guKIuX+C4lS7guIQuX+C4ni7guKIuX+C4mC7guIQuJy5zcGxpdCgnXycpLFxuICAgIG1vbnRoc1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgd2Vla2RheXMgOiAn4Lit4Liy4LiX4Li04LiV4Lii4LmMX+C4iOC4seC4meC4l+C4o+C5jF/guK3guLHguIfguITguLLguKNf4Lie4Li44LiYX+C4nuC4pOC4q+C4seC4quC4muC4lOC4tV/guKjguLjguIHguKPguYxf4LmA4Liq4Liy4Lij4LmMJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzU2hvcnQgOiAn4Lit4Liy4LiX4Li04LiV4Lii4LmMX+C4iOC4seC4meC4l+C4o+C5jF/guK3guLHguIfguITguLLguKNf4Lie4Li44LiYX+C4nuC4pOC4q+C4seC4ql/guKjguLjguIHguKPguYxf4LmA4Liq4Liy4Lij4LmMJy5zcGxpdCgnXycpLCAvLyB5ZXMsIHRocmVlIGNoYXJhY3RlcnMgZGlmZmVyZW5jZVxuICAgIHdlZWtkYXlzTWluIDogJ+C4reC4si5f4LiILl/guK0uX+C4ni5f4Lie4LikLl/guKguX+C4qi4nLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgTFQgOiAnSDptbScsXG4gICAgICAgIExUUyA6ICdIOm1tOnNzJyxcbiAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkg4LmA4Lin4Lil4LiyIEg6bW0nLFxuICAgICAgICBMTExMIDogJ+C4p+C4seC4mWRkZGTguJfguLXguYggRCBNTU1NIFlZWVkg4LmA4Lin4Lil4LiyIEg6bW0nXG4gICAgfSxcbiAgICBtZXJpZGllbVBhcnNlOiAv4LiB4LmI4Lit4LiZ4LmA4LiX4Li14LmI4Lii4LiHfOC4q+C4peC4seC4h+C5gOC4l+C4teC5iOC4ouC4hy8sXG4gICAgaXNQTTogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgIHJldHVybiBpbnB1dCA9PT0gJ+C4q+C4peC4seC4h+C5gOC4l+C4teC5iOC4ouC4hyc7XG4gICAgfSxcbiAgICBtZXJpZGllbSA6IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgaWYgKGhvdXIgPCAxMikge1xuICAgICAgICAgICAgcmV0dXJuICfguIHguYjguK3guJnguYDguJfguLXguYjguKLguIcnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuICfguKvguKXguLHguIfguYDguJfguLXguYjguKLguIcnO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgc2FtZURheSA6ICdb4Lin4Lix4LiZ4LiZ4Li14LmJIOC5gOC4p+C4peC4sl0gTFQnLFxuICAgICAgICBuZXh0RGF5IDogJ1vguJ7guKPguLjguYjguIfguJnguLXguYkg4LmA4Lin4Lil4LiyXSBMVCcsXG4gICAgICAgIG5leHRXZWVrIDogJ2RkZGRb4Lir4LiZ4LmJ4LiyIOC5gOC4p+C4peC4sl0gTFQnLFxuICAgICAgICBsYXN0RGF5IDogJ1vguYDguKHguLfguYjguK3guKfguLLguJnguJnguLXguYkg4LmA4Lin4Lil4LiyXSBMVCcsXG4gICAgICAgIGxhc3RXZWVrIDogJ1vguKfguLHguJldZGRkZFvguJfguLXguYjguYHguKXguYnguKcg4LmA4Lin4Lil4LiyXSBMVCcsXG4gICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgfSxcbiAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgIGZ1dHVyZSA6ICfguK3guLXguIEgJXMnLFxuICAgICAgICBwYXN0IDogJyVz4LiX4Li14LmI4LmB4Lil4LmJ4LinJyxcbiAgICAgICAgcyA6ICfguYTguKHguYjguIHguLXguYjguKfguLTguJnguLLguJfguLUnLFxuICAgICAgICBtIDogJzEg4LiZ4Liy4LiX4Li1JyxcbiAgICAgICAgbW0gOiAnJWQg4LiZ4Liy4LiX4Li1JyxcbiAgICAgICAgaCA6ICcxIOC4iuC4seC5iOC4p+C5guC4oeC4hycsXG4gICAgICAgIGhoIDogJyVkIOC4iuC4seC5iOC4p+C5guC4oeC4hycsXG4gICAgICAgIGQgOiAnMSDguKfguLHguJknLFxuICAgICAgICBkZCA6ICclZCDguKfguLHguJknLFxuICAgICAgICBNIDogJzEg4LmA4LiU4Li34Lit4LiZJyxcbiAgICAgICAgTU0gOiAnJWQg4LmA4LiU4Li34Lit4LiZJyxcbiAgICAgICAgeSA6ICcxIOC4m+C4tScsXG4gICAgICAgIHl5IDogJyVkIOC4m+C4tSdcbiAgICB9XG59KTtcblxucmV0dXJuIHRoO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IFRhZ2Fsb2cgKFBoaWxpcHBpbmVzKSBbdGwtcGhdXG4vLyEgYXV0aG9yIDogRGFuIEhhZ21hbiA6IGh0dHBzOi8vZ2l0aHViLmNvbS9oYWdtYW5kYW5cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG52YXIgdGxQaCA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3RsLXBoJywge1xuICAgIG1vbnRocyA6ICdFbmVyb19QZWJyZXJvX01hcnNvX0FicmlsX01heW9fSHVueW9fSHVseW9fQWdvc3RvX1NldHllbWJyZV9Pa3R1YnJlX05vYnllbWJyZV9EaXN5ZW1icmUnLnNwbGl0KCdfJyksXG4gICAgbW9udGhzU2hvcnQgOiAnRW5lX1BlYl9NYXJfQWJyX01heV9IdW5fSHVsX0Fnb19TZXRfT2t0X05vYl9EaXMnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXMgOiAnTGluZ2dvX0x1bmVzX01hcnRlc19NaXllcmt1bGVzX0h1d2ViZXNfQml5ZXJuZXNfU2FiYWRvJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzU2hvcnQgOiAnTGluX0x1bl9NYXJfTWl5X0h1d19CaXlfU2FiJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzTWluIDogJ0xpX0x1X01hX01pX0h1X0JpX1NhYicuc3BsaXQoJ18nKSxcbiAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICBMIDogJ01NL0QvWVlZWScsXG4gICAgICAgIExMIDogJ01NTU0gRCwgWVlZWScsXG4gICAgICAgIExMTCA6ICdNTU1NIEQsIFlZWVkgSEg6bW0nLFxuICAgICAgICBMTExMIDogJ2RkZGQsIE1NTU0gREQsIFlZWVkgSEg6bW0nXG4gICAgfSxcbiAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgc2FtZURheTogJ0xUIFtuZ2F5b25nIGFyYXddJyxcbiAgICAgICAgbmV4dERheTogJ1tCdWthcyBuZ10gTFQnLFxuICAgICAgICBuZXh0V2VlazogJ0xUIFtzYSBzdXN1bm9kIG5hXSBkZGRkJyxcbiAgICAgICAgbGFzdERheTogJ0xUIFtrYWhhcG9uXScsXG4gICAgICAgIGxhc3RXZWVrOiAnTFQgW25vb25nIG5ha2FyYWFuZ10gZGRkZCcsXG4gICAgICAgIHNhbWVFbHNlOiAnTCdcbiAgICB9LFxuICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgZnV0dXJlIDogJ3NhIGxvb2IgbmcgJXMnLFxuICAgICAgICBwYXN0IDogJyVzIGFuZyBuYWthbGlwYXMnLFxuICAgICAgICBzIDogJ2lsYW5nIHNlZ3VuZG8nLFxuICAgICAgICBtIDogJ2lzYW5nIG1pbnV0bycsXG4gICAgICAgIG1tIDogJyVkIG1pbnV0bycsXG4gICAgICAgIGggOiAnaXNhbmcgb3JhcycsXG4gICAgICAgIGhoIDogJyVkIG9yYXMnLFxuICAgICAgICBkIDogJ2lzYW5nIGFyYXcnLFxuICAgICAgICBkZCA6ICclZCBhcmF3JyxcbiAgICAgICAgTSA6ICdpc2FuZyBidXdhbicsXG4gICAgICAgIE1NIDogJyVkIGJ1d2FuJyxcbiAgICAgICAgeSA6ICdpc2FuZyB0YW9uJyxcbiAgICAgICAgeXkgOiAnJWQgdGFvbidcbiAgICB9LFxuICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfS8sXG4gICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICB9LFxuICAgIHdlZWsgOiB7XG4gICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgfVxufSk7XG5cbnJldHVybiB0bFBoO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEtsaW5nb24gW3RsaF1cbi8vISBhdXRob3IgOiBEb21pbmlrYSBLcnVrIDogaHR0cHM6Ly9naXRodWIuY29tL2FtYXJhbnRocm9zZVxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciBudW1iZXJzTm91bnMgPSAncGFnaF93YeKAmV9jaGHigJlfd2VqX2xvU192YWdoX2phdl9Tb2NoX2Nob3JnaF9IdXQnLnNwbGl0KCdfJyk7XG5cbmZ1bmN0aW9uIHRyYW5zbGF0ZUZ1dHVyZShvdXRwdXQpIHtcbiAgICB2YXIgdGltZSA9IG91dHB1dDtcbiAgICB0aW1lID0gKG91dHB1dC5pbmRleE9mKCdqYWonKSAhPT0gLTEpID9cbiAgICB0aW1lLnNsaWNlKDAsIC0zKSArICdsZVMnIDpcbiAgICAob3V0cHV0LmluZGV4T2YoJ2phcicpICE9PSAtMSkgP1xuICAgIHRpbWUuc2xpY2UoMCwgLTMpICsgJ3dhUScgOlxuICAgIChvdXRwdXQuaW5kZXhPZignRElTJykgIT09IC0xKSA/XG4gICAgdGltZS5zbGljZSgwLCAtMykgKyAnbmVtJyA6XG4gICAgdGltZSArICcgcElxJztcbiAgICByZXR1cm4gdGltZTtcbn1cblxuZnVuY3Rpb24gdHJhbnNsYXRlUGFzdChvdXRwdXQpIHtcbiAgICB2YXIgdGltZSA9IG91dHB1dDtcbiAgICB0aW1lID0gKG91dHB1dC5pbmRleE9mKCdqYWonKSAhPT0gLTEpID9cbiAgICB0aW1lLnNsaWNlKDAsIC0zKSArICdIdeKAmScgOlxuICAgIChvdXRwdXQuaW5kZXhPZignamFyJykgIT09IC0xKSA/XG4gICAgdGltZS5zbGljZSgwLCAtMykgKyAnd2VuJyA6XG4gICAgKG91dHB1dC5pbmRleE9mKCdESVMnKSAhPT0gLTEpID9cbiAgICB0aW1lLnNsaWNlKDAsIC0zKSArICdiZW4nIDpcbiAgICB0aW1lICsgJyByZXQnO1xuICAgIHJldHVybiB0aW1lO1xufVxuXG5mdW5jdGlvbiB0cmFuc2xhdGUobnVtYmVyLCB3aXRob3V0U3VmZml4LCBzdHJpbmcsIGlzRnV0dXJlKSB7XG4gICAgdmFyIG51bWJlck5vdW4gPSBudW1iZXJBc05vdW4obnVtYmVyKTtcbiAgICBzd2l0Y2ggKHN0cmluZykge1xuICAgICAgICBjYXNlICdtbSc6XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyTm91biArICcgdHVwJztcbiAgICAgICAgY2FzZSAnaGgnOlxuICAgICAgICAgICAgcmV0dXJuIG51bWJlck5vdW4gKyAnIHJlcCc7XG4gICAgICAgIGNhc2UgJ2RkJzpcbiAgICAgICAgICAgIHJldHVybiBudW1iZXJOb3VuICsgJyBqYWonO1xuICAgICAgICBjYXNlICdNTSc6XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyTm91biArICcgamFyJztcbiAgICAgICAgY2FzZSAneXknOlxuICAgICAgICAgICAgcmV0dXJuIG51bWJlck5vdW4gKyAnIERJUyc7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBudW1iZXJBc05vdW4obnVtYmVyKSB7XG4gICAgdmFyIGh1bmRyZWQgPSBNYXRoLmZsb29yKChudW1iZXIgJSAxMDAwKSAvIDEwMCksXG4gICAgdGVuID0gTWF0aC5mbG9vcigobnVtYmVyICUgMTAwKSAvIDEwKSxcbiAgICBvbmUgPSBudW1iZXIgJSAxMCxcbiAgICB3b3JkID0gJyc7XG4gICAgaWYgKGh1bmRyZWQgPiAwKSB7XG4gICAgICAgIHdvcmQgKz0gbnVtYmVyc05vdW5zW2h1bmRyZWRdICsgJ3ZhdGxoJztcbiAgICB9XG4gICAgaWYgKHRlbiA+IDApIHtcbiAgICAgICAgd29yZCArPSAoKHdvcmQgIT09ICcnKSA/ICcgJyA6ICcnKSArIG51bWJlcnNOb3Vuc1t0ZW5dICsgJ21hSCc7XG4gICAgfVxuICAgIGlmIChvbmUgPiAwKSB7XG4gICAgICAgIHdvcmQgKz0gKCh3b3JkICE9PSAnJykgPyAnICcgOiAnJykgKyBudW1iZXJzTm91bnNbb25lXTtcbiAgICB9XG4gICAgcmV0dXJuICh3b3JkID09PSAnJykgPyAncGFnaCcgOiB3b3JkO1xufVxuXG52YXIgdGxoID0gbW9tZW50LmRlZmluZUxvY2FsZSgndGxoJywge1xuICAgIG1vbnRocyA6ICd0ZXJh4oCZIGphciB3YeKAmV90ZXJh4oCZIGphciBjaGHigJlfdGVyYeKAmSBqYXIgd2VqX3RlcmHigJkgamFyIGxvU190ZXJh4oCZIGphciB2YWdoX3RlcmHigJkgamFyIGphdl90ZXJh4oCZIGphciBTb2NoX3RlcmHigJkgamFyIGNob3JnaF90ZXJh4oCZIGphciBIdXRfdGVyYeKAmSBqYXIgd2HigJltYUhfdGVyYeKAmSBqYXIgd2HigJltYUggd2HigJlfdGVyYeKAmSBqYXIgd2HigJltYUggY2hh4oCZJy5zcGxpdCgnXycpLFxuICAgIG1vbnRoc1Nob3J0IDogJ2phciB3YeKAmV9qYXIgY2hh4oCZX2phciB3ZWpfamFyIGxvU19qYXIgdmFnaF9qYXIgamF2X2phciBTb2NoX2phciBjaG9yZ2hfamFyIEh1dF9qYXIgd2HigJltYUhfamFyIHdh4oCZbWFIIHdh4oCZX2phciB3YeKAmW1hSCBjaGHigJknLnNwbGl0KCdfJyksXG4gICAgbW9udGhzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgd2Vla2RheXMgOiAnbG9qbUl0amFqX0RhU2phal9wb3ZqYWpfZ2hJdGxoamFqX2xvZ2hqYWpfYnVxamFqX2doSW5qYWonLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNTaG9ydCA6ICdsb2ptSXRqYWpfRGFTamFqX3Bvdmphal9naEl0bGhqYWpfbG9naGphal9idXFqYWpfZ2hJbmphaicuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c01pbiA6ICdsb2ptSXRqYWpfRGFTamFqX3Bvdmphal9naEl0bGhqYWpfbG9naGphal9idXFqYWpfZ2hJbmphaicuc3BsaXQoJ18nKSxcbiAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICBMIDogJ0RELk1NLllZWVknLFxuICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIExMTEwgOiAnZGRkZCwgRCBNTU1NIFlZWVkgSEg6bW0nXG4gICAgfSxcbiAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgc2FtZURheTogJ1tEYUhqYWpdIExUJyxcbiAgICAgICAgbmV4dERheTogJ1t3YeKAmWxlU10gTFQnLFxuICAgICAgICBuZXh0V2VlazogJ0xMTCcsXG4gICAgICAgIGxhc3REYXk6ICdbd2HigJlIdeKAmV0gTFQnLFxuICAgICAgICBsYXN0V2VlazogJ0xMTCcsXG4gICAgICAgIHNhbWVFbHNlOiAnTCdcbiAgICB9LFxuICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgZnV0dXJlIDogdHJhbnNsYXRlRnV0dXJlLFxuICAgICAgICBwYXN0IDogdHJhbnNsYXRlUGFzdCxcbiAgICAgICAgcyA6ICdwdVMgbHVwJyxcbiAgICAgICAgbSA6ICd3YeKAmSB0dXAnLFxuICAgICAgICBtbSA6IHRyYW5zbGF0ZSxcbiAgICAgICAgaCA6ICd3YeKAmSByZXAnLFxuICAgICAgICBoaCA6IHRyYW5zbGF0ZSxcbiAgICAgICAgZCA6ICd3YeKAmSBqYWonLFxuICAgICAgICBkZCA6IHRyYW5zbGF0ZSxcbiAgICAgICAgTSA6ICd3YeKAmSBqYXInLFxuICAgICAgICBNTSA6IHRyYW5zbGF0ZSxcbiAgICAgICAgeSA6ICd3YeKAmSBESVMnLFxuICAgICAgICB5eSA6IHRyYW5zbGF0ZVxuICAgIH0sXG4gICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9XFwuLyxcbiAgICBvcmRpbmFsIDogJyVkLicsXG4gICAgd2VlayA6IHtcbiAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICB9XG59KTtcblxucmV0dXJuIHRsaDtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBUdXJraXNoIFt0cl1cbi8vISBhdXRob3JzIDogRXJoYW4gR3VuZG9nYW4gOiBodHRwczovL2dpdGh1Yi5jb20vZXJoYW5ndW5kb2dhbixcbi8vISAgICAgICAgICAgQnVyYWsgWWnEn2l0IEtheWE6IGh0dHBzOi8vZ2l0aHViLmNvbS9CWUtcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG52YXIgc3VmZml4ZXMgPSB7XG4gICAgMTogJ1xcJ2luY2knLFxuICAgIDU6ICdcXCdpbmNpJyxcbiAgICA4OiAnXFwnaW5jaScsXG4gICAgNzA6ICdcXCdpbmNpJyxcbiAgICA4MDogJ1xcJ2luY2knLFxuICAgIDI6ICdcXCduY2knLFxuICAgIDc6ICdcXCduY2knLFxuICAgIDIwOiAnXFwnbmNpJyxcbiAgICA1MDogJ1xcJ25jaScsXG4gICAgMzogJ1xcJ8O8bmPDvCcsXG4gICAgNDogJ1xcJ8O8bmPDvCcsXG4gICAgMTAwOiAnXFwnw7xuY8O8JyxcbiAgICA2OiAnXFwnbmPEsScsXG4gICAgOTogJ1xcJ3VuY3UnLFxuICAgIDEwOiAnXFwndW5jdScsXG4gICAgMzA6ICdcXCd1bmN1JyxcbiAgICA2MDogJ1xcJ8SxbmPEsScsXG4gICAgOTA6ICdcXCfEsW5jxLEnXG59O1xuXG52YXIgdHIgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCd0cicsIHtcbiAgICBtb250aHMgOiAnT2Nha1/FnnViYXRfTWFydF9OaXNhbl9NYXnEsXNfSGF6aXJhbl9UZW1tdXpfQcSfdXN0b3NfRXlsw7xsX0VraW1fS2FzxLFtX0FyYWzEsWsnLnNwbGl0KCdfJyksXG4gICAgbW9udGhzU2hvcnQgOiAnT2NhX8WedWJfTWFyX05pc19NYXlfSGF6X1RlbV9BxJ91X0V5bF9Fa2lfS2FzX0FyYScuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5cyA6ICdQYXphcl9QYXphcnRlc2lfU2FsxLFfw4dhcsWfYW1iYV9QZXLFn2VtYmVfQ3VtYV9DdW1hcnRlc2knLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNTaG9ydCA6ICdQYXpfUHRzX1NhbF/Dh2FyX1Blcl9DdW1fQ3RzJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzTWluIDogJ1B6X1B0X1NhX8OHYV9QZV9DdV9DdCcuc3BsaXQoJ18nKSxcbiAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICBMIDogJ0RELk1NLllZWVknLFxuICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIExMTEwgOiAnZGRkZCwgRCBNTU1NIFlZWVkgSEg6bW0nXG4gICAgfSxcbiAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgc2FtZURheSA6ICdbYnVnw7xuIHNhYXRdIExUJyxcbiAgICAgICAgbmV4dERheSA6ICdbeWFyxLFuIHNhYXRdIExUJyxcbiAgICAgICAgbmV4dFdlZWsgOiAnW2hhZnRheWFdIGRkZGQgW3NhYXRdIExUJyxcbiAgICAgICAgbGFzdERheSA6ICdbZMO8bl0gTFQnLFxuICAgICAgICBsYXN0V2VlayA6ICdbZ2XDp2VuIGhhZnRhXSBkZGRkIFtzYWF0XSBMVCcsXG4gICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgfSxcbiAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgIGZ1dHVyZSA6ICclcyBzb25yYScsXG4gICAgICAgIHBhc3QgOiAnJXMgw7ZuY2UnLFxuICAgICAgICBzIDogJ2Jpcmthw6cgc2FuaXllJyxcbiAgICAgICAgbSA6ICdiaXIgZGFraWthJyxcbiAgICAgICAgbW0gOiAnJWQgZGFraWthJyxcbiAgICAgICAgaCA6ICdiaXIgc2FhdCcsXG4gICAgICAgIGhoIDogJyVkIHNhYXQnLFxuICAgICAgICBkIDogJ2JpciBnw7xuJyxcbiAgICAgICAgZGQgOiAnJWQgZ8O8bicsXG4gICAgICAgIE0gOiAnYmlyIGF5JyxcbiAgICAgICAgTU0gOiAnJWQgYXknLFxuICAgICAgICB5IDogJ2JpciB5xLFsJyxcbiAgICAgICAgeXkgOiAnJWQgecSxbCdcbiAgICB9LFxuICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfScoaW5jaXxuY2l8w7xuY8O8fG5jxLF8dW5jdXzEsW5jxLEpLyxcbiAgICBvcmRpbmFsIDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICBpZiAobnVtYmVyID09PSAwKSB7ICAvLyBzcGVjaWFsIGNhc2UgZm9yIHplcm9cbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnXFwnxLFuY8SxJztcbiAgICAgICAgfVxuICAgICAgICB2YXIgYSA9IG51bWJlciAlIDEwLFxuICAgICAgICAgICAgYiA9IG51bWJlciAlIDEwMCAtIGEsXG4gICAgICAgICAgICBjID0gbnVtYmVyID49IDEwMCA/IDEwMCA6IG51bGw7XG4gICAgICAgIHJldHVybiBudW1iZXIgKyAoc3VmZml4ZXNbYV0gfHwgc3VmZml4ZXNbYl0gfHwgc3VmZml4ZXNbY10pO1xuICAgIH0sXG4gICAgd2VlayA6IHtcbiAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgIGRveSA6IDcgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDFzdCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICB9XG59KTtcblxucmV0dXJuIHRyO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IFRhbG9zc2FuIFt0emxdXG4vLyEgYXV0aG9yIDogUm9iaW4gdmFuIGRlciBWbGlldCA6IGh0dHBzOi8vZ2l0aHViLmNvbS9yb2JpbjB2YW4wZGVyMHZcbi8vISBhdXRob3IgOiBJdXN0w6wgQ2FudW5cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4vLyBBZnRlciB0aGUgeWVhciB0aGVyZSBzaG91bGQgYmUgYSBzbGFzaCBhbmQgdGhlIGFtb3VudCBvZiB5ZWFycyBzaW5jZSBEZWNlbWJlciAyNiwgMTk3OSBpbiBSb21hbiBudW1lcmFscy5cbi8vIFRoaXMgaXMgY3VycmVudGx5IHRvbyBkaWZmaWN1bHQgKG1heWJlIGV2ZW4gaW1wb3NzaWJsZSkgdG8gYWRkLlxudmFyIHR6bCA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3R6bCcsIHtcbiAgICBtb250aHMgOiAnSmFudWFyX0ZldnJhZ2xoX01hcsOnX0F2csOvdV9NYWlfR8O8bl9KdWxpYV9HdXNjaHRfU2V0ZW12YXJfTGlzdG9ww6R0c19Ob2VtdmFyX1plY2VtdmFyJy5zcGxpdCgnXycpLFxuICAgIG1vbnRoc1Nob3J0IDogJ0phbl9GZXZfTWFyX0F2cl9NYWlfR8O8bl9KdWxfR3VzX1NldF9MaXNfTm9lX1plYycuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5cyA6ICdTw7psYWRpX0zDum5lw6dpX01haXR6aV9Nw6FyY3VyaV9YaMO6YWRpX1Zpw6luZXLDp2lfU8OhdHVyaScuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1Nob3J0IDogJ1PDumxfTMO6bl9NYWlfTcOhcl9YaMO6X1Zpw6lfU8OhdCcuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c01pbiA6ICdTw7pfTMO6X01hX03DoV9YaF9WaV9Tw6EnLnNwbGl0KCdfJyksXG4gICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgIExUIDogJ0hILm1tJyxcbiAgICAgICAgTFRTIDogJ0hILm1tLnNzJyxcbiAgICAgICAgTCA6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgTEwgOiAnRC4gTU1NTSBbZGFsbGFzXSBZWVlZJyxcbiAgICAgICAgTExMIDogJ0QuIE1NTU0gW2RhbGxhc10gWVlZWSBISC5tbScsXG4gICAgICAgIExMTEwgOiAnZGRkZCwgW2xpXSBELiBNTU1NIFtkYWxsYXNdIFlZWVkgSEgubW0nXG4gICAgfSxcbiAgICBtZXJpZGllbVBhcnNlOiAvZFxcJ298ZFxcJ2EvaSxcbiAgICBpc1BNIDogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgIHJldHVybiAnZFxcJ28nID09PSBpbnB1dC50b0xvd2VyQ2FzZSgpO1xuICAgIH0sXG4gICAgbWVyaWRpZW0gOiBmdW5jdGlvbiAoaG91cnMsIG1pbnV0ZXMsIGlzTG93ZXIpIHtcbiAgICAgICAgaWYgKGhvdXJzID4gMTEpIHtcbiAgICAgICAgICAgIHJldHVybiBpc0xvd2VyID8gJ2RcXCdvJyA6ICdEXFwnTyc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gaXNMb3dlciA/ICdkXFwnYScgOiAnRFxcJ0EnO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgc2FtZURheSA6ICdbb3hoaSDDoF0gTFQnLFxuICAgICAgICBuZXh0RGF5IDogJ1tkZW3DoCDDoF0gTFQnLFxuICAgICAgICBuZXh0V2VlayA6ICdkZGRkIFvDoF0gTFQnLFxuICAgICAgICBsYXN0RGF5IDogJ1tpZWlyaSDDoF0gTFQnLFxuICAgICAgICBsYXN0V2VlayA6ICdbc8O8ciBlbF0gZGRkZCBbbGFzdGV1IMOgXSBMVCcsXG4gICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgfSxcbiAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgIGZ1dHVyZSA6ICdvc3ByZWkgJXMnLFxuICAgICAgICBwYXN0IDogJ2phJXMnLFxuICAgICAgICBzIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgbSA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgIG1tIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgaCA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgIGhoIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgZCA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgIGRkIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgTSA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgIE1NIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgeSA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgIHl5IDogcHJvY2Vzc1JlbGF0aXZlVGltZVxuICAgIH0sXG4gICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9XFwuLyxcbiAgICBvcmRpbmFsIDogJyVkLicsXG4gICAgd2VlayA6IHtcbiAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICB9XG59KTtcblxuZnVuY3Rpb24gcHJvY2Vzc1JlbGF0aXZlVGltZShudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGtleSwgaXNGdXR1cmUpIHtcbiAgICB2YXIgZm9ybWF0ID0ge1xuICAgICAgICAncyc6IFsndmllbnNhcyBzZWN1bmRzJywgJ1xcJ2llbnNhcyBzZWN1bmRzJ10sXG4gICAgICAgICdtJzogWydcXCduIG3DrXV0JywgJ1xcJ2llbnMgbcOtdXQnXSxcbiAgICAgICAgJ21tJzogW251bWJlciArICcgbcOtdXRzJywgJycgKyBudW1iZXIgKyAnIG3DrXV0cyddLFxuICAgICAgICAnaCc6IFsnXFwnbiDDvm9yYScsICdcXCdpZW5zYSDDvm9yYSddLFxuICAgICAgICAnaGgnOiBbbnVtYmVyICsgJyDDvm9yYXMnLCAnJyArIG51bWJlciArICcgw75vcmFzJ10sXG4gICAgICAgICdkJzogWydcXCduIHppdWEnLCAnXFwnaWVuc2Egeml1YSddLFxuICAgICAgICAnZGQnOiBbbnVtYmVyICsgJyB6aXVhcycsICcnICsgbnVtYmVyICsgJyB6aXVhcyddLFxuICAgICAgICAnTSc6IFsnXFwnbiBtZXMnLCAnXFwnaWVucyBtZXMnXSxcbiAgICAgICAgJ01NJzogW251bWJlciArICcgbWVzZW4nLCAnJyArIG51bWJlciArICcgbWVzZW4nXSxcbiAgICAgICAgJ3knOiBbJ1xcJ24gYXInLCAnXFwnaWVucyBhciddLFxuICAgICAgICAneXknOiBbbnVtYmVyICsgJyBhcnMnLCAnJyArIG51bWJlciArICcgYXJzJ11cbiAgICB9O1xuICAgIHJldHVybiBpc0Z1dHVyZSA/IGZvcm1hdFtrZXldWzBdIDogKHdpdGhvdXRTdWZmaXggPyBmb3JtYXRba2V5XVswXSA6IGZvcm1hdFtrZXldWzFdKTtcbn1cblxucmV0dXJuIHR6bDtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBDZW50cmFsIEF0bGFzIFRhbWF6aWdodCBbdHptXVxuLy8hIGF1dGhvciA6IEFiZGVsIFNhaWQgOiBodHRwczovL2dpdGh1Yi5jb20vYWJkZWxzYWlkXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxudmFyIHR6bSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3R6bScsIHtcbiAgICBtb250aHMgOiAn4rWJ4rWP4rWP4rSw4rWi4rWUX+K0seK1leK0sOK1ouK1lV/itY7itLDitZXitZpf4rWJ4rSx4rWU4rWJ4rWUX+K1juK0sOK1ouK1ouK1k1/itaLitZPitY/itaLitZNf4rWi4rWT4rWN4rWi4rWT4rWjX+K1luK1k+K1m+K1nF/itZvitZPitZzitLDitY/itLHitYnitZRf4rS94rWf4rWT4rSx4rWVX+K1j+K1k+K1oeK0sOK1j+K0seK1ieK1lF/itLfitZPitYritY/itLHitYnitZQnLnNwbGl0KCdfJyksXG4gICAgbW9udGhzU2hvcnQgOiAn4rWJ4rWP4rWP4rSw4rWi4rWUX+K0seK1leK0sOK1ouK1lV/itY7itLDitZXitZpf4rWJ4rSx4rWU4rWJ4rWUX+K1juK0sOK1ouK1ouK1k1/itaLitZPitY/itaLitZNf4rWi4rWT4rWN4rWi4rWT4rWjX+K1luK1k+K1m+K1nF/itZvitZPitZzitLDitY/itLHitYnitZRf4rS94rWf4rWT4rSx4rWVX+K1j+K1k+K1oeK0sOK1j+K0seK1ieK1lF/itLfitZPitYritY/itLHitYnitZQnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXMgOiAn4rSw4rWZ4rSw4rWO4rSw4rWZX+K0sOK1ouK1j+K0sOK1mV/itLDitZnitYnitY/itLDitZlf4rSw4rS94rWU4rSw4rWZX+K0sOK0veK1oeK0sOK1mV/itLDitZnitYnitY7itaHitLDitZlf4rSw4rWZ4rWJ4rS54rWi4rSw4rWZJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzU2hvcnQgOiAn4rSw4rWZ4rSw4rWO4rSw4rWZX+K0sOK1ouK1j+K0sOK1mV/itLDitZnitYnitY/itLDitZlf4rSw4rS94rWU4rSw4rWZX+K0sOK0veK1oeK0sOK1mV/itLDitZnitYnitY7itaHitLDitZlf4rSw4rWZ4rWJ4rS54rWi4rSw4rWZJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzTWluIDogJ+K0sOK1meK0sOK1juK0sOK1mV/itLDitaLitY/itLDitZlf4rSw4rWZ4rWJ4rWP4rSw4rWZX+K0sOK0veK1lOK0sOK1mV/itLDitL3itaHitLDitZlf4rSw4rWZ4rWJ4rWO4rWh4rSw4rWZX+K0sOK1meK1ieK0ueK1ouK0sOK1mScuc3BsaXQoJ18nKSxcbiAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgTExMTCA6ICdkZGRkIEQgTU1NTSBZWVlZIEhIOm1tJ1xuICAgIH0sXG4gICAgY2FsZW5kYXIgOiB7XG4gICAgICAgIHNhbWVEYXk6ICdb4rSw4rWZ4rS34rWFIOK0tF0gTFQnLFxuICAgICAgICBuZXh0RGF5OiAnW+K0sOK1meK0veK0sCDitLRdIExUJyxcbiAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFvitLRdIExUJyxcbiAgICAgICAgbGFzdERheTogJ1vitLDitZritLDitY/itZwg4rS0XSBMVCcsXG4gICAgICAgIGxhc3RXZWVrOiAnZGRkZCBb4rS0XSBMVCcsXG4gICAgICAgIHNhbWVFbHNlOiAnTCdcbiAgICB9LFxuICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgZnV0dXJlIDogJ+K0t+K0sOK0t+K1hSDitZkg4rWi4rSw4rWPICVzJyxcbiAgICAgICAgcGFzdCA6ICfitaLitLDitY8gJXMnLFxuICAgICAgICBzIDogJ+K1ieK1juK1ieK0vScsXG4gICAgICAgIG0gOiAn4rWO4rWJ4rWP4rWT4rS6JyxcbiAgICAgICAgbW0gOiAnJWQg4rWO4rWJ4rWP4rWT4rS6JyxcbiAgICAgICAgaCA6ICfitZnitLDitYTitLAnLFxuICAgICAgICBoaCA6ICclZCDitZzitLDitZnitZnitLDitYTitYnitY8nLFxuICAgICAgICBkIDogJ+K0sOK1meK1mScsXG4gICAgICAgIGRkIDogJyVkIG/itZnitZnitLDitY8nLFxuICAgICAgICBNIDogJ+K0sOK1om/itZPitZQnLFxuICAgICAgICBNTSA6ICclZCDitYnitaLitaLitYnitZTitY8nLFxuICAgICAgICB5IDogJ+K0sOK1meK0s+K0sOK1mScsXG4gICAgICAgIHl5IDogJyVkIOK1ieK1meK0s+K0sOK1meK1jydcbiAgICB9LFxuICAgIHdlZWsgOiB7XG4gICAgICAgIGRvdyA6IDYsIC8vIFNhdHVyZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgIGRveSA6IDEyICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiAxc3QgaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgfVxufSk7XG5cbnJldHVybiB0em07XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogQ2VudHJhbCBBdGxhcyBUYW1hemlnaHQgTGF0aW4gW3R6bS1sYXRuXVxuLy8hIGF1dGhvciA6IEFiZGVsIFNhaWQgOiBodHRwczovL2dpdGh1Yi5jb20vYWJkZWxzYWlkXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxudmFyIHR6bUxhdG4gPSBtb21lbnQuZGVmaW5lTG9jYWxlKCd0em0tbGF0bicsIHtcbiAgICBtb250aHMgOiAnaW5uYXlyX2Jyy6RheXLLpF9tYXLLpHPLpF9pYnJpcl9tYXl5d195d255d195d2x5d3pfyaN3xaF0X8Whd3RhbmJpcl9rdMukd2Jyy6Rfbnd3YW5iaXJfZHdqbmJpcicuc3BsaXQoJ18nKSxcbiAgICBtb250aHNTaG9ydCA6ICdpbm5heXJfYnLLpGF5csukX21hcsukc8ukX2licmlyX21heXl3X3l3bnl3X3l3bHl3el/Jo3fFoXRfxaF3dGFuYmlyX2t0y6R3YnLLpF9ud3dhbmJpcl9kd2puYmlyJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzIDogJ2FzYW1hc19heW5hc19hc2luYXNfYWtyYXNfYWt3YXNfYXNpbXdhc19hc2nhuI15YXMnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNTaG9ydCA6ICdhc2FtYXNfYXluYXNfYXNpbmFzX2FrcmFzX2Frd2FzX2FzaW13YXNfYXNp4biNeWFzJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzTWluIDogJ2FzYW1hc19heW5hc19hc2luYXNfYWtyYXNfYWt3YXNfYXNpbXdhc19hc2nhuI15YXMnLnNwbGl0KCdfJyksXG4gICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICBMTExMIDogJ2RkZGQgRCBNTU1NIFlZWVkgSEg6bW0nXG4gICAgfSxcbiAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgc2FtZURheTogJ1thc2RraCBnXSBMVCcsXG4gICAgICAgIG5leHREYXk6ICdbYXNrYSBnXSBMVCcsXG4gICAgICAgIG5leHRXZWVrOiAnZGRkZCBbZ10gTFQnLFxuICAgICAgICBsYXN0RGF5OiAnW2Fzc2FudCBnXSBMVCcsXG4gICAgICAgIGxhc3RXZWVrOiAnZGRkZCBbZ10gTFQnLFxuICAgICAgICBzYW1lRWxzZTogJ0wnXG4gICAgfSxcbiAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgIGZ1dHVyZSA6ICdkYWRraCBzIHlhbiAlcycsXG4gICAgICAgIHBhc3QgOiAneWFuICVzJyxcbiAgICAgICAgcyA6ICdpbWlrJyxcbiAgICAgICAgbSA6ICdtaW514biNJyxcbiAgICAgICAgbW0gOiAnJWQgbWludeG4jScsXG4gICAgICAgIGggOiAnc2HJm2EnLFxuICAgICAgICBoaCA6ICclZCB0YXNzYcmbaW4nLFxuICAgICAgICBkIDogJ2FzcycsXG4gICAgICAgIGRkIDogJyVkIG9zc2FuJyxcbiAgICAgICAgTSA6ICdheW93cicsXG4gICAgICAgIE1NIDogJyVkIGl5eWlybicsXG4gICAgICAgIHkgOiAnYXNnYXMnLFxuICAgICAgICB5eSA6ICclZCBpc2dhc24nXG4gICAgfSxcbiAgICB3ZWVrIDoge1xuICAgICAgICBkb3cgOiA2LCAvLyBTYXR1cmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICBkb3kgOiAxMiAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gMXN0IGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgIH1cbn0pO1xuXG5yZXR1cm4gdHptTGF0bjtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBVa3JhaW5pYW4gW3VrXVxuLy8hIGF1dGhvciA6IHplbWxhbmluIDogaHR0cHM6Ly9naXRodWIuY29tL3plbWxhbmluXG4vLyEgQXV0aG9yIDogTWVuZWxpb24gRWxlbnPDumxlIDogaHR0cHM6Ly9naXRodWIuY29tL09pcmVcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG5mdW5jdGlvbiBwbHVyYWwod29yZCwgbnVtKSB7XG4gICAgdmFyIGZvcm1zID0gd29yZC5zcGxpdCgnXycpO1xuICAgIHJldHVybiBudW0gJSAxMCA9PT0gMSAmJiBudW0gJSAxMDAgIT09IDExID8gZm9ybXNbMF0gOiAobnVtICUgMTAgPj0gMiAmJiBudW0gJSAxMCA8PSA0ICYmIChudW0gJSAxMDAgPCAxMCB8fCBudW0gJSAxMDAgPj0gMjApID8gZm9ybXNbMV0gOiBmb3Jtc1syXSk7XG59XG5mdW5jdGlvbiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5KSB7XG4gICAgdmFyIGZvcm1hdCA9IHtcbiAgICAgICAgJ21tJzogd2l0aG91dFN1ZmZpeCA/ICfRhdCy0LjQu9C40L3QsF/RhdCy0LjQu9C40L3QuF/RhdCy0LjQu9C40L0nIDogJ9GF0LLQuNC70LjQvdGDX9GF0LLQuNC70LjQvdC4X9GF0LLQuNC70LjQvScsXG4gICAgICAgICdoaCc6IHdpdGhvdXRTdWZmaXggPyAn0LPQvtC00LjQvdCwX9Cz0L7QtNC40L3QuF/Qs9C+0LTQuNC9JyA6ICfQs9C+0LTQuNC90YNf0LPQvtC00LjQvdC4X9Cz0L7QtNC40L0nLFxuICAgICAgICAnZGQnOiAn0LTQtdC90Yxf0LTQvdGWX9C00L3RltCyJyxcbiAgICAgICAgJ01NJzogJ9C80ZbRgdGP0YbRjF/QvNGW0YHRj9GG0ZZf0LzRltGB0Y/RhtGW0LInLFxuICAgICAgICAneXknOiAn0YDRltC6X9GA0L7QutC4X9GA0L7QutGW0LInXG4gICAgfTtcbiAgICBpZiAoa2V5ID09PSAnbScpIHtcbiAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggPyAn0YXQstC40LvQuNC90LAnIDogJ9GF0LLQuNC70LjQvdGDJztcbiAgICB9XG4gICAgZWxzZSBpZiAoa2V5ID09PSAnaCcpIHtcbiAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggPyAn0LPQvtC00LjQvdCwJyA6ICfQs9C+0LTQuNC90YMnO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG51bWJlciArICcgJyArIHBsdXJhbChmb3JtYXRba2V5XSwgK251bWJlcik7XG4gICAgfVxufVxuZnVuY3Rpb24gd2Vla2RheXNDYXNlUmVwbGFjZShtLCBmb3JtYXQpIHtcbiAgICB2YXIgd2Vla2RheXMgPSB7XG4gICAgICAgICdub21pbmF0aXZlJzogJ9C90LXQtNGW0LvRj1/Qv9C+0L3QtdC00ZbQu9C+0Lpf0LLRltCy0YLQvtGA0L7Qul/RgdC10YDQtdC00LBf0YfQtdGC0LLQtdGAX9C/4oCZ0Y/RgtC90LjRhtGPX9GB0YPQsdC+0YLQsCcuc3BsaXQoJ18nKSxcbiAgICAgICAgJ2FjY3VzYXRpdmUnOiAn0L3QtdC00ZbQu9GOX9C/0L7QvdC10LTRltC70L7Qul/QstGW0LLRgtC+0YDQvtC6X9GB0LXRgNC10LTRg1/Rh9C10YLQstC10YBf0L/igJnRj9GC0L3QuNGG0Y5f0YHRg9Cx0L7RgtGDJy5zcGxpdCgnXycpLFxuICAgICAgICAnZ2VuaXRpdmUnOiAn0L3QtdC00ZbQu9GWX9C/0L7QvdC10LTRltC70LrQsF/QstGW0LLRgtC+0YDQutCwX9GB0LXRgNC10LTQuF/Rh9C10YLQstC10YDQs9CwX9C/4oCZ0Y/RgtC90LjRhtGWX9GB0YPQsdC+0YLQuCcuc3BsaXQoJ18nKVxuICAgIH07XG5cbiAgICBpZiAoIW0pIHtcbiAgICAgICAgcmV0dXJuIHdlZWtkYXlzWydub21pbmF0aXZlJ107XG4gICAgfVxuXG4gICAgdmFyIG5vdW5DYXNlID0gKC8oXFxbW9CS0LLQo9GDXVxcXSkgP2RkZGQvKS50ZXN0KGZvcm1hdCkgP1xuICAgICAgICAnYWNjdXNhdGl2ZScgOlxuICAgICAgICAoKC9cXFs/KD860LzQuNC90YPQu9C+0Zd80L3QsNGB0YLRg9C/0L3QvtGXKT8gP1xcXSA/ZGRkZC8pLnRlc3QoZm9ybWF0KSA/XG4gICAgICAgICAgICAnZ2VuaXRpdmUnIDpcbiAgICAgICAgICAgICdub21pbmF0aXZlJyk7XG4gICAgcmV0dXJuIHdlZWtkYXlzW25vdW5DYXNlXVttLmRheSgpXTtcbn1cbmZ1bmN0aW9uIHByb2Nlc3NIb3Vyc0Z1bmN0aW9uKHN0cikge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBzdHIgKyAn0L4nICsgKHRoaXMuaG91cnMoKSA9PT0gMTEgPyAn0LEnIDogJycpICsgJ10gTFQnO1xuICAgIH07XG59XG5cbnZhciB1ayA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3VrJywge1xuICAgIG1vbnRocyA6IHtcbiAgICAgICAgJ2Zvcm1hdCc6ICfRgdGW0YfQvdGPX9C70Y7RgtC+0LPQvl/QsdC10YDQtdC30L3Rj1/QutCy0ZbRgtC90Y9f0YLRgNCw0LLQvdGPX9GH0LXRgNCy0L3Rj1/Qu9C40L/QvdGPX9GB0LXRgNC/0L3Rj1/QstC10YDQtdGB0L3Rj1/QttC+0LLRgtC90Y9f0LvQuNGB0YLQvtC/0LDQtNCwX9Cz0YDRg9C00L3Rjycuc3BsaXQoJ18nKSxcbiAgICAgICAgJ3N0YW5kYWxvbmUnOiAn0YHRltGH0LXQvdGMX9C70Y7RgtC40Llf0LHQtdGA0LXQt9C10L3RjF/QutCy0ZbRgtC10L3RjF/RgtGA0LDQstC10L3RjF/Rh9C10YDQstC10L3RjF/Qu9C40L/QtdC90Yxf0YHQtdGA0L/QtdC90Yxf0LLQtdGA0LXRgdC10L3RjF/QttC+0LLRgtC10L3RjF/Qu9C40YHRgtC+0L/QsNC0X9Cz0YDRg9C00LXQvdGMJy5zcGxpdCgnXycpXG4gICAgfSxcbiAgICBtb250aHNTaG9ydCA6ICfRgdGW0Ydf0LvRjtGCX9Cx0LXRgF/QutCy0ZbRgl/RgtGA0LDQsl/Rh9C10YDQsl/Qu9C40L9f0YHQtdGA0L9f0LLQtdGAX9C20L7QstGCX9C70LjRgdGCX9Cz0YDRg9C0Jy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzIDogd2Vla2RheXNDYXNlUmVwbGFjZSxcbiAgICB3ZWVrZGF5c1Nob3J0IDogJ9C90LRf0L/QvV/QstGCX9GB0YBf0YfRgl/Qv9GCX9GB0LEnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNNaW4gOiAn0L3QtF/Qv9C9X9Cy0YJf0YHRgF/Rh9GCX9C/0YJf0YHQsScuc3BsaXQoJ18nKSxcbiAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICBMIDogJ0RELk1NLllZWVknLFxuICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWSDRgC4nLFxuICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkg0YAuLCBISDptbScsXG4gICAgICAgIExMTEwgOiAnZGRkZCwgRCBNTU1NIFlZWVkg0YAuLCBISDptbSdcbiAgICB9LFxuICAgIGNhbGVuZGFyIDoge1xuICAgICAgICBzYW1lRGF5OiBwcm9jZXNzSG91cnNGdW5jdGlvbignW9Ch0YzQvtCz0L7QtNC90ZYgJyksXG4gICAgICAgIG5leHREYXk6IHByb2Nlc3NIb3Vyc0Z1bmN0aW9uKCdb0JfQsNCy0YLRgNCwICcpLFxuICAgICAgICBsYXN0RGF5OiBwcm9jZXNzSG91cnNGdW5jdGlvbignW9CS0YfQvtGA0LAgJyksXG4gICAgICAgIG5leHRXZWVrOiBwcm9jZXNzSG91cnNGdW5jdGlvbignW9CjXSBkZGRkIFsnKSxcbiAgICAgICAgbGFzdFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHN3aXRjaCAodGhpcy5kYXkoKSkge1xuICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHByb2Nlc3NIb3Vyc0Z1bmN0aW9uKCdb0JzQuNC90YPQu9C+0ZddIGRkZGQgWycpLmNhbGwodGhpcyk7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwcm9jZXNzSG91cnNGdW5jdGlvbignW9Cc0LjQvdGD0LvQvtCz0L5dIGRkZGQgWycpLmNhbGwodGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHNhbWVFbHNlOiAnTCdcbiAgICB9LFxuICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgZnV0dXJlIDogJ9C30LAgJXMnLFxuICAgICAgICBwYXN0IDogJyVzINGC0L7QvNGDJyxcbiAgICAgICAgcyA6ICfQtNC10LrRltC70YzQutCwINGB0LXQutGD0L3QtCcsXG4gICAgICAgIG0gOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICBtbSA6IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgIGggOiAn0LPQvtC00LjQvdGDJyxcbiAgICAgICAgaGggOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICBkIDogJ9C00LXQvdGMJyxcbiAgICAgICAgZGQgOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICBNIDogJ9C80ZbRgdGP0YbRjCcsXG4gICAgICAgIE1NIDogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgeSA6ICfRgNGW0LonLFxuICAgICAgICB5eSA6IHJlbGF0aXZlVGltZVdpdGhQbHVyYWxcbiAgICB9LFxuICAgIC8vIE0uIEUuOiB0aG9zZSB0d28gYXJlIHZpcnR1YWxseSB1bnVzZWQgYnV0IGEgdXNlciBtaWdodCB3YW50IHRvIGltcGxlbWVudCB0aGVtIGZvciBoaXMvaGVyIHdlYnNpdGUgZm9yIHNvbWUgcmVhc29uXG4gICAgbWVyaWRpZW1QYXJzZTogL9C90L7Rh9GWfNGA0LDQvdC60YN80LTQvdGPfNCy0LXRh9C+0YDQsC8sXG4gICAgaXNQTTogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgIHJldHVybiAvXijQtNC90Y980LLQtdGH0L7RgNCwKSQvLnRlc3QoaW5wdXQpO1xuICAgIH0sXG4gICAgbWVyaWRpZW0gOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgIGlmIChob3VyIDwgNCkge1xuICAgICAgICAgICAgcmV0dXJuICfQvdC+0YfRlic7XG4gICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDEyKSB7XG4gICAgICAgICAgICByZXR1cm4gJ9GA0LDQvdC60YMnO1xuICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxNykge1xuICAgICAgICAgICAgcmV0dXJuICfQtNC90Y8nO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuICfQstC10YfQvtGA0LAnO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0tKNC5fNCz0L4pLyxcbiAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnVtYmVyLCBwZXJpb2QpIHtcbiAgICAgICAgc3dpdGNoIChwZXJpb2QpIHtcbiAgICAgICAgICAgIGNhc2UgJ00nOlxuICAgICAgICAgICAgY2FzZSAnZCc6XG4gICAgICAgICAgICBjYXNlICdEREQnOlxuICAgICAgICAgICAgY2FzZSAndyc6XG4gICAgICAgICAgICBjYXNlICdXJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJy3QuSc7XG4gICAgICAgICAgICBjYXNlICdEJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJy3Qs9C+JztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgd2VlayA6IHtcbiAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgIGRveSA6IDcgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDFzdCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICB9XG59KTtcblxucmV0dXJuIHVrO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IFVyZHUgW3VyXVxuLy8hIGF1dGhvciA6IFNhd29vZCBBbGFtIDogaHR0cHM6Ly9naXRodWIuY29tL2libmVzYXllZWRcbi8vISBhdXRob3IgOiBaYWNrIDogaHR0cHM6Ly9naXRodWIuY29tL1phY2tWaXNpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG52YXIgbW9udGhzID0gW1xuICAgICfYrNmG2YjYsduMJyxcbiAgICAn2YHYsdmI2LHbjCcsXG4gICAgJ9mF2KfYsdqGJyxcbiAgICAn2KfZvtix24zZhCcsXG4gICAgJ9mF2KbbjCcsXG4gICAgJ9is2YjZhicsXG4gICAgJ9is2YjZhNin2KbbjCcsXG4gICAgJ9in2q/Ys9iqJyxcbiAgICAn2LPYqtmF2KjYsScsXG4gICAgJ9in2qnYqtmI2KjYsScsXG4gICAgJ9mG2YjZhdio2LEnLFxuICAgICfYr9iz2YXYqNixJ1xuXTtcbnZhciBkYXlzID0gW1xuICAgICfYp9iq2YjYp9ixJyxcbiAgICAn2b7bjNixJyxcbiAgICAn2YXZhtqv2YQnLFxuICAgICfYqNiv2r4nLFxuICAgICfYrNmF2LnYsdin2KonLFxuICAgICfYrNmF2LnbgScsXG4gICAgJ9uB2YHYqtuBJ1xuXTtcblxudmFyIHVyID0gbW9tZW50LmRlZmluZUxvY2FsZSgndXInLCB7XG4gICAgbW9udGhzIDogbW9udGhzLFxuICAgIG1vbnRoc1Nob3J0IDogbW9udGhzLFxuICAgIHdlZWtkYXlzIDogZGF5cyxcbiAgICB3ZWVrZGF5c1Nob3J0IDogZGF5cyxcbiAgICB3ZWVrZGF5c01pbiA6IGRheXMsXG4gICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICBMTExMIDogJ2RkZGTYjCBEIE1NTU0gWVlZWSBISDptbSdcbiAgICB9LFxuICAgIG1lcmlkaWVtUGFyc2U6IC/Ytdio2K182LTYp9mFLyxcbiAgICBpc1BNIDogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgIHJldHVybiAn2LTYp9mFJyA9PT0gaW5wdXQ7XG4gICAgfSxcbiAgICBtZXJpZGllbSA6IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgaWYgKGhvdXIgPCAxMikge1xuICAgICAgICAgICAgcmV0dXJuICfYtdio2K0nO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAn2LTYp9mFJztcbiAgICB9LFxuICAgIGNhbGVuZGFyIDoge1xuICAgICAgICBzYW1lRGF5IDogJ1vYotisINio2YjZgtiqXSBMVCcsXG4gICAgICAgIG5leHREYXkgOiAnW9qp2YQg2KjZiNmC2KpdIExUJyxcbiAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCBb2KjZiNmC2KpdIExUJyxcbiAgICAgICAgbGFzdERheSA6ICdb2q/YsNi02KrbgSDYsdmI2LIg2KjZiNmC2KpdIExUJyxcbiAgICAgICAgbGFzdFdlZWsgOiAnW9qv2LDYtNiq24FdIGRkZGQgW9io2YjZgtiqXSBMVCcsXG4gICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgfSxcbiAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgIGZ1dHVyZSA6ICclcyDYqNi52K8nLFxuICAgICAgICBwYXN0IDogJyVzINmC2KjZhCcsXG4gICAgICAgIHMgOiAn2obZhtivINiz24zaqdmG2ognLFxuICAgICAgICBtIDogJ9in24zaqSDZhdmG2bknLFxuICAgICAgICBtbSA6ICclZCDZhdmG2bknLFxuICAgICAgICBoIDogJ9in24zaqSDar9q+2YbZuduBJyxcbiAgICAgICAgaGggOiAnJWQg2q/avtmG2bnbkicsXG4gICAgICAgIGQgOiAn2KfbjNqpINiv2YYnLFxuICAgICAgICBkZCA6ICclZCDYr9mGJyxcbiAgICAgICAgTSA6ICfYp9uM2qkg2YXYp9uBJyxcbiAgICAgICAgTU0gOiAnJWQg2YXYp9uBJyxcbiAgICAgICAgeSA6ICfYp9uM2qkg2LPYp9mEJyxcbiAgICAgICAgeXkgOiAnJWQg2LPYp9mEJ1xuICAgIH0sXG4gICAgcHJlcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC/YjC9nLCAnLCcpO1xuICAgIH0sXG4gICAgcG9zdGZvcm1hdDogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoLywvZywgJ9iMJyk7XG4gICAgfSxcbiAgICB3ZWVrIDoge1xuICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgZG95IDogNCAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgIH1cbn0pO1xuXG5yZXR1cm4gdXI7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogVXpiZWsgW3V6XVxuLy8hIGF1dGhvciA6IFNhcmRvciBNdW1pbm92IDogaHR0cHM6Ly9naXRodWIuY29tL211bWlub2ZmXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxudmFyIHV6ID0gbW9tZW50LmRlZmluZUxvY2FsZSgndXonLCB7XG4gICAgbW9udGhzIDogJ9GP0L3QstCw0YBf0YTQtdCy0YDQsNC7X9C80LDRgNGCX9Cw0L/RgNC10Ltf0LzQsNC5X9C40Y7QvV/QuNGO0Ltf0LDQstCz0YPRgdGCX9GB0LXQvdGC0Y/QsdGAX9C+0LrRgtGP0LHRgF/QvdC+0Y/QsdGAX9C00LXQutCw0LHRgCcuc3BsaXQoJ18nKSxcbiAgICBtb250aHNTaG9ydCA6ICfRj9C90LJf0YTQtdCyX9C80LDRgF/QsNC/0YBf0LzQsNC5X9C40Y7QvV/QuNGO0Ltf0LDQstCzX9GB0LXQvV/QvtC60YJf0L3QvtGPX9C00LXQuicuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5cyA6ICfQr9C60YjQsNC90LHQsF/QlNGD0YjQsNC90LHQsF/QodC10YjQsNC90LHQsF/Qp9C+0YDRiNCw0L3QsdCwX9Cf0LDQudGI0LDQvdCx0LBf0JbRg9C80LBf0KjQsNC90LHQsCcuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1Nob3J0IDogJ9Cv0LrRiF/QlNGD0Yhf0KHQtdGIX9Cn0L7RgF/Qn9Cw0Llf0JbRg9C8X9Co0LDQvScuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c01pbiA6ICfQr9C6X9CU0YNf0KHQtV/Qp9C+X9Cf0LBf0JbRg1/QqNCwJy5zcGxpdCgnXycpLFxuICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgTExMTCA6ICdEIE1NTU0gWVlZWSwgZGRkZCBISDptbSdcbiAgICB9LFxuICAgIGNhbGVuZGFyIDoge1xuICAgICAgICBzYW1lRGF5IDogJ1vQkdGD0LPRg9C9INGB0L7QsNGCXSBMVCBb0LTQsF0nLFxuICAgICAgICBuZXh0RGF5IDogJ1vQrdGA0YLQsNCz0LBdIExUIFvQtNCwXScsXG4gICAgICAgIG5leHRXZWVrIDogJ2RkZGQgW9C60YPQvdC4INGB0L7QsNGCXSBMVCBb0LTQsF0nLFxuICAgICAgICBsYXN0RGF5IDogJ1vQmtC10YfQsCDRgdC+0LDRgl0gTFQgW9C00LBdJyxcbiAgICAgICAgbGFzdFdlZWsgOiAnW9Cj0YLQs9Cw0L1dIGRkZGQgW9C60YPQvdC4INGB0L7QsNGCXSBMVCBb0LTQsF0nLFxuICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgIH0sXG4gICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICBmdXR1cmUgOiAn0K/QutC40L0gJXMg0LjRh9C40LTQsCcsXG4gICAgICAgIHBhc3QgOiAn0JHQuNGAINC90LXRh9CwICVzINC+0LvQtNC40L0nLFxuICAgICAgICBzIDogJ9GE0YPRgNGB0LDRgicsXG4gICAgICAgIG0gOiAn0LHQuNGAINC00LDQutC40LrQsCcsXG4gICAgICAgIG1tIDogJyVkINC00LDQutC40LrQsCcsXG4gICAgICAgIGggOiAn0LHQuNGAINGB0L7QsNGCJyxcbiAgICAgICAgaGggOiAnJWQg0YHQvtCw0YInLFxuICAgICAgICBkIDogJ9Cx0LjRgCDQutGD0L0nLFxuICAgICAgICBkZCA6ICclZCDQutGD0L0nLFxuICAgICAgICBNIDogJ9Cx0LjRgCDQvtC5JyxcbiAgICAgICAgTU0gOiAnJWQg0L7QuScsXG4gICAgICAgIHkgOiAn0LHQuNGAINC50LjQuycsXG4gICAgICAgIHl5IDogJyVkINC50LjQuydcbiAgICB9LFxuICAgIHdlZWsgOiB7XG4gICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICBkb3kgOiA3ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgfVxufSk7XG5cbnJldHVybiB1ejtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBVemJlayBMYXRpbiBbdXotbGF0bl1cbi8vISBhdXRob3IgOiBSYXN1bGJlayBNaXJ6YXlldiA6IGdpdGh1Yi5jb20vUmFzdWxiZWVla1xuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciB1ekxhdG4gPSBtb21lbnQuZGVmaW5lTG9jYWxlKCd1ei1sYXRuJywge1xuICAgIG1vbnRocyA6ICdZYW52YXJfRmV2cmFsX01hcnRfQXByZWxfTWF5X0l5dW5fSXl1bF9Bdmd1c3RfU2VudGFicl9Pa3RhYnJfTm95YWJyX0Rla2Ficicuc3BsaXQoJ18nKSxcbiAgICBtb250aHNTaG9ydCA6ICdZYW5fRmV2X01hcl9BcHJfTWF5X0l5dW5fSXl1bF9BdmdfU2VuX09rdF9Ob3lfRGVrJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzIDogJ1lha3NoYW5iYV9EdXNoYW5iYV9TZXNoYW5iYV9DaG9yc2hhbmJhX1BheXNoYW5iYV9KdW1hX1NoYW5iYScuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1Nob3J0IDogJ1lha19EdXNoX1Nlc2hfQ2hvcl9QYXlfSnVtX1NoYW4nLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNNaW4gOiAnWWFfRHVfU2VfQ2hvX1BhX0p1X1NoYScuc3BsaXQoJ18nKSxcbiAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIExMTEwgOiAnRCBNTU1NIFlZWVksIGRkZGQgSEg6bW0nXG4gICAgfSxcbiAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgc2FtZURheSA6ICdbQnVndW4gc29hdF0gTFQgW2RhXScsXG4gICAgICAgIG5leHREYXkgOiAnW0VydGFnYV0gTFQgW2RhXScsXG4gICAgICAgIG5leHRXZWVrIDogJ2RkZGQgW2t1bmkgc29hdF0gTFQgW2RhXScsXG4gICAgICAgIGxhc3REYXkgOiAnW0tlY2hhIHNvYXRdIExUIFtkYV0nLFxuICAgICAgICBsYXN0V2VlayA6ICdbT1xcJ3RnYW5dIGRkZGQgW2t1bmkgc29hdF0gTFQgW2RhXScsXG4gICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgfSxcbiAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgIGZ1dHVyZSA6ICdZYXFpbiAlcyBpY2hpZGEnLFxuICAgICAgICBwYXN0IDogJ0JpciBuZWNoYSAlcyBvbGRpbicsXG4gICAgICAgIHMgOiAnc29uaXlhJyxcbiAgICAgICAgbSA6ICdiaXIgZGFxaXFhJyxcbiAgICAgICAgbW0gOiAnJWQgZGFxaXFhJyxcbiAgICAgICAgaCA6ICdiaXIgc29hdCcsXG4gICAgICAgIGhoIDogJyVkIHNvYXQnLFxuICAgICAgICBkIDogJ2JpciBrdW4nLFxuICAgICAgICBkZCA6ICclZCBrdW4nLFxuICAgICAgICBNIDogJ2JpciBveScsXG4gICAgICAgIE1NIDogJyVkIG95JyxcbiAgICAgICAgeSA6ICdiaXIgeWlsJyxcbiAgICAgICAgeXkgOiAnJWQgeWlsJ1xuICAgIH0sXG4gICAgd2VlayA6IHtcbiAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgIGRveSA6IDcgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDFzdCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICB9XG59KTtcblxucmV0dXJuIHV6TGF0bjtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBWaWV0bmFtZXNlIFt2aV1cbi8vISBhdXRob3IgOiBCYW5nIE5ndXllbiA6IGh0dHBzOi8vZ2l0aHViLmNvbS9iYW5nbmtcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG52YXIgdmkgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCd2aScsIHtcbiAgICBtb250aHMgOiAndGjDoW5nIDFfdGjDoW5nIDJfdGjDoW5nIDNfdGjDoW5nIDRfdGjDoW5nIDVfdGjDoW5nIDZfdGjDoW5nIDdfdGjDoW5nIDhfdGjDoW5nIDlfdGjDoW5nIDEwX3Row6FuZyAxMV90aMOhbmcgMTInLnNwbGl0KCdfJyksXG4gICAgbW9udGhzU2hvcnQgOiAnVGgwMV9UaDAyX1RoMDNfVGgwNF9UaDA1X1RoMDZfVGgwN19UaDA4X1RoMDlfVGgxMF9UaDExX1RoMTInLnNwbGl0KCdfJyksXG4gICAgbW9udGhzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgd2Vla2RheXMgOiAnY2jhu6cgbmjhuq10X3Ro4bupIGhhaV90aOG7qSBiYV90aOG7qSB0xrBfdGjhu6kgbsSDbV90aOG7qSBzw6F1X3Ro4bupIGLhuqN5Jy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzU2hvcnQgOiAnQ05fVDJfVDNfVDRfVDVfVDZfVDcnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNNaW4gOiAnQ05fVDJfVDNfVDRfVDVfVDZfVDcnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICBtZXJpZGllbVBhcnNlOiAvc2F8Y2gvaSxcbiAgICBpc1BNIDogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgIHJldHVybiAvXmNoJC9pLnRlc3QoaW5wdXQpO1xuICAgIH0sXG4gICAgbWVyaWRpZW0gOiBmdW5jdGlvbiAoaG91cnMsIG1pbnV0ZXMsIGlzTG93ZXIpIHtcbiAgICAgICAgaWYgKGhvdXJzIDwgMTIpIHtcbiAgICAgICAgICAgIHJldHVybiBpc0xvd2VyID8gJ3NhJyA6ICdTQSc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gaXNMb3dlciA/ICdjaCcgOiAnQ0gnO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICBMTCA6ICdEIE1NTU0gW27Eg21dIFlZWVknLFxuICAgICAgICBMTEwgOiAnRCBNTU1NIFtuxINtXSBZWVlZIEhIOm1tJyxcbiAgICAgICAgTExMTCA6ICdkZGRkLCBEIE1NTU0gW27Eg21dIFlZWVkgSEg6bW0nLFxuICAgICAgICBsIDogJ0REL00vWVlZWScsXG4gICAgICAgIGxsIDogJ0QgTU1NIFlZWVknLFxuICAgICAgICBsbGwgOiAnRCBNTU0gWVlZWSBISDptbScsXG4gICAgICAgIGxsbGwgOiAnZGRkLCBEIE1NTSBZWVlZIEhIOm1tJ1xuICAgIH0sXG4gICAgY2FsZW5kYXIgOiB7XG4gICAgICAgIHNhbWVEYXk6ICdbSMO0bSBuYXkgbMO6Y10gTFQnLFxuICAgICAgICBuZXh0RGF5OiAnW05nw6B5IG1haSBsw7pjXSBMVCcsXG4gICAgICAgIG5leHRXZWVrOiAnZGRkZCBbdHXhuqduIHThu5tpIGzDumNdIExUJyxcbiAgICAgICAgbGFzdERheTogJ1tIw7RtIHF1YSBsw7pjXSBMVCcsXG4gICAgICAgIGxhc3RXZWVrOiAnZGRkZCBbdHXhuqduIHLhu5NpIGzDumNdIExUJyxcbiAgICAgICAgc2FtZUVsc2U6ICdMJ1xuICAgIH0sXG4gICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICBmdXR1cmUgOiAnJXMgdOG7m2knLFxuICAgICAgICBwYXN0IDogJyVzIHRyxrDhu5tjJyxcbiAgICAgICAgcyA6ICd2w6BpIGdpw6J5JyxcbiAgICAgICAgbSA6ICdt4buZdCBwaMO6dCcsXG4gICAgICAgIG1tIDogJyVkIHBow7p0JyxcbiAgICAgICAgaCA6ICdt4buZdCBnaeG7nScsXG4gICAgICAgIGhoIDogJyVkIGdp4budJyxcbiAgICAgICAgZCA6ICdt4buZdCBuZ8OgeScsXG4gICAgICAgIGRkIDogJyVkIG5nw6B5JyxcbiAgICAgICAgTSA6ICdt4buZdCB0aMOhbmcnLFxuICAgICAgICBNTSA6ICclZCB0aMOhbmcnLFxuICAgICAgICB5IDogJ23hu5l0IG7Eg20nLFxuICAgICAgICB5eSA6ICclZCBuxINtJ1xuICAgIH0sXG4gICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9LyxcbiAgICBvcmRpbmFsIDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICByZXR1cm4gbnVtYmVyO1xuICAgIH0sXG4gICAgd2VlayA6IHtcbiAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICB9XG59KTtcblxucmV0dXJuIHZpO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IFBzZXVkbyBbeC1wc2V1ZG9dXG4vLyEgYXV0aG9yIDogQW5kcmV3IEhvb2QgOiBodHRwczovL2dpdGh1Yi5jb20vYW5kcmV3aG9vZDEyNVxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciB4UHNldWRvID0gbW9tZW50LmRlZmluZUxvY2FsZSgneC1wc2V1ZG8nLCB7XG4gICAgbW9udGhzIDogJ0p+w6HDscO6w6F+csO9X0Z+w6licsO6fsOhcsO9X35Nw6FyY35oX8OBcH5yw61sX35Nw6HDvV9+SsO6w7HDqX5fSsO6bH7DvV/DgcO6fmfDunN0fl9Tw6lwfnTDqW1ifsOpcl/Dk35jdMOzYn7DqXJfw5F+w7N2w6ltfmLDqXJffkTDqWPDqX5tYsOpcicuc3BsaXQoJ18nKSxcbiAgICBtb250aHNTaG9ydCA6ICdKfsOhw7FffkbDqWJffk3DoXJffsOBcHJffk3DocO9X35Kw7rDsV9+SsO6bF9+w4HDumdfflPDqXBffsOTY3RffsORw7N2X35Ew6ljJy5zcGxpdCgnXycpLFxuICAgIG1vbnRoc1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgIHdlZWtkYXlzIDogJ1N+w7rDsWTDoX7DvV9Nw7N+w7Fkw6HDvX5fVMO6w6l+c2TDocO9fl9Xw6lkfsOxw6lzZH7DocO9X1R+aMO6cnN+ZMOhw71ffkZyw61kfsOhw71fU37DoXTDunJ+ZMOhw70nLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNTaG9ydCA6ICdTfsO6w7Fffk3Ds8OxX35Uw7rDqV9+V8OpZF9+VGjDul9+RnLDrV9+U8OhdCcuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c01pbiA6ICdTfsO6X03Ds35fVMO6X35Xw6lfVH5oX0Zyfl9Tw6EnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIExMTEwgOiAnZGRkZCwgRCBNTU1NIFlZWVkgSEg6bW0nXG4gICAgfSxcbiAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgc2FtZURheSA6ICdbVH7Ds2TDoX7DvSDDoXRdIExUJyxcbiAgICAgICAgbmV4dERheSA6ICdbVH7Ds23Ds35ycsOzfncgw6F0XSBMVCcsXG4gICAgICAgIG5leHRXZWVrIDogJ2RkZGQgW8OhdF0gTFQnLFxuICAgICAgICBsYXN0RGF5IDogJ1vDnX7DqXN0fsOpcmTDoX7DvSDDoXRdIExUJyxcbiAgICAgICAgbGFzdFdlZWsgOiAnW0x+w6FzdF0gZGRkZCBbw6F0XSBMVCcsXG4gICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgfSxcbiAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgIGZ1dHVyZSA6ICfDrX7DsSAlcycsXG4gICAgICAgIHBhc3QgOiAnJXMgw6F+Z8OzJyxcbiAgICAgICAgcyA6ICfDoSB+ZsOpdyB+c8OpY8OzfsOxZHMnLFxuICAgICAgICBtIDogJ8OhIH5tw63DsX7DunTDqScsXG4gICAgICAgIG1tIDogJyVkIG1+w63DscO6fnTDqXMnLFxuICAgICAgICBoIDogJ8OhfsOxIGjDs37DunInLFxuICAgICAgICBoaCA6ICclZCBofsOzw7pycycsXG4gICAgICAgIGQgOiAnw6EgfmTDocO9JyxcbiAgICAgICAgZGQgOiAnJWQgZH7DocO9cycsXG4gICAgICAgIE0gOiAnw6Egfm3Ds8OxfnRoJyxcbiAgICAgICAgTU0gOiAnJWQgbX7Ds8OxdH5ocycsXG4gICAgICAgIHkgOiAnw6EgfsO9w6nDoXInLFxuICAgICAgICB5eSA6ICclZCDDvX7DqcOhcnMnXG4gICAgfSxcbiAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0odGh8c3R8bmR8cmQpLyxcbiAgICBvcmRpbmFsIDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICB2YXIgYiA9IG51bWJlciAlIDEwLFxuICAgICAgICAgICAgb3V0cHV0ID0gKH5+KG51bWJlciAlIDEwMCAvIDEwKSA9PT0gMSkgPyAndGgnIDpcbiAgICAgICAgICAgIChiID09PSAxKSA/ICdzdCcgOlxuICAgICAgICAgICAgKGIgPT09IDIpID8gJ25kJyA6XG4gICAgICAgICAgICAoYiA9PT0gMykgPyAncmQnIDogJ3RoJztcbiAgICAgICAgcmV0dXJuIG51bWJlciArIG91dHB1dDtcbiAgICB9LFxuICAgIHdlZWsgOiB7XG4gICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgfVxufSk7XG5cbnJldHVybiB4UHNldWRvO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IFlvcnViYSBOaWdlcmlhIFt5b11cbi8vISBhdXRob3IgOiBBdG9sYWdiZSBBYmlzb3llIDogaHR0cHM6Ly9naXRodWIuY29tL2FuZGVsYS1iYXRvbGFnYmVcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG52YXIgeW8gPSBtb21lbnQuZGVmaW5lTG9jYWxlKCd5bycsIHtcbiAgICBtb250aHMgOiAnU+G6ucyBcuG6ucyBX0XMgHJlzIBsZcyAX+G6uHLhurnMgG5hzIBfScyAZ2JlzIFfRcyAYmliaV9PzIBrdcyAZHVfQWfhurltb19PzIBndcyBbl9Pd2V3ZV/hu4zMgHdhzIByYcyAX0JlzIFsdcyBX+G7jMyAcOG6ucyAzIAnLnNwbGl0KCdfJyksXG4gICAgbW9udGhzU2hvcnQgOiAnU+G6ucyBcl9FzIBybF/hurhybl9JzIBnYl9FzIBiaV9PzIBrdcyAX0Fn4bq5X0/MgGd1zIFfT3dlX+G7jMyAd2HMgF9CZcyBbF/hu4zMgHDhurnMgMyAJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzIDogJ0HMgGnMgGt1zIFfQWplzIFfScyAc+G6ucyBZ3VuX+G7jGrhu43MgXJ1zIFf4buMauG7jcyBYuG7jV/hurh0acyAX0HMgGJhzIFt4bq5zIF0YScuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1Nob3J0IDogJ0HMgGnMgGtfQWplzIFfScyAc+G6ucyBX+G7jGpyX+G7jGpiX+G6uHRpzIBfQcyAYmHMgScuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c01pbiA6ICdBzIBpzIBfQWpfScyAc1/hu4xyX+G7jGJf4bq4dF9BzIBiJy5zcGxpdCgnXycpLFxuICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICBMVCA6ICdoOm1tIEEnLFxuICAgICAgICBMVFMgOiAnaDptbTpzcyBBJyxcbiAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgaDptbSBBJyxcbiAgICAgICAgTExMTCA6ICdkZGRkLCBEIE1NTU0gWVlZWSBoOm1tIEEnXG4gICAgfSxcbiAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgc2FtZURheSA6ICdbT8yAbmnMgCBuaV0gTFQnLFxuICAgICAgICBuZXh0RGF5IDogJ1vhu4zMgGxhIG5pXSBMVCcsXG4gICAgICAgIG5leHRXZWVrIDogJ2RkZGQgW+G7jHPhurnMgCB0b8yBblxcJ2Lhu41dIFtuaV0gTFQnLFxuICAgICAgICBsYXN0RGF5IDogJ1tBzIBuYSBuaV0gTFQnLFxuICAgICAgICBsYXN0V2VlayA6ICdkZGRkIFvhu4xz4bq5zIAgdG/MgWzhu43MgV0gW25pXSBMVCcsXG4gICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgfSxcbiAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgIGZ1dHVyZSA6ICduacyBICVzJyxcbiAgICAgICAgcGFzdCA6ICclcyBr4buNamHMgScsXG4gICAgICAgIHMgOiAnacyAc+G6uWp1zIEgYWF5YcyBIGRpZScsXG4gICAgICAgIG0gOiAnacyAc+G6uWp1zIEga2FuJyxcbiAgICAgICAgbW0gOiAnacyAc+G6uWp1zIEgJWQnLFxuICAgICAgICBoIDogJ3dhzIFrYXRpIGthbicsXG4gICAgICAgIGhoIDogJ3dhzIFrYXRpICVkJyxcbiAgICAgICAgZCA6ICfhu41q4buNzIEga2FuJyxcbiAgICAgICAgZGQgOiAn4buNauG7jcyBICVkJyxcbiAgICAgICAgTSA6ICdvc3XMgCBrYW4nLFxuICAgICAgICBNTSA6ICdvc3XMgCAlZCcsXG4gICAgICAgIHkgOiAn4buNZHXMgW4ga2FuJyxcbiAgICAgICAgeXkgOiAn4buNZHXMgW4gJWQnXG4gICAgfSxcbiAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlIDogL+G7jWrhu43MgVxcc1xcZHsxLDJ9LyxcbiAgICBvcmRpbmFsIDogJ+G7jWrhu43MgSAlZCcsXG4gICAgd2VlayA6IHtcbiAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgIGRveSA6IDQgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgIH1cbn0pO1xuXG5yZXR1cm4geW87XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogQ2hpbmVzZSAoQ2hpbmEpIFt6aC1jbl1cbi8vISBhdXRob3IgOiBzdXVwaWMgOiBodHRwczovL2dpdGh1Yi5jb20vc3V1cGljXG4vLyEgYXV0aG9yIDogWmVubyBaZW5nIDogaHR0cHM6Ly9naXRodWIuY29tL3plbm96ZW5nXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxudmFyIHpoQ24gPSBtb21lbnQuZGVmaW5lTG9jYWxlKCd6aC1jbicsIHtcbiAgICBtb250aHMgOiAn5LiA5pyIX+S6jOaciF/kuInmnIhf5Zub5pyIX+S6lOaciF/lha3mnIhf5LiD5pyIX+WFq+aciF/kuZ3mnIhf5Y2B5pyIX+WNgeS4gOaciF/ljYHkuozmnIgnLnNwbGl0KCdfJyksXG4gICAgbW9udGhzU2hvcnQgOiAnMeaciF8y5pyIXzPmnIhfNOaciF815pyIXzbmnIhfN+aciF845pyIXznmnIhfMTDmnIhfMTHmnIhfMTLmnIgnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXMgOiAn5pif5pyf5pelX+aYn+acn+S4gF/mmJ/mnJ/kuoxf5pif5pyf5LiJX+aYn+acn+Wbm1/mmJ/mnJ/kupRf5pif5pyf5YWtJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzU2hvcnQgOiAn5ZGo5pelX+WRqOS4gF/lkajkuoxf5ZGo5LiJX+WRqOWbm1/lkajkupRf5ZGo5YWtJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzTWluIDogJ+aXpV/kuIBf5LqMX+S4iV/lm5tf5LqUX+WFrScuc3BsaXQoJ18nKSxcbiAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICBMIDogJ1lZWVnlubRNTU1E5pelJyxcbiAgICAgICAgTEwgOiAnWVlZWeW5tE1NTUTml6UnLFxuICAgICAgICBMTEwgOiAnWVlZWeW5tE1NTUTml6VBaOeCuW1t5YiGJyxcbiAgICAgICAgTExMTCA6ICdZWVlZ5bm0TU1NROaXpWRkZGRBaOeCuW1t5YiGJyxcbiAgICAgICAgbCA6ICdZWVlZ5bm0TU1NROaXpScsXG4gICAgICAgIGxsIDogJ1lZWVnlubRNTU1E5pelJyxcbiAgICAgICAgbGxsIDogJ1lZWVnlubRNTU1E5pelIEhIOm1tJyxcbiAgICAgICAgbGxsbCA6ICdZWVlZ5bm0TU1NROaXpWRkZGQgSEg6bW0nXG4gICAgfSxcbiAgICBtZXJpZGllbVBhcnNlOiAv5YeM5pmofOaXqeS4inzkuIrljYh85Lit5Y2IfOS4i+WNiHzmmZrkuIovLFxuICAgIG1lcmlkaWVtSG91cjogZnVuY3Rpb24gKGhvdXIsIG1lcmlkaWVtKSB7XG4gICAgICAgIGlmIChob3VyID09PSAxMikge1xuICAgICAgICAgICAgaG91ciA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lcmlkaWVtID09PSAn5YeM5pmoJyB8fCBtZXJpZGllbSA9PT0gJ+aXqeS4iicgfHxcbiAgICAgICAgICAgICAgICBtZXJpZGllbSA9PT0gJ+S4iuWNiCcpIHtcbiAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn5LiL5Y2IJyB8fCBtZXJpZGllbSA9PT0gJ+aZmuS4iicpIHtcbiAgICAgICAgICAgIHJldHVybiBob3VyICsgMTI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyAn5Lit5Y2IJ1xuICAgICAgICAgICAgcmV0dXJuIGhvdXIgPj0gMTEgPyBob3VyIDogaG91ciArIDEyO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBtZXJpZGllbSA6IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgdmFyIGhtID0gaG91ciAqIDEwMCArIG1pbnV0ZTtcbiAgICAgICAgaWYgKGhtIDwgNjAwKSB7XG4gICAgICAgICAgICByZXR1cm4gJ+WHjOaZqCc7XG4gICAgICAgIH0gZWxzZSBpZiAoaG0gPCA5MDApIHtcbiAgICAgICAgICAgIHJldHVybiAn5pep5LiKJztcbiAgICAgICAgfSBlbHNlIGlmIChobSA8IDExMzApIHtcbiAgICAgICAgICAgIHJldHVybiAn5LiK5Y2IJztcbiAgICAgICAgfSBlbHNlIGlmIChobSA8IDEyMzApIHtcbiAgICAgICAgICAgIHJldHVybiAn5Lit5Y2IJztcbiAgICAgICAgfSBlbHNlIGlmIChobSA8IDE4MDApIHtcbiAgICAgICAgICAgIHJldHVybiAn5LiL5Y2IJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAn5pma5LiKJztcbiAgICAgICAgfVxuICAgIH0sXG4gICAgY2FsZW5kYXIgOiB7XG4gICAgICAgIHNhbWVEYXkgOiAnW+S7iuWkqV1MVCcsXG4gICAgICAgIG5leHREYXkgOiAnW+aYjuWkqV1MVCcsXG4gICAgICAgIG5leHRXZWVrIDogJ1vkuItdZGRkZExUJyxcbiAgICAgICAgbGFzdERheSA6ICdb5pio5aSpXUxUJyxcbiAgICAgICAgbGFzdFdlZWsgOiAnW+S4il1kZGRkTFQnLFxuICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgIH0sXG4gICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9KOaXpXzmnIh85ZGoKS8sXG4gICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIsIHBlcmlvZCkge1xuICAgICAgICBzd2l0Y2ggKHBlcmlvZCkge1xuICAgICAgICAgICAgY2FzZSAnZCc6XG4gICAgICAgICAgICBjYXNlICdEJzpcbiAgICAgICAgICAgIGNhc2UgJ0RERCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICfml6UnO1xuICAgICAgICAgICAgY2FzZSAnTSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICfmnIgnO1xuICAgICAgICAgICAgY2FzZSAndyc6XG4gICAgICAgICAgICBjYXNlICdXJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJ+WRqCc7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXI7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgZnV0dXJlIDogJyVz5YaFJyxcbiAgICAgICAgcGFzdCA6ICclc+WJjScsXG4gICAgICAgIHMgOiAn5Yeg56eSJyxcbiAgICAgICAgbSA6ICcxIOWIhumSnycsXG4gICAgICAgIG1tIDogJyVkIOWIhumSnycsXG4gICAgICAgIGggOiAnMSDlsI/ml7YnLFxuICAgICAgICBoaCA6ICclZCDlsI/ml7YnLFxuICAgICAgICBkIDogJzEg5aSpJyxcbiAgICAgICAgZGQgOiAnJWQg5aSpJyxcbiAgICAgICAgTSA6ICcxIOS4quaciCcsXG4gICAgICAgIE1NIDogJyVkIOS4quaciCcsXG4gICAgICAgIHkgOiAnMSDlubQnLFxuICAgICAgICB5eSA6ICclZCDlubQnXG4gICAgfSxcbiAgICB3ZWVrIDoge1xuICAgICAgICAvLyBHQi9UIDc0MDgtMTk5NOOAiuaVsOaNruWFg+WSjOS6pOaNouagvOW8j8K35L+h5oGv5Lqk5o2iwrfml6XmnJ/lkozml7bpl7TooajnpLrms5XjgIvkuI5JU08gODYwMToxOTg4562J5pWIXG4gICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgfVxufSk7XG5cbnJldHVybiB6aENuO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IENoaW5lc2UgKEhvbmcgS29uZykgW3poLWhrXVxuLy8hIGF1dGhvciA6IEJlbiA6IGh0dHBzOi8vZ2l0aHViLmNvbS9iZW4tbGluXG4vLyEgYXV0aG9yIDogQ2hyaXMgTGFtIDogaHR0cHM6Ly9naXRodWIuY29tL2hlaGFjaHJpc1xuLy8hIGF1dGhvciA6IEtvbnN0YW50aW4gOiBodHRwczovL2dpdGh1Yi5jb20vc2tmZFxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciB6aEhrID0gbW9tZW50LmRlZmluZUxvY2FsZSgnemgtaGsnLCB7XG4gICAgbW9udGhzIDogJ+S4gOaciF/kuozmnIhf5LiJ5pyIX+Wbm+aciF/kupTmnIhf5YWt5pyIX+S4g+aciF/lhavmnIhf5Lmd5pyIX+WNgeaciF/ljYHkuIDmnIhf5Y2B5LqM5pyIJy5zcGxpdCgnXycpLFxuICAgIG1vbnRoc1Nob3J0IDogJzHmnIhfMuaciF8z5pyIXzTmnIhfNeaciF825pyIXzfmnIhfOOaciF855pyIXzEw5pyIXzEx5pyIXzEy5pyIJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzIDogJ+aYn+acn+aXpV/mmJ/mnJ/kuIBf5pif5pyf5LqMX+aYn+acn+S4iV/mmJ/mnJ/lm5tf5pif5pyf5LqUX+aYn+acn+WFrScuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1Nob3J0IDogJ+mAseaXpV/pgLHkuIBf6YCx5LqMX+mAseS4iV/pgLHlm5tf6YCx5LqUX+mAseWFrScuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c01pbiA6ICfml6Vf5LiAX+S6jF/kuIlf5ZubX+S6lF/lha0nLnNwbGl0KCdfJyksXG4gICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgTCA6ICdZWVlZ5bm0TU1NROaXpScsXG4gICAgICAgIExMIDogJ1lZWVnlubRNTU1E5pelJyxcbiAgICAgICAgTExMIDogJ1lZWVnlubRNTU1E5pelIEhIOm1tJyxcbiAgICAgICAgTExMTCA6ICdZWVlZ5bm0TU1NROaXpWRkZGQgSEg6bW0nLFxuICAgICAgICBsIDogJ1lZWVnlubRNTU1E5pelJyxcbiAgICAgICAgbGwgOiAnWVlZWeW5tE1NTUTml6UnLFxuICAgICAgICBsbGwgOiAnWVlZWeW5tE1NTUTml6UgSEg6bW0nLFxuICAgICAgICBsbGxsIDogJ1lZWVnlubRNTU1E5pelZGRkZCBISDptbSdcbiAgICB9LFxuICAgIG1lcmlkaWVtUGFyc2U6IC/lh4zmmah85pep5LiKfOS4iuWNiHzkuK3ljYh85LiL5Y2IfOaZmuS4ii8sXG4gICAgbWVyaWRpZW1Ib3VyIDogZnVuY3Rpb24gKGhvdXIsIG1lcmlkaWVtKSB7XG4gICAgICAgIGlmIChob3VyID09PSAxMikge1xuICAgICAgICAgICAgaG91ciA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lcmlkaWVtID09PSAn5YeM5pmoJyB8fCBtZXJpZGllbSA9PT0gJ+aXqeS4iicgfHwgbWVyaWRpZW0gPT09ICfkuIrljYgnKSB7XG4gICAgICAgICAgICByZXR1cm4gaG91cjtcbiAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ+S4reWNiCcpIHtcbiAgICAgICAgICAgIHJldHVybiBob3VyID49IDExID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ+S4i+WNiCcgfHwgbWVyaWRpZW0gPT09ICfmmZrkuIonKSB7XG4gICAgICAgICAgICByZXR1cm4gaG91ciArIDEyO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBtZXJpZGllbSA6IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgdmFyIGhtID0gaG91ciAqIDEwMCArIG1pbnV0ZTtcbiAgICAgICAgaWYgKGhtIDwgNjAwKSB7XG4gICAgICAgICAgICByZXR1cm4gJ+WHjOaZqCc7XG4gICAgICAgIH0gZWxzZSBpZiAoaG0gPCA5MDApIHtcbiAgICAgICAgICAgIHJldHVybiAn5pep5LiKJztcbiAgICAgICAgfSBlbHNlIGlmIChobSA8IDExMzApIHtcbiAgICAgICAgICAgIHJldHVybiAn5LiK5Y2IJztcbiAgICAgICAgfSBlbHNlIGlmIChobSA8IDEyMzApIHtcbiAgICAgICAgICAgIHJldHVybiAn5Lit5Y2IJztcbiAgICAgICAgfSBlbHNlIGlmIChobSA8IDE4MDApIHtcbiAgICAgICAgICAgIHJldHVybiAn5LiL5Y2IJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAn5pma5LiKJztcbiAgICAgICAgfVxuICAgIH0sXG4gICAgY2FsZW5kYXIgOiB7XG4gICAgICAgIHNhbWVEYXkgOiAnW+S7iuWkqV1MVCcsXG4gICAgICAgIG5leHREYXkgOiAnW+aYjuWkqV1MVCcsXG4gICAgICAgIG5leHRXZWVrIDogJ1vkuItdZGRkZExUJyxcbiAgICAgICAgbGFzdERheSA6ICdb5pio5aSpXUxUJyxcbiAgICAgICAgbGFzdFdlZWsgOiAnW+S4il1kZGRkTFQnLFxuICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgIH0sXG4gICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9KOaXpXzmnIh86YCxKS8sXG4gICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIsIHBlcmlvZCkge1xuICAgICAgICBzd2l0Y2ggKHBlcmlvZCkge1xuICAgICAgICAgICAgY2FzZSAnZCcgOlxuICAgICAgICAgICAgY2FzZSAnRCcgOlxuICAgICAgICAgICAgY2FzZSAnREREJyA6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICfml6UnO1xuICAgICAgICAgICAgY2FzZSAnTScgOlxuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAn5pyIJztcbiAgICAgICAgICAgIGNhc2UgJ3cnIDpcbiAgICAgICAgICAgIGNhc2UgJ1cnIDpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJ+mAsSc7XG4gICAgICAgICAgICBkZWZhdWx0IDpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyO1xuICAgICAgICB9XG4gICAgfSxcbiAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgIGZ1dHVyZSA6ICclc+WFpycsXG4gICAgICAgIHBhc3QgOiAnJXPliY0nLFxuICAgICAgICBzIDogJ+W5vuenkicsXG4gICAgICAgIG0gOiAnMSDliIbpkJgnLFxuICAgICAgICBtbSA6ICclZCDliIbpkJgnLFxuICAgICAgICBoIDogJzEg5bCP5pmCJyxcbiAgICAgICAgaGggOiAnJWQg5bCP5pmCJyxcbiAgICAgICAgZCA6ICcxIOWkqScsXG4gICAgICAgIGRkIDogJyVkIOWkqScsXG4gICAgICAgIE0gOiAnMSDlgIvmnIgnLFxuICAgICAgICBNTSA6ICclZCDlgIvmnIgnLFxuICAgICAgICB5IDogJzEg5bm0JyxcbiAgICAgICAgeXkgOiAnJWQg5bm0J1xuICAgIH1cbn0pO1xuXG5yZXR1cm4gemhIaztcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBDaGluZXNlIChUYWl3YW4pIFt6aC10d11cbi8vISBhdXRob3IgOiBCZW4gOiBodHRwczovL2dpdGh1Yi5jb20vYmVuLWxpblxuLy8hIGF1dGhvciA6IENocmlzIExhbSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9oZWhhY2hyaXNcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG52YXIgemhUdyA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3poLXR3Jywge1xuICAgIG1vbnRocyA6ICfkuIDmnIhf5LqM5pyIX+S4ieaciF/lm5vmnIhf5LqU5pyIX+WFreaciF/kuIPmnIhf5YWr5pyIX+S5neaciF/ljYHmnIhf5Y2B5LiA5pyIX+WNgeS6jOaciCcuc3BsaXQoJ18nKSxcbiAgICBtb250aHNTaG9ydCA6ICcx5pyIXzLmnIhfM+aciF805pyIXzXmnIhfNuaciF835pyIXzjmnIhfOeaciF8xMOaciF8xMeaciF8xMuaciCcuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5cyA6ICfmmJ/mnJ/ml6Vf5pif5pyf5LiAX+aYn+acn+S6jF/mmJ/mnJ/kuIlf5pif5pyf5ZubX+aYn+acn+S6lF/mmJ/mnJ/lha0nLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNTaG9ydCA6ICfpgLHml6Vf6YCx5LiAX+mAseS6jF/pgLHkuIlf6YCx5ZubX+mAseS6lF/pgLHlha0nLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNNaW4gOiAn5pelX+S4gF/kuoxf5LiJX+Wbm1/kupRf5YWtJy5zcGxpdCgnXycpLFxuICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgIEwgOiAnWVlZWeW5tE1NTUTml6UnLFxuICAgICAgICBMTCA6ICdZWVlZ5bm0TU1NROaXpScsXG4gICAgICAgIExMTCA6ICdZWVlZ5bm0TU1NROaXpSBISDptbScsXG4gICAgICAgIExMTEwgOiAnWVlZWeW5tE1NTUTml6VkZGRkIEhIOm1tJyxcbiAgICAgICAgbCA6ICdZWVlZ5bm0TU1NROaXpScsXG4gICAgICAgIGxsIDogJ1lZWVnlubRNTU1E5pelJyxcbiAgICAgICAgbGxsIDogJ1lZWVnlubRNTU1E5pelIEhIOm1tJyxcbiAgICAgICAgbGxsbCA6ICdZWVlZ5bm0TU1NROaXpWRkZGQgSEg6bW0nXG4gICAgfSxcbiAgICBtZXJpZGllbVBhcnNlOiAv5YeM5pmofOaXqeS4inzkuIrljYh85Lit5Y2IfOS4i+WNiHzmmZrkuIovLFxuICAgIG1lcmlkaWVtSG91ciA6IGZ1bmN0aW9uIChob3VyLCBtZXJpZGllbSkge1xuICAgICAgICBpZiAoaG91ciA9PT0gMTIpIHtcbiAgICAgICAgICAgIGhvdXIgPSAwO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXJpZGllbSA9PT0gJ+WHjOaZqCcgfHwgbWVyaWRpZW0gPT09ICfml6nkuIonIHx8IG1lcmlkaWVtID09PSAn5LiK5Y2IJykge1xuICAgICAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfkuK3ljYgnKSB7XG4gICAgICAgICAgICByZXR1cm4gaG91ciA+PSAxMSA/IGhvdXIgOiBob3VyICsgMTI7XG4gICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfkuIvljYgnIHx8IG1lcmlkaWVtID09PSAn5pma5LiKJykge1xuICAgICAgICAgICAgcmV0dXJuIGhvdXIgKyAxMjtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgbWVyaWRpZW0gOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgIHZhciBobSA9IGhvdXIgKiAxMDAgKyBtaW51dGU7XG4gICAgICAgIGlmIChobSA8IDYwMCkge1xuICAgICAgICAgICAgcmV0dXJuICflh4zmmagnO1xuICAgICAgICB9IGVsc2UgaWYgKGhtIDwgOTAwKSB7XG4gICAgICAgICAgICByZXR1cm4gJ+aXqeS4iic7XG4gICAgICAgIH0gZWxzZSBpZiAoaG0gPCAxMTMwKSB7XG4gICAgICAgICAgICByZXR1cm4gJ+S4iuWNiCc7XG4gICAgICAgIH0gZWxzZSBpZiAoaG0gPCAxMjMwKSB7XG4gICAgICAgICAgICByZXR1cm4gJ+S4reWNiCc7XG4gICAgICAgIH0gZWxzZSBpZiAoaG0gPCAxODAwKSB7XG4gICAgICAgICAgICByZXR1cm4gJ+S4i+WNiCc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gJ+aZmuS4iic7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIGNhbGVuZGFyIDoge1xuICAgICAgICBzYW1lRGF5IDogJ1vku4rlpKldTFQnLFxuICAgICAgICBuZXh0RGF5IDogJ1vmmI7lpKldTFQnLFxuICAgICAgICBuZXh0V2VlayA6ICdb5LiLXWRkZGRMVCcsXG4gICAgICAgIGxhc3REYXkgOiAnW+aYqOWkqV1MVCcsXG4gICAgICAgIGxhc3RXZWVrIDogJ1vkuIpdZGRkZExUJyxcbiAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICB9LFxuICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfSjml6V85pyIfOmAsSkvLFxuICAgIG9yZGluYWwgOiBmdW5jdGlvbiAobnVtYmVyLCBwZXJpb2QpIHtcbiAgICAgICAgc3dpdGNoIChwZXJpb2QpIHtcbiAgICAgICAgICAgIGNhc2UgJ2QnIDpcbiAgICAgICAgICAgIGNhc2UgJ0QnIDpcbiAgICAgICAgICAgIGNhc2UgJ0RERCcgOlxuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAn5pelJztcbiAgICAgICAgICAgIGNhc2UgJ00nIDpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJ+aciCc7XG4gICAgICAgICAgICBjYXNlICd3JyA6XG4gICAgICAgICAgICBjYXNlICdXJyA6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICfpgLEnO1xuICAgICAgICAgICAgZGVmYXVsdCA6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICBmdXR1cmUgOiAnJXPlhacnLFxuICAgICAgICBwYXN0IDogJyVz5YmNJyxcbiAgICAgICAgcyA6ICflub7np5InLFxuICAgICAgICBtIDogJzEg5YiG6ZCYJyxcbiAgICAgICAgbW0gOiAnJWQg5YiG6ZCYJyxcbiAgICAgICAgaCA6ICcxIOWwj+aZgicsXG4gICAgICAgIGhoIDogJyVkIOWwj+aZgicsXG4gICAgICAgIGQgOiAnMSDlpKknLFxuICAgICAgICBkZCA6ICclZCDlpKknLFxuICAgICAgICBNIDogJzEg5YCL5pyIJyxcbiAgICAgICAgTU0gOiAnJWQg5YCL5pyIJyxcbiAgICAgICAgeSA6ICcxIOW5tCcsXG4gICAgICAgIHl5IDogJyVkIOW5tCdcbiAgICB9XG59KTtcblxucmV0dXJuIHpoVHc7XG5cbn0pKSk7XG4iLCJ2YXIgRGF0ZVJhbmdlUGlja2VyID0gcmVxdWlyZSgnLi9saWIvY29tcG9uZW50cy9EYXRlUmFuZ2VQaWNrZXInKS5kZWZhdWx0O1xudmFyIERhdGVSYW5nZVBpY2tlcklucHV0ID0gcmVxdWlyZSgnLi9saWIvY29tcG9uZW50cy9EYXRlUmFuZ2VQaWNrZXJJbnB1dCcpLmRlZmF1bHQ7XG52YXIgRGF0ZVJhbmdlUGlja2VySW5wdXRDb250cm9sbGVyID0gcmVxdWlyZSgnLi9saWIvY29tcG9uZW50cy9EYXRlUmFuZ2VQaWNrZXJJbnB1dENvbnRyb2xsZXInKS5kZWZhdWx0O1xudmFyIFNpbmdsZURhdGVQaWNrZXIgPSByZXF1aXJlKCcuL2xpYi9jb21wb25lbnRzL1NpbmdsZURhdGVQaWNrZXInKS5kZWZhdWx0O1xudmFyIFNpbmdsZURhdGVQaWNrZXJJbnB1dCA9IHJlcXVpcmUoJy4vbGliL2NvbXBvbmVudHMvU2luZ2xlRGF0ZVBpY2tlcklucHV0JykuZGVmYXVsdDtcbnZhciBEYXlQaWNrZXIgPSByZXF1aXJlKCcuL2xpYi9jb21wb25lbnRzL0RheVBpY2tlcicpLmRlZmF1bHQ7XG52YXIgRGF5UGlja2VyUmFuZ2VDb250cm9sbGVyID0gcmVxdWlyZSgnLi9saWIvY29tcG9uZW50cy9EYXlQaWNrZXJSYW5nZUNvbnRyb2xsZXInKS5kZWZhdWx0O1xudmFyIERheVBpY2tlclNpbmdsZURhdGVDb250cm9sbGVyID0gcmVxdWlyZSgnLi9saWIvY29tcG9uZW50cy9EYXlQaWNrZXJTaW5nbGVEYXRlQ29udHJvbGxlcicpLmRlZmF1bHQ7XG52YXIgQ2FsZW5kYXJNb250aEdyaWQgPSByZXF1aXJlKCcuL2xpYi9jb21wb25lbnRzL0NhbGVuZGFyTW9udGhHcmlkJykuZGVmYXVsdDtcbnZhciBDYWxlbmRhck1vbnRoID0gcmVxdWlyZSgnLi9saWIvY29tcG9uZW50cy9DYWxlbmRhck1vbnRoJykuZGVmYXVsdDtcbnZhciBDYWxlbmRhckRheSA9IHJlcXVpcmUoJy4vbGliL2NvbXBvbmVudHMvQ2FsZW5kYXJEYXknKS5kZWZhdWx0O1xuXG52YXIgRGF0ZVJhbmdlUGlja2VyU2hhcGUgPSByZXF1aXJlKCcuL2xpYi9zaGFwZXMvRGF0ZVJhbmdlUGlja2VyU2hhcGUnKS5kZWZhdWx0O1xudmFyIFNpbmdsZURhdGVQaWNrZXJTaGFwZSA9IHJlcXVpcmUoJy4vbGliL3NoYXBlcy9TaW5nbGVEYXRlUGlja2VyU2hhcGUnKS5kZWZhdWx0O1xuXG52YXIgaXNJbmNsdXNpdmVseUFmdGVyRGF5ID0gcmVxdWlyZSgnLi9saWIvdXRpbHMvaXNJbmNsdXNpdmVseUFmdGVyRGF5JykuZGVmYXVsdDtcbnZhciBpc0luY2x1c2l2ZWx5QmVmb3JlRGF5ID0gcmVxdWlyZSgnLi9saWIvdXRpbHMvaXNJbmNsdXNpdmVseUJlZm9yZURheScpLmRlZmF1bHQ7XG52YXIgaXNOZXh0RGF5ID0gcmVxdWlyZSgnLi9saWIvdXRpbHMvaXNOZXh0RGF5JykuZGVmYXVsdDtcbnZhciBpc1NhbWVEYXkgPSByZXF1aXJlKCcuL2xpYi91dGlscy9pc1NhbWVEYXknKS5kZWZhdWx0O1xuXG52YXIgdG9JU09EYXRlU3RyaW5nID0gcmVxdWlyZSgnLi9saWIvdXRpbHMvdG9JU09EYXRlU3RyaW5nJykuZGVmYXVsdDtcbnZhciB0b0xvY2FsaXplZERhdGVTdHJpbmcgPSByZXF1aXJlKCcuL2xpYi91dGlscy90b0xvY2FsaXplZERhdGVTdHJpbmcnKS5kZWZhdWx0O1xudmFyIHRvTW9tZW50T2JqZWN0ID0gcmVxdWlyZSgnLi9saWIvdXRpbHMvdG9Nb21lbnRPYmplY3QnKS5kZWZhdWx0O1xuXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBEYXRlUmFuZ2VQaWNrZXI6IERhdGVSYW5nZVBpY2tlcixcbiAgU2luZ2xlRGF0ZVBpY2tlcjogU2luZ2xlRGF0ZVBpY2tlcixcblxuICBEYXRlUmFuZ2VQaWNrZXJJbnB1dENvbnRyb2xsZXI6IERhdGVSYW5nZVBpY2tlcklucHV0Q29udHJvbGxlcixcbiAgRGF0ZVJhbmdlUGlja2VySW5wdXQ6IERhdGVSYW5nZVBpY2tlcklucHV0LFxuICBTaW5nbGVEYXRlUGlja2VySW5wdXQ6IFNpbmdsZURhdGVQaWNrZXJJbnB1dCxcbiAgRGF5UGlja2VyOiBEYXlQaWNrZXIsXG4gIERheVBpY2tlclJhbmdlQ29udHJvbGxlcjogRGF5UGlja2VyUmFuZ2VDb250cm9sbGVyLFxuICBEYXlQaWNrZXJTaW5nbGVEYXRlQ29udHJvbGxlcjogRGF5UGlja2VyU2luZ2xlRGF0ZUNvbnRyb2xsZXIsXG4gIENhbGVuZGFyTW9udGhHcmlkOiBDYWxlbmRhck1vbnRoR3JpZCxcbiAgQ2FsZW5kYXJNb250aDogQ2FsZW5kYXJNb250aCxcbiAgQ2FsZW5kYXJEYXk6IENhbGVuZGFyRGF5LFxuXG4gIERhdGVSYW5nZVBpY2tlclNoYXBlOiBEYXRlUmFuZ2VQaWNrZXJTaGFwZSxcbiAgU2luZ2xlRGF0ZVBpY2tlclNoYXBlOiBTaW5nbGVEYXRlUGlja2VyU2hhcGUsXG5cbiAgaXNJbmNsdXNpdmVseUFmdGVyRGF5OiBpc0luY2x1c2l2ZWx5QWZ0ZXJEYXksXG4gIGlzSW5jbHVzaXZlbHlCZWZvcmVEYXk6IGlzSW5jbHVzaXZlbHlCZWZvcmVEYXksXG4gIGlzTmV4dERheTogaXNOZXh0RGF5LFxuICBpc1NhbWVEYXk6IGlzU2FtZURheSxcblxuICB0b0lTT0RhdGVTdHJpbmc6IHRvSVNPRGF0ZVN0cmluZyxcbiAgdG9Mb2NhbGl6ZWREYXRlU3RyaW5nOiB0b0xvY2FsaXplZERhdGVTdHJpbmcsXG4gIHRvTW9tZW50T2JqZWN0OiB0b01vbWVudE9iamVjdCxcbn07XG4iLCJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1snZGVmYXVsdCddID0gZ2V0UmVzcG9uc2l2ZUNvbnRhaW5lclN0eWxlcztcblxudmFyIF9jb25zdGFudHMgPSByZXF1aXJlKCcuLi8uLi9jb25zdGFudHMnKTtcblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxuZnVuY3Rpb24gZ2V0UmVzcG9uc2l2ZUNvbnRhaW5lclN0eWxlcyhhbmNob3JEaXJlY3Rpb24sIGN1cnJlbnRPZmZzZXQsIGNvbnRhaW5lckVkZ2UsIG1hcmdpbikge1xuICB2YXIgd2luZG93V2lkdGggPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdy5pbm5lcldpZHRoIDogMDtcbiAgdmFyIGNhbGN1bGF0ZWRPZmZzZXQgPSBhbmNob3JEaXJlY3Rpb24gPT09IF9jb25zdGFudHMuQU5DSE9SX0xFRlQgPyB3aW5kb3dXaWR0aCAtIGNvbnRhaW5lckVkZ2UgOiBjb250YWluZXJFZGdlO1xuICB2YXIgY2FsY3VsYXRlZE1hcmdpbiA9IG1hcmdpbiB8fCAwO1xuXG4gIHJldHVybiBfZGVmaW5lUHJvcGVydHkoe30sIGFuY2hvckRpcmVjdGlvbiwgTWF0aC5taW4oY3VycmVudE9mZnNldCArIGNhbGN1bGF0ZWRPZmZzZXQgLSBjYWxjdWxhdGVkTWFyZ2luLCAwKSk7XG59IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcmVhY3REb20gPSByZXF1aXJlKCdyZWFjdC1kb20nKTtcblxudmFyIF9yZWFjdERvbTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdERvbSk7XG5cbnZhciBfcHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xuXG52YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBLRVlDT0RFUyA9IHtcbiAgRVNDQVBFOiAyN1xufTtcblxudmFyIFBvcnRhbCA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhQb3J0YWwsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFBvcnRhbCgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUG9ydGFsKTtcblxuICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChQb3J0YWwuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihQb3J0YWwpKS5jYWxsKHRoaXMpKTtcblxuICAgIF90aGlzLnN0YXRlID0geyBhY3RpdmU6IGZhbHNlIH07XG4gICAgX3RoaXMuaGFuZGxlV3JhcHBlckNsaWNrID0gX3RoaXMuaGFuZGxlV3JhcHBlckNsaWNrLmJpbmQoX3RoaXMpO1xuICAgIF90aGlzLmNsb3NlUG9ydGFsID0gX3RoaXMuY2xvc2VQb3J0YWwuYmluZChfdGhpcyk7XG4gICAgX3RoaXMuaGFuZGxlT3V0c2lkZU1vdXNlQ2xpY2sgPSBfdGhpcy5oYW5kbGVPdXRzaWRlTW91c2VDbGljay5iaW5kKF90aGlzKTtcbiAgICBfdGhpcy5oYW5kbGVLZXlkb3duID0gX3RoaXMuaGFuZGxlS2V5ZG93bi5iaW5kKF90aGlzKTtcbiAgICBfdGhpcy5wb3J0YWwgPSBudWxsO1xuICAgIF90aGlzLm5vZGUgPSBudWxsO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhQb3J0YWwsIFt7XG4gICAga2V5OiAnY29tcG9uZW50RGlkTW91bnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIGlmICh0aGlzLnByb3BzLmNsb3NlT25Fc2MpIHtcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMuaGFuZGxlS2V5ZG93bik7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLnByb3BzLmNsb3NlT25PdXRzaWRlQ2xpY2spIHtcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHRoaXMuaGFuZGxlT3V0c2lkZU1vdXNlQ2xpY2spO1xuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgdGhpcy5oYW5kbGVPdXRzaWRlTW91c2VDbGljayk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLnByb3BzLmlzT3BlbmVkKSB7XG4gICAgICAgIHRoaXMub3BlblBvcnRhbCgpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5ld1Byb3BzKSB7XG4gICAgICAvLyBwb3J0YWwncyAnaXMgb3Blbicgc3RhdGUgaXMgaGFuZGxlZCB0aHJvdWdoIHRoZSBwcm9wIGlzT3BlbmVkXG4gICAgICBpZiAodHlwZW9mIG5ld1Byb3BzLmlzT3BlbmVkICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBpZiAobmV3UHJvcHMuaXNPcGVuZWQpIHtcbiAgICAgICAgICBpZiAodGhpcy5zdGF0ZS5hY3RpdmUpIHtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyUG9ydGFsKG5ld1Byb3BzKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5vcGVuUG9ydGFsKG5ld1Byb3BzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFuZXdQcm9wcy5pc09wZW5lZCAmJiB0aGlzLnN0YXRlLmFjdGl2ZSkge1xuICAgICAgICAgIHRoaXMuY2xvc2VQb3J0YWwoKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBwb3J0YWwgaGFuZGxlcyBpdHMgb3duICdpcyBvcGVuJyBzdGF0ZVxuICAgICAgaWYgKHR5cGVvZiBuZXdQcm9wcy5pc09wZW5lZCA9PT0gJ3VuZGVmaW5lZCcgJiYgdGhpcy5zdGF0ZS5hY3RpdmUpIHtcbiAgICAgICAgdGhpcy5yZW5kZXJQb3J0YWwobmV3UHJvcHMpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2NvbXBvbmVudFdpbGxVbm1vdW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICBpZiAodGhpcy5wcm9wcy5jbG9zZU9uRXNjKSB7XG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLmhhbmRsZUtleWRvd24pO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5wcm9wcy5jbG9zZU9uT3V0c2lkZUNsaWNrKSB7XG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCB0aGlzLmhhbmRsZU91dHNpZGVNb3VzZUNsaWNrKTtcbiAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIHRoaXMuaGFuZGxlT3V0c2lkZU1vdXNlQ2xpY2spO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmNsb3NlUG9ydGFsKHRydWUpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2hhbmRsZVdyYXBwZXJDbGljaycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGhhbmRsZVdyYXBwZXJDbGljayhlKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgaWYgKHRoaXMuc3RhdGUuYWN0aXZlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMub3BlblBvcnRhbCgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ29wZW5Qb3J0YWwnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBvcGVuUG9ydGFsKCkge1xuICAgICAgdmFyIHByb3BzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB0aGlzLnByb3BzO1xuXG4gICAgICB0aGlzLnNldFN0YXRlKHsgYWN0aXZlOiB0cnVlIH0pO1xuICAgICAgdGhpcy5yZW5kZXJQb3J0YWwocHJvcHMpO1xuICAgICAgdGhpcy5wcm9wcy5vbk9wZW4odGhpcy5ub2RlKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjbG9zZVBvcnRhbCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNsb3NlUG9ydGFsKCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHZhciBpc1VubW91bnRlZCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogZmFsc2U7XG5cbiAgICAgIHZhciByZXNldFBvcnRhbFN0YXRlID0gZnVuY3Rpb24gcmVzZXRQb3J0YWxTdGF0ZShvdmVycmlkZUlzVW5tb3VudGVkKSB7XG4gICAgICAgIGlmIChfdGhpczIubm9kZSkge1xuICAgICAgICAgIF9yZWFjdERvbTIuZGVmYXVsdC51bm1vdW50Q29tcG9uZW50QXROb2RlKF90aGlzMi5ub2RlKTtcbiAgICAgICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKF90aGlzMi5ub2RlKTtcbiAgICAgICAgfVxuICAgICAgICBfdGhpczIucG9ydGFsID0gbnVsbDtcbiAgICAgICAgX3RoaXMyLm5vZGUgPSBudWxsO1xuXG4gICAgICAgIHZhciBmaW5hbElzVW5tb3VudGVkID0gb3ZlcnJpZGVJc1VubW91bnRlZCA9PT0gdW5kZWZpbmVkID8gaXNVbm1vdW50ZWQgOiBvdmVycmlkZUlzVW5tb3VudGVkO1xuXG4gICAgICAgIGlmIChmaW5hbElzVW5tb3VudGVkICE9PSB0cnVlKSB7XG4gICAgICAgICAgX3RoaXMyLnNldFN0YXRlKHsgYWN0aXZlOiBmYWxzZSB9KTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgaWYgKHRoaXMuc3RhdGUuYWN0aXZlKSB7XG4gICAgICAgIGlmICh0aGlzLnByb3BzLmJlZm9yZUNsb3NlKSB7XG4gICAgICAgICAgdGhpcy5wcm9wcy5iZWZvcmVDbG9zZSh0aGlzLm5vZGUsIHJlc2V0UG9ydGFsU3RhdGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc2V0UG9ydGFsU3RhdGUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucHJvcHMub25DbG9zZSgpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2hhbmRsZU91dHNpZGVNb3VzZUNsaWNrJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gaGFuZGxlT3V0c2lkZU1vdXNlQ2xpY2soZSkge1xuICAgICAgaWYgKCF0aGlzLnN0YXRlLmFjdGl2ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciByb290ID0gKDAsIF9yZWFjdERvbS5maW5kRE9NTm9kZSkodGhpcy5wb3J0YWwpO1xuICAgICAgaWYgKHJvb3QuY29udGFpbnMoZS50YXJnZXQpIHx8IGUuYnV0dG9uICYmIGUuYnV0dG9uICE9PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIHRoaXMuY2xvc2VQb3J0YWwoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdoYW5kbGVLZXlkb3duJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gaGFuZGxlS2V5ZG93bihlKSB7XG4gICAgICBpZiAoZS5rZXlDb2RlID09PSBLRVlDT0RFUy5FU0NBUEUgJiYgdGhpcy5zdGF0ZS5hY3RpdmUpIHtcbiAgICAgICAgdGhpcy5jbG9zZVBvcnRhbCgpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlbmRlclBvcnRhbCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlclBvcnRhbChwcm9wcykge1xuICAgICAgaWYgKCF0aGlzLm5vZGUpIHtcbiAgICAgICAgdGhpcy5ub2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhpcy5ub2RlKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW47XG4gICAgICAvLyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9qaW1mYi9kOTllMDY3OGU5ZGE3MTVjY2Y2NDU0OTYxZWYwNGQxYlxuICAgICAgaWYgKHR5cGVvZiBwcm9wcy5jaGlsZHJlbi50eXBlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGNoaWxkcmVuID0gX3JlYWN0Mi5kZWZhdWx0LmNsb25lRWxlbWVudChwcm9wcy5jaGlsZHJlbiwgeyBjbG9zZVBvcnRhbDogdGhpcy5jbG9zZVBvcnRhbCB9KTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5wb3J0YWwgPSBfcmVhY3REb20yLmRlZmF1bHQudW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIodGhpcywgY2hpbGRyZW4sIHRoaXMubm9kZSwgdGhpcy5wcm9wcy5vblVwZGF0ZSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncmVuZGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgaWYgKHRoaXMucHJvcHMub3BlbkJ5Q2xpY2tPbikge1xuICAgICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNsb25lRWxlbWVudCh0aGlzLnByb3BzLm9wZW5CeUNsaWNrT24sIHsgb25DbGljazogdGhpcy5oYW5kbGVXcmFwcGVyQ2xpY2sgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUG9ydGFsO1xufShfcmVhY3QyLmRlZmF1bHQuQ29tcG9uZW50KTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gUG9ydGFsO1xuXG5cblBvcnRhbC5wcm9wVHlwZXMgPSB7XG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmVsZW1lbnQuaXNSZXF1aXJlZCxcbiAgb3BlbkJ5Q2xpY2tPbjogX3Byb3BUeXBlczIuZGVmYXVsdC5lbGVtZW50LFxuICBjbG9zZU9uRXNjOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gIGNsb3NlT25PdXRzaWRlQ2xpY2s6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgaXNPcGVuZWQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgb25PcGVuOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG4gIG9uQ2xvc2U6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgYmVmb3JlQ2xvc2U6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgb25VcGRhdGU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuY1xufTtcblxuUG9ydGFsLmRlZmF1bHRQcm9wcyA9IHtcbiAgb25PcGVuOiBmdW5jdGlvbiBvbk9wZW4oKSB7fSxcbiAgb25DbG9zZTogZnVuY3Rpb24gb25DbG9zZSgpIHt9LFxuICBvblVwZGF0ZTogZnVuY3Rpb24gb25VcGRhdGUoKSB7fVxufTtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuIiwiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9wcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5cbnZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbnZhciBfcmVhY3RNb21lbnRQcm9wdHlwZXMgPSByZXF1aXJlKCdyZWFjdC1tb21lbnQtcHJvcHR5cGVzJyk7XG5cbnZhciBfcmVhY3RNb21lbnRQcm9wdHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3RNb21lbnRQcm9wdHlwZXMpO1xuXG52YXIgX2FpcmJuYlByb3BUeXBlcyA9IHJlcXVpcmUoJ2FpcmJuYi1wcm9wLXR5cGVzJyk7XG5cbnZhciBfZGVmYXVsdFBocmFzZXMgPSByZXF1aXJlKCcuLi9kZWZhdWx0UGhyYXNlcycpO1xuXG52YXIgX2dldFBocmFzZVByb3BUeXBlcyA9IHJlcXVpcmUoJy4uL3V0aWxzL2dldFBocmFzZVByb3BUeXBlcycpO1xuXG52YXIgX2dldFBocmFzZVByb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRQaHJhc2VQcm9wVHlwZXMpO1xuXG52YXIgX0ZvY3VzZWRJbnB1dFNoYXBlID0gcmVxdWlyZSgnLi4vc2hhcGVzL0ZvY3VzZWRJbnB1dFNoYXBlJyk7XG5cbnZhciBfRm9jdXNlZElucHV0U2hhcGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfRm9jdXNlZElucHV0U2hhcGUpO1xuXG52YXIgX09yaWVudGF0aW9uU2hhcGUgPSByZXF1aXJlKCcuLi9zaGFwZXMvT3JpZW50YXRpb25TaGFwZScpO1xuXG52YXIgX09yaWVudGF0aW9uU2hhcGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfT3JpZW50YXRpb25TaGFwZSk7XG5cbnZhciBfQW5jaG9yRGlyZWN0aW9uU2hhcGUgPSByZXF1aXJlKCcuLi9zaGFwZXMvQW5jaG9yRGlyZWN0aW9uU2hhcGUnKTtcblxudmFyIF9BbmNob3JEaXJlY3Rpb25TaGFwZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9BbmNob3JEaXJlY3Rpb25TaGFwZSk7XG5cbnZhciBfRGF5T2ZXZWVrU2hhcGUgPSByZXF1aXJlKCcuLi9zaGFwZXMvRGF5T2ZXZWVrU2hhcGUnKTtcblxudmFyIF9EYXlPZldlZWtTaGFwZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9EYXlPZldlZWtTaGFwZSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxuZXhwb3J0c1snZGVmYXVsdCddID0ge1xuICAvLyByZXF1aXJlZCBwcm9wcyBmb3IgYSBmdW5jdGlvbmFsIGludGVyYWN0aXZlIERhdGVSYW5nZVBpY2tlclxuICBzdGFydERhdGU6IF9yZWFjdE1vbWVudFByb3B0eXBlczJbJ2RlZmF1bHQnXS5tb21lbnRPYmosXG4gIGVuZERhdGU6IF9yZWFjdE1vbWVudFByb3B0eXBlczJbJ2RlZmF1bHQnXS5tb21lbnRPYmosXG4gIG9uRGF0ZXNDaGFuZ2U6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uZnVuYy5pc1JlcXVpcmVkLFxuXG4gIGZvY3VzZWRJbnB1dDogX0ZvY3VzZWRJbnB1dFNoYXBlMlsnZGVmYXVsdCddLFxuICBvbkZvY3VzQ2hhbmdlOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmZ1bmMuaXNSZXF1aXJlZCxcblxuICBvbkNsb3NlOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmZ1bmMsXG5cbiAgLy8gaW5wdXQgcmVsYXRlZCBwcm9wc1xuICBzdGFydERhdGVJZDogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgc3RhcnREYXRlUGxhY2Vob2xkZXJUZXh0OiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLnN0cmluZyxcbiAgZW5kRGF0ZUlkOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLnN0cmluZy5pc1JlcXVpcmVkLFxuICBlbmREYXRlUGxhY2Vob2xkZXJUZXh0OiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLnN0cmluZyxcbiAgZGlzYWJsZWQ6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uYm9vbCxcbiAgcmVxdWlyZWQ6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uYm9vbCxcbiAgcmVhZE9ubHk6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uYm9vbCxcbiAgc2NyZWVuUmVhZGVySW5wdXRNZXNzYWdlOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLnN0cmluZyxcbiAgc2hvd0NsZWFyRGF0ZXM6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uYm9vbCxcbiAgc2hvd0RlZmF1bHRJbnB1dEljb246IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uYm9vbCxcbiAgY3VzdG9tSW5wdXRJY29uOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLm5vZGUsXG4gIGN1c3RvbUFycm93SWNvbjogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5ub2RlLFxuICBjdXN0b21DbG9zZUljb246IF9wcm9wVHlwZXMyWydkZWZhdWx0J10ubm9kZSxcblxuICAvLyBjYWxlbmRhciBwcmVzZW50YXRpb24gYW5kIGludGVyYWN0aW9uIHJlbGF0ZWQgcHJvcHNcbiAgcmVuZGVyTW9udGg6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uZnVuYyxcbiAgb3JpZW50YXRpb246IF9PcmllbnRhdGlvblNoYXBlMlsnZGVmYXVsdCddLFxuICBhbmNob3JEaXJlY3Rpb246IF9BbmNob3JEaXJlY3Rpb25TaGFwZTJbJ2RlZmF1bHQnXSxcbiAgaG9yaXpvbnRhbE1hcmdpbjogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5udW1iZXIsXG4gIHdpdGhQb3J0YWw6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uYm9vbCxcbiAgd2l0aEZ1bGxTY3JlZW5Qb3J0YWw6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uYm9vbCxcbiAgZGF5U2l6ZTogX2FpcmJuYlByb3BUeXBlcy5ub25OZWdhdGl2ZUludGVnZXIsXG4gIGlzUlRMOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmJvb2wsXG4gIGZpcnN0RGF5T2ZXZWVrOiBfRGF5T2ZXZWVrU2hhcGUyWydkZWZhdWx0J10sXG4gIGluaXRpYWxWaXNpYmxlTW9udGg6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uZnVuYyxcbiAgbnVtYmVyT2ZNb250aHM6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10ubnVtYmVyLFxuICBrZWVwT3Blbk9uRGF0ZVNlbGVjdDogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5ib29sLFxuICByZW9wZW5QaWNrZXJPbkNsZWFyRGF0ZXM6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uYm9vbCxcbiAgcmVuZGVyQ2FsZW5kYXJJbmZvOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmZ1bmMsXG4gIGhpZGVLZXlib2FyZFNob3J0Y3V0c1BhbmVsOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmJvb2wsXG5cbiAgLy8gbmF2aWdhdGlvbiByZWxhdGVkIHByb3BzXG4gIG5hdlByZXY6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10ubm9kZSxcbiAgbmF2TmV4dDogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5ub2RlLFxuICBvblByZXZNb250aENsaWNrOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmZ1bmMsXG4gIG9uTmV4dE1vbnRoQ2xpY2s6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uZnVuYyxcblxuICAvLyBkYXkgcHJlc2VudGF0aW9uIGFuZCBpbnRlcmFjdGlvbiByZWxhdGVkIHByb3BzXG4gIHJlbmRlckRheTogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5mdW5jLFxuICBtaW5pbXVtTmlnaHRzOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLm51bWJlcixcbiAgZW5hYmxlT3V0c2lkZURheXM6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uYm9vbCxcbiAgaXNEYXlCbG9ja2VkOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmZ1bmMsXG4gIGlzT3V0c2lkZVJhbmdlOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmZ1bmMsXG4gIGlzRGF5SGlnaGxpZ2h0ZWQ6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uZnVuYyxcblxuICAvLyBpbnRlcm5hdGlvbmFsaXphdGlvbiBwcm9wc1xuICBkaXNwbGF5Rm9ybWF0OiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLm9uZU9mVHlwZShbX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5zdHJpbmcsIF9wcm9wVHlwZXMyWydkZWZhdWx0J10uZnVuY10pLFxuICBtb250aEZvcm1hdDogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5zdHJpbmcsXG4gIHBocmFzZXM6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uc2hhcGUoKDAsIF9nZXRQaHJhc2VQcm9wVHlwZXMyWydkZWZhdWx0J10pKF9kZWZhdWx0UGhyYXNlcy5EYXRlUmFuZ2VQaWNrZXJQaHJhc2VzKSlcbn07IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgc2xpY2UgPSBBcnJheS5wcm90b3R5cGUuc2xpY2U7XG52YXIgaXNBcmdzID0gcmVxdWlyZSgnLi9pc0FyZ3VtZW50cycpO1xuXG52YXIgb3JpZ0tleXMgPSBPYmplY3Qua2V5cztcbnZhciBrZXlzU2hpbSA9IG9yaWdLZXlzID8gZnVuY3Rpb24ga2V5cyhvKSB7IHJldHVybiBvcmlnS2V5cyhvKTsgfSA6IHJlcXVpcmUoJy4vaW1wbGVtZW50YXRpb24nKTtcblxudmFyIG9yaWdpbmFsS2V5cyA9IE9iamVjdC5rZXlzO1xuXG5rZXlzU2hpbS5zaGltID0gZnVuY3Rpb24gc2hpbU9iamVjdEtleXMoKSB7XG5cdGlmIChPYmplY3Qua2V5cykge1xuXHRcdHZhciBrZXlzV29ya3NXaXRoQXJndW1lbnRzID0gKGZ1bmN0aW9uICgpIHtcblx0XHRcdC8vIFNhZmFyaSA1LjAgYnVnXG5cdFx0XHR2YXIgYXJncyA9IE9iamVjdC5rZXlzKGFyZ3VtZW50cyk7XG5cdFx0XHRyZXR1cm4gYXJncyAmJiBhcmdzLmxlbmd0aCA9PT0gYXJndW1lbnRzLmxlbmd0aDtcblx0XHR9KDEsIDIpKTtcblx0XHRpZiAoIWtleXNXb3Jrc1dpdGhBcmd1bWVudHMpIHtcblx0XHRcdE9iamVjdC5rZXlzID0gZnVuY3Rpb24ga2V5cyhvYmplY3QpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBmdW5jLW5hbWUtbWF0Y2hpbmdcblx0XHRcdFx0aWYgKGlzQXJncyhvYmplY3QpKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG9yaWdpbmFsS2V5cyhzbGljZS5jYWxsKG9iamVjdCkpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBvcmlnaW5hbEtleXMob2JqZWN0KTtcblx0XHRcdH07XG5cdFx0fVxuXHR9IGVsc2Uge1xuXHRcdE9iamVjdC5rZXlzID0ga2V5c1NoaW07XG5cdH1cblx0cmV0dXJuIE9iamVjdC5rZXlzIHx8IGtleXNTaGltO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBrZXlzU2hpbTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHRvU3RyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0FyZ3VtZW50cyh2YWx1ZSkge1xuXHR2YXIgc3RyID0gdG9TdHIuY2FsbCh2YWx1ZSk7XG5cdHZhciBpc0FyZ3MgPSBzdHIgPT09ICdbb2JqZWN0IEFyZ3VtZW50c10nO1xuXHRpZiAoIWlzQXJncykge1xuXHRcdGlzQXJncyA9IHN0ciAhPT0gJ1tvYmplY3QgQXJyYXldJyAmJlxuXHRcdFx0dmFsdWUgIT09IG51bGwgJiZcblx0XHRcdHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiZcblx0XHRcdHR5cGVvZiB2YWx1ZS5sZW5ndGggPT09ICdudW1iZXInICYmXG5cdFx0XHR2YWx1ZS5sZW5ndGggPj0gMCAmJlxuXHRcdFx0dG9TdHIuY2FsbCh2YWx1ZS5jYWxsZWUpID09PSAnW29iamVjdCBGdW5jdGlvbl0nO1xuXHR9XG5cdHJldHVybiBpc0FyZ3M7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vLyBtb2RpZmllZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9lcy1zaGltcy9lczYtc2hpbVxudmFyIGtleXMgPSByZXF1aXJlKCdvYmplY3Qta2V5cycpO1xudmFyIGJpbmQgPSByZXF1aXJlKCdmdW5jdGlvbi1iaW5kJyk7XG52YXIgY2FuQmVPYmplY3QgPSBmdW5jdGlvbiAob2JqKSB7XG5cdHJldHVybiB0eXBlb2Ygb2JqICE9PSAndW5kZWZpbmVkJyAmJiBvYmogIT09IG51bGw7XG59O1xudmFyIGhhc1N5bWJvbHMgPSByZXF1aXJlKCdoYXMtc3ltYm9scy9zaGFtcycpKCk7XG52YXIgdG9PYmplY3QgPSBPYmplY3Q7XG52YXIgcHVzaCA9IGJpbmQuY2FsbChGdW5jdGlvbi5jYWxsLCBBcnJheS5wcm90b3R5cGUucHVzaCk7XG52YXIgcHJvcElzRW51bWVyYWJsZSA9IGJpbmQuY2FsbChGdW5jdGlvbi5jYWxsLCBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlKTtcbnZhciBvcmlnaW5hbEdldFN5bWJvbHMgPSBoYXNTeW1ib2xzID8gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA6IG51bGw7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYXNzaWduKHRhcmdldCwgc291cmNlMSkge1xuXHRpZiAoIWNhbkJlT2JqZWN0KHRhcmdldCkpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigndGFyZ2V0IG11c3QgYmUgYW4gb2JqZWN0Jyk7IH1cblx0dmFyIG9ialRhcmdldCA9IHRvT2JqZWN0KHRhcmdldCk7XG5cdHZhciBzLCBzb3VyY2UsIGksIHByb3BzLCBzeW1zLCB2YWx1ZSwga2V5O1xuXHRmb3IgKHMgPSAxOyBzIDwgYXJndW1lbnRzLmxlbmd0aDsgKytzKSB7XG5cdFx0c291cmNlID0gdG9PYmplY3QoYXJndW1lbnRzW3NdKTtcblx0XHRwcm9wcyA9IGtleXMoc291cmNlKTtcblx0XHR2YXIgZ2V0U3ltYm9scyA9IGhhc1N5bWJvbHMgJiYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgfHwgb3JpZ2luYWxHZXRTeW1ib2xzKTtcblx0XHRpZiAoZ2V0U3ltYm9scykge1xuXHRcdFx0c3ltcyA9IGdldFN5bWJvbHMoc291cmNlKTtcblx0XHRcdGZvciAoaSA9IDA7IGkgPCBzeW1zLmxlbmd0aDsgKytpKSB7XG5cdFx0XHRcdGtleSA9IHN5bXNbaV07XG5cdFx0XHRcdGlmIChwcm9wSXNFbnVtZXJhYmxlKHNvdXJjZSwga2V5KSkge1xuXHRcdFx0XHRcdHB1c2gocHJvcHMsIGtleSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0Zm9yIChpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgKytpKSB7XG5cdFx0XHRrZXkgPSBwcm9wc1tpXTtcblx0XHRcdHZhbHVlID0gc291cmNlW2tleV07XG5cdFx0XHRpZiAocHJvcElzRW51bWVyYWJsZShzb3VyY2UsIGtleSkpIHtcblx0XHRcdFx0b2JqVGFyZ2V0W2tleV0gPSB2YWx1ZTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0cmV0dXJuIG9ialRhcmdldDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qIGVzbGludCBjb21wbGV4aXR5OiBbMiwgMThdLCBtYXgtc3RhdGVtZW50czogWzIsIDMzXSAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBoYXNTeW1ib2xzKCkge1xuXHRpZiAodHlwZW9mIFN5bWJvbCAhPT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyAhPT0gJ2Z1bmN0aW9uJykgeyByZXR1cm4gZmFsc2U7IH1cblx0aWYgKHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICdzeW1ib2wnKSB7IHJldHVybiB0cnVlOyB9XG5cblx0dmFyIG9iaiA9IHt9O1xuXHR2YXIgc3ltID0gU3ltYm9sKCd0ZXN0Jyk7XG5cdHZhciBzeW1PYmogPSBPYmplY3Qoc3ltKTtcblx0aWYgKHR5cGVvZiBzeW0gPT09ICdzdHJpbmcnKSB7IHJldHVybiBmYWxzZTsgfVxuXG5cdGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoc3ltKSAhPT0gJ1tvYmplY3QgU3ltYm9sXScpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoc3ltT2JqKSAhPT0gJ1tvYmplY3QgU3ltYm9sXScpIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0Ly8gdGVtcCBkaXNhYmxlZCBwZXIgaHR0cHM6Ly9naXRodWIuY29tL2xqaGFyYi9vYmplY3QuYXNzaWduL2lzc3Vlcy8xN1xuXHQvLyBpZiAoc3ltIGluc3RhbmNlb2YgU3ltYm9sKSB7IHJldHVybiBmYWxzZTsgfVxuXHQvLyB0ZW1wIGRpc2FibGVkIHBlciBodHRwczovL2dpdGh1Yi5jb20vV2ViUmVmbGVjdGlvbi9nZXQtb3duLXByb3BlcnR5LXN5bWJvbHMvaXNzdWVzLzRcblx0Ly8gaWYgKCEoc3ltT2JqIGluc3RhbmNlb2YgU3ltYm9sKSkgeyByZXR1cm4gZmFsc2U7IH1cblxuXHQvLyBpZiAodHlwZW9mIFN5bWJvbC5wcm90b3R5cGUudG9TdHJpbmcgIT09ICdmdW5jdGlvbicpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdC8vIGlmIChTdHJpbmcoc3ltKSAhPT0gU3ltYm9sLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHN5bSkpIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0dmFyIHN5bVZhbCA9IDQyO1xuXHRvYmpbc3ltXSA9IHN5bVZhbDtcblx0Zm9yIChzeW0gaW4gb2JqKSB7IHJldHVybiBmYWxzZTsgfSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4XG5cdGlmICh0eXBlb2YgT2JqZWN0LmtleXMgPT09ICdmdW5jdGlvbicgJiYgT2JqZWN0LmtleXMob2JqKS5sZW5ndGggIT09IDApIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0aWYgKHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyA9PT0gJ2Z1bmN0aW9uJyAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhvYmopLmxlbmd0aCAhPT0gMCkgeyByZXR1cm4gZmFsc2U7IH1cblxuXHR2YXIgc3ltcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqKTtcblx0aWYgKHN5bXMubGVuZ3RoICE9PSAxIHx8IHN5bXNbMF0gIT09IHN5bSkgeyByZXR1cm4gZmFsc2U7IH1cblxuXHRpZiAoIU9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChvYmosIHN5bSkpIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0aWYgKHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0dmFyIGRlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwgc3ltKTtcblx0XHRpZiAoZGVzY3JpcHRvci52YWx1ZSAhPT0gc3ltVmFsIHx8IGRlc2NyaXB0b3IuZW51bWVyYWJsZSAhPT0gdHJ1ZSkgeyByZXR1cm4gZmFsc2U7IH1cblx0fVxuXG5cdHJldHVybiB0cnVlO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGltcGxlbWVudGF0aW9uID0gcmVxdWlyZSgnLi9pbXBsZW1lbnRhdGlvbicpO1xuXG52YXIgbGFja3NQcm9wZXJFbnVtZXJhdGlvbk9yZGVyID0gZnVuY3Rpb24gKCkge1xuXHRpZiAoIU9iamVjdC5hc3NpZ24pIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblx0Ly8gdjgsIHNwZWNpZmljYWxseSBpbiBub2RlIDQueCwgaGFzIGEgYnVnIHdpdGggaW5jb3JyZWN0IHByb3BlcnR5IGVudW1lcmF0aW9uIG9yZGVyXG5cdC8vIG5vdGU6IHRoaXMgZG9lcyBub3QgZGV0ZWN0IHRoZSBidWcgdW5sZXNzIHRoZXJlJ3MgMjAgY2hhcmFjdGVyc1xuXHR2YXIgc3RyID0gJ2FiY2RlZmdoaWprbG1ub3BxcnN0Jztcblx0dmFyIGxldHRlcnMgPSBzdHIuc3BsaXQoJycpO1xuXHR2YXIgbWFwID0ge307XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgbGV0dGVycy5sZW5ndGg7ICsraSkge1xuXHRcdG1hcFtsZXR0ZXJzW2ldXSA9IGxldHRlcnNbaV07XG5cdH1cblx0dmFyIG9iaiA9IE9iamVjdC5hc3NpZ24oe30sIG1hcCk7XG5cdHZhciBhY3R1YWwgPSAnJztcblx0Zm9yICh2YXIgayBpbiBvYmopIHtcblx0XHRhY3R1YWwgKz0gaztcblx0fVxuXHRyZXR1cm4gc3RyICE9PSBhY3R1YWw7XG59O1xuXG52YXIgYXNzaWduSGFzUGVuZGluZ0V4Y2VwdGlvbnMgPSBmdW5jdGlvbiAoKSB7XG5cdGlmICghT2JqZWN0LmFzc2lnbiB8fCAhT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cdC8vIEZpcmVmb3ggMzcgc3RpbGwgaGFzIFwicGVuZGluZyBleGNlcHRpb25cIiBsb2dpYyBpbiBpdHMgT2JqZWN0LmFzc2lnbiBpbXBsZW1lbnRhdGlvbixcblx0Ly8gd2hpY2ggaXMgNzIlIHNsb3dlciB0aGFuIG91ciBzaGltLCBhbmQgRmlyZWZveCA0MCdzIG5hdGl2ZSBpbXBsZW1lbnRhdGlvbi5cblx0dmFyIHRocm93ZXIgPSBPYmplY3QucHJldmVudEV4dGVuc2lvbnMoeyAxOiAyIH0pO1xuXHR0cnkge1xuXHRcdE9iamVjdC5hc3NpZ24odGhyb3dlciwgJ3h5Jyk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRyZXR1cm4gdGhyb3dlclsxXSA9PT0gJ3knO1xuXHR9XG5cdHJldHVybiBmYWxzZTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZ2V0UG9seWZpbGwoKSB7XG5cdGlmICghT2JqZWN0LmFzc2lnbikge1xuXHRcdHJldHVybiBpbXBsZW1lbnRhdGlvbjtcblx0fVxuXHRpZiAobGFja3NQcm9wZXJFbnVtZXJhdGlvbk9yZGVyKCkpIHtcblx0XHRyZXR1cm4gaW1wbGVtZW50YXRpb247XG5cdH1cblx0aWYgKGFzc2lnbkhhc1BlbmRpbmdFeGNlcHRpb25zKCkpIHtcblx0XHRyZXR1cm4gaW1wbGVtZW50YXRpb247XG5cdH1cblx0cmV0dXJuIE9iamVjdC5hc3NpZ247XG59O1xuIiwiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9wcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5cbnZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbnZhciBfY29uc3RhbnRzID0gcmVxdWlyZSgnLi4vLi4vY29uc3RhbnRzJyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxuZXhwb3J0c1snZGVmYXVsdCddID0gX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5vbmVPZihbX2NvbnN0YW50cy5TVEFSVF9EQVRFLCBfY29uc3RhbnRzLkVORF9EQVRFXSk7IiwiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9wcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5cbnZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbnZhciBfY29uc3RhbnRzID0gcmVxdWlyZSgnLi4vLi4vY29uc3RhbnRzJyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxuZXhwb3J0c1snZGVmYXVsdCddID0gX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5vbmVPZihbX2NvbnN0YW50cy5IT1JJWk9OVEFMX09SSUVOVEFUSU9OLCBfY29uc3RhbnRzLlZFUlRJQ0FMX09SSUVOVEFUSU9OXSk7IiwiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9wcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5cbnZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbnZhciBfY29uc3RhbnRzID0gcmVxdWlyZSgnLi4vLi4vY29uc3RhbnRzJyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxuZXhwb3J0c1snZGVmYXVsdCddID0gX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5vbmVPZihbX2NvbnN0YW50cy5BTkNIT1JfTEVGVCwgX2NvbnN0YW50cy5BTkNIT1JfUklHSFRdKTsiLCJtb2R1bGUuZXhwb3J0cyA9XG4vKioqKioqLyAoZnVuY3Rpb24obW9kdWxlcykgeyAvLyB3ZWJwYWNrQm9vdHN0cmFwXG4vKioqKioqLyBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4vKioqKioqLyBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4vKioqKioqLyBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbi8qKioqKiovIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuLyoqKioqKi8gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbi8qKioqKiovIFx0XHRcdGk6IG1vZHVsZUlkLFxuLyoqKioqKi8gXHRcdFx0bDogZmFsc2UsXG4vKioqKioqLyBcdFx0XHRleHBvcnRzOiB7fVxuLyoqKioqKi8gXHRcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuLyoqKioqKi8gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4vKioqKioqLyBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuLyoqKioqKi8gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbi8qKioqKiovIFx0fVxuLyoqKioqKi9cbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gaWRlbnRpdHkgZnVuY3Rpb24gZm9yIGNhbGxpbmcgaGFybW9ueSBpbXBvcnRzIHdpdGggdGhlIGNvcnJlY3QgY29udGV4dFxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmkgPSBmdW5jdGlvbih2YWx1ZSkgeyByZXR1cm4gdmFsdWU7IH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4vKioqKioqLyBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuLyoqKioqKi8gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHtcbi8qKioqKiovIFx0XHRcdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcbi8qKioqKiovIFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcbi8qKioqKiovIFx0XHRcdFx0Z2V0OiBnZXR0ZXJcbi8qKioqKiovIFx0XHRcdH0pO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuLyoqKioqKi8gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuLyoqKioqKi8gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbi8qKioqKiovIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4vKioqKioqLyBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuLyoqKioqKi8gXHRcdHJldHVybiBnZXR0ZXI7XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLyoqKioqKi8gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSA2NSk7XG4vKioqKioqLyB9KVxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovICh7XG5cbi8qKiovIDA6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInJlYWN0XCIpO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gMTpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiYWlyYm5iLXByb3AtdHlwZXNcIik7XG5cbi8qKiovIH0pLFxuXG4vKioqLyAxMDpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwicmVhY3QtbW9tZW50LXByb3B0eXBlc1wiKTtcblxuLyoqKi8gfSksXG5cbi8qKiovIDEzOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi91dGlscy90b0lTT0RhdGVTdHJpbmdcIik7XG5cbi8qKiovIH0pLFxuXG4vKioqLyAxNTpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vdXRpbHMvaXNJbmNsdXNpdmVseUFmdGVyRGF5XCIpO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gMjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vZGVmYXVsdFBocmFzZXNcIik7XG5cbi8qKiovIH0pLFxuXG4vKioqLyAzOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gMzA6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uL3V0aWxzL2lzQmVmb3JlRGF5XCIpO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gMzE6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uL3V0aWxzL3RvTG9jYWxpemVkRGF0ZVN0cmluZ1wiKTtcblxuLyoqKi8gfSksXG5cbi8qKiovIDMyOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi91dGlscy90b01vbWVudE9iamVjdFwiKTtcblxuLyoqKi8gfSksXG5cbi8qKiovIDQ6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uL2NvbnN0YW50c1wiKTtcblxuLyoqKi8gfSksXG5cbi8qKiovIDU6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uL3V0aWxzL2dldFBocmFzZVByb3BUeXBlc1wiKTtcblxuLyoqKi8gfSksXG5cbi8qKiovIDUyOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuL0RhdGVSYW5nZVBpY2tlcklucHV0XCIpO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gNjU6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7ZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO2lmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7T2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICAgIH1cbiAgfXJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gICAgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtyZXR1cm4gQ29uc3RydWN0b3I7XG4gIH07XG59KCk7XG5cbnZhciBfcmVhY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9wcm9wVHlwZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xuXG52YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG52YXIgX21vbWVudCA9IF9fd2VicGFja19yZXF1aXJlX18oNyk7XG5cbnZhciBfbW9tZW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX21vbWVudCk7XG5cbnZhciBfcmVhY3RNb21lbnRQcm9wdHlwZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwKTtcblxudmFyIF9yZWFjdE1vbWVudFByb3B0eXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdE1vbWVudFByb3B0eXBlcyk7XG5cbnZhciBfYWlyYm5iUHJvcFR5cGVzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcblxudmFyIF9kZWZhdWx0UGhyYXNlcyA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG5cbnZhciBfZ2V0UGhyYXNlUHJvcFR5cGVzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KTtcblxudmFyIF9nZXRQaHJhc2VQcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0UGhyYXNlUHJvcFR5cGVzKTtcblxudmFyIF9EYXRlUmFuZ2VQaWNrZXJJbnB1dCA9IF9fd2VicGFja19yZXF1aXJlX18oNTIpO1xuXG52YXIgX0RhdGVSYW5nZVBpY2tlcklucHV0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0RhdGVSYW5nZVBpY2tlcklucHV0KTtcblxudmFyIF90b01vbWVudE9iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMzIpO1xuXG52YXIgX3RvTW9tZW50T2JqZWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3RvTW9tZW50T2JqZWN0KTtcblxudmFyIF90b0xvY2FsaXplZERhdGVTdHJpbmcgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMxKTtcblxudmFyIF90b0xvY2FsaXplZERhdGVTdHJpbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdG9Mb2NhbGl6ZWREYXRlU3RyaW5nKTtcblxudmFyIF90b0lTT0RhdGVTdHJpbmcgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEzKTtcblxudmFyIF90b0lTT0RhdGVTdHJpbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdG9JU09EYXRlU3RyaW5nKTtcblxudmFyIF9pc0luY2x1c2l2ZWx5QWZ0ZXJEYXkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE1KTtcblxudmFyIF9pc0luY2x1c2l2ZWx5QWZ0ZXJEYXkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaXNJbmNsdXNpdmVseUFmdGVyRGF5KTtcblxudmFyIF9pc0JlZm9yZURheSA9IF9fd2VicGFja19yZXF1aXJlX18oMzApO1xuXG52YXIgX2lzQmVmb3JlRGF5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2lzQmVmb3JlRGF5KTtcblxudmFyIF9jb25zdGFudHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikge1xuICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9O1xufVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7XG4gIGlmICghc2VsZikge1xuICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgfXJldHVybiBjYWxsICYmICgodHlwZW9mIGNhbGwgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihjYWxsKSkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjtcbn1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArICh0eXBlb2Ygc3VwZXJDbGFzcyA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKHN1cGVyQ2xhc3MpKSk7XG4gIH1zdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pO2lmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcbn1cblxudmFyIHByb3BUeXBlcyA9ICgwLCBfYWlyYm5iUHJvcFR5cGVzLmZvcmJpZEV4dHJhUHJvcHMpKHtcbiAgc3RhcnREYXRlOiBfcmVhY3RNb21lbnRQcm9wdHlwZXMyWydkZWZhdWx0J10ubW9tZW50T2JqLFxuICBzdGFydERhdGVJZDogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5zdHJpbmcsXG4gIHN0YXJ0RGF0ZVBsYWNlaG9sZGVyVGV4dDogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5zdHJpbmcsXG4gIGlzU3RhcnREYXRlRm9jdXNlZDogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5ib29sLFxuXG4gIGVuZERhdGU6IF9yZWFjdE1vbWVudFByb3B0eXBlczJbJ2RlZmF1bHQnXS5tb21lbnRPYmosXG4gIGVuZERhdGVJZDogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5zdHJpbmcsXG4gIGVuZERhdGVQbGFjZWhvbGRlclRleHQ6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uc3RyaW5nLFxuICBpc0VuZERhdGVGb2N1c2VkOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmJvb2wsXG5cbiAgc2NyZWVuUmVhZGVyTWVzc2FnZTogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5zdHJpbmcsXG4gIHNob3dDbGVhckRhdGVzOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmJvb2wsXG4gIHNob3dDYXJldDogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5ib29sLFxuICBzaG93RGVmYXVsdElucHV0SWNvbjogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5ib29sLFxuICBkaXNhYmxlZDogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5ib29sLFxuICByZXF1aXJlZDogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5ib29sLFxuICByZWFkT25seTogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5ib29sLFxuXG4gIGtlZXBPcGVuT25EYXRlU2VsZWN0OiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmJvb2wsXG4gIHJlb3BlblBpY2tlck9uQ2xlYXJEYXRlczogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5ib29sLFxuICB3aXRoRnVsbFNjcmVlblBvcnRhbDogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5ib29sLFxuICBtaW5pbXVtTmlnaHRzOiBfYWlyYm5iUHJvcFR5cGVzLm5vbk5lZ2F0aXZlSW50ZWdlcixcbiAgaXNPdXRzaWRlUmFuZ2U6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uZnVuYyxcbiAgZGlzcGxheUZvcm1hdDogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5vbmVPZlR5cGUoW19wcm9wVHlwZXMyWydkZWZhdWx0J10uc3RyaW5nLCBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmZ1bmNdKSxcblxuICBvbkZvY3VzQ2hhbmdlOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmZ1bmMsXG4gIG9uQ2xvc2U6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uZnVuYyxcbiAgb25EYXRlc0NoYW5nZTogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5mdW5jLFxuICBvbkFycm93RG93bjogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5mdW5jLFxuICBvblF1ZXN0aW9uTWFyazogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5mdW5jLFxuXG4gIGN1c3RvbUlucHV0SWNvbjogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5ub2RlLFxuICBjdXN0b21BcnJvd0ljb246IF9wcm9wVHlwZXMyWydkZWZhdWx0J10ubm9kZSxcbiAgY3VzdG9tQ2xvc2VJY29uOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLm5vZGUsXG5cbiAgLy8gYWNjZXNzaWJpbGl0eVxuICBpc0ZvY3VzZWQ6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uYm9vbCxcblxuICAvLyBpMThuXG4gIHBocmFzZXM6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uc2hhcGUoKDAsIF9nZXRQaHJhc2VQcm9wVHlwZXMyWydkZWZhdWx0J10pKF9kZWZhdWx0UGhyYXNlcy5EYXRlUmFuZ2VQaWNrZXJJbnB1dFBocmFzZXMpKSxcblxuICBpc1JUTDogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5ib29sXG59KTtcblxudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgc3RhcnREYXRlOiBudWxsLFxuICBzdGFydERhdGVJZDogX2NvbnN0YW50cy5TVEFSVF9EQVRFLFxuICBzdGFydERhdGVQbGFjZWhvbGRlclRleHQ6ICdTdGFydCBEYXRlJyxcbiAgaXNTdGFydERhdGVGb2N1c2VkOiBmYWxzZSxcblxuICBlbmREYXRlOiBudWxsLFxuICBlbmREYXRlSWQ6IF9jb25zdGFudHMuRU5EX0RBVEUsXG4gIGVuZERhdGVQbGFjZWhvbGRlclRleHQ6ICdFbmQgRGF0ZScsXG4gIGlzRW5kRGF0ZUZvY3VzZWQ6IGZhbHNlLFxuXG4gIHNjcmVlblJlYWRlck1lc3NhZ2U6ICcnLFxuICBzaG93Q2xlYXJEYXRlczogZmFsc2UsXG4gIHNob3dDYXJldDogZmFsc2UsXG4gIHNob3dEZWZhdWx0SW5wdXRJY29uOiBmYWxzZSxcbiAgZGlzYWJsZWQ6IGZhbHNlLFxuICByZXF1aXJlZDogZmFsc2UsXG4gIHJlYWRPbmx5OiBmYWxzZSxcblxuICBrZWVwT3Blbk9uRGF0ZVNlbGVjdDogZmFsc2UsXG4gIHJlb3BlblBpY2tlck9uQ2xlYXJEYXRlczogZmFsc2UsXG4gIHdpdGhGdWxsU2NyZWVuUG9ydGFsOiBmYWxzZSxcbiAgbWluaW11bU5pZ2h0czogMSxcbiAgaXNPdXRzaWRlUmFuZ2U6IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBpc091dHNpZGVSYW5nZShkYXkpIHtcbiAgICAgIHJldHVybiAhKDAsIF9pc0luY2x1c2l2ZWx5QWZ0ZXJEYXkyWydkZWZhdWx0J10pKGRheSwgKDAsIF9tb21lbnQyWydkZWZhdWx0J10pKCkpO1xuICAgIH1cblxuICAgIHJldHVybiBpc091dHNpZGVSYW5nZTtcbiAgfSgpLFxuICBkaXNwbGF5Rm9ybWF0OiBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gZGlzcGxheUZvcm1hdCgpIHtcbiAgICAgIHJldHVybiBfbW9tZW50MlsnZGVmYXVsdCddLmxvY2FsZURhdGEoKS5sb25nRGF0ZUZvcm1hdCgnTCcpO1xuICAgIH1cblxuICAgIHJldHVybiBkaXNwbGF5Rm9ybWF0O1xuICB9KCksXG5cbiAgb25Gb2N1c0NoYW5nZTogZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIG9uRm9jdXNDaGFuZ2UoKSB7fVxuXG4gICAgcmV0dXJuIG9uRm9jdXNDaGFuZ2U7XG4gIH0oKSxcbiAgb25DbG9zZTogZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIG9uQ2xvc2UoKSB7fVxuXG4gICAgcmV0dXJuIG9uQ2xvc2U7XG4gIH0oKSxcbiAgb25EYXRlc0NoYW5nZTogZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIG9uRGF0ZXNDaGFuZ2UoKSB7fVxuXG4gICAgcmV0dXJuIG9uRGF0ZXNDaGFuZ2U7XG4gIH0oKSxcbiAgb25BcnJvd0Rvd246IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBvbkFycm93RG93bigpIHt9XG5cbiAgICByZXR1cm4gb25BcnJvd0Rvd247XG4gIH0oKSxcbiAgb25RdWVzdGlvbk1hcms6IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBvblF1ZXN0aW9uTWFyaygpIHt9XG5cbiAgICByZXR1cm4gb25RdWVzdGlvbk1hcms7XG4gIH0oKSxcblxuICBjdXN0b21JbnB1dEljb246IG51bGwsXG4gIGN1c3RvbUFycm93SWNvbjogbnVsbCxcbiAgY3VzdG9tQ2xvc2VJY29uOiBudWxsLFxuXG4gIC8vIGFjY2Vzc2liaWxpdHlcbiAgaXNGb2N1c2VkOiBmYWxzZSxcblxuICAvLyBpMThuXG4gIHBocmFzZXM6IF9kZWZhdWx0UGhyYXNlcy5EYXRlUmFuZ2VQaWNrZXJJbnB1dFBocmFzZXMsXG5cbiAgaXNSVEw6IGZhbHNlXG59O1xuXG52YXIgRGF0ZVJhbmdlUGlja2VySW5wdXRDb250cm9sbGVyID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKERhdGVSYW5nZVBpY2tlcklucHV0Q29udHJvbGxlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gRGF0ZVJhbmdlUGlja2VySW5wdXRDb250cm9sbGVyKHByb3BzKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIERhdGVSYW5nZVBpY2tlcklucHV0Q29udHJvbGxlcik7XG5cbiAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoRGF0ZVJhbmdlUGlja2VySW5wdXRDb250cm9sbGVyLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoRGF0ZVJhbmdlUGlja2VySW5wdXRDb250cm9sbGVyKSkuY2FsbCh0aGlzLCBwcm9wcykpO1xuXG4gICAgX3RoaXMub25DbGVhckZvY3VzID0gX3RoaXMub25DbGVhckZvY3VzLmJpbmQoX3RoaXMpO1xuICAgIF90aGlzLm9uU3RhcnREYXRlQ2hhbmdlID0gX3RoaXMub25TdGFydERhdGVDaGFuZ2UuYmluZChfdGhpcyk7XG4gICAgX3RoaXMub25TdGFydERhdGVGb2N1cyA9IF90aGlzLm9uU3RhcnREYXRlRm9jdXMuYmluZChfdGhpcyk7XG4gICAgX3RoaXMub25FbmREYXRlQ2hhbmdlID0gX3RoaXMub25FbmREYXRlQ2hhbmdlLmJpbmQoX3RoaXMpO1xuICAgIF90aGlzLm9uRW5kRGF0ZUZvY3VzID0gX3RoaXMub25FbmREYXRlRm9jdXMuYmluZChfdGhpcyk7XG4gICAgX3RoaXMuY2xlYXJEYXRlcyA9IF90aGlzLmNsZWFyRGF0ZXMuYmluZChfdGhpcyk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKERhdGVSYW5nZVBpY2tlcklucHV0Q29udHJvbGxlciwgW3tcbiAgICBrZXk6ICdvbkNsZWFyRm9jdXMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBvbkNsZWFyRm9jdXMoKSB7XG4gICAgICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgICAgb25Gb2N1c0NoYW5nZSA9IF9wcm9wcy5vbkZvY3VzQ2hhbmdlLFxuICAgICAgICAgICAgb25DbG9zZSA9IF9wcm9wcy5vbkNsb3NlLFxuICAgICAgICAgICAgc3RhcnREYXRlID0gX3Byb3BzLnN0YXJ0RGF0ZSxcbiAgICAgICAgICAgIGVuZERhdGUgPSBfcHJvcHMuZW5kRGF0ZTtcblxuICAgICAgICBvbkZvY3VzQ2hhbmdlKG51bGwpO1xuICAgICAgICBvbkNsb3NlKHsgc3RhcnREYXRlOiBzdGFydERhdGUsIGVuZERhdGU6IGVuZERhdGUgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBvbkNsZWFyRm9jdXM7XG4gICAgfSgpXG4gIH0sIHtcbiAgICBrZXk6ICdvbkVuZERhdGVDaGFuZ2UnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBvbkVuZERhdGVDaGFuZ2UoZW5kRGF0ZVN0cmluZykge1xuICAgICAgICB2YXIgX3Byb3BzMiA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgICBzdGFydERhdGUgPSBfcHJvcHMyLnN0YXJ0RGF0ZSxcbiAgICAgICAgICAgIGlzT3V0c2lkZVJhbmdlID0gX3Byb3BzMi5pc091dHNpZGVSYW5nZSxcbiAgICAgICAgICAgIG1pbmltdW1OaWdodHMgPSBfcHJvcHMyLm1pbmltdW1OaWdodHMsXG4gICAgICAgICAgICBrZWVwT3Blbk9uRGF0ZVNlbGVjdCA9IF9wcm9wczIua2VlcE9wZW5PbkRhdGVTZWxlY3QsXG4gICAgICAgICAgICBvbkRhdGVzQ2hhbmdlID0gX3Byb3BzMi5vbkRhdGVzQ2hhbmdlO1xuXG4gICAgICAgIHZhciBlbmREYXRlID0gKDAsIF90b01vbWVudE9iamVjdDJbJ2RlZmF1bHQnXSkoZW5kRGF0ZVN0cmluZywgdGhpcy5nZXREaXNwbGF5Rm9ybWF0KCkpO1xuXG4gICAgICAgIHZhciBpc0VuZERhdGVWYWxpZCA9IGVuZERhdGUgJiYgIWlzT3V0c2lkZVJhbmdlKGVuZERhdGUpICYmICEoc3RhcnREYXRlICYmICgwLCBfaXNCZWZvcmVEYXkyWydkZWZhdWx0J10pKGVuZERhdGUsIHN0YXJ0RGF0ZS5jbG9uZSgpLmFkZChtaW5pbXVtTmlnaHRzLCAnZGF5cycpKSk7XG4gICAgICAgIGlmIChpc0VuZERhdGVWYWxpZCkge1xuICAgICAgICAgIG9uRGF0ZXNDaGFuZ2UoeyBzdGFydERhdGU6IHN0YXJ0RGF0ZSwgZW5kRGF0ZTogZW5kRGF0ZSB9KTtcbiAgICAgICAgICBpZiAoIWtlZXBPcGVuT25EYXRlU2VsZWN0KSB0aGlzLm9uQ2xlYXJGb2N1cygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG9uRGF0ZXNDaGFuZ2Uoe1xuICAgICAgICAgICAgc3RhcnREYXRlOiBzdGFydERhdGUsXG4gICAgICAgICAgICBlbmREYXRlOiBudWxsXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG9uRW5kRGF0ZUNoYW5nZTtcbiAgICB9KClcbiAgfSwge1xuICAgIGtleTogJ29uRW5kRGF0ZUZvY3VzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gb25FbmREYXRlRm9jdXMoKSB7XG4gICAgICAgIHZhciBfcHJvcHMzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICAgIHN0YXJ0RGF0ZSA9IF9wcm9wczMuc3RhcnREYXRlLFxuICAgICAgICAgICAgb25Gb2N1c0NoYW5nZSA9IF9wcm9wczMub25Gb2N1c0NoYW5nZSxcbiAgICAgICAgICAgIHdpdGhGdWxsU2NyZWVuUG9ydGFsID0gX3Byb3BzMy53aXRoRnVsbFNjcmVlblBvcnRhbCxcbiAgICAgICAgICAgIGRpc2FibGVkID0gX3Byb3BzMy5kaXNhYmxlZDtcblxuICAgICAgICBpZiAoIXN0YXJ0RGF0ZSAmJiB3aXRoRnVsbFNjcmVlblBvcnRhbCAmJiAhZGlzYWJsZWQpIHtcbiAgICAgICAgICAvLyBXaGVuIHRoZSBkYXRlcGlja2VyIGlzIGZ1bGwgc2NyZWVuLCB3ZSBuZXZlciB3YW50IHRvIGZvY3VzIHRoZSBlbmQgZGF0ZSBmaXJzdFxuICAgICAgICAgIC8vIGJlY2F1c2UgdGhlcmUncyBubyBpbmRpY2F0aW9uIHRoYXQgdGhhdCBpcyB0aGUgY2FzZSBvbmNlIHRoZSBkYXRlcGlja2VyIGlzIG9wZW4gYW5kIGl0XG4gICAgICAgICAgLy8gbWlnaHQgY29uZnVzZSB0aGUgdXNlclxuICAgICAgICAgIG9uRm9jdXNDaGFuZ2UoX2NvbnN0YW50cy5TVEFSVF9EQVRFKTtcbiAgICAgICAgfSBlbHNlIGlmICghZGlzYWJsZWQpIHtcbiAgICAgICAgICBvbkZvY3VzQ2hhbmdlKF9jb25zdGFudHMuRU5EX0RBVEUpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBvbkVuZERhdGVGb2N1cztcbiAgICB9KClcbiAgfSwge1xuICAgIGtleTogJ29uU3RhcnREYXRlQ2hhbmdlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gb25TdGFydERhdGVDaGFuZ2Uoc3RhcnREYXRlU3RyaW5nKSB7XG4gICAgICAgIHZhciBzdGFydERhdGUgPSAoMCwgX3RvTW9tZW50T2JqZWN0MlsnZGVmYXVsdCddKShzdGFydERhdGVTdHJpbmcsIHRoaXMuZ2V0RGlzcGxheUZvcm1hdCgpKTtcblxuICAgICAgICB2YXIgZW5kRGF0ZSA9IHRoaXMucHJvcHMuZW5kRGF0ZTtcbiAgICAgICAgdmFyIF9wcm9wczQgPSB0aGlzLnByb3BzLFxuICAgICAgICAgICAgaXNPdXRzaWRlUmFuZ2UgPSBfcHJvcHM0LmlzT3V0c2lkZVJhbmdlLFxuICAgICAgICAgICAgbWluaW11bU5pZ2h0cyA9IF9wcm9wczQubWluaW11bU5pZ2h0cyxcbiAgICAgICAgICAgIG9uRGF0ZXNDaGFuZ2UgPSBfcHJvcHM0Lm9uRGF0ZXNDaGFuZ2UsXG4gICAgICAgICAgICBvbkZvY3VzQ2hhbmdlID0gX3Byb3BzNC5vbkZvY3VzQ2hhbmdlO1xuXG4gICAgICAgIHZhciBpc1N0YXJ0RGF0ZVZhbGlkID0gc3RhcnREYXRlICYmICFpc091dHNpZGVSYW5nZShzdGFydERhdGUpO1xuICAgICAgICBpZiAoaXNTdGFydERhdGVWYWxpZCkge1xuICAgICAgICAgIGlmIChzdGFydERhdGUgJiYgKDAsIF9pc0JlZm9yZURheTJbJ2RlZmF1bHQnXSkoZW5kRGF0ZSwgc3RhcnREYXRlLmNsb25lKCkuYWRkKG1pbmltdW1OaWdodHMsICdkYXlzJykpKSB7XG4gICAgICAgICAgICBlbmREYXRlID0gbnVsbDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBvbkRhdGVzQ2hhbmdlKHsgc3RhcnREYXRlOiBzdGFydERhdGUsIGVuZERhdGU6IGVuZERhdGUgfSk7XG4gICAgICAgICAgb25Gb2N1c0NoYW5nZShfY29uc3RhbnRzLkVORF9EQVRFKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvbkRhdGVzQ2hhbmdlKHtcbiAgICAgICAgICAgIHN0YXJ0RGF0ZTogbnVsbCxcbiAgICAgICAgICAgIGVuZERhdGU6IGVuZERhdGVcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gb25TdGFydERhdGVDaGFuZ2U7XG4gICAgfSgpXG4gIH0sIHtcbiAgICBrZXk6ICdvblN0YXJ0RGF0ZUZvY3VzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gb25TdGFydERhdGVGb2N1cygpIHtcbiAgICAgICAgaWYgKCF0aGlzLnByb3BzLmRpc2FibGVkKSB7XG4gICAgICAgICAgdGhpcy5wcm9wcy5vbkZvY3VzQ2hhbmdlKF9jb25zdGFudHMuU1RBUlRfREFURSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG9uU3RhcnREYXRlRm9jdXM7XG4gICAgfSgpXG4gIH0sIHtcbiAgICBrZXk6ICdnZXREaXNwbGF5Rm9ybWF0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gZ2V0RGlzcGxheUZvcm1hdCgpIHtcbiAgICAgICAgdmFyIGRpc3BsYXlGb3JtYXQgPSB0aGlzLnByb3BzLmRpc3BsYXlGb3JtYXQ7XG5cbiAgICAgICAgcmV0dXJuIHR5cGVvZiBkaXNwbGF5Rm9ybWF0ID09PSAnc3RyaW5nJyA/IGRpc3BsYXlGb3JtYXQgOiBkaXNwbGF5Rm9ybWF0KCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBnZXREaXNwbGF5Rm9ybWF0O1xuICAgIH0oKVxuICB9LCB7XG4gICAga2V5OiAnZ2V0RGF0ZVN0cmluZycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIGdldERhdGVTdHJpbmcoZGF0ZSkge1xuICAgICAgICB2YXIgZGlzcGxheUZvcm1hdCA9IHRoaXMuZ2V0RGlzcGxheUZvcm1hdCgpO1xuICAgICAgICBpZiAoZGF0ZSAmJiBkaXNwbGF5Rm9ybWF0KSB7XG4gICAgICAgICAgcmV0dXJuIGRhdGUgJiYgZGF0ZS5mb3JtYXQoZGlzcGxheUZvcm1hdCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICgwLCBfdG9Mb2NhbGl6ZWREYXRlU3RyaW5nMlsnZGVmYXVsdCddKShkYXRlKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGdldERhdGVTdHJpbmc7XG4gICAgfSgpXG4gIH0sIHtcbiAgICBrZXk6ICdjbGVhckRhdGVzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gY2xlYXJEYXRlcygpIHtcbiAgICAgICAgdmFyIF9wcm9wczUgPSB0aGlzLnByb3BzLFxuICAgICAgICAgICAgb25EYXRlc0NoYW5nZSA9IF9wcm9wczUub25EYXRlc0NoYW5nZSxcbiAgICAgICAgICAgIHJlb3BlblBpY2tlck9uQ2xlYXJEYXRlcyA9IF9wcm9wczUucmVvcGVuUGlja2VyT25DbGVhckRhdGVzLFxuICAgICAgICAgICAgb25Gb2N1c0NoYW5nZSA9IF9wcm9wczUub25Gb2N1c0NoYW5nZTtcblxuICAgICAgICBvbkRhdGVzQ2hhbmdlKHsgc3RhcnREYXRlOiBudWxsLCBlbmREYXRlOiBudWxsIH0pO1xuICAgICAgICBpZiAocmVvcGVuUGlja2VyT25DbGVhckRhdGVzKSB7XG4gICAgICAgICAgb25Gb2N1c0NoYW5nZShfY29uc3RhbnRzLlNUQVJUX0RBVEUpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjbGVhckRhdGVzO1xuICAgIH0oKVxuICB9LCB7XG4gICAga2V5OiAncmVuZGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICB2YXIgX3Byb3BzNiA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgICBzdGFydERhdGUgPSBfcHJvcHM2LnN0YXJ0RGF0ZSxcbiAgICAgICAgICAgIHN0YXJ0RGF0ZUlkID0gX3Byb3BzNi5zdGFydERhdGVJZCxcbiAgICAgICAgICAgIHN0YXJ0RGF0ZVBsYWNlaG9sZGVyVGV4dCA9IF9wcm9wczYuc3RhcnREYXRlUGxhY2Vob2xkZXJUZXh0LFxuICAgICAgICAgICAgaXNTdGFydERhdGVGb2N1c2VkID0gX3Byb3BzNi5pc1N0YXJ0RGF0ZUZvY3VzZWQsXG4gICAgICAgICAgICBlbmREYXRlID0gX3Byb3BzNi5lbmREYXRlLFxuICAgICAgICAgICAgZW5kRGF0ZUlkID0gX3Byb3BzNi5lbmREYXRlSWQsXG4gICAgICAgICAgICBlbmREYXRlUGxhY2Vob2xkZXJUZXh0ID0gX3Byb3BzNi5lbmREYXRlUGxhY2Vob2xkZXJUZXh0LFxuICAgICAgICAgICAgaXNFbmREYXRlRm9jdXNlZCA9IF9wcm9wczYuaXNFbmREYXRlRm9jdXNlZCxcbiAgICAgICAgICAgIHNjcmVlblJlYWRlck1lc3NhZ2UgPSBfcHJvcHM2LnNjcmVlblJlYWRlck1lc3NhZ2UsXG4gICAgICAgICAgICBzaG93Q2xlYXJEYXRlcyA9IF9wcm9wczYuc2hvd0NsZWFyRGF0ZXMsXG4gICAgICAgICAgICBzaG93Q2FyZXQgPSBfcHJvcHM2LnNob3dDYXJldCxcbiAgICAgICAgICAgIHNob3dEZWZhdWx0SW5wdXRJY29uID0gX3Byb3BzNi5zaG93RGVmYXVsdElucHV0SWNvbixcbiAgICAgICAgICAgIGN1c3RvbUlucHV0SWNvbiA9IF9wcm9wczYuY3VzdG9tSW5wdXRJY29uLFxuICAgICAgICAgICAgY3VzdG9tQXJyb3dJY29uID0gX3Byb3BzNi5jdXN0b21BcnJvd0ljb24sXG4gICAgICAgICAgICBjdXN0b21DbG9zZUljb24gPSBfcHJvcHM2LmN1c3RvbUNsb3NlSWNvbixcbiAgICAgICAgICAgIGRpc2FibGVkID0gX3Byb3BzNi5kaXNhYmxlZCxcbiAgICAgICAgICAgIHJlcXVpcmVkID0gX3Byb3BzNi5yZXF1aXJlZCxcbiAgICAgICAgICAgIHJlYWRPbmx5ID0gX3Byb3BzNi5yZWFkT25seSxcbiAgICAgICAgICAgIGlzRm9jdXNlZCA9IF9wcm9wczYuaXNGb2N1c2VkLFxuICAgICAgICAgICAgcGhyYXNlcyA9IF9wcm9wczYucGhyYXNlcyxcbiAgICAgICAgICAgIG9uQXJyb3dEb3duID0gX3Byb3BzNi5vbkFycm93RG93bixcbiAgICAgICAgICAgIG9uUXVlc3Rpb25NYXJrID0gX3Byb3BzNi5vblF1ZXN0aW9uTWFyayxcbiAgICAgICAgICAgIGlzUlRMID0gX3Byb3BzNi5pc1JUTDtcblxuICAgICAgICB2YXIgc3RhcnREYXRlU3RyaW5nID0gdGhpcy5nZXREYXRlU3RyaW5nKHN0YXJ0RGF0ZSk7XG4gICAgICAgIHZhciBzdGFydERhdGVWYWx1ZSA9ICgwLCBfdG9JU09EYXRlU3RyaW5nMlsnZGVmYXVsdCddKShzdGFydERhdGUpO1xuICAgICAgICB2YXIgZW5kRGF0ZVN0cmluZyA9IHRoaXMuZ2V0RGF0ZVN0cmluZyhlbmREYXRlKTtcbiAgICAgICAgdmFyIGVuZERhdGVWYWx1ZSA9ICgwLCBfdG9JU09EYXRlU3RyaW5nMlsnZGVmYXVsdCddKShlbmREYXRlKTtcblxuICAgICAgICByZXR1cm4gX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoX0RhdGVSYW5nZVBpY2tlcklucHV0MlsnZGVmYXVsdCddLCB7XG4gICAgICAgICAgc3RhcnREYXRlOiBzdGFydERhdGVTdHJpbmcsXG4gICAgICAgICAgc3RhcnREYXRlVmFsdWU6IHN0YXJ0RGF0ZVZhbHVlLFxuICAgICAgICAgIHN0YXJ0RGF0ZUlkOiBzdGFydERhdGVJZCxcbiAgICAgICAgICBzdGFydERhdGVQbGFjZWhvbGRlclRleHQ6IHN0YXJ0RGF0ZVBsYWNlaG9sZGVyVGV4dCxcbiAgICAgICAgICBpc1N0YXJ0RGF0ZUZvY3VzZWQ6IGlzU3RhcnREYXRlRm9jdXNlZCxcbiAgICAgICAgICBlbmREYXRlOiBlbmREYXRlU3RyaW5nLFxuICAgICAgICAgIGVuZERhdGVWYWx1ZTogZW5kRGF0ZVZhbHVlLFxuICAgICAgICAgIGVuZERhdGVJZDogZW5kRGF0ZUlkLFxuICAgICAgICAgIGVuZERhdGVQbGFjZWhvbGRlclRleHQ6IGVuZERhdGVQbGFjZWhvbGRlclRleHQsXG4gICAgICAgICAgaXNFbmREYXRlRm9jdXNlZDogaXNFbmREYXRlRm9jdXNlZCxcbiAgICAgICAgICBpc0ZvY3VzZWQ6IGlzRm9jdXNlZCxcbiAgICAgICAgICBkaXNhYmxlZDogZGlzYWJsZWQsXG4gICAgICAgICAgcmVxdWlyZWQ6IHJlcXVpcmVkLFxuICAgICAgICAgIHJlYWRPbmx5OiByZWFkT25seSxcbiAgICAgICAgICBzaG93Q2FyZXQ6IHNob3dDYXJldCxcbiAgICAgICAgICBzaG93RGVmYXVsdElucHV0SWNvbjogc2hvd0RlZmF1bHRJbnB1dEljb24sXG4gICAgICAgICAgY3VzdG9tSW5wdXRJY29uOiBjdXN0b21JbnB1dEljb24sXG4gICAgICAgICAgY3VzdG9tQXJyb3dJY29uOiBjdXN0b21BcnJvd0ljb24sXG4gICAgICAgICAgY3VzdG9tQ2xvc2VJY29uOiBjdXN0b21DbG9zZUljb24sXG4gICAgICAgICAgcGhyYXNlczogcGhyYXNlcyxcbiAgICAgICAgICBvblN0YXJ0RGF0ZUNoYW5nZTogdGhpcy5vblN0YXJ0RGF0ZUNoYW5nZSxcbiAgICAgICAgICBvblN0YXJ0RGF0ZUZvY3VzOiB0aGlzLm9uU3RhcnREYXRlRm9jdXMsXG4gICAgICAgICAgb25TdGFydERhdGVTaGlmdFRhYjogdGhpcy5vbkNsZWFyRm9jdXMsXG4gICAgICAgICAgb25FbmREYXRlQ2hhbmdlOiB0aGlzLm9uRW5kRGF0ZUNoYW5nZSxcbiAgICAgICAgICBvbkVuZERhdGVGb2N1czogdGhpcy5vbkVuZERhdGVGb2N1cyxcbiAgICAgICAgICBvbkVuZERhdGVUYWI6IHRoaXMub25DbGVhckZvY3VzLFxuICAgICAgICAgIHNob3dDbGVhckRhdGVzOiBzaG93Q2xlYXJEYXRlcyxcbiAgICAgICAgICBvbkNsZWFyRGF0ZXM6IHRoaXMuY2xlYXJEYXRlcyxcbiAgICAgICAgICBzY3JlZW5SZWFkZXJNZXNzYWdlOiBzY3JlZW5SZWFkZXJNZXNzYWdlLFxuICAgICAgICAgIG9uQXJyb3dEb3duOiBvbkFycm93RG93bixcbiAgICAgICAgICBvblF1ZXN0aW9uTWFyazogb25RdWVzdGlvbk1hcmssXG4gICAgICAgICAgaXNSVEw6IGlzUlRMXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVuZGVyO1xuICAgIH0oKVxuICB9XSk7XG5cbiAgcmV0dXJuIERhdGVSYW5nZVBpY2tlcklucHV0Q29udHJvbGxlcjtcbn0oX3JlYWN0MlsnZGVmYXVsdCddLkNvbXBvbmVudCk7XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IERhdGVSYW5nZVBpY2tlcklucHV0Q29udHJvbGxlcjtcblxuRGF0ZVJhbmdlUGlja2VySW5wdXRDb250cm9sbGVyLnByb3BUeXBlcyA9IHByb3BUeXBlcztcbkRhdGVSYW5nZVBpY2tlcklucHV0Q29udHJvbGxlci5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5cbi8qKiovIH0pLFxuXG4vKioqLyA3OlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJtb21lbnRcIik7XG5cbi8qKiovIH0pXG5cbi8qKioqKiovIH0pOyIsIm1vZHVsZS5leHBvcnRzID1cbi8qKioqKiovIChmdW5jdGlvbihtb2R1bGVzKSB7IC8vIHdlYnBhY2tCb290c3RyYXBcbi8qKioqKiovIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbi8qKioqKiovIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbi8qKioqKiovIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuLyoqKioqKi8gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4vKioqKioqLyBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuLyoqKioqKi8gXHRcdFx0aTogbW9kdWxlSWQsXG4vKioqKioqLyBcdFx0XHRsOiBmYWxzZSxcbi8qKioqKiovIFx0XHRcdGV4cG9ydHM6IHt9XG4vKioqKioqLyBcdFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4vKioqKioqLyBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbi8qKioqKiovIFx0XHRtb2R1bGUubCA9IHRydWU7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4vKioqKioqLyBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuLyoqKioqKi8gXHR9XG4vKioqKioqL1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBpZGVudGl0eSBmdW5jdGlvbiBmb3IgY2FsbGluZyBoYXJtb255IGltcG9ydHMgd2l0aCB0aGUgY29ycmVjdCBjb250ZXh0XG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uaSA9IGZ1bmN0aW9uKHZhbHVlKSB7IHJldHVybiB2YWx1ZTsgfTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbi8qKioqKiovIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4vKioqKioqLyBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwge1xuLyoqKioqKi8gXHRcdFx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxuLyoqKioqKi8gXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuLyoqKioqKi8gXHRcdFx0XHRnZXQ6IGdldHRlclxuLyoqKioqKi8gXHRcdFx0fSk7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4vKioqKioqLyBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4vKioqKioqLyBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuLyoqKioqKi8gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4vKioqKioqLyBcdFx0cmV0dXJuIGdldHRlcjtcbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vKioqKioqLyBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDY0KTtcbi8qKioqKiovIH0pXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKioqKi8gKHtcblxuLyoqKi8gMDpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwicmVhY3RcIik7XG5cbi8qKiovIH0pLFxuXG4vKioqLyAxOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJhaXJibmItcHJvcC10eXBlc1wiKTtcblxuLyoqKi8gfSksXG5cbi8qKiovIDExOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX3JlYWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IFwiZGVmYXVsdFwiOiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBTVkcgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoU1ZHLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBTVkcoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFNWRyk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKFNWRy5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFNWRykpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFNWRywgW3tcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIF9yZWFjdDJbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgXCJzdmdcIixcbiAgICAgICAgICBfZXh0ZW5kcyh7IHZpZXdCb3g6IFwiMCAwIDEyIDEyXCIgfSwgdGhpcy5wcm9wcyksXG4gICAgICAgICAgX3JlYWN0MltcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChcInBhdGhcIiwgeyBmaWxsUnVsZTogXCJldmVub2RkXCIsIGQ6IFwiTTExLjUzLjQ3YS43NS43NSAwIDAgMC0xLjA2MSAwbC00LjQ3IDQuNDdMMS41MjkuNDdBLjc1Ljc1IDAgMSAwIC40NjggMS41MzFsNC40NyA0LjQ3LTQuNDcgNC40N2EuNzUuNzUgMCAxIDAgMS4wNjEgMS4wNjFsNC40Ny00LjQ3IDQuNDcgNC40N2EuNzUuNzUgMCAxIDAgMS4wNjEtMS4wNjFsLTQuNDctNC40NyA0LjQ3LTQuNDdhLjc1Ljc1IDAgMCAwIDAtMS4wNjF6XCIgfSlcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlbmRlcjtcbiAgICB9KClcbiAgfV0pO1xuXG4gIHJldHVybiBTVkc7XG59KF9yZWFjdDJbXCJkZWZhdWx0XCJdLkNvbXBvbmVudCk7XG5cbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gU1ZHO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gMjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vZGVmYXVsdFBocmFzZXNcIik7XG5cbi8qKiovIH0pLFxuXG4vKioqLyAyMzpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9yZWFjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBcImRlZmF1bHRcIjogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgU1ZHID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFNWRywgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gU1ZHKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTVkcpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChTVkcuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihTVkcpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhTVkcsIFt7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiBfcmVhY3QyW1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgIFwic3ZnXCIsXG4gICAgICAgICAgX2V4dGVuZHMoeyB2aWV3Qm94OiBcIjAgMCAxMDAwIDEwMDBcIiB9LCB0aGlzLnByb3BzKSxcbiAgICAgICAgICBfcmVhY3QyW1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7IGQ6IFwiTTMzNi4yIDI3NC41bC0yMTAuMSAyMTBoODA1LjRjMTMgMCAyMyAxMCAyMyAyM3MtMTAgMjMtMjMgMjNIMTI2LjFsMjEwLjEgMjEwLjFjMTEgMTEgMTEgMjEgMCAzMi01IDUtMTAgNy0xNiA3cy0xMS0yLTE2LTdsLTI0OS4xLTI0OWMtMTEtMTEtMTEtMjEgMC0zMmwyNDkuMS0yNDkuMWMyMS0yMS4xIDUzIDEwLjkgMzIgMzJ6XCIgfSlcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlbmRlcjtcbiAgICB9KClcbiAgfV0pO1xuXG4gIHJldHVybiBTVkc7XG59KF9yZWFjdDJbXCJkZWZhdWx0XCJdLkNvbXBvbmVudCk7XG5cbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gU1ZHO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gMjQ6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfcmVhY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgXCJkZWZhdWx0XCI6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIFNWRyA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhTVkcsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFNWRygpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU1ZHKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoU1ZHLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoU1ZHKSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoU1ZHLCBbe1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gX3JlYWN0MltcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChcbiAgICAgICAgICBcInN2Z1wiLFxuICAgICAgICAgIF9leHRlbmRzKHsgdmlld0JveDogXCIwIDAgMTAwMCAxMDAwXCIgfSwgdGhpcy5wcm9wcyksXG4gICAgICAgICAgX3JlYWN0MltcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChcInBhdGhcIiwgeyBkOiBcIk02OTQuNCAyNDIuNGwyNDkuMSAyNDkuMWMxMSAxMSAxMSAyMSAwIDMyTDY5NC40IDc3Mi43Yy01IDUtMTAgNy0xNiA3cy0xMS0yLTE2LTdjLTExLTExLTExLTIxIDAtMzJsMjEwLjEtMjEwLjFINjcuMWMtMTMgMC0yMy0xMC0yMy0yM3MxMC0yMyAyMy0yM2g4MDUuNEw2NjIuNCAyNzQuNWMtMjEtMjEuMSAxMS01My4xIDMyLTMyLjF6XCIgfSlcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlbmRlcjtcbiAgICB9KClcbiAgfV0pO1xuXG4gIHJldHVybiBTVkc7XG59KF9yZWFjdDJbXCJkZWZhdWx0XCJdLkNvbXBvbmVudCk7XG5cbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gU1ZHO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gMjU6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfcmVhY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgXCJkZWZhdWx0XCI6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIFNWRyA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhTVkcsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFNWRygpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU1ZHKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoU1ZHLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoU1ZHKSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoU1ZHLCBbe1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gX3JlYWN0MltcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChcbiAgICAgICAgICBcInN2Z1wiLFxuICAgICAgICAgIF9leHRlbmRzKHsgeG1sbnM6IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiwgdmlld0JveDogXCIwIDAgMTM5My4xIDE1MDBcIiB9LCB0aGlzLnByb3BzKSxcbiAgICAgICAgICBfcmVhY3QyW1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7IGQ6IFwiTTEwNy4yIDEzOTIuOWgyNDEuMXYtMjQxLjFIMTA3LjJ2MjQxLjF6bTI5NC43IDBoMjY3Ljl2LTI0MS4xSDQwMS45djI0MS4xem0tMjk0LjctMjk0LjdoMjQxLjFWODMwLjRIMTA3LjJ2MjY3Ljh6bTI5NC43IDBoMjY3LjlWODMwLjRINDAxLjl2MjY3Ljh6TTEwNy4yIDc3Ni44aDI0MS4xVjUzNS43SDEwNy4ydjI0MS4xem02MTYuMiA2MTYuMWgyNjcuOXYtMjQxLjFINzIzLjR2MjQxLjF6TTQwMS45IDc3Ni44aDI2Ny45VjUzNS43SDQwMS45djI0MS4xem02NDIuOSA2MTYuMUgxMjg2di0yNDEuMWgtMjQxLjF2MjQxLjF6bS0zMjEuNC0yOTQuN2gyNjcuOVY4MzAuNEg3MjMuNHYyNjcuOHpNNDI4LjcgMzc1VjEzMy45YzAtNy4zLTIuNy0xMy41LTgtMTguOC01LjMtNS4zLTExLjYtOC0xOC44LThoLTUzLjZjLTcuMyAwLTEzLjUgMi43LTE4LjggOC01LjMgNS4zLTggMTEuNi04IDE4LjhWMzc1YzAgNy4zIDIuNyAxMy41IDggMTguOCA1LjMgNS4zIDExLjYgOCAxOC44IDhoNTMuNmM3LjMgMCAxMy41LTIuNyAxOC44LTggNS4zLTUuMyA4LTExLjUgOC0xOC44em02MTYuMSA3MjMuMkgxMjg2VjgzMC40aC0yNDEuMXYyNjcuOHpNNzIzLjQgNzc2LjhoMjY3LjlWNTM1LjdINzIzLjR2MjQxLjF6bTMyMS40IDBIMTI4NlY1MzUuN2gtMjQxLjF2MjQxLjF6bTI2LjgtNDAxLjhWMTMzLjljMC03LjMtMi43LTEzLjUtOC0xOC44LTUuMy01LjMtMTEuNi04LTE4LjgtOGgtNTMuNmMtNy4zIDAtMTMuNSAyLjctMTguOCA4LTUuMyA1LjMtOCAxMS42LTggMTguOFYzNzVjMCA3LjMgMi43IDEzLjUgOCAxOC44IDUuMyA1LjMgMTEuNiA4IDE4LjggOGg1My42YzcuMyAwIDEzLjUtMi43IDE4LjgtOCA1LjQtNS4zIDgtMTEuNSA4LTE4Ljh6bTMyMS41LTUzLjZ2MTA3MS40YzAgMjktMTAuNiA1NC4xLTMxLjggNzUuMy0yMS4yIDIxLjItNDYuMyAzMS44LTc1LjMgMzEuOEgxMDcuMmMtMjkgMC01NC4xLTEwLjYtNzUuMy0zMS44QzEwLjYgMTQ0NyAwIDE0MjEuOSAwIDEzOTIuOVYzMjEuNGMwLTI5IDEwLjYtNTQuMSAzMS44LTc1LjNzNDYuMy0zMS44IDc1LjMtMzEuOGgxMDcuMnYtODAuNGMwLTM2LjggMTMuMS02OC40IDM5LjMtOTQuNlMzMTEuNCAwIDM0OC4zIDBoNTMuNmMzNi44IDAgNjguNCAxMy4xIDk0LjYgMzkuMyAyNi4yIDI2LjIgMzkuMyA1Ny44IDM5LjMgOTQuNnY4MC40aDMyMS41di04MC40YzAtMzYuOCAxMy4xLTY4LjQgMzkuMy05NC42QzkyMi45IDEzLjEgOTU0LjQgMCA5OTEuMyAwaDUzLjZjMzYuOCAwIDY4LjQgMTMuMSA5NC42IDM5LjNzMzkuMyA1Ny44IDM5LjMgOTQuNnY4MC40SDEyODZjMjkgMCA1NC4xIDEwLjYgNzUuMyAzMS44IDIxLjIgMjEuMiAzMS44IDQ2LjMgMzEuOCA3NS4zelwiIH0pXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZW5kZXI7XG4gICAgfSgpXG4gIH1dKTtcblxuICByZXR1cm4gU1ZHO1xufShfcmVhY3QyW1wiZGVmYXVsdFwiXS5Db21wb25lbnQpO1xuXG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IFNWRztcblxuLyoqKi8gfSksXG5cbi8qKiovIDM6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInByb3AtdHlwZXNcIik7XG5cbi8qKiovIH0pLFxuXG4vKioqLyAzMzpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi9EYXRlSW5wdXRcIik7XG5cbi8qKiovIH0pLFxuXG4vKioqLyA0OlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi9jb25zdGFudHNcIik7XG5cbi8qKiovIH0pLFxuXG4vKioqLyA1OlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi91dGlscy9nZXRQaHJhc2VQcm9wVHlwZXNcIik7XG5cbi8qKiovIH0pLFxuXG4vKioqLyA2OlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gNjQ6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7ZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO2lmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7T2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICAgIH1cbiAgfXJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gICAgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtyZXR1cm4gQ29uc3RydWN0b3I7XG4gIH07XG59KCk7XG5cbnZhciBfcmVhY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9wcm9wVHlwZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xuXG52YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG52YXIgX2FpcmJuYlByb3BUeXBlcyA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG5cbnZhciBfY2xhc3NuYW1lcyA9IF9fd2VicGFja19yZXF1aXJlX18oNik7XG5cbnZhciBfY2xhc3NuYW1lczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc25hbWVzKTtcblxudmFyIF9kZWZhdWx0UGhyYXNlcyA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG5cbnZhciBfZ2V0UGhyYXNlUHJvcFR5cGVzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KTtcblxudmFyIF9nZXRQaHJhc2VQcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0UGhyYXNlUHJvcFR5cGVzKTtcblxudmFyIF9EYXRlSW5wdXQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMzKTtcblxudmFyIF9EYXRlSW5wdXQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfRGF0ZUlucHV0KTtcblxudmFyIF9hcnJvd1JpZ2h0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNCk7XG5cbnZhciBfYXJyb3dSaWdodDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9hcnJvd1JpZ2h0KTtcblxudmFyIF9hcnJvd0xlZnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIzKTtcblxudmFyIF9hcnJvd0xlZnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYXJyb3dMZWZ0KTtcblxudmFyIF9jbG9zZSA9IF9fd2VicGFja19yZXF1aXJlX18oMTEpO1xuXG52YXIgX2Nsb3NlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Nsb3NlKTtcblxudmFyIF9jYWxlbmRhciA9IF9fd2VicGFja19yZXF1aXJlX18oMjUpO1xuXG52YXIgX2NhbGVuZGFyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NhbGVuZGFyKTtcblxudmFyIF9jb25zdGFudHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikge1xuICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9O1xufVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7XG4gIGlmICghc2VsZikge1xuICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgfXJldHVybiBjYWxsICYmICgodHlwZW9mIGNhbGwgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihjYWxsKSkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjtcbn1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArICh0eXBlb2Ygc3VwZXJDbGFzcyA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKHN1cGVyQ2xhc3MpKSk7XG4gIH1zdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pO2lmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcbn1cblxudmFyIHByb3BUeXBlcyA9ICgwLCBfYWlyYm5iUHJvcFR5cGVzLmZvcmJpZEV4dHJhUHJvcHMpKHtcbiAgc3RhcnREYXRlSWQ6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uc3RyaW5nLFxuICBzdGFydERhdGVQbGFjZWhvbGRlclRleHQ6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uc3RyaW5nLFxuICBzY3JlZW5SZWFkZXJNZXNzYWdlOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLnN0cmluZyxcblxuICBlbmREYXRlSWQ6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uc3RyaW5nLFxuICBlbmREYXRlUGxhY2Vob2xkZXJUZXh0OiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLnN0cmluZyxcblxuICBvblN0YXJ0RGF0ZUZvY3VzOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmZ1bmMsXG4gIG9uRW5kRGF0ZUZvY3VzOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmZ1bmMsXG4gIG9uU3RhcnREYXRlQ2hhbmdlOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmZ1bmMsXG4gIG9uRW5kRGF0ZUNoYW5nZTogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5mdW5jLFxuICBvblN0YXJ0RGF0ZVNoaWZ0VGFiOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmZ1bmMsXG4gIG9uRW5kRGF0ZVRhYjogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5mdW5jLFxuICBvbkNsZWFyRGF0ZXM6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uZnVuYyxcbiAgb25BcnJvd0Rvd246IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uZnVuYyxcbiAgb25RdWVzdGlvbk1hcms6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uZnVuYyxcblxuICBzdGFydERhdGU6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uc3RyaW5nLFxuICBzdGFydERhdGVWYWx1ZTogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5zdHJpbmcsXG4gIGVuZERhdGU6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uc3RyaW5nLFxuICBlbmREYXRlVmFsdWU6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uc3RyaW5nLFxuXG4gIGlzU3RhcnREYXRlRm9jdXNlZDogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5ib29sLFxuICBpc0VuZERhdGVGb2N1c2VkOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmJvb2wsXG4gIHNob3dDbGVhckRhdGVzOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmJvb2wsXG4gIGRpc2FibGVkOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmJvb2wsXG4gIHJlcXVpcmVkOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmJvb2wsXG4gIHJlYWRPbmx5OiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmJvb2wsXG4gIHNob3dDYXJldDogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5ib29sLFxuICBzaG93RGVmYXVsdElucHV0SWNvbjogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5ib29sLFxuICBjdXN0b21JbnB1dEljb246IF9wcm9wVHlwZXMyWydkZWZhdWx0J10ubm9kZSxcbiAgY3VzdG9tQXJyb3dJY29uOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLm5vZGUsXG4gIGN1c3RvbUNsb3NlSWNvbjogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5ub2RlLFxuXG4gIC8vIGFjY2Vzc2liaWxpdHlcbiAgaXNGb2N1c2VkOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmJvb2wsIC8vIGRlc2NyaWJlcyBhY3R1YWwgRE9NIGZvY3VzXG5cbiAgLy8gaTE4blxuICBwaHJhc2VzOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLnNoYXBlKCgwLCBfZ2V0UGhyYXNlUHJvcFR5cGVzMlsnZGVmYXVsdCddKShfZGVmYXVsdFBocmFzZXMuRGF0ZVJhbmdlUGlja2VySW5wdXRQaHJhc2VzKSksXG5cbiAgaXNSVEw6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uYm9vbFxufSk7XG5cbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIHN0YXJ0RGF0ZUlkOiBfY29uc3RhbnRzLlNUQVJUX0RBVEUsXG4gIGVuZERhdGVJZDogX2NvbnN0YW50cy5FTkRfREFURSxcbiAgc3RhcnREYXRlUGxhY2Vob2xkZXJUZXh0OiAnU3RhcnQgRGF0ZScsXG4gIGVuZERhdGVQbGFjZWhvbGRlclRleHQ6ICdFbmQgRGF0ZScsXG4gIHNjcmVlblJlYWRlck1lc3NhZ2U6ICcnLFxuICBvblN0YXJ0RGF0ZUZvY3VzOiBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gb25TdGFydERhdGVGb2N1cygpIHt9XG5cbiAgICByZXR1cm4gb25TdGFydERhdGVGb2N1cztcbiAgfSgpLFxuICBvbkVuZERhdGVGb2N1czogZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIG9uRW5kRGF0ZUZvY3VzKCkge31cblxuICAgIHJldHVybiBvbkVuZERhdGVGb2N1cztcbiAgfSgpLFxuICBvblN0YXJ0RGF0ZUNoYW5nZTogZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIG9uU3RhcnREYXRlQ2hhbmdlKCkge31cblxuICAgIHJldHVybiBvblN0YXJ0RGF0ZUNoYW5nZTtcbiAgfSgpLFxuICBvbkVuZERhdGVDaGFuZ2U6IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBvbkVuZERhdGVDaGFuZ2UoKSB7fVxuXG4gICAgcmV0dXJuIG9uRW5kRGF0ZUNoYW5nZTtcbiAgfSgpLFxuICBvblN0YXJ0RGF0ZVNoaWZ0VGFiOiBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gb25TdGFydERhdGVTaGlmdFRhYigpIHt9XG5cbiAgICByZXR1cm4gb25TdGFydERhdGVTaGlmdFRhYjtcbiAgfSgpLFxuICBvbkVuZERhdGVUYWI6IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBvbkVuZERhdGVUYWIoKSB7fVxuXG4gICAgcmV0dXJuIG9uRW5kRGF0ZVRhYjtcbiAgfSgpLFxuICBvbkNsZWFyRGF0ZXM6IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBvbkNsZWFyRGF0ZXMoKSB7fVxuXG4gICAgcmV0dXJuIG9uQ2xlYXJEYXRlcztcbiAgfSgpLFxuICBvbkFycm93RG93bjogZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIG9uQXJyb3dEb3duKCkge31cblxuICAgIHJldHVybiBvbkFycm93RG93bjtcbiAgfSgpLFxuICBvblF1ZXN0aW9uTWFyazogZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIG9uUXVlc3Rpb25NYXJrKCkge31cblxuICAgIHJldHVybiBvblF1ZXN0aW9uTWFyaztcbiAgfSgpLFxuXG4gIHN0YXJ0RGF0ZTogJycsXG4gIHN0YXJ0RGF0ZVZhbHVlOiAnJyxcbiAgZW5kRGF0ZTogJycsXG4gIGVuZERhdGVWYWx1ZTogJycsXG5cbiAgaXNTdGFydERhdGVGb2N1c2VkOiBmYWxzZSxcbiAgaXNFbmREYXRlRm9jdXNlZDogZmFsc2UsXG4gIHNob3dDbGVhckRhdGVzOiBmYWxzZSxcbiAgZGlzYWJsZWQ6IGZhbHNlLFxuICByZXF1aXJlZDogZmFsc2UsXG4gIHJlYWRPbmx5OiBmYWxzZSxcbiAgc2hvd0NhcmV0OiBmYWxzZSxcbiAgc2hvd0RlZmF1bHRJbnB1dEljb246IGZhbHNlLFxuICBjdXN0b21JbnB1dEljb246IG51bGwsXG4gIGN1c3RvbUFycm93SWNvbjogbnVsbCxcbiAgY3VzdG9tQ2xvc2VJY29uOiBudWxsLFxuXG4gIC8vIGFjY2Vzc2liaWxpdHlcbiAgaXNGb2N1c2VkOiBmYWxzZSxcblxuICAvLyBpMThuXG4gIHBocmFzZXM6IF9kZWZhdWx0UGhyYXNlcy5EYXRlUmFuZ2VQaWNrZXJJbnB1dFBocmFzZXMsXG5cbiAgaXNSVEw6IGZhbHNlXG59O1xuXG52YXIgRGF0ZVJhbmdlUGlja2VySW5wdXQgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoRGF0ZVJhbmdlUGlja2VySW5wdXQsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIERhdGVSYW5nZVBpY2tlcklucHV0KHByb3BzKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIERhdGVSYW5nZVBpY2tlcklucHV0KTtcblxuICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChEYXRlUmFuZ2VQaWNrZXJJbnB1dC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKERhdGVSYW5nZVBpY2tlcklucHV0KSkuY2FsbCh0aGlzLCBwcm9wcykpO1xuXG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBpc0NsZWFyRGF0ZXNIb3ZlcmVkOiBmYWxzZVxuICAgIH07XG5cbiAgICBfdGhpcy5vbkNsZWFyRGF0ZXNNb3VzZUVudGVyID0gX3RoaXMub25DbGVhckRhdGVzTW91c2VFbnRlci5iaW5kKF90aGlzKTtcbiAgICBfdGhpcy5vbkNsZWFyRGF0ZXNNb3VzZUxlYXZlID0gX3RoaXMub25DbGVhckRhdGVzTW91c2VMZWF2ZS5iaW5kKF90aGlzKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoRGF0ZVJhbmdlUGlja2VySW5wdXQsIFt7XG4gICAga2V5OiAnb25DbGVhckRhdGVzTW91c2VFbnRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIG9uQ2xlYXJEYXRlc01vdXNlRW50ZXIoKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIGlzQ2xlYXJEYXRlc0hvdmVyZWQ6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBvbkNsZWFyRGF0ZXNNb3VzZUVudGVyO1xuICAgIH0oKVxuICB9LCB7XG4gICAga2V5OiAnb25DbGVhckRhdGVzTW91c2VMZWF2ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIG9uQ2xlYXJEYXRlc01vdXNlTGVhdmUoKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIGlzQ2xlYXJEYXRlc0hvdmVyZWQ6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gb25DbGVhckRhdGVzTW91c2VMZWF2ZTtcbiAgICB9KClcbiAgfSwge1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgdmFyIGlzQ2xlYXJEYXRlc0hvdmVyZWQgPSB0aGlzLnN0YXRlLmlzQ2xlYXJEYXRlc0hvdmVyZWQ7XG4gICAgICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgICAgc3RhcnREYXRlID0gX3Byb3BzLnN0YXJ0RGF0ZSxcbiAgICAgICAgICAgIHN0YXJ0RGF0ZVZhbHVlID0gX3Byb3BzLnN0YXJ0RGF0ZVZhbHVlLFxuICAgICAgICAgICAgc3RhcnREYXRlSWQgPSBfcHJvcHMuc3RhcnREYXRlSWQsXG4gICAgICAgICAgICBzdGFydERhdGVQbGFjZWhvbGRlclRleHQgPSBfcHJvcHMuc3RhcnREYXRlUGxhY2Vob2xkZXJUZXh0LFxuICAgICAgICAgICAgc2NyZWVuUmVhZGVyTWVzc2FnZSA9IF9wcm9wcy5zY3JlZW5SZWFkZXJNZXNzYWdlLFxuICAgICAgICAgICAgaXNTdGFydERhdGVGb2N1c2VkID0gX3Byb3BzLmlzU3RhcnREYXRlRm9jdXNlZCxcbiAgICAgICAgICAgIG9uU3RhcnREYXRlQ2hhbmdlID0gX3Byb3BzLm9uU3RhcnREYXRlQ2hhbmdlLFxuICAgICAgICAgICAgb25TdGFydERhdGVGb2N1cyA9IF9wcm9wcy5vblN0YXJ0RGF0ZUZvY3VzLFxuICAgICAgICAgICAgb25TdGFydERhdGVTaGlmdFRhYiA9IF9wcm9wcy5vblN0YXJ0RGF0ZVNoaWZ0VGFiLFxuICAgICAgICAgICAgZW5kRGF0ZSA9IF9wcm9wcy5lbmREYXRlLFxuICAgICAgICAgICAgZW5kRGF0ZVZhbHVlID0gX3Byb3BzLmVuZERhdGVWYWx1ZSxcbiAgICAgICAgICAgIGVuZERhdGVJZCA9IF9wcm9wcy5lbmREYXRlSWQsXG4gICAgICAgICAgICBlbmREYXRlUGxhY2Vob2xkZXJUZXh0ID0gX3Byb3BzLmVuZERhdGVQbGFjZWhvbGRlclRleHQsXG4gICAgICAgICAgICBpc0VuZERhdGVGb2N1c2VkID0gX3Byb3BzLmlzRW5kRGF0ZUZvY3VzZWQsXG4gICAgICAgICAgICBvbkVuZERhdGVDaGFuZ2UgPSBfcHJvcHMub25FbmREYXRlQ2hhbmdlLFxuICAgICAgICAgICAgb25FbmREYXRlRm9jdXMgPSBfcHJvcHMub25FbmREYXRlRm9jdXMsXG4gICAgICAgICAgICBvbkVuZERhdGVUYWIgPSBfcHJvcHMub25FbmREYXRlVGFiLFxuICAgICAgICAgICAgb25BcnJvd0Rvd24gPSBfcHJvcHMub25BcnJvd0Rvd24sXG4gICAgICAgICAgICBvblF1ZXN0aW9uTWFyayA9IF9wcm9wcy5vblF1ZXN0aW9uTWFyayxcbiAgICAgICAgICAgIG9uQ2xlYXJEYXRlcyA9IF9wcm9wcy5vbkNsZWFyRGF0ZXMsXG4gICAgICAgICAgICBzaG93Q2xlYXJEYXRlcyA9IF9wcm9wcy5zaG93Q2xlYXJEYXRlcyxcbiAgICAgICAgICAgIGRpc2FibGVkID0gX3Byb3BzLmRpc2FibGVkLFxuICAgICAgICAgICAgcmVxdWlyZWQgPSBfcHJvcHMucmVxdWlyZWQsXG4gICAgICAgICAgICByZWFkT25seSA9IF9wcm9wcy5yZWFkT25seSxcbiAgICAgICAgICAgIHNob3dDYXJldCA9IF9wcm9wcy5zaG93Q2FyZXQsXG4gICAgICAgICAgICBzaG93RGVmYXVsdElucHV0SWNvbiA9IF9wcm9wcy5zaG93RGVmYXVsdElucHV0SWNvbixcbiAgICAgICAgICAgIGN1c3RvbUlucHV0SWNvbiA9IF9wcm9wcy5jdXN0b21JbnB1dEljb24sXG4gICAgICAgICAgICBjdXN0b21BcnJvd0ljb24gPSBfcHJvcHMuY3VzdG9tQXJyb3dJY29uLFxuICAgICAgICAgICAgY3VzdG9tQ2xvc2VJY29uID0gX3Byb3BzLmN1c3RvbUNsb3NlSWNvbixcbiAgICAgICAgICAgIGlzRm9jdXNlZCA9IF9wcm9wcy5pc0ZvY3VzZWQsXG4gICAgICAgICAgICBwaHJhc2VzID0gX3Byb3BzLnBocmFzZXMsXG4gICAgICAgICAgICBpc1JUTCA9IF9wcm9wcy5pc1JUTDtcblxuICAgICAgICB2YXIgaW5wdXRJY29uID0gY3VzdG9tSW5wdXRJY29uIHx8IF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KF9jYWxlbmRhcjJbJ2RlZmF1bHQnXSwgbnVsbCk7XG4gICAgICAgIHZhciBhcnJvd0ljb24gPSBjdXN0b21BcnJvd0ljb24gfHwgKGlzUlRMID8gX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoX2Fycm93TGVmdDJbJ2RlZmF1bHQnXSwgbnVsbCkgOiBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChfYXJyb3dSaWdodDJbJ2RlZmF1bHQnXSwgbnVsbCkpO1xuICAgICAgICB2YXIgY2xvc2VJY29uID0gY3VzdG9tQ2xvc2VJY29uIHx8IF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KF9jbG9zZTJbJ2RlZmF1bHQnXSwgbnVsbCk7XG4gICAgICAgIHZhciBzY3JlZW5SZWFkZXJUZXh0ID0gc2NyZWVuUmVhZGVyTWVzc2FnZSB8fCBwaHJhc2VzLmtleWJvYXJkTmF2aWdhdGlvbkluc3RydWN0aW9ucztcblxuICAgICAgICByZXR1cm4gX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHtcbiAgICAgICAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lczJbJ2RlZmF1bHQnXSkoJ0RhdGVSYW5nZVBpY2tlcklucHV0Jywge1xuICAgICAgICAgICAgJ0RhdGVSYW5nZVBpY2tlcklucHV0LS1kaXNhYmxlZCc6IGRpc2FibGVkLFxuICAgICAgICAgICAgJ0RhdGVSYW5nZVBpY2tlcklucHV0LS1ydGwnOiBpc1JUTFxuICAgICAgICAgIH0pXG4gICAgICAgIH0sIChzaG93RGVmYXVsdElucHV0SWNvbiB8fCBjdXN0b21JbnB1dEljb24gIT09IG51bGwpICYmIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KCdidXR0b24nLCB7XG4gICAgICAgICAgdHlwZTogJ2J1dHRvbicsXG4gICAgICAgICAgY2xhc3NOYW1lOiAnRGF0ZVJhbmdlUGlja2VySW5wdXRfX2NhbGVuZGFyLWljb24nLFxuICAgICAgICAgIGRpc2FibGVkOiBkaXNhYmxlZCxcbiAgICAgICAgICAnYXJpYS1sYWJlbCc6IHBocmFzZXMuZm9jdXNTdGFydERhdGUsXG4gICAgICAgICAgb25DbGljazogb25BcnJvd0Rvd25cbiAgICAgICAgfSwgaW5wdXRJY29uKSwgX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoX0RhdGVJbnB1dDJbJ2RlZmF1bHQnXSwge1xuICAgICAgICAgIGlkOiBzdGFydERhdGVJZCxcbiAgICAgICAgICBwbGFjZWhvbGRlcjogc3RhcnREYXRlUGxhY2Vob2xkZXJUZXh0LFxuICAgICAgICAgIGRpc3BsYXlWYWx1ZTogc3RhcnREYXRlLFxuICAgICAgICAgIGlucHV0VmFsdWU6IHN0YXJ0RGF0ZVZhbHVlLFxuICAgICAgICAgIHNjcmVlblJlYWRlck1lc3NhZ2U6IHNjcmVlblJlYWRlclRleHQsXG4gICAgICAgICAgZm9jdXNlZDogaXNTdGFydERhdGVGb2N1c2VkLFxuICAgICAgICAgIGlzRm9jdXNlZDogaXNGb2N1c2VkLFxuICAgICAgICAgIGRpc2FibGVkOiBkaXNhYmxlZCxcbiAgICAgICAgICByZXF1aXJlZDogcmVxdWlyZWQsXG4gICAgICAgICAgcmVhZE9ubHk6IHJlYWRPbmx5LFxuICAgICAgICAgIHNob3dDYXJldDogc2hvd0NhcmV0LFxuXG4gICAgICAgICAgb25DaGFuZ2U6IG9uU3RhcnREYXRlQ2hhbmdlLFxuICAgICAgICAgIG9uRm9jdXM6IG9uU3RhcnREYXRlRm9jdXMsXG4gICAgICAgICAgb25LZXlEb3duU2hpZnRUYWI6IG9uU3RhcnREYXRlU2hpZnRUYWIsXG4gICAgICAgICAgb25LZXlEb3duQXJyb3dEb3duOiBvbkFycm93RG93bixcbiAgICAgICAgICBvbktleURvd25RdWVzdGlvbk1hcms6IG9uUXVlc3Rpb25NYXJrXG4gICAgICAgIH0pLCBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudCgnZGl2Jywge1xuICAgICAgICAgIGNsYXNzTmFtZTogJ0RhdGVSYW5nZVBpY2tlcklucHV0X19hcnJvdycsXG4gICAgICAgICAgJ2FyaWEtaGlkZGVuJzogJ3RydWUnLFxuICAgICAgICAgIHJvbGU6ICdwcmVzZW50YXRpb24nXG4gICAgICAgIH0sIGFycm93SWNvbiksIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KF9EYXRlSW5wdXQyWydkZWZhdWx0J10sIHtcbiAgICAgICAgICBpZDogZW5kRGF0ZUlkLFxuICAgICAgICAgIHBsYWNlaG9sZGVyOiBlbmREYXRlUGxhY2Vob2xkZXJUZXh0LFxuICAgICAgICAgIGRpc3BsYXlWYWx1ZTogZW5kRGF0ZSxcbiAgICAgICAgICBpbnB1dFZhbHVlOiBlbmREYXRlVmFsdWUsXG4gICAgICAgICAgc2NyZWVuUmVhZGVyTWVzc2FnZTogc2NyZWVuUmVhZGVyVGV4dCxcbiAgICAgICAgICBmb2N1c2VkOiBpc0VuZERhdGVGb2N1c2VkLFxuICAgICAgICAgIGlzRm9jdXNlZDogaXNGb2N1c2VkLFxuICAgICAgICAgIGRpc2FibGVkOiBkaXNhYmxlZCxcbiAgICAgICAgICByZXF1aXJlZDogcmVxdWlyZWQsXG4gICAgICAgICAgcmVhZE9ubHk6IHJlYWRPbmx5LFxuICAgICAgICAgIHNob3dDYXJldDogc2hvd0NhcmV0LFxuXG4gICAgICAgICAgb25DaGFuZ2U6IG9uRW5kRGF0ZUNoYW5nZSxcbiAgICAgICAgICBvbkZvY3VzOiBvbkVuZERhdGVGb2N1cyxcbiAgICAgICAgICBvbktleURvd25UYWI6IG9uRW5kRGF0ZVRhYixcbiAgICAgICAgICBvbktleURvd25BcnJvd0Rvd246IG9uQXJyb3dEb3duLFxuICAgICAgICAgIG9uS2V5RG93blF1ZXN0aW9uTWFyazogb25RdWVzdGlvbk1hcmtcbiAgICAgICAgfSksIHNob3dDbGVhckRhdGVzICYmIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KCdidXR0b24nLCB7XG4gICAgICAgICAgdHlwZTogJ2J1dHRvbicsXG4gICAgICAgICAgJ2FyaWEtbGFiZWwnOiBwaHJhc2VzLmNsZWFyRGF0ZXMsXG4gICAgICAgICAgY2xhc3NOYW1lOiAoMCwgX2NsYXNzbmFtZXMyWydkZWZhdWx0J10pKCdEYXRlUmFuZ2VQaWNrZXJJbnB1dF9fY2xlYXItZGF0ZXMnLCB7XG4gICAgICAgICAgICAnRGF0ZVJhbmdlUGlja2VySW5wdXRfX2NsZWFyLWRhdGVzLS1oaWRlJzogIShzdGFydERhdGUgfHwgZW5kRGF0ZSksXG4gICAgICAgICAgICAnRGF0ZVJhbmdlUGlja2VySW5wdXRfX2NsZWFyLWRhdGVzLS1ob3Zlcic6IGlzQ2xlYXJEYXRlc0hvdmVyZWRcbiAgICAgICAgICB9KSxcbiAgICAgICAgICBvbk1vdXNlRW50ZXI6IHRoaXMub25DbGVhckRhdGVzTW91c2VFbnRlcixcbiAgICAgICAgICBvbk1vdXNlTGVhdmU6IHRoaXMub25DbGVhckRhdGVzTW91c2VMZWF2ZSxcbiAgICAgICAgICBvbkNsaWNrOiBvbkNsZWFyRGF0ZXNcbiAgICAgICAgfSwgX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiAnRGF0ZVJhbmdlUGlja2VySW5wdXRfX2Nsb3NlLWljb24nIH0sIGNsb3NlSWNvbikpKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlbmRlcjtcbiAgICB9KClcbiAgfV0pO1xuXG4gIHJldHVybiBEYXRlUmFuZ2VQaWNrZXJJbnB1dDtcbn0oX3JlYWN0MlsnZGVmYXVsdCddLkNvbXBvbmVudCk7XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IERhdGVSYW5nZVBpY2tlcklucHV0O1xuXG5EYXRlUmFuZ2VQaWNrZXJJbnB1dC5wcm9wVHlwZXMgPSBwcm9wVHlwZXM7XG5EYXRlUmFuZ2VQaWNrZXJJbnB1dC5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5cbi8qKiovIH0pXG5cbi8qKioqKiovIH0pOyIsIm1vZHVsZS5leHBvcnRzID1cbi8qKioqKiovIChmdW5jdGlvbihtb2R1bGVzKSB7IC8vIHdlYnBhY2tCb290c3RyYXBcbi8qKioqKiovIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbi8qKioqKiovIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbi8qKioqKiovIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuLyoqKioqKi8gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4vKioqKioqLyBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuLyoqKioqKi8gXHRcdFx0aTogbW9kdWxlSWQsXG4vKioqKioqLyBcdFx0XHRsOiBmYWxzZSxcbi8qKioqKiovIFx0XHRcdGV4cG9ydHM6IHt9XG4vKioqKioqLyBcdFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4vKioqKioqLyBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbi8qKioqKiovIFx0XHRtb2R1bGUubCA9IHRydWU7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4vKioqKioqLyBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuLyoqKioqKi8gXHR9XG4vKioqKioqL1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBpZGVudGl0eSBmdW5jdGlvbiBmb3IgY2FsbGluZyBoYXJtb255IGltcG9ydHMgd2l0aCB0aGUgY29ycmVjdCBjb250ZXh0XG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uaSA9IGZ1bmN0aW9uKHZhbHVlKSB7IHJldHVybiB2YWx1ZTsgfTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbi8qKioqKiovIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4vKioqKioqLyBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwge1xuLyoqKioqKi8gXHRcdFx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxuLyoqKioqKi8gXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuLyoqKioqKi8gXHRcdFx0XHRnZXQ6IGdldHRlclxuLyoqKioqKi8gXHRcdFx0fSk7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4vKioqKioqLyBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4vKioqKioqLyBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuLyoqKioqKi8gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4vKioqKioqLyBcdFx0cmV0dXJuIGdldHRlcjtcbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vKioqKioqLyBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDYyKTtcbi8qKioqKiovIH0pXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKioqKi8gKHtcblxuLyoqKi8gMDpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwicmVhY3RcIik7XG5cbi8qKiovIH0pLFxuXG4vKioqLyAxOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJhaXJibmItcHJvcC10eXBlc1wiKTtcblxuLyoqKi8gfSksXG5cbi8qKiovIDM6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInByb3AtdHlwZXNcIik7XG5cbi8qKiovIH0pLFxuXG4vKioqLyAzNTpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwibG9kYXNoL3Rocm90dGxlXCIpO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gNjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiY2xhc3NuYW1lc1wiKTtcblxuLyoqKi8gfSksXG5cbi8qKiovIDYyOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07ZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO2Rlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgICB9XG4gIH1yZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICAgIGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7aWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7cmV0dXJuIENvbnN0cnVjdG9yO1xuICB9O1xufSgpO1xuXG52YXIgX3JlYWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcHJvcFR5cGVzID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxudmFyIF9haXJibmJQcm9wVHlwZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuXG52YXIgX2NsYXNzbmFtZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYpO1xuXG52YXIgX2NsYXNzbmFtZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NuYW1lcyk7XG5cbnZhciBfdGhyb3R0bGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM1KTtcblxudmFyIF90aHJvdHRsZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90aHJvdHRsZSk7XG5cbnZhciBfaXNUb3VjaERldmljZSA9IF9fd2VicGFja19yZXF1aXJlX18oOSk7XG5cbnZhciBfaXNUb3VjaERldmljZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pc1RvdWNoRGV2aWNlKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTtcbn1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gIH1cbn1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkge1xuICBpZiAoIXNlbGYpIHtcbiAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gIH1yZXR1cm4gY2FsbCAmJiAoKHR5cGVvZiBjYWxsID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2YoY2FsbCkpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7XG59XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyAodHlwZW9mIHN1cGVyQ2xhc3MgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihzdXBlckNsYXNzKSkpO1xuICB9c3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTtpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG59XG5cbnZhciBwcm9wVHlwZXMgPSAoMCwgX2FpcmJuYlByb3BUeXBlcy5mb3JiaWRFeHRyYVByb3BzKSh7XG4gIGlkOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLnN0cmluZy5pc1JlcXVpcmVkLFxuICBwbGFjZWhvbGRlcjogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5zdHJpbmcsIC8vIGFsc28gdXNlZCBhcyBsYWJlbFxuICBkaXNwbGF5VmFsdWU6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uc3RyaW5nLFxuICBpbnB1dFZhbHVlOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLnN0cmluZyxcbiAgc2NyZWVuUmVhZGVyTWVzc2FnZTogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5zdHJpbmcsXG4gIGZvY3VzZWQ6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uYm9vbCxcbiAgZGlzYWJsZWQ6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uYm9vbCxcbiAgcmVxdWlyZWQ6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uYm9vbCxcbiAgcmVhZE9ubHk6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uYm9vbCxcbiAgc2hvd0NhcmV0OiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmJvb2wsXG5cbiAgb25DaGFuZ2U6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uZnVuYyxcbiAgb25Gb2N1czogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5mdW5jLFxuICBvbktleURvd25TaGlmdFRhYjogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5mdW5jLFxuICBvbktleURvd25UYWI6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uZnVuYyxcblxuICBvbktleURvd25BcnJvd0Rvd246IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uZnVuYyxcbiAgb25LZXlEb3duUXVlc3Rpb25NYXJrOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmZ1bmMsXG5cbiAgLy8gYWNjZXNzaWJpbGl0eVxuICBpc0ZvY3VzZWQ6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uYm9vbCAvLyBkZXNjcmliZXMgYWN0dWFsIERPTSBmb2N1c1xufSk7XG5cbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIHBsYWNlaG9sZGVyOiAnU2VsZWN0IERhdGUnLFxuICBkaXNwbGF5VmFsdWU6ICcnLFxuICBpbnB1dFZhbHVlOiAnJyxcbiAgc2NyZWVuUmVhZGVyTWVzc2FnZTogJycsXG4gIGZvY3VzZWQ6IGZhbHNlLFxuICBkaXNhYmxlZDogZmFsc2UsXG4gIHJlcXVpcmVkOiBmYWxzZSxcbiAgcmVhZE9ubHk6IG51bGwsXG4gIHNob3dDYXJldDogZmFsc2UsXG5cbiAgb25DaGFuZ2U6IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBvbkNoYW5nZSgpIHt9XG5cbiAgICByZXR1cm4gb25DaGFuZ2U7XG4gIH0oKSxcbiAgb25Gb2N1czogZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIG9uRm9jdXMoKSB7fVxuXG4gICAgcmV0dXJuIG9uRm9jdXM7XG4gIH0oKSxcbiAgb25LZXlEb3duU2hpZnRUYWI6IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBvbktleURvd25TaGlmdFRhYigpIHt9XG5cbiAgICByZXR1cm4gb25LZXlEb3duU2hpZnRUYWI7XG4gIH0oKSxcbiAgb25LZXlEb3duVGFiOiBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gb25LZXlEb3duVGFiKCkge31cblxuICAgIHJldHVybiBvbktleURvd25UYWI7XG4gIH0oKSxcbiAgb25LZXlEb3duQXJyb3dEb3duOiBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gb25LZXlEb3duQXJyb3dEb3duKCkge31cblxuICAgIHJldHVybiBvbktleURvd25BcnJvd0Rvd247XG4gIH0oKSxcbiAgb25LZXlEb3duUXVlc3Rpb25NYXJrOiBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gb25LZXlEb3duUXVlc3Rpb25NYXJrKCkge31cblxuICAgIHJldHVybiBvbktleURvd25RdWVzdGlvbk1hcms7XG4gIH0oKSxcblxuICAvLyBhY2Nlc3NpYmlsaXR5XG4gIGlzRm9jdXNlZDogZmFsc2Vcbn07XG5cbnZhciBEYXRlSW5wdXQgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoRGF0ZUlucHV0LCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBEYXRlSW5wdXQocHJvcHMpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRGF0ZUlucHV0KTtcblxuICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChEYXRlSW5wdXQuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihEYXRlSW5wdXQpKS5jYWxsKHRoaXMsIHByb3BzKSk7XG5cbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGRhdGVTdHJpbmc6ICcnLFxuICAgICAgaXNUb3VjaERldmljZTogZmFsc2VcbiAgICB9O1xuXG4gICAgX3RoaXMub25DaGFuZ2UgPSBfdGhpcy5vbkNoYW5nZS5iaW5kKF90aGlzKTtcbiAgICBfdGhpcy5vbktleURvd24gPSBfdGhpcy5vbktleURvd24uYmluZChfdGhpcyk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKERhdGVJbnB1dCwgW3tcbiAgICBrZXk6ICdjb21wb25lbnREaWRNb3VudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHsgaXNUb3VjaERldmljZTogKDAsIF9pc1RvdWNoRGV2aWNlMlsnZGVmYXVsdCddKSgpIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29tcG9uZW50RGlkTW91bnQ7XG4gICAgfSgpXG4gIH0sIHtcbiAgICBrZXk6ICdjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgICAgaWYgKCF0aGlzLnByb3BzLmRpc3BsYXlWYWx1ZSAmJiBuZXh0UHJvcHMuZGlzcGxheVZhbHVlKSB7XG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBkYXRlU3RyaW5nOiAnJ1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzO1xuICAgIH0oKVxuICB9LCB7XG4gICAga2V5OiAnY29tcG9uZW50RGlkVXBkYXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgICAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICAgIGZvY3VzZWQgPSBfcHJvcHMuZm9jdXNlZCxcbiAgICAgICAgICAgIGlzRm9jdXNlZCA9IF9wcm9wcy5pc0ZvY3VzZWQ7XG5cbiAgICAgICAgaWYgKHByZXZQcm9wcy5mb2N1c2VkID09PSBmb2N1c2VkICYmIHByZXZQcm9wcy5pc0ZvY3VzZWQgPT09IGlzRm9jdXNlZCkgcmV0dXJuO1xuXG4gICAgICAgIGlmIChmb2N1c2VkICYmIGlzRm9jdXNlZCkge1xuICAgICAgICAgIHRoaXMuaW5wdXRSZWYuZm9jdXMoKTtcbiAgICAgICAgICB0aGlzLmlucHV0UmVmLnNlbGVjdCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuaW5wdXRSZWYuYmx1cigpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb21wb25lbnREaWRVcGRhdGU7XG4gICAgfSgpXG4gIH0sIHtcbiAgICBrZXk6ICdvbkNoYW5nZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIG9uQ2hhbmdlKGUpIHtcbiAgICAgICAgdmFyIF9wcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICAgICAgb25DaGFuZ2UgPSBfcHJvcHMyLm9uQ2hhbmdlLFxuICAgICAgICAgICAgb25LZXlEb3duUXVlc3Rpb25NYXJrID0gX3Byb3BzMi5vbktleURvd25RdWVzdGlvbk1hcms7XG5cbiAgICAgICAgdmFyIGRhdGVTdHJpbmcgPSBlLnRhcmdldC52YWx1ZTtcblxuICAgICAgICAvLyBJbiBTYWZhcmksIG9uS2V5RG93biBkb2VzIG5vdCBjb25zaXN0ZW50bHkgZmlyZSBhaGVhZCBvZiBvbkNoYW5nZS4gQXMgYSByZXN1bHQsIHdlIG5lZWQgdG9cbiAgICAgICAgLy8gc3BlY2lhbCBjYXNlIHRoZSBgP2Aga2V5IHNvIHRoYXQgaXQgYWx3YXlzIHRyaWdnZXJzIHRoZSBhcHByb3ByaWF0ZSBjYWxsYmFjaywgaW5zdGVhZCBvZlxuICAgICAgICAvLyBtb2RpZnlpbmcgdGhlIGlucHV0IHZhbHVlXG4gICAgICAgIGlmIChkYXRlU3RyaW5nW2RhdGVTdHJpbmcubGVuZ3RoIC0gMV0gPT09ICc/Jykge1xuICAgICAgICAgIG9uS2V5RG93blF1ZXN0aW9uTWFyayhlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgZGF0ZVN0cmluZzogZGF0ZVN0cmluZyB9KTtcbiAgICAgICAgICBvbkNoYW5nZShkYXRlU3RyaW5nKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gb25DaGFuZ2U7XG4gICAgfSgpXG4gIH0sIHtcbiAgICBrZXk6ICdvbktleURvd24nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBvbktleURvd24oZSkge1xuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgICAgIHZhciBfcHJvcHMzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICAgIG9uS2V5RG93blNoaWZ0VGFiID0gX3Byb3BzMy5vbktleURvd25TaGlmdFRhYixcbiAgICAgICAgICAgIG9uS2V5RG93blRhYiA9IF9wcm9wczMub25LZXlEb3duVGFiLFxuICAgICAgICAgICAgb25LZXlEb3duQXJyb3dEb3duID0gX3Byb3BzMy5vbktleURvd25BcnJvd0Rvd24sXG4gICAgICAgICAgICBvbktleURvd25RdWVzdGlvbk1hcmsgPSBfcHJvcHMzLm9uS2V5RG93blF1ZXN0aW9uTWFyaztcbiAgICAgICAgdmFyIGtleSA9IGUua2V5O1xuXG4gICAgICAgIGlmIChrZXkgPT09ICdUYWInKSB7XG4gICAgICAgICAgaWYgKGUuc2hpZnRLZXkpIHtcbiAgICAgICAgICAgIG9uS2V5RG93blNoaWZ0VGFiKGUpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvbktleURvd25UYWIoZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ0Fycm93RG93bicpIHtcbiAgICAgICAgICBvbktleURvd25BcnJvd0Rvd24oZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoa2V5ID09PSAnPycpIHtcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgb25LZXlEb3duUXVlc3Rpb25NYXJrKGUpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBvbktleURvd247XG4gICAgfSgpXG4gIH0sIHtcbiAgICBrZXk6ICdyZW5kZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICAgIHZhciBfc3RhdGUgPSB0aGlzLnN0YXRlLFxuICAgICAgICAgICAgZGF0ZVN0cmluZyA9IF9zdGF0ZS5kYXRlU3RyaW5nLFxuICAgICAgICAgICAgaXNUb3VjaCA9IF9zdGF0ZS5pc1RvdWNoRGV2aWNlO1xuICAgICAgICB2YXIgX3Byb3BzNCA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgICBpZCA9IF9wcm9wczQuaWQsXG4gICAgICAgICAgICBwbGFjZWhvbGRlciA9IF9wcm9wczQucGxhY2Vob2xkZXIsXG4gICAgICAgICAgICBkaXNwbGF5VmFsdWUgPSBfcHJvcHM0LmRpc3BsYXlWYWx1ZSxcbiAgICAgICAgICAgIGlucHV0VmFsdWUgPSBfcHJvcHM0LmlucHV0VmFsdWUsXG4gICAgICAgICAgICBzY3JlZW5SZWFkZXJNZXNzYWdlID0gX3Byb3BzNC5zY3JlZW5SZWFkZXJNZXNzYWdlLFxuICAgICAgICAgICAgZm9jdXNlZCA9IF9wcm9wczQuZm9jdXNlZCxcbiAgICAgICAgICAgIHNob3dDYXJldCA9IF9wcm9wczQuc2hvd0NhcmV0LFxuICAgICAgICAgICAgb25Gb2N1cyA9IF9wcm9wczQub25Gb2N1cyxcbiAgICAgICAgICAgIGRpc2FibGVkID0gX3Byb3BzNC5kaXNhYmxlZCxcbiAgICAgICAgICAgIHJlcXVpcmVkID0gX3Byb3BzNC5yZXF1aXJlZCxcbiAgICAgICAgICAgIHJlYWRPbmx5ID0gX3Byb3BzNC5yZWFkT25seTtcblxuICAgICAgICB2YXIgZGlzcGxheVRleHQgPSBkaXNwbGF5VmFsdWUgfHwgaW5wdXRWYWx1ZSB8fCBkYXRlU3RyaW5nIHx8IHBsYWNlaG9sZGVyIHx8ICcnO1xuICAgICAgICB2YXIgdmFsdWUgPSBpbnB1dFZhbHVlIHx8IGRpc3BsYXlWYWx1ZSB8fCBkYXRlU3RyaW5nIHx8ICcnO1xuICAgICAgICB2YXIgc2NyZWVuUmVhZGVyTWVzc2FnZUlkID0gJ0RhdGVJbnB1dF9fc2NyZWVuLXJlYWRlci1tZXNzYWdlLScgKyBTdHJpbmcoaWQpO1xuXG4gICAgICAgIHJldHVybiBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudCgnZGl2Jywge1xuICAgICAgICAgIGNsYXNzTmFtZTogKDAsIF9jbGFzc25hbWVzMlsnZGVmYXVsdCddKSgnRGF0ZUlucHV0Jywge1xuICAgICAgICAgICAgJ0RhdGVJbnB1dC0td2l0aC1jYXJldCc6IHNob3dDYXJldCAmJiBmb2N1c2VkLFxuICAgICAgICAgICAgJ0RhdGVJbnB1dC0tZGlzYWJsZWQnOiBkaXNhYmxlZFxuICAgICAgICAgIH0pXG4gICAgICAgIH0sIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KCdpbnB1dCcsIHtcbiAgICAgICAgICAnYXJpYS1sYWJlbCc6IHBsYWNlaG9sZGVyLFxuICAgICAgICAgIGNsYXNzTmFtZTogJ0RhdGVJbnB1dF9faW5wdXQgbmVlZHNjbGljaycsXG4gICAgICAgICAgdHlwZTogJ3RleHQnLFxuICAgICAgICAgIGlkOiBpZCxcbiAgICAgICAgICBuYW1lOiBpZCxcbiAgICAgICAgICByZWY6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGZ1bmN0aW9uIHJlZihfcmVmKSB7XG4gICAgICAgICAgICAgIF90aGlzMi5pbnB1dFJlZiA9IF9yZWY7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiByZWY7XG4gICAgICAgICAgfSgpLFxuICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgICBvbkNoYW5nZTogdGhpcy5vbkNoYW5nZSxcbiAgICAgICAgICBvbktleURvd246ICgwLCBfdGhyb3R0bGUyWydkZWZhdWx0J10pKHRoaXMub25LZXlEb3duLCAzMDApLFxuICAgICAgICAgIG9uRm9jdXM6IG9uRm9jdXMsXG4gICAgICAgICAgcGxhY2Vob2xkZXI6IHBsYWNlaG9sZGVyLFxuICAgICAgICAgIGF1dG9Db21wbGV0ZTogJ29mZicsXG4gICAgICAgICAgZGlzYWJsZWQ6IGRpc2FibGVkLFxuICAgICAgICAgIHJlYWRPbmx5OiB0eXBlb2YgcmVhZE9ubHkgPT09ICdib29sZWFuJyA/IHJlYWRPbmx5IDogaXNUb3VjaCxcbiAgICAgICAgICByZXF1aXJlZDogcmVxdWlyZWQsXG4gICAgICAgICAgJ2FyaWEtZGVzY3JpYmVkYnknOiBzY3JlZW5SZWFkZXJNZXNzYWdlICYmIHNjcmVlblJlYWRlck1lc3NhZ2VJZFxuICAgICAgICB9KSwgc2NyZWVuUmVhZGVyTWVzc2FnZSAmJiBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudCgncCcsIHsgaWQ6IHNjcmVlblJlYWRlck1lc3NhZ2VJZCwgY2xhc3NOYW1lOiAnc2NyZWVuLXJlYWRlci1vbmx5JyB9LCBzY3JlZW5SZWFkZXJNZXNzYWdlKSwgX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHtcbiAgICAgICAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lczJbJ2RlZmF1bHQnXSkoJ0RhdGVJbnB1dF9fZGlzcGxheS10ZXh0Jywge1xuICAgICAgICAgICAgJ0RhdGVJbnB1dF9fZGlzcGxheS10ZXh0LS1oYXMtaW5wdXQnOiAhIXZhbHVlLFxuICAgICAgICAgICAgJ0RhdGVJbnB1dF9fZGlzcGxheS10ZXh0LS1mb2N1c2VkJzogZm9jdXNlZCxcbiAgICAgICAgICAgICdEYXRlSW5wdXRfX2Rpc3BsYXktdGV4dC0tZGlzYWJsZWQnOiBkaXNhYmxlZFxuICAgICAgICAgIH0pXG4gICAgICAgIH0sIGRpc3BsYXlUZXh0KSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZW5kZXI7XG4gICAgfSgpXG4gIH1dKTtcblxuICByZXR1cm4gRGF0ZUlucHV0O1xufShfcmVhY3QyWydkZWZhdWx0J10uQ29tcG9uZW50KTtcblxuZXhwb3J0c1snZGVmYXVsdCddID0gRGF0ZUlucHV0O1xuXG5EYXRlSW5wdXQucHJvcFR5cGVzID0gcHJvcFR5cGVzO1xuRGF0ZUlucHV0LmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcblxuLyoqKi8gfSksXG5cbi8qKiovIDk6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImlzLXRvdWNoLWRldmljZVwiKTtcblxuLyoqKi8gfSlcblxuLyoqKioqKi8gfSk7IiwidmFyIGRlYm91bmNlID0gcmVxdWlyZSgnLi9kZWJvdW5jZScpLFxuICAgIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpO1xuXG4vKiogRXJyb3IgbWVzc2FnZSBjb25zdGFudHMuICovXG52YXIgRlVOQ19FUlJPUl9URVhUID0gJ0V4cGVjdGVkIGEgZnVuY3Rpb24nO1xuXG4vKipcbiAqIENyZWF0ZXMgYSB0aHJvdHRsZWQgZnVuY3Rpb24gdGhhdCBvbmx5IGludm9rZXMgYGZ1bmNgIGF0IG1vc3Qgb25jZSBwZXJcbiAqIGV2ZXJ5IGB3YWl0YCBtaWxsaXNlY29uZHMuIFRoZSB0aHJvdHRsZWQgZnVuY3Rpb24gY29tZXMgd2l0aCBhIGBjYW5jZWxgXG4gKiBtZXRob2QgdG8gY2FuY2VsIGRlbGF5ZWQgYGZ1bmNgIGludm9jYXRpb25zIGFuZCBhIGBmbHVzaGAgbWV0aG9kIHRvXG4gKiBpbW1lZGlhdGVseSBpbnZva2UgdGhlbS4gUHJvdmlkZSBgb3B0aW9uc2AgdG8gaW5kaWNhdGUgd2hldGhlciBgZnVuY2BcbiAqIHNob3VsZCBiZSBpbnZva2VkIG9uIHRoZSBsZWFkaW5nIGFuZC9vciB0cmFpbGluZyBlZGdlIG9mIHRoZSBgd2FpdGBcbiAqIHRpbWVvdXQuIFRoZSBgZnVuY2AgaXMgaW52b2tlZCB3aXRoIHRoZSBsYXN0IGFyZ3VtZW50cyBwcm92aWRlZCB0byB0aGVcbiAqIHRocm90dGxlZCBmdW5jdGlvbi4gU3Vic2VxdWVudCBjYWxscyB0byB0aGUgdGhyb3R0bGVkIGZ1bmN0aW9uIHJldHVybiB0aGVcbiAqIHJlc3VsdCBvZiB0aGUgbGFzdCBgZnVuY2AgaW52b2NhdGlvbi5cbiAqXG4gKiAqKk5vdGU6KiogSWYgYGxlYWRpbmdgIGFuZCBgdHJhaWxpbmdgIG9wdGlvbnMgYXJlIGB0cnVlYCwgYGZ1bmNgIGlzXG4gKiBpbnZva2VkIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0IG9ubHkgaWYgdGhlIHRocm90dGxlZCBmdW5jdGlvblxuICogaXMgaW52b2tlZCBtb3JlIHRoYW4gb25jZSBkdXJpbmcgdGhlIGB3YWl0YCB0aW1lb3V0LlxuICpcbiAqIElmIGB3YWl0YCBpcyBgMGAgYW5kIGBsZWFkaW5nYCBpcyBgZmFsc2VgLCBgZnVuY2AgaW52b2NhdGlvbiBpcyBkZWZlcnJlZFxuICogdW50aWwgdG8gdGhlIG5leHQgdGljaywgc2ltaWxhciB0byBgc2V0VGltZW91dGAgd2l0aCBhIHRpbWVvdXQgb2YgYDBgLlxuICpcbiAqIFNlZSBbRGF2aWQgQ29yYmFjaG8ncyBhcnRpY2xlXShodHRwczovL2Nzcy10cmlja3MuY29tL2RlYm91bmNpbmctdGhyb3R0bGluZy1leHBsYWluZWQtZXhhbXBsZXMvKVxuICogZm9yIGRldGFpbHMgb3ZlciB0aGUgZGlmZmVyZW5jZXMgYmV0d2VlbiBgXy50aHJvdHRsZWAgYW5kIGBfLmRlYm91bmNlYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHRocm90dGxlLlxuICogQHBhcmFtIHtudW1iZXJ9IFt3YWl0PTBdIFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIHRocm90dGxlIGludm9jYXRpb25zIHRvLlxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmxlYWRpbmc9dHJ1ZV1cbiAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSBsZWFkaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnRyYWlsaW5nPXRydWVdXG4gKiAgU3BlY2lmeSBpbnZva2luZyBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHRocm90dGxlZCBmdW5jdGlvbi5cbiAqIEBleGFtcGxlXG4gKlxuICogLy8gQXZvaWQgZXhjZXNzaXZlbHkgdXBkYXRpbmcgdGhlIHBvc2l0aW9uIHdoaWxlIHNjcm9sbGluZy5cbiAqIGpRdWVyeSh3aW5kb3cpLm9uKCdzY3JvbGwnLCBfLnRocm90dGxlKHVwZGF0ZVBvc2l0aW9uLCAxMDApKTtcbiAqXG4gKiAvLyBJbnZva2UgYHJlbmV3VG9rZW5gIHdoZW4gdGhlIGNsaWNrIGV2ZW50IGlzIGZpcmVkLCBidXQgbm90IG1vcmUgdGhhbiBvbmNlIGV2ZXJ5IDUgbWludXRlcy5cbiAqIHZhciB0aHJvdHRsZWQgPSBfLnRocm90dGxlKHJlbmV3VG9rZW4sIDMwMDAwMCwgeyAndHJhaWxpbmcnOiBmYWxzZSB9KTtcbiAqIGpRdWVyeShlbGVtZW50KS5vbignY2xpY2snLCB0aHJvdHRsZWQpO1xuICpcbiAqIC8vIENhbmNlbCB0aGUgdHJhaWxpbmcgdGhyb3R0bGVkIGludm9jYXRpb24uXG4gKiBqUXVlcnkod2luZG93KS5vbigncG9wc3RhdGUnLCB0aHJvdHRsZWQuY2FuY2VsKTtcbiAqL1xuZnVuY3Rpb24gdGhyb3R0bGUoZnVuYywgd2FpdCwgb3B0aW9ucykge1xuICB2YXIgbGVhZGluZyA9IHRydWUsXG4gICAgICB0cmFpbGluZyA9IHRydWU7XG5cbiAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gIH1cbiAgaWYgKGlzT2JqZWN0KG9wdGlvbnMpKSB7XG4gICAgbGVhZGluZyA9ICdsZWFkaW5nJyBpbiBvcHRpb25zID8gISFvcHRpb25zLmxlYWRpbmcgOiBsZWFkaW5nO1xuICAgIHRyYWlsaW5nID0gJ3RyYWlsaW5nJyBpbiBvcHRpb25zID8gISFvcHRpb25zLnRyYWlsaW5nIDogdHJhaWxpbmc7XG4gIH1cbiAgcmV0dXJuIGRlYm91bmNlKGZ1bmMsIHdhaXQsIHtcbiAgICAnbGVhZGluZyc6IGxlYWRpbmcsXG4gICAgJ21heFdhaXQnOiB3YWl0LFxuICAgICd0cmFpbGluZyc6IHRyYWlsaW5nXG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHRocm90dGxlO1xuIiwidmFyIGZyZWVHbG9iYWwgPSByZXF1aXJlKCcuL19mcmVlR2xvYmFsJyk7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgc2VsZmAuICovXG52YXIgZnJlZVNlbGYgPSB0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmICYmIHNlbGYuT2JqZWN0ID09PSBPYmplY3QgJiYgc2VsZjtcblxuLyoqIFVzZWQgYXMgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbCBvYmplY3QuICovXG52YXIgcm9vdCA9IGZyZWVHbG9iYWwgfHwgZnJlZVNlbGYgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblxubW9kdWxlLmV4cG9ydHMgPSByb290O1xuIiwidmFyIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIFN5bWJvbCA9IHJvb3QuU3ltYm9sO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN5bWJvbDtcbiIsIm1vZHVsZS5leHBvcnRzID1cbi8qKioqKiovIChmdW5jdGlvbihtb2R1bGVzKSB7IC8vIHdlYnBhY2tCb290c3RyYXBcbi8qKioqKiovIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbi8qKioqKiovIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbi8qKioqKiovIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuLyoqKioqKi8gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4vKioqKioqLyBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuLyoqKioqKi8gXHRcdFx0aTogbW9kdWxlSWQsXG4vKioqKioqLyBcdFx0XHRsOiBmYWxzZSxcbi8qKioqKiovIFx0XHRcdGV4cG9ydHM6IHt9XG4vKioqKioqLyBcdFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4vKioqKioqLyBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbi8qKioqKiovIFx0XHRtb2R1bGUubCA9IHRydWU7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4vKioqKioqLyBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuLyoqKioqKi8gXHR9XG4vKioqKioqL1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBpZGVudGl0eSBmdW5jdGlvbiBmb3IgY2FsbGluZyBoYXJtb255IGltcG9ydHMgd2l0aCB0aGUgY29ycmVjdCBjb250ZXh0XG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uaSA9IGZ1bmN0aW9uKHZhbHVlKSB7IHJldHVybiB2YWx1ZTsgfTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbi8qKioqKiovIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4vKioqKioqLyBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwge1xuLyoqKioqKi8gXHRcdFx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxuLyoqKioqKi8gXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuLyoqKioqKi8gXHRcdFx0XHRnZXQ6IGdldHRlclxuLyoqKioqKi8gXHRcdFx0fSk7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4vKioqKioqLyBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4vKioqKioqLyBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuLyoqKioqKi8gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4vKioqKioqLyBcdFx0cmV0dXJuIGdldHRlcjtcbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vKioqKioqLyBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDY5KTtcbi8qKioqKiovIH0pXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKioqKi8gKFtcbi8qIDAgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwicmVhY3RcIik7XG5cbi8qKiovIH0pLFxuLyogMSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJhaXJibmItcHJvcC10eXBlc1wiKTtcblxuLyoqKi8gfSksXG4vKiAyICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uL2RlZmF1bHRQaHJhc2VzXCIpO1xuXG4vKioqLyB9KSxcbi8qIDMgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwicHJvcC10eXBlc1wiKTtcblxuLyoqKi8gfSksXG4vKiA0ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uL2NvbnN0YW50c1wiKTtcblxuLyoqKi8gfSksXG4vKiA1ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uL3V0aWxzL2dldFBocmFzZVByb3BUeXBlc1wiKTtcblxuLyoqKi8gfSksXG4vKiA2ICovLFxuLyogNyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJtb21lbnRcIik7XG5cbi8qKiovIH0pLFxuLyogOCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi9zaGFwZXMvU2Nyb2xsYWJsZU9yaWVudGF0aW9uU2hhcGVcIik7XG5cbi8qKiovIH0pLFxuLyogOSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJpcy10b3VjaC1kZXZpY2VcIik7XG5cbi8qKiovIH0pLFxuLyogMTAgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwicmVhY3QtbW9tZW50LXByb3B0eXBlc1wiKTtcblxuLyoqKi8gfSksXG4vKiAxMSAqLyxcbi8qIDEyICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uL3NoYXBlcy9EYXlPZldlZWtTaGFwZVwiKTtcblxuLyoqKi8gfSksXG4vKiAxMyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi91dGlscy90b0lTT0RhdGVTdHJpbmdcIik7XG5cbi8qKiovIH0pLFxuLyogMTQgKi8sXG4vKiAxNSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi91dGlscy9pc0luY2x1c2l2ZWx5QWZ0ZXJEYXlcIik7XG5cbi8qKiovIH0pLFxuLyogMTYgKi8sXG4vKiAxNyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi91dGlscy9pc0FmdGVyRGF5XCIpO1xuXG4vKioqLyB9KSxcbi8qIDE4ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uL3V0aWxzL2lzRGF5VmlzaWJsZVwiKTtcblxuLyoqKi8gfSksXG4vKiAxOSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi91dGlscy9pc1NhbWVEYXlcIik7XG5cbi8qKiovIH0pLFxuLyogMjAgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vdXRpbHMvdG9JU09Nb250aFN0cmluZ1wiKTtcblxuLyoqKi8gfSksXG4vKiAyMSAqLyxcbi8qIDIyICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIm9iamVjdC5hc3NpZ25cIik7XG5cbi8qKiovIH0pLFxuLyogMjMgKi8sXG4vKiAyNCAqLyxcbi8qIDI1ICovLFxuLyogMjYgKi8sXG4vKiAyNyAqLyxcbi8qIDI4ICovLFxuLyogMjkgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vdXRpbHMvZ2V0VmlzaWJsZURheXNcIik7XG5cbi8qKiovIH0pLFxuLyogMzAgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vdXRpbHMvaXNCZWZvcmVEYXlcIik7XG5cbi8qKiovIH0pLFxuLyogMzEgKi8sXG4vKiAzMiAqLyxcbi8qIDMzICovLFxuLyogMzQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi9EYXlQaWNrZXJcIik7XG5cbi8qKiovIH0pLFxuLyogMzUgKi8sXG4vKiAzNiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJvYmplY3QudmFsdWVzXCIpO1xuXG4vKioqLyB9KSxcbi8qIDM3ICovLFxuLyogMzggKi8sXG4vKiAzOSAqLyxcbi8qIDQwICovLFxuLyogNDEgKi8sXG4vKiA0MiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi9zaGFwZXMvRm9jdXNlZElucHV0U2hhcGVcIik7XG5cbi8qKiovIH0pLFxuLyogNDMgKi8sXG4vKiA0NCAqLyxcbi8qIDQ1ICovLFxuLyogNDYgKi8sXG4vKiA0NyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi91dGlscy9pc05leHREYXlcIik7XG5cbi8qKiovIH0pLFxuLyogNDggKi8sXG4vKiA0OSAqLyxcbi8qIDUwICovLFxuLyogNTEgKi8sXG4vKiA1MiAqLyxcbi8qIDUzICovLFxuLyogNTQgKi8sXG4vKiA1NSAqLyxcbi8qIDU2ICovLFxuLyogNTcgKi8sXG4vKiA1OCAqLyxcbi8qIDU5ICovLFxuLyogNjAgKi8sXG4vKiA2MSAqLyxcbi8qIDYyICovLFxuLyogNjMgKi8sXG4vKiA2NCAqLyxcbi8qIDY1ICovLFxuLyogNjYgKi8sXG4vKiA2NyAqLyxcbi8qIDY4ICovLFxuLyogNjkgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO2Rlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7aWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gICAgfVxuICB9cmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgICBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO2lmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO3JldHVybiBDb25zdHJ1Y3RvcjtcbiAgfTtcbn0oKTtcblxudmFyIF9vYmplY3QzID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMik7XG5cbnZhciBfb2JqZWN0NCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX29iamVjdDMpO1xuXG52YXIgX3JlYWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcHJvcFR5cGVzID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxudmFyIF9yZWFjdE1vbWVudFByb3B0eXBlcyA9IF9fd2VicGFja19yZXF1aXJlX18oMTApO1xuXG52YXIgX3JlYWN0TW9tZW50UHJvcHR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0TW9tZW50UHJvcHR5cGVzKTtcblxudmFyIF9haXJibmJQcm9wVHlwZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuXG52YXIgX21vbWVudCA9IF9fd2VicGFja19yZXF1aXJlX18oNyk7XG5cbnZhciBfbW9tZW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX21vbWVudCk7XG5cbnZhciBfb2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNik7XG5cbnZhciBfb2JqZWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX29iamVjdCk7XG5cbnZhciBfaXNUb3VjaERldmljZSA9IF9fd2VicGFja19yZXF1aXJlX18oOSk7XG5cbnZhciBfaXNUb3VjaERldmljZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pc1RvdWNoRGV2aWNlKTtcblxudmFyIF9kZWZhdWx0UGhyYXNlcyA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG5cbnZhciBfZ2V0UGhyYXNlUHJvcFR5cGVzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KTtcblxudmFyIF9nZXRQaHJhc2VQcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0UGhyYXNlUHJvcFR5cGVzKTtcblxudmFyIF9pc0luY2x1c2l2ZWx5QWZ0ZXJEYXkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE1KTtcblxudmFyIF9pc0luY2x1c2l2ZWx5QWZ0ZXJEYXkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaXNJbmNsdXNpdmVseUFmdGVyRGF5KTtcblxudmFyIF9pc05leHREYXkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ3KTtcblxudmFyIF9pc05leHREYXkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaXNOZXh0RGF5KTtcblxudmFyIF9pc1NhbWVEYXkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE5KTtcblxudmFyIF9pc1NhbWVEYXkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaXNTYW1lRGF5KTtcblxudmFyIF9pc0FmdGVyRGF5ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNyk7XG5cbnZhciBfaXNBZnRlckRheTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pc0FmdGVyRGF5KTtcblxudmFyIF9pc0JlZm9yZURheSA9IF9fd2VicGFja19yZXF1aXJlX18oMzApO1xuXG52YXIgX2lzQmVmb3JlRGF5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2lzQmVmb3JlRGF5KTtcblxudmFyIF9nZXRWaXNpYmxlRGF5cyA9IF9fd2VicGFja19yZXF1aXJlX18oMjkpO1xuXG52YXIgX2dldFZpc2libGVEYXlzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldFZpc2libGVEYXlzKTtcblxudmFyIF9pc0RheVZpc2libGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE4KTtcblxudmFyIF9pc0RheVZpc2libGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaXNEYXlWaXNpYmxlKTtcblxudmFyIF90b0lTT0RhdGVTdHJpbmcgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEzKTtcblxudmFyIF90b0lTT0RhdGVTdHJpbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdG9JU09EYXRlU3RyaW5nKTtcblxudmFyIF90b0lTT01vbnRoU3RyaW5nID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMCk7XG5cbnZhciBfdG9JU09Nb250aFN0cmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90b0lTT01vbnRoU3RyaW5nKTtcblxudmFyIF9Gb2N1c2VkSW5wdXRTaGFwZSA9IF9fd2VicGFja19yZXF1aXJlX18oNDIpO1xuXG52YXIgX0ZvY3VzZWRJbnB1dFNoYXBlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0ZvY3VzZWRJbnB1dFNoYXBlKTtcblxudmFyIF9TY3JvbGxhYmxlT3JpZW50YXRpb25TaGFwZSA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XG5cbnZhciBfU2Nyb2xsYWJsZU9yaWVudGF0aW9uU2hhcGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfU2Nyb2xsYWJsZU9yaWVudGF0aW9uU2hhcGUpO1xuXG52YXIgX0RheU9mV2Vla1NoYXBlID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMik7XG5cbnZhciBfRGF5T2ZXZWVrU2hhcGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfRGF5T2ZXZWVrU2hhcGUpO1xuXG52YXIgX2NvbnN0YW50cyA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XG5cbnZhciBfRGF5UGlja2VyID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNCk7XG5cbnZhciBfRGF5UGlja2VyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0RheVBpY2tlcik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7XG4gIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07XG59XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pO1xuICB9IGVsc2Uge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1yZXR1cm4gb2JqO1xufVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7XG4gIGlmICghc2VsZikge1xuICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgfXJldHVybiBjYWxsICYmICgodHlwZW9mIGNhbGwgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihjYWxsKSkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjtcbn1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArICh0eXBlb2Ygc3VwZXJDbGFzcyA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKHN1cGVyQ2xhc3MpKSk7XG4gIH1zdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pO2lmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcbn1cblxudmFyIHByb3BUeXBlcyA9ICgwLCBfYWlyYm5iUHJvcFR5cGVzLmZvcmJpZEV4dHJhUHJvcHMpKHtcbiAgc3RhcnREYXRlOiBfcmVhY3RNb21lbnRQcm9wdHlwZXMyWydkZWZhdWx0J10ubW9tZW50T2JqLFxuICBlbmREYXRlOiBfcmVhY3RNb21lbnRQcm9wdHlwZXMyWydkZWZhdWx0J10ubW9tZW50T2JqLFxuICBvbkRhdGVzQ2hhbmdlOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmZ1bmMsXG5cbiAgZm9jdXNlZElucHV0OiBfRm9jdXNlZElucHV0U2hhcGUyWydkZWZhdWx0J10sXG4gIG9uRm9jdXNDaGFuZ2U6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uZnVuYyxcbiAgb25DbG9zZTogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5mdW5jLFxuXG4gIGtlZXBPcGVuT25EYXRlU2VsZWN0OiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmJvb2wsXG4gIG1pbmltdW1OaWdodHM6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10ubnVtYmVyLFxuICBpc091dHNpZGVSYW5nZTogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5mdW5jLFxuICBpc0RheUJsb2NrZWQ6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uZnVuYyxcbiAgaXNEYXlIaWdobGlnaHRlZDogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5mdW5jLFxuXG4gIC8vIERheVBpY2tlciBwcm9wc1xuICByZW5kZXJNb250aDogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5mdW5jLFxuICBlbmFibGVPdXRzaWRlRGF5czogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5ib29sLFxuICBudW1iZXJPZk1vbnRoczogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5udW1iZXIsXG4gIG9yaWVudGF0aW9uOiBfU2Nyb2xsYWJsZU9yaWVudGF0aW9uU2hhcGUyWydkZWZhdWx0J10sXG4gIHdpdGhQb3J0YWw6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uYm9vbCxcbiAgaW5pdGlhbFZpc2libGVNb250aDogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5mdW5jLFxuICBoaWRlS2V5Ym9hcmRTaG9ydGN1dHNQYW5lbDogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5ib29sLFxuICBkYXlTaXplOiBfYWlyYm5iUHJvcFR5cGVzLm5vbk5lZ2F0aXZlSW50ZWdlcixcblxuICBuYXZQcmV2OiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLm5vZGUsXG4gIG5hdk5leHQ6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10ubm9kZSxcblxuICBvblByZXZNb250aENsaWNrOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmZ1bmMsXG4gIG9uTmV4dE1vbnRoQ2xpY2s6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uZnVuYyxcbiAgb25PdXRzaWRlQ2xpY2s6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uZnVuYyxcbiAgcmVuZGVyRGF5OiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmZ1bmMsXG4gIHJlbmRlckNhbGVuZGFySW5mbzogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5mdW5jLFxuICBmaXJzdERheU9mV2VlazogX0RheU9mV2Vla1NoYXBlMlsnZGVmYXVsdCddLFxuXG4gIC8vIGFjY2Vzc2liaWxpdHlcbiAgb25CbHVyOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmZ1bmMsXG4gIGlzRm9jdXNlZDogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5ib29sLFxuICBzaG93S2V5Ym9hcmRTaG9ydGN1dHM6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uYm9vbCxcblxuICAvLyBpMThuXG4gIG1vbnRoRm9ybWF0OiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLnN0cmluZyxcbiAgcGhyYXNlczogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5zaGFwZSgoMCwgX2dldFBocmFzZVByb3BUeXBlczJbJ2RlZmF1bHQnXSkoX2RlZmF1bHRQaHJhc2VzLkRheVBpY2tlclBocmFzZXMpKSxcblxuICBpc1JUTDogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5ib29sXG59KTtcblxudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgc3RhcnREYXRlOiB1bmRlZmluZWQsIC8vIFRPRE86IHVzZSBudWxsXG4gIGVuZERhdGU6IHVuZGVmaW5lZCwgLy8gVE9ETzogdXNlIG51bGxcbiAgb25EYXRlc0NoYW5nZTogZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIG9uRGF0ZXNDaGFuZ2UoKSB7fVxuXG4gICAgcmV0dXJuIG9uRGF0ZXNDaGFuZ2U7XG4gIH0oKSxcblxuICBmb2N1c2VkSW5wdXQ6IG51bGwsXG4gIG9uRm9jdXNDaGFuZ2U6IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBvbkZvY3VzQ2hhbmdlKCkge31cblxuICAgIHJldHVybiBvbkZvY3VzQ2hhbmdlO1xuICB9KCksXG4gIG9uQ2xvc2U6IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBvbkNsb3NlKCkge31cblxuICAgIHJldHVybiBvbkNsb3NlO1xuICB9KCksXG5cbiAga2VlcE9wZW5PbkRhdGVTZWxlY3Q6IGZhbHNlLFxuICBtaW5pbXVtTmlnaHRzOiAxLFxuICBpc091dHNpZGVSYW5nZTogZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIGlzT3V0c2lkZVJhbmdlKCkge31cblxuICAgIHJldHVybiBpc091dHNpZGVSYW5nZTtcbiAgfSgpLFxuICBpc0RheUJsb2NrZWQ6IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBpc0RheUJsb2NrZWQoKSB7fVxuXG4gICAgcmV0dXJuIGlzRGF5QmxvY2tlZDtcbiAgfSgpLFxuICBpc0RheUhpZ2hsaWdodGVkOiBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gaXNEYXlIaWdobGlnaHRlZCgpIHt9XG5cbiAgICByZXR1cm4gaXNEYXlIaWdobGlnaHRlZDtcbiAgfSgpLFxuXG4gIC8vIERheVBpY2tlciBwcm9wc1xuICByZW5kZXJNb250aDogbnVsbCxcbiAgZW5hYmxlT3V0c2lkZURheXM6IGZhbHNlLFxuICBudW1iZXJPZk1vbnRoczogMSxcbiAgb3JpZW50YXRpb246IF9jb25zdGFudHMuSE9SSVpPTlRBTF9PUklFTlRBVElPTixcbiAgd2l0aFBvcnRhbDogZmFsc2UsXG4gIGhpZGVLZXlib2FyZFNob3J0Y3V0c1BhbmVsOiBmYWxzZSxcbiAgaW5pdGlhbFZpc2libGVNb250aDogbnVsbCxcbiAgZGF5U2l6ZTogX2NvbnN0YW50cy5EQVlfU0laRSxcblxuICBuYXZQcmV2OiBudWxsLFxuICBuYXZOZXh0OiBudWxsLFxuXG4gIG9uUHJldk1vbnRoQ2xpY2s6IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBvblByZXZNb250aENsaWNrKCkge31cblxuICAgIHJldHVybiBvblByZXZNb250aENsaWNrO1xuICB9KCksXG4gIG9uTmV4dE1vbnRoQ2xpY2s6IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBvbk5leHRNb250aENsaWNrKCkge31cblxuICAgIHJldHVybiBvbk5leHRNb250aENsaWNrO1xuICB9KCksXG4gIG9uT3V0c2lkZUNsaWNrOiBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gb25PdXRzaWRlQ2xpY2soKSB7fVxuXG4gICAgcmV0dXJuIG9uT3V0c2lkZUNsaWNrO1xuICB9KCksXG5cbiAgcmVuZGVyRGF5OiBudWxsLFxuICByZW5kZXJDYWxlbmRhckluZm86IG51bGwsXG4gIGZpcnN0RGF5T2ZXZWVrOiBudWxsLFxuXG4gIC8vIGFjY2Vzc2liaWxpdHlcbiAgb25CbHVyOiBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gb25CbHVyKCkge31cblxuICAgIHJldHVybiBvbkJsdXI7XG4gIH0oKSxcblxuICBpc0ZvY3VzZWQ6IGZhbHNlLFxuICBzaG93S2V5Ym9hcmRTaG9ydGN1dHM6IGZhbHNlLFxuXG4gIC8vIGkxOG5cbiAgbW9udGhGb3JtYXQ6ICdNTU1NIFlZWVknLFxuICBwaHJhc2VzOiBfZGVmYXVsdFBocmFzZXMuRGF5UGlja2VyUGhyYXNlcyxcblxuICBpc1JUTDogZmFsc2Vcbn07XG5cbnZhciBEYXlQaWNrZXJSYW5nZUNvbnRyb2xsZXIgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoRGF5UGlja2VyUmFuZ2VDb250cm9sbGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBEYXlQaWNrZXJSYW5nZUNvbnRyb2xsZXIocHJvcHMpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRGF5UGlja2VyUmFuZ2VDb250cm9sbGVyKTtcblxuICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChEYXlQaWNrZXJSYW5nZUNvbnRyb2xsZXIuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihEYXlQaWNrZXJSYW5nZUNvbnRyb2xsZXIpKS5jYWxsKHRoaXMsIHByb3BzKSk7XG5cbiAgICBfdGhpcy5pc1RvdWNoRGV2aWNlID0gKDAsIF9pc1RvdWNoRGV2aWNlMlsnZGVmYXVsdCddKSgpO1xuICAgIF90aGlzLnRvZGF5ID0gKDAsIF9tb21lbnQyWydkZWZhdWx0J10pKCk7XG4gICAgX3RoaXMubW9kaWZpZXJzID0ge1xuICAgICAgdG9kYXk6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZnVuY3Rpb24gdG9kYXkoZGF5KSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzLmlzVG9kYXkoZGF5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0b2RheTtcbiAgICAgIH0oKSxcbiAgICAgIGJsb2NrZWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZnVuY3Rpb24gYmxvY2tlZChkYXkpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMuaXNCbG9ja2VkKGRheSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYmxvY2tlZDtcbiAgICAgIH0oKSxcbiAgICAgICdibG9ja2VkLWNhbGVuZGFyJzogZnVuY3Rpb24gKCkge1xuICAgICAgICBmdW5jdGlvbiBibG9ja2VkQ2FsZW5kYXIoZGF5KSB7XG4gICAgICAgICAgcmV0dXJuIHByb3BzLmlzRGF5QmxvY2tlZChkYXkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGJsb2NrZWRDYWxlbmRhcjtcbiAgICAgIH0oKSxcbiAgICAgICdibG9ja2VkLW91dC1vZi1yYW5nZSc6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZnVuY3Rpb24gYmxvY2tlZE91dE9mUmFuZ2UoZGF5KSB7XG4gICAgICAgICAgcmV0dXJuIHByb3BzLmlzT3V0c2lkZVJhbmdlKGRheSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYmxvY2tlZE91dE9mUmFuZ2U7XG4gICAgICB9KCksXG4gICAgICAnaGlnaGxpZ2h0ZWQtY2FsZW5kYXInOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZ1bmN0aW9uIGhpZ2hsaWdodGVkQ2FsZW5kYXIoZGF5KSB7XG4gICAgICAgICAgcmV0dXJuIHByb3BzLmlzRGF5SGlnaGxpZ2h0ZWQoZGF5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBoaWdobGlnaHRlZENhbGVuZGFyO1xuICAgICAgfSgpLFxuICAgICAgdmFsaWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZnVuY3Rpb24gdmFsaWQoZGF5KSB7XG4gICAgICAgICAgcmV0dXJuICFfdGhpcy5pc0Jsb2NrZWQoZGF5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB2YWxpZDtcbiAgICAgIH0oKSxcbiAgICAgICdzZWxlY3RlZC1zdGFydCc6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZnVuY3Rpb24gc2VsZWN0ZWRTdGFydChkYXkpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMuaXNTdGFydERhdGUoZGF5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzZWxlY3RlZFN0YXJ0O1xuICAgICAgfSgpLFxuICAgICAgJ3NlbGVjdGVkLWVuZCc6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZnVuY3Rpb24gc2VsZWN0ZWRFbmQoZGF5KSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzLmlzRW5kRGF0ZShkYXkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHNlbGVjdGVkRW5kO1xuICAgICAgfSgpLFxuICAgICAgJ2Jsb2NrZWQtbWluaW11bS1uaWdodHMnOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZ1bmN0aW9uIGJsb2NrZWRNaW5pbXVtTmlnaHRzKGRheSkge1xuICAgICAgICAgIHJldHVybiBfdGhpcy5kb2VzTm90TWVldE1pbmltdW1OaWdodHMoZGF5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBibG9ja2VkTWluaW11bU5pZ2h0cztcbiAgICAgIH0oKSxcbiAgICAgICdzZWxlY3RlZC1zcGFuJzogZnVuY3Rpb24gKCkge1xuICAgICAgICBmdW5jdGlvbiBzZWxlY3RlZFNwYW4oZGF5KSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzLmlzSW5TZWxlY3RlZFNwYW4oZGF5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzZWxlY3RlZFNwYW47XG4gICAgICB9KCksXG4gICAgICAnbGFzdC1pbi1yYW5nZSc6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZnVuY3Rpb24gbGFzdEluUmFuZ2UoZGF5KSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzLmlzTGFzdEluUmFuZ2UoZGF5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBsYXN0SW5SYW5nZTtcbiAgICAgIH0oKSxcbiAgICAgIGhvdmVyZWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZnVuY3Rpb24gaG92ZXJlZChkYXkpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMuaXNIb3ZlcmVkKGRheSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gaG92ZXJlZDtcbiAgICAgIH0oKSxcbiAgICAgICdob3ZlcmVkLXNwYW4nOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZ1bmN0aW9uIGhvdmVyZWRTcGFuKGRheSkge1xuICAgICAgICAgIHJldHVybiBfdGhpcy5pc0luSG92ZXJlZFNwYW4oZGF5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBob3ZlcmVkU3BhbjtcbiAgICAgIH0oKSxcbiAgICAgICdhZnRlci1ob3ZlcmVkLXN0YXJ0JzogZnVuY3Rpb24gKCkge1xuICAgICAgICBmdW5jdGlvbiBhZnRlckhvdmVyZWRTdGFydChkYXkpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMuaXNEYXlBZnRlckhvdmVyZWRTdGFydERhdGUoZGF5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhZnRlckhvdmVyZWRTdGFydDtcbiAgICAgIH0oKVxuICAgIH07XG5cbiAgICB2YXIgX3RoaXMkZ2V0U3RhdGVGb3JOZXdNID0gX3RoaXMuZ2V0U3RhdGVGb3JOZXdNb250aChwcm9wcyksXG4gICAgICAgIGN1cnJlbnRNb250aCA9IF90aGlzJGdldFN0YXRlRm9yTmV3TS5jdXJyZW50TW9udGgsXG4gICAgICAgIHZpc2libGVEYXlzID0gX3RoaXMkZ2V0U3RhdGVGb3JOZXdNLnZpc2libGVEYXlzO1xuXG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBob3ZlckRhdGU6IG51bGwsXG4gICAgICBjdXJyZW50TW9udGg6IGN1cnJlbnRNb250aCxcbiAgICAgIHBocmFzZXM6IHByb3BzLnBocmFzZXMsXG4gICAgICB2aXNpYmxlRGF5czogdmlzaWJsZURheXNcbiAgICB9O1xuXG4gICAgX3RoaXMub25EYXlDbGljayA9IF90aGlzLm9uRGF5Q2xpY2suYmluZChfdGhpcyk7XG4gICAgX3RoaXMub25EYXlNb3VzZUVudGVyID0gX3RoaXMub25EYXlNb3VzZUVudGVyLmJpbmQoX3RoaXMpO1xuICAgIF90aGlzLm9uRGF5TW91c2VMZWF2ZSA9IF90aGlzLm9uRGF5TW91c2VMZWF2ZS5iaW5kKF90aGlzKTtcbiAgICBfdGhpcy5vblByZXZNb250aENsaWNrID0gX3RoaXMub25QcmV2TW9udGhDbGljay5iaW5kKF90aGlzKTtcbiAgICBfdGhpcy5vbk5leHRNb250aENsaWNrID0gX3RoaXMub25OZXh0TW9udGhDbGljay5iaW5kKF90aGlzKTtcbiAgICBfdGhpcy5vbk11bHRpcGx5U2Nyb2xsYWJsZU1vbnRocyA9IF90aGlzLm9uTXVsdGlwbHlTY3JvbGxhYmxlTW9udGhzLmJpbmQoX3RoaXMpO1xuICAgIF90aGlzLmdldEZpcnN0Rm9jdXNhYmxlRGF5ID0gX3RoaXMuZ2V0Rmlyc3RGb2N1c2FibGVEYXkuYmluZChfdGhpcyk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKERheVBpY2tlclJhbmdlQ29udHJvbGxlciwgW3tcbiAgICBrZXk6ICdjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgICAgdmFyIHN0YXJ0RGF0ZSA9IG5leHRQcm9wcy5zdGFydERhdGUsXG4gICAgICAgICAgICBlbmREYXRlID0gbmV4dFByb3BzLmVuZERhdGUsXG4gICAgICAgICAgICBmb2N1c2VkSW5wdXQgPSBuZXh0UHJvcHMuZm9jdXNlZElucHV0LFxuICAgICAgICAgICAgbWluaW11bU5pZ2h0cyA9IG5leHRQcm9wcy5taW5pbXVtTmlnaHRzLFxuICAgICAgICAgICAgaXNPdXRzaWRlUmFuZ2UgPSBuZXh0UHJvcHMuaXNPdXRzaWRlUmFuZ2UsXG4gICAgICAgICAgICBpc0RheUJsb2NrZWQgPSBuZXh0UHJvcHMuaXNEYXlCbG9ja2VkLFxuICAgICAgICAgICAgaXNEYXlIaWdobGlnaHRlZCA9IG5leHRQcm9wcy5pc0RheUhpZ2hsaWdodGVkLFxuICAgICAgICAgICAgcGhyYXNlcyA9IG5leHRQcm9wcy5waHJhc2VzLFxuICAgICAgICAgICAgaW5pdGlhbFZpc2libGVNb250aCA9IG5leHRQcm9wcy5pbml0aWFsVmlzaWJsZU1vbnRoLFxuICAgICAgICAgICAgbnVtYmVyT2ZNb250aHMgPSBuZXh0UHJvcHMubnVtYmVyT2ZNb250aHMsXG4gICAgICAgICAgICBlbmFibGVPdXRzaWRlRGF5cyA9IG5leHRQcm9wcy5lbmFibGVPdXRzaWRlRGF5cztcbiAgICAgICAgdmFyIHZpc2libGVEYXlzID0gdGhpcy5zdGF0ZS52aXNpYmxlRGF5cztcblxuICAgICAgICBpZiAoaXNPdXRzaWRlUmFuZ2UgIT09IHRoaXMucHJvcHMuaXNPdXRzaWRlUmFuZ2UpIHtcbiAgICAgICAgICB0aGlzLm1vZGlmaWVyc1snYmxvY2tlZC1vdXQtb2YtcmFuZ2UnXSA9IGZ1bmN0aW9uIChkYXkpIHtcbiAgICAgICAgICAgIHJldHVybiBpc091dHNpZGVSYW5nZShkYXkpO1xuICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNEYXlCbG9ja2VkICE9PSB0aGlzLnByb3BzLmlzRGF5QmxvY2tlZCkge1xuICAgICAgICAgIHRoaXMubW9kaWZpZXJzWydibG9ja2VkLWNhbGVuZGFyJ10gPSBmdW5jdGlvbiAoZGF5KSB7XG4gICAgICAgICAgICByZXR1cm4gaXNEYXlCbG9ja2VkKGRheSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc0RheUhpZ2hsaWdodGVkICE9PSB0aGlzLnByb3BzLmlzRGF5SGlnaGxpZ2h0ZWQpIHtcbiAgICAgICAgICB0aGlzLm1vZGlmaWVyc1snaGlnaGxpZ2h0ZWQtY2FsZW5kYXInXSA9IGZ1bmN0aW9uIChkYXkpIHtcbiAgICAgICAgICAgIHJldHVybiBpc0RheUhpZ2hsaWdodGVkKGRheSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBkaWRTdGFydERhdGVDaGFuZ2UgPSBzdGFydERhdGUgIT09IHRoaXMucHJvcHMuc3RhcnREYXRlO1xuICAgICAgICB2YXIgZGlkRW5kRGF0ZUNoYW5nZSA9IGVuZERhdGUgIT09IHRoaXMucHJvcHMuZW5kRGF0ZTtcbiAgICAgICAgdmFyIGRpZEZvY3VzQ2hhbmdlID0gZm9jdXNlZElucHV0ICE9PSB0aGlzLnByb3BzLmZvY3VzZWRJbnB1dDtcblxuICAgICAgICBpZiAoKGluaXRpYWxWaXNpYmxlTW9udGggIT09IHRoaXMucHJvcHMuaW5pdGlhbFZpc2libGVNb250aCB8fCBudW1iZXJPZk1vbnRocyAhPT0gdGhpcy5wcm9wcy5udW1iZXJPZk1vbnRocyB8fCBlbmFibGVPdXRzaWRlRGF5cyAhPT0gdGhpcy5wcm9wcy5lbmFibGVPdXRzaWRlRGF5cykgJiYgIXRoaXMucHJvcHMuZm9jdXNlZElucHV0ICYmIGRpZEZvY3VzQ2hhbmdlKSB7XG4gICAgICAgICAgdmFyIG5ld01vbnRoU3RhdGUgPSB0aGlzLmdldFN0YXRlRm9yTmV3TW9udGgobmV4dFByb3BzKTtcbiAgICAgICAgICB2YXIgY3VycmVudE1vbnRoID0gbmV3TW9udGhTdGF0ZS5jdXJyZW50TW9udGg7XG4gICAgICAgICAgdmlzaWJsZURheXMgPSBuZXdNb250aFN0YXRlLnZpc2libGVEYXlzO1xuICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgY3VycmVudE1vbnRoOiBjdXJyZW50TW9udGgsXG4gICAgICAgICAgICB2aXNpYmxlRGF5czogdmlzaWJsZURheXNcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBtb2RpZmllcnMgPSB7fTtcblxuICAgICAgICBpZiAoZGlkU3RhcnREYXRlQ2hhbmdlKSB7XG4gICAgICAgICAgbW9kaWZpZXJzID0gdGhpcy5kZWxldGVNb2RpZmllcihtb2RpZmllcnMsIHRoaXMucHJvcHMuc3RhcnREYXRlLCAnc2VsZWN0ZWQtc3RhcnQnKTtcbiAgICAgICAgICBtb2RpZmllcnMgPSB0aGlzLmFkZE1vZGlmaWVyKG1vZGlmaWVycywgc3RhcnREYXRlLCAnc2VsZWN0ZWQtc3RhcnQnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkaWRFbmREYXRlQ2hhbmdlKSB7XG4gICAgICAgICAgbW9kaWZpZXJzID0gdGhpcy5kZWxldGVNb2RpZmllcihtb2RpZmllcnMsIHRoaXMucHJvcHMuZW5kRGF0ZSwgJ3NlbGVjdGVkLWVuZCcpO1xuICAgICAgICAgIG1vZGlmaWVycyA9IHRoaXMuYWRkTW9kaWZpZXIobW9kaWZpZXJzLCBlbmREYXRlLCAnc2VsZWN0ZWQtZW5kJyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZGlkU3RhcnREYXRlQ2hhbmdlIHx8IGRpZEVuZERhdGVDaGFuZ2UpIHtcbiAgICAgICAgICBpZiAodGhpcy5wcm9wcy5zdGFydERhdGUgJiYgdGhpcy5wcm9wcy5lbmREYXRlKSB7XG4gICAgICAgICAgICBtb2RpZmllcnMgPSB0aGlzLmRlbGV0ZU1vZGlmaWVyRnJvbVJhbmdlKG1vZGlmaWVycywgdGhpcy5wcm9wcy5zdGFydERhdGUsIHRoaXMucHJvcHMuZW5kRGF0ZS5jbG9uZSgpLmFkZCgxLCAnZGF5JyksICdzZWxlY3RlZC1zcGFuJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHN0YXJ0RGF0ZSAmJiBlbmREYXRlKSB7XG4gICAgICAgICAgICBtb2RpZmllcnMgPSB0aGlzLmRlbGV0ZU1vZGlmaWVyRnJvbVJhbmdlKG1vZGlmaWVycywgc3RhcnREYXRlLCBlbmREYXRlLmNsb25lKCkuYWRkKDEsICdkYXknKSwgJ2hvdmVyZWQtc3BhbicpO1xuXG4gICAgICAgICAgICBtb2RpZmllcnMgPSB0aGlzLmFkZE1vZGlmaWVyVG9SYW5nZShtb2RpZmllcnMsIHN0YXJ0RGF0ZS5jbG9uZSgpLmFkZCgxLCAnZGF5JyksIGVuZERhdGUsICdzZWxlY3RlZC1zcGFuJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0aGlzLmlzVG91Y2hEZXZpY2UgJiYgZGlkU3RhcnREYXRlQ2hhbmdlICYmIHN0YXJ0RGF0ZSAmJiAhZW5kRGF0ZSkge1xuICAgICAgICAgIHZhciBzdGFydFNwYW4gPSBzdGFydERhdGUuY2xvbmUoKS5hZGQoMSwgJ2RheScpO1xuICAgICAgICAgIHZhciBlbmRTcGFuID0gc3RhcnREYXRlLmNsb25lKCkuYWRkKG1pbmltdW1OaWdodHMgKyAxLCAnZGF5cycpO1xuICAgICAgICAgIG1vZGlmaWVycyA9IHRoaXMuYWRkTW9kaWZpZXJUb1JhbmdlKG1vZGlmaWVycywgc3RhcnRTcGFuLCBlbmRTcGFuLCAnYWZ0ZXItaG92ZXJlZC1zdGFydCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG1pbmltdW1OaWdodHMgPiAwIHx8IG1pbmltdW1OaWdodHMgIT09IHRoaXMucHJvcHMubWluaW11bU5pZ2h0cykge1xuICAgICAgICAgIGlmIChkaWRGb2N1c0NoYW5nZSB8fCBkaWRTdGFydERhdGVDaGFuZ2UpIHtcbiAgICAgICAgICAgIHZhciBfc3RhcnRTcGFuID0gdGhpcy5wcm9wcy5zdGFydERhdGUgPyB0aGlzLnByb3BzLnN0YXJ0RGF0ZSA6IHRoaXMudG9kYXk7XG4gICAgICAgICAgICBtb2RpZmllcnMgPSB0aGlzLmRlbGV0ZU1vZGlmaWVyRnJvbVJhbmdlKG1vZGlmaWVycywgX3N0YXJ0U3BhbiwgX3N0YXJ0U3Bhbi5jbG9uZSgpLmFkZChtaW5pbXVtTmlnaHRzLCAnZGF5cycpLCAnYmxvY2tlZC1taW5pbXVtLW5pZ2h0cycpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChzdGFydERhdGUgJiYgZm9jdXNlZElucHV0ID09PSBfY29uc3RhbnRzLkVORF9EQVRFKSB7XG4gICAgICAgICAgICBtb2RpZmllcnMgPSB0aGlzLmFkZE1vZGlmaWVyVG9SYW5nZShtb2RpZmllcnMsIHN0YXJ0RGF0ZSwgc3RhcnREYXRlLmNsb25lKCkuYWRkKG1pbmltdW1OaWdodHMsICdkYXlzJyksICdibG9ja2VkLW1pbmltdW0tbmlnaHRzJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRpZEZvY3VzQ2hhbmdlKSB7XG4gICAgICAgICAgKDAsIF9vYmplY3QyWydkZWZhdWx0J10pKHZpc2libGVEYXlzKS5mb3JFYWNoKGZ1bmN0aW9uIChkYXlzKSB7XG4gICAgICAgICAgICBPYmplY3Qua2V5cyhkYXlzKS5mb3JFYWNoKGZ1bmN0aW9uIChkYXkpIHtcbiAgICAgICAgICAgICAgdmFyIG1vbWVudE9iaiA9ICgwLCBfbW9tZW50MlsnZGVmYXVsdCddKShkYXkpO1xuXG4gICAgICAgICAgICAgIGlmIChfdGhpczIuaXNCbG9ja2VkKG1vbWVudE9iaikpIHtcbiAgICAgICAgICAgICAgICBtb2RpZmllcnMgPSBfdGhpczIuYWRkTW9kaWZpZXIobW9kaWZpZXJzLCBtb21lbnRPYmosICdibG9ja2VkJyk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbW9kaWZpZXJzID0gX3RoaXMyLmRlbGV0ZU1vZGlmaWVyKG1vZGlmaWVycywgbW9tZW50T2JqLCAnYmxvY2tlZCcpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgaWYgKGlzT3V0c2lkZVJhbmdlKG1vbWVudE9iaikpIHtcbiAgICAgICAgICAgICAgICBtb2RpZmllcnMgPSBfdGhpczIuYWRkTW9kaWZpZXIobW9kaWZpZXJzLCBtb21lbnRPYmosICdibG9ja2VkLW91dC1vZi1yYW5nZScpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG1vZGlmaWVycyA9IF90aGlzMi5kZWxldGVNb2RpZmllcihtb2RpZmllcnMsIG1vbWVudE9iaiwgJ2Jsb2NrZWQtb3V0LW9mLXJhbmdlJyk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAoaXNEYXlCbG9ja2VkKG1vbWVudE9iaikpIHtcbiAgICAgICAgICAgICAgICBtb2RpZmllcnMgPSBfdGhpczIuYWRkTW9kaWZpZXIobW9kaWZpZXJzLCBtb21lbnRPYmosICdibG9ja2VkLWNhbGVuZGFyJyk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbW9kaWZpZXJzID0gX3RoaXMyLmRlbGV0ZU1vZGlmaWVyKG1vZGlmaWVycywgbW9tZW50T2JqLCAnYmxvY2tlZC1jYWxlbmRhcicpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgaWYgKGlzRGF5SGlnaGxpZ2h0ZWQobW9tZW50T2JqKSkge1xuICAgICAgICAgICAgICAgIG1vZGlmaWVycyA9IF90aGlzMi5hZGRNb2RpZmllcihtb2RpZmllcnMsIG1vbWVudE9iaiwgJ2hpZ2hsaWdodGVkLWNhbGVuZGFyJyk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbW9kaWZpZXJzID0gX3RoaXMyLmRlbGV0ZU1vZGlmaWVyKG1vZGlmaWVycywgbW9tZW50T2JqLCAnaGlnaGxpZ2h0ZWQtY2FsZW5kYXInKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdG9kYXkgPSAoMCwgX21vbWVudDJbJ2RlZmF1bHQnXSkoKTtcbiAgICAgICAgaWYgKCEoMCwgX2lzU2FtZURheTJbJ2RlZmF1bHQnXSkodGhpcy50b2RheSwgdG9kYXkpKSB7XG4gICAgICAgICAgbW9kaWZpZXJzID0gdGhpcy5kZWxldGVNb2RpZmllcihtb2RpZmllcnMsIHRoaXMudG9kYXksICd0b2RheScpO1xuICAgICAgICAgIG1vZGlmaWVycyA9IHRoaXMuYWRkTW9kaWZpZXIobW9kaWZpZXJzLCB0b2RheSwgJ3RvZGF5Jyk7XG4gICAgICAgICAgdGhpcy50b2RheSA9IHRvZGF5O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKE9iamVjdC5rZXlzKG1vZGlmaWVycykubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgdmlzaWJsZURheXM6ICgwLCBfb2JqZWN0NFsnZGVmYXVsdCddKSh7fSwgdmlzaWJsZURheXMsIG1vZGlmaWVycylcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkaWRGb2N1c0NoYW5nZSB8fCBwaHJhc2VzICE9PSB0aGlzLnByb3BzLnBocmFzZXMpIHtcbiAgICAgICAgICAvLyBzZXQgdGhlIGFwcHJvcHJpYXRlIENhbGVuZGFyRGF5IHBocmFzZSBiYXNlZCBvbiBmb2N1c2VkSW5wdXRcbiAgICAgICAgICB2YXIgY2hvb3NlQXZhaWxhYmxlRGF0ZSA9IHBocmFzZXMuY2hvb3NlQXZhaWxhYmxlRGF0ZTtcbiAgICAgICAgICBpZiAoZm9jdXNlZElucHV0ID09PSBfY29uc3RhbnRzLlNUQVJUX0RBVEUpIHtcbiAgICAgICAgICAgIGNob29zZUF2YWlsYWJsZURhdGUgPSBwaHJhc2VzLmNob29zZUF2YWlsYWJsZVN0YXJ0RGF0ZTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGZvY3VzZWRJbnB1dCA9PT0gX2NvbnN0YW50cy5FTkRfREFURSkge1xuICAgICAgICAgICAgY2hvb3NlQXZhaWxhYmxlRGF0ZSA9IHBocmFzZXMuY2hvb3NlQXZhaWxhYmxlRW5kRGF0ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIHBocmFzZXM6ICgwLCBfb2JqZWN0NFsnZGVmYXVsdCddKSh7fSwgcGhyYXNlcywge1xuICAgICAgICAgICAgICBjaG9vc2VBdmFpbGFibGVEYXRlOiBjaG9vc2VBdmFpbGFibGVEYXRlXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzO1xuICAgIH0oKVxuICB9LCB7XG4gICAga2V5OiAnb25EYXlDbGljaycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIG9uRGF5Q2xpY2soZGF5LCBlKSB7XG4gICAgICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgICAga2VlcE9wZW5PbkRhdGVTZWxlY3QgPSBfcHJvcHMua2VlcE9wZW5PbkRhdGVTZWxlY3QsXG4gICAgICAgICAgICBtaW5pbXVtTmlnaHRzID0gX3Byb3BzLm1pbmltdW1OaWdodHMsXG4gICAgICAgICAgICBvbkJsdXIgPSBfcHJvcHMub25CbHVyO1xuXG4gICAgICAgIGlmIChlKSBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGlmICh0aGlzLmlzQmxvY2tlZChkYXkpKSByZXR1cm47XG5cbiAgICAgICAgdmFyIF9wcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICAgICAgZm9jdXNlZElucHV0ID0gX3Byb3BzMi5mb2N1c2VkSW5wdXQsXG4gICAgICAgICAgICBvbkZvY3VzQ2hhbmdlID0gX3Byb3BzMi5vbkZvY3VzQ2hhbmdlLFxuICAgICAgICAgICAgb25DbG9zZSA9IF9wcm9wczIub25DbG9zZTtcbiAgICAgICAgdmFyIF9wcm9wczMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgICAgc3RhcnREYXRlID0gX3Byb3BzMy5zdGFydERhdGUsXG4gICAgICAgICAgICBlbmREYXRlID0gX3Byb3BzMy5lbmREYXRlO1xuXG4gICAgICAgIGlmIChmb2N1c2VkSW5wdXQgPT09IF9jb25zdGFudHMuU1RBUlRfREFURSkge1xuICAgICAgICAgIG9uRm9jdXNDaGFuZ2UoX2NvbnN0YW50cy5FTkRfREFURSk7XG5cbiAgICAgICAgICBzdGFydERhdGUgPSBkYXk7XG5cbiAgICAgICAgICBpZiAoKDAsIF9pc0luY2x1c2l2ZWx5QWZ0ZXJEYXkyWydkZWZhdWx0J10pKGRheSwgZW5kRGF0ZSkpIHtcbiAgICAgICAgICAgIGVuZERhdGUgPSBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChmb2N1c2VkSW5wdXQgPT09IF9jb25zdGFudHMuRU5EX0RBVEUpIHtcbiAgICAgICAgICB2YXIgZmlyc3RBbGxvd2VkRW5kRGF0ZSA9IHN0YXJ0RGF0ZSAmJiBzdGFydERhdGUuY2xvbmUoKS5hZGQobWluaW11bU5pZ2h0cywgJ2RheXMnKTtcblxuICAgICAgICAgIGlmICghc3RhcnREYXRlKSB7XG4gICAgICAgICAgICBlbmREYXRlID0gZGF5O1xuICAgICAgICAgICAgb25Gb2N1c0NoYW5nZShfY29uc3RhbnRzLlNUQVJUX0RBVEUpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoKDAsIF9pc0luY2x1c2l2ZWx5QWZ0ZXJEYXkyWydkZWZhdWx0J10pKGRheSwgZmlyc3RBbGxvd2VkRW5kRGF0ZSkpIHtcbiAgICAgICAgICAgIGVuZERhdGUgPSBkYXk7XG4gICAgICAgICAgICBpZiAoIWtlZXBPcGVuT25EYXRlU2VsZWN0KSB7XG4gICAgICAgICAgICAgIG9uRm9jdXNDaGFuZ2UobnVsbCk7XG4gICAgICAgICAgICAgIG9uQ2xvc2UoeyBzdGFydERhdGU6IHN0YXJ0RGF0ZSwgZW5kRGF0ZTogZW5kRGF0ZSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3RhcnREYXRlID0gZGF5O1xuICAgICAgICAgICAgZW5kRGF0ZSA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5wcm9wcy5vbkRhdGVzQ2hhbmdlKHsgc3RhcnREYXRlOiBzdGFydERhdGUsIGVuZERhdGU6IGVuZERhdGUgfSk7XG4gICAgICAgIG9uQmx1cigpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gb25EYXlDbGljaztcbiAgICB9KClcbiAgfSwge1xuICAgIGtleTogJ29uRGF5TW91c2VFbnRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIG9uRGF5TW91c2VFbnRlcihkYXkpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNUb3VjaERldmljZSkgcmV0dXJuO1xuICAgICAgICB2YXIgX3Byb3BzNCA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgICBzdGFydERhdGUgPSBfcHJvcHM0LnN0YXJ0RGF0ZSxcbiAgICAgICAgICAgIGVuZERhdGUgPSBfcHJvcHM0LmVuZERhdGUsXG4gICAgICAgICAgICBmb2N1c2VkSW5wdXQgPSBfcHJvcHM0LmZvY3VzZWRJbnB1dCxcbiAgICAgICAgICAgIG1pbmltdW1OaWdodHMgPSBfcHJvcHM0Lm1pbmltdW1OaWdodHM7XG4gICAgICAgIHZhciBfc3RhdGUgPSB0aGlzLnN0YXRlLFxuICAgICAgICAgICAgaG92ZXJEYXRlID0gX3N0YXRlLmhvdmVyRGF0ZSxcbiAgICAgICAgICAgIHZpc2libGVEYXlzID0gX3N0YXRlLnZpc2libGVEYXlzO1xuXG4gICAgICAgIGlmIChmb2N1c2VkSW5wdXQpIHtcbiAgICAgICAgICB2YXIgbW9kaWZpZXJzID0ge307XG4gICAgICAgICAgbW9kaWZpZXJzID0gdGhpcy5kZWxldGVNb2RpZmllcihtb2RpZmllcnMsIGhvdmVyRGF0ZSwgJ2hvdmVyZWQnKTtcbiAgICAgICAgICBtb2RpZmllcnMgPSB0aGlzLmFkZE1vZGlmaWVyKG1vZGlmaWVycywgZGF5LCAnaG92ZXJlZCcpO1xuXG4gICAgICAgICAgaWYgKHN0YXJ0RGF0ZSAmJiAhZW5kRGF0ZSAmJiBmb2N1c2VkSW5wdXQgPT09IF9jb25zdGFudHMuRU5EX0RBVEUpIHtcbiAgICAgICAgICAgIGlmICgoMCwgX2lzQWZ0ZXJEYXkyWydkZWZhdWx0J10pKGhvdmVyRGF0ZSwgc3RhcnREYXRlKSkge1xuICAgICAgICAgICAgICB2YXIgZW5kU3BhbiA9IGhvdmVyRGF0ZS5jbG9uZSgpLmFkZCgxLCAnZGF5Jyk7XG4gICAgICAgICAgICAgIG1vZGlmaWVycyA9IHRoaXMuZGVsZXRlTW9kaWZpZXJGcm9tUmFuZ2UobW9kaWZpZXJzLCBzdGFydERhdGUsIGVuZFNwYW4sICdob3ZlcmVkLXNwYW4nKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCF0aGlzLmlzQmxvY2tlZChkYXkpICYmICgwLCBfaXNBZnRlckRheTJbJ2RlZmF1bHQnXSkoZGF5LCBzdGFydERhdGUpKSB7XG4gICAgICAgICAgICAgIHZhciBfZW5kU3BhbiA9IGRheS5jbG9uZSgpLmFkZCgxLCAnZGF5Jyk7XG4gICAgICAgICAgICAgIG1vZGlmaWVycyA9IHRoaXMuYWRkTW9kaWZpZXJUb1JhbmdlKG1vZGlmaWVycywgc3RhcnREYXRlLCBfZW5kU3BhbiwgJ2hvdmVyZWQtc3BhbicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICghc3RhcnREYXRlICYmIGVuZERhdGUgJiYgZm9jdXNlZElucHV0ID09PSBfY29uc3RhbnRzLlNUQVJUX0RBVEUpIHtcbiAgICAgICAgICAgIGlmICgoMCwgX2lzQmVmb3JlRGF5MlsnZGVmYXVsdCddKShob3ZlckRhdGUsIGVuZERhdGUpKSB7XG4gICAgICAgICAgICAgIG1vZGlmaWVycyA9IHRoaXMuZGVsZXRlTW9kaWZpZXJGcm9tUmFuZ2UobW9kaWZpZXJzLCBob3ZlckRhdGUsIGVuZERhdGUsICdob3ZlcmVkLXNwYW4nKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCF0aGlzLmlzQmxvY2tlZChkYXkpICYmICgwLCBfaXNCZWZvcmVEYXkyWydkZWZhdWx0J10pKGRheSwgZW5kRGF0ZSkpIHtcbiAgICAgICAgICAgICAgbW9kaWZpZXJzID0gdGhpcy5hZGRNb2RpZmllclRvUmFuZ2UobW9kaWZpZXJzLCBkYXksIGVuZERhdGUsICdob3ZlcmVkLXNwYW4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoc3RhcnREYXRlKSB7XG4gICAgICAgICAgICB2YXIgc3RhcnRTcGFuID0gc3RhcnREYXRlLmNsb25lKCkuYWRkKDEsICdkYXknKTtcbiAgICAgICAgICAgIHZhciBfZW5kU3BhbjIgPSBzdGFydERhdGUuY2xvbmUoKS5hZGQobWluaW11bU5pZ2h0cyArIDEsICdkYXlzJyk7XG4gICAgICAgICAgICBtb2RpZmllcnMgPSB0aGlzLmRlbGV0ZU1vZGlmaWVyRnJvbVJhbmdlKG1vZGlmaWVycywgc3RhcnRTcGFuLCBfZW5kU3BhbjIsICdhZnRlci1ob3ZlcmVkLXN0YXJ0Jyk7XG5cbiAgICAgICAgICAgIGlmICgoMCwgX2lzU2FtZURheTJbJ2RlZmF1bHQnXSkoZGF5LCBzdGFydERhdGUpKSB7XG4gICAgICAgICAgICAgIHZhciBuZXdTdGFydFNwYW4gPSBzdGFydERhdGUuY2xvbmUoKS5hZGQoMSwgJ2RheScpO1xuICAgICAgICAgICAgICB2YXIgbmV3RW5kU3BhbiA9IHN0YXJ0RGF0ZS5jbG9uZSgpLmFkZChtaW5pbXVtTmlnaHRzICsgMSwgJ2RheXMnKTtcbiAgICAgICAgICAgICAgbW9kaWZpZXJzID0gdGhpcy5hZGRNb2RpZmllclRvUmFuZ2UobW9kaWZpZXJzLCBuZXdTdGFydFNwYW4sIG5ld0VuZFNwYW4sICdhZnRlci1ob3ZlcmVkLXN0YXJ0Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBob3ZlckRhdGU6IGRheSxcbiAgICAgICAgICAgIHZpc2libGVEYXlzOiAoMCwgX29iamVjdDRbJ2RlZmF1bHQnXSkoe30sIHZpc2libGVEYXlzLCBtb2RpZmllcnMpXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG9uRGF5TW91c2VFbnRlcjtcbiAgICB9KClcbiAgfSwge1xuICAgIGtleTogJ29uRGF5TW91c2VMZWF2ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIG9uRGF5TW91c2VMZWF2ZShkYXkpIHtcbiAgICAgICAgdmFyIF9wcm9wczUgPSB0aGlzLnByb3BzLFxuICAgICAgICAgICAgc3RhcnREYXRlID0gX3Byb3BzNS5zdGFydERhdGUsXG4gICAgICAgICAgICBlbmREYXRlID0gX3Byb3BzNS5lbmREYXRlLFxuICAgICAgICAgICAgbWluaW11bU5pZ2h0cyA9IF9wcm9wczUubWluaW11bU5pZ2h0cztcbiAgICAgICAgdmFyIF9zdGF0ZTIgPSB0aGlzLnN0YXRlLFxuICAgICAgICAgICAgaG92ZXJEYXRlID0gX3N0YXRlMi5ob3ZlckRhdGUsXG4gICAgICAgICAgICB2aXNpYmxlRGF5cyA9IF9zdGF0ZTIudmlzaWJsZURheXM7XG5cbiAgICAgICAgaWYgKHRoaXMuaXNUb3VjaERldmljZSB8fCAhaG92ZXJEYXRlKSByZXR1cm47XG5cbiAgICAgICAgdmFyIG1vZGlmaWVycyA9IHt9O1xuICAgICAgICBtb2RpZmllcnMgPSB0aGlzLmRlbGV0ZU1vZGlmaWVyKG1vZGlmaWVycywgaG92ZXJEYXRlLCAnaG92ZXJlZCcpO1xuXG4gICAgICAgIGlmIChzdGFydERhdGUgJiYgIWVuZERhdGUgJiYgKDAsIF9pc0FmdGVyRGF5MlsnZGVmYXVsdCddKShob3ZlckRhdGUsIHN0YXJ0RGF0ZSkpIHtcbiAgICAgICAgICB2YXIgZW5kU3BhbiA9IGhvdmVyRGF0ZS5jbG9uZSgpLmFkZCgxLCAnZGF5Jyk7XG4gICAgICAgICAgbW9kaWZpZXJzID0gdGhpcy5kZWxldGVNb2RpZmllckZyb21SYW5nZShtb2RpZmllcnMsIHN0YXJ0RGF0ZSwgZW5kU3BhbiwgJ2hvdmVyZWQtc3BhbicpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFzdGFydERhdGUgJiYgZW5kRGF0ZSAmJiAoMCwgX2lzQWZ0ZXJEYXkyWydkZWZhdWx0J10pKGVuZERhdGUsIGhvdmVyRGF0ZSkpIHtcbiAgICAgICAgICBtb2RpZmllcnMgPSB0aGlzLmRlbGV0ZU1vZGlmaWVyRnJvbVJhbmdlKG1vZGlmaWVycywgaG92ZXJEYXRlLCBlbmREYXRlLCAnaG92ZXJlZC1zcGFuJyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3RhcnREYXRlICYmICgwLCBfaXNTYW1lRGF5MlsnZGVmYXVsdCddKShkYXksIHN0YXJ0RGF0ZSkpIHtcbiAgICAgICAgICB2YXIgc3RhcnRTcGFuID0gc3RhcnREYXRlLmNsb25lKCkuYWRkKDEsICdkYXknKTtcbiAgICAgICAgICB2YXIgX2VuZFNwYW4zID0gc3RhcnREYXRlLmNsb25lKCkuYWRkKG1pbmltdW1OaWdodHMgKyAxLCAnZGF5cycpO1xuICAgICAgICAgIG1vZGlmaWVycyA9IHRoaXMuZGVsZXRlTW9kaWZpZXJGcm9tUmFuZ2UobW9kaWZpZXJzLCBzdGFydFNwYW4sIF9lbmRTcGFuMywgJ2FmdGVyLWhvdmVyZWQtc3RhcnQnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIGhvdmVyRGF0ZTogbnVsbCxcbiAgICAgICAgICB2aXNpYmxlRGF5czogKDAsIF9vYmplY3Q0WydkZWZhdWx0J10pKHt9LCB2aXNpYmxlRGF5cywgbW9kaWZpZXJzKVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG9uRGF5TW91c2VMZWF2ZTtcbiAgICB9KClcbiAgfSwge1xuICAgIGtleTogJ29uUHJldk1vbnRoQ2xpY2snLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBvblByZXZNb250aENsaWNrKCkge1xuICAgICAgICB2YXIgX3Byb3BzNiA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgICBvblByZXZNb250aENsaWNrID0gX3Byb3BzNi5vblByZXZNb250aENsaWNrLFxuICAgICAgICAgICAgbnVtYmVyT2ZNb250aHMgPSBfcHJvcHM2Lm51bWJlck9mTW9udGhzLFxuICAgICAgICAgICAgZW5hYmxlT3V0c2lkZURheXMgPSBfcHJvcHM2LmVuYWJsZU91dHNpZGVEYXlzO1xuICAgICAgICB2YXIgX3N0YXRlMyA9IHRoaXMuc3RhdGUsXG4gICAgICAgICAgICBjdXJyZW50TW9udGggPSBfc3RhdGUzLmN1cnJlbnRNb250aCxcbiAgICAgICAgICAgIHZpc2libGVEYXlzID0gX3N0YXRlMy52aXNpYmxlRGF5cztcblxuICAgICAgICB2YXIgbmV3VmlzaWJsZURheXMgPSB7fTtcbiAgICAgICAgT2JqZWN0LmtleXModmlzaWJsZURheXMpLnNvcnQoKS5zbGljZSgwLCBudW1iZXJPZk1vbnRocyArIDEpLmZvckVhY2goZnVuY3Rpb24gKG1vbnRoKSB7XG4gICAgICAgICAgbmV3VmlzaWJsZURheXNbbW9udGhdID0gdmlzaWJsZURheXNbbW9udGhdO1xuICAgICAgICB9KTtcblxuICAgICAgICB2YXIgcHJldk1vbnRoID0gY3VycmVudE1vbnRoLmNsb25lKCkuc3VidHJhY3QoMiwgJ21vbnRocycpO1xuICAgICAgICB2YXIgcHJldk1vbnRoVmlzaWJsZURheXMgPSAoMCwgX2dldFZpc2libGVEYXlzMlsnZGVmYXVsdCddKShwcmV2TW9udGgsIDEsIGVuYWJsZU91dHNpZGVEYXlzLCB0cnVlKTtcblxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBjdXJyZW50TW9udGg6IGN1cnJlbnRNb250aC5jbG9uZSgpLnN1YnRyYWN0KDEsICdtb250aCcpLFxuICAgICAgICAgIHZpc2libGVEYXlzOiAoMCwgX29iamVjdDRbJ2RlZmF1bHQnXSkoe30sIG5ld1Zpc2libGVEYXlzLCB0aGlzLmdldE1vZGlmaWVycyhwcmV2TW9udGhWaXNpYmxlRGF5cykpXG4gICAgICAgIH0pO1xuXG4gICAgICAgIG9uUHJldk1vbnRoQ2xpY2soKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG9uUHJldk1vbnRoQ2xpY2s7XG4gICAgfSgpXG4gIH0sIHtcbiAgICBrZXk6ICdvbk5leHRNb250aENsaWNrJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gb25OZXh0TW9udGhDbGljaygpIHtcbiAgICAgICAgdmFyIF9wcm9wczcgPSB0aGlzLnByb3BzLFxuICAgICAgICAgICAgb25OZXh0TW9udGhDbGljayA9IF9wcm9wczcub25OZXh0TW9udGhDbGljayxcbiAgICAgICAgICAgIG51bWJlck9mTW9udGhzID0gX3Byb3BzNy5udW1iZXJPZk1vbnRocyxcbiAgICAgICAgICAgIGVuYWJsZU91dHNpZGVEYXlzID0gX3Byb3BzNy5lbmFibGVPdXRzaWRlRGF5cztcbiAgICAgICAgdmFyIF9zdGF0ZTQgPSB0aGlzLnN0YXRlLFxuICAgICAgICAgICAgY3VycmVudE1vbnRoID0gX3N0YXRlNC5jdXJyZW50TW9udGgsXG4gICAgICAgICAgICB2aXNpYmxlRGF5cyA9IF9zdGF0ZTQudmlzaWJsZURheXM7XG5cbiAgICAgICAgdmFyIG5ld1Zpc2libGVEYXlzID0ge307XG4gICAgICAgIE9iamVjdC5rZXlzKHZpc2libGVEYXlzKS5zb3J0KCkuc2xpY2UoMSkuZm9yRWFjaChmdW5jdGlvbiAobW9udGgpIHtcbiAgICAgICAgICBuZXdWaXNpYmxlRGF5c1ttb250aF0gPSB2aXNpYmxlRGF5c1ttb250aF07XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHZhciBuZXh0TW9udGggPSBjdXJyZW50TW9udGguY2xvbmUoKS5hZGQobnVtYmVyT2ZNb250aHMgKyAxLCAnbW9udGgnKTtcbiAgICAgICAgdmFyIG5leHRNb250aFZpc2libGVEYXlzID0gKDAsIF9nZXRWaXNpYmxlRGF5czJbJ2RlZmF1bHQnXSkobmV4dE1vbnRoLCAxLCBlbmFibGVPdXRzaWRlRGF5cywgdHJ1ZSk7XG5cbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgY3VycmVudE1vbnRoOiBjdXJyZW50TW9udGguY2xvbmUoKS5hZGQoMSwgJ21vbnRoJyksXG4gICAgICAgICAgdmlzaWJsZURheXM6ICgwLCBfb2JqZWN0NFsnZGVmYXVsdCddKSh7fSwgbmV3VmlzaWJsZURheXMsIHRoaXMuZ2V0TW9kaWZpZXJzKG5leHRNb250aFZpc2libGVEYXlzKSlcbiAgICAgICAgfSk7XG5cbiAgICAgICAgb25OZXh0TW9udGhDbGljaygpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gb25OZXh0TW9udGhDbGljaztcbiAgICB9KClcbiAgfSwge1xuICAgIGtleTogJ29uTXVsdGlwbHlTY3JvbGxhYmxlTW9udGhzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gb25NdWx0aXBseVNjcm9sbGFibGVNb250aHMoKSB7XG4gICAgICAgIHZhciBfcHJvcHM4ID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICAgIG51bWJlck9mTW9udGhzID0gX3Byb3BzOC5udW1iZXJPZk1vbnRocyxcbiAgICAgICAgICAgIGVuYWJsZU91dHNpZGVEYXlzID0gX3Byb3BzOC5lbmFibGVPdXRzaWRlRGF5cztcbiAgICAgICAgdmFyIF9zdGF0ZTUgPSB0aGlzLnN0YXRlLFxuICAgICAgICAgICAgY3VycmVudE1vbnRoID0gX3N0YXRlNS5jdXJyZW50TW9udGgsXG4gICAgICAgICAgICB2aXNpYmxlRGF5cyA9IF9zdGF0ZTUudmlzaWJsZURheXM7XG5cbiAgICAgICAgdmFyIG51bWJlck9mVmlzaWJsZU1vbnRocyA9IE9iamVjdC5rZXlzKHZpc2libGVEYXlzKS5sZW5ndGg7XG4gICAgICAgIHZhciBuZXh0TW9udGggPSBjdXJyZW50TW9udGguY2xvbmUoKS5hZGQobnVtYmVyT2ZWaXNpYmxlTW9udGhzLCAnbW9udGgnKTtcbiAgICAgICAgdmFyIG5ld1Zpc2libGVEYXlzID0gKDAsIF9nZXRWaXNpYmxlRGF5czJbJ2RlZmF1bHQnXSkobmV4dE1vbnRoLCBudW1iZXJPZk1vbnRocywgZW5hYmxlT3V0c2lkZURheXMsIHRydWUpO1xuXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIHZpc2libGVEYXlzOiAoMCwgX29iamVjdDRbJ2RlZmF1bHQnXSkoe30sIHZpc2libGVEYXlzLCB0aGlzLmdldE1vZGlmaWVycyhuZXdWaXNpYmxlRGF5cykpXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gb25NdWx0aXBseVNjcm9sbGFibGVNb250aHM7XG4gICAgfSgpXG4gIH0sIHtcbiAgICBrZXk6ICdnZXRGaXJzdEZvY3VzYWJsZURheScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIGdldEZpcnN0Rm9jdXNhYmxlRGF5KG5ld01vbnRoKSB7XG4gICAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICAgIHZhciBfcHJvcHM5ID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICAgIHN0YXJ0RGF0ZSA9IF9wcm9wczkuc3RhcnREYXRlLFxuICAgICAgICAgICAgZW5kRGF0ZSA9IF9wcm9wczkuZW5kRGF0ZSxcbiAgICAgICAgICAgIGZvY3VzZWRJbnB1dCA9IF9wcm9wczkuZm9jdXNlZElucHV0LFxuICAgICAgICAgICAgbWluaW11bU5pZ2h0cyA9IF9wcm9wczkubWluaW11bU5pZ2h0cyxcbiAgICAgICAgICAgIG51bWJlck9mTW9udGhzID0gX3Byb3BzOS5udW1iZXJPZk1vbnRocztcblxuICAgICAgICB2YXIgZm9jdXNlZERhdGUgPSBuZXdNb250aC5jbG9uZSgpLnN0YXJ0T2YoJ21vbnRoJyk7XG4gICAgICAgIGlmIChmb2N1c2VkSW5wdXQgPT09IF9jb25zdGFudHMuU1RBUlRfREFURSAmJiBzdGFydERhdGUpIHtcbiAgICAgICAgICBmb2N1c2VkRGF0ZSA9IHN0YXJ0RGF0ZS5jbG9uZSgpO1xuICAgICAgICB9IGVsc2UgaWYgKGZvY3VzZWRJbnB1dCA9PT0gX2NvbnN0YW50cy5FTkRfREFURSAmJiAhZW5kRGF0ZSAmJiBzdGFydERhdGUpIHtcbiAgICAgICAgICBmb2N1c2VkRGF0ZSA9IHN0YXJ0RGF0ZS5jbG9uZSgpLmFkZChtaW5pbXVtTmlnaHRzLCAnZGF5cycpO1xuICAgICAgICB9IGVsc2UgaWYgKGZvY3VzZWRJbnB1dCA9PT0gX2NvbnN0YW50cy5FTkRfREFURSAmJiBlbmREYXRlKSB7XG4gICAgICAgICAgZm9jdXNlZERhdGUgPSBlbmREYXRlLmNsb25lKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5pc0Jsb2NrZWQoZm9jdXNlZERhdGUpKSB7XG4gICAgICAgICAgdmFyIGRheXMgPSBbXTtcbiAgICAgICAgICB2YXIgbGFzdFZpc2libGVEYXkgPSBuZXdNb250aC5jbG9uZSgpLmFkZChudW1iZXJPZk1vbnRocyAtIDEsICdtb250aHMnKS5lbmRPZignbW9udGgnKTtcbiAgICAgICAgICB2YXIgY3VycmVudERheSA9IGZvY3VzZWREYXRlLmNsb25lKCk7XG4gICAgICAgICAgd2hpbGUgKCEoMCwgX2lzQWZ0ZXJEYXkyWydkZWZhdWx0J10pKGN1cnJlbnREYXksIGxhc3RWaXNpYmxlRGF5KSkge1xuICAgICAgICAgICAgY3VycmVudERheSA9IGN1cnJlbnREYXkuY2xvbmUoKS5hZGQoMSwgJ2RheScpO1xuICAgICAgICAgICAgZGF5cy5wdXNoKGN1cnJlbnREYXkpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciB2aWFibGVEYXlzID0gZGF5cy5maWx0ZXIoZnVuY3Rpb24gKGRheSkge1xuICAgICAgICAgICAgcmV0dXJuICFfdGhpczMuaXNCbG9ja2VkKGRheSk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBpZiAodmlhYmxlRGF5cy5sZW5ndGggPiAwKSBmb2N1c2VkRGF0ZSA9IHZpYWJsZURheXNbMF07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZm9jdXNlZERhdGU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBnZXRGaXJzdEZvY3VzYWJsZURheTtcbiAgICB9KClcbiAgfSwge1xuICAgIGtleTogJ2dldE1vZGlmaWVycycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIGdldE1vZGlmaWVycyh2aXNpYmxlRGF5cykge1xuICAgICAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgICAgICB2YXIgbW9kaWZpZXJzID0ge307XG4gICAgICAgIE9iamVjdC5rZXlzKHZpc2libGVEYXlzKS5mb3JFYWNoKGZ1bmN0aW9uIChtb250aCkge1xuICAgICAgICAgIG1vZGlmaWVyc1ttb250aF0gPSB7fTtcbiAgICAgICAgICB2aXNpYmxlRGF5c1ttb250aF0uZm9yRWFjaChmdW5jdGlvbiAoZGF5KSB7XG4gICAgICAgICAgICBtb2RpZmllcnNbbW9udGhdWygwLCBfdG9JU09EYXRlU3RyaW5nMlsnZGVmYXVsdCddKShkYXkpXSA9IF90aGlzNC5nZXRNb2RpZmllcnNGb3JEYXkoZGF5KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIG1vZGlmaWVycztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGdldE1vZGlmaWVycztcbiAgICB9KClcbiAgfSwge1xuICAgIGtleTogJ2dldE1vZGlmaWVyc0ZvckRheScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIGdldE1vZGlmaWVyc0ZvckRheShkYXkpIHtcbiAgICAgICAgdmFyIF90aGlzNSA9IHRoaXM7XG5cbiAgICAgICAgcmV0dXJuIG5ldyBTZXQoT2JqZWN0LmtleXModGhpcy5tb2RpZmllcnMpLmZpbHRlcihmdW5jdGlvbiAobW9kaWZpZXIpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXM1Lm1vZGlmaWVyc1ttb2RpZmllcl0oZGF5KTtcbiAgICAgICAgfSkpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZ2V0TW9kaWZpZXJzRm9yRGF5O1xuICAgIH0oKVxuICB9LCB7XG4gICAga2V5OiAnZ2V0U3RhdGVGb3JOZXdNb250aCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIGdldFN0YXRlRm9yTmV3TW9udGgobmV4dFByb3BzKSB7XG4gICAgICAgIHZhciBfdGhpczYgPSB0aGlzO1xuXG4gICAgICAgIHZhciBpbml0aWFsVmlzaWJsZU1vbnRoID0gbmV4dFByb3BzLmluaXRpYWxWaXNpYmxlTW9udGgsXG4gICAgICAgICAgICBudW1iZXJPZk1vbnRocyA9IG5leHRQcm9wcy5udW1iZXJPZk1vbnRocyxcbiAgICAgICAgICAgIGVuYWJsZU91dHNpZGVEYXlzID0gbmV4dFByb3BzLmVuYWJsZU91dHNpZGVEYXlzLFxuICAgICAgICAgICAgb3JpZW50YXRpb24gPSBuZXh0UHJvcHMub3JpZW50YXRpb24sXG4gICAgICAgICAgICBzdGFydERhdGUgPSBuZXh0UHJvcHMuc3RhcnREYXRlO1xuXG4gICAgICAgIHZhciBpbml0aWFsVmlzaWJsZU1vbnRoVGh1bmsgPSBpbml0aWFsVmlzaWJsZU1vbnRoIHx8IChzdGFydERhdGUgPyBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIHN0YXJ0RGF0ZTtcbiAgICAgICAgfSA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXM2LnRvZGF5O1xuICAgICAgICB9KTtcbiAgICAgICAgdmFyIGN1cnJlbnRNb250aCA9IGluaXRpYWxWaXNpYmxlTW9udGhUaHVuaygpO1xuICAgICAgICB2YXIgd2l0aG91dFRyYW5zaXRpb25Nb250aHMgPSBvcmllbnRhdGlvbiA9PT0gX2NvbnN0YW50cy5WRVJUSUNBTF9TQ1JPTExBQkxFO1xuICAgICAgICB2YXIgdmlzaWJsZURheXMgPSB0aGlzLmdldE1vZGlmaWVycygoMCwgX2dldFZpc2libGVEYXlzMlsnZGVmYXVsdCddKShjdXJyZW50TW9udGgsIG51bWJlck9mTW9udGhzLCBlbmFibGVPdXRzaWRlRGF5cywgd2l0aG91dFRyYW5zaXRpb25Nb250aHMpKTtcbiAgICAgICAgcmV0dXJuIHsgY3VycmVudE1vbnRoOiBjdXJyZW50TW9udGgsIHZpc2libGVEYXlzOiB2aXNpYmxlRGF5cyB9O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZ2V0U3RhdGVGb3JOZXdNb250aDtcbiAgICB9KClcbiAgfSwge1xuICAgIGtleTogJ2FkZE1vZGlmaWVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gYWRkTW9kaWZpZXIodXBkYXRlZERheXMsIGRheSwgbW9kaWZpZXIpIHtcbiAgICAgICAgdmFyIF9wcm9wczEwID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICAgIG51bWJlck9mVmlzaWJsZU1vbnRocyA9IF9wcm9wczEwLm51bWJlck9mTW9udGhzLFxuICAgICAgICAgICAgZW5hYmxlT3V0c2lkZURheXMgPSBfcHJvcHMxMC5lbmFibGVPdXRzaWRlRGF5cyxcbiAgICAgICAgICAgIG9yaWVudGF0aW9uID0gX3Byb3BzMTAub3JpZW50YXRpb247XG4gICAgICAgIHZhciBfc3RhdGU2ID0gdGhpcy5zdGF0ZSxcbiAgICAgICAgICAgIGZpcnN0VmlzaWJsZU1vbnRoID0gX3N0YXRlNi5jdXJyZW50TW9udGgsXG4gICAgICAgICAgICB2aXNpYmxlRGF5cyA9IF9zdGF0ZTYudmlzaWJsZURheXM7XG5cbiAgICAgICAgdmFyIGN1cnJlbnRNb250aCA9IGZpcnN0VmlzaWJsZU1vbnRoO1xuICAgICAgICB2YXIgbnVtYmVyT2ZNb250aHMgPSBudW1iZXJPZlZpc2libGVNb250aHM7XG4gICAgICAgIGlmIChvcmllbnRhdGlvbiAhPT0gX2NvbnN0YW50cy5WRVJUSUNBTF9TQ1JPTExBQkxFKSB7XG4gICAgICAgICAgY3VycmVudE1vbnRoID0gY3VycmVudE1vbnRoLmNsb25lKCkuc3VidHJhY3QoMSwgJ21vbnRoJyk7XG4gICAgICAgICAgbnVtYmVyT2ZNb250aHMgKz0gMjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWRheSB8fCAhKDAsIF9pc0RheVZpc2libGUyWydkZWZhdWx0J10pKGRheSwgY3VycmVudE1vbnRoLCBudW1iZXJPZk1vbnRocywgZW5hYmxlT3V0c2lkZURheXMpKSB7XG4gICAgICAgICAgcmV0dXJuIHVwZGF0ZWREYXlzO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGlzbyA9ICgwLCBfdG9JU09EYXRlU3RyaW5nMlsnZGVmYXVsdCddKShkYXkpO1xuXG4gICAgICAgIHZhciB1cGRhdGVkRGF5c0FmdGVyQWRkaXRpb24gPSAoMCwgX29iamVjdDRbJ2RlZmF1bHQnXSkoe30sIHVwZGF0ZWREYXlzKTtcbiAgICAgICAgaWYgKGVuYWJsZU91dHNpZGVEYXlzKSB7XG4gICAgICAgICAgdmFyIG1vbnRoc1RvVXBkYXRlID0gT2JqZWN0LmtleXModmlzaWJsZURheXMpLmZpbHRlcihmdW5jdGlvbiAobW9udGhLZXkpIHtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3Qua2V5cyh2aXNpYmxlRGF5c1ttb250aEtleV0pLmluZGV4T2YoaXNvKSA+IC0xO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgdXBkYXRlZERheXNBZnRlckFkZGl0aW9uID0gbW9udGhzVG9VcGRhdGUucmVkdWNlKGZ1bmN0aW9uIChkYXlzLCBtb250aElzbykge1xuICAgICAgICAgICAgdmFyIG1vbnRoID0gdXBkYXRlZERheXNbbW9udGhJc29dIHx8IHZpc2libGVEYXlzW21vbnRoSXNvXTtcbiAgICAgICAgICAgIHZhciBtb2RpZmllcnMgPSBuZXcgU2V0KG1vbnRoW2lzb10pO1xuICAgICAgICAgICAgbW9kaWZpZXJzLmFkZChtb2RpZmllcik7XG4gICAgICAgICAgICByZXR1cm4gKDAsIF9vYmplY3Q0WydkZWZhdWx0J10pKHt9LCBkYXlzLCBfZGVmaW5lUHJvcGVydHkoe30sIG1vbnRoSXNvLCAoMCwgX29iamVjdDRbJ2RlZmF1bHQnXSkoe30sIG1vbnRoLCBfZGVmaW5lUHJvcGVydHkoe30sIGlzbywgbW9kaWZpZXJzKSkpKTtcbiAgICAgICAgICB9LCB1cGRhdGVkRGF5c0FmdGVyQWRkaXRpb24pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBtb250aElzbyA9ICgwLCBfdG9JU09Nb250aFN0cmluZzJbJ2RlZmF1bHQnXSkoZGF5KTtcbiAgICAgICAgICB2YXIgbW9udGggPSB1cGRhdGVkRGF5c1ttb250aElzb10gfHwgdmlzaWJsZURheXNbbW9udGhJc29dO1xuXG4gICAgICAgICAgdmFyIG1vZGlmaWVycyA9IG5ldyBTZXQobW9udGhbaXNvXSk7XG4gICAgICAgICAgbW9kaWZpZXJzLmFkZChtb2RpZmllcik7XG4gICAgICAgICAgdXBkYXRlZERheXNBZnRlckFkZGl0aW9uID0gKDAsIF9vYmplY3Q0WydkZWZhdWx0J10pKHt9LCB1cGRhdGVkRGF5c0FmdGVyQWRkaXRpb24sIF9kZWZpbmVQcm9wZXJ0eSh7fSwgbW9udGhJc28sICgwLCBfb2JqZWN0NFsnZGVmYXVsdCddKSh7fSwgbW9udGgsIF9kZWZpbmVQcm9wZXJ0eSh7fSwgaXNvLCBtb2RpZmllcnMpKSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHVwZGF0ZWREYXlzQWZ0ZXJBZGRpdGlvbjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGFkZE1vZGlmaWVyO1xuICAgIH0oKVxuICB9LCB7XG4gICAga2V5OiAnYWRkTW9kaWZpZXJUb1JhbmdlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gYWRkTW9kaWZpZXJUb1JhbmdlKHVwZGF0ZWREYXlzLCBzdGFydCwgZW5kLCBtb2RpZmllcikge1xuICAgICAgICB2YXIgZGF5cyA9IHVwZGF0ZWREYXlzO1xuXG4gICAgICAgIHZhciBzcGFuU3RhcnQgPSBzdGFydC5jbG9uZSgpO1xuICAgICAgICB3aGlsZSAoKDAsIF9pc0JlZm9yZURheTJbJ2RlZmF1bHQnXSkoc3BhblN0YXJ0LCBlbmQpKSB7XG4gICAgICAgICAgZGF5cyA9IHRoaXMuYWRkTW9kaWZpZXIoZGF5cywgc3BhblN0YXJ0LCBtb2RpZmllcik7XG4gICAgICAgICAgc3BhblN0YXJ0ID0gc3BhblN0YXJ0LmNsb25lKCkuYWRkKDEsICdkYXknKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBkYXlzO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gYWRkTW9kaWZpZXJUb1JhbmdlO1xuICAgIH0oKVxuICB9LCB7XG4gICAga2V5OiAnZGVsZXRlTW9kaWZpZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBkZWxldGVNb2RpZmllcih1cGRhdGVkRGF5cywgZGF5LCBtb2RpZmllcikge1xuICAgICAgICB2YXIgX3Byb3BzMTEgPSB0aGlzLnByb3BzLFxuICAgICAgICAgICAgbnVtYmVyT2ZWaXNpYmxlTW9udGhzID0gX3Byb3BzMTEubnVtYmVyT2ZNb250aHMsXG4gICAgICAgICAgICBlbmFibGVPdXRzaWRlRGF5cyA9IF9wcm9wczExLmVuYWJsZU91dHNpZGVEYXlzLFxuICAgICAgICAgICAgb3JpZW50YXRpb24gPSBfcHJvcHMxMS5vcmllbnRhdGlvbjtcbiAgICAgICAgdmFyIF9zdGF0ZTcgPSB0aGlzLnN0YXRlLFxuICAgICAgICAgICAgZmlyc3RWaXNpYmxlTW9udGggPSBfc3RhdGU3LmN1cnJlbnRNb250aCxcbiAgICAgICAgICAgIHZpc2libGVEYXlzID0gX3N0YXRlNy52aXNpYmxlRGF5cztcblxuICAgICAgICB2YXIgY3VycmVudE1vbnRoID0gZmlyc3RWaXNpYmxlTW9udGg7XG4gICAgICAgIHZhciBudW1iZXJPZk1vbnRocyA9IG51bWJlck9mVmlzaWJsZU1vbnRocztcbiAgICAgICAgaWYgKG9yaWVudGF0aW9uICE9PSBfY29uc3RhbnRzLlZFUlRJQ0FMX1NDUk9MTEFCTEUpIHtcbiAgICAgICAgICBjdXJyZW50TW9udGggPSBjdXJyZW50TW9udGguY2xvbmUoKS5zdWJ0cmFjdCgxLCAnbW9udGgnKTtcbiAgICAgICAgICBudW1iZXJPZk1vbnRocyArPSAyO1xuICAgICAgICB9XG4gICAgICAgIGlmICghZGF5IHx8ICEoMCwgX2lzRGF5VmlzaWJsZTJbJ2RlZmF1bHQnXSkoZGF5LCBjdXJyZW50TW9udGgsIG51bWJlck9mTW9udGhzLCBlbmFibGVPdXRzaWRlRGF5cykpIHtcbiAgICAgICAgICByZXR1cm4gdXBkYXRlZERheXM7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaXNvID0gKDAsIF90b0lTT0RhdGVTdHJpbmcyWydkZWZhdWx0J10pKGRheSk7XG5cbiAgICAgICAgdmFyIHVwZGF0ZWREYXlzQWZ0ZXJEZWxldGlvbiA9ICgwLCBfb2JqZWN0NFsnZGVmYXVsdCddKSh7fSwgdXBkYXRlZERheXMpO1xuICAgICAgICBpZiAoZW5hYmxlT3V0c2lkZURheXMpIHtcbiAgICAgICAgICB2YXIgbW9udGhzVG9VcGRhdGUgPSBPYmplY3Qua2V5cyh2aXNpYmxlRGF5cykuZmlsdGVyKGZ1bmN0aW9uIChtb250aEtleSkge1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHZpc2libGVEYXlzW21vbnRoS2V5XSkuaW5kZXhPZihpc28pID4gLTE7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICB1cGRhdGVkRGF5c0FmdGVyRGVsZXRpb24gPSBtb250aHNUb1VwZGF0ZS5yZWR1Y2UoZnVuY3Rpb24gKGRheXMsIG1vbnRoSXNvKSB7XG4gICAgICAgICAgICB2YXIgbW9udGggPSB1cGRhdGVkRGF5c1ttb250aElzb10gfHwgdmlzaWJsZURheXNbbW9udGhJc29dO1xuICAgICAgICAgICAgdmFyIG1vZGlmaWVycyA9IG5ldyBTZXQobW9udGhbaXNvXSk7XG4gICAgICAgICAgICBtb2RpZmllcnNbJ2RlbGV0ZSddKG1vZGlmaWVyKTtcbiAgICAgICAgICAgIHJldHVybiAoMCwgX29iamVjdDRbJ2RlZmF1bHQnXSkoe30sIGRheXMsIF9kZWZpbmVQcm9wZXJ0eSh7fSwgbW9udGhJc28sICgwLCBfb2JqZWN0NFsnZGVmYXVsdCddKSh7fSwgbW9udGgsIF9kZWZpbmVQcm9wZXJ0eSh7fSwgaXNvLCBtb2RpZmllcnMpKSkpO1xuICAgICAgICAgIH0sIHVwZGF0ZWREYXlzQWZ0ZXJEZWxldGlvbik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIG1vbnRoSXNvID0gKDAsIF90b0lTT01vbnRoU3RyaW5nMlsnZGVmYXVsdCddKShkYXkpO1xuICAgICAgICAgIHZhciBtb250aCA9IHVwZGF0ZWREYXlzW21vbnRoSXNvXSB8fCB2aXNpYmxlRGF5c1ttb250aElzb107XG5cbiAgICAgICAgICB2YXIgbW9kaWZpZXJzID0gbmV3IFNldChtb250aFtpc29dKTtcbiAgICAgICAgICBtb2RpZmllcnNbJ2RlbGV0ZSddKG1vZGlmaWVyKTtcbiAgICAgICAgICB1cGRhdGVkRGF5c0FmdGVyRGVsZXRpb24gPSAoMCwgX29iamVjdDRbJ2RlZmF1bHQnXSkoe30sIHVwZGF0ZWREYXlzQWZ0ZXJEZWxldGlvbiwgX2RlZmluZVByb3BlcnR5KHt9LCBtb250aElzbywgKDAsIF9vYmplY3Q0WydkZWZhdWx0J10pKHt9LCBtb250aCwgX2RlZmluZVByb3BlcnR5KHt9LCBpc28sIG1vZGlmaWVycykpKSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdXBkYXRlZERheXNBZnRlckRlbGV0aW9uO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZGVsZXRlTW9kaWZpZXI7XG4gICAgfSgpXG4gIH0sIHtcbiAgICBrZXk6ICdkZWxldGVNb2RpZmllckZyb21SYW5nZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIGRlbGV0ZU1vZGlmaWVyRnJvbVJhbmdlKHVwZGF0ZWREYXlzLCBzdGFydCwgZW5kLCBtb2RpZmllcikge1xuICAgICAgICB2YXIgZGF5cyA9IHVwZGF0ZWREYXlzO1xuXG4gICAgICAgIHZhciBzcGFuU3RhcnQgPSBzdGFydC5jbG9uZSgpO1xuICAgICAgICB3aGlsZSAoKDAsIF9pc0JlZm9yZURheTJbJ2RlZmF1bHQnXSkoc3BhblN0YXJ0LCBlbmQpKSB7XG4gICAgICAgICAgZGF5cyA9IHRoaXMuZGVsZXRlTW9kaWZpZXIoZGF5cywgc3BhblN0YXJ0LCBtb2RpZmllcik7XG4gICAgICAgICAgc3BhblN0YXJ0ID0gc3BhblN0YXJ0LmNsb25lKCkuYWRkKDEsICdkYXknKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBkYXlzO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZGVsZXRlTW9kaWZpZXJGcm9tUmFuZ2U7XG4gICAgfSgpXG4gIH0sIHtcbiAgICBrZXk6ICdkb2VzTm90TWVldE1pbmltdW1OaWdodHMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBkb2VzTm90TWVldE1pbmltdW1OaWdodHMoZGF5KSB7XG4gICAgICAgIHZhciBfcHJvcHMxMiA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgICBzdGFydERhdGUgPSBfcHJvcHMxMi5zdGFydERhdGUsXG4gICAgICAgICAgICBpc091dHNpZGVSYW5nZSA9IF9wcm9wczEyLmlzT3V0c2lkZVJhbmdlLFxuICAgICAgICAgICAgZm9jdXNlZElucHV0ID0gX3Byb3BzMTIuZm9jdXNlZElucHV0LFxuICAgICAgICAgICAgbWluaW11bU5pZ2h0cyA9IF9wcm9wczEyLm1pbmltdW1OaWdodHM7XG5cbiAgICAgICAgaWYgKGZvY3VzZWRJbnB1dCAhPT0gX2NvbnN0YW50cy5FTkRfREFURSkgcmV0dXJuIGZhbHNlO1xuXG4gICAgICAgIGlmIChzdGFydERhdGUpIHtcbiAgICAgICAgICB2YXIgZGF5RGlmZiA9IGRheS5kaWZmKHN0YXJ0RGF0ZS5jbG9uZSgpLnN0YXJ0T2YoJ2RheScpLmhvdXIoMTIpLCAnZGF5cycpO1xuICAgICAgICAgIHJldHVybiBkYXlEaWZmIDwgbWluaW11bU5pZ2h0cyAmJiBkYXlEaWZmID49IDA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGlzT3V0c2lkZVJhbmdlKCgwLCBfbW9tZW50MlsnZGVmYXVsdCddKShkYXkpLnN1YnRyYWN0KG1pbmltdW1OaWdodHMsICdkYXlzJykpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZG9lc05vdE1lZXRNaW5pbXVtTmlnaHRzO1xuICAgIH0oKVxuICB9LCB7XG4gICAga2V5OiAnaXNEYXlBZnRlckhvdmVyZWRTdGFydERhdGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBpc0RheUFmdGVySG92ZXJlZFN0YXJ0RGF0ZShkYXkpIHtcbiAgICAgICAgdmFyIF9wcm9wczEzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICAgIHN0YXJ0RGF0ZSA9IF9wcm9wczEzLnN0YXJ0RGF0ZSxcbiAgICAgICAgICAgIGVuZERhdGUgPSBfcHJvcHMxMy5lbmREYXRlLFxuICAgICAgICAgICAgbWluaW11bU5pZ2h0cyA9IF9wcm9wczEzLm1pbmltdW1OaWdodHM7XG5cbiAgICAgICAgdmFyIF9yZWYgPSB0aGlzLnN0YXRlIHx8IHt9LFxuICAgICAgICAgICAgaG92ZXJEYXRlID0gX3JlZi5ob3ZlckRhdGU7XG5cbiAgICAgICAgcmV0dXJuICEhc3RhcnREYXRlICYmICFlbmREYXRlICYmICF0aGlzLmlzQmxvY2tlZChkYXkpICYmICgwLCBfaXNOZXh0RGF5MlsnZGVmYXVsdCddKShob3ZlckRhdGUsIGRheSkgJiYgbWluaW11bU5pZ2h0cyA+IDAgJiYgKDAsIF9pc1NhbWVEYXkyWydkZWZhdWx0J10pKGhvdmVyRGF0ZSwgc3RhcnREYXRlKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGlzRGF5QWZ0ZXJIb3ZlcmVkU3RhcnREYXRlO1xuICAgIH0oKVxuICB9LCB7XG4gICAga2V5OiAnaXNFbmREYXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gaXNFbmREYXRlKGRheSkge1xuICAgICAgICByZXR1cm4gKDAsIF9pc1NhbWVEYXkyWydkZWZhdWx0J10pKGRheSwgdGhpcy5wcm9wcy5lbmREYXRlKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGlzRW5kRGF0ZTtcbiAgICB9KClcbiAgfSwge1xuICAgIGtleTogJ2lzSG92ZXJlZCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIGlzSG92ZXJlZChkYXkpIHtcbiAgICAgICAgdmFyIF9yZWYyID0gdGhpcy5zdGF0ZSB8fCB7fSxcbiAgICAgICAgICAgIGhvdmVyRGF0ZSA9IF9yZWYyLmhvdmVyRGF0ZTtcblxuICAgICAgICB2YXIgZm9jdXNlZElucHV0ID0gdGhpcy5wcm9wcy5mb2N1c2VkSW5wdXQ7XG5cbiAgICAgICAgcmV0dXJuICEhZm9jdXNlZElucHV0ICYmICgwLCBfaXNTYW1lRGF5MlsnZGVmYXVsdCddKShkYXksIGhvdmVyRGF0ZSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBpc0hvdmVyZWQ7XG4gICAgfSgpXG4gIH0sIHtcbiAgICBrZXk6ICdpc0luSG92ZXJlZFNwYW4nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBpc0luSG92ZXJlZFNwYW4oZGF5KSB7XG4gICAgICAgIHZhciBfcHJvcHMxNCA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgICBzdGFydERhdGUgPSBfcHJvcHMxNC5zdGFydERhdGUsXG4gICAgICAgICAgICBlbmREYXRlID0gX3Byb3BzMTQuZW5kRGF0ZTtcblxuICAgICAgICB2YXIgX3JlZjMgPSB0aGlzLnN0YXRlIHx8IHt9LFxuICAgICAgICAgICAgaG92ZXJEYXRlID0gX3JlZjMuaG92ZXJEYXRlO1xuXG4gICAgICAgIHZhciBpc0ZvcndhcmRSYW5nZSA9ICEhc3RhcnREYXRlICYmICFlbmREYXRlICYmIChkYXkuaXNCZXR3ZWVuKHN0YXJ0RGF0ZSwgaG92ZXJEYXRlKSB8fCAoMCwgX2lzU2FtZURheTJbJ2RlZmF1bHQnXSkoaG92ZXJEYXRlLCBkYXkpKTtcbiAgICAgICAgdmFyIGlzQmFja3dhcmRSYW5nZSA9ICEhZW5kRGF0ZSAmJiAhc3RhcnREYXRlICYmIChkYXkuaXNCZXR3ZWVuKGhvdmVyRGF0ZSwgZW5kRGF0ZSkgfHwgKDAsIF9pc1NhbWVEYXkyWydkZWZhdWx0J10pKGhvdmVyRGF0ZSwgZGF5KSk7XG5cbiAgICAgICAgdmFyIGlzVmFsaWREYXlIb3ZlcmVkID0gaG92ZXJEYXRlICYmICF0aGlzLmlzQmxvY2tlZChob3ZlckRhdGUpO1xuXG4gICAgICAgIHJldHVybiAoaXNGb3J3YXJkUmFuZ2UgfHwgaXNCYWNrd2FyZFJhbmdlKSAmJiBpc1ZhbGlkRGF5SG92ZXJlZDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGlzSW5Ib3ZlcmVkU3BhbjtcbiAgICB9KClcbiAgfSwge1xuICAgIGtleTogJ2lzSW5TZWxlY3RlZFNwYW4nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBpc0luU2VsZWN0ZWRTcGFuKGRheSkge1xuICAgICAgICB2YXIgX3Byb3BzMTUgPSB0aGlzLnByb3BzLFxuICAgICAgICAgICAgc3RhcnREYXRlID0gX3Byb3BzMTUuc3RhcnREYXRlLFxuICAgICAgICAgICAgZW5kRGF0ZSA9IF9wcm9wczE1LmVuZERhdGU7XG5cbiAgICAgICAgcmV0dXJuIGRheS5pc0JldHdlZW4oc3RhcnREYXRlLCBlbmREYXRlKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGlzSW5TZWxlY3RlZFNwYW47XG4gICAgfSgpXG4gIH0sIHtcbiAgICBrZXk6ICdpc0xhc3RJblJhbmdlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gaXNMYXN0SW5SYW5nZShkYXkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNJblNlbGVjdGVkU3BhbihkYXkpICYmICgwLCBfaXNOZXh0RGF5MlsnZGVmYXVsdCddKShkYXksIHRoaXMucHJvcHMuZW5kRGF0ZSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBpc0xhc3RJblJhbmdlO1xuICAgIH0oKVxuICB9LCB7XG4gICAga2V5OiAnaXNTdGFydERhdGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBpc1N0YXJ0RGF0ZShkYXkpIHtcbiAgICAgICAgcmV0dXJuICgwLCBfaXNTYW1lRGF5MlsnZGVmYXVsdCddKShkYXksIHRoaXMucHJvcHMuc3RhcnREYXRlKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGlzU3RhcnREYXRlO1xuICAgIH0oKVxuICB9LCB7XG4gICAga2V5OiAnaXNCbG9ja2VkJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gaXNCbG9ja2VkKGRheSkge1xuICAgICAgICB2YXIgX3Byb3BzMTYgPSB0aGlzLnByb3BzLFxuICAgICAgICAgICAgaXNEYXlCbG9ja2VkID0gX3Byb3BzMTYuaXNEYXlCbG9ja2VkLFxuICAgICAgICAgICAgaXNPdXRzaWRlUmFuZ2UgPSBfcHJvcHMxNi5pc091dHNpZGVSYW5nZTtcblxuICAgICAgICByZXR1cm4gaXNEYXlCbG9ja2VkKGRheSkgfHwgaXNPdXRzaWRlUmFuZ2UoZGF5KSB8fCB0aGlzLmRvZXNOb3RNZWV0TWluaW11bU5pZ2h0cyhkYXkpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gaXNCbG9ja2VkO1xuICAgIH0oKVxuICB9LCB7XG4gICAga2V5OiAnaXNUb2RheScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIGlzVG9kYXkoZGF5KSB7XG4gICAgICAgIHJldHVybiAoMCwgX2lzU2FtZURheTJbJ2RlZmF1bHQnXSkoZGF5LCB0aGlzLnRvZGF5KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGlzVG9kYXk7XG4gICAgfSgpXG4gIH0sIHtcbiAgICBrZXk6ICdyZW5kZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgIHZhciBfdGhpczcgPSB0aGlzO1xuXG4gICAgICAgIHZhciBfcHJvcHMxNyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgICBudW1iZXJPZk1vbnRocyA9IF9wcm9wczE3Lm51bWJlck9mTW9udGhzLFxuICAgICAgICAgICAgb3JpZW50YXRpb24gPSBfcHJvcHMxNy5vcmllbnRhdGlvbixcbiAgICAgICAgICAgIG1vbnRoRm9ybWF0ID0gX3Byb3BzMTcubW9udGhGb3JtYXQsXG4gICAgICAgICAgICByZW5kZXJNb250aCA9IF9wcm9wczE3LnJlbmRlck1vbnRoLFxuICAgICAgICAgICAgbmF2UHJldiA9IF9wcm9wczE3Lm5hdlByZXYsXG4gICAgICAgICAgICBuYXZOZXh0ID0gX3Byb3BzMTcubmF2TmV4dCxcbiAgICAgICAgICAgIG9uT3V0c2lkZUNsaWNrID0gX3Byb3BzMTcub25PdXRzaWRlQ2xpY2ssXG4gICAgICAgICAgICB3aXRoUG9ydGFsID0gX3Byb3BzMTcud2l0aFBvcnRhbCxcbiAgICAgICAgICAgIGVuYWJsZU91dHNpZGVEYXlzID0gX3Byb3BzMTcuZW5hYmxlT3V0c2lkZURheXMsXG4gICAgICAgICAgICBmaXJzdERheU9mV2VlayA9IF9wcm9wczE3LmZpcnN0RGF5T2ZXZWVrLFxuICAgICAgICAgICAgaGlkZUtleWJvYXJkU2hvcnRjdXRzUGFuZWwgPSBfcHJvcHMxNy5oaWRlS2V5Ym9hcmRTaG9ydGN1dHNQYW5lbCxcbiAgICAgICAgICAgIGRheVNpemUgPSBfcHJvcHMxNy5kYXlTaXplLFxuICAgICAgICAgICAgZm9jdXNlZElucHV0ID0gX3Byb3BzMTcuZm9jdXNlZElucHV0LFxuICAgICAgICAgICAgcmVuZGVyRGF5ID0gX3Byb3BzMTcucmVuZGVyRGF5LFxuICAgICAgICAgICAgcmVuZGVyQ2FsZW5kYXJJbmZvID0gX3Byb3BzMTcucmVuZGVyQ2FsZW5kYXJJbmZvLFxuICAgICAgICAgICAgb25CbHVyID0gX3Byb3BzMTcub25CbHVyLFxuICAgICAgICAgICAgaXNGb2N1c2VkID0gX3Byb3BzMTcuaXNGb2N1c2VkLFxuICAgICAgICAgICAgc2hvd0tleWJvYXJkU2hvcnRjdXRzID0gX3Byb3BzMTcuc2hvd0tleWJvYXJkU2hvcnRjdXRzLFxuICAgICAgICAgICAgaXNSVEwgPSBfcHJvcHMxNy5pc1JUTDtcbiAgICAgICAgdmFyIF9zdGF0ZTggPSB0aGlzLnN0YXRlLFxuICAgICAgICAgICAgY3VycmVudE1vbnRoID0gX3N0YXRlOC5jdXJyZW50TW9udGgsXG4gICAgICAgICAgICBwaHJhc2VzID0gX3N0YXRlOC5waHJhc2VzLFxuICAgICAgICAgICAgdmlzaWJsZURheXMgPSBfc3RhdGU4LnZpc2libGVEYXlzO1xuXG4gICAgICAgIHJldHVybiBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChfRGF5UGlja2VyMlsnZGVmYXVsdCddLCB7XG4gICAgICAgICAgcmVmOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBmdW5jdGlvbiByZWYoX3JlZjQpIHtcbiAgICAgICAgICAgICAgX3RoaXM3LmRheVBpY2tlciA9IF9yZWY0O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gcmVmO1xuICAgICAgICAgIH0oKSxcbiAgICAgICAgICBvcmllbnRhdGlvbjogb3JpZW50YXRpb24sXG4gICAgICAgICAgZW5hYmxlT3V0c2lkZURheXM6IGVuYWJsZU91dHNpZGVEYXlzLFxuICAgICAgICAgIG1vZGlmaWVyczogdmlzaWJsZURheXMsXG4gICAgICAgICAgbnVtYmVyT2ZNb250aHM6IG51bWJlck9mTW9udGhzLFxuICAgICAgICAgIG9uRGF5Q2xpY2s6IHRoaXMub25EYXlDbGljayxcbiAgICAgICAgICBvbkRheU1vdXNlRW50ZXI6IHRoaXMub25EYXlNb3VzZUVudGVyLFxuICAgICAgICAgIG9uRGF5TW91c2VMZWF2ZTogdGhpcy5vbkRheU1vdXNlTGVhdmUsXG4gICAgICAgICAgb25QcmV2TW9udGhDbGljazogdGhpcy5vblByZXZNb250aENsaWNrLFxuICAgICAgICAgIG9uTmV4dE1vbnRoQ2xpY2s6IHRoaXMub25OZXh0TW9udGhDbGljayxcbiAgICAgICAgICBvbk11bHRpcGx5U2Nyb2xsYWJsZU1vbnRoczogdGhpcy5vbk11bHRpcGx5U2Nyb2xsYWJsZU1vbnRocyxcbiAgICAgICAgICBtb250aEZvcm1hdDogbW9udGhGb3JtYXQsXG4gICAgICAgICAgcmVuZGVyTW9udGg6IHJlbmRlck1vbnRoLFxuICAgICAgICAgIHdpdGhQb3J0YWw6IHdpdGhQb3J0YWwsXG4gICAgICAgICAgaGlkZGVuOiAhZm9jdXNlZElucHV0LFxuICAgICAgICAgIGluaXRpYWxWaXNpYmxlTW9udGg6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGZ1bmN0aW9uIGluaXRpYWxWaXNpYmxlTW9udGgoKSB7XG4gICAgICAgICAgICAgIHJldHVybiBjdXJyZW50TW9udGg7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBpbml0aWFsVmlzaWJsZU1vbnRoO1xuICAgICAgICAgIH0oKSxcbiAgICAgICAgICBkYXlTaXplOiBkYXlTaXplLFxuICAgICAgICAgIG9uT3V0c2lkZUNsaWNrOiBvbk91dHNpZGVDbGljayxcbiAgICAgICAgICBuYXZQcmV2OiBuYXZQcmV2LFxuICAgICAgICAgIG5hdk5leHQ6IG5hdk5leHQsXG4gICAgICAgICAgcmVuZGVyRGF5OiByZW5kZXJEYXksXG4gICAgICAgICAgcmVuZGVyQ2FsZW5kYXJJbmZvOiByZW5kZXJDYWxlbmRhckluZm8sXG4gICAgICAgICAgZmlyc3REYXlPZldlZWs6IGZpcnN0RGF5T2ZXZWVrLFxuICAgICAgICAgIGhpZGVLZXlib2FyZFNob3J0Y3V0c1BhbmVsOiBoaWRlS2V5Ym9hcmRTaG9ydGN1dHNQYW5lbCxcbiAgICAgICAgICBpc0ZvY3VzZWQ6IGlzRm9jdXNlZCxcbiAgICAgICAgICBnZXRGaXJzdEZvY3VzYWJsZURheTogdGhpcy5nZXRGaXJzdEZvY3VzYWJsZURheSxcbiAgICAgICAgICBvbkJsdXI6IG9uQmx1cixcbiAgICAgICAgICBzaG93S2V5Ym9hcmRTaG9ydGN1dHM6IHNob3dLZXlib2FyZFNob3J0Y3V0cyxcbiAgICAgICAgICBwaHJhc2VzOiBwaHJhc2VzLFxuICAgICAgICAgIGlzUlRMOiBpc1JUTFxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlbmRlcjtcbiAgICB9KClcbiAgfV0pO1xuXG4gIHJldHVybiBEYXlQaWNrZXJSYW5nZUNvbnRyb2xsZXI7XG59KF9yZWFjdDJbJ2RlZmF1bHQnXS5Db21wb25lbnQpO1xuXG5leHBvcnRzWydkZWZhdWx0J10gPSBEYXlQaWNrZXJSYW5nZUNvbnRyb2xsZXI7XG5cbkRheVBpY2tlclJhbmdlQ29udHJvbGxlci5wcm9wVHlwZXMgPSBwcm9wVHlwZXM7XG5EYXlQaWNrZXJSYW5nZUNvbnRyb2xsZXIuZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuXG4vKioqLyB9KVxuLyoqKioqKi8gXSk7IiwiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IGdldFZpc2libGVEYXlzO1xuXG52YXIgX21vbWVudCA9IHJlcXVpcmUoJ21vbWVudCcpO1xuXG52YXIgX21vbWVudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9tb21lbnQpO1xuXG52YXIgX3RvSVNPTW9udGhTdHJpbmcgPSByZXF1aXJlKCcuL3RvSVNPTW9udGhTdHJpbmcnKTtcblxudmFyIF90b0lTT01vbnRoU3RyaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3RvSVNPTW9udGhTdHJpbmcpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIGdldFZpc2libGVEYXlzKG1vbnRoLCBudW1iZXJPZk1vbnRocywgZW5hYmxlT3V0c2lkZURheXMsIHdpdGhvdXRUcmFuc2l0aW9uTW9udGhzKSB7XG4gIGlmICghX21vbWVudDJbJ2RlZmF1bHQnXS5pc01vbWVudChtb250aCkpIHJldHVybiB7fTtcblxuICB2YXIgdmlzaWJsZURheXNCeU1vbnRoID0ge307XG4gIHZhciBjdXJyZW50TW9udGggPSB3aXRob3V0VHJhbnNpdGlvbk1vbnRocyA/IG1vbnRoLmNsb25lKCkgOiBtb250aC5jbG9uZSgpLnN1YnRyYWN0KDEsICdtb250aCcpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8ICh3aXRob3V0VHJhbnNpdGlvbk1vbnRocyA/IG51bWJlck9mTW9udGhzIDogbnVtYmVyT2ZNb250aHMgKyAyKTsgaSArPSAxKSB7XG4gICAgdmFyIHZpc2libGVEYXlzID0gW107XG5cbiAgICAvLyBzZXQgdXRjIG9mZnNldCB0byBnZXQgY29ycmVjdCBkYXRlcyBpbiBmdXR1cmUgKHdoZW4gdGltZXpvbmUgY2hhbmdlcylcbiAgICB2YXIgYmFzZURhdGUgPSBjdXJyZW50TW9udGguY2xvbmUoKTtcbiAgICB2YXIgZmlyc3RPZk1vbnRoID0gYmFzZURhdGUuY2xvbmUoKS5zdGFydE9mKCdtb250aCcpLmhvdXIoMTIpO1xuICAgIHZhciBsYXN0T2ZNb250aCA9IGJhc2VEYXRlLmNsb25lKCkuZW5kT2YoJ21vbnRoJykuaG91cigxMik7XG5cbiAgICB2YXIgY3VycmVudERheSA9IGZpcnN0T2ZNb250aC5jbG9uZSgpO1xuXG4gICAgLy8gZGF5cyBiZWxvbmdpbmcgdG8gdGhlIHByZXZpb3VzIG1vbnRoXG4gICAgaWYgKGVuYWJsZU91dHNpZGVEYXlzKSB7XG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGN1cnJlbnREYXkud2Vla2RheSgpOyBqICs9IDEpIHtcbiAgICAgICAgdmFyIHByZXZEYXkgPSBjdXJyZW50RGF5LmNsb25lKCkuc3VidHJhY3QoaiArIDEsICdkYXknKTtcbiAgICAgICAgdmlzaWJsZURheXMudW5zaGlmdChwcmV2RGF5KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB3aGlsZSAoY3VycmVudERheSA8IGxhc3RPZk1vbnRoKSB7XG4gICAgICB2aXNpYmxlRGF5cy5wdXNoKGN1cnJlbnREYXkuY2xvbmUoKSk7XG4gICAgICBjdXJyZW50RGF5LmFkZCgxLCAnZGF5Jyk7XG4gICAgfVxuXG4gICAgaWYgKGVuYWJsZU91dHNpZGVEYXlzKSB7XG4gICAgICAvLyB3ZWVrZGF5KCkgcmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGRheSBvZiB0aGUgd2VlayBhY2NvcmRpbmcgdG8gdGhlIGxvY2FsZVxuICAgICAgLy8gdGhpcyBtZWFucyBpZiB0aGUgd2VlayBzdGFydHMgb24gTW9uZGF5LCB3ZWVrZGF5KCkgd2lsbCByZXR1cm4gMCBmb3IgYSBNb25kYXkgZGF0ZSwgbm90IDFcbiAgICAgIGlmIChjdXJyZW50RGF5LndlZWtkYXkoKSAhPT0gMCkge1xuICAgICAgICAvLyBkYXlzIGJlbG9uZ2luZyB0byB0aGUgbmV4dCBtb250aFxuICAgICAgICBmb3IgKHZhciBrID0gY3VycmVudERheS53ZWVrZGF5KCksIGNvdW50ID0gMDsgayA8IDc7IGsgKz0gMSwgY291bnQgKz0gMSkge1xuICAgICAgICAgIHZhciBuZXh0RGF5ID0gY3VycmVudERheS5jbG9uZSgpLmFkZChjb3VudCwgJ2RheScpO1xuICAgICAgICAgIHZpc2libGVEYXlzLnB1c2gobmV4dERheSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB2aXNpYmxlRGF5c0J5TW9udGhbKDAsIF90b0lTT01vbnRoU3RyaW5nMlsnZGVmYXVsdCddKShjdXJyZW50TW9udGgpXSA9IHZpc2libGVEYXlzO1xuICAgIGN1cnJlbnRNb250aCA9IGN1cnJlbnRNb250aC5jbG9uZSgpLmFkZCgxLCAnbW9udGgnKTtcbiAgfVxuXG4gIHJldHVybiB2aXNpYmxlRGF5c0J5TW9udGg7XG59IiwiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gZ2V0Q2FsZW5kYXJNb250aFdpZHRoO1xudmFyIENBTEVOREFSX01PTlRIX1BBRERJTkcgPSA5O1xuXG5mdW5jdGlvbiBnZXRDYWxlbmRhck1vbnRoV2lkdGgoZGF5U2l6ZSkge1xuICByZXR1cm4gNyAqIChkYXlTaXplICsgMSkgKyAyICogKENBTEVOREFSX01PTlRIX1BBRERJTkcgKyAxKTtcbn0iLCJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBnZXRUcmFuc2Zvcm1TdHlsZXM7XG5mdW5jdGlvbiBnZXRUcmFuc2Zvcm1TdHlsZXModHJhbnNmb3JtVmFsdWUpIHtcbiAgcmV0dXJuIHtcbiAgICB0cmFuc2Zvcm06IHRyYW5zZm9ybVZhbHVlLFxuICAgIG1zVHJhbnNmb3JtOiB0cmFuc2Zvcm1WYWx1ZSxcbiAgICBNb3pUcmFuc2Zvcm06IHRyYW5zZm9ybVZhbHVlLFxuICAgIFdlYmtpdFRyYW5zZm9ybTogdHJhbnNmb3JtVmFsdWVcbiAgfTtcbn0iLCJtb2R1bGUuZXhwb3J0cyA9XG4vKioqKioqLyAoZnVuY3Rpb24obW9kdWxlcykgeyAvLyB3ZWJwYWNrQm9vdHN0cmFwXG4vKioqKioqLyBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4vKioqKioqLyBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4vKioqKioqLyBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbi8qKioqKiovIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuLyoqKioqKi8gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbi8qKioqKiovIFx0XHRcdGk6IG1vZHVsZUlkLFxuLyoqKioqKi8gXHRcdFx0bDogZmFsc2UsXG4vKioqKioqLyBcdFx0XHRleHBvcnRzOiB7fVxuLyoqKioqKi8gXHRcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuLyoqKioqKi8gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4vKioqKioqLyBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuLyoqKioqKi8gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbi8qKioqKiovIFx0fVxuLyoqKioqKi9cbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gaWRlbnRpdHkgZnVuY3Rpb24gZm9yIGNhbGxpbmcgaGFybW9ueSBpbXBvcnRzIHdpdGggdGhlIGNvcnJlY3QgY29udGV4dFxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmkgPSBmdW5jdGlvbih2YWx1ZSkgeyByZXR1cm4gdmFsdWU7IH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4vKioqKioqLyBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuLyoqKioqKi8gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHtcbi8qKioqKiovIFx0XHRcdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcbi8qKioqKiovIFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcbi8qKioqKiovIFx0XHRcdFx0Z2V0OiBnZXR0ZXJcbi8qKioqKiovIFx0XHRcdH0pO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuLyoqKioqKi8gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuLyoqKioqKi8gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbi8qKioqKiovIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4vKioqKioqLyBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuLyoqKioqKi8gXHRcdHJldHVybiBnZXR0ZXI7XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLyoqKioqKi8gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSA2MSk7XG4vKioqKioqLyB9KVxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovIChbXG4vKiAwICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInJlYWN0XCIpO1xuXG4vKioqLyB9KSxcbi8qIDEgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiYWlyYm5iLXByb3AtdHlwZXNcIik7XG5cbi8qKiovIH0pLFxuLyogMiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi9kZWZhdWx0UGhyYXNlc1wiKTtcblxuLyoqKi8gfSksXG4vKiAzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInByb3AtdHlwZXNcIik7XG5cbi8qKiovIH0pLFxuLyogNCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi9jb25zdGFudHNcIik7XG5cbi8qKiovIH0pLFxuLyogNSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi91dGlscy9nZXRQaHJhc2VQcm9wVHlwZXNcIik7XG5cbi8qKiovIH0pLFxuLyogNiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpO1xuXG4vKioqLyB9KSxcbi8qIDcgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwibW9tZW50XCIpO1xuXG4vKioqLyB9KSxcbi8qIDggKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vc2hhcGVzL1Njcm9sbGFibGVPcmllbnRhdGlvblNoYXBlXCIpO1xuXG4vKioqLyB9KSxcbi8qIDkgKi8sXG4vKiAxMCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJyZWFjdC1tb21lbnQtcHJvcHR5cGVzXCIpO1xuXG4vKioqLyB9KSxcbi8qIDExICovLFxuLyogMTIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vc2hhcGVzL0RheU9mV2Vla1NoYXBlXCIpO1xuXG4vKioqLyB9KSxcbi8qIDEzICovLFxuLyogMTQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwicmVhY3QtYWRkb25zLXNoYWxsb3ctY29tcGFyZVwiKTtcblxuLyoqKi8gfSksXG4vKiAxNSAqLyxcbi8qIDE2ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImNvbnNvbGlkYXRlZC1ldmVudHNcIik7XG5cbi8qKiovIH0pLFxuLyogMTcgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vdXRpbHMvaXNBZnRlckRheVwiKTtcblxuLyoqKi8gfSksXG4vKiAxOCAqLyxcbi8qIDE5ICovLFxuLyogMjAgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vdXRpbHMvdG9JU09Nb250aFN0cmluZ1wiKTtcblxuLyoqKi8gfSksXG4vKiAyMSAqLyxcbi8qIDIyICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIm9iamVjdC5hc3NpZ25cIik7XG5cbi8qKiovIH0pLFxuLyogMjMgKi8sXG4vKiAyNCAqLyxcbi8qIDI1ICovLFxuLyogMjYgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vdXRpbHMvZ2V0Q2FsZW5kYXJNb250aFdpZHRoXCIpO1xuXG4vKioqLyB9KSxcbi8qIDI3ICovLFxuLyogMjggKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vdXRpbHMvZ2V0VHJhbnNmb3JtU3R5bGVzXCIpO1xuXG4vKioqLyB9KSxcbi8qIDI5ICovLFxuLyogMzAgKi8sXG4vKiAzMSAqLyxcbi8qIDMyICovLFxuLyogMzMgKi8sXG4vKiAzNCAqLyxcbi8qIDM1ICovLFxuLyogMzYgKi8sXG4vKiAzNyAqLyxcbi8qIDM4ICovLFxuLyogMzkgKi8sXG4vKiA0MCAqLyxcbi8qIDQxICovLFxuLyogNDIgKi8sXG4vKiA0MyAqLyxcbi8qIDQ0ICovLFxuLyogNDUgKi8sXG4vKiA0NiAqLyxcbi8qIDQ3ICovLFxuLyogNDggKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vdXRpbHMvaXNUcmFuc2l0aW9uRW5kU3VwcG9ydGVkXCIpO1xuXG4vKioqLyB9KSxcbi8qIDQ5ICovLFxuLyogNTAgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi9DYWxlbmRhck1vbnRoXCIpO1xuXG4vKioqLyB9KSxcbi8qIDUxICovLFxuLyogNTIgKi8sXG4vKiA1MyAqLyxcbi8qIDU0ICovLFxuLyogNTUgKi8sXG4vKiA1NiAqLyxcbi8qIDU3ICovLFxuLyogNTggKi8sXG4vKiA1OSAqLyxcbi8qIDYwICovLFxuLyogNjEgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO2Rlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7aWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gICAgfVxuICB9cmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgICBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO2lmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO3JldHVybiBDb25zdHJ1Y3RvcjtcbiAgfTtcbn0oKTtcblxudmFyIF9vYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIyKTtcblxudmFyIF9vYmplY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfb2JqZWN0KTtcblxudmFyIF9yZWFjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG5cbnZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbnZhciBfcmVhY3RBZGRvbnNTaGFsbG93Q29tcGFyZSA9IF9fd2VicGFja19yZXF1aXJlX18oMTQpO1xuXG52YXIgX3JlYWN0QWRkb25zU2hhbGxvd0NvbXBhcmUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3RBZGRvbnNTaGFsbG93Q29tcGFyZSk7XG5cbnZhciBfcmVhY3RNb21lbnRQcm9wdHlwZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwKTtcblxudmFyIF9yZWFjdE1vbWVudFByb3B0eXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdE1vbWVudFByb3B0eXBlcyk7XG5cbnZhciBfYWlyYm5iUHJvcFR5cGVzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcblxudmFyIF9tb21lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcpO1xuXG52YXIgX21vbWVudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9tb21lbnQpO1xuXG52YXIgX2NsYXNzbmFtZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYpO1xuXG52YXIgX2NsYXNzbmFtZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NuYW1lcyk7XG5cbnZhciBfY29uc29saWRhdGVkRXZlbnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNik7XG5cbnZhciBfZGVmYXVsdFBocmFzZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXG52YXIgX2dldFBocmFzZVByb3BUeXBlcyA9IF9fd2VicGFja19yZXF1aXJlX18oNSk7XG5cbnZhciBfZ2V0UGhyYXNlUHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldFBocmFzZVByb3BUeXBlcyk7XG5cbnZhciBfQ2FsZW5kYXJNb250aCA9IF9fd2VicGFja19yZXF1aXJlX18oNTApO1xuXG52YXIgX0NhbGVuZGFyTW9udGgyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfQ2FsZW5kYXJNb250aCk7XG5cbnZhciBfaXNUcmFuc2l0aW9uRW5kU3VwcG9ydGVkID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0OCk7XG5cbnZhciBfaXNUcmFuc2l0aW9uRW5kU3VwcG9ydGVkMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2lzVHJhbnNpdGlvbkVuZFN1cHBvcnRlZCk7XG5cbnZhciBfZ2V0VHJhbnNmb3JtU3R5bGVzID0gX193ZWJwYWNrX3JlcXVpcmVfXygyOCk7XG5cbnZhciBfZ2V0VHJhbnNmb3JtU3R5bGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldFRyYW5zZm9ybVN0eWxlcyk7XG5cbnZhciBfZ2V0Q2FsZW5kYXJNb250aFdpZHRoID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNik7XG5cbnZhciBfZ2V0Q2FsZW5kYXJNb250aFdpZHRoMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldENhbGVuZGFyTW9udGhXaWR0aCk7XG5cbnZhciBfdG9JU09Nb250aFN0cmluZyA9IF9fd2VicGFja19yZXF1aXJlX18oMjApO1xuXG52YXIgX3RvSVNPTW9udGhTdHJpbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdG9JU09Nb250aFN0cmluZyk7XG5cbnZhciBfaXNBZnRlckRheSA9IF9fd2VicGFja19yZXF1aXJlX18oMTcpO1xuXG52YXIgX2lzQWZ0ZXJEYXkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaXNBZnRlckRheSk7XG5cbnZhciBfU2Nyb2xsYWJsZU9yaWVudGF0aW9uU2hhcGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xuXG52YXIgX1Njcm9sbGFibGVPcmllbnRhdGlvblNoYXBlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1Njcm9sbGFibGVPcmllbnRhdGlvblNoYXBlKTtcblxudmFyIF9EYXlPZldlZWtTaGFwZSA9IF9fd2VicGFja19yZXF1aXJlX18oMTIpO1xuXG52YXIgX0RheU9mV2Vla1NoYXBlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0RheU9mV2Vla1NoYXBlKTtcblxudmFyIF9jb25zdGFudHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikge1xuICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9O1xufVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7XG4gIGlmICghc2VsZikge1xuICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgfXJldHVybiBjYWxsICYmICgodHlwZW9mIGNhbGwgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihjYWxsKSkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjtcbn1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArICh0eXBlb2Ygc3VwZXJDbGFzcyA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKHN1cGVyQ2xhc3MpKSk7XG4gIH1zdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pO2lmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcbn1cblxudmFyIHByb3BUeXBlcyA9ICgwLCBfYWlyYm5iUHJvcFR5cGVzLmZvcmJpZEV4dHJhUHJvcHMpKHtcbiAgZW5hYmxlT3V0c2lkZURheXM6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uYm9vbCxcbiAgZmlyc3RWaXNpYmxlTW9udGhJbmRleDogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5udW1iZXIsXG4gIGluaXRpYWxNb250aDogX3JlYWN0TW9tZW50UHJvcHR5cGVzMlsnZGVmYXVsdCddLm1vbWVudE9iaixcbiAgaXNBbmltYXRpbmc6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uYm9vbCxcbiAgbnVtYmVyT2ZNb250aHM6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10ubnVtYmVyLFxuICBtb2RpZmllcnM6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10ub2JqZWN0LFxuICBvcmllbnRhdGlvbjogX1Njcm9sbGFibGVPcmllbnRhdGlvblNoYXBlMlsnZGVmYXVsdCddLFxuICBvbkRheUNsaWNrOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmZ1bmMsXG4gIG9uRGF5TW91c2VFbnRlcjogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5mdW5jLFxuICBvbkRheU1vdXNlTGVhdmU6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uZnVuYyxcbiAgb25Nb250aFRyYW5zaXRpb25FbmQ6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uZnVuYyxcbiAgcmVuZGVyTW9udGg6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uZnVuYyxcbiAgcmVuZGVyRGF5OiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmZ1bmMsXG4gIHRyYW5zZm9ybVZhbHVlOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLnN0cmluZyxcbiAgZGF5U2l6ZTogX2FpcmJuYlByb3BUeXBlcy5ub25OZWdhdGl2ZUludGVnZXIsXG4gIGZvY3VzZWREYXRlOiBfcmVhY3RNb21lbnRQcm9wdHlwZXMyWydkZWZhdWx0J10ubW9tZW50T2JqLCAvLyBpbmRpY2F0ZXMgZm9jdXNhYmxlIGRheVxuICBpc0ZvY3VzZWQ6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uYm9vbCwgLy8gaW5kaWNhdGVzIHdoZXRoZXIgb3Igbm90IHRvIG1vdmUgZm9jdXMgdG8gZm9jdXNhYmxlIGRheVxuICBmaXJzdERheU9mV2VlazogX0RheU9mV2Vla1NoYXBlMlsnZGVmYXVsdCddLFxuXG4gIC8vIGkxOG5cbiAgbW9udGhGb3JtYXQ6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uc3RyaW5nLFxuICBwaHJhc2VzOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLnNoYXBlKCgwLCBfZ2V0UGhyYXNlUHJvcFR5cGVzMlsnZGVmYXVsdCddKShfZGVmYXVsdFBocmFzZXMuQ2FsZW5kYXJEYXlQaHJhc2VzKSlcbn0pO1xuXG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBlbmFibGVPdXRzaWRlRGF5czogZmFsc2UsXG4gIGZpcnN0VmlzaWJsZU1vbnRoSW5kZXg6IDAsXG4gIGluaXRpYWxNb250aDogKDAsIF9tb21lbnQyWydkZWZhdWx0J10pKCksXG4gIGlzQW5pbWF0aW5nOiBmYWxzZSxcbiAgbnVtYmVyT2ZNb250aHM6IDEsXG4gIG1vZGlmaWVyczoge30sXG4gIG9yaWVudGF0aW9uOiBfY29uc3RhbnRzLkhPUklaT05UQUxfT1JJRU5UQVRJT04sXG4gIG9uRGF5Q2xpY2s6IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBvbkRheUNsaWNrKCkge31cblxuICAgIHJldHVybiBvbkRheUNsaWNrO1xuICB9KCksXG4gIG9uRGF5TW91c2VFbnRlcjogZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIG9uRGF5TW91c2VFbnRlcigpIHt9XG5cbiAgICByZXR1cm4gb25EYXlNb3VzZUVudGVyO1xuICB9KCksXG4gIG9uRGF5TW91c2VMZWF2ZTogZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIG9uRGF5TW91c2VMZWF2ZSgpIHt9XG5cbiAgICByZXR1cm4gb25EYXlNb3VzZUxlYXZlO1xuICB9KCksXG4gIG9uTW9udGhUcmFuc2l0aW9uRW5kOiBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gb25Nb250aFRyYW5zaXRpb25FbmQoKSB7fVxuXG4gICAgcmV0dXJuIG9uTW9udGhUcmFuc2l0aW9uRW5kO1xuICB9KCksXG5cbiAgcmVuZGVyTW9udGg6IG51bGwsXG4gIHJlbmRlckRheTogbnVsbCxcbiAgdHJhbnNmb3JtVmFsdWU6ICdub25lJyxcbiAgZGF5U2l6ZTogX2NvbnN0YW50cy5EQVlfU0laRSxcbiAgZm9jdXNlZERhdGU6IG51bGwsXG4gIGlzRm9jdXNlZDogZmFsc2UsXG4gIGZpcnN0RGF5T2ZXZWVrOiBudWxsLFxuXG4gIC8vIGkxOG5cbiAgbW9udGhGb3JtYXQ6ICdNTU1NIFlZWVknLCAvLyBlbmdsaXNoIGxvY2FsZVxuICBwaHJhc2VzOiBfZGVmYXVsdFBocmFzZXMuQ2FsZW5kYXJEYXlQaHJhc2VzXG59O1xuXG5mdW5jdGlvbiBnZXRNb250aHMoaW5pdGlhbE1vbnRoLCBudW1iZXJPZk1vbnRocywgd2l0aG91dFRyYW5zaXRpb25Nb250aHMpIHtcbiAgdmFyIG1vbnRoID0gaW5pdGlhbE1vbnRoLmNsb25lKCk7XG4gIGlmICghd2l0aG91dFRyYW5zaXRpb25Nb250aHMpIG1vbnRoID0gbW9udGguc3VidHJhY3QoMSwgJ21vbnRoJyk7XG5cbiAgdmFyIG1vbnRocyA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8ICh3aXRob3V0VHJhbnNpdGlvbk1vbnRocyA/IG51bWJlck9mTW9udGhzIDogbnVtYmVyT2ZNb250aHMgKyAyKTsgaSArPSAxKSB7XG4gICAgbW9udGhzLnB1c2gobW9udGgpO1xuICAgIG1vbnRoID0gbW9udGguY2xvbmUoKS5hZGQoMSwgJ21vbnRoJyk7XG4gIH1cblxuICByZXR1cm4gbW9udGhzO1xufVxuXG52YXIgQ2FsZW5kYXJNb250aEdyaWQgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoQ2FsZW5kYXJNb250aEdyaWQsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIENhbGVuZGFyTW9udGhHcmlkKHByb3BzKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENhbGVuZGFyTW9udGhHcmlkKTtcblxuICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChDYWxlbmRhck1vbnRoR3JpZC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKENhbGVuZGFyTW9udGhHcmlkKSkuY2FsbCh0aGlzLCBwcm9wcykpO1xuXG4gICAgdmFyIHdpdGhvdXRUcmFuc2l0aW9uTW9udGhzID0gcHJvcHMub3JpZW50YXRpb24gPT09IF9jb25zdGFudHMuVkVSVElDQUxfU0NST0xMQUJMRTtcbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIG1vbnRoczogZ2V0TW9udGhzKHByb3BzLmluaXRpYWxNb250aCwgcHJvcHMubnVtYmVyT2ZNb250aHMsIHdpdGhvdXRUcmFuc2l0aW9uTW9udGhzKVxuICAgIH07XG5cbiAgICBfdGhpcy5pc1RyYW5zaXRpb25FbmRTdXBwb3J0ZWQgPSAoMCwgX2lzVHJhbnNpdGlvbkVuZFN1cHBvcnRlZDJbJ2RlZmF1bHQnXSkoKTtcbiAgICBfdGhpcy5vblRyYW5zaXRpb25FbmQgPSBfdGhpcy5vblRyYW5zaXRpb25FbmQuYmluZChfdGhpcyk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKENhbGVuZGFyTW9udGhHcmlkLCBbe1xuICAgIGtleTogJ2NvbXBvbmVudERpZE1vdW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICAgIHRoaXMuZXZlbnRIYW5kbGUgPSAoMCwgX2NvbnNvbGlkYXRlZEV2ZW50cy5hZGRFdmVudExpc3RlbmVyKSh0aGlzLmNvbnRhaW5lciwgJ3RyYW5zaXRpb25lbmQnLCB0aGlzLm9uVHJhbnNpdGlvbkVuZCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb21wb25lbnREaWRNb3VudDtcbiAgICB9KClcbiAgfSwge1xuICAgIGtleTogJ2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgICAgICB2YXIgaW5pdGlhbE1vbnRoID0gbmV4dFByb3BzLmluaXRpYWxNb250aCxcbiAgICAgICAgICAgIG51bWJlck9mTW9udGhzID0gbmV4dFByb3BzLm51bWJlck9mTW9udGhzLFxuICAgICAgICAgICAgb3JpZW50YXRpb24gPSBuZXh0UHJvcHMub3JpZW50YXRpb247XG4gICAgICAgIHZhciBtb250aHMgPSB0aGlzLnN0YXRlLm1vbnRocztcblxuICAgICAgICB2YXIgaGFzTW9udGhDaGFuZ2VkID0gIXRoaXMucHJvcHMuaW5pdGlhbE1vbnRoLmlzU2FtZShpbml0aWFsTW9udGgsICdtb250aCcpO1xuICAgICAgICB2YXIgaGFzTnVtYmVyT2ZNb250aHNDaGFuZ2VkID0gdGhpcy5wcm9wcy5udW1iZXJPZk1vbnRocyAhPT0gbnVtYmVyT2ZNb250aHM7XG4gICAgICAgIHZhciBuZXdNb250aHMgPSBtb250aHM7XG5cbiAgICAgICAgaWYgKGhhc01vbnRoQ2hhbmdlZCAmJiAhaGFzTnVtYmVyT2ZNb250aHNDaGFuZ2VkKSB7XG4gICAgICAgICAgaWYgKCgwLCBfaXNBZnRlckRheTJbJ2RlZmF1bHQnXSkoaW5pdGlhbE1vbnRoLCB0aGlzLnByb3BzLmluaXRpYWxNb250aCkpIHtcbiAgICAgICAgICAgIG5ld01vbnRocyA9IG1vbnRocy5zbGljZSgxKTtcbiAgICAgICAgICAgIG5ld01vbnRocy5wdXNoKG1vbnRoc1ttb250aHMubGVuZ3RoIC0gMV0uY2xvbmUoKS5hZGQoMSwgJ21vbnRoJykpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBuZXdNb250aHMgPSBtb250aHMuc2xpY2UoMCwgbW9udGhzLmxlbmd0aCAtIDEpO1xuICAgICAgICAgICAgbmV3TW9udGhzLnVuc2hpZnQobW9udGhzWzBdLmNsb25lKCkuc3VidHJhY3QoMSwgJ21vbnRoJykpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChoYXNOdW1iZXJPZk1vbnRoc0NoYW5nZWQpIHtcbiAgICAgICAgICB2YXIgd2l0aG91dFRyYW5zaXRpb25Nb250aHMgPSBvcmllbnRhdGlvbiA9PT0gX2NvbnN0YW50cy5WRVJUSUNBTF9TQ1JPTExBQkxFO1xuICAgICAgICAgIG5ld01vbnRocyA9IGdldE1vbnRocyhpbml0aWFsTW9udGgsIG51bWJlck9mTW9udGhzLCB3aXRob3V0VHJhbnNpdGlvbk1vbnRocyk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBtb250aHM6IG5ld01vbnRoc1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHM7XG4gICAgfSgpXG4gIH0sIHtcbiAgICBrZXk6ICdzaG91bGRDb21wb25lbnRVcGRhdGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBzaG91bGRDb21wb25lbnRVcGRhdGUobmV4dFByb3BzLCBuZXh0U3RhdGUpIHtcbiAgICAgICAgcmV0dXJuICgwLCBfcmVhY3RBZGRvbnNTaGFsbG93Q29tcGFyZTJbJ2RlZmF1bHQnXSkodGhpcywgbmV4dFByb3BzLCBuZXh0U3RhdGUpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc2hvdWxkQ29tcG9uZW50VXBkYXRlO1xuICAgIH0oKVxuICB9LCB7XG4gICAga2V5OiAnY29tcG9uZW50RGlkVXBkYXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgICAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICAgIGlzQW5pbWF0aW5nID0gX3Byb3BzLmlzQW5pbWF0aW5nLFxuICAgICAgICAgICAgb25Nb250aFRyYW5zaXRpb25FbmQgPSBfcHJvcHMub25Nb250aFRyYW5zaXRpb25FbmQ7XG5cbiAgICAgICAgLy8gRm9yIElFOSwgaW1tZWRpYXRlbHkgY2FsbCBvbk1vbnRoVHJhbnNpdGlvbkVuZCBpbnN0ZWFkIG9mXG4gICAgICAgIC8vIHdhaXRpbmcgZm9yIHRoZSBhbmltYXRpb24gdG8gY29tcGxldGVcblxuICAgICAgICBpZiAoIXRoaXMuaXNUcmFuc2l0aW9uRW5kU3VwcG9ydGVkICYmIGlzQW5pbWF0aW5nKSB7XG4gICAgICAgICAgb25Nb250aFRyYW5zaXRpb25FbmQoKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29tcG9uZW50RGlkVXBkYXRlO1xuICAgIH0oKVxuICB9LCB7XG4gICAga2V5OiAnY29tcG9uZW50V2lsbFVubW91bnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgICAgKDAsIF9jb25zb2xpZGF0ZWRFdmVudHMucmVtb3ZlRXZlbnRMaXN0ZW5lcikodGhpcy5ldmVudEhhbmRsZSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb21wb25lbnRXaWxsVW5tb3VudDtcbiAgICB9KClcbiAgfSwge1xuICAgIGtleTogJ29uVHJhbnNpdGlvbkVuZCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIG9uVHJhbnNpdGlvbkVuZCgpIHtcbiAgICAgICAgdGhpcy5wcm9wcy5vbk1vbnRoVHJhbnNpdGlvbkVuZCgpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gb25UcmFuc2l0aW9uRW5kO1xuICAgIH0oKVxuICB9LCB7XG4gICAga2V5OiAncmVuZGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgICB2YXIgX3Byb3BzMiA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgICBlbmFibGVPdXRzaWRlRGF5cyA9IF9wcm9wczIuZW5hYmxlT3V0c2lkZURheXMsXG4gICAgICAgICAgICBmaXJzdFZpc2libGVNb250aEluZGV4ID0gX3Byb3BzMi5maXJzdFZpc2libGVNb250aEluZGV4LFxuICAgICAgICAgICAgaXNBbmltYXRpbmcgPSBfcHJvcHMyLmlzQW5pbWF0aW5nLFxuICAgICAgICAgICAgbW9kaWZpZXJzID0gX3Byb3BzMi5tb2RpZmllcnMsXG4gICAgICAgICAgICBudW1iZXJPZk1vbnRocyA9IF9wcm9wczIubnVtYmVyT2ZNb250aHMsXG4gICAgICAgICAgICBtb250aEZvcm1hdCA9IF9wcm9wczIubW9udGhGb3JtYXQsXG4gICAgICAgICAgICBvcmllbnRhdGlvbiA9IF9wcm9wczIub3JpZW50YXRpb24sXG4gICAgICAgICAgICB0cmFuc2Zvcm1WYWx1ZSA9IF9wcm9wczIudHJhbnNmb3JtVmFsdWUsXG4gICAgICAgICAgICBkYXlTaXplID0gX3Byb3BzMi5kYXlTaXplLFxuICAgICAgICAgICAgb25EYXlNb3VzZUVudGVyID0gX3Byb3BzMi5vbkRheU1vdXNlRW50ZXIsXG4gICAgICAgICAgICBvbkRheU1vdXNlTGVhdmUgPSBfcHJvcHMyLm9uRGF5TW91c2VMZWF2ZSxcbiAgICAgICAgICAgIG9uRGF5Q2xpY2sgPSBfcHJvcHMyLm9uRGF5Q2xpY2ssXG4gICAgICAgICAgICByZW5kZXJNb250aCA9IF9wcm9wczIucmVuZGVyTW9udGgsXG4gICAgICAgICAgICByZW5kZXJEYXkgPSBfcHJvcHMyLnJlbmRlckRheSxcbiAgICAgICAgICAgIG9uTW9udGhUcmFuc2l0aW9uRW5kID0gX3Byb3BzMi5vbk1vbnRoVHJhbnNpdGlvbkVuZCxcbiAgICAgICAgICAgIGZpcnN0RGF5T2ZXZWVrID0gX3Byb3BzMi5maXJzdERheU9mV2VlayxcbiAgICAgICAgICAgIGZvY3VzZWREYXRlID0gX3Byb3BzMi5mb2N1c2VkRGF0ZSxcbiAgICAgICAgICAgIGlzRm9jdXNlZCA9IF9wcm9wczIuaXNGb2N1c2VkLFxuICAgICAgICAgICAgcGhyYXNlcyA9IF9wcm9wczIucGhyYXNlcztcbiAgICAgICAgdmFyIG1vbnRocyA9IHRoaXMuc3RhdGUubW9udGhzO1xuXG4gICAgICAgIHZhciBpc1ZlcnRpY2FsID0gb3JpZW50YXRpb24gPT09IF9jb25zdGFudHMuVkVSVElDQUxfT1JJRU5UQVRJT047XG4gICAgICAgIHZhciBpc1ZlcnRpY2FsU2Nyb2xsYWJsZSA9IG9yaWVudGF0aW9uID09PSBfY29uc3RhbnRzLlZFUlRJQ0FMX1NDUk9MTEFCTEU7XG4gICAgICAgIHZhciBpc0hvcml6b250YWwgPSBvcmllbnRhdGlvbiA9PT0gX2NvbnN0YW50cy5IT1JJWk9OVEFMX09SSUVOVEFUSU9OO1xuXG4gICAgICAgIHZhciBjbGFzc05hbWUgPSAoMCwgX2NsYXNzbmFtZXMyWydkZWZhdWx0J10pKCdDYWxlbmRhck1vbnRoR3JpZCcsIHtcbiAgICAgICAgICAnQ2FsZW5kYXJNb250aEdyaWQtLWhvcml6b250YWwnOiBpc0hvcml6b250YWwsXG4gICAgICAgICAgJ0NhbGVuZGFyTW9udGhHcmlkLS12ZXJ0aWNhbCc6IGlzVmVydGljYWwsXG4gICAgICAgICAgJ0NhbGVuZGFyTW9udGhHcmlkLS12ZXJ0aWNhbC1zY3JvbGxhYmxlJzogaXNWZXJ0aWNhbFNjcm9sbGFibGUsXG4gICAgICAgICAgJ0NhbGVuZGFyTW9udGhHcmlkLS1hbmltYXRpbmcnOiBpc0FuaW1hdGluZ1xuICAgICAgICB9KTtcblxuICAgICAgICB2YXIgY2FsZW5kYXJNb250aFdpZHRoID0gKDAsIF9nZXRDYWxlbmRhck1vbnRoV2lkdGgyWydkZWZhdWx0J10pKGRheVNpemUpO1xuXG4gICAgICAgIHZhciB3aWR0aCA9IGlzVmVydGljYWwgfHwgaXNWZXJ0aWNhbFNjcm9sbGFibGUgPyBjYWxlbmRhck1vbnRoV2lkdGggOiAobnVtYmVyT2ZNb250aHMgKyAyKSAqIGNhbGVuZGFyTW9udGhXaWR0aDtcblxuICAgICAgICB2YXIgc3R5bGUgPSAoMCwgX29iamVjdDJbJ2RlZmF1bHQnXSkoe30sICgwLCBfZ2V0VHJhbnNmb3JtU3R5bGVzMlsnZGVmYXVsdCddKSh0cmFuc2Zvcm1WYWx1ZSksIHtcbiAgICAgICAgICB3aWR0aDogd2lkdGhcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KCdkaXYnLCB7XG4gICAgICAgICAgcmVmOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBmdW5jdGlvbiByZWYoX3JlZikge1xuICAgICAgICAgICAgICBfdGhpczIuY29udGFpbmVyID0gX3JlZjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHJlZjtcbiAgICAgICAgICB9KCksXG4gICAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgICAgICAgc3R5bGU6IHN0eWxlLFxuICAgICAgICAgIG9uVHJhbnNpdGlvbkVuZDogb25Nb250aFRyYW5zaXRpb25FbmRcbiAgICAgICAgfSwgbW9udGhzLm1hcChmdW5jdGlvbiAobW9udGgsIGkpIHtcbiAgICAgICAgICB2YXIgaXNWaXNpYmxlID0gaSA+PSBmaXJzdFZpc2libGVNb250aEluZGV4ICYmIGkgPCBmaXJzdFZpc2libGVNb250aEluZGV4ICsgbnVtYmVyT2ZNb250aHM7XG4gICAgICAgICAgdmFyIG1vbnRoU3RyaW5nID0gKDAsIF90b0lTT01vbnRoU3RyaW5nMlsnZGVmYXVsdCddKShtb250aCk7XG4gICAgICAgICAgcmV0dXJuIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KF9DYWxlbmRhck1vbnRoMlsnZGVmYXVsdCddLCB7XG4gICAgICAgICAgICBrZXk6IG1vbnRoU3RyaW5nLFxuICAgICAgICAgICAgbW9udGg6IG1vbnRoLFxuICAgICAgICAgICAgaXNWaXNpYmxlOiBpc1Zpc2libGUsXG4gICAgICAgICAgICBlbmFibGVPdXRzaWRlRGF5czogZW5hYmxlT3V0c2lkZURheXMsXG4gICAgICAgICAgICBtb2RpZmllcnM6IG1vZGlmaWVyc1ttb250aFN0cmluZ10sXG4gICAgICAgICAgICBtb250aEZvcm1hdDogbW9udGhGb3JtYXQsXG4gICAgICAgICAgICBvcmllbnRhdGlvbjogb3JpZW50YXRpb24sXG4gICAgICAgICAgICBvbkRheU1vdXNlRW50ZXI6IG9uRGF5TW91c2VFbnRlcixcbiAgICAgICAgICAgIG9uRGF5TW91c2VMZWF2ZTogb25EYXlNb3VzZUxlYXZlLFxuICAgICAgICAgICAgb25EYXlDbGljazogb25EYXlDbGljayxcbiAgICAgICAgICAgIHJlbmRlck1vbnRoOiByZW5kZXJNb250aCxcbiAgICAgICAgICAgIHJlbmRlckRheTogcmVuZGVyRGF5LFxuICAgICAgICAgICAgZmlyc3REYXlPZldlZWs6IGZpcnN0RGF5T2ZXZWVrLFxuICAgICAgICAgICAgZGF5U2l6ZTogZGF5U2l6ZSxcbiAgICAgICAgICAgIGZvY3VzZWREYXRlOiBpc1Zpc2libGUgPyBmb2N1c2VkRGF0ZSA6IG51bGwsXG4gICAgICAgICAgICBpc0ZvY3VzZWQ6IGlzRm9jdXNlZCxcbiAgICAgICAgICAgIHBocmFzZXM6IHBocmFzZXNcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSkpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVuZGVyO1xuICAgIH0oKVxuICB9XSk7XG5cbiAgcmV0dXJuIENhbGVuZGFyTW9udGhHcmlkO1xufShfcmVhY3QyWydkZWZhdWx0J10uQ29tcG9uZW50KTtcblxuZXhwb3J0c1snZGVmYXVsdCddID0gQ2FsZW5kYXJNb250aEdyaWQ7XG5cbkNhbGVuZGFyTW9udGhHcmlkLnByb3BUeXBlcyA9IHByb3BUeXBlcztcbkNhbGVuZGFyTW9udGhHcmlkLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcblxuLyoqKi8gfSlcbi8qKioqKiovIF0pOyIsIm1vZHVsZS5leHBvcnRzID1cbi8qKioqKiovIChmdW5jdGlvbihtb2R1bGVzKSB7IC8vIHdlYnBhY2tCb290c3RyYXBcbi8qKioqKiovIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbi8qKioqKiovIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbi8qKioqKiovIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuLyoqKioqKi8gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4vKioqKioqLyBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuLyoqKioqKi8gXHRcdFx0aTogbW9kdWxlSWQsXG4vKioqKioqLyBcdFx0XHRsOiBmYWxzZSxcbi8qKioqKiovIFx0XHRcdGV4cG9ydHM6IHt9XG4vKioqKioqLyBcdFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4vKioqKioqLyBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbi8qKioqKiovIFx0XHRtb2R1bGUubCA9IHRydWU7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4vKioqKioqLyBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuLyoqKioqKi8gXHR9XG4vKioqKioqL1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBpZGVudGl0eSBmdW5jdGlvbiBmb3IgY2FsbGluZyBoYXJtb255IGltcG9ydHMgd2l0aCB0aGUgY29ycmVjdCBjb250ZXh0XG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uaSA9IGZ1bmN0aW9uKHZhbHVlKSB7IHJldHVybiB2YWx1ZTsgfTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbi8qKioqKiovIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4vKioqKioqLyBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwge1xuLyoqKioqKi8gXHRcdFx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxuLyoqKioqKi8gXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuLyoqKioqKi8gXHRcdFx0XHRnZXQ6IGdldHRlclxuLyoqKioqKi8gXHRcdFx0fSk7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4vKioqKioqLyBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4vKioqKioqLyBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuLyoqKioqKi8gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4vKioqKioqLyBcdFx0cmV0dXJuIGdldHRlcjtcbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vKioqKioqLyBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDYwKTtcbi8qKioqKiovIH0pXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKioqKi8gKHtcblxuLyoqKi8gMDpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwicmVhY3RcIik7XG5cbi8qKiovIH0pLFxuXG4vKioqLyAxOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJhaXJibmItcHJvcC10eXBlc1wiKTtcblxuLyoqKi8gfSksXG5cbi8qKiovIDEwOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJyZWFjdC1tb21lbnQtcHJvcHR5cGVzXCIpO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gMTI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uL3NoYXBlcy9EYXlPZldlZWtTaGFwZVwiKTtcblxuLyoqKi8gfSksXG5cbi8qKiovIDEzOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi91dGlscy90b0lTT0RhdGVTdHJpbmdcIik7XG5cbi8qKiovIH0pLFxuXG4vKioqLyAxNDpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwicmVhY3QtYWRkb25zLXNoYWxsb3ctY29tcGFyZVwiKTtcblxuLyoqKi8gfSksXG5cbi8qKiovIDE5OlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi91dGlscy9pc1NhbWVEYXlcIik7XG5cbi8qKiovIH0pLFxuXG4vKioqLyAyOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi9kZWZhdWx0UGhyYXNlc1wiKTtcblxuLyoqKi8gfSksXG5cbi8qKiovIDM6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInByb3AtdHlwZXNcIik7XG5cbi8qKiovIH0pLFxuXG4vKioqLyA0OlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi9jb25zdGFudHNcIik7XG5cbi8qKiovIH0pLFxuXG4vKioqLyA0NTpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vdXRpbHMvZ2V0Q2FsZW5kYXJNb250aFdlZWtzXCIpO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gNDk6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4vQ2FsZW5kYXJEYXlcIik7XG5cbi8qKiovIH0pLFxuXG4vKioqLyA1OlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi91dGlscy9nZXRQaHJhc2VQcm9wVHlwZXNcIik7XG5cbi8qKiovIH0pLFxuXG4vKioqLyA2OlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gNjA6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7ZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO2lmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7T2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICAgIH1cbiAgfXJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gICAgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtyZXR1cm4gQ29uc3RydWN0b3I7XG4gIH07XG59KCk7XG5cbnZhciBfcmVhY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9wcm9wVHlwZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xuXG52YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG52YXIgX3JlYWN0QWRkb25zU2hhbGxvd0NvbXBhcmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE0KTtcblxudmFyIF9yZWFjdEFkZG9uc1NoYWxsb3dDb21wYXJlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0QWRkb25zU2hhbGxvd0NvbXBhcmUpO1xuXG52YXIgX3JlYWN0TW9tZW50UHJvcHR5cGVzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMCk7XG5cbnZhciBfcmVhY3RNb21lbnRQcm9wdHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3RNb21lbnRQcm9wdHlwZXMpO1xuXG52YXIgX2FpcmJuYlByb3BUeXBlcyA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG5cbnZhciBfbW9tZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3KTtcblxudmFyIF9tb21lbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfbW9tZW50KTtcblxudmFyIF9jbGFzc25hbWVzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KTtcblxudmFyIF9jbGFzc25hbWVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzbmFtZXMpO1xuXG52YXIgX2RlZmF1bHRQaHJhc2VzID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcblxudmFyIF9nZXRQaHJhc2VQcm9wVHlwZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpO1xuXG52YXIgX2dldFBocmFzZVByb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRQaHJhc2VQcm9wVHlwZXMpO1xuXG52YXIgX0NhbGVuZGFyRGF5ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0OSk7XG5cbnZhciBfQ2FsZW5kYXJEYXkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfQ2FsZW5kYXJEYXkpO1xuXG52YXIgX2dldENhbGVuZGFyTW9udGhXZWVrcyA9IF9fd2VicGFja19yZXF1aXJlX18oNDUpO1xuXG52YXIgX2dldENhbGVuZGFyTW9udGhXZWVrczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRDYWxlbmRhck1vbnRoV2Vla3MpO1xuXG52YXIgX2lzU2FtZURheSA9IF9fd2VicGFja19yZXF1aXJlX18oMTkpO1xuXG52YXIgX2lzU2FtZURheTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pc1NhbWVEYXkpO1xuXG52YXIgX3RvSVNPRGF0ZVN0cmluZyA9IF9fd2VicGFja19yZXF1aXJlX18oMTMpO1xuXG52YXIgX3RvSVNPRGF0ZVN0cmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90b0lTT0RhdGVTdHJpbmcpO1xuXG52YXIgX1Njcm9sbGFibGVPcmllbnRhdGlvblNoYXBlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KTtcblxudmFyIF9TY3JvbGxhYmxlT3JpZW50YXRpb25TaGFwZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9TY3JvbGxhYmxlT3JpZW50YXRpb25TaGFwZSk7XG5cbnZhciBfRGF5T2ZXZWVrU2hhcGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyKTtcblxudmFyIF9EYXlPZldlZWtTaGFwZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9EYXlPZldlZWtTaGFwZSk7XG5cbnZhciBfY29uc3RhbnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTtcbn1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gIH1cbn1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkge1xuICBpZiAoIXNlbGYpIHtcbiAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gIH1yZXR1cm4gY2FsbCAmJiAoKHR5cGVvZiBjYWxsID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2YoY2FsbCkpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7XG59XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyAodHlwZW9mIHN1cGVyQ2xhc3MgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihzdXBlckNsYXNzKSkpO1xuICB9c3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTtpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG59IC8qIGVzbGludCByZWFjdC9uby1hcnJheS1pbmRleC1rZXk6IDAgKi9cblxudmFyIHByb3BUeXBlcyA9ICgwLCBfYWlyYm5iUHJvcFR5cGVzLmZvcmJpZEV4dHJhUHJvcHMpKHtcbiAgbW9udGg6IF9yZWFjdE1vbWVudFByb3B0eXBlczJbJ2RlZmF1bHQnXS5tb21lbnRPYmosXG4gIGlzVmlzaWJsZTogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5ib29sLFxuICBlbmFibGVPdXRzaWRlRGF5czogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5ib29sLFxuICBtb2RpZmllcnM6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10ub2JqZWN0LFxuICBvcmllbnRhdGlvbjogX1Njcm9sbGFibGVPcmllbnRhdGlvblNoYXBlMlsnZGVmYXVsdCddLFxuICBkYXlTaXplOiBfYWlyYm5iUHJvcFR5cGVzLm5vbk5lZ2F0aXZlSW50ZWdlcixcbiAgb25EYXlDbGljazogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5mdW5jLFxuICBvbkRheU1vdXNlRW50ZXI6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uZnVuYyxcbiAgb25EYXlNb3VzZUxlYXZlOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmZ1bmMsXG4gIHJlbmRlck1vbnRoOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmZ1bmMsXG4gIHJlbmRlckRheTogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5mdW5jLFxuICBmaXJzdERheU9mV2VlazogX0RheU9mV2Vla1NoYXBlMlsnZGVmYXVsdCddLFxuXG4gIGZvY3VzZWREYXRlOiBfcmVhY3RNb21lbnRQcm9wdHlwZXMyWydkZWZhdWx0J10ubW9tZW50T2JqLCAvLyBpbmRpY2F0ZXMgZm9jdXNhYmxlIGRheVxuICBpc0ZvY3VzZWQ6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uYm9vbCwgLy8gaW5kaWNhdGVzIHdoZXRoZXIgb3Igbm90IHRvIG1vdmUgZm9jdXMgdG8gZm9jdXNhYmxlIGRheVxuXG4gIC8vIGkxOG5cbiAgbW9udGhGb3JtYXQ6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uc3RyaW5nLFxuICBwaHJhc2VzOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLnNoYXBlKCgwLCBfZ2V0UGhyYXNlUHJvcFR5cGVzMlsnZGVmYXVsdCddKShfZGVmYXVsdFBocmFzZXMuQ2FsZW5kYXJEYXlQaHJhc2VzKSlcbn0pO1xuXG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBtb250aDogKDAsIF9tb21lbnQyWydkZWZhdWx0J10pKCksXG4gIGlzVmlzaWJsZTogdHJ1ZSxcbiAgZW5hYmxlT3V0c2lkZURheXM6IGZhbHNlLFxuICBtb2RpZmllcnM6IHt9LFxuICBvcmllbnRhdGlvbjogX2NvbnN0YW50cy5IT1JJWk9OVEFMX09SSUVOVEFUSU9OLFxuICBkYXlTaXplOiBfY29uc3RhbnRzLkRBWV9TSVpFLFxuICBvbkRheUNsaWNrOiBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gb25EYXlDbGljaygpIHt9XG5cbiAgICByZXR1cm4gb25EYXlDbGljaztcbiAgfSgpLFxuICBvbkRheU1vdXNlRW50ZXI6IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBvbkRheU1vdXNlRW50ZXIoKSB7fVxuXG4gICAgcmV0dXJuIG9uRGF5TW91c2VFbnRlcjtcbiAgfSgpLFxuICBvbkRheU1vdXNlTGVhdmU6IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBvbkRheU1vdXNlTGVhdmUoKSB7fVxuXG4gICAgcmV0dXJuIG9uRGF5TW91c2VMZWF2ZTtcbiAgfSgpLFxuXG4gIHJlbmRlck1vbnRoOiBudWxsLFxuICByZW5kZXJEYXk6IG51bGwsXG4gIGZpcnN0RGF5T2ZXZWVrOiBudWxsLFxuXG4gIGZvY3VzZWREYXRlOiBudWxsLFxuICBpc0ZvY3VzZWQ6IGZhbHNlLFxuXG4gIC8vIGkxOG5cbiAgbW9udGhGb3JtYXQ6ICdNTU1NIFlZWVknLCAvLyBlbmdsaXNoIGxvY2FsZVxuICBwaHJhc2VzOiBfZGVmYXVsdFBocmFzZXMuQ2FsZW5kYXJEYXlQaHJhc2VzXG59O1xuXG52YXIgQ2FsZW5kYXJNb250aCA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhDYWxlbmRhck1vbnRoLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBDYWxlbmRhck1vbnRoKHByb3BzKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENhbGVuZGFyTW9udGgpO1xuXG4gICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKENhbGVuZGFyTW9udGguX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihDYWxlbmRhck1vbnRoKSkuY2FsbCh0aGlzLCBwcm9wcykpO1xuXG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICB3ZWVrczogKDAsIF9nZXRDYWxlbmRhck1vbnRoV2Vla3MyWydkZWZhdWx0J10pKHByb3BzLm1vbnRoLCBwcm9wcy5lbmFibGVPdXRzaWRlRGF5cywgcHJvcHMuZmlyc3REYXlPZldlZWsgPT0gbnVsbCA/IF9tb21lbnQyWydkZWZhdWx0J10ubG9jYWxlRGF0YSgpLmZpcnN0RGF5T2ZXZWVrKCkgOiBwcm9wcy5maXJzdERheU9mV2VlaylcbiAgICB9O1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhDYWxlbmRhck1vbnRoLCBbe1xuICAgIGtleTogJ2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgICAgICB2YXIgbW9udGggPSBuZXh0UHJvcHMubW9udGgsXG4gICAgICAgICAgICBlbmFibGVPdXRzaWRlRGF5cyA9IG5leHRQcm9wcy5lbmFibGVPdXRzaWRlRGF5cyxcbiAgICAgICAgICAgIGZpcnN0RGF5T2ZXZWVrID0gbmV4dFByb3BzLmZpcnN0RGF5T2ZXZWVrO1xuXG4gICAgICAgIGlmICghbW9udGguaXNTYW1lKHRoaXMucHJvcHMubW9udGgpIHx8IGVuYWJsZU91dHNpZGVEYXlzICE9PSB0aGlzLnByb3BzLmVuYWJsZU91dHNpZGVEYXlzIHx8IGZpcnN0RGF5T2ZXZWVrICE9PSB0aGlzLnByb3BzLmZpcnN0RGF5T2ZXZWVrKSB7XG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICB3ZWVrczogKDAsIF9nZXRDYWxlbmRhck1vbnRoV2Vla3MyWydkZWZhdWx0J10pKG1vbnRoLCBlbmFibGVPdXRzaWRlRGF5cywgZmlyc3REYXlPZldlZWsgPT0gbnVsbCA/IF9tb21lbnQyWydkZWZhdWx0J10ubG9jYWxlRGF0YSgpLmZpcnN0RGF5T2ZXZWVrKCkgOiBmaXJzdERheU9mV2VlaylcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcztcbiAgICB9KClcbiAgfSwge1xuICAgIGtleTogJ3Nob3VsZENvbXBvbmVudFVwZGF0ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIHNob3VsZENvbXBvbmVudFVwZGF0ZShuZXh0UHJvcHMsIG5leHRTdGF0ZSkge1xuICAgICAgICByZXR1cm4gKDAsIF9yZWFjdEFkZG9uc1NoYWxsb3dDb21wYXJlMlsnZGVmYXVsdCddKSh0aGlzLCBuZXh0UHJvcHMsIG5leHRTdGF0ZSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzaG91bGRDb21wb25lbnRVcGRhdGU7XG4gICAgfSgpXG4gIH0sIHtcbiAgICBrZXk6ICdyZW5kZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgICAgbW9udGggPSBfcHJvcHMubW9udGgsXG4gICAgICAgICAgICBtb250aEZvcm1hdCA9IF9wcm9wcy5tb250aEZvcm1hdCxcbiAgICAgICAgICAgIG9yaWVudGF0aW9uID0gX3Byb3BzLm9yaWVudGF0aW9uLFxuICAgICAgICAgICAgaXNWaXNpYmxlID0gX3Byb3BzLmlzVmlzaWJsZSxcbiAgICAgICAgICAgIG1vZGlmaWVycyA9IF9wcm9wcy5tb2RpZmllcnMsXG4gICAgICAgICAgICBvbkRheUNsaWNrID0gX3Byb3BzLm9uRGF5Q2xpY2ssXG4gICAgICAgICAgICBvbkRheU1vdXNlRW50ZXIgPSBfcHJvcHMub25EYXlNb3VzZUVudGVyLFxuICAgICAgICAgICAgb25EYXlNb3VzZUxlYXZlID0gX3Byb3BzLm9uRGF5TW91c2VMZWF2ZSxcbiAgICAgICAgICAgIHJlbmRlck1vbnRoID0gX3Byb3BzLnJlbmRlck1vbnRoLFxuICAgICAgICAgICAgcmVuZGVyRGF5ID0gX3Byb3BzLnJlbmRlckRheSxcbiAgICAgICAgICAgIGRheVNpemUgPSBfcHJvcHMuZGF5U2l6ZSxcbiAgICAgICAgICAgIGZvY3VzZWREYXRlID0gX3Byb3BzLmZvY3VzZWREYXRlLFxuICAgICAgICAgICAgaXNGb2N1c2VkID0gX3Byb3BzLmlzRm9jdXNlZCxcbiAgICAgICAgICAgIHBocmFzZXMgPSBfcHJvcHMucGhyYXNlcztcbiAgICAgICAgdmFyIHdlZWtzID0gdGhpcy5zdGF0ZS53ZWVrcztcblxuICAgICAgICB2YXIgbW9udGhUaXRsZSA9IHJlbmRlck1vbnRoID8gcmVuZGVyTW9udGgobW9udGgpIDogbW9udGguZm9ybWF0KG1vbnRoRm9ybWF0KTtcblxuICAgICAgICB2YXIgY2FsZW5kYXJNb250aENsYXNzZXMgPSAoMCwgX2NsYXNzbmFtZXMyWydkZWZhdWx0J10pKCdDYWxlbmRhck1vbnRoJywge1xuICAgICAgICAgICdDYWxlbmRhck1vbnRoLS1ob3Jpem9udGFsJzogb3JpZW50YXRpb24gPT09IF9jb25zdGFudHMuSE9SSVpPTlRBTF9PUklFTlRBVElPTixcbiAgICAgICAgICAnQ2FsZW5kYXJNb250aC0tdmVydGljYWwnOiBvcmllbnRhdGlvbiA9PT0gX2NvbnN0YW50cy5WRVJUSUNBTF9PUklFTlRBVElPTixcbiAgICAgICAgICAnQ2FsZW5kYXJNb250aC0tdmVydGljYWwtc2Nyb2xsYWJsZSc6IG9yaWVudGF0aW9uID09PSBfY29uc3RhbnRzLlZFUlRJQ0FMX1NDUk9MTEFCTEVcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogY2FsZW5kYXJNb250aENsYXNzZXMsICdkYXRhLXZpc2libGUnOiBpc1Zpc2libGUgfSwgX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoJ3RhYmxlJywgbnVsbCwgX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoJ2NhcHRpb24nLCB7IGNsYXNzTmFtZTogJ0NhbGVuZGFyTW9udGhfX2NhcHRpb24ganMtQ2FsZW5kYXJNb250aF9fY2FwdGlvbicgfSwgX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoJ3N0cm9uZycsIG51bGwsIG1vbnRoVGl0bGUpKSwgX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoJ3Rib2R5JywgeyBjbGFzc05hbWU6ICdqcy1DYWxlbmRhck1vbnRoX19ncmlkJyB9LCB3ZWVrcy5tYXAoZnVuY3Rpb24gKHdlZWssIGkpIHtcbiAgICAgICAgICByZXR1cm4gX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoJ3RyJywgeyBrZXk6IGkgfSwgd2Vlay5tYXAoZnVuY3Rpb24gKGRheSwgZGF5T2ZXZWVrKSB7XG4gICAgICAgICAgICByZXR1cm4gX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoX0NhbGVuZGFyRGF5MlsnZGVmYXVsdCddLCB7XG4gICAgICAgICAgICAgIGRheTogZGF5LFxuICAgICAgICAgICAgICBkYXlTaXplOiBkYXlTaXplLFxuICAgICAgICAgICAgICBpc091dHNpZGVEYXk6ICFkYXkgfHwgZGF5Lm1vbnRoKCkgIT09IG1vbnRoLm1vbnRoKCksXG4gICAgICAgICAgICAgIHRhYkluZGV4OiBpc1Zpc2libGUgJiYgKDAsIF9pc1NhbWVEYXkyWydkZWZhdWx0J10pKGRheSwgZm9jdXNlZERhdGUpID8gMCA6IC0xLFxuICAgICAgICAgICAgICBpc0ZvY3VzZWQ6IGlzRm9jdXNlZCxcbiAgICAgICAgICAgICAga2V5OiBkYXlPZldlZWssXG4gICAgICAgICAgICAgIG9uRGF5TW91c2VFbnRlcjogb25EYXlNb3VzZUVudGVyLFxuICAgICAgICAgICAgICBvbkRheU1vdXNlTGVhdmU6IG9uRGF5TW91c2VMZWF2ZSxcbiAgICAgICAgICAgICAgb25EYXlDbGljazogb25EYXlDbGljayxcbiAgICAgICAgICAgICAgcmVuZGVyRGF5OiByZW5kZXJEYXksXG4gICAgICAgICAgICAgIHBocmFzZXM6IHBocmFzZXMsXG4gICAgICAgICAgICAgIG1vZGlmaWVyczogbW9kaWZpZXJzWygwLCBfdG9JU09EYXRlU3RyaW5nMlsnZGVmYXVsdCddKShkYXkpXVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSkpO1xuICAgICAgICB9KSkpKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlbmRlcjtcbiAgICB9KClcbiAgfV0pO1xuXG4gIHJldHVybiBDYWxlbmRhck1vbnRoO1xufShfcmVhY3QyWydkZWZhdWx0J10uQ29tcG9uZW50KTtcblxuZXhwb3J0c1snZGVmYXVsdCddID0gQ2FsZW5kYXJNb250aDtcblxuQ2FsZW5kYXJNb250aC5wcm9wVHlwZXMgPSBwcm9wVHlwZXM7XG5DYWxlbmRhck1vbnRoLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcblxuLyoqKi8gfSksXG5cbi8qKiovIDc6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIm1vbWVudFwiKTtcblxuLyoqKi8gfSksXG5cbi8qKiovIDg6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uL3NoYXBlcy9TY3JvbGxhYmxlT3JpZW50YXRpb25TaGFwZVwiKTtcblxuLyoqKi8gfSlcblxuLyoqKioqKi8gfSk7IiwibW9kdWxlLmV4cG9ydHMgPVxuLyoqKioqKi8gKGZ1bmN0aW9uKG1vZHVsZXMpIHsgLy8gd2VicGFja0Jvb3RzdHJhcFxuLyoqKioqKi8gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuLyoqKioqKi8gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuLyoqKioqKi8gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4vKioqKioqLyBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbi8qKioqKiovIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4vKioqKioqLyBcdFx0XHRpOiBtb2R1bGVJZCxcbi8qKioqKiovIFx0XHRcdGw6IGZhbHNlLFxuLyoqKioqKi8gXHRcdFx0ZXhwb3J0czoge31cbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbi8qKioqKiovIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuLyoqKioqKi8gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbi8qKioqKiovIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyBcdH1cbi8qKioqKiovXG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGlkZW50aXR5IGZ1bmN0aW9uIGZvciBjYWxsaW5nIGhhcm1vbnkgaW1wb3J0cyB3aXRoIHRoZSBjb3JyZWN0IGNvbnRleHRcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5pID0gZnVuY3Rpb24odmFsdWUpIHsgcmV0dXJuIHZhbHVlOyB9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuLyoqKioqKi8gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbi8qKioqKiovIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7XG4vKioqKioqLyBcdFx0XHRcdGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4vKioqKioqLyBcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG4vKioqKioqLyBcdFx0XHRcdGdldDogZ2V0dGVyXG4vKioqKioqLyBcdFx0XHR9KTtcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbi8qKioqKiovIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbi8qKioqKiovIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4vKioqKioqLyBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuLyoqKioqKi8gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbi8qKioqKiovIFx0XHRyZXR1cm4gZ2V0dGVyO1xuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8qKioqKiovIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gNTkpO1xuLyoqKioqKi8gfSlcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqKioqLyAoe1xuXG4vKioqLyAwOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJyZWFjdFwiKTtcblxuLyoqKi8gfSksXG5cbi8qKiovIDE6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImFpcmJuYi1wcm9wLXR5cGVzXCIpO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gMTA6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInJlYWN0LW1vbWVudC1wcm9wdHlwZXNcIik7XG5cbi8qKiovIH0pLFxuXG4vKioqLyAxNDpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwicmVhY3QtYWRkb25zLXNoYWxsb3ctY29tcGFyZVwiKTtcblxuLyoqKi8gfSksXG5cbi8qKiovIDI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uL2RlZmF1bHRQaHJhc2VzXCIpO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gMzpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwicHJvcC10eXBlc1wiKTtcblxuLyoqKi8gfSksXG5cbi8qKiovIDQ6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uL2NvbnN0YW50c1wiKTtcblxuLyoqKi8gfSksXG5cbi8qKiovIDQ2OlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi91dGlscy9nZXRQaHJhc2VcIik7XG5cbi8qKiovIH0pLFxuXG4vKioqLyA1OlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi91dGlscy9nZXRQaHJhc2VQcm9wVHlwZXNcIik7XG5cbi8qKiovIH0pLFxuXG4vKioqLyA1OTpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO2Rlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7aWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gICAgfVxuICB9cmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgICBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO2lmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO3JldHVybiBDb25zdHJ1Y3RvcjtcbiAgfTtcbn0oKTtcblxudmFyIF9yZWFjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG5cbnZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbnZhciBfcmVhY3RBZGRvbnNTaGFsbG93Q29tcGFyZSA9IF9fd2VicGFja19yZXF1aXJlX18oMTQpO1xuXG52YXIgX3JlYWN0QWRkb25zU2hhbGxvd0NvbXBhcmUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3RBZGRvbnNTaGFsbG93Q29tcGFyZSk7XG5cbnZhciBfcmVhY3RNb21lbnRQcm9wdHlwZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwKTtcblxudmFyIF9yZWFjdE1vbWVudFByb3B0eXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdE1vbWVudFByb3B0eXBlcyk7XG5cbnZhciBfYWlyYm5iUHJvcFR5cGVzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcblxudmFyIF9tb21lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcpO1xuXG52YXIgX21vbWVudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9tb21lbnQpO1xuXG52YXIgX2NsYXNzbmFtZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYpO1xuXG52YXIgX2NsYXNzbmFtZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NuYW1lcyk7XG5cbnZhciBfZGVmYXVsdFBocmFzZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXG52YXIgX2dldFBocmFzZVByb3BUeXBlcyA9IF9fd2VicGFja19yZXF1aXJlX18oNSk7XG5cbnZhciBfZ2V0UGhyYXNlUHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldFBocmFzZVByb3BUeXBlcyk7XG5cbnZhciBfZ2V0UGhyYXNlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0Nik7XG5cbnZhciBfZ2V0UGhyYXNlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldFBocmFzZSk7XG5cbnZhciBfY29uc3RhbnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTtcbn1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gIH1cbn1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkge1xuICBpZiAoIXNlbGYpIHtcbiAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gIH1yZXR1cm4gY2FsbCAmJiAoKHR5cGVvZiBjYWxsID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2YoY2FsbCkpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7XG59XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyAodHlwZW9mIHN1cGVyQ2xhc3MgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihzdXBlckNsYXNzKSkpO1xuICB9c3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTtpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG59XG5cbnZhciBwcm9wVHlwZXMgPSAoMCwgX2FpcmJuYlByb3BUeXBlcy5mb3JiaWRFeHRyYVByb3BzKSh7XG4gIGRheTogX3JlYWN0TW9tZW50UHJvcHR5cGVzMlsnZGVmYXVsdCddLm1vbWVudE9iaixcbiAgZGF5U2l6ZTogX2FpcmJuYlByb3BUeXBlcy5ub25OZWdhdGl2ZUludGVnZXIsXG4gIGlzT3V0c2lkZURheTogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5ib29sLFxuICBtb2RpZmllcnM6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uaW5zdGFuY2VPZihTZXQpLFxuICBpc0ZvY3VzZWQ6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uYm9vbCxcbiAgdGFiSW5kZXg6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10ub25lT2YoWzAsIC0xXSksXG4gIG9uRGF5Q2xpY2s6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uZnVuYyxcbiAgb25EYXlNb3VzZUVudGVyOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmZ1bmMsXG4gIG9uRGF5TW91c2VMZWF2ZTogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5mdW5jLFxuICByZW5kZXJEYXk6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uZnVuYyxcblxuICAvLyBpbnRlcm5hdGlvbmFsaXphdGlvblxuICBwaHJhc2VzOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLnNoYXBlKCgwLCBfZ2V0UGhyYXNlUHJvcFR5cGVzMlsnZGVmYXVsdCddKShfZGVmYXVsdFBocmFzZXMuQ2FsZW5kYXJEYXlQaHJhc2VzKSlcbn0pO1xuXG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBkYXk6ICgwLCBfbW9tZW50MlsnZGVmYXVsdCddKSgpLFxuICBkYXlTaXplOiBfY29uc3RhbnRzLkRBWV9TSVpFLFxuICBpc091dHNpZGVEYXk6IGZhbHNlLFxuICBtb2RpZmllcnM6IG5ldyBTZXQoKSxcbiAgaXNGb2N1c2VkOiBmYWxzZSxcbiAgdGFiSW5kZXg6IC0xLFxuICBvbkRheUNsaWNrOiBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gb25EYXlDbGljaygpIHt9XG5cbiAgICByZXR1cm4gb25EYXlDbGljaztcbiAgfSgpLFxuICBvbkRheU1vdXNlRW50ZXI6IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBvbkRheU1vdXNlRW50ZXIoKSB7fVxuXG4gICAgcmV0dXJuIG9uRGF5TW91c2VFbnRlcjtcbiAgfSgpLFxuICBvbkRheU1vdXNlTGVhdmU6IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBvbkRheU1vdXNlTGVhdmUoKSB7fVxuXG4gICAgcmV0dXJuIG9uRGF5TW91c2VMZWF2ZTtcbiAgfSgpLFxuXG4gIHJlbmRlckRheTogbnVsbCxcblxuICAvLyBpbnRlcm5hdGlvbmFsaXphdGlvblxuICBwaHJhc2VzOiBfZGVmYXVsdFBocmFzZXMuQ2FsZW5kYXJEYXlQaHJhc2VzXG59O1xuXG52YXIgQ2FsZW5kYXJEYXkgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoQ2FsZW5kYXJEYXksIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIENhbGVuZGFyRGF5KCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDYWxlbmRhckRheSk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKENhbGVuZGFyRGF5Ll9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoQ2FsZW5kYXJEYXkpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhDYWxlbmRhckRheSwgW3tcbiAgICBrZXk6ICdzaG91bGRDb21wb25lbnRVcGRhdGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBzaG91bGRDb21wb25lbnRVcGRhdGUobmV4dFByb3BzLCBuZXh0U3RhdGUpIHtcbiAgICAgICAgcmV0dXJuICgwLCBfcmVhY3RBZGRvbnNTaGFsbG93Q29tcGFyZTJbJ2RlZmF1bHQnXSkodGhpcywgbmV4dFByb3BzLCBuZXh0U3RhdGUpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc2hvdWxkQ29tcG9uZW50VXBkYXRlO1xuICAgIH0oKVxuICB9LCB7XG4gICAga2V5OiAnY29tcG9uZW50RGlkVXBkYXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgICAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICAgIGlzRm9jdXNlZCA9IF9wcm9wcy5pc0ZvY3VzZWQsXG4gICAgICAgICAgICB0YWJJbmRleCA9IF9wcm9wcy50YWJJbmRleDtcblxuICAgICAgICBpZiAodGFiSW5kZXggPT09IDApIHtcbiAgICAgICAgICBpZiAoaXNGb2N1c2VkIHx8IHRhYkluZGV4ICE9PSBwcmV2UHJvcHMudGFiSW5kZXgpIHtcbiAgICAgICAgICAgIHRoaXMuYnV0dG9uUmVmLmZvY3VzKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb21wb25lbnREaWRVcGRhdGU7XG4gICAgfSgpXG4gIH0sIHtcbiAgICBrZXk6ICdvbkRheUNsaWNrJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gb25EYXlDbGljayhkYXksIGUpIHtcbiAgICAgICAgdmFyIG9uRGF5Q2xpY2sgPSB0aGlzLnByb3BzLm9uRGF5Q2xpY2s7XG5cbiAgICAgICAgb25EYXlDbGljayhkYXksIGUpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gb25EYXlDbGljaztcbiAgICB9KClcbiAgfSwge1xuICAgIGtleTogJ29uRGF5TW91c2VFbnRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIG9uRGF5TW91c2VFbnRlcihkYXksIGUpIHtcbiAgICAgICAgdmFyIG9uRGF5TW91c2VFbnRlciA9IHRoaXMucHJvcHMub25EYXlNb3VzZUVudGVyO1xuXG4gICAgICAgIG9uRGF5TW91c2VFbnRlcihkYXksIGUpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gb25EYXlNb3VzZUVudGVyO1xuICAgIH0oKVxuICB9LCB7XG4gICAga2V5OiAnb25EYXlNb3VzZUxlYXZlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gb25EYXlNb3VzZUxlYXZlKGRheSwgZSkge1xuICAgICAgICB2YXIgb25EYXlNb3VzZUxlYXZlID0gdGhpcy5wcm9wcy5vbkRheU1vdXNlTGVhdmU7XG5cbiAgICAgICAgb25EYXlNb3VzZUxlYXZlKGRheSwgZSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBvbkRheU1vdXNlTGVhdmU7XG4gICAgfSgpXG4gIH0sIHtcbiAgICBrZXk6ICdyZW5kZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICAgIHZhciBfcHJvcHMyID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICAgIGRheSA9IF9wcm9wczIuZGF5LFxuICAgICAgICAgICAgZGF5U2l6ZSA9IF9wcm9wczIuZGF5U2l6ZSxcbiAgICAgICAgICAgIGlzT3V0c2lkZURheSA9IF9wcm9wczIuaXNPdXRzaWRlRGF5LFxuICAgICAgICAgICAgbW9kaWZpZXJzID0gX3Byb3BzMi5tb2RpZmllcnMsXG4gICAgICAgICAgICByZW5kZXJEYXkgPSBfcHJvcHMyLnJlbmRlckRheSxcbiAgICAgICAgICAgIHRhYkluZGV4ID0gX3Byb3BzMi50YWJJbmRleCxcbiAgICAgICAgICAgIF9wcm9wczIkcGhyYXNlcyA9IF9wcm9wczIucGhyYXNlcyxcbiAgICAgICAgICAgIGNob29zZUF2YWlsYWJsZURhdGUgPSBfcHJvcHMyJHBocmFzZXMuY2hvb3NlQXZhaWxhYmxlRGF0ZSxcbiAgICAgICAgICAgIGRhdGVJc1VuYXZhaWxhYmxlID0gX3Byb3BzMiRwaHJhc2VzLmRhdGVJc1VuYXZhaWxhYmxlO1xuXG4gICAgICAgIGlmICghZGF5KSByZXR1cm4gX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoJ3RkJywgbnVsbCk7XG5cbiAgICAgICAgdmFyIGNsYXNzTmFtZSA9ICgwLCBfY2xhc3NuYW1lczJbJ2RlZmF1bHQnXSkoJ0NhbGVuZGFyRGF5Jywge1xuICAgICAgICAgICdDYWxlbmRhckRheS0tb3V0c2lkZSc6IGlzT3V0c2lkZURheVxuICAgICAgICB9LCBBcnJheS5mcm9tKG1vZGlmaWVycywgZnVuY3Rpb24gKG1vZCkge1xuICAgICAgICAgIHJldHVybiAnQ2FsZW5kYXJEYXktLScgKyBTdHJpbmcobW9kKTtcbiAgICAgICAgfSkpO1xuXG4gICAgICAgIHZhciBmb3JtYXR0ZWREYXRlID0gU3RyaW5nKGRheS5mb3JtYXQoJ2RkZGQnKSkgKyAnLCAnICsgU3RyaW5nKGRheS5mb3JtYXQoJ0xMJykpO1xuXG4gICAgICAgIHZhciBhcmlhTGFiZWwgPSAoMCwgX2dldFBocmFzZTJbJ2RlZmF1bHQnXSkoY2hvb3NlQXZhaWxhYmxlRGF0ZSwge1xuICAgICAgICAgIGRhdGU6IGZvcm1hdHRlZERhdGVcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKF9jb25zdGFudHMuQkxPQ0tFRF9NT0RJRklFUiBpbiBtb2RpZmllcnMgJiYgbW9kaWZpZXJzW19jb25zdGFudHMuQkxPQ0tFRF9NT0RJRklFUl0oZGF5KSkge1xuICAgICAgICAgIGFyaWFMYWJlbCA9ICgwLCBfZ2V0UGhyYXNlMlsnZGVmYXVsdCddKShkYXRlSXNVbmF2YWlsYWJsZSwgeyBkYXRlOiBmb3JtYXR0ZWREYXRlIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGRheVNpemVTdHlsZXMgPSB7XG4gICAgICAgICAgd2lkdGg6IGRheVNpemUsXG4gICAgICAgICAgaGVpZ2h0OiBkYXlTaXplIC0gMVxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudCgndGQnLCB7IGNsYXNzTmFtZTogY2xhc3NOYW1lLCBzdHlsZTogZGF5U2l6ZVN0eWxlcyB9LCBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudCgnYnV0dG9uJywge1xuICAgICAgICAgIHR5cGU6ICdidXR0b24nLFxuICAgICAgICAgIHJlZjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZnVuY3Rpb24gcmVmKF9yZWYpIHtcbiAgICAgICAgICAgICAgX3RoaXMyLmJ1dHRvblJlZiA9IF9yZWY7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiByZWY7XG4gICAgICAgICAgfSgpLFxuICAgICAgICAgIGNsYXNzTmFtZTogJ0NhbGVuZGFyRGF5X19idXR0b24nLFxuICAgICAgICAgICdhcmlhLWxhYmVsJzogYXJpYUxhYmVsLFxuICAgICAgICAgIG9uTW91c2VFbnRlcjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZnVuY3Rpb24gb25Nb3VzZUVudGVyKGUpIHtcbiAgICAgICAgICAgICAgX3RoaXMyLm9uRGF5TW91c2VFbnRlcihkYXksIGUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gb25Nb3VzZUVudGVyO1xuICAgICAgICAgIH0oKSxcbiAgICAgICAgICBvbk1vdXNlTGVhdmU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGZ1bmN0aW9uIG9uTW91c2VMZWF2ZShlKSB7XG4gICAgICAgICAgICAgIF90aGlzMi5vbkRheU1vdXNlTGVhdmUoZGF5LCBlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIG9uTW91c2VMZWF2ZTtcbiAgICAgICAgICB9KCksXG4gICAgICAgICAgb25Nb3VzZVVwOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBmdW5jdGlvbiBvbk1vdXNlVXAoZSkge1xuICAgICAgICAgICAgICBlLmN1cnJlbnRUYXJnZXQuYmx1cigpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gb25Nb3VzZVVwO1xuICAgICAgICAgIH0oKSxcbiAgICAgICAgICBvbkNsaWNrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBmdW5jdGlvbiBvbkNsaWNrKGUpIHtcbiAgICAgICAgICAgICAgX3RoaXMyLm9uRGF5Q2xpY2soZGF5LCBlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIG9uQ2xpY2s7XG4gICAgICAgICAgfSgpLFxuICAgICAgICAgIHRhYkluZGV4OiB0YWJJbmRleFxuICAgICAgICB9LCByZW5kZXJEYXkgPyByZW5kZXJEYXkoZGF5KSA6IGRheS5mb3JtYXQoJ0QnKSkpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVuZGVyO1xuICAgIH0oKVxuICB9XSk7XG5cbiAgcmV0dXJuIENhbGVuZGFyRGF5O1xufShfcmVhY3QyWydkZWZhdWx0J10uQ29tcG9uZW50KTtcblxuZXhwb3J0c1snZGVmYXVsdCddID0gQ2FsZW5kYXJEYXk7XG5cbkNhbGVuZGFyRGF5LnByb3BUeXBlcyA9IHByb3BUeXBlcztcbkNhbGVuZGFyRGF5LmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcblxuLyoqKi8gfSksXG5cbi8qKiovIDY6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImNsYXNzbmFtZXNcIik7XG5cbi8qKiovIH0pLFxuXG4vKioqLyA3OlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJtb21lbnRcIik7XG5cbi8qKiovIH0pXG5cbi8qKioqKiovIH0pOyIsIid1c2Ugc3RyaWN0JztcblxudmFyIGRlZmluZSA9IHJlcXVpcmUoJ2RlZmluZS1wcm9wZXJ0aWVzJyk7XG5cbnZhciBpbXBsZW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4vaW1wbGVtZW50YXRpb24nKTtcbnZhciBnZXRQb2x5ZmlsbCA9IHJlcXVpcmUoJy4vcG9seWZpbGwnKTtcbnZhciBzaGltID0gcmVxdWlyZSgnLi9zaGltJyk7XG5cbnZhciBwb2x5ZmlsbCA9IGdldFBvbHlmaWxsKCk7XG5cbmRlZmluZShwb2x5ZmlsbCwge1xuXHRnZXRQb2x5ZmlsbDogZ2V0UG9seWZpbGwsXG5cdGltcGxlbWVudGF0aW9uOiBpbXBsZW1lbnRhdGlvbixcblx0c2hpbTogc2hpbVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gcG9seWZpbGw7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBoYXMgPSByZXF1aXJlKCdoYXMnKTtcbnZhciBSZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvMjAxOS9SZXF1aXJlT2JqZWN0Q29lcmNpYmxlJyk7XG52YXIgY2FsbEJvdW5kID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvaGVscGVycy9jYWxsQm91bmQnKTtcblxudmFyICRpc0VudW1lcmFibGUgPSBjYWxsQm91bmQoJ09iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB2YWx1ZXMoTykge1xuXHR2YXIgb2JqID0gUmVxdWlyZU9iamVjdENvZXJjaWJsZShPKTtcblx0dmFyIHZhbHMgPSBbXTtcblx0Zm9yICh2YXIga2V5IGluIG9iaikge1xuXHRcdGlmIChoYXMob2JqLCBrZXkpICYmICRpc0VudW1lcmFibGUob2JqLCBrZXkpKSB7XG5cdFx0XHR2YWxzLnB1c2gob2JqW2tleV0pO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gdmFscztcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpbXBsZW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4vaW1wbGVtZW50YXRpb24nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZXRQb2x5ZmlsbCgpIHtcblx0cmV0dXJuIHR5cGVvZiBPYmplY3QudmFsdWVzID09PSAnZnVuY3Rpb24nID8gT2JqZWN0LnZhbHVlcyA6IGltcGxlbWVudGF0aW9uO1xufTtcbiIsIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzWydkZWZhdWx0J10gPSBpc05leHREYXk7XG5cbnZhciBfbW9tZW50ID0gcmVxdWlyZSgnbW9tZW50Jyk7XG5cbnZhciBfbW9tZW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX21vbWVudCk7XG5cbnZhciBfaXNTYW1lRGF5ID0gcmVxdWlyZSgnLi9pc1NhbWVEYXknKTtcblxudmFyIF9pc1NhbWVEYXkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaXNTYW1lRGF5KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG5mdW5jdGlvbiBpc05leHREYXkoYSwgYikge1xuICBpZiAoIV9tb21lbnQyWydkZWZhdWx0J10uaXNNb21lbnQoYSkgfHwgIV9tb21lbnQyWydkZWZhdWx0J10uaXNNb21lbnQoYikpIHJldHVybiBmYWxzZTtcbiAgdmFyIG5leHREYXkgPSAoMCwgX21vbWVudDJbJ2RlZmF1bHQnXSkoYSkuYWRkKDEsICdkYXknKTtcbiAgcmV0dXJuICgwLCBfaXNTYW1lRGF5MlsnZGVmYXVsdCddKShuZXh0RGF5LCBiKTtcbn0iLCJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX3Byb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxudmFyIF9yZWFjdE1vbWVudFByb3B0eXBlcyA9IHJlcXVpcmUoJ3JlYWN0LW1vbWVudC1wcm9wdHlwZXMnKTtcblxudmFyIF9yZWFjdE1vbWVudFByb3B0eXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdE1vbWVudFByb3B0eXBlcyk7XG5cbnZhciBfYWlyYm5iUHJvcFR5cGVzID0gcmVxdWlyZSgnYWlyYm5iLXByb3AtdHlwZXMnKTtcblxudmFyIF9kZWZhdWx0UGhyYXNlcyA9IHJlcXVpcmUoJy4uL2RlZmF1bHRQaHJhc2VzJyk7XG5cbnZhciBfZ2V0UGhyYXNlUHJvcFR5cGVzID0gcmVxdWlyZSgnLi4vdXRpbHMvZ2V0UGhyYXNlUHJvcFR5cGVzJyk7XG5cbnZhciBfZ2V0UGhyYXNlUHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldFBocmFzZVByb3BUeXBlcyk7XG5cbnZhciBfT3JpZW50YXRpb25TaGFwZSA9IHJlcXVpcmUoJy4uL3NoYXBlcy9PcmllbnRhdGlvblNoYXBlJyk7XG5cbnZhciBfT3JpZW50YXRpb25TaGFwZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9PcmllbnRhdGlvblNoYXBlKTtcblxudmFyIF9BbmNob3JEaXJlY3Rpb25TaGFwZSA9IHJlcXVpcmUoJy4uL3NoYXBlcy9BbmNob3JEaXJlY3Rpb25TaGFwZScpO1xuXG52YXIgX0FuY2hvckRpcmVjdGlvblNoYXBlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0FuY2hvckRpcmVjdGlvblNoYXBlKTtcblxudmFyIF9EYXlPZldlZWtTaGFwZSA9IHJlcXVpcmUoJy4uL3NoYXBlcy9EYXlPZldlZWtTaGFwZScpO1xuXG52YXIgX0RheU9mV2Vla1NoYXBlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0RheU9mV2Vla1NoYXBlKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG5leHBvcnRzWydkZWZhdWx0J10gPSB7XG4gIC8vIHJlcXVpcmVkIHByb3BzIGZvciBhIGZ1bmN0aW9uYWwgaW50ZXJhY3RpdmUgU2luZ2xlRGF0ZVBpY2tlclxuICBkYXRlOiBfcmVhY3RNb21lbnRQcm9wdHlwZXMyWydkZWZhdWx0J10ubW9tZW50T2JqLFxuICBvbkRhdGVDaGFuZ2U6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uZnVuYy5pc1JlcXVpcmVkLFxuXG4gIGZvY3VzZWQ6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uYm9vbCxcbiAgb25Gb2N1c0NoYW5nZTogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5mdW5jLmlzUmVxdWlyZWQsXG5cbiAgLy8gaW5wdXQgcmVsYXRlZCBwcm9wc1xuICBpZDogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgcGxhY2Vob2xkZXI6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uc3RyaW5nLFxuICBkaXNhYmxlZDogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5ib29sLFxuICByZXF1aXJlZDogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5ib29sLFxuICByZWFkT25seTogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5ib29sLFxuICBzY3JlZW5SZWFkZXJJbnB1dE1lc3NhZ2U6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uc3RyaW5nLFxuICBzaG93Q2xlYXJEYXRlOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmJvb2wsXG4gIGN1c3RvbUNsb3NlSWNvbjogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5ub2RlLFxuICBzaG93RGVmYXVsdElucHV0SWNvbjogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5ib29sLFxuICBjdXN0b21JbnB1dEljb246IF9wcm9wVHlwZXMyWydkZWZhdWx0J10ubm9kZSxcblxuICAvLyBjYWxlbmRhciBwcmVzZW50YXRpb24gYW5kIGludGVyYWN0aW9uIHJlbGF0ZWQgcHJvcHNcbiAgcmVuZGVyTW9udGg6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uZnVuYyxcbiAgb3JpZW50YXRpb246IF9PcmllbnRhdGlvblNoYXBlMlsnZGVmYXVsdCddLFxuICBhbmNob3JEaXJlY3Rpb246IF9BbmNob3JEaXJlY3Rpb25TaGFwZTJbJ2RlZmF1bHQnXSxcbiAgaG9yaXpvbnRhbE1hcmdpbjogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5udW1iZXIsXG4gIHdpdGhQb3J0YWw6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uYm9vbCxcbiAgd2l0aEZ1bGxTY3JlZW5Qb3J0YWw6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uYm9vbCxcbiAgaW5pdGlhbFZpc2libGVNb250aDogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5mdW5jLFxuICBmaXJzdERheU9mV2VlazogX0RheU9mV2Vla1NoYXBlMlsnZGVmYXVsdCddLFxuICBudW1iZXJPZk1vbnRoczogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5udW1iZXIsXG4gIGtlZXBPcGVuT25EYXRlU2VsZWN0OiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmJvb2wsXG4gIHJlb3BlblBpY2tlck9uQ2xlYXJEYXRlOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmJvb2wsXG4gIHJlbmRlckNhbGVuZGFySW5mbzogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5mdW5jLFxuICBoaWRlS2V5Ym9hcmRTaG9ydGN1dHNQYW5lbDogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5ib29sLFxuICBkYXlTaXplOiBfYWlyYm5iUHJvcFR5cGVzLm5vbk5lZ2F0aXZlSW50ZWdlcixcbiAgaXNSVEw6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uYm9vbCxcblxuICAvLyBuYXZpZ2F0aW9uIHJlbGF0ZWQgcHJvcHNcbiAgbmF2UHJldjogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5ub2RlLFxuICBuYXZOZXh0OiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLm5vZGUsXG5cbiAgb25QcmV2TW9udGhDbGljazogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5mdW5jLFxuICBvbk5leHRNb250aENsaWNrOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmZ1bmMsXG4gIG9uQ2xvc2U6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uZnVuYyxcblxuICAvLyBkYXkgcHJlc2VudGF0aW9uIGFuZCBpbnRlcmFjdGlvbiByZWxhdGVkIHByb3BzXG4gIHJlbmRlckRheTogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5mdW5jLFxuICBlbmFibGVPdXRzaWRlRGF5czogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5ib29sLFxuICBpc0RheUJsb2NrZWQ6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uZnVuYyxcbiAgaXNPdXRzaWRlUmFuZ2U6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uZnVuYyxcbiAgaXNEYXlIaWdobGlnaHRlZDogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5mdW5jLFxuXG4gIC8vIGludGVybmF0aW9uYWxpemF0aW9uIHByb3BzXG4gIGRpc3BsYXlGb3JtYXQ6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10ub25lT2ZUeXBlKFtfcHJvcFR5cGVzMlsnZGVmYXVsdCddLnN0cmluZywgX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5mdW5jXSksXG4gIG1vbnRoRm9ybWF0OiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLnN0cmluZyxcbiAgcGhyYXNlczogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5zaGFwZSgoMCwgX2dldFBocmFzZVByb3BUeXBlczJbJ2RlZmF1bHQnXSkoX2RlZmF1bHRQaHJhc2VzLlNpbmdsZURhdGVQaWNrZXJQaHJhc2VzKSlcbn07IiwibW9kdWxlLmV4cG9ydHMgPVxuLyoqKioqKi8gKGZ1bmN0aW9uKG1vZHVsZXMpIHsgLy8gd2VicGFja0Jvb3RzdHJhcFxuLyoqKioqKi8gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuLyoqKioqKi8gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuLyoqKioqKi8gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4vKioqKioqLyBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbi8qKioqKiovIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4vKioqKioqLyBcdFx0XHRpOiBtb2R1bGVJZCxcbi8qKioqKiovIFx0XHRcdGw6IGZhbHNlLFxuLyoqKioqKi8gXHRcdFx0ZXhwb3J0czoge31cbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbi8qKioqKiovIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuLyoqKioqKi8gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbi8qKioqKiovIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyBcdH1cbi8qKioqKiovXG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGlkZW50aXR5IGZ1bmN0aW9uIGZvciBjYWxsaW5nIGhhcm1vbnkgaW1wb3J0cyB3aXRoIHRoZSBjb3JyZWN0IGNvbnRleHRcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5pID0gZnVuY3Rpb24odmFsdWUpIHsgcmV0dXJuIHZhbHVlOyB9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuLyoqKioqKi8gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbi8qKioqKiovIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7XG4vKioqKioqLyBcdFx0XHRcdGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4vKioqKioqLyBcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG4vKioqKioqLyBcdFx0XHRcdGdldDogZ2V0dGVyXG4vKioqKioqLyBcdFx0XHR9KTtcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbi8qKioqKiovIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbi8qKioqKiovIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4vKioqKioqLyBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuLyoqKioqKi8gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbi8qKioqKiovIFx0XHRyZXR1cm4gZ2V0dGVyO1xuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8qKioqKiovIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gNzApO1xuLyoqKioqKi8gfSlcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqKioqLyAoW1xuLyogMCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJyZWFjdFwiKTtcblxuLyoqKi8gfSksXG4vKiAxICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImFpcmJuYi1wcm9wLXR5cGVzXCIpO1xuXG4vKioqLyB9KSxcbi8qIDIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vZGVmYXVsdFBocmFzZXNcIik7XG5cbi8qKiovIH0pLFxuLyogMyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpO1xuXG4vKioqLyB9KSxcbi8qIDQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vY29uc3RhbnRzXCIpO1xuXG4vKioqLyB9KSxcbi8qIDUgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vdXRpbHMvZ2V0UGhyYXNlUHJvcFR5cGVzXCIpO1xuXG4vKioqLyB9KSxcbi8qIDYgKi8sXG4vKiA3ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIm1vbWVudFwiKTtcblxuLyoqKi8gfSksXG4vKiA4ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uL3NoYXBlcy9TY3JvbGxhYmxlT3JpZW50YXRpb25TaGFwZVwiKTtcblxuLyoqKi8gfSksXG4vKiA5ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImlzLXRvdWNoLWRldmljZVwiKTtcblxuLyoqKi8gfSksXG4vKiAxMCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJyZWFjdC1tb21lbnQtcHJvcHR5cGVzXCIpO1xuXG4vKioqLyB9KSxcbi8qIDExICovLFxuLyogMTIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vc2hhcGVzL0RheU9mV2Vla1NoYXBlXCIpO1xuXG4vKioqLyB9KSxcbi8qIDEzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uL3V0aWxzL3RvSVNPRGF0ZVN0cmluZ1wiKTtcblxuLyoqKi8gfSksXG4vKiAxNCAqLyxcbi8qIDE1ICovLFxuLyogMTYgKi8sXG4vKiAxNyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi91dGlscy9pc0FmdGVyRGF5XCIpO1xuXG4vKioqLyB9KSxcbi8qIDE4ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uL3V0aWxzL2lzRGF5VmlzaWJsZVwiKTtcblxuLyoqKi8gfSksXG4vKiAxOSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi91dGlscy9pc1NhbWVEYXlcIik7XG5cbi8qKiovIH0pLFxuLyogMjAgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vdXRpbHMvdG9JU09Nb250aFN0cmluZ1wiKTtcblxuLyoqKi8gfSksXG4vKiAyMSAqLyxcbi8qIDIyICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIm9iamVjdC5hc3NpZ25cIik7XG5cbi8qKiovIH0pLFxuLyogMjMgKi8sXG4vKiAyNCAqLyxcbi8qIDI1ICovLFxuLyogMjYgKi8sXG4vKiAyNyAqLyxcbi8qIDI4ICovLFxuLyogMjkgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vdXRpbHMvZ2V0VmlzaWJsZURheXNcIik7XG5cbi8qKiovIH0pLFxuLyogMzAgKi8sXG4vKiAzMSAqLyxcbi8qIDMyICovLFxuLyogMzMgKi8sXG4vKiAzNCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuL0RheVBpY2tlclwiKTtcblxuLyoqKi8gfSksXG4vKiAzNSAqLyxcbi8qIDM2ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIm9iamVjdC52YWx1ZXNcIik7XG5cbi8qKiovIH0pLFxuLyogMzcgKi8sXG4vKiAzOCAqLyxcbi8qIDM5ICovLFxuLyogNDAgKi8sXG4vKiA0MSAqLyxcbi8qIDQyICovLFxuLyogNDMgKi8sXG4vKiA0NCAqLyxcbi8qIDQ1ICovLFxuLyogNDYgKi8sXG4vKiA0NyAqLyxcbi8qIDQ4ICovLFxuLyogNDkgKi8sXG4vKiA1MCAqLyxcbi8qIDUxICovLFxuLyogNTIgKi8sXG4vKiA1MyAqLyxcbi8qIDU0ICovLFxuLyogNTUgKi8sXG4vKiA1NiAqLyxcbi8qIDU3ICovLFxuLyogNTggKi8sXG4vKiA1OSAqLyxcbi8qIDYwICovLFxuLyogNjEgKi8sXG4vKiA2MiAqLyxcbi8qIDYzICovLFxuLyogNjQgKi8sXG4vKiA2NSAqLyxcbi8qIDY2ICovLFxuLyogNjcgKi8sXG4vKiA2OCAqLyxcbi8qIDY5ICovLFxuLyogNzAgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO2Rlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7aWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gICAgfVxuICB9cmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgICBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO2lmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO3JldHVybiBDb25zdHJ1Y3RvcjtcbiAgfTtcbn0oKTtcblxudmFyIF9vYmplY3QzID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMik7XG5cbnZhciBfb2JqZWN0NCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX29iamVjdDMpO1xuXG52YXIgX3JlYWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcHJvcFR5cGVzID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxudmFyIF9yZWFjdE1vbWVudFByb3B0eXBlcyA9IF9fd2VicGFja19yZXF1aXJlX18oMTApO1xuXG52YXIgX3JlYWN0TW9tZW50UHJvcHR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0TW9tZW50UHJvcHR5cGVzKTtcblxudmFyIF9haXJibmJQcm9wVHlwZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuXG52YXIgX21vbWVudCA9IF9fd2VicGFja19yZXF1aXJlX18oNyk7XG5cbnZhciBfbW9tZW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX21vbWVudCk7XG5cbnZhciBfb2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNik7XG5cbnZhciBfb2JqZWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX29iamVjdCk7XG5cbnZhciBfaXNUb3VjaERldmljZSA9IF9fd2VicGFja19yZXF1aXJlX18oOSk7XG5cbnZhciBfaXNUb3VjaERldmljZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pc1RvdWNoRGV2aWNlKTtcblxudmFyIF9kZWZhdWx0UGhyYXNlcyA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG5cbnZhciBfZ2V0UGhyYXNlUHJvcFR5cGVzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KTtcblxudmFyIF9nZXRQaHJhc2VQcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0UGhyYXNlUHJvcFR5cGVzKTtcblxudmFyIF9pc1NhbWVEYXkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE5KTtcblxudmFyIF9pc1NhbWVEYXkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaXNTYW1lRGF5KTtcblxudmFyIF9pc0FmdGVyRGF5ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNyk7XG5cbnZhciBfaXNBZnRlckRheTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pc0FmdGVyRGF5KTtcblxudmFyIF9nZXRWaXNpYmxlRGF5cyA9IF9fd2VicGFja19yZXF1aXJlX18oMjkpO1xuXG52YXIgX2dldFZpc2libGVEYXlzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldFZpc2libGVEYXlzKTtcblxudmFyIF9pc0RheVZpc2libGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE4KTtcblxudmFyIF9pc0RheVZpc2libGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaXNEYXlWaXNpYmxlKTtcblxudmFyIF90b0lTT0RhdGVTdHJpbmcgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEzKTtcblxudmFyIF90b0lTT0RhdGVTdHJpbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdG9JU09EYXRlU3RyaW5nKTtcblxudmFyIF90b0lTT01vbnRoU3RyaW5nID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMCk7XG5cbnZhciBfdG9JU09Nb250aFN0cmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90b0lTT01vbnRoU3RyaW5nKTtcblxudmFyIF9TY3JvbGxhYmxlT3JpZW50YXRpb25TaGFwZSA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XG5cbnZhciBfU2Nyb2xsYWJsZU9yaWVudGF0aW9uU2hhcGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfU2Nyb2xsYWJsZU9yaWVudGF0aW9uU2hhcGUpO1xuXG52YXIgX0RheU9mV2Vla1NoYXBlID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMik7XG5cbnZhciBfRGF5T2ZXZWVrU2hhcGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfRGF5T2ZXZWVrU2hhcGUpO1xuXG52YXIgX2NvbnN0YW50cyA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XG5cbnZhciBfRGF5UGlja2VyID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNCk7XG5cbnZhciBfRGF5UGlja2VyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0RheVBpY2tlcik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7XG4gIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07XG59XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pO1xuICB9IGVsc2Uge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1yZXR1cm4gb2JqO1xufVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7XG4gIGlmICghc2VsZikge1xuICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgfXJldHVybiBjYWxsICYmICgodHlwZW9mIGNhbGwgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihjYWxsKSkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjtcbn1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArICh0eXBlb2Ygc3VwZXJDbGFzcyA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKHN1cGVyQ2xhc3MpKSk7XG4gIH1zdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pO2lmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcbn1cblxudmFyIHByb3BUeXBlcyA9ICgwLCBfYWlyYm5iUHJvcFR5cGVzLmZvcmJpZEV4dHJhUHJvcHMpKHtcbiAgZGF0ZTogX3JlYWN0TW9tZW50UHJvcHR5cGVzMlsnZGVmYXVsdCddLm1vbWVudE9iaixcbiAgb25EYXRlQ2hhbmdlOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmZ1bmMsXG5cbiAgZm9jdXNlZDogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5ib29sLFxuICBvbkZvY3VzQ2hhbmdlOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmZ1bmMsXG4gIG9uQ2xvc2U6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uZnVuYyxcblxuICBrZWVwT3Blbk9uRGF0ZVNlbGVjdDogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5ib29sLFxuICBtaW5pbXVtTmlnaHRzOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLm51bWJlcixcbiAgaXNPdXRzaWRlUmFuZ2U6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uZnVuYyxcbiAgaXNEYXlCbG9ja2VkOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmZ1bmMsXG4gIGlzRGF5SGlnaGxpZ2h0ZWQ6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uZnVuYyxcblxuICAvLyBEYXlQaWNrZXIgcHJvcHNcbiAgcmVuZGVyTW9udGg6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uZnVuYyxcbiAgZW5hYmxlT3V0c2lkZURheXM6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uYm9vbCxcbiAgbnVtYmVyT2ZNb250aHM6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10ubnVtYmVyLFxuICBvcmllbnRhdGlvbjogX1Njcm9sbGFibGVPcmllbnRhdGlvblNoYXBlMlsnZGVmYXVsdCddLFxuICB3aXRoUG9ydGFsOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmJvb2wsXG4gIGluaXRpYWxWaXNpYmxlTW9udGg6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uZnVuYyxcbiAgZmlyc3REYXlPZldlZWs6IF9EYXlPZldlZWtTaGFwZTJbJ2RlZmF1bHQnXSxcbiAgaGlkZUtleWJvYXJkU2hvcnRjdXRzUGFuZWw6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uYm9vbCxcbiAgZGF5U2l6ZTogX2FpcmJuYlByb3BUeXBlcy5ub25OZWdhdGl2ZUludGVnZXIsXG5cbiAgbmF2UHJldjogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5ub2RlLFxuICBuYXZOZXh0OiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLm5vZGUsXG5cbiAgb25QcmV2TW9udGhDbGljazogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5mdW5jLFxuICBvbk5leHRNb250aENsaWNrOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmZ1bmMsXG4gIG9uT3V0c2lkZUNsaWNrOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmZ1bmMsXG4gIHJlbmRlckRheTogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5mdW5jLFxuICByZW5kZXJDYWxlbmRhckluZm86IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uZnVuYyxcblxuICAvLyBhY2Nlc3NpYmlsaXR5XG4gIG9uQmx1cjogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5mdW5jLFxuICBpc0ZvY3VzZWQ6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uYm9vbCxcbiAgc2hvd0tleWJvYXJkU2hvcnRjdXRzOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmJvb2wsXG5cbiAgLy8gaTE4blxuICBtb250aEZvcm1hdDogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5zdHJpbmcsXG4gIHBocmFzZXM6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uc2hhcGUoKDAsIF9nZXRQaHJhc2VQcm9wVHlwZXMyWydkZWZhdWx0J10pKF9kZWZhdWx0UGhyYXNlcy5EYXlQaWNrZXJQaHJhc2VzKSksXG5cbiAgaXNSVEw6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uYm9vbFxufSk7XG5cbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIGRhdGU6IHVuZGVmaW5lZCwgLy8gVE9ETzogdXNlIG51bGxcbiAgb25EYXRlQ2hhbmdlOiBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gb25EYXRlQ2hhbmdlKCkge31cblxuICAgIHJldHVybiBvbkRhdGVDaGFuZ2U7XG4gIH0oKSxcblxuICBmb2N1c2VkOiBmYWxzZSxcbiAgb25Gb2N1c0NoYW5nZTogZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIG9uRm9jdXNDaGFuZ2UoKSB7fVxuXG4gICAgcmV0dXJuIG9uRm9jdXNDaGFuZ2U7XG4gIH0oKSxcbiAgb25DbG9zZTogZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIG9uQ2xvc2UoKSB7fVxuXG4gICAgcmV0dXJuIG9uQ2xvc2U7XG4gIH0oKSxcblxuICBrZWVwT3Blbk9uRGF0ZVNlbGVjdDogZmFsc2UsXG4gIG1pbmltdW1OaWdodHM6IDEsXG4gIGlzT3V0c2lkZVJhbmdlOiBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gaXNPdXRzaWRlUmFuZ2UoKSB7fVxuXG4gICAgcmV0dXJuIGlzT3V0c2lkZVJhbmdlO1xuICB9KCksXG4gIGlzRGF5QmxvY2tlZDogZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIGlzRGF5QmxvY2tlZCgpIHt9XG5cbiAgICByZXR1cm4gaXNEYXlCbG9ja2VkO1xuICB9KCksXG4gIGlzRGF5SGlnaGxpZ2h0ZWQ6IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBpc0RheUhpZ2hsaWdodGVkKCkge31cblxuICAgIHJldHVybiBpc0RheUhpZ2hsaWdodGVkO1xuICB9KCksXG5cbiAgLy8gRGF5UGlja2VyIHByb3BzXG4gIHJlbmRlck1vbnRoOiBudWxsLFxuICBlbmFibGVPdXRzaWRlRGF5czogZmFsc2UsXG4gIG51bWJlck9mTW9udGhzOiAxLFxuICBvcmllbnRhdGlvbjogX2NvbnN0YW50cy5IT1JJWk9OVEFMX09SSUVOVEFUSU9OLFxuICB3aXRoUG9ydGFsOiBmYWxzZSxcbiAgaGlkZUtleWJvYXJkU2hvcnRjdXRzUGFuZWw6IGZhbHNlLFxuICBpbml0aWFsVmlzaWJsZU1vbnRoOiBudWxsLFxuICBmaXJzdERheU9mV2VlazogbnVsbCxcbiAgZGF5U2l6ZTogX2NvbnN0YW50cy5EQVlfU0laRSxcblxuICBuYXZQcmV2OiBudWxsLFxuICBuYXZOZXh0OiBudWxsLFxuXG4gIG9uUHJldk1vbnRoQ2xpY2s6IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBvblByZXZNb250aENsaWNrKCkge31cblxuICAgIHJldHVybiBvblByZXZNb250aENsaWNrO1xuICB9KCksXG4gIG9uTmV4dE1vbnRoQ2xpY2s6IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBvbk5leHRNb250aENsaWNrKCkge31cblxuICAgIHJldHVybiBvbk5leHRNb250aENsaWNrO1xuICB9KCksXG4gIG9uT3V0c2lkZUNsaWNrOiBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gb25PdXRzaWRlQ2xpY2soKSB7fVxuXG4gICAgcmV0dXJuIG9uT3V0c2lkZUNsaWNrO1xuICB9KCksXG5cbiAgcmVuZGVyRGF5OiBudWxsLFxuICByZW5kZXJDYWxlbmRhckluZm86IG51bGwsXG5cbiAgLy8gYWNjZXNzaWJpbGl0eVxuICBvbkJsdXI6IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBvbkJsdXIoKSB7fVxuXG4gICAgcmV0dXJuIG9uQmx1cjtcbiAgfSgpLFxuXG4gIGlzRm9jdXNlZDogZmFsc2UsXG4gIHNob3dLZXlib2FyZFNob3J0Y3V0czogZmFsc2UsXG5cbiAgLy8gaTE4blxuICBtb250aEZvcm1hdDogJ01NTU0gWVlZWScsXG4gIHBocmFzZXM6IF9kZWZhdWx0UGhyYXNlcy5EYXlQaWNrZXJQaHJhc2VzLFxuXG4gIGlzUlRMOiBmYWxzZVxufTtcblxudmFyIERheVBpY2tlclNpbmdsZURhdGVDb250cm9sbGVyID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKERheVBpY2tlclNpbmdsZURhdGVDb250cm9sbGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBEYXlQaWNrZXJTaW5nbGVEYXRlQ29udHJvbGxlcihwcm9wcykge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBEYXlQaWNrZXJTaW5nbGVEYXRlQ29udHJvbGxlcik7XG5cbiAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoRGF5UGlja2VyU2luZ2xlRGF0ZUNvbnRyb2xsZXIuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihEYXlQaWNrZXJTaW5nbGVEYXRlQ29udHJvbGxlcikpLmNhbGwodGhpcywgcHJvcHMpKTtcblxuICAgIF90aGlzLmlzVG91Y2hEZXZpY2UgPSBmYWxzZTtcbiAgICBfdGhpcy50b2RheSA9ICgwLCBfbW9tZW50MlsnZGVmYXVsdCddKSgpO1xuXG4gICAgX3RoaXMubW9kaWZpZXJzID0ge1xuICAgICAgdG9kYXk6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZnVuY3Rpb24gdG9kYXkoZGF5KSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzLmlzVG9kYXkoZGF5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0b2RheTtcbiAgICAgIH0oKSxcbiAgICAgIGJsb2NrZWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZnVuY3Rpb24gYmxvY2tlZChkYXkpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMuaXNCbG9ja2VkKGRheSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYmxvY2tlZDtcbiAgICAgIH0oKSxcbiAgICAgICdibG9ja2VkLWNhbGVuZGFyJzogZnVuY3Rpb24gKCkge1xuICAgICAgICBmdW5jdGlvbiBibG9ja2VkQ2FsZW5kYXIoZGF5KSB7XG4gICAgICAgICAgcmV0dXJuIHByb3BzLmlzRGF5QmxvY2tlZChkYXkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGJsb2NrZWRDYWxlbmRhcjtcbiAgICAgIH0oKSxcbiAgICAgICdibG9ja2VkLW91dC1vZi1yYW5nZSc6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZnVuY3Rpb24gYmxvY2tlZE91dE9mUmFuZ2UoZGF5KSB7XG4gICAgICAgICAgcmV0dXJuIHByb3BzLmlzT3V0c2lkZVJhbmdlKGRheSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYmxvY2tlZE91dE9mUmFuZ2U7XG4gICAgICB9KCksXG4gICAgICAnaGlnaGxpZ2h0ZWQtY2FsZW5kYXInOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZ1bmN0aW9uIGhpZ2hsaWdodGVkQ2FsZW5kYXIoZGF5KSB7XG4gICAgICAgICAgcmV0dXJuIHByb3BzLmlzRGF5SGlnaGxpZ2h0ZWQoZGF5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBoaWdobGlnaHRlZENhbGVuZGFyO1xuICAgICAgfSgpLFxuICAgICAgdmFsaWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZnVuY3Rpb24gdmFsaWQoZGF5KSB7XG4gICAgICAgICAgcmV0dXJuICFfdGhpcy5pc0Jsb2NrZWQoZGF5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB2YWxpZDtcbiAgICAgIH0oKSxcbiAgICAgIGhvdmVyZWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZnVuY3Rpb24gaG92ZXJlZChkYXkpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMuaXNIb3ZlcmVkKGRheSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gaG92ZXJlZDtcbiAgICAgIH0oKSxcbiAgICAgIHNlbGVjdGVkOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZ1bmN0aW9uIHNlbGVjdGVkKGRheSkge1xuICAgICAgICAgIHJldHVybiBfdGhpcy5pc1NlbGVjdGVkKGRheSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gc2VsZWN0ZWQ7XG4gICAgICB9KClcbiAgICB9O1xuXG4gICAgdmFyIF90aGlzJGdldFN0YXRlRm9yTmV3TSA9IF90aGlzLmdldFN0YXRlRm9yTmV3TW9udGgocHJvcHMpLFxuICAgICAgICBjdXJyZW50TW9udGggPSBfdGhpcyRnZXRTdGF0ZUZvck5ld00uY3VycmVudE1vbnRoLFxuICAgICAgICB2aXNpYmxlRGF5cyA9IF90aGlzJGdldFN0YXRlRm9yTmV3TS52aXNpYmxlRGF5cztcblxuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgaG92ZXJEYXRlOiBudWxsLFxuICAgICAgY3VycmVudE1vbnRoOiBjdXJyZW50TW9udGgsXG4gICAgICB2aXNpYmxlRGF5czogdmlzaWJsZURheXNcbiAgICB9O1xuXG4gICAgX3RoaXMub25EYXlNb3VzZUVudGVyID0gX3RoaXMub25EYXlNb3VzZUVudGVyLmJpbmQoX3RoaXMpO1xuICAgIF90aGlzLm9uRGF5TW91c2VMZWF2ZSA9IF90aGlzLm9uRGF5TW91c2VMZWF2ZS5iaW5kKF90aGlzKTtcbiAgICBfdGhpcy5vbkRheUNsaWNrID0gX3RoaXMub25EYXlDbGljay5iaW5kKF90aGlzKTtcblxuICAgIF90aGlzLm9uUHJldk1vbnRoQ2xpY2sgPSBfdGhpcy5vblByZXZNb250aENsaWNrLmJpbmQoX3RoaXMpO1xuICAgIF90aGlzLm9uTmV4dE1vbnRoQ2xpY2sgPSBfdGhpcy5vbk5leHRNb250aENsaWNrLmJpbmQoX3RoaXMpO1xuXG4gICAgX3RoaXMuZ2V0Rmlyc3RGb2N1c2FibGVEYXkgPSBfdGhpcy5nZXRGaXJzdEZvY3VzYWJsZURheS5iaW5kKF90aGlzKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoRGF5UGlja2VyU2luZ2xlRGF0ZUNvbnRyb2xsZXIsIFt7XG4gICAga2V5OiAnY29tcG9uZW50RGlkTW91bnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgICAgdGhpcy5pc1RvdWNoRGV2aWNlID0gKDAsIF9pc1RvdWNoRGV2aWNlMlsnZGVmYXVsdCddKSgpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29tcG9uZW50RGlkTW91bnQ7XG4gICAgfSgpXG4gIH0sIHtcbiAgICBrZXk6ICdjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgICAgdmFyIGRhdGUgPSBuZXh0UHJvcHMuZGF0ZSxcbiAgICAgICAgICAgIGZvY3VzZWQgPSBuZXh0UHJvcHMuZm9jdXNlZCxcbiAgICAgICAgICAgIGlzT3V0c2lkZVJhbmdlID0gbmV4dFByb3BzLmlzT3V0c2lkZVJhbmdlLFxuICAgICAgICAgICAgaXNEYXlCbG9ja2VkID0gbmV4dFByb3BzLmlzRGF5QmxvY2tlZCxcbiAgICAgICAgICAgIGlzRGF5SGlnaGxpZ2h0ZWQgPSBuZXh0UHJvcHMuaXNEYXlIaWdobGlnaHRlZCxcbiAgICAgICAgICAgIGluaXRpYWxWaXNpYmxlTW9udGggPSBuZXh0UHJvcHMuaW5pdGlhbFZpc2libGVNb250aCxcbiAgICAgICAgICAgIG51bWJlck9mTW9udGhzID0gbmV4dFByb3BzLm51bWJlck9mTW9udGhzLFxuICAgICAgICAgICAgZW5hYmxlT3V0c2lkZURheXMgPSBuZXh0UHJvcHMuZW5hYmxlT3V0c2lkZURheXM7XG4gICAgICAgIHZhciB2aXNpYmxlRGF5cyA9IHRoaXMuc3RhdGUudmlzaWJsZURheXM7XG5cbiAgICAgICAgaWYgKGlzT3V0c2lkZVJhbmdlICE9PSB0aGlzLnByb3BzLmlzT3V0c2lkZVJhbmdlKSB7XG4gICAgICAgICAgdGhpcy5tb2RpZmllcnNbJ2Jsb2NrZWQtb3V0LW9mLXJhbmdlJ10gPSBmdW5jdGlvbiAoZGF5KSB7XG4gICAgICAgICAgICByZXR1cm4gaXNPdXRzaWRlUmFuZ2UoZGF5KTtcbiAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzRGF5QmxvY2tlZCAhPT0gdGhpcy5wcm9wcy5pc0RheUJsb2NrZWQpIHtcbiAgICAgICAgICB0aGlzLm1vZGlmaWVyc1snYmxvY2tlZC1jYWxlbmRhciddID0gZnVuY3Rpb24gKGRheSkge1xuICAgICAgICAgICAgcmV0dXJuIGlzRGF5QmxvY2tlZChkYXkpO1xuICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNEYXlIaWdobGlnaHRlZCAhPT0gdGhpcy5wcm9wcy5pc0RheUhpZ2hsaWdodGVkKSB7XG4gICAgICAgICAgdGhpcy5tb2RpZmllcnNbJ2hpZ2hsaWdodGVkLWNhbGVuZGFyJ10gPSBmdW5jdGlvbiAoZGF5KSB7XG4gICAgICAgICAgICByZXR1cm4gaXNEYXlIaWdobGlnaHRlZChkYXkpO1xuICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaW5pdGlhbFZpc2libGVNb250aCAhPT0gdGhpcy5wcm9wcy5pbml0aWFsVmlzaWJsZU1vbnRoIHx8IG51bWJlck9mTW9udGhzICE9PSB0aGlzLnByb3BzLm51bWJlck9mTW9udGhzIHx8IGVuYWJsZU91dHNpZGVEYXlzICE9PSB0aGlzLnByb3BzLmVuYWJsZU91dHNpZGVEYXlzKSB7XG4gICAgICAgICAgdmFyIG5ld01vbnRoU3RhdGUgPSB0aGlzLmdldFN0YXRlRm9yTmV3TW9udGgobmV4dFByb3BzKTtcbiAgICAgICAgICB2YXIgY3VycmVudE1vbnRoID0gbmV3TW9udGhTdGF0ZS5jdXJyZW50TW9udGg7XG4gICAgICAgICAgdmlzaWJsZURheXMgPSBuZXdNb250aFN0YXRlLnZpc2libGVEYXlzO1xuICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgY3VycmVudE1vbnRoOiBjdXJyZW50TW9udGgsXG4gICAgICAgICAgICB2aXNpYmxlRGF5czogdmlzaWJsZURheXNcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBkaWREYXRlQ2hhbmdlID0gZGF0ZSAhPT0gdGhpcy5wcm9wcy5kYXRlO1xuICAgICAgICB2YXIgZGlkRm9jdXNDaGFuZ2UgPSBmb2N1c2VkICE9PSB0aGlzLnByb3BzLmZvY3VzZWQ7XG5cbiAgICAgICAgdmFyIG1vZGlmaWVycyA9IHt9O1xuXG4gICAgICAgIGlmIChkaWREYXRlQ2hhbmdlKSB7XG4gICAgICAgICAgbW9kaWZpZXJzID0gdGhpcy5kZWxldGVNb2RpZmllcihtb2RpZmllcnMsIHRoaXMucHJvcHMuZGF0ZSwgJ3NlbGVjdGVkJyk7XG4gICAgICAgICAgbW9kaWZpZXJzID0gdGhpcy5hZGRNb2RpZmllcihtb2RpZmllcnMsIGRhdGUsICdzZWxlY3RlZCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRpZEZvY3VzQ2hhbmdlKSB7XG4gICAgICAgICAgKDAsIF9vYmplY3QyWydkZWZhdWx0J10pKHZpc2libGVEYXlzKS5mb3JFYWNoKGZ1bmN0aW9uIChkYXlzKSB7XG4gICAgICAgICAgICBPYmplY3Qua2V5cyhkYXlzKS5mb3JFYWNoKGZ1bmN0aW9uIChkYXkpIHtcbiAgICAgICAgICAgICAgdmFyIG1vbWVudE9iaiA9ICgwLCBfbW9tZW50MlsnZGVmYXVsdCddKShkYXkpO1xuICAgICAgICAgICAgICBpZiAoX3RoaXMyLmlzQmxvY2tlZChtb21lbnRPYmopKSB7XG4gICAgICAgICAgICAgICAgbW9kaWZpZXJzID0gX3RoaXMyLmFkZE1vZGlmaWVyKG1vZGlmaWVycywgbW9tZW50T2JqLCAnYmxvY2tlZCcpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG1vZGlmaWVycyA9IF90aGlzMi5kZWxldGVNb2RpZmllcihtb2RpZmllcnMsIG1vbWVudE9iaiwgJ2Jsb2NrZWQnKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmIChpc091dHNpZGVSYW5nZShtb21lbnRPYmopKSB7XG4gICAgICAgICAgICAgICAgbW9kaWZpZXJzID0gX3RoaXMyLmFkZE1vZGlmaWVyKG1vZGlmaWVycywgbW9tZW50T2JqLCAnYmxvY2tlZC1vdXQtb2YtcmFuZ2UnKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBtb2RpZmllcnMgPSBfdGhpczIuZGVsZXRlTW9kaWZpZXIobW9kaWZpZXJzLCBtb21lbnRPYmosICdibG9ja2VkLW91dC1vZi1yYW5nZScpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgaWYgKGlzRGF5QmxvY2tlZChtb21lbnRPYmopKSB7XG4gICAgICAgICAgICAgICAgbW9kaWZpZXJzID0gX3RoaXMyLmFkZE1vZGlmaWVyKG1vZGlmaWVycywgbW9tZW50T2JqLCAnYmxvY2tlZC1jYWxlbmRhcicpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG1vZGlmaWVycyA9IF90aGlzMi5kZWxldGVNb2RpZmllcihtb2RpZmllcnMsIG1vbWVudE9iaiwgJ2Jsb2NrZWQtY2FsZW5kYXInKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmIChpc0RheUhpZ2hsaWdodGVkKG1vbWVudE9iaikpIHtcbiAgICAgICAgICAgICAgICBtb2RpZmllcnMgPSBfdGhpczIuYWRkTW9kaWZpZXIobW9kaWZpZXJzLCBtb21lbnRPYmosICdoaWdobGlnaHRlZC1jYWxlbmRhcicpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG1vZGlmaWVycyA9IF90aGlzMi5kZWxldGVNb2RpZmllcihtb2RpZmllcnMsIG1vbWVudE9iaiwgJ2hpZ2hsaWdodGVkLWNhbGVuZGFyJyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHRvZGF5ID0gKDAsIF9tb21lbnQyWydkZWZhdWx0J10pKCk7XG4gICAgICAgIGlmICghKDAsIF9pc1NhbWVEYXkyWydkZWZhdWx0J10pKHRoaXMudG9kYXksIHRvZGF5KSkge1xuICAgICAgICAgIG1vZGlmaWVycyA9IHRoaXMuZGVsZXRlTW9kaWZpZXIobW9kaWZpZXJzLCB0aGlzLnRvZGF5LCAndG9kYXknKTtcbiAgICAgICAgICBtb2RpZmllcnMgPSB0aGlzLmFkZE1vZGlmaWVyKG1vZGlmaWVycywgdG9kYXksICd0b2RheScpO1xuICAgICAgICAgIHRoaXMudG9kYXkgPSB0b2RheTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChPYmplY3Qua2V5cyhtb2RpZmllcnMpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIHZpc2libGVEYXlzOiAoMCwgX29iamVjdDRbJ2RlZmF1bHQnXSkoe30sIHZpc2libGVEYXlzLCBtb2RpZmllcnMpXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHM7XG4gICAgfSgpXG4gIH0sIHtcbiAgICBrZXk6ICdjb21wb25lbnRXaWxsVXBkYXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gY29tcG9uZW50V2lsbFVwZGF0ZSgpIHtcbiAgICAgICAgdGhpcy50b2RheSA9ICgwLCBfbW9tZW50MlsnZGVmYXVsdCddKSgpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29tcG9uZW50V2lsbFVwZGF0ZTtcbiAgICB9KClcbiAgfSwge1xuICAgIGtleTogJ29uRGF5Q2xpY2snLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBvbkRheUNsaWNrKGRheSwgZSkge1xuICAgICAgICBpZiAoZSkgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBpZiAodGhpcy5pc0Jsb2NrZWQoZGF5KSkgcmV0dXJuO1xuICAgICAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICAgIG9uRGF0ZUNoYW5nZSA9IF9wcm9wcy5vbkRhdGVDaGFuZ2UsXG4gICAgICAgICAgICBrZWVwT3Blbk9uRGF0ZVNlbGVjdCA9IF9wcm9wcy5rZWVwT3Blbk9uRGF0ZVNlbGVjdCxcbiAgICAgICAgICAgIG9uRm9jdXNDaGFuZ2UgPSBfcHJvcHMub25Gb2N1c0NoYW5nZSxcbiAgICAgICAgICAgIG9uQ2xvc2UgPSBfcHJvcHMub25DbG9zZTtcblxuICAgICAgICBvbkRhdGVDaGFuZ2UoZGF5KTtcbiAgICAgICAgaWYgKCFrZWVwT3Blbk9uRGF0ZVNlbGVjdCkge1xuICAgICAgICAgIG9uRm9jdXNDaGFuZ2UoeyBmb2N1c2VkOiBudWxsIH0pO1xuICAgICAgICAgIG9uQ2xvc2UoeyBkYXRlOiBkYXkgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG9uRGF5Q2xpY2s7XG4gICAgfSgpXG4gIH0sIHtcbiAgICBrZXk6ICdvbkRheU1vdXNlRW50ZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBvbkRheU1vdXNlRW50ZXIoZGF5KSB7XG4gICAgICAgIGlmICh0aGlzLmlzVG91Y2hEZXZpY2UpIHJldHVybjtcbiAgICAgICAgdmFyIF9zdGF0ZSA9IHRoaXMuc3RhdGUsXG4gICAgICAgICAgICBob3ZlckRhdGUgPSBfc3RhdGUuaG92ZXJEYXRlLFxuICAgICAgICAgICAgdmlzaWJsZURheXMgPSBfc3RhdGUudmlzaWJsZURheXM7XG5cbiAgICAgICAgdmFyIG1vZGlmaWVycyA9IHRoaXMuZGVsZXRlTW9kaWZpZXIoe30sIGhvdmVyRGF0ZSwgJ2hvdmVyZWQnKTtcbiAgICAgICAgbW9kaWZpZXJzID0gdGhpcy5hZGRNb2RpZmllcihtb2RpZmllcnMsIGRheSwgJ2hvdmVyZWQnKTtcblxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBob3ZlckRhdGU6IGRheSxcbiAgICAgICAgICB2aXNpYmxlRGF5czogKDAsIF9vYmplY3Q0WydkZWZhdWx0J10pKHt9LCB2aXNpYmxlRGF5cywgbW9kaWZpZXJzKVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG9uRGF5TW91c2VFbnRlcjtcbiAgICB9KClcbiAgfSwge1xuICAgIGtleTogJ29uRGF5TW91c2VMZWF2ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIG9uRGF5TW91c2VMZWF2ZSgpIHtcbiAgICAgICAgdmFyIF9zdGF0ZTIgPSB0aGlzLnN0YXRlLFxuICAgICAgICAgICAgaG92ZXJEYXRlID0gX3N0YXRlMi5ob3ZlckRhdGUsXG4gICAgICAgICAgICB2aXNpYmxlRGF5cyA9IF9zdGF0ZTIudmlzaWJsZURheXM7XG5cbiAgICAgICAgaWYgKHRoaXMuaXNUb3VjaERldmljZSB8fCAhaG92ZXJEYXRlKSByZXR1cm47XG5cbiAgICAgICAgdmFyIG1vZGlmaWVycyA9IHRoaXMuZGVsZXRlTW9kaWZpZXIoe30sIGhvdmVyRGF0ZSwgJ2hvdmVyZWQnKTtcblxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBob3ZlckRhdGU6IG51bGwsXG4gICAgICAgICAgdmlzaWJsZURheXM6ICgwLCBfb2JqZWN0NFsnZGVmYXVsdCddKSh7fSwgdmlzaWJsZURheXMsIG1vZGlmaWVycylcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBvbkRheU1vdXNlTGVhdmU7XG4gICAgfSgpXG4gIH0sIHtcbiAgICBrZXk6ICdvblByZXZNb250aENsaWNrJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gb25QcmV2TW9udGhDbGljaygpIHtcbiAgICAgICAgdmFyIF9wcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICAgICAgb25QcmV2TW9udGhDbGljayA9IF9wcm9wczIub25QcmV2TW9udGhDbGljayxcbiAgICAgICAgICAgIG51bWJlck9mTW9udGhzID0gX3Byb3BzMi5udW1iZXJPZk1vbnRocyxcbiAgICAgICAgICAgIGVuYWJsZU91dHNpZGVEYXlzID0gX3Byb3BzMi5lbmFibGVPdXRzaWRlRGF5cztcbiAgICAgICAgdmFyIF9zdGF0ZTMgPSB0aGlzLnN0YXRlLFxuICAgICAgICAgICAgY3VycmVudE1vbnRoID0gX3N0YXRlMy5jdXJyZW50TW9udGgsXG4gICAgICAgICAgICB2aXNpYmxlRGF5cyA9IF9zdGF0ZTMudmlzaWJsZURheXM7XG5cbiAgICAgICAgdmFyIG5ld1Zpc2libGVEYXlzID0ge307XG4gICAgICAgIE9iamVjdC5rZXlzKHZpc2libGVEYXlzKS5zb3J0KCkuc2xpY2UoMCwgbnVtYmVyT2ZNb250aHMgKyAxKS5mb3JFYWNoKGZ1bmN0aW9uIChtb250aCkge1xuICAgICAgICAgIG5ld1Zpc2libGVEYXlzW21vbnRoXSA9IHZpc2libGVEYXlzW21vbnRoXTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdmFyIHByZXZNb250aCA9IGN1cnJlbnRNb250aC5jbG9uZSgpLnN1YnRyYWN0KDEsICdtb250aCcpO1xuICAgICAgICB2YXIgcHJldk1vbnRoVmlzaWJsZURheXMgPSAoMCwgX2dldFZpc2libGVEYXlzMlsnZGVmYXVsdCddKShwcmV2TW9udGgsIDEsIGVuYWJsZU91dHNpZGVEYXlzKTtcblxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBjdXJyZW50TW9udGg6IHByZXZNb250aCxcbiAgICAgICAgICB2aXNpYmxlRGF5czogKDAsIF9vYmplY3Q0WydkZWZhdWx0J10pKHt9LCBuZXdWaXNpYmxlRGF5cywgdGhpcy5nZXRNb2RpZmllcnMocHJldk1vbnRoVmlzaWJsZURheXMpKVxuICAgICAgICB9KTtcblxuICAgICAgICBvblByZXZNb250aENsaWNrKCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBvblByZXZNb250aENsaWNrO1xuICAgIH0oKVxuICB9LCB7XG4gICAga2V5OiAnb25OZXh0TW9udGhDbGljaycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIG9uTmV4dE1vbnRoQ2xpY2soKSB7XG4gICAgICAgIHZhciBfcHJvcHMzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICAgIG9uTmV4dE1vbnRoQ2xpY2sgPSBfcHJvcHMzLm9uTmV4dE1vbnRoQ2xpY2ssXG4gICAgICAgICAgICBudW1iZXJPZk1vbnRocyA9IF9wcm9wczMubnVtYmVyT2ZNb250aHMsXG4gICAgICAgICAgICBlbmFibGVPdXRzaWRlRGF5cyA9IF9wcm9wczMuZW5hYmxlT3V0c2lkZURheXM7XG4gICAgICAgIHZhciBfc3RhdGU0ID0gdGhpcy5zdGF0ZSxcbiAgICAgICAgICAgIGN1cnJlbnRNb250aCA9IF9zdGF0ZTQuY3VycmVudE1vbnRoLFxuICAgICAgICAgICAgdmlzaWJsZURheXMgPSBfc3RhdGU0LnZpc2libGVEYXlzO1xuXG4gICAgICAgIHZhciBuZXdWaXNpYmxlRGF5cyA9IHt9O1xuICAgICAgICBPYmplY3Qua2V5cyh2aXNpYmxlRGF5cykuc29ydCgpLnNsaWNlKDEpLmZvckVhY2goZnVuY3Rpb24gKG1vbnRoKSB7XG4gICAgICAgICAgbmV3VmlzaWJsZURheXNbbW9udGhdID0gdmlzaWJsZURheXNbbW9udGhdO1xuICAgICAgICB9KTtcblxuICAgICAgICB2YXIgbmV4dE1vbnRoID0gY3VycmVudE1vbnRoLmNsb25lKCkuYWRkKG51bWJlck9mTW9udGhzLCAnbW9udGgnKTtcbiAgICAgICAgdmFyIG5leHRNb250aFZpc2libGVEYXlzID0gKDAsIF9nZXRWaXNpYmxlRGF5czJbJ2RlZmF1bHQnXSkobmV4dE1vbnRoLCAxLCBlbmFibGVPdXRzaWRlRGF5cyk7XG5cbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgY3VycmVudE1vbnRoOiBjdXJyZW50TW9udGguY2xvbmUoKS5hZGQoMSwgJ21vbnRoJyksXG4gICAgICAgICAgdmlzaWJsZURheXM6ICgwLCBfb2JqZWN0NFsnZGVmYXVsdCddKSh7fSwgbmV3VmlzaWJsZURheXMsIHRoaXMuZ2V0TW9kaWZpZXJzKG5leHRNb250aFZpc2libGVEYXlzKSlcbiAgICAgICAgfSk7XG5cbiAgICAgICAgb25OZXh0TW9udGhDbGljaygpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gb25OZXh0TW9udGhDbGljaztcbiAgICB9KClcbiAgfSwge1xuICAgIGtleTogJ2dldEZpcnN0Rm9jdXNhYmxlRGF5JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gZ2V0Rmlyc3RGb2N1c2FibGVEYXkobmV3TW9udGgpIHtcbiAgICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgICAgdmFyIF9wcm9wczQgPSB0aGlzLnByb3BzLFxuICAgICAgICAgICAgZGF0ZSA9IF9wcm9wczQuZGF0ZSxcbiAgICAgICAgICAgIG51bWJlck9mTW9udGhzID0gX3Byb3BzNC5udW1iZXJPZk1vbnRocztcblxuICAgICAgICB2YXIgZm9jdXNlZERhdGUgPSBuZXdNb250aC5jbG9uZSgpLnN0YXJ0T2YoJ21vbnRoJyk7XG4gICAgICAgIGlmIChkYXRlKSB7XG4gICAgICAgICAgZm9jdXNlZERhdGUgPSBkYXRlLmNsb25lKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5pc0Jsb2NrZWQoZm9jdXNlZERhdGUpKSB7XG4gICAgICAgICAgdmFyIGRheXMgPSBbXTtcbiAgICAgICAgICB2YXIgbGFzdFZpc2libGVEYXkgPSBuZXdNb250aC5jbG9uZSgpLmFkZChudW1iZXJPZk1vbnRocyAtIDEsICdtb250aHMnKS5lbmRPZignbW9udGgnKTtcbiAgICAgICAgICB2YXIgY3VycmVudERheSA9IGZvY3VzZWREYXRlLmNsb25lKCk7XG4gICAgICAgICAgd2hpbGUgKCEoMCwgX2lzQWZ0ZXJEYXkyWydkZWZhdWx0J10pKGN1cnJlbnREYXksIGxhc3RWaXNpYmxlRGF5KSkge1xuICAgICAgICAgICAgY3VycmVudERheSA9IGN1cnJlbnREYXkuY2xvbmUoKS5hZGQoMSwgJ2RheScpO1xuICAgICAgICAgICAgZGF5cy5wdXNoKGN1cnJlbnREYXkpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciB2aWFibGVEYXlzID0gZGF5cy5maWx0ZXIoZnVuY3Rpb24gKGRheSkge1xuICAgICAgICAgICAgcmV0dXJuICFfdGhpczMuaXNCbG9ja2VkKGRheSkgJiYgKDAsIF9pc0FmdGVyRGF5MlsnZGVmYXVsdCddKShkYXksIGZvY3VzZWREYXRlKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBpZiAodmlhYmxlRGF5cy5sZW5ndGggPiAwKSBmb2N1c2VkRGF0ZSA9IHZpYWJsZURheXNbMF07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZm9jdXNlZERhdGU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBnZXRGaXJzdEZvY3VzYWJsZURheTtcbiAgICB9KClcbiAgfSwge1xuICAgIGtleTogJ2dldE1vZGlmaWVycycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIGdldE1vZGlmaWVycyh2aXNpYmxlRGF5cykge1xuICAgICAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgICAgICB2YXIgbW9kaWZpZXJzID0ge307XG4gICAgICAgIE9iamVjdC5rZXlzKHZpc2libGVEYXlzKS5mb3JFYWNoKGZ1bmN0aW9uIChtb250aCkge1xuICAgICAgICAgIG1vZGlmaWVyc1ttb250aF0gPSB7fTtcbiAgICAgICAgICB2aXNpYmxlRGF5c1ttb250aF0uZm9yRWFjaChmdW5jdGlvbiAoZGF5KSB7XG4gICAgICAgICAgICBtb2RpZmllcnNbbW9udGhdWygwLCBfdG9JU09EYXRlU3RyaW5nMlsnZGVmYXVsdCddKShkYXkpXSA9IF90aGlzNC5nZXRNb2RpZmllcnNGb3JEYXkoZGF5KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIG1vZGlmaWVycztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGdldE1vZGlmaWVycztcbiAgICB9KClcbiAgfSwge1xuICAgIGtleTogJ2dldE1vZGlmaWVyc0ZvckRheScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIGdldE1vZGlmaWVyc0ZvckRheShkYXkpIHtcbiAgICAgICAgdmFyIF90aGlzNSA9IHRoaXM7XG5cbiAgICAgICAgcmV0dXJuIG5ldyBTZXQoT2JqZWN0LmtleXModGhpcy5tb2RpZmllcnMpLmZpbHRlcihmdW5jdGlvbiAobW9kaWZpZXIpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXM1Lm1vZGlmaWVyc1ttb2RpZmllcl0oZGF5KTtcbiAgICAgICAgfSkpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZ2V0TW9kaWZpZXJzRm9yRGF5O1xuICAgIH0oKVxuICB9LCB7XG4gICAga2V5OiAnZ2V0U3RhdGVGb3JOZXdNb250aCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIGdldFN0YXRlRm9yTmV3TW9udGgobmV4dFByb3BzKSB7XG4gICAgICAgIHZhciBfdGhpczYgPSB0aGlzO1xuXG4gICAgICAgIHZhciBpbml0aWFsVmlzaWJsZU1vbnRoID0gbmV4dFByb3BzLmluaXRpYWxWaXNpYmxlTW9udGgsXG4gICAgICAgICAgICBkYXRlID0gbmV4dFByb3BzLmRhdGUsXG4gICAgICAgICAgICBudW1iZXJPZk1vbnRocyA9IG5leHRQcm9wcy5udW1iZXJPZk1vbnRocyxcbiAgICAgICAgICAgIGVuYWJsZU91dHNpZGVEYXlzID0gbmV4dFByb3BzLmVuYWJsZU91dHNpZGVEYXlzO1xuXG4gICAgICAgIHZhciBpbml0aWFsVmlzaWJsZU1vbnRoVGh1bmsgPSBpbml0aWFsVmlzaWJsZU1vbnRoIHx8IChkYXRlID8gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBkYXRlO1xuICAgICAgICB9IDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBfdGhpczYudG9kYXk7XG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgY3VycmVudE1vbnRoID0gaW5pdGlhbFZpc2libGVNb250aFRodW5rKCk7XG4gICAgICAgIHZhciB2aXNpYmxlRGF5cyA9IHRoaXMuZ2V0TW9kaWZpZXJzKCgwLCBfZ2V0VmlzaWJsZURheXMyWydkZWZhdWx0J10pKGN1cnJlbnRNb250aCwgbnVtYmVyT2ZNb250aHMsIGVuYWJsZU91dHNpZGVEYXlzKSk7XG4gICAgICAgIHJldHVybiB7IGN1cnJlbnRNb250aDogY3VycmVudE1vbnRoLCB2aXNpYmxlRGF5czogdmlzaWJsZURheXMgfTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGdldFN0YXRlRm9yTmV3TW9udGg7XG4gICAgfSgpXG4gIH0sIHtcbiAgICBrZXk6ICdhZGRNb2RpZmllcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIGFkZE1vZGlmaWVyKHVwZGF0ZWREYXlzLCBkYXksIG1vZGlmaWVyKSB7XG4gICAgICAgIHZhciBfcHJvcHM1ID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICAgIG51bWJlck9mVmlzaWJsZU1vbnRocyA9IF9wcm9wczUubnVtYmVyT2ZNb250aHMsXG4gICAgICAgICAgICBlbmFibGVPdXRzaWRlRGF5cyA9IF9wcm9wczUuZW5hYmxlT3V0c2lkZURheXMsXG4gICAgICAgICAgICBvcmllbnRhdGlvbiA9IF9wcm9wczUub3JpZW50YXRpb247XG4gICAgICAgIHZhciBfc3RhdGU1ID0gdGhpcy5zdGF0ZSxcbiAgICAgICAgICAgIGZpcnN0VmlzaWJsZU1vbnRoID0gX3N0YXRlNS5jdXJyZW50TW9udGgsXG4gICAgICAgICAgICB2aXNpYmxlRGF5cyA9IF9zdGF0ZTUudmlzaWJsZURheXM7XG5cbiAgICAgICAgdmFyIGN1cnJlbnRNb250aCA9IGZpcnN0VmlzaWJsZU1vbnRoO1xuICAgICAgICB2YXIgbnVtYmVyT2ZNb250aHMgPSBudW1iZXJPZlZpc2libGVNb250aHM7XG4gICAgICAgIGlmIChvcmllbnRhdGlvbiAhPT0gX2NvbnN0YW50cy5WRVJUSUNBTF9TQ1JPTExBQkxFKSB7XG4gICAgICAgICAgY3VycmVudE1vbnRoID0gY3VycmVudE1vbnRoLmNsb25lKCkuc3VidHJhY3QoMSwgJ21vbnRoJyk7XG4gICAgICAgICAgbnVtYmVyT2ZNb250aHMgKz0gMjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWRheSB8fCAhKDAsIF9pc0RheVZpc2libGUyWydkZWZhdWx0J10pKGRheSwgY3VycmVudE1vbnRoLCBudW1iZXJPZk1vbnRocywgZW5hYmxlT3V0c2lkZURheXMpKSB7XG4gICAgICAgICAgcmV0dXJuIHVwZGF0ZWREYXlzO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGlzbyA9ICgwLCBfdG9JU09EYXRlU3RyaW5nMlsnZGVmYXVsdCddKShkYXkpO1xuXG4gICAgICAgIHZhciB1cGRhdGVkRGF5c0FmdGVyQWRkaXRpb24gPSAoMCwgX29iamVjdDRbJ2RlZmF1bHQnXSkoe30sIHVwZGF0ZWREYXlzKTtcbiAgICAgICAgaWYgKGVuYWJsZU91dHNpZGVEYXlzKSB7XG4gICAgICAgICAgdmFyIG1vbnRoc1RvVXBkYXRlID0gT2JqZWN0LmtleXModmlzaWJsZURheXMpLmZpbHRlcihmdW5jdGlvbiAobW9udGhLZXkpIHtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3Qua2V5cyh2aXNpYmxlRGF5c1ttb250aEtleV0pLmluZGV4T2YoaXNvKSA+IC0xO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgdXBkYXRlZERheXNBZnRlckFkZGl0aW9uID0gbW9udGhzVG9VcGRhdGUucmVkdWNlKGZ1bmN0aW9uIChkYXlzLCBtb250aElzbykge1xuICAgICAgICAgICAgdmFyIG1vbnRoID0gdXBkYXRlZERheXNbbW9udGhJc29dIHx8IHZpc2libGVEYXlzW21vbnRoSXNvXTtcbiAgICAgICAgICAgIHZhciBtb2RpZmllcnMgPSBuZXcgU2V0KG1vbnRoW2lzb10pO1xuICAgICAgICAgICAgbW9kaWZpZXJzLmFkZChtb2RpZmllcik7XG4gICAgICAgICAgICByZXR1cm4gKDAsIF9vYmplY3Q0WydkZWZhdWx0J10pKHt9LCBkYXlzLCBfZGVmaW5lUHJvcGVydHkoe30sIG1vbnRoSXNvLCAoMCwgX29iamVjdDRbJ2RlZmF1bHQnXSkoe30sIG1vbnRoLCBfZGVmaW5lUHJvcGVydHkoe30sIGlzbywgbW9kaWZpZXJzKSkpKTtcbiAgICAgICAgICB9LCB1cGRhdGVkRGF5c0FmdGVyQWRkaXRpb24pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBtb250aElzbyA9ICgwLCBfdG9JU09Nb250aFN0cmluZzJbJ2RlZmF1bHQnXSkoZGF5KTtcbiAgICAgICAgICB2YXIgbW9udGggPSB1cGRhdGVkRGF5c1ttb250aElzb10gfHwgdmlzaWJsZURheXNbbW9udGhJc29dO1xuXG4gICAgICAgICAgdmFyIG1vZGlmaWVycyA9IG5ldyBTZXQobW9udGhbaXNvXSk7XG4gICAgICAgICAgbW9kaWZpZXJzLmFkZChtb2RpZmllcik7XG4gICAgICAgICAgdXBkYXRlZERheXNBZnRlckFkZGl0aW9uID0gKDAsIF9vYmplY3Q0WydkZWZhdWx0J10pKHt9LCB1cGRhdGVkRGF5c0FmdGVyQWRkaXRpb24sIF9kZWZpbmVQcm9wZXJ0eSh7fSwgbW9udGhJc28sICgwLCBfb2JqZWN0NFsnZGVmYXVsdCddKSh7fSwgbW9udGgsIF9kZWZpbmVQcm9wZXJ0eSh7fSwgaXNvLCBtb2RpZmllcnMpKSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHVwZGF0ZWREYXlzQWZ0ZXJBZGRpdGlvbjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGFkZE1vZGlmaWVyO1xuICAgIH0oKVxuICB9LCB7XG4gICAga2V5OiAnZGVsZXRlTW9kaWZpZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBkZWxldGVNb2RpZmllcih1cGRhdGVkRGF5cywgZGF5LCBtb2RpZmllcikge1xuICAgICAgICB2YXIgX3Byb3BzNiA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgICBudW1iZXJPZlZpc2libGVNb250aHMgPSBfcHJvcHM2Lm51bWJlck9mTW9udGhzLFxuICAgICAgICAgICAgZW5hYmxlT3V0c2lkZURheXMgPSBfcHJvcHM2LmVuYWJsZU91dHNpZGVEYXlzLFxuICAgICAgICAgICAgb3JpZW50YXRpb24gPSBfcHJvcHM2Lm9yaWVudGF0aW9uO1xuICAgICAgICB2YXIgX3N0YXRlNiA9IHRoaXMuc3RhdGUsXG4gICAgICAgICAgICBmaXJzdFZpc2libGVNb250aCA9IF9zdGF0ZTYuY3VycmVudE1vbnRoLFxuICAgICAgICAgICAgdmlzaWJsZURheXMgPSBfc3RhdGU2LnZpc2libGVEYXlzO1xuXG4gICAgICAgIHZhciBjdXJyZW50TW9udGggPSBmaXJzdFZpc2libGVNb250aDtcbiAgICAgICAgdmFyIG51bWJlck9mTW9udGhzID0gbnVtYmVyT2ZWaXNpYmxlTW9udGhzO1xuICAgICAgICBpZiAob3JpZW50YXRpb24gIT09IF9jb25zdGFudHMuVkVSVElDQUxfU0NST0xMQUJMRSkge1xuICAgICAgICAgIGN1cnJlbnRNb250aCA9IGN1cnJlbnRNb250aC5jbG9uZSgpLnN1YnRyYWN0KDEsICdtb250aCcpO1xuICAgICAgICAgIG51bWJlck9mTW9udGhzICs9IDI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFkYXkgfHwgISgwLCBfaXNEYXlWaXNpYmxlMlsnZGVmYXVsdCddKShkYXksIGN1cnJlbnRNb250aCwgbnVtYmVyT2ZNb250aHMsIGVuYWJsZU91dHNpZGVEYXlzKSkge1xuICAgICAgICAgIHJldHVybiB1cGRhdGVkRGF5cztcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBpc28gPSAoMCwgX3RvSVNPRGF0ZVN0cmluZzJbJ2RlZmF1bHQnXSkoZGF5KTtcblxuICAgICAgICB2YXIgdXBkYXRlZERheXNBZnRlckRlbGV0aW9uID0gKDAsIF9vYmplY3Q0WydkZWZhdWx0J10pKHt9LCB1cGRhdGVkRGF5cyk7XG4gICAgICAgIGlmIChlbmFibGVPdXRzaWRlRGF5cykge1xuICAgICAgICAgIHZhciBtb250aHNUb1VwZGF0ZSA9IE9iamVjdC5rZXlzKHZpc2libGVEYXlzKS5maWx0ZXIoZnVuY3Rpb24gKG1vbnRoS2V5KSB7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmtleXModmlzaWJsZURheXNbbW9udGhLZXldKS5pbmRleE9mKGlzbykgPiAtMTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIHVwZGF0ZWREYXlzQWZ0ZXJEZWxldGlvbiA9IG1vbnRoc1RvVXBkYXRlLnJlZHVjZShmdW5jdGlvbiAoZGF5cywgbW9udGhJc28pIHtcbiAgICAgICAgICAgIHZhciBtb250aCA9IHVwZGF0ZWREYXlzW21vbnRoSXNvXSB8fCB2aXNpYmxlRGF5c1ttb250aElzb107XG4gICAgICAgICAgICB2YXIgbW9kaWZpZXJzID0gbmV3IFNldChtb250aFtpc29dKTtcbiAgICAgICAgICAgIG1vZGlmaWVyc1snZGVsZXRlJ10obW9kaWZpZXIpO1xuICAgICAgICAgICAgcmV0dXJuICgwLCBfb2JqZWN0NFsnZGVmYXVsdCddKSh7fSwgZGF5cywgX2RlZmluZVByb3BlcnR5KHt9LCBtb250aElzbywgKDAsIF9vYmplY3Q0WydkZWZhdWx0J10pKHt9LCBtb250aCwgX2RlZmluZVByb3BlcnR5KHt9LCBpc28sIG1vZGlmaWVycykpKSk7XG4gICAgICAgICAgfSwgdXBkYXRlZERheXNBZnRlckRlbGV0aW9uKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgbW9udGhJc28gPSAoMCwgX3RvSVNPTW9udGhTdHJpbmcyWydkZWZhdWx0J10pKGRheSk7XG4gICAgICAgICAgdmFyIG1vbnRoID0gdXBkYXRlZERheXNbbW9udGhJc29dIHx8IHZpc2libGVEYXlzW21vbnRoSXNvXTtcblxuICAgICAgICAgIHZhciBtb2RpZmllcnMgPSBuZXcgU2V0KG1vbnRoW2lzb10pO1xuICAgICAgICAgIG1vZGlmaWVyc1snZGVsZXRlJ10obW9kaWZpZXIpO1xuICAgICAgICAgIHVwZGF0ZWREYXlzQWZ0ZXJEZWxldGlvbiA9ICgwLCBfb2JqZWN0NFsnZGVmYXVsdCddKSh7fSwgdXBkYXRlZERheXNBZnRlckRlbGV0aW9uLCBfZGVmaW5lUHJvcGVydHkoe30sIG1vbnRoSXNvLCAoMCwgX29iamVjdDRbJ2RlZmF1bHQnXSkoe30sIG1vbnRoLCBfZGVmaW5lUHJvcGVydHkoe30sIGlzbywgbW9kaWZpZXJzKSkpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB1cGRhdGVkRGF5c0FmdGVyRGVsZXRpb247XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBkZWxldGVNb2RpZmllcjtcbiAgICB9KClcbiAgfSwge1xuICAgIGtleTogJ2lzQmxvY2tlZCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIGlzQmxvY2tlZChkYXkpIHtcbiAgICAgICAgdmFyIF9wcm9wczcgPSB0aGlzLnByb3BzLFxuICAgICAgICAgICAgaXNEYXlCbG9ja2VkID0gX3Byb3BzNy5pc0RheUJsb2NrZWQsXG4gICAgICAgICAgICBpc091dHNpZGVSYW5nZSA9IF9wcm9wczcuaXNPdXRzaWRlUmFuZ2U7XG5cbiAgICAgICAgcmV0dXJuIGlzRGF5QmxvY2tlZChkYXkpIHx8IGlzT3V0c2lkZVJhbmdlKGRheSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBpc0Jsb2NrZWQ7XG4gICAgfSgpXG4gIH0sIHtcbiAgICBrZXk6ICdpc0hvdmVyZWQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBpc0hvdmVyZWQoZGF5KSB7XG4gICAgICAgIHZhciBfcmVmID0gdGhpcy5zdGF0ZSB8fCB7fSxcbiAgICAgICAgICAgIGhvdmVyRGF0ZSA9IF9yZWYuaG92ZXJEYXRlO1xuXG4gICAgICAgIHJldHVybiAoMCwgX2lzU2FtZURheTJbJ2RlZmF1bHQnXSkoZGF5LCBob3ZlckRhdGUpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gaXNIb3ZlcmVkO1xuICAgIH0oKVxuICB9LCB7XG4gICAga2V5OiAnaXNTZWxlY3RlZCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIGlzU2VsZWN0ZWQoZGF5KSB7XG4gICAgICAgIHJldHVybiAoMCwgX2lzU2FtZURheTJbJ2RlZmF1bHQnXSkoZGF5LCB0aGlzLnByb3BzLmRhdGUpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gaXNTZWxlY3RlZDtcbiAgICB9KClcbiAgfSwge1xuICAgIGtleTogJ2lzVG9kYXknLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBpc1RvZGF5KGRheSkge1xuICAgICAgICByZXR1cm4gKDAsIF9pc1NhbWVEYXkyWydkZWZhdWx0J10pKGRheSwgdGhpcy50b2RheSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBpc1RvZGF5O1xuICAgIH0oKVxuICB9LCB7XG4gICAga2V5OiAncmVuZGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICB2YXIgX3Byb3BzOCA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgICBudW1iZXJPZk1vbnRocyA9IF9wcm9wczgubnVtYmVyT2ZNb250aHMsXG4gICAgICAgICAgICBvcmllbnRhdGlvbiA9IF9wcm9wczgub3JpZW50YXRpb24sXG4gICAgICAgICAgICBtb250aEZvcm1hdCA9IF9wcm9wczgubW9udGhGb3JtYXQsXG4gICAgICAgICAgICByZW5kZXJNb250aCA9IF9wcm9wczgucmVuZGVyTW9udGgsXG4gICAgICAgICAgICBuYXZQcmV2ID0gX3Byb3BzOC5uYXZQcmV2LFxuICAgICAgICAgICAgbmF2TmV4dCA9IF9wcm9wczgubmF2TmV4dCxcbiAgICAgICAgICAgIHdpdGhQb3J0YWwgPSBfcHJvcHM4LndpdGhQb3J0YWwsXG4gICAgICAgICAgICBmb2N1c2VkID0gX3Byb3BzOC5mb2N1c2VkLFxuICAgICAgICAgICAgZW5hYmxlT3V0c2lkZURheXMgPSBfcHJvcHM4LmVuYWJsZU91dHNpZGVEYXlzLFxuICAgICAgICAgICAgaGlkZUtleWJvYXJkU2hvcnRjdXRzUGFuZWwgPSBfcHJvcHM4LmhpZGVLZXlib2FyZFNob3J0Y3V0c1BhbmVsLFxuICAgICAgICAgICAgZGF5U2l6ZSA9IF9wcm9wczguZGF5U2l6ZSxcbiAgICAgICAgICAgIGZpcnN0RGF5T2ZXZWVrID0gX3Byb3BzOC5maXJzdERheU9mV2VlayxcbiAgICAgICAgICAgIHJlbmRlckRheSA9IF9wcm9wczgucmVuZGVyRGF5LFxuICAgICAgICAgICAgcmVuZGVyQ2FsZW5kYXJJbmZvID0gX3Byb3BzOC5yZW5kZXJDYWxlbmRhckluZm8sXG4gICAgICAgICAgICBpc0ZvY3VzZWQgPSBfcHJvcHM4LmlzRm9jdXNlZCxcbiAgICAgICAgICAgIGlzUlRMID0gX3Byb3BzOC5pc1JUTCxcbiAgICAgICAgICAgIHBocmFzZXMgPSBfcHJvcHM4LnBocmFzZXM7XG4gICAgICAgIHZhciBfc3RhdGU3ID0gdGhpcy5zdGF0ZSxcbiAgICAgICAgICAgIGN1cnJlbnRNb250aCA9IF9zdGF0ZTcuY3VycmVudE1vbnRoLFxuICAgICAgICAgICAgdmlzaWJsZURheXMgPSBfc3RhdGU3LnZpc2libGVEYXlzO1xuXG4gICAgICAgIHJldHVybiBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChfRGF5UGlja2VyMlsnZGVmYXVsdCddLCB7XG4gICAgICAgICAgb3JpZW50YXRpb246IG9yaWVudGF0aW9uLFxuICAgICAgICAgIGVuYWJsZU91dHNpZGVEYXlzOiBlbmFibGVPdXRzaWRlRGF5cyxcbiAgICAgICAgICBtb2RpZmllcnM6IHZpc2libGVEYXlzLFxuICAgICAgICAgIG51bWJlck9mTW9udGhzOiBudW1iZXJPZk1vbnRocyxcbiAgICAgICAgICBvbkRheUNsaWNrOiB0aGlzLm9uRGF5Q2xpY2ssXG4gICAgICAgICAgb25EYXlNb3VzZUVudGVyOiB0aGlzLm9uRGF5TW91c2VFbnRlcixcbiAgICAgICAgICBvbkRheU1vdXNlTGVhdmU6IHRoaXMub25EYXlNb3VzZUxlYXZlLFxuICAgICAgICAgIG9uUHJldk1vbnRoQ2xpY2s6IHRoaXMub25QcmV2TW9udGhDbGljayxcbiAgICAgICAgICBvbk5leHRNb250aENsaWNrOiB0aGlzLm9uTmV4dE1vbnRoQ2xpY2ssXG4gICAgICAgICAgbW9udGhGb3JtYXQ6IG1vbnRoRm9ybWF0LFxuICAgICAgICAgIHdpdGhQb3J0YWw6IHdpdGhQb3J0YWwsXG4gICAgICAgICAgaGlkZGVuOiAhZm9jdXNlZCxcbiAgICAgICAgICBoaWRlS2V5Ym9hcmRTaG9ydGN1dHNQYW5lbDogaGlkZUtleWJvYXJkU2hvcnRjdXRzUGFuZWwsXG4gICAgICAgICAgaW5pdGlhbFZpc2libGVNb250aDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZnVuY3Rpb24gaW5pdGlhbFZpc2libGVNb250aCgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnRNb250aDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGluaXRpYWxWaXNpYmxlTW9udGg7XG4gICAgICAgICAgfSgpLFxuICAgICAgICAgIGZpcnN0RGF5T2ZXZWVrOiBmaXJzdERheU9mV2VlayxcbiAgICAgICAgICBuYXZQcmV2OiBuYXZQcmV2LFxuICAgICAgICAgIG5hdk5leHQ6IG5hdk5leHQsXG4gICAgICAgICAgcmVuZGVyTW9udGg6IHJlbmRlck1vbnRoLFxuICAgICAgICAgIHJlbmRlckRheTogcmVuZGVyRGF5LFxuICAgICAgICAgIHJlbmRlckNhbGVuZGFySW5mbzogcmVuZGVyQ2FsZW5kYXJJbmZvLFxuICAgICAgICAgIGlzRm9jdXNlZDogaXNGb2N1c2VkLFxuICAgICAgICAgIGdldEZpcnN0Rm9jdXNhYmxlRGF5OiB0aGlzLmdldEZpcnN0Rm9jdXNhYmxlRGF5LFxuICAgICAgICAgIG9uQmx1cjogdGhpcy5vbkRheVBpY2tlckJsdXIsXG4gICAgICAgICAgcGhyYXNlczogcGhyYXNlcyxcbiAgICAgICAgICBkYXlTaXplOiBkYXlTaXplLFxuICAgICAgICAgIGlzUlRMOiBpc1JUTFxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlbmRlcjtcbiAgICB9KClcbiAgfV0pO1xuXG4gIHJldHVybiBEYXlQaWNrZXJTaW5nbGVEYXRlQ29udHJvbGxlcjtcbn0oX3JlYWN0MlsnZGVmYXVsdCddLkNvbXBvbmVudCk7XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IERheVBpY2tlclNpbmdsZURhdGVDb250cm9sbGVyO1xuXG5EYXlQaWNrZXJTaW5nbGVEYXRlQ29udHJvbGxlci5wcm9wVHlwZXMgPSBwcm9wVHlwZXM7XG5EYXlQaWNrZXJTaW5nbGVEYXRlQ29udHJvbGxlci5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5cbi8qKiovIH0pXG4vKioqKioqLyBdKTsiLCJtb2R1bGUuZXhwb3J0cyA9XG4vKioqKioqLyAoZnVuY3Rpb24obW9kdWxlcykgeyAvLyB3ZWJwYWNrQm9vdHN0cmFwXG4vKioqKioqLyBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4vKioqKioqLyBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4vKioqKioqLyBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbi8qKioqKiovIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuLyoqKioqKi8gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbi8qKioqKiovIFx0XHRcdGk6IG1vZHVsZUlkLFxuLyoqKioqKi8gXHRcdFx0bDogZmFsc2UsXG4vKioqKioqLyBcdFx0XHRleHBvcnRzOiB7fVxuLyoqKioqKi8gXHRcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuLyoqKioqKi8gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4vKioqKioqLyBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuLyoqKioqKi8gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbi8qKioqKiovIFx0fVxuLyoqKioqKi9cbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gaWRlbnRpdHkgZnVuY3Rpb24gZm9yIGNhbGxpbmcgaGFybW9ueSBpbXBvcnRzIHdpdGggdGhlIGNvcnJlY3QgY29udGV4dFxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmkgPSBmdW5jdGlvbih2YWx1ZSkgeyByZXR1cm4gdmFsdWU7IH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4vKioqKioqLyBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuLyoqKioqKi8gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHtcbi8qKioqKiovIFx0XHRcdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcbi8qKioqKiovIFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcbi8qKioqKiovIFx0XHRcdFx0Z2V0OiBnZXR0ZXJcbi8qKioqKiovIFx0XHRcdH0pO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuLyoqKioqKi8gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuLyoqKioqKi8gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbi8qKioqKiovIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4vKioqKioqLyBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuLyoqKioqKi8gXHRcdHJldHVybiBnZXR0ZXI7XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLyoqKioqKi8gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSA3Myk7XG4vKioqKioqLyB9KVxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovICh7XG5cbi8qKiovIDA6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInJlYWN0XCIpO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gMTpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiYWlyYm5iLXByb3AtdHlwZXNcIik7XG5cbi8qKiovIH0pLFxuXG4vKioqLyAxMTpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9yZWFjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBcImRlZmF1bHRcIjogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgU1ZHID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFNWRywgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gU1ZHKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTVkcpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChTVkcuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihTVkcpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhTVkcsIFt7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiBfcmVhY3QyW1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgIFwic3ZnXCIsXG4gICAgICAgICAgX2V4dGVuZHMoeyB2aWV3Qm94OiBcIjAgMCAxMiAxMlwiIH0sIHRoaXMucHJvcHMpLFxuICAgICAgICAgIF9yZWFjdDJbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHsgZmlsbFJ1bGU6IFwiZXZlbm9kZFwiLCBkOiBcIk0xMS41My40N2EuNzUuNzUgMCAwIDAtMS4wNjEgMGwtNC40NyA0LjQ3TDEuNTI5LjQ3QS43NS43NSAwIDEgMCAuNDY4IDEuNTMxbDQuNDcgNC40Ny00LjQ3IDQuNDdhLjc1Ljc1IDAgMSAwIDEuMDYxIDEuMDYxbDQuNDctNC40NyA0LjQ3IDQuNDdhLjc1Ljc1IDAgMSAwIDEuMDYxLTEuMDYxbC00LjQ3LTQuNDcgNC40Ny00LjQ3YS43NS43NSAwIDAgMCAwLTEuMDYxelwiIH0pXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZW5kZXI7XG4gICAgfSgpXG4gIH1dKTtcblxuICByZXR1cm4gU1ZHO1xufShfcmVhY3QyW1wiZGVmYXVsdFwiXS5Db21wb25lbnQpO1xuXG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IFNWRztcblxuLyoqKi8gfSksXG5cbi8qKiovIDI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uL2RlZmF1bHRQaHJhc2VzXCIpO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gMjU6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfcmVhY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgXCJkZWZhdWx0XCI6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIFNWRyA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhTVkcsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFNWRygpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU1ZHKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoU1ZHLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoU1ZHKSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoU1ZHLCBbe1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gX3JlYWN0MltcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChcbiAgICAgICAgICBcInN2Z1wiLFxuICAgICAgICAgIF9leHRlbmRzKHsgeG1sbnM6IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiwgdmlld0JveDogXCIwIDAgMTM5My4xIDE1MDBcIiB9LCB0aGlzLnByb3BzKSxcbiAgICAgICAgICBfcmVhY3QyW1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7IGQ6IFwiTTEwNy4yIDEzOTIuOWgyNDEuMXYtMjQxLjFIMTA3LjJ2MjQxLjF6bTI5NC43IDBoMjY3Ljl2LTI0MS4xSDQwMS45djI0MS4xem0tMjk0LjctMjk0LjdoMjQxLjFWODMwLjRIMTA3LjJ2MjY3Ljh6bTI5NC43IDBoMjY3LjlWODMwLjRINDAxLjl2MjY3Ljh6TTEwNy4yIDc3Ni44aDI0MS4xVjUzNS43SDEwNy4ydjI0MS4xem02MTYuMiA2MTYuMWgyNjcuOXYtMjQxLjFINzIzLjR2MjQxLjF6TTQwMS45IDc3Ni44aDI2Ny45VjUzNS43SDQwMS45djI0MS4xem02NDIuOSA2MTYuMUgxMjg2di0yNDEuMWgtMjQxLjF2MjQxLjF6bS0zMjEuNC0yOTQuN2gyNjcuOVY4MzAuNEg3MjMuNHYyNjcuOHpNNDI4LjcgMzc1VjEzMy45YzAtNy4zLTIuNy0xMy41LTgtMTguOC01LjMtNS4zLTExLjYtOC0xOC44LThoLTUzLjZjLTcuMyAwLTEzLjUgMi43LTE4LjggOC01LjMgNS4zLTggMTEuNi04IDE4LjhWMzc1YzAgNy4zIDIuNyAxMy41IDggMTguOCA1LjMgNS4zIDExLjYgOCAxOC44IDhoNTMuNmM3LjMgMCAxMy41LTIuNyAxOC44LTggNS4zLTUuMyA4LTExLjUgOC0xOC44em02MTYuMSA3MjMuMkgxMjg2VjgzMC40aC0yNDEuMXYyNjcuOHpNNzIzLjQgNzc2LjhoMjY3LjlWNTM1LjdINzIzLjR2MjQxLjF6bTMyMS40IDBIMTI4NlY1MzUuN2gtMjQxLjF2MjQxLjF6bTI2LjgtNDAxLjhWMTMzLjljMC03LjMtMi43LTEzLjUtOC0xOC44LTUuMy01LjMtMTEuNi04LTE4LjgtOGgtNTMuNmMtNy4zIDAtMTMuNSAyLjctMTguOCA4LTUuMyA1LjMtOCAxMS42LTggMTguOFYzNzVjMCA3LjMgMi43IDEzLjUgOCAxOC44IDUuMyA1LjMgMTEuNiA4IDE4LjggOGg1My42YzcuMyAwIDEzLjUtMi43IDE4LjgtOCA1LjQtNS4zIDgtMTEuNSA4LTE4Ljh6bTMyMS41LTUzLjZ2MTA3MS40YzAgMjktMTAuNiA1NC4xLTMxLjggNzUuMy0yMS4yIDIxLjItNDYuMyAzMS44LTc1LjMgMzEuOEgxMDcuMmMtMjkgMC01NC4xLTEwLjYtNzUuMy0zMS44QzEwLjYgMTQ0NyAwIDE0MjEuOSAwIDEzOTIuOVYzMjEuNGMwLTI5IDEwLjYtNTQuMSAzMS44LTc1LjNzNDYuMy0zMS44IDc1LjMtMzEuOGgxMDcuMnYtODAuNGMwLTM2LjggMTMuMS02OC40IDM5LjMtOTQuNlMzMTEuNCAwIDM0OC4zIDBoNTMuNmMzNi44IDAgNjguNCAxMy4xIDk0LjYgMzkuMyAyNi4yIDI2LjIgMzkuMyA1Ny44IDM5LjMgOTQuNnY4MC40aDMyMS41di04MC40YzAtMzYuOCAxMy4xLTY4LjQgMzkuMy05NC42QzkyMi45IDEzLjEgOTU0LjQgMCA5OTEuMyAwaDUzLjZjMzYuOCAwIDY4LjQgMTMuMSA5NC42IDM5LjNzMzkuMyA1Ny44IDM5LjMgOTQuNnY4MC40SDEyODZjMjkgMCA1NC4xIDEwLjYgNzUuMyAzMS44IDIxLjIgMjEuMiAzMS44IDQ2LjMgMzEuOCA3NS4zelwiIH0pXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZW5kZXI7XG4gICAgfSgpXG4gIH1dKTtcblxuICByZXR1cm4gU1ZHO1xufShfcmVhY3QyW1wiZGVmYXVsdFwiXS5Db21wb25lbnQpO1xuXG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IFNWRztcblxuLyoqKi8gfSksXG5cbi8qKiovIDM6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInByb3AtdHlwZXNcIik7XG5cbi8qKiovIH0pLFxuXG4vKioqLyAzMzpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi9EYXRlSW5wdXRcIik7XG5cbi8qKiovIH0pLFxuXG4vKioqLyA1OlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi91dGlscy9nZXRQaHJhc2VQcm9wVHlwZXNcIik7XG5cbi8qKiovIH0pLFxuXG4vKioqLyA2OlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gNzM6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7ZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO2lmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7T2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICAgIH1cbiAgfXJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gICAgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtyZXR1cm4gQ29uc3RydWN0b3I7XG4gIH07XG59KCk7XG5cbnZhciBfcmVhY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9wcm9wVHlwZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xuXG52YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG52YXIgX2FpcmJuYlByb3BUeXBlcyA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG5cbnZhciBfY2xhc3NuYW1lcyA9IF9fd2VicGFja19yZXF1aXJlX18oNik7XG5cbnZhciBfY2xhc3NuYW1lczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc25hbWVzKTtcblxudmFyIF9kZWZhdWx0UGhyYXNlcyA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG5cbnZhciBfZ2V0UGhyYXNlUHJvcFR5cGVzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KTtcblxudmFyIF9nZXRQaHJhc2VQcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0UGhyYXNlUHJvcFR5cGVzKTtcblxudmFyIF9EYXRlSW5wdXQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMzKTtcblxudmFyIF9EYXRlSW5wdXQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfRGF0ZUlucHV0KTtcblxudmFyIF9jbG9zZSA9IF9fd2VicGFja19yZXF1aXJlX18oMTEpO1xuXG52YXIgX2Nsb3NlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Nsb3NlKTtcblxudmFyIF9jYWxlbmRhciA9IF9fd2VicGFja19yZXF1aXJlX18oMjUpO1xuXG52YXIgX2NhbGVuZGFyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NhbGVuZGFyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTtcbn1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gIH1cbn1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkge1xuICBpZiAoIXNlbGYpIHtcbiAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gIH1yZXR1cm4gY2FsbCAmJiAoKHR5cGVvZiBjYWxsID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2YoY2FsbCkpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7XG59XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyAodHlwZW9mIHN1cGVyQ2xhc3MgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihzdXBlckNsYXNzKSkpO1xuICB9c3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTtpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG59XG5cbnZhciBwcm9wVHlwZXMgPSAoMCwgX2FpcmJuYlByb3BUeXBlcy5mb3JiaWRFeHRyYVByb3BzKSh7XG4gIGlkOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLnN0cmluZy5pc1JlcXVpcmVkLFxuICBwbGFjZWhvbGRlcjogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5zdHJpbmcsIC8vIGFsc28gdXNlZCBhcyBsYWJlbFxuICBkaXNwbGF5VmFsdWU6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uc3RyaW5nLFxuICBpbnB1dFZhbHVlOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLnN0cmluZyxcbiAgc2NyZWVuUmVhZGVyTWVzc2FnZTogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5zdHJpbmcsXG4gIGZvY3VzZWQ6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uYm9vbCxcbiAgaXNGb2N1c2VkOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmJvb2wsIC8vIGRlc2NyaWJlcyBhY3R1YWwgRE9NIGZvY3VzXG4gIGRpc2FibGVkOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmJvb2wsXG4gIHJlcXVpcmVkOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmJvb2wsXG4gIHJlYWRPbmx5OiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmJvb2wsXG4gIHNob3dDYXJldDogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5ib29sLFxuICBzaG93Q2xlYXJEYXRlOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmJvb2wsXG4gIGN1c3RvbUNsb3NlSWNvbjogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5ub2RlLFxuICBzaG93RGVmYXVsdElucHV0SWNvbjogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5ib29sLFxuICBjdXN0b21JbnB1dEljb246IF9wcm9wVHlwZXMyWydkZWZhdWx0J10ubm9kZSxcbiAgaXNSVEw6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uYm9vbCxcbiAgb25DaGFuZ2U6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uZnVuYyxcbiAgb25DbGVhckRhdGU6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uZnVuYyxcbiAgb25Gb2N1czogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5mdW5jLFxuICBvbktleURvd25TaGlmdFRhYjogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5mdW5jLFxuICBvbktleURvd25UYWI6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uZnVuYyxcbiAgb25LZXlEb3duQXJyb3dEb3duOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmZ1bmMsXG5cbiAgLy8gaTE4blxuICBwaHJhc2VzOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLnNoYXBlKCgwLCBfZ2V0UGhyYXNlUHJvcFR5cGVzMlsnZGVmYXVsdCddKShfZGVmYXVsdFBocmFzZXMuU2luZ2xlRGF0ZVBpY2tlcklucHV0UGhyYXNlcykpXG59KTtcblxudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgcGxhY2Vob2xkZXI6ICdTZWxlY3QgRGF0ZScsXG4gIGRpc3BsYXlWYWx1ZTogJycsXG4gIGlucHV0VmFsdWU6ICcnLFxuICBzY3JlZW5SZWFkZXJNZXNzYWdlOiAnJyxcbiAgZm9jdXNlZDogZmFsc2UsXG4gIGlzRm9jdXNlZDogZmFsc2UsXG4gIGRpc2FibGVkOiBmYWxzZSxcbiAgcmVxdWlyZWQ6IGZhbHNlLFxuICByZWFkT25seTogZmFsc2UsXG4gIHNob3dDYXJldDogZmFsc2UsXG4gIHNob3dDbGVhckRhdGU6IGZhbHNlLFxuICBzaG93RGVmYXVsdElucHV0SWNvbjogZmFsc2UsXG4gIGN1c3RvbUNsb3NlSWNvbjogbnVsbCxcbiAgY3VzdG9tSW5wdXRJY29uOiBudWxsLFxuICBpc1JUTDogZmFsc2UsXG5cbiAgb25DaGFuZ2U6IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBvbkNoYW5nZSgpIHt9XG5cbiAgICByZXR1cm4gb25DaGFuZ2U7XG4gIH0oKSxcbiAgb25DbGVhckRhdGU6IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBvbkNsZWFyRGF0ZSgpIHt9XG5cbiAgICByZXR1cm4gb25DbGVhckRhdGU7XG4gIH0oKSxcbiAgb25Gb2N1czogZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIG9uRm9jdXMoKSB7fVxuXG4gICAgcmV0dXJuIG9uRm9jdXM7XG4gIH0oKSxcbiAgb25LZXlEb3duU2hpZnRUYWI6IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBvbktleURvd25TaGlmdFRhYigpIHt9XG5cbiAgICByZXR1cm4gb25LZXlEb3duU2hpZnRUYWI7XG4gIH0oKSxcbiAgb25LZXlEb3duVGFiOiBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gb25LZXlEb3duVGFiKCkge31cblxuICAgIHJldHVybiBvbktleURvd25UYWI7XG4gIH0oKSxcbiAgb25LZXlEb3duQXJyb3dEb3duOiBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gb25LZXlEb3duQXJyb3dEb3duKCkge31cblxuICAgIHJldHVybiBvbktleURvd25BcnJvd0Rvd247XG4gIH0oKSxcblxuICAvLyBpMThuXG4gIHBocmFzZXM6IF9kZWZhdWx0UGhyYXNlcy5TaW5nbGVEYXRlUGlja2VySW5wdXRQaHJhc2VzXG59O1xuXG52YXIgU2luZ2xlRGF0ZVBpY2tlcklucHV0ID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFNpbmdsZURhdGVQaWNrZXJJbnB1dCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gU2luZ2xlRGF0ZVBpY2tlcklucHV0KHByb3BzKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFNpbmdsZURhdGVQaWNrZXJJbnB1dCk7XG5cbiAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoU2luZ2xlRGF0ZVBpY2tlcklucHV0Ll9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoU2luZ2xlRGF0ZVBpY2tlcklucHV0KSkuY2FsbCh0aGlzLCBwcm9wcykpO1xuXG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBpc0NsZWFyRGF0ZUhvdmVyZWQ6IGZhbHNlXG4gICAgfTtcblxuICAgIF90aGlzLm9uQ2xlYXJEYXRlTW91c2VFbnRlciA9IF90aGlzLm9uQ2xlYXJEYXRlTW91c2VFbnRlci5iaW5kKF90aGlzKTtcbiAgICBfdGhpcy5vbkNsZWFyRGF0ZU1vdXNlTGVhdmUgPSBfdGhpcy5vbkNsZWFyRGF0ZU1vdXNlTGVhdmUuYmluZChfdGhpcyk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFNpbmdsZURhdGVQaWNrZXJJbnB1dCwgW3tcbiAgICBrZXk6ICdvbkNsZWFyRGF0ZU1vdXNlRW50ZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBvbkNsZWFyRGF0ZU1vdXNlRW50ZXIoKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIGlzQ2xlYXJEYXRlSG92ZXJlZDogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG9uQ2xlYXJEYXRlTW91c2VFbnRlcjtcbiAgICB9KClcbiAgfSwge1xuICAgIGtleTogJ29uQ2xlYXJEYXRlTW91c2VMZWF2ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIG9uQ2xlYXJEYXRlTW91c2VMZWF2ZSgpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgaXNDbGVhckRhdGVIb3ZlcmVkOiBmYWxzZVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG9uQ2xlYXJEYXRlTW91c2VMZWF2ZTtcbiAgICB9KClcbiAgfSwge1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgdmFyIGlzQ2xlYXJEYXRlSG92ZXJlZCA9IHRoaXMuc3RhdGUuaXNDbGVhckRhdGVIb3ZlcmVkO1xuICAgICAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICAgIGlkID0gX3Byb3BzLmlkLFxuICAgICAgICAgICAgcGxhY2Vob2xkZXIgPSBfcHJvcHMucGxhY2Vob2xkZXIsXG4gICAgICAgICAgICBkaXNwbGF5VmFsdWUgPSBfcHJvcHMuZGlzcGxheVZhbHVlLFxuICAgICAgICAgICAgaW5wdXRWYWx1ZSA9IF9wcm9wcy5pbnB1dFZhbHVlLFxuICAgICAgICAgICAgZm9jdXNlZCA9IF9wcm9wcy5mb2N1c2VkLFxuICAgICAgICAgICAgaXNGb2N1c2VkID0gX3Byb3BzLmlzRm9jdXNlZCxcbiAgICAgICAgICAgIGRpc2FibGVkID0gX3Byb3BzLmRpc2FibGVkLFxuICAgICAgICAgICAgcmVxdWlyZWQgPSBfcHJvcHMucmVxdWlyZWQsXG4gICAgICAgICAgICByZWFkT25seSA9IF9wcm9wcy5yZWFkT25seSxcbiAgICAgICAgICAgIHNob3dDYXJldCA9IF9wcm9wcy5zaG93Q2FyZXQsXG4gICAgICAgICAgICBzaG93Q2xlYXJEYXRlID0gX3Byb3BzLnNob3dDbGVhckRhdGUsXG4gICAgICAgICAgICBzaG93RGVmYXVsdElucHV0SWNvbiA9IF9wcm9wcy5zaG93RGVmYXVsdElucHV0SWNvbixcbiAgICAgICAgICAgIHBocmFzZXMgPSBfcHJvcHMucGhyYXNlcyxcbiAgICAgICAgICAgIG9uQ2xlYXJEYXRlID0gX3Byb3BzLm9uQ2xlYXJEYXRlLFxuICAgICAgICAgICAgb25DaGFuZ2UgPSBfcHJvcHMub25DaGFuZ2UsXG4gICAgICAgICAgICBvbkZvY3VzID0gX3Byb3BzLm9uRm9jdXMsXG4gICAgICAgICAgICBvbktleURvd25TaGlmdFRhYiA9IF9wcm9wcy5vbktleURvd25TaGlmdFRhYixcbiAgICAgICAgICAgIG9uS2V5RG93blRhYiA9IF9wcm9wcy5vbktleURvd25UYWIsXG4gICAgICAgICAgICBvbktleURvd25BcnJvd0Rvd24gPSBfcHJvcHMub25LZXlEb3duQXJyb3dEb3duLFxuICAgICAgICAgICAgc2NyZWVuUmVhZGVyTWVzc2FnZSA9IF9wcm9wcy5zY3JlZW5SZWFkZXJNZXNzYWdlLFxuICAgICAgICAgICAgY3VzdG9tQ2xvc2VJY29uID0gX3Byb3BzLmN1c3RvbUNsb3NlSWNvbixcbiAgICAgICAgICAgIGN1c3RvbUlucHV0SWNvbiA9IF9wcm9wcy5jdXN0b21JbnB1dEljb24sXG4gICAgICAgICAgICBpc1JUTCA9IF9wcm9wcy5pc1JUTDtcblxuICAgICAgICB2YXIgaW5wdXRJY29uID0gY3VzdG9tSW5wdXRJY29uIHx8IF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KF9jYWxlbmRhcjJbJ2RlZmF1bHQnXSwgbnVsbCk7XG4gICAgICAgIHZhciBjbG9zZUljb24gPSBjdXN0b21DbG9zZUljb24gfHwgX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoX2Nsb3NlMlsnZGVmYXVsdCddLCBudWxsKTtcbiAgICAgICAgdmFyIHNjcmVlblJlYWRlclRleHQgPSBzY3JlZW5SZWFkZXJNZXNzYWdlIHx8IHBocmFzZXMua2V5Ym9hcmROYXZpZ2F0aW9uSW5zdHJ1Y3Rpb25zO1xuXG4gICAgICAgIHJldHVybiBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudCgnZGl2Jywge1xuICAgICAgICAgIGNsYXNzTmFtZTogKDAsIF9jbGFzc25hbWVzMlsnZGVmYXVsdCddKSgnU2luZ2xlRGF0ZVBpY2tlcklucHV0Jywge1xuICAgICAgICAgICAgJ1NpbmdsZURhdGVQaWNrZXJJbnB1dC0tcnRsJzogaXNSVExcbiAgICAgICAgICB9KVxuICAgICAgICB9LCAoc2hvd0RlZmF1bHRJbnB1dEljb24gfHwgY3VzdG9tSW5wdXRJY29uICE9PSBudWxsKSAmJiBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudCgnYnV0dG9uJywge1xuICAgICAgICAgIHR5cGU6ICdidXR0b24nLFxuICAgICAgICAgIGNsYXNzTmFtZTogJ1NpbmdsZURhdGVQaWNrZXJJbnB1dF9fY2FsZW5kYXItaWNvbicsXG4gICAgICAgICAgZGlzYWJsZWQ6IGRpc2FibGVkLFxuICAgICAgICAgICdhcmlhLWxhYmVsJzogcGhyYXNlcy5mb2N1c1N0YXJ0RGF0ZSxcbiAgICAgICAgICBvbkNsaWNrOiBvbkZvY3VzXG4gICAgICAgIH0sIGlucHV0SWNvbiksIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KF9EYXRlSW5wdXQyWydkZWZhdWx0J10sIHtcbiAgICAgICAgICBpZDogaWQsXG4gICAgICAgICAgcGxhY2Vob2xkZXI6IHBsYWNlaG9sZGVyIC8vIGFsc28gdXNlZCBhcyBsYWJlbFxuICAgICAgICAgICwgZGlzcGxheVZhbHVlOiBkaXNwbGF5VmFsdWUsXG4gICAgICAgICAgaW5wdXRWYWx1ZTogaW5wdXRWYWx1ZSxcbiAgICAgICAgICBzY3JlZW5SZWFkZXJNZXNzYWdlOiBzY3JlZW5SZWFkZXJUZXh0LFxuICAgICAgICAgIGZvY3VzZWQ6IGZvY3VzZWQsXG4gICAgICAgICAgaXNGb2N1c2VkOiBpc0ZvY3VzZWQsXG4gICAgICAgICAgZGlzYWJsZWQ6IGRpc2FibGVkLFxuICAgICAgICAgIHJlcXVpcmVkOiByZXF1aXJlZCxcbiAgICAgICAgICByZWFkT25seTogcmVhZE9ubHksXG4gICAgICAgICAgc2hvd0NhcmV0OiBzaG93Q2FyZXQsXG4gICAgICAgICAgb25DaGFuZ2U6IG9uQ2hhbmdlLFxuICAgICAgICAgIG9uRm9jdXM6IG9uRm9jdXMsXG4gICAgICAgICAgb25LZXlEb3duU2hpZnRUYWI6IG9uS2V5RG93blNoaWZ0VGFiLFxuICAgICAgICAgIG9uS2V5RG93blRhYjogb25LZXlEb3duVGFiLFxuICAgICAgICAgIG9uS2V5RG93bkFycm93RG93bjogb25LZXlEb3duQXJyb3dEb3duXG4gICAgICAgIH0pLCBzaG93Q2xlYXJEYXRlICYmIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KCdidXR0b24nLCB7XG4gICAgICAgICAgdHlwZTogJ2J1dHRvbicsXG4gICAgICAgICAgY2xhc3NOYW1lOiAoMCwgX2NsYXNzbmFtZXMyWydkZWZhdWx0J10pKCdTaW5nbGVEYXRlUGlja2VySW5wdXRfX2NsZWFyLWRhdGUnLCB7XG4gICAgICAgICAgICAnU2luZ2xlRGF0ZVBpY2tlcklucHV0X19jbGVhci1kYXRlLS1oaWRlJzogIWRpc3BsYXlWYWx1ZSxcbiAgICAgICAgICAgICdTaW5nbGVEYXRlUGlja2VySW5wdXRfX2NsZWFyLWRhdGUtLWhvdmVyJzogaXNDbGVhckRhdGVIb3ZlcmVkXG4gICAgICAgICAgfSksXG4gICAgICAgICAgJ2FyaWEtbGFiZWwnOiBwaHJhc2VzLmNsZWFyRGF0ZSxcbiAgICAgICAgICBvbk1vdXNlRW50ZXI6IHRoaXMub25DbGVhckRhdGVNb3VzZUVudGVyLFxuICAgICAgICAgIG9uTW91c2VMZWF2ZTogdGhpcy5vbkNsZWFyRGF0ZU1vdXNlTGVhdmUsXG4gICAgICAgICAgb25DbGljazogb25DbGVhckRhdGVcbiAgICAgICAgfSwgX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiAnRGF0ZVJhbmdlUGlja2VySW5wdXRfX2Nsb3NlJyB9LCBjbG9zZUljb24pKSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZW5kZXI7XG4gICAgfSgpXG4gIH1dKTtcblxuICByZXR1cm4gU2luZ2xlRGF0ZVBpY2tlcklucHV0O1xufShfcmVhY3QyWydkZWZhdWx0J10uQ29tcG9uZW50KTtcblxuZXhwb3J0c1snZGVmYXVsdCddID0gU2luZ2xlRGF0ZVBpY2tlcklucHV0O1xuXG5TaW5nbGVEYXRlUGlja2VySW5wdXQucHJvcFR5cGVzID0gcHJvcFR5cGVzO1xuU2luZ2xlRGF0ZVBpY2tlcklucHV0LmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcblxuLyoqKi8gfSlcblxuLyoqKioqKi8gfSk7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnO1xyXG5pbXBvcnQgeyBTaW5nbGVEYXRlUGlja2VyIH0gZnJvbSAncmVhY3QtZGF0ZXMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRXhwZW5zZUZvcm0gZXh0ZW5kcyBSZWFjdC5Db21wb25lbnR7XHJcbiAgY29uc3RydWN0b3IocHJvcHMpe1xyXG4gICAgc3VwZXIocHJvcHMpO1xyXG5cclxuICAgIHRoaXMuc3RhdGUgPSB7XHJcbiAgICAgIGRlc2NyaXB0aW9uOiBwcm9wcy5leHBlbnNlID8gcHJvcHMuZXhwZW5zZS5kZXNjcmlwdGlvbiA6ICcnLFxyXG4gICAgICBhbW91bnQ6IHByb3BzLmV4cGVuc2UgPyAocHJvcHMuZXhwZW5zZS5hbW91bnQgLyAxMDApLnRvU3RyaW5nKCkgOiAnJyxcclxuICAgICAgbm90ZTogcHJvcHMuZXhwZW5zZSA/IHByb3BzLmV4cGVuc2Uubm90ZSA6ICcnLFxyXG4gICAgICBjcmVhdGVkQXQ6IHByb3BzLmV4cGVuc2UgPyBtb21lbnQocHJvcHMuZXhwZW5zZS5jcmVhdGVkQXQpIDogbW9tZW50KCksXHJcbiAgICAgIGNhbGFuZGVyRm9jdXNlZDogZmFsc2UsXHJcbiAgICAgIGVycm9yOiAnJ1xyXG4gICAgfVxyXG4gIH1cclxuICBvbkRlc2NyaXB0aW9uQ2hhbmdlID0gKGUpPT57XHJcbiAgICBjb25zdCBkZXNjcmlwdGlvbiA9IGUudGFyZ2V0LnZhbHVlO1xyXG4gICAgdGhpcy5zZXRTdGF0ZSgoKT0+KHsgZGVzY3JpcHRpb24gfSkpO1xyXG4gIH07XHJcbiAgb25BbW91bnRDaGFuZ2UgPSAoZSk9PntcclxuICAgIGNvbnN0IGFtb3VudCA9IGUudGFyZ2V0LnZhbHVlO1xyXG4gICAgXHJcbiAgICBpZighYW1vdW50IHx8IGFtb3VudC5tYXRjaCgvXlxcZHsxLH0oXFwuP1xcZHswLDJ9KSQvKSl7XHJcbiAgICAgIHRoaXMuc2V0U3RhdGUoKCk9Pih7IGFtb3VudCB9KSk7XHJcbiAgICB9XHJcbiAgXHJcbiAgfTtcclxuICBvbk5vdGVDaGFuZ2UgPSAoZSk9PntcclxuICAgIGNvbnN0IG5vdGUgPSBlLnRhcmdldC52YWx1ZTtcclxuICAgIHRoaXMuc2V0U3RhdGUoKCk9Pih7IG5vdGUgfSkpO1xyXG4gIH07XHJcbiAgb25BZGRFeHBlbnNlID0gKGUpPT57XHJcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgfTtcclxuICBvbkRhdGVDaGFuZ2UgPSAoY3JlYXRlZEF0KT0+e1xyXG4gICAgaWYoY3JlYXRlZEF0KXtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSgoKT0+KHsgY3JlYXRlZEF0IH0pKTtcclxuICAgIH1cclxuICB9O1xyXG4gIG9uRm9jdXNDaGFuZ2UgPSAoeyBmb2N1c2VkIH0pPT57XHJcbiAgICB0aGlzLnNldFN0YXRlKCgpPT4oeyBjYWxhbmRlckZvY3VzZWQ6IGZvY3VzZWQgfSkpO1xyXG4gIH07XHJcbiAgb25TdWJtaXQgPSAoZSk9PntcclxuICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgIFxyXG4gICAgaWYoIXRoaXMuc3RhdGUuYW1vdW50IHx8ICF0aGlzLnN0YXRlLmRlc2NyaXB0aW9uKXtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSgoKT0+KHsgZXJyb3I6ICdQbGVhc2UgZW50ZXIgYW1vdW50IGFuZCBkZXNjcmlwdGlvbicgfSkpO1xyXG4gICAgfWVsc2V7XHJcbiAgICAgIHRoaXMuc2V0U3RhdGUoKCk9Pih7IGVycm9yOiAnJyB9KSk7XHJcblxyXG4gICAgICB0aGlzLnByb3BzLm9uU3VibWl0KHtcclxuICAgICAgICBkZXNjcmlwdGlvbjogdGhpcy5zdGF0ZS5kZXNjcmlwdGlvbixcclxuICAgICAgICBhbW91bnQ6IHBhcnNlRmxvYXQodGhpcy5zdGF0ZS5hbW91bnQsIDEwKSAqIDEwMCxcclxuICAgICAgICBjcmVhdGVkQXQ6IHRoaXMuc3RhdGUuY3JlYXRlZEF0LnZhbHVlT2YoKSxcclxuICAgICAgICBub3RlOiB0aGlzLnN0YXRlLm5vdGVcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgcmVuZGVyKCl7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8ZGl2PlxyXG4gICAgICAgIDxkaXY+eyB0aGlzLnN0YXRlLmVycm9yICYmIDxwPnt0aGlzLnN0YXRlLmVycm9yfTwvcD4gfTwvZGl2PlxyXG4gICAgICAgIDxmb3JtIG9uU3VibWl0PXt0aGlzLm9uU3VibWl0fT5cclxuICAgICAgICAgIDxpbnB1dCBcclxuICAgICAgICAgICAgdHlwZT1cInRleHRcIlxyXG4gICAgICAgICAgICBwbGFjZWhvbGRlcj0nZGVzY3JpcHRpb24nXHJcbiAgICAgICAgICAgIHZhbHVlPXt0aGlzLnN0YXRlLmRlc2NyaXB0aW9ufVxyXG4gICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5vbkRlc2NyaXB0aW9uQ2hhbmdlfVxyXG4gICAgICAgICAgICBhdXRvRm9jdXNcclxuICAgICAgICAgIC8+XHJcbiAgICAgICAgICA8aW5wdXQgXHJcbiAgICAgICAgICAgIHR5cGU9J3RleHQnXHJcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyPSdhbW91bnQnXHJcbiAgICAgICAgICAgIHZhbHVlPXt0aGlzLnN0YXRlLmFtb3VudH1cclxuICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMub25BbW91bnRDaGFuZ2V9XHJcbiAgICAgICAgICAvPlxyXG4gICAgICAgICAgPFNpbmdsZURhdGVQaWNrZXJcclxuICAgICAgICAgICAgZGF0ZT17dGhpcy5zdGF0ZS5jcmVhdGVkQXR9XHJcbiAgICAgICAgICAgIGZvY3VzZWQ9e3RoaXMuc3RhdGUuY2FsYW5kZXJGb2N1c2VkfVxyXG4gICAgICAgICAgICBvbkRhdGVDaGFuZ2U9e3RoaXMub25EYXRlQ2hhbmdlfVxyXG4gICAgICAgICAgICBvbkZvY3VzQ2hhbmdlPXt0aGlzLm9uRm9jdXNDaGFuZ2V9XHJcbiAgICAgICAgICAgIG51bWJlck9mTW9udGhzPXsxfVxyXG4gICAgICAgICAgICBpc091dHNpZGVSYW5nZT17KGRheSk9PihmYWxzZSl9XHJcbiAgICAgICAgICAvPlxyXG4gICAgICAgICAgPHRleHRhcmVhIFxyXG4gICAgICAgICAgICBuYW1lPVwibm90ZVwiXHJcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyPSdub3RlJ1xyXG4gICAgICAgICAgICB2YWx1ZT17dGhpcy5zdGF0ZS5ub3RlfVxyXG4gICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5vbk5vdGVDaGFuZ2V9XHJcbiAgICAgICAgICA+PC90ZXh0YXJlYT5cclxuICAgICAgICAgIDxidXR0b24+QWRkIEV4cGVuc2U8L2J1dHRvbj5cclxuICAgICAgICA8L2Zvcm0+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgKTtcclxuICB9O1xyXG59XHJcbiIsIi8vIFVuaXF1ZSBJRCBjcmVhdGlvbiByZXF1aXJlcyBhIGhpZ2ggcXVhbGl0eSByYW5kb20gIyBnZW5lcmF0b3IuICBJbiB0aGVcbi8vIGJyb3dzZXIgdGhpcyBpcyBhIGxpdHRsZSBjb21wbGljYXRlZCBkdWUgdG8gdW5rbm93biBxdWFsaXR5IG9mIE1hdGgucmFuZG9tKClcbi8vIGFuZCBpbmNvbnNpc3RlbnQgc3VwcG9ydCBmb3IgdGhlIGBjcnlwdG9gIEFQSS4gIFdlIGRvIHRoZSBiZXN0IHdlIGNhbiB2aWFcbi8vIGZlYXR1cmUtZGV0ZWN0aW9uXG5cbi8vIGdldFJhbmRvbVZhbHVlcyBuZWVkcyB0byBiZSBpbnZva2VkIGluIGEgY29udGV4dCB3aGVyZSBcInRoaXNcIiBpcyBhIENyeXB0b1xuLy8gaW1wbGVtZW50YXRpb24uIEFsc28sIGZpbmQgdGhlIGNvbXBsZXRlIGltcGxlbWVudGF0aW9uIG9mIGNyeXB0byBvbiBJRTExLlxudmFyIGdldFJhbmRvbVZhbHVlcyA9ICh0eXBlb2YoY3J5cHRvKSAhPSAndW5kZWZpbmVkJyAmJiBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzICYmIGNyeXB0by5nZXRSYW5kb21WYWx1ZXMuYmluZChjcnlwdG8pKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICh0eXBlb2YobXNDcnlwdG8pICE9ICd1bmRlZmluZWQnICYmIHR5cGVvZiB3aW5kb3cubXNDcnlwdG8uZ2V0UmFuZG9tVmFsdWVzID09ICdmdW5jdGlvbicgJiYgbXNDcnlwdG8uZ2V0UmFuZG9tVmFsdWVzLmJpbmQobXNDcnlwdG8pKTtcblxuaWYgKGdldFJhbmRvbVZhbHVlcykge1xuICAvLyBXSEFUV0cgY3J5cHRvIFJORyAtIGh0dHA6Ly93aWtpLndoYXR3Zy5vcmcvd2lraS9DcnlwdG9cbiAgdmFyIHJuZHM4ID0gbmV3IFVpbnQ4QXJyYXkoMTYpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB3aGF0d2dSTkcoKSB7XG4gICAgZ2V0UmFuZG9tVmFsdWVzKHJuZHM4KTtcbiAgICByZXR1cm4gcm5kczg7XG4gIH07XG59IGVsc2Uge1xuICAvLyBNYXRoLnJhbmRvbSgpLWJhc2VkIChSTkcpXG4gIC8vXG4gIC8vIElmIGFsbCBlbHNlIGZhaWxzLCB1c2UgTWF0aC5yYW5kb20oKS4gIEl0J3MgZmFzdCwgYnV0IGlzIG9mIHVuc3BlY2lmaWVkXG4gIC8vIHF1YWxpdHkuXG4gIHZhciBybmRzID0gbmV3IEFycmF5KDE2KTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG1hdGhSTkcoKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIHI7IGkgPCAxNjsgaSsrKSB7XG4gICAgICBpZiAoKGkgJiAweDAzKSA9PT0gMCkgciA9IE1hdGgucmFuZG9tKCkgKiAweDEwMDAwMDAwMDtcbiAgICAgIHJuZHNbaV0gPSByID4+PiAoKGkgJiAweDAzKSA8PCAzKSAmIDB4ZmY7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJuZHM7XG4gIH07XG59XG4iLCIvKipcbiAqIENvbnZlcnQgYXJyYXkgb2YgMTYgYnl0ZSB2YWx1ZXMgdG8gVVVJRCBzdHJpbmcgZm9ybWF0IG9mIHRoZSBmb3JtOlxuICogWFhYWFhYWFgtWFhYWC1YWFhYLVhYWFgtWFhYWFhYWFhYWFhYXG4gKi9cbnZhciBieXRlVG9IZXggPSBbXTtcbmZvciAodmFyIGkgPSAwOyBpIDwgMjU2OyArK2kpIHtcbiAgYnl0ZVRvSGV4W2ldID0gKGkgKyAweDEwMCkudG9TdHJpbmcoMTYpLnN1YnN0cigxKTtcbn1cblxuZnVuY3Rpb24gYnl0ZXNUb1V1aWQoYnVmLCBvZmZzZXQpIHtcbiAgdmFyIGkgPSBvZmZzZXQgfHwgMDtcbiAgdmFyIGJ0aCA9IGJ5dGVUb0hleDtcbiAgLy8gam9pbiB1c2VkIHRvIGZpeCBtZW1vcnkgaXNzdWUgY2F1c2VkIGJ5IGNvbmNhdGVuYXRpb246IGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMxNzUjYzRcbiAgcmV0dXJuIChbXG4gICAgYnRoW2J1ZltpKytdXSwgYnRoW2J1ZltpKytdXSxcbiAgICBidGhbYnVmW2krK11dLCBidGhbYnVmW2krK11dLCAnLScsXG4gICAgYnRoW2J1ZltpKytdXSwgYnRoW2J1ZltpKytdXSwgJy0nLFxuICAgIGJ0aFtidWZbaSsrXV0sIGJ0aFtidWZbaSsrXV0sICctJyxcbiAgICBidGhbYnVmW2krK11dLCBidGhbYnVmW2krK11dLCAnLScsXG4gICAgYnRoW2J1ZltpKytdXSwgYnRoW2J1ZltpKytdXSxcbiAgICBidGhbYnVmW2krK11dLCBidGhbYnVmW2krK11dLFxuICAgIGJ0aFtidWZbaSsrXV0sIGJ0aFtidWZbaSsrXV1cbiAgXSkuam9pbignJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYnl0ZXNUb1V1aWQ7XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDE1LCBZYWhvbyEgSW5jLlxuICogQ29weXJpZ2h0cyBsaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBMaWNlbnNlLiBTZWUgdGhlIGFjY29tcGFueWluZyBMSUNFTlNFIGZpbGUgZm9yIHRlcm1zLlxuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSRUFDVF9TVEFUSUNTID0ge1xuICAgIGNoaWxkQ29udGV4dFR5cGVzOiB0cnVlLFxuICAgIGNvbnRleHRUeXBlczogdHJ1ZSxcbiAgICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gICAgZGlzcGxheU5hbWU6IHRydWUsXG4gICAgZ2V0RGVmYXVsdFByb3BzOiB0cnVlLFxuICAgIG1peGluczogdHJ1ZSxcbiAgICBwcm9wVHlwZXM6IHRydWUsXG4gICAgdHlwZTogdHJ1ZVxufTtcblxudmFyIEtOT1dOX1NUQVRJQ1MgPSB7XG4gICAgbmFtZTogdHJ1ZSxcbiAgICBsZW5ndGg6IHRydWUsXG4gICAgcHJvdG90eXBlOiB0cnVlLFxuICAgIGNhbGxlcjogdHJ1ZSxcbiAgICBhcmd1bWVudHM6IHRydWUsXG4gICAgYXJpdHk6IHRydWVcbn07XG5cbnZhciBpc0dldE93blByb3BlcnR5U3ltYm9sc0F2YWlsYWJsZSA9IHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSAnZnVuY3Rpb24nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgc291cmNlQ29tcG9uZW50LCBjdXN0b21TdGF0aWNzKSB7XG4gICAgaWYgKHR5cGVvZiBzb3VyY2VDb21wb25lbnQgIT09ICdzdHJpbmcnKSB7IC8vIGRvbid0IGhvaXN0IG92ZXIgc3RyaW5nIChodG1sKSBjb21wb25lbnRzXG4gICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoc291cmNlQ29tcG9uZW50KTtcblxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgICAgICBpZiAoaXNHZXRPd25Qcm9wZXJ0eVN5bWJvbHNBdmFpbGFibGUpIHtcbiAgICAgICAgICAgIGtleXMgPSBrZXlzLmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZUNvbXBvbmVudCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBpZiAoIVJFQUNUX1NUQVRJQ1Nba2V5c1tpXV0gJiYgIUtOT1dOX1NUQVRJQ1Nba2V5c1tpXV0gJiYgKCFjdXN0b21TdGF0aWNzIHx8ICFjdXN0b21TdGF0aWNzW2tleXNbaV1dKSkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldENvbXBvbmVudFtrZXlzW2ldXSA9IHNvdXJjZUNvbXBvbmVudFtrZXlzW2ldXTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldENvbXBvbmVudDtcbn07XG4iLCIvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGdsb2JhbGAgZnJvbSBOb2RlLmpzLiAqL1xudmFyIGZyZWVHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCAmJiBnbG9iYWwuT2JqZWN0ID09PSBPYmplY3QgJiYgZ2xvYmFsO1xuXG5leHBvcnQgZGVmYXVsdCBmcmVlR2xvYmFsO1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3ltYm9sT2JzZXJ2YWJsZVBvbnlmaWxsKHJvb3QpIHtcblx0dmFyIHJlc3VsdDtcblx0dmFyIFN5bWJvbCA9IHJvb3QuU3ltYm9sO1xuXG5cdGlmICh0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0aWYgKFN5bWJvbC5vYnNlcnZhYmxlKSB7XG5cdFx0XHRyZXN1bHQgPSBTeW1ib2wub2JzZXJ2YWJsZTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmVzdWx0ID0gU3ltYm9sKCdvYnNlcnZhYmxlJyk7XG5cdFx0XHRTeW1ib2wub2JzZXJ2YWJsZSA9IHJlc3VsdDtcblx0XHR9XG5cdH0gZWxzZSB7XG5cdFx0cmVzdWx0ID0gJ0BAb2JzZXJ2YWJsZSc7XG5cdH1cblxuXHRyZXR1cm4gcmVzdWx0O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDb3B5cmlnaHQgMjAxNSwgWWFob28hIEluYy5cbiAqIENvcHlyaWdodHMgbGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgTGljZW5zZS4gU2VlIHRoZSBhY2NvbXBhbnlpbmcgTElDRU5TRSBmaWxlIGZvciB0ZXJtcy5cbiAqL1xudmFyIFJFQUNUX1NUQVRJQ1MgPSB7XG4gICAgY2hpbGRDb250ZXh0VHlwZXM6IHRydWUsXG4gICAgY29udGV4dFR5cGVzOiB0cnVlLFxuICAgIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgICBnZXREZWZhdWx0UHJvcHM6IHRydWUsXG4gICAgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzOiB0cnVlLFxuICAgIG1peGluczogdHJ1ZSxcbiAgICBwcm9wVHlwZXM6IHRydWUsXG4gICAgdHlwZTogdHJ1ZVxufTtcblxudmFyIEtOT1dOX1NUQVRJQ1MgPSB7XG4gICAgbmFtZTogdHJ1ZSxcbiAgICBsZW5ndGg6IHRydWUsXG4gICAgcHJvdG90eXBlOiB0cnVlLFxuICAgIGNhbGxlcjogdHJ1ZSxcbiAgICBjYWxsZWU6IHRydWUsXG4gICAgYXJndW1lbnRzOiB0cnVlLFxuICAgIGFyaXR5OiB0cnVlXG59O1xuXG52YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBnZXRQcm90b3R5cGVPZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbnZhciBvYmplY3RQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZiAmJiBnZXRQcm90b3R5cGVPZihPYmplY3QpO1xuXG5mdW5jdGlvbiBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIHNvdXJjZUNvbXBvbmVudCwgYmxhY2tsaXN0KSB7XG4gICAgaWYgKHR5cGVvZiBzb3VyY2VDb21wb25lbnQgIT09ICdzdHJpbmcnKSB7IC8vIGRvbid0IGhvaXN0IG92ZXIgc3RyaW5nIChodG1sKSBjb21wb25lbnRzXG5cbiAgICAgICAgaWYgKG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgICAgICAgdmFyIGluaGVyaXRlZENvbXBvbmVudCA9IGdldFByb3RvdHlwZU9mKHNvdXJjZUNvbXBvbmVudCk7XG4gICAgICAgICAgICBpZiAoaW5oZXJpdGVkQ29tcG9uZW50ICYmIGluaGVyaXRlZENvbXBvbmVudCAhPT0gb2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICAgICAgICAgICAgaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBpbmhlcml0ZWRDb21wb25lbnQsIGJsYWNrbGlzdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2YXIga2V5cyA9IGdldE93blByb3BlcnR5TmFtZXMoc291cmNlQ29tcG9uZW50KTtcblxuICAgICAgICBpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgICAgICAgICBrZXlzID0ga2V5cy5jb25jYXQoZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZUNvbXBvbmVudCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgICAgIGlmICghUkVBQ1RfU1RBVElDU1trZXldICYmICFLTk9XTl9TVEFUSUNTW2tleV0gJiYgKCFibGFja2xpc3QgfHwgIWJsYWNrbGlzdFtrZXldKSkge1xuICAgICAgICAgICAgICAgIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZUNvbXBvbmVudCwga2V5KTtcbiAgICAgICAgICAgICAgICB0cnkgeyAvLyBBdm9pZCBmYWlsdXJlcyBmcm9tIHJlYWQtb25seSBwcm9wZXJ0aWVzXG4gICAgICAgICAgICAgICAgICAgIGRlZmluZVByb3BlcnR5KHRhcmdldENvbXBvbmVudCwga2V5LCBkZXNjcmlwdG9yKTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRhcmdldENvbXBvbmVudDtcbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0Q29tcG9uZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhvaXN0Tm9uUmVhY3RTdGF0aWNzO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XHJcbmltcG9ydCB7IFByb3ZpZGVyIH0gZnJvbSAncmVhY3QtcmVkdXgnO1xyXG5pbXBvcnQgQXBwUm91dGVyIGZyb20gJy4vcm91dGVycy9BcHBSb3V0ZXInO1xyXG5pbXBvcnQgY29uZmlndXJlU3RvcmUgZnJvbSAnLi9zdG9yZS9jb25maWd1cmVTdG9yZSc7XHJcbmltcG9ydCB7IGFkZEV4cGVuc2UgfSBmcm9tICcuL2FjdGlvbnMvZXhwZW5zZXMnO1xyXG5pbXBvcnQgZ2V0VmlzaWJsZUV4cGVuc2VzIGZyb20gJy4vc2VsZWN0b3JzL2V4cGVuc2VzJztcclxuaW1wb3J0ICdub3JtYWxpemUuY3NzL25vcm1hbGl6ZS5jc3MnO1xyXG5pbXBvcnQgJy4vc3R5bGVzL3N0eWxlcy5zY3NzJztcclxuaW1wb3J0ICdyZWFjdC1kYXRlcy9saWIvY3NzL19kYXRlcGlja2VyLmNzcyc7XHJcblxyXG5cclxuY29uc3Qgc3RvcmUgPSBjb25maWd1cmVTdG9yZSgpO1xyXG5cclxuLy8gY29uc29sZS5sb2coJ3RoaXMgb25lJyk7XHJcbi8vIHN0b3JlLmRpc3BhdGNoKGFkZEV4cGVuc2UoeyBkZXNjcmlwdGlvbjogJ1dhdGVyIEJpbGwnLCBhbW91bnQ6IDQ1MDAgfSkpO1xyXG4vLyBzdG9yZS5kaXNwYXRjaChhZGRFeHBlbnNlKHsgZGVzY3JpcHRpb246ICdHYXMgQmlsbCcsICBjcmVhdGVkQXQ6IDEwMDAgfSkpO1xyXG4vLyBzdG9yZS5kaXNwYXRjaChhZGRFeHBlbnNlKHsgZGVzY3JpcHRpb246ICdSZW50JywgIGFtb3VudDogMTA5NTAwIH0pKTtcclxuXHJcbi8vIGNvbnN0IHN0YXRlID0gc3RvcmUuZ2V0U3RhdGUoKTtcclxuLy8gY29uc3QgdmlzaWJsZUV4cGVuc2VzID0gZ2V0VmlzaWJsZUV4cGVuc2VzKHN0YXRlLmV4cGVuc2VzLCBzdGF0ZS5maWx0ZXJzKTtcclxuXHJcbmNvbnN0IGpzeCA9IChcclxuICA8UHJvdmlkZXIgc3RvcmU9e3N0b3JlfT5cclxuICAgIDxBcHBSb3V0ZXIgLz5cclxuICA8L1Byb3ZpZGVyPlxyXG4pO1xyXG5SZWFjdERPTS5yZW5kZXIoanN4LCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYXBwJykpOyIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuMTIuMFxuICogcmVhY3QucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7dmFyIGg9cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIiksbj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yLHA9bj9TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKTo2MDEwMyxxPW4/U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKTo2MDEwNixyPW4/U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpOjYwMTA3LHQ9bj9TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIik6NjAxMDgsdT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKTo2MDExNCx2PW4/U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpOjYwMTA5LHc9bj9TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKTo2MDExMCx4PW4/U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLHk9bj9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIik6NjAxMTM7biYmU3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlX2xpc3RcIik7XG52YXIgej1uP1N5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpOjYwMTE1LGFhPW4/U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIik6NjAxMTY7biYmU3ltYm9sLmZvcihcInJlYWN0LmZ1bmRhbWVudGFsXCIpO24mJlN5bWJvbC5mb3IoXCJyZWFjdC5yZXNwb25kZXJcIik7biYmU3ltYm9sLmZvcihcInJlYWN0LnNjb3BlXCIpO3ZhciBBPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcjtcbmZ1bmN0aW9uIEIoYSl7Zm9yKHZhciBiPVwiaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9XCIrYSxjPTE7Yzxhcmd1bWVudHMubGVuZ3RoO2MrKyliKz1cIiZhcmdzW109XCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tjXSk7cmV0dXJuXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgXCIrYitcIiBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCJ9dmFyIEM9e2lzTW91bnRlZDpmdW5jdGlvbigpe3JldHVybiExfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbigpe319LEQ9e307XG5mdW5jdGlvbiBFKGEsYixjKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPUQ7dGhpcy51cGRhdGVyPWN8fEN9RS5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudD17fTtFLnByb3RvdHlwZS5zZXRTdGF0ZT1mdW5jdGlvbihhLGIpe2lmKFwib2JqZWN0XCIhPT10eXBlb2YgYSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJm51bGwhPWEpdGhyb3cgRXJyb3IoQig4NSkpO3RoaXMudXBkYXRlci5lbnF1ZXVlU2V0U3RhdGUodGhpcyxhLGIsXCJzZXRTdGF0ZVwiKX07RS5wcm90b3R5cGUuZm9yY2VVcGRhdGU9ZnVuY3Rpb24oYSl7dGhpcy51cGRhdGVyLmVucXVldWVGb3JjZVVwZGF0ZSh0aGlzLGEsXCJmb3JjZVVwZGF0ZVwiKX07ZnVuY3Rpb24gRigpe31GLnByb3RvdHlwZT1FLnByb3RvdHlwZTtmdW5jdGlvbiBHKGEsYixjKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPUQ7dGhpcy51cGRhdGVyPWN8fEN9dmFyIEg9Ry5wcm90b3R5cGU9bmV3IEY7XG5ILmNvbnN0cnVjdG9yPUc7aChILEUucHJvdG90eXBlKTtILmlzUHVyZVJlYWN0Q29tcG9uZW50PSEwO3ZhciBJPXtjdXJyZW50Om51bGx9LEo9e2N1cnJlbnQ6bnVsbH0sSz1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LEw9e2tleTohMCxyZWY6ITAsX19zZWxmOiEwLF9fc291cmNlOiEwfTtcbmZ1bmN0aW9uIE0oYSxiLGMpe3ZhciBlLGQ9e30sZz1udWxsLGw9bnVsbDtpZihudWxsIT1iKWZvcihlIGluIHZvaWQgMCE9PWIucmVmJiYobD1iLnJlZiksdm9pZCAwIT09Yi5rZXkmJihnPVwiXCIrYi5rZXkpLGIpSy5jYWxsKGIsZSkmJiFMLmhhc093blByb3BlcnR5KGUpJiYoZFtlXT1iW2VdKTt2YXIgZj1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWYpZC5jaGlsZHJlbj1jO2Vsc2UgaWYoMTxmKXtmb3IodmFyIGs9QXJyYXkoZiksbT0wO208ZjttKyspa1ttXT1hcmd1bWVudHNbbSsyXTtkLmNoaWxkcmVuPWt9aWYoYSYmYS5kZWZhdWx0UHJvcHMpZm9yKGUgaW4gZj1hLmRlZmF1bHRQcm9wcyxmKXZvaWQgMD09PWRbZV0mJihkW2VdPWZbZV0pO3JldHVybnskJHR5cGVvZjpwLHR5cGU6YSxrZXk6ZyxyZWY6bCxwcm9wczpkLF9vd25lcjpKLmN1cnJlbnR9fVxuZnVuY3Rpb24gYmEoYSxiKXtyZXR1cm57JCR0eXBlb2Y6cCx0eXBlOmEudHlwZSxrZXk6YixyZWY6YS5yZWYscHJvcHM6YS5wcm9wcyxfb3duZXI6YS5fb3duZXJ9fWZ1bmN0aW9uIE4oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PXB9ZnVuY3Rpb24gZXNjYXBlKGEpe3ZhciBiPXtcIj1cIjpcIj0wXCIsXCI6XCI6XCI9MlwifTtyZXR1cm5cIiRcIisoXCJcIithKS5yZXBsYWNlKC9bPTpdL2csZnVuY3Rpb24oYSl7cmV0dXJuIGJbYV19KX12YXIgTz0vXFwvKy9nLFA9W107ZnVuY3Rpb24gUShhLGIsYyxlKXtpZihQLmxlbmd0aCl7dmFyIGQ9UC5wb3AoKTtkLnJlc3VsdD1hO2Qua2V5UHJlZml4PWI7ZC5mdW5jPWM7ZC5jb250ZXh0PWU7ZC5jb3VudD0wO3JldHVybiBkfXJldHVybntyZXN1bHQ6YSxrZXlQcmVmaXg6YixmdW5jOmMsY29udGV4dDplLGNvdW50OjB9fVxuZnVuY3Rpb24gUihhKXthLnJlc3VsdD1udWxsO2Eua2V5UHJlZml4PW51bGw7YS5mdW5jPW51bGw7YS5jb250ZXh0PW51bGw7YS5jb3VudD0wOzEwPlAubGVuZ3RoJiZQLnB1c2goYSl9XG5mdW5jdGlvbiBTKGEsYixjLGUpe3ZhciBkPXR5cGVvZiBhO2lmKFwidW5kZWZpbmVkXCI9PT1kfHxcImJvb2xlYW5cIj09PWQpYT1udWxsO3ZhciBnPSExO2lmKG51bGw9PT1hKWc9ITA7ZWxzZSBzd2l0Y2goZCl7Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJudW1iZXJcIjpnPSEwO2JyZWFrO2Nhc2UgXCJvYmplY3RcIjpzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBwOmNhc2UgcTpnPSEwfX1pZihnKXJldHVybiBjKGUsYSxcIlwiPT09Yj9cIi5cIitUKGEsMCk6YiksMTtnPTA7Yj1cIlwiPT09Yj9cIi5cIjpiK1wiOlwiO2lmKEFycmF5LmlzQXJyYXkoYSkpZm9yKHZhciBsPTA7bDxhLmxlbmd0aDtsKyspe2Q9YVtsXTt2YXIgZj1iK1QoZCxsKTtnKz1TKGQsZixjLGUpfWVsc2UgaWYobnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYT9mPW51bGw6KGY9QSYmYVtBXXx8YVtcIkBAaXRlcmF0b3JcIl0sZj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgZj9mOm51bGwpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmKWZvcihhPWYuY2FsbChhKSxsPVxuMDshKGQ9YS5uZXh0KCkpLmRvbmU7KWQ9ZC52YWx1ZSxmPWIrVChkLGwrKyksZys9UyhkLGYsYyxlKTtlbHNlIGlmKFwib2JqZWN0XCI9PT1kKXRocm93IGM9XCJcIithLEVycm9yKEIoMzEsXCJbb2JqZWN0IE9iamVjdF1cIj09PWM/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhhKS5qb2luKFwiLCBcIikrXCJ9XCI6YyxcIlwiKSk7cmV0dXJuIGd9ZnVuY3Rpb24gVShhLGIsYyl7cmV0dXJuIG51bGw9PWE/MDpTKGEsXCJcIixiLGMpfWZ1bmN0aW9uIFQoYSxiKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZudWxsIT1hLmtleT9lc2NhcGUoYS5rZXkpOmIudG9TdHJpbmcoMzYpfWZ1bmN0aW9uIGNhKGEsYil7YS5mdW5jLmNhbGwoYS5jb250ZXh0LGIsYS5jb3VudCsrKX1cbmZ1bmN0aW9uIGRhKGEsYixjKXt2YXIgZT1hLnJlc3VsdCxkPWEua2V5UHJlZml4O2E9YS5mdW5jLmNhbGwoYS5jb250ZXh0LGIsYS5jb3VudCsrKTtBcnJheS5pc0FycmF5KGEpP1YoYSxlLGMsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KTpudWxsIT1hJiYoTihhKSYmKGE9YmEoYSxkKyghYS5rZXl8fGImJmIua2V5PT09YS5rZXk/XCJcIjooXCJcIithLmtleSkucmVwbGFjZShPLFwiJCYvXCIpK1wiL1wiKStjKSksZS5wdXNoKGEpKX1mdW5jdGlvbiBWKGEsYixjLGUsZCl7dmFyIGc9XCJcIjtudWxsIT1jJiYoZz0oXCJcIitjKS5yZXBsYWNlKE8sXCIkJi9cIikrXCIvXCIpO2I9UShiLGcsZSxkKTtVKGEsZGEsYik7UihiKX1mdW5jdGlvbiBXKCl7dmFyIGE9SS5jdXJyZW50O2lmKG51bGw9PT1hKXRocm93IEVycm9yKEIoMzIxKSk7cmV0dXJuIGF9XG52YXIgWD17Q2hpbGRyZW46e21hcDpmdW5jdGlvbihhLGIsYyl7aWYobnVsbD09YSlyZXR1cm4gYTt2YXIgZT1bXTtWKGEsZSxudWxsLGIsYyk7cmV0dXJuIGV9LGZvckVhY2g6ZnVuY3Rpb24oYSxiLGMpe2lmKG51bGw9PWEpcmV0dXJuIGE7Yj1RKG51bGwsbnVsbCxiLGMpO1UoYSxjYSxiKTtSKGIpfSxjb3VudDpmdW5jdGlvbihhKXtyZXR1cm4gVShhLGZ1bmN0aW9uKCl7cmV0dXJuIG51bGx9LG51bGwpfSx0b0FycmF5OmZ1bmN0aW9uKGEpe3ZhciBiPVtdO1YoYSxiLG51bGwsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KTtyZXR1cm4gYn0sb25seTpmdW5jdGlvbihhKXtpZighTihhKSl0aHJvdyBFcnJvcihCKDE0MykpO3JldHVybiBhfX0sY3JlYXRlUmVmOmZ1bmN0aW9uKCl7cmV0dXJue2N1cnJlbnQ6bnVsbH19LENvbXBvbmVudDpFLFB1cmVDb21wb25lbnQ6RyxjcmVhdGVDb250ZXh0OmZ1bmN0aW9uKGEsYil7dm9pZCAwPT09YiYmKGI9bnVsbCk7YT17JCR0eXBlb2Y6dyxfY2FsY3VsYXRlQ2hhbmdlZEJpdHM6Yixcbl9jdXJyZW50VmFsdWU6YSxfY3VycmVudFZhbHVlMjphLF90aHJlYWRDb3VudDowLFByb3ZpZGVyOm51bGwsQ29uc3VtZXI6bnVsbH07YS5Qcm92aWRlcj17JCR0eXBlb2Y6dixfY29udGV4dDphfTtyZXR1cm4gYS5Db25zdW1lcj1hfSxmb3J3YXJkUmVmOmZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjp4LHJlbmRlcjphfX0sbGF6eTpmdW5jdGlvbihhKXtyZXR1cm57JCR0eXBlb2Y6YWEsX2N0b3I6YSxfc3RhdHVzOi0xLF9yZXN1bHQ6bnVsbH19LG1lbW86ZnVuY3Rpb24oYSxiKXtyZXR1cm57JCR0eXBlb2Y6eix0eXBlOmEsY29tcGFyZTp2b2lkIDA9PT1iP251bGw6Yn19LHVzZUNhbGxiYWNrOmZ1bmN0aW9uKGEsYil7cmV0dXJuIFcoKS51c2VDYWxsYmFjayhhLGIpfSx1c2VDb250ZXh0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIFcoKS51c2VDb250ZXh0KGEsYil9LHVzZUVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiBXKCkudXNlRWZmZWN0KGEsYil9LHVzZUltcGVyYXRpdmVIYW5kbGU6ZnVuY3Rpb24oYSxcbmIsYyl7cmV0dXJuIFcoKS51c2VJbXBlcmF0aXZlSGFuZGxlKGEsYixjKX0sdXNlRGVidWdWYWx1ZTpmdW5jdGlvbigpe30sdXNlTGF5b3V0RWZmZWN0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIFcoKS51c2VMYXlvdXRFZmZlY3QoYSxiKX0sdXNlTWVtbzpmdW5jdGlvbihhLGIpe3JldHVybiBXKCkudXNlTWVtbyhhLGIpfSx1c2VSZWR1Y2VyOmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gVygpLnVzZVJlZHVjZXIoYSxiLGMpfSx1c2VSZWY6ZnVuY3Rpb24oYSl7cmV0dXJuIFcoKS51c2VSZWYoYSl9LHVzZVN0YXRlOmZ1bmN0aW9uKGEpe3JldHVybiBXKCkudXNlU3RhdGUoYSl9LEZyYWdtZW50OnIsUHJvZmlsZXI6dSxTdHJpY3RNb2RlOnQsU3VzcGVuc2U6eSxjcmVhdGVFbGVtZW50Ok0sY2xvbmVFbGVtZW50OmZ1bmN0aW9uKGEsYixjKXtpZihudWxsPT09YXx8dm9pZCAwPT09YSl0aHJvdyBFcnJvcihCKDI2NyxhKSk7dmFyIGU9aCh7fSxhLnByb3BzKSxkPWEua2V5LGc9YS5yZWYsbD1hLl9vd25lcjtcbmlmKG51bGwhPWIpe3ZvaWQgMCE9PWIucmVmJiYoZz1iLnJlZixsPUouY3VycmVudCk7dm9pZCAwIT09Yi5rZXkmJihkPVwiXCIrYi5rZXkpO2lmKGEudHlwZSYmYS50eXBlLmRlZmF1bHRQcm9wcyl2YXIgZj1hLnR5cGUuZGVmYXVsdFByb3BzO2ZvcihrIGluIGIpSy5jYWxsKGIsaykmJiFMLmhhc093blByb3BlcnR5KGspJiYoZVtrXT12b2lkIDA9PT1iW2tdJiZ2b2lkIDAhPT1mP2Zba106YltrXSl9dmFyIGs9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1rKWUuY2hpbGRyZW49YztlbHNlIGlmKDE8ayl7Zj1BcnJheShrKTtmb3IodmFyIG09MDttPGs7bSsrKWZbbV09YXJndW1lbnRzW20rMl07ZS5jaGlsZHJlbj1mfXJldHVybnskJHR5cGVvZjpwLHR5cGU6YS50eXBlLGtleTpkLHJlZjpnLHByb3BzOmUsX293bmVyOmx9fSxjcmVhdGVGYWN0b3J5OmZ1bmN0aW9uKGEpe3ZhciBiPU0uYmluZChudWxsLGEpO2IudHlwZT1hO3JldHVybiBifSxpc1ZhbGlkRWxlbWVudDpOLHZlcnNpb246XCIxNi4xMi4wXCIsXG5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRDp7UmVhY3RDdXJyZW50RGlzcGF0Y2hlcjpJLFJlYWN0Q3VycmVudEJhdGNoQ29uZmlnOntzdXNwZW5zZTpudWxsfSxSZWFjdEN1cnJlbnRPd25lcjpKLElzU29tZVJlbmRlcmVyQWN0aW5nOntjdXJyZW50OiExfSxhc3NpZ246aH19LFk9e2RlZmF1bHQ6WH0sWj1ZJiZYfHxZO21vZHVsZS5leHBvcnRzPVouZGVmYXVsdHx8WjtcbiIsIi8qXG4gUmVhY3QgdjE2LjAuMVxuIHJlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qc1xuXG4gQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG5cbiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gTW9kZXJuaXpyIDMuMC4wcHJlIChDdXN0b20gQnVpbGQpIHwgTUlUXG4qL1xuJ3VzZSBzdHJpY3QnO3ZhciBhYT1yZXF1aXJlKFwicmVhY3RcIik7cmVxdWlyZShcImZianMvbGliL2ludmFyaWFudFwiKTt2YXIgbD1yZXF1aXJlKFwiZmJqcy9saWIvRXhlY3V0aW9uRW52aXJvbm1lbnRcIiksbj1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSxiYT1yZXF1aXJlKFwiZmJqcy9saWIvRXZlbnRMaXN0ZW5lclwiKSxjYT1yZXF1aXJlKFwiZmJqcy9saWIvZW1wdHlGdW5jdGlvblwiKSxkYT1yZXF1aXJlKFwiZmJqcy9saWIvZW1wdHlPYmplY3RcIiksZWE9cmVxdWlyZShcImZianMvbGliL3NoYWxsb3dFcXVhbFwiKSxmYT1yZXF1aXJlKFwiZmJqcy9saWIvY29udGFpbnNOb2RlXCIpLGhhPXJlcXVpcmUoXCJmYmpzL2xpYi9mb2N1c05vZGVcIiksaWE9cmVxdWlyZShcImZianMvbGliL2dldEFjdGl2ZUVsZW1lbnRcIik7XG5mdW5jdGlvbiB3KGEpe2Zvcih2YXIgYj1hcmd1bWVudHMubGVuZ3RoLTEsYz1cIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCBodHRwOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0L2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudFxceDNkXCIrYSxkPTA7ZDxiO2QrKyljKz1cIlxceDI2YXJnc1tdXFx4M2RcIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2QrMV0pO2I9RXJyb3IoYytcIiBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCIpO2IubmFtZT1cIkludmFyaWFudCBWaW9sYXRpb25cIjtiLmZyYW1lc1RvUG9wPTE7dGhyb3cgYjt9YWE/dm9pZCAwOncoXCIyMjdcIik7XG5mdW5jdGlvbiBqYShhKXtzd2l0Y2goYSl7Y2FzZSBcInN2Z1wiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIjtjYXNlIFwibWF0aFwiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiO2RlZmF1bHQ6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCJ9fVxudmFyIGthPXtOYW1lc3BhY2VzOntodG1sOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiLG1hdGhtbDpcImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIixzdmc6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wifSxnZXRJbnRyaW5zaWNOYW1lc3BhY2U6amEsZ2V0Q2hpbGROYW1lc3BhY2U6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gbnVsbD09YXx8XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI9PT1hP2phKGIpOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj09PWEmJlwiZm9yZWlnbk9iamVjdFwiPT09Yj9cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIjphfX0sbGE9bnVsbCxvYT17fTtcbmZ1bmN0aW9uIHBhKCl7aWYobGEpZm9yKHZhciBhIGluIG9hKXt2YXIgYj1vYVthXSxjPWxhLmluZGV4T2YoYSk7LTE8Yz92b2lkIDA6dyhcIjk2XCIsYSk7aWYoIXFhLnBsdWdpbnNbY10pe2IuZXh0cmFjdEV2ZW50cz92b2lkIDA6dyhcIjk3XCIsYSk7cWEucGx1Z2luc1tjXT1iO2M9Yi5ldmVudFR5cGVzO2Zvcih2YXIgZCBpbiBjKXt2YXIgZT12b2lkIDA7dmFyIGY9Y1tkXSxnPWIsaD1kO3FhLmV2ZW50TmFtZURpc3BhdGNoQ29uZmlncy5oYXNPd25Qcm9wZXJ0eShoKT93KFwiOTlcIixoKTp2b2lkIDA7cWEuZXZlbnROYW1lRGlzcGF0Y2hDb25maWdzW2hdPWY7dmFyIGs9Zi5waGFzZWRSZWdpc3RyYXRpb25OYW1lcztpZihrKXtmb3IoZSBpbiBrKWsuaGFzT3duUHJvcGVydHkoZSkmJnJhKGtbZV0sZyxoKTtlPSEwfWVsc2UgZi5yZWdpc3RyYXRpb25OYW1lPyhyYShmLnJlZ2lzdHJhdGlvbk5hbWUsZyxoKSxlPSEwKTplPSExO2U/dm9pZCAwOncoXCI5OFwiLGQsYSl9fX19XG5mdW5jdGlvbiByYShhLGIsYyl7cWEucmVnaXN0cmF0aW9uTmFtZU1vZHVsZXNbYV0/dyhcIjEwMFwiLGEpOnZvaWQgMDtxYS5yZWdpc3RyYXRpb25OYW1lTW9kdWxlc1thXT1iO3FhLnJlZ2lzdHJhdGlvbk5hbWVEZXBlbmRlbmNpZXNbYV09Yi5ldmVudFR5cGVzW2NdLmRlcGVuZGVuY2llc31cbnZhciBxYT17cGx1Z2luczpbXSxldmVudE5hbWVEaXNwYXRjaENvbmZpZ3M6e30scmVnaXN0cmF0aW9uTmFtZU1vZHVsZXM6e30scmVnaXN0cmF0aW9uTmFtZURlcGVuZGVuY2llczp7fSxwb3NzaWJsZVJlZ2lzdHJhdGlvbk5hbWVzOm51bGwsaW5qZWN0RXZlbnRQbHVnaW5PcmRlcjpmdW5jdGlvbihhKXtsYT93KFwiMTAxXCIpOnZvaWQgMDtsYT1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhKTtwYSgpfSxpbmplY3RFdmVudFBsdWdpbnNCeU5hbWU6ZnVuY3Rpb24oYSl7dmFyIGI9ITEsYztmb3IoYyBpbiBhKWlmKGEuaGFzT3duUHJvcGVydHkoYykpe3ZhciBkPWFbY107b2EuaGFzT3duUHJvcGVydHkoYykmJm9hW2NdPT09ZHx8KG9hW2NdP3coXCIxMDJcIixjKTp2b2lkIDAsb2FbY109ZCxiPSEwKX1iJiZwYSgpfX0sc2E9cWEsdGE9e2NoaWxkcmVuOiEwLGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MOiEwLGF1dG9Gb2N1czohMCxkZWZhdWx0VmFsdWU6ITAsZGVmYXVsdENoZWNrZWQ6ITAsXG5pbm5lckhUTUw6ITAsc3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nOiEwLHN0eWxlOiEwfTtmdW5jdGlvbiB1YShhLGIpe3JldHVybihhJmIpPT09Yn1cbnZhciB3YT17TVVTVF9VU0VfUFJPUEVSVFk6MSxIQVNfQk9PTEVBTl9WQUxVRTo0LEhBU19OVU1FUklDX1ZBTFVFOjgsSEFTX1BPU0lUSVZFX05VTUVSSUNfVkFMVUU6MjQsSEFTX09WRVJMT0FERURfQk9PTEVBTl9WQUxVRTozMixIQVNfU1RSSU5HX0JPT0xFQU5fVkFMVUU6NjQsaW5qZWN0RE9NUHJvcGVydHlDb25maWc6ZnVuY3Rpb24oYSl7dmFyIGI9d2EsYz1hLlByb3BlcnRpZXN8fHt9LGQ9YS5ET01BdHRyaWJ1dGVOYW1lc3BhY2VzfHx7fSxlPWEuRE9NQXR0cmlidXRlTmFtZXN8fHt9O2E9YS5ET01NdXRhdGlvbk1ldGhvZHN8fHt9O2Zvcih2YXIgZiBpbiBjKXt4YS5wcm9wZXJ0aWVzLmhhc093blByb3BlcnR5KGYpP3coXCI0OFwiLGYpOnZvaWQgMDt2YXIgZz1mLnRvTG93ZXJDYXNlKCksaD1jW2ZdO2c9e2F0dHJpYnV0ZU5hbWU6ZyxhdHRyaWJ1dGVOYW1lc3BhY2U6bnVsbCxwcm9wZXJ0eU5hbWU6ZixtdXRhdGlvbk1ldGhvZDpudWxsLG11c3RVc2VQcm9wZXJ0eTp1YShoLGIuTVVTVF9VU0VfUFJPUEVSVFkpLFxuaGFzQm9vbGVhblZhbHVlOnVhKGgsYi5IQVNfQk9PTEVBTl9WQUxVRSksaGFzTnVtZXJpY1ZhbHVlOnVhKGgsYi5IQVNfTlVNRVJJQ19WQUxVRSksaGFzUG9zaXRpdmVOdW1lcmljVmFsdWU6dWEoaCxiLkhBU19QT1NJVElWRV9OVU1FUklDX1ZBTFVFKSxoYXNPdmVybG9hZGVkQm9vbGVhblZhbHVlOnVhKGgsYi5IQVNfT1ZFUkxPQURFRF9CT09MRUFOX1ZBTFVFKSxoYXNTdHJpbmdCb29sZWFuVmFsdWU6dWEoaCxiLkhBU19TVFJJTkdfQk9PTEVBTl9WQUxVRSl9OzE+PWcuaGFzQm9vbGVhblZhbHVlK2cuaGFzTnVtZXJpY1ZhbHVlK2cuaGFzT3ZlcmxvYWRlZEJvb2xlYW5WYWx1ZT92b2lkIDA6dyhcIjUwXCIsZik7ZS5oYXNPd25Qcm9wZXJ0eShmKSYmKGcuYXR0cmlidXRlTmFtZT1lW2ZdKTtkLmhhc093blByb3BlcnR5KGYpJiYoZy5hdHRyaWJ1dGVOYW1lc3BhY2U9ZFtmXSk7YS5oYXNPd25Qcm9wZXJ0eShmKSYmKGcubXV0YXRpb25NZXRob2Q9YVtmXSk7eGEucHJvcGVydGllc1tmXT1cbmd9fX0seGE9e0lEX0FUVFJJQlVURV9OQU1FOlwiZGF0YS1yZWFjdGlkXCIsUk9PVF9BVFRSSUJVVEVfTkFNRTpcImRhdGEtcmVhY3Ryb290XCIsQVRUUklCVVRFX05BTUVfU1RBUlRfQ0hBUjpcIjpBLVpfYS16XFxcXHUwMEMwLVxcXFx1MDBENlxcXFx1MDBEOC1cXFxcdTAwRjZcXFxcdTAwRjgtXFxcXHUwMkZGXFxcXHUwMzcwLVxcXFx1MDM3RFxcXFx1MDM3Ri1cXFxcdTFGRkZcXFxcdTIwMEMtXFxcXHUyMDBEXFxcXHUyMDcwLVxcXFx1MjE4RlxcXFx1MkMwMC1cXFxcdTJGRUZcXFxcdTMwMDEtXFxcXHVEN0ZGXFxcXHVGOTAwLVxcXFx1RkRDRlxcXFx1RkRGMC1cXFxcdUZGRkRcIixBVFRSSUJVVEVfTkFNRV9DSEFSOlwiOkEtWl9hLXpcXFxcdTAwQzAtXFxcXHUwMEQ2XFxcXHUwMEQ4LVxcXFx1MDBGNlxcXFx1MDBGOC1cXFxcdTAyRkZcXFxcdTAzNzAtXFxcXHUwMzdEXFxcXHUwMzdGLVxcXFx1MUZGRlxcXFx1MjAwQy1cXFxcdTIwMERcXFxcdTIwNzAtXFxcXHUyMThGXFxcXHUyQzAwLVxcXFx1MkZFRlxcXFx1MzAwMS1cXFxcdUQ3RkZcXFxcdUY5MDAtXFxcXHVGRENGXFxcXHVGREYwLVxcXFx1RkZGRFxcXFwtLjAtOVxcXFx1MDBCN1xcXFx1MDMwMC1cXFxcdTAzNkZcXFxcdTIwM0YtXFxcXHUyMDQwXCIsXG5wcm9wZXJ0aWVzOnt9LHNob3VsZFNldEF0dHJpYnV0ZTpmdW5jdGlvbihhLGIpe2lmKHhhLmlzUmVzZXJ2ZWRQcm9wKGEpfHwhKFwib1wiIT09YVswXSYmXCJPXCIhPT1hWzBdfHxcIm5cIiE9PWFbMV0mJlwiTlwiIT09YVsxXSkpcmV0dXJuITE7aWYobnVsbD09PWIpcmV0dXJuITA7c3dpdGNoKHR5cGVvZiBiKXtjYXNlIFwiYm9vbGVhblwiOnJldHVybiB4YS5zaG91bGRBdHRyaWJ1dGVBY2NlcHRCb29sZWFuVmFsdWUoYSk7Y2FzZSBcInVuZGVmaW5lZFwiOmNhc2UgXCJudW1iZXJcIjpjYXNlIFwic3RyaW5nXCI6Y2FzZSBcIm9iamVjdFwiOnJldHVybiEwO2RlZmF1bHQ6cmV0dXJuITF9fSxnZXRQcm9wZXJ0eUluZm86ZnVuY3Rpb24oYSl7cmV0dXJuIHhhLnByb3BlcnRpZXMuaGFzT3duUHJvcGVydHkoYSk/eGEucHJvcGVydGllc1thXTpudWxsfSxzaG91bGRBdHRyaWJ1dGVBY2NlcHRCb29sZWFuVmFsdWU6ZnVuY3Rpb24oYSl7aWYoeGEuaXNSZXNlcnZlZFByb3AoYSkpcmV0dXJuITA7dmFyIGI9eGEuZ2V0UHJvcGVydHlJbmZvKGEpO1xuaWYoYilyZXR1cm4gYi5oYXNCb29sZWFuVmFsdWV8fGIuaGFzU3RyaW5nQm9vbGVhblZhbHVlfHxiLmhhc092ZXJsb2FkZWRCb29sZWFuVmFsdWU7YT1hLnRvTG93ZXJDYXNlKCkuc2xpY2UoMCw1KTtyZXR1cm5cImRhdGEtXCI9PT1hfHxcImFyaWEtXCI9PT1hfSxpc1Jlc2VydmVkUHJvcDpmdW5jdGlvbihhKXtyZXR1cm4gdGEuaGFzT3duUHJvcGVydHkoYSl9LGluamVjdGlvbjp3YX0sQT14YSxFPXtJbmRldGVybWluYXRlQ29tcG9uZW50OjAsRnVuY3Rpb25hbENvbXBvbmVudDoxLENsYXNzQ29tcG9uZW50OjIsSG9zdFJvb3Q6MyxIb3N0UG9ydGFsOjQsSG9zdENvbXBvbmVudDo1LEhvc3RUZXh0OjYsQ29yb3V0aW5lQ29tcG9uZW50OjcsQ29yb3V0aW5lSGFuZGxlclBoYXNlOjgsWWllbGRDb21wb25lbnQ6OSxGcmFnbWVudDoxMH0sRj17RUxFTUVOVF9OT0RFOjEsVEVYVF9OT0RFOjMsQ09NTUVOVF9OT0RFOjgsRE9DVU1FTlRfTk9ERTo5LERPQ1VNRU5UX0ZSQUdNRU5UX05PREU6MTF9LFxueWE9RS5Ib3N0Q29tcG9uZW50LHphPUUuSG9zdFRleHQsQWE9Ri5FTEVNRU5UX05PREUsQmE9Ri5DT01NRU5UX05PREUsRWE9QS5JRF9BVFRSSUJVVEVfTkFNRSxGYT17aGFzQ2FjaGVkQ2hpbGROb2RlczoxfSxHYT1NYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKSxIYT1cIl9fcmVhY3RJbnRlcm5hbEluc3RhbmNlJFwiK0dhLElhPVwiX19yZWFjdEV2ZW50SGFuZGxlcnMkXCIrR2E7ZnVuY3Rpb24gTGEoYSl7Zm9yKHZhciBiO2I9YS5fcmVuZGVyZWRDb21wb25lbnQ7KWE9YjtyZXR1cm4gYX1mdW5jdGlvbiBNYShhLGIpe2E9TGEoYSk7YS5faG9zdE5vZGU9YjtiW0hhXT1hfVxuZnVuY3Rpb24gTmEoYSxiKXtpZighKGEuX2ZsYWdzJkZhLmhhc0NhY2hlZENoaWxkTm9kZXMpKXt2YXIgYz1hLl9yZW5kZXJlZENoaWxkcmVuO2I9Yi5maXJzdENoaWxkO3ZhciBkO2E6Zm9yKGQgaW4gYylpZihjLmhhc093blByb3BlcnR5KGQpKXt2YXIgZT1jW2RdLGY9TGEoZSkuX2RvbUlEO2lmKDAhPT1mKXtmb3IoO251bGwhPT1iO2I9Yi5uZXh0U2libGluZyl7dmFyIGc9YixoPWY7aWYoZy5ub2RlVHlwZT09PUFhJiZnLmdldEF0dHJpYnV0ZShFYSk9PT1cIlwiK2h8fGcubm9kZVR5cGU9PT1CYSYmZy5ub2RlVmFsdWU9PT1cIiByZWFjdC10ZXh0OiBcIitoK1wiIFwifHxnLm5vZGVUeXBlPT09QmEmJmcubm9kZVZhbHVlPT09XCIgcmVhY3QtZW1wdHk6IFwiK2grXCIgXCIpe01hKGUsYik7Y29udGludWUgYX19dyhcIjMyXCIsZil9fWEuX2ZsYWdzfD1GYS5oYXNDYWNoZWRDaGlsZE5vZGVzfX1cbmZ1bmN0aW9uIE9hKGEpe2lmKGFbSGFdKXJldHVybiBhW0hhXTtmb3IodmFyIGI9W107IWFbSGFdOylpZihiLnB1c2goYSksYS5wYXJlbnROb2RlKWE9YS5wYXJlbnROb2RlO2Vsc2UgcmV0dXJuIG51bGw7dmFyIGM9YVtIYV07aWYoYy50YWc9PT15YXx8Yy50YWc9PT16YSlyZXR1cm4gYztmb3IoO2EmJihjPWFbSGFdKTthPWIucG9wKCkpe3ZhciBkPWM7Yi5sZW5ndGgmJk5hKGMsYSl9cmV0dXJuIGR9XG52YXIgRz17Z2V0Q2xvc2VzdEluc3RhbmNlRnJvbU5vZGU6T2EsZ2V0SW5zdGFuY2VGcm9tTm9kZTpmdW5jdGlvbihhKXt2YXIgYj1hW0hhXTtpZihiKXJldHVybiBiLnRhZz09PXlhfHxiLnRhZz09PXphP2I6Yi5faG9zdE5vZGU9PT1hP2I6bnVsbDtiPU9hKGEpO3JldHVybiBudWxsIT1iJiZiLl9ob3N0Tm9kZT09PWE/YjpudWxsfSxnZXROb2RlRnJvbUluc3RhbmNlOmZ1bmN0aW9uKGEpe2lmKGEudGFnPT09eWF8fGEudGFnPT09emEpcmV0dXJuIGEuc3RhdGVOb2RlO3ZvaWQgMD09PWEuX2hvc3ROb2RlP3coXCIzM1wiKTp2b2lkIDA7aWYoYS5faG9zdE5vZGUpcmV0dXJuIGEuX2hvc3ROb2RlO2Zvcih2YXIgYj1bXTshYS5faG9zdE5vZGU7KWIucHVzaChhKSxhLl9ob3N0UGFyZW50P3ZvaWQgMDp3KFwiMzRcIiksYT1hLl9ob3N0UGFyZW50O2Zvcig7Yi5sZW5ndGg7YT1iLnBvcCgpKU5hKGEsYS5faG9zdE5vZGUpO3JldHVybiBhLl9ob3N0Tm9kZX0scHJlY2FjaGVDaGlsZE5vZGVzOk5hLFxucHJlY2FjaGVOb2RlOk1hLHVuY2FjaGVOb2RlOmZ1bmN0aW9uKGEpe3ZhciBiPWEuX2hvc3ROb2RlO2ImJihkZWxldGUgYltIYV0sYS5faG9zdE5vZGU9bnVsbCl9LHByZWNhY2hlRmliZXJOb2RlOmZ1bmN0aW9uKGEsYil7YltIYV09YX0sZ2V0RmliZXJDdXJyZW50UHJvcHNGcm9tTm9kZTpmdW5jdGlvbihhKXtyZXR1cm4gYVtJYV18fG51bGx9LHVwZGF0ZUZpYmVyUHJvcHM6ZnVuY3Rpb24oYSxiKXthW0lhXT1ifX0sUGE9e3JlbW92ZTpmdW5jdGlvbihhKXthLl9yZWFjdEludGVybmFsRmliZXI9dm9pZCAwfSxnZXQ6ZnVuY3Rpb24oYSl7cmV0dXJuIGEuX3JlYWN0SW50ZXJuYWxGaWJlcn0saGFzOmZ1bmN0aW9uKGEpe3JldHVybiB2b2lkIDAhPT1hLl9yZWFjdEludGVybmFsRmliZXJ9LHNldDpmdW5jdGlvbihhLGIpe2EuX3JlYWN0SW50ZXJuYWxGaWJlcj1ifX0sUWE9e1JlYWN0Q3VycmVudE93bmVyOmFhLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVELlJlYWN0Q3VycmVudE93bmVyfTtcbmZ1bmN0aW9uIFJhKGEpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLmdldE5hbWUpcmV0dXJuIGEuZ2V0TmFtZSgpO2lmKFwibnVtYmVyXCI9PT10eXBlb2YgYS50YWcpe2E9YS50eXBlO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlyZXR1cm4gYTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gYS5kaXNwbGF5TmFtZXx8YS5uYW1lfXJldHVybiBudWxsfXZhciBKPXtOb0VmZmVjdDowLFBlcmZvcm1lZFdvcms6MSxQbGFjZW1lbnQ6MixVcGRhdGU6NCxQbGFjZW1lbnRBbmRVcGRhdGU6NixEZWxldGlvbjo4LENvbnRlbnRSZXNldDoxNixDYWxsYmFjazozMixFcnI6NjQsUmVmOjEyOH0sU2E9RS5Ib3N0Q29tcG9uZW50LFRhPUUuSG9zdFJvb3QsVWE9RS5Ib3N0UG9ydGFsLFZhPUUuSG9zdFRleHQsV2E9Si5Ob0VmZmVjdCxYYT1KLlBsYWNlbWVudDtcbmZ1bmN0aW9uIFphKGEpe3ZhciBiPWE7aWYoYS5hbHRlcm5hdGUpZm9yKDtiW1wicmV0dXJuXCJdOyliPWJbXCJyZXR1cm5cIl07ZWxzZXtpZigoYi5lZmZlY3RUYWcmWGEpIT09V2EpcmV0dXJuIDE7Zm9yKDtiW1wicmV0dXJuXCJdOylpZihiPWJbXCJyZXR1cm5cIl0sKGIuZWZmZWN0VGFnJlhhKSE9PVdhKXJldHVybiAxfXJldHVybiBiLnRhZz09PVRhPzI6M31mdW5jdGlvbiAkYShhKXsyIT09WmEoYSk/dyhcIjE4OFwiKTp2b2lkIDB9XG5mdW5jdGlvbiBhYihhKXt2YXIgYj1hLmFsdGVybmF0ZTtpZighYilyZXR1cm4gYj1aYShhKSwzPT09Yj93KFwiMTg4XCIpOnZvaWQgMCwxPT09Yj9udWxsOmE7Zm9yKHZhciBjPWEsZD1iOzspe3ZhciBlPWNbXCJyZXR1cm5cIl0sZj1lP2UuYWx0ZXJuYXRlOm51bGw7aWYoIWV8fCFmKWJyZWFrO2lmKGUuY2hpbGQ9PT1mLmNoaWxkKXtmb3IodmFyIGc9ZS5jaGlsZDtnOyl7aWYoZz09PWMpcmV0dXJuICRhKGUpLGE7aWYoZz09PWQpcmV0dXJuICRhKGUpLGI7Zz1nLnNpYmxpbmd9dyhcIjE4OFwiKX1pZihjW1wicmV0dXJuXCJdIT09ZFtcInJldHVyblwiXSljPWUsZD1mO2Vsc2V7Zz0hMTtmb3IodmFyIGg9ZS5jaGlsZDtoOyl7aWYoaD09PWMpe2c9ITA7Yz1lO2Q9ZjticmVha31pZihoPT09ZCl7Zz0hMDtkPWU7Yz1mO2JyZWFrfWg9aC5zaWJsaW5nfWlmKCFnKXtmb3IoaD1mLmNoaWxkO2g7KXtpZihoPT09Yyl7Zz0hMDtjPWY7ZD1lO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZjtjPWU7YnJlYWt9aD1oLnNpYmxpbmd9Zz9cbnZvaWQgMDp3KFwiMTg5XCIpfX1jLmFsdGVybmF0ZSE9PWQ/dyhcIjE5MFwiKTp2b2lkIDB9Yy50YWchPT1UYT93KFwiMTg4XCIpOnZvaWQgMDtyZXR1cm4gYy5zdGF0ZU5vZGUuY3VycmVudD09PWM/YTpifVxudmFyIGJiPXtpc0ZpYmVyTW91bnRlZDpmdW5jdGlvbihhKXtyZXR1cm4gMj09PVphKGEpfSxpc01vdW50ZWQ6ZnVuY3Rpb24oYSl7cmV0dXJuKGE9UGEuZ2V0KGEpKT8yPT09WmEoYSk6ITF9LGZpbmRDdXJyZW50RmliZXJVc2luZ1Nsb3dQYXRoOmFiLGZpbmRDdXJyZW50SG9zdEZpYmVyOmZ1bmN0aW9uKGEpe2E9YWIoYSk7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKHZhciBiPWE7Oyl7aWYoYi50YWc9PT1TYXx8Yi50YWc9PT1WYSlyZXR1cm4gYjtpZihiLmNoaWxkKWIuY2hpbGRbXCJyZXR1cm5cIl09YixiPWIuY2hpbGQ7ZWxzZXtpZihiPT09YSlicmVhaztmb3IoOyFiLnNpYmxpbmc7KXtpZighYltcInJldHVyblwiXXx8YltcInJldHVyblwiXT09PWEpcmV0dXJuIG51bGw7Yj1iW1wicmV0dXJuXCJdfWIuc2libGluZ1tcInJldHVyblwiXT1iW1wicmV0dXJuXCJdO2I9Yi5zaWJsaW5nfX1yZXR1cm4gbnVsbH0sZmluZEN1cnJlbnRIb3N0RmliZXJXaXRoTm9Qb3J0YWxzOmZ1bmN0aW9uKGEpe2E9YWIoYSk7XG5pZighYSlyZXR1cm4gbnVsbDtmb3IodmFyIGI9YTs7KXtpZihiLnRhZz09PVNhfHxiLnRhZz09PVZhKXJldHVybiBiO2lmKGIuY2hpbGQmJmIudGFnIT09VWEpYi5jaGlsZFtcInJldHVyblwiXT1iLGI9Yi5jaGlsZDtlbHNle2lmKGI9PT1hKWJyZWFrO2Zvcig7IWIuc2libGluZzspe2lmKCFiW1wicmV0dXJuXCJdfHxiW1wicmV0dXJuXCJdPT09YSlyZXR1cm4gbnVsbDtiPWJbXCJyZXR1cm5cIl19Yi5zaWJsaW5nW1wicmV0dXJuXCJdPWJbXCJyZXR1cm5cIl07Yj1iLnNpYmxpbmd9fXJldHVybiBudWxsfX0sSz17X2NhdWdodEVycm9yOm51bGwsX2hhc0NhdWdodEVycm9yOiExLF9yZXRocm93RXJyb3I6bnVsbCxfaGFzUmV0aHJvd0Vycm9yOiExLGluamVjdGlvbjp7aW5qZWN0RXJyb3JVdGlsczpmdW5jdGlvbihhKXtcImZ1bmN0aW9uXCIhPT10eXBlb2YgYS5pbnZva2VHdWFyZGVkQ2FsbGJhY2s/dyhcIjE5N1wiKTp2b2lkIDA7Y2I9YS5pbnZva2VHdWFyZGVkQ2FsbGJhY2t9fSxpbnZva2VHdWFyZGVkQ2FsbGJhY2s6ZnVuY3Rpb24oYSxcbmIsYyxkLGUsZixnLGgsayl7Y2IuYXBwbHkoSyxhcmd1bWVudHMpfSxpbnZva2VHdWFyZGVkQ2FsbGJhY2tBbmRDYXRjaEZpcnN0RXJyb3I6ZnVuY3Rpb24oYSxiLGMsZCxlLGYsZyxoLGspe0suaW52b2tlR3VhcmRlZENhbGxiYWNrLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtpZihLLmhhc0NhdWdodEVycm9yKCkpe3ZhciBwPUsuY2xlYXJDYXVnaHRFcnJvcigpO0suX2hhc1JldGhyb3dFcnJvcnx8KEsuX2hhc1JldGhyb3dFcnJvcj0hMCxLLl9yZXRocm93RXJyb3I9cCl9fSxyZXRocm93Q2F1Z2h0RXJyb3I6ZnVuY3Rpb24oKXtyZXR1cm4gZGIuYXBwbHkoSyxhcmd1bWVudHMpfSxoYXNDYXVnaHRFcnJvcjpmdW5jdGlvbigpe3JldHVybiBLLl9oYXNDYXVnaHRFcnJvcn0sY2xlYXJDYXVnaHRFcnJvcjpmdW5jdGlvbigpe2lmKEsuX2hhc0NhdWdodEVycm9yKXt2YXIgYT1LLl9jYXVnaHRFcnJvcjtLLl9jYXVnaHRFcnJvcj1udWxsO0suX2hhc0NhdWdodEVycm9yPSExO3JldHVybiBhfXcoXCIxOThcIil9fTtcbmZ1bmN0aW9uIGNiKGEsYixjLGQsZSxmLGcsaCxrKXtLLl9oYXNDYXVnaHRFcnJvcj0hMTtLLl9jYXVnaHRFcnJvcj1udWxsO3ZhciBwPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywzKTt0cnl7Yi5hcHBseShjLHApfWNhdGNoKHgpe0suX2NhdWdodEVycm9yPXgsSy5faGFzQ2F1Z2h0RXJyb3I9ITB9fWZ1bmN0aW9uIGRiKCl7aWYoSy5faGFzUmV0aHJvd0Vycm9yKXt2YXIgYT1LLl9yZXRocm93RXJyb3I7Sy5fcmV0aHJvd0Vycm9yPW51bGw7Sy5faGFzUmV0aHJvd0Vycm9yPSExO3Rocm93IGE7fX12YXIgZWI9SyxmYjtmdW5jdGlvbiBnYihhLGIsYyxkKXtiPWEudHlwZXx8XCJ1bmtub3duLWV2ZW50XCI7YS5jdXJyZW50VGFyZ2V0PWhiLmdldE5vZGVGcm9tSW5zdGFuY2UoZCk7ZWIuaW52b2tlR3VhcmRlZENhbGxiYWNrQW5kQ2F0Y2hGaXJzdEVycm9yKGIsYyx2b2lkIDAsYSk7YS5jdXJyZW50VGFyZ2V0PW51bGx9XG52YXIgaGI9e2lzRW5kaXNoOmZ1bmN0aW9uKGEpe3JldHVyblwidG9wTW91c2VVcFwiPT09YXx8XCJ0b3BUb3VjaEVuZFwiPT09YXx8XCJ0b3BUb3VjaENhbmNlbFwiPT09YX0saXNNb3ZlaXNoOmZ1bmN0aW9uKGEpe3JldHVyblwidG9wTW91c2VNb3ZlXCI9PT1hfHxcInRvcFRvdWNoTW92ZVwiPT09YX0saXNTdGFydGlzaDpmdW5jdGlvbihhKXtyZXR1cm5cInRvcE1vdXNlRG93blwiPT09YXx8XCJ0b3BUb3VjaFN0YXJ0XCI9PT1hfSxleGVjdXRlRGlyZWN0RGlzcGF0Y2g6ZnVuY3Rpb24oYSl7dmFyIGI9YS5fZGlzcGF0Y2hMaXN0ZW5lcnMsYz1hLl9kaXNwYXRjaEluc3RhbmNlcztBcnJheS5pc0FycmF5KGIpP3coXCIxMDNcIik6dm9pZCAwO2EuY3VycmVudFRhcmdldD1iP2hiLmdldE5vZGVGcm9tSW5zdGFuY2UoYyk6bnVsbDtiPWI/YihhKTpudWxsO2EuY3VycmVudFRhcmdldD1udWxsO2EuX2Rpc3BhdGNoTGlzdGVuZXJzPW51bGw7YS5fZGlzcGF0Y2hJbnN0YW5jZXM9bnVsbDtyZXR1cm4gYn0sZXhlY3V0ZURpc3BhdGNoZXNJbk9yZGVyOmZ1bmN0aW9uKGEsXG5iKXt2YXIgYz1hLl9kaXNwYXRjaExpc3RlbmVycyxkPWEuX2Rpc3BhdGNoSW5zdGFuY2VzO2lmKEFycmF5LmlzQXJyYXkoYykpZm9yKHZhciBlPTA7ZTxjLmxlbmd0aCYmIWEuaXNQcm9wYWdhdGlvblN0b3BwZWQoKTtlKyspZ2IoYSxiLGNbZV0sZFtlXSk7ZWxzZSBjJiZnYihhLGIsYyxkKTthLl9kaXNwYXRjaExpc3RlbmVycz1udWxsO2EuX2Rpc3BhdGNoSW5zdGFuY2VzPW51bGx9LGV4ZWN1dGVEaXNwYXRjaGVzSW5PcmRlclN0b3BBdFRydWU6ZnVuY3Rpb24oYSl7YTp7dmFyIGI9YS5fZGlzcGF0Y2hMaXN0ZW5lcnM7dmFyIGM9YS5fZGlzcGF0Y2hJbnN0YW5jZXM7aWYoQXJyYXkuaXNBcnJheShiKSlmb3IodmFyIGQ9MDtkPGIubGVuZ3RoJiYhYS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpO2QrKyl7aWYoYltkXShhLGNbZF0pKXtiPWNbZF07YnJlYWsgYX19ZWxzZSBpZihiJiZiKGEsYykpe2I9YzticmVhayBhfWI9bnVsbH1hLl9kaXNwYXRjaEluc3RhbmNlcz1udWxsO2EuX2Rpc3BhdGNoTGlzdGVuZXJzPVxubnVsbDtyZXR1cm4gYn0saGFzRGlzcGF0Y2hlczpmdW5jdGlvbihhKXtyZXR1cm4hIWEuX2Rpc3BhdGNoTGlzdGVuZXJzfSxnZXRGaWJlckN1cnJlbnRQcm9wc0Zyb21Ob2RlOmZ1bmN0aW9uKGEpe3JldHVybiBmYi5nZXRGaWJlckN1cnJlbnRQcm9wc0Zyb21Ob2RlKGEpfSxnZXRJbnN0YW5jZUZyb21Ob2RlOmZ1bmN0aW9uKGEpe3JldHVybiBmYi5nZXRJbnN0YW5jZUZyb21Ob2RlKGEpfSxnZXROb2RlRnJvbUluc3RhbmNlOmZ1bmN0aW9uKGEpe3JldHVybiBmYi5nZXROb2RlRnJvbUluc3RhbmNlKGEpfSxpbmplY3Rpb246e2luamVjdENvbXBvbmVudFRyZWU6ZnVuY3Rpb24oYSl7ZmI9YX19fSxpYj1oYixqYj1udWxsLGtiPW51bGwsbGI9bnVsbDtcbmZ1bmN0aW9uIG1iKGEpe2lmKGE9aWIuZ2V0SW5zdGFuY2VGcm9tTm9kZShhKSlpZihcIm51bWJlclwiPT09dHlwZW9mIGEudGFnKXtqYiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGpiLnJlc3RvcmVDb250cm9sbGVkU3RhdGU/dm9pZCAwOncoXCIxOTRcIik7dmFyIGI9aWIuZ2V0RmliZXJDdXJyZW50UHJvcHNGcm9tTm9kZShhLnN0YXRlTm9kZSk7amIucmVzdG9yZUNvbnRyb2xsZWRTdGF0ZShhLnN0YXRlTm9kZSxhLnR5cGUsYil9ZWxzZVwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhLnJlc3RvcmVDb250cm9sbGVkU3RhdGU/dyhcIjE5NVwiKTp2b2lkIDAsYS5yZXN0b3JlQ29udHJvbGxlZFN0YXRlKCl9XG52YXIgbmI9e2luamVjdGlvbjp7aW5qZWN0RmliZXJDb250cm9sbGVkSG9zdENvbXBvbmVudDpmdW5jdGlvbihhKXtqYj1hfX0sZW5xdWV1ZVN0YXRlUmVzdG9yZTpmdW5jdGlvbihhKXtrYj9sYj9sYi5wdXNoKGEpOmxiPVthXTprYj1hfSxyZXN0b3JlU3RhdGVJZk5lZWRlZDpmdW5jdGlvbigpe2lmKGtiKXt2YXIgYT1rYixiPWxiO2xiPWtiPW51bGw7bWIoYSk7aWYoYilmb3IoYT0wO2E8Yi5sZW5ndGg7YSsrKW1iKGJbYV0pfX19O2Z1bmN0aW9uIG9iKGEsYixjLGQsZSxmKXtyZXR1cm4gYShiLGMsZCxlLGYpfWZ1bmN0aW9uIHBiKGEsYil7cmV0dXJuIGEoYil9ZnVuY3Rpb24gcWIoYSxiKXtyZXR1cm4gcGIoYSxiKX1cbnZhciByYj0hMSxzYj17YmF0Y2hlZFVwZGF0ZXM6ZnVuY3Rpb24oYSxiKXtpZihyYilyZXR1cm4gb2IocWIsYSxiKTtyYj0hMDt0cnl7cmV0dXJuIG9iKHFiLGEsYil9ZmluYWxseXtyYj0hMSxuYi5yZXN0b3JlU3RhdGVJZk5lZWRlZCgpfX0saW5qZWN0aW9uOntpbmplY3RTdGFja0JhdGNoZWRVcGRhdGVzOmZ1bmN0aW9uKGEpe29iPWF9LGluamVjdEZpYmVyQmF0Y2hlZFVwZGF0ZXM6ZnVuY3Rpb24oYSl7cGI9YX19fSx0Yj1GLlRFWFRfTk9ERTtmdW5jdGlvbiB1YihhKXthPWEudGFyZ2V0fHxhLnNyY0VsZW1lbnR8fHdpbmRvdzthLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50JiYoYT1hLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50KTtyZXR1cm4gYS5ub2RlVHlwZT09PXRiP2EucGFyZW50Tm9kZTphfXZhciB2Yj1FLkhvc3RSb290LHdiPVtdO1xuZnVuY3Rpb24geGIoYSl7dmFyIGI9YS50YXJnZXRJbnN0O2Rve2lmKCFiKXthLmFuY2VzdG9ycy5wdXNoKGIpO2JyZWFrfXZhciBjPWI7aWYoXCJudW1iZXJcIj09PXR5cGVvZiBjLnRhZyl7Zm9yKDtjW1wicmV0dXJuXCJdOyljPWNbXCJyZXR1cm5cIl07Yz1jLnRhZyE9PXZiP251bGw6Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mb31lbHNle2Zvcig7Yy5faG9zdFBhcmVudDspYz1jLl9ob3N0UGFyZW50O2M9Ry5nZXROb2RlRnJvbUluc3RhbmNlKGMpLnBhcmVudE5vZGV9aWYoIWMpYnJlYWs7YS5hbmNlc3RvcnMucHVzaChiKTtiPUcuZ2V0Q2xvc2VzdEluc3RhbmNlRnJvbU5vZGUoYyl9d2hpbGUoYik7Zm9yKGM9MDtjPGEuYW5jZXN0b3JzLmxlbmd0aDtjKyspYj1hLmFuY2VzdG9yc1tjXSx5Yi5faGFuZGxlVG9wTGV2ZWwoYS50b3BMZXZlbFR5cGUsYixhLm5hdGl2ZUV2ZW50LHViKGEubmF0aXZlRXZlbnQpKX1cbnZhciB5Yj17X2VuYWJsZWQ6ITAsX2hhbmRsZVRvcExldmVsOm51bGwsc2V0SGFuZGxlVG9wTGV2ZWw6ZnVuY3Rpb24oYSl7eWIuX2hhbmRsZVRvcExldmVsPWF9LHNldEVuYWJsZWQ6ZnVuY3Rpb24oYSl7eWIuX2VuYWJsZWQ9ISFhfSxpc0VuYWJsZWQ6ZnVuY3Rpb24oKXtyZXR1cm4geWIuX2VuYWJsZWR9LHRyYXBCdWJibGVkRXZlbnQ6ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBjP2JhLmxpc3RlbihjLGIseWIuZGlzcGF0Y2hFdmVudC5iaW5kKG51bGwsYSkpOm51bGx9LHRyYXBDYXB0dXJlZEV2ZW50OmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gYz9iYS5jYXB0dXJlKGMsYix5Yi5kaXNwYXRjaEV2ZW50LmJpbmQobnVsbCxhKSk6bnVsbH0sZGlzcGF0Y2hFdmVudDpmdW5jdGlvbihhLGIpe2lmKHliLl9lbmFibGVkKXt2YXIgYz11YihiKTtjPUcuZ2V0Q2xvc2VzdEluc3RhbmNlRnJvbU5vZGUoYyk7bnVsbD09PWN8fFwibnVtYmVyXCIhPT10eXBlb2YgYy50YWd8fGJiLmlzRmliZXJNb3VudGVkKGMpfHxcbihjPW51bGwpO2lmKHdiLmxlbmd0aCl7dmFyIGQ9d2IucG9wKCk7ZC50b3BMZXZlbFR5cGU9YTtkLm5hdGl2ZUV2ZW50PWI7ZC50YXJnZXRJbnN0PWM7YT1kfWVsc2UgYT17dG9wTGV2ZWxUeXBlOmEsbmF0aXZlRXZlbnQ6Yix0YXJnZXRJbnN0OmMsYW5jZXN0b3JzOltdfTt0cnl7c2IuYmF0Y2hlZFVwZGF0ZXMoeGIsYSl9ZmluYWxseXthLnRvcExldmVsVHlwZT1udWxsLGEubmF0aXZlRXZlbnQ9bnVsbCxhLnRhcmdldEluc3Q9bnVsbCxhLmFuY2VzdG9ycy5sZW5ndGg9MCwxMD53Yi5sZW5ndGgmJndiLnB1c2goYSl9fX19LEw9eWI7ZnVuY3Rpb24gQ2IoYSxiKXtudWxsPT1iP3coXCIzMFwiKTp2b2lkIDA7aWYobnVsbD09YSlyZXR1cm4gYjtpZihBcnJheS5pc0FycmF5KGEpKXtpZihBcnJheS5pc0FycmF5KGIpKXJldHVybiBhLnB1c2guYXBwbHkoYSxiKSxhO2EucHVzaChiKTtyZXR1cm4gYX1yZXR1cm4gQXJyYXkuaXNBcnJheShiKT9bYV0uY29uY2F0KGIpOlthLGJdfVxuZnVuY3Rpb24gRGIoYSxiLGMpe0FycmF5LmlzQXJyYXkoYSk/YS5mb3JFYWNoKGIsYyk6YSYmYi5jYWxsKGMsYSl9dmFyIEViPW51bGw7ZnVuY3Rpb24gRmIoYSxiKXthJiYoaWIuZXhlY3V0ZURpc3BhdGNoZXNJbk9yZGVyKGEsYiksYS5pc1BlcnNpc3RlbnQoKXx8YS5jb25zdHJ1Y3Rvci5yZWxlYXNlKGEpKX1mdW5jdGlvbiBHYihhKXtyZXR1cm4gRmIoYSwhMCl9ZnVuY3Rpb24gSGIoYSl7cmV0dXJuIEZiKGEsITEpfVxuZnVuY3Rpb24gSWIoYSxiLGMpe3N3aXRjaChhKXtjYXNlIFwib25DbGlja1wiOmNhc2UgXCJvbkNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbkRvdWJsZUNsaWNrXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VEb3duXCI6Y2FzZSBcIm9uTW91c2VEb3duQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlTW92ZVwiOmNhc2UgXCJvbk1vdXNlTW92ZUNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZVVwXCI6Y2FzZSBcIm9uTW91c2VVcENhcHR1cmVcIjpyZXR1cm4hKCFjLmRpc2FibGVkfHxcImJ1dHRvblwiIT09YiYmXCJpbnB1dFwiIT09YiYmXCJzZWxlY3RcIiE9PWImJlwidGV4dGFyZWFcIiE9PWIpO2RlZmF1bHQ6cmV0dXJuITF9fVxudmFyIEpiPXtpbmplY3Rpb246e2luamVjdEV2ZW50UGx1Z2luT3JkZXI6c2EuaW5qZWN0RXZlbnRQbHVnaW5PcmRlcixpbmplY3RFdmVudFBsdWdpbnNCeU5hbWU6c2EuaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lfSxnZXRMaXN0ZW5lcjpmdW5jdGlvbihhLGIpe2lmKFwibnVtYmVyXCI9PT10eXBlb2YgYS50YWcpe3ZhciBjPWEuc3RhdGVOb2RlO2lmKCFjKXJldHVybiBudWxsO3ZhciBkPWliLmdldEZpYmVyQ3VycmVudFByb3BzRnJvbU5vZGUoYyk7aWYoIWQpcmV0dXJuIG51bGw7Yz1kW2JdO2lmKEliKGIsYS50eXBlLGQpKXJldHVybiBudWxsfWVsc2V7ZD1hLl9jdXJyZW50RWxlbWVudDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGR8fFwibnVtYmVyXCI9PT10eXBlb2YgZHx8IWEuX3Jvb3ROb2RlSUQpcmV0dXJuIG51bGw7YT1kLnByb3BzO2M9YVtiXTtpZihJYihiLGQudHlwZSxhKSlyZXR1cm4gbnVsbH1jJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYz93KFwiMjMxXCIsYix0eXBlb2YgYyk6dm9pZCAwO1xucmV0dXJuIGN9LGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7Zm9yKHZhciBlLGY9c2EucGx1Z2lucyxnPTA7ZzxmLmxlbmd0aDtnKyspe3ZhciBoPWZbZ107aCYmKGg9aC5leHRyYWN0RXZlbnRzKGEsYixjLGQpKSYmKGU9Q2IoZSxoKSl9cmV0dXJuIGV9LGVucXVldWVFdmVudHM6ZnVuY3Rpb24oYSl7YSYmKEViPUNiKEViLGEpKX0scHJvY2Vzc0V2ZW50UXVldWU6ZnVuY3Rpb24oYSl7dmFyIGI9RWI7RWI9bnVsbDthP0RiKGIsR2IpOkRiKGIsSGIpO0ViP3coXCI5NVwiKTp2b2lkIDA7ZWIucmV0aHJvd0NhdWdodEVycm9yKCl9fSxLYjtsLmNhblVzZURPTSYmKEtiPWRvY3VtZW50LmltcGxlbWVudGF0aW9uJiZkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5oYXNGZWF0dXJlJiYhMCE9PWRvY3VtZW50LmltcGxlbWVudGF0aW9uLmhhc0ZlYXR1cmUoXCJcIixcIlwiKSk7XG5mdW5jdGlvbiBMYihhLGIpe2lmKCFsLmNhblVzZURPTXx8YiYmIShcImFkZEV2ZW50TGlzdGVuZXJcImluIGRvY3VtZW50KSlyZXR1cm4hMTtiPVwib25cIithO3ZhciBjPWIgaW4gZG9jdW1lbnQ7Y3x8KGM9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSxjLnNldEF0dHJpYnV0ZShiLFwicmV0dXJuO1wiKSxjPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBjW2JdKTshYyYmS2ImJlwid2hlZWxcIj09PWEmJihjPWRvY3VtZW50LmltcGxlbWVudGF0aW9uLmhhc0ZlYXR1cmUoXCJFdmVudHMud2hlZWxcIixcIjMuMFwiKSk7cmV0dXJuIGN9ZnVuY3Rpb24gTWIoYSxiKXt2YXIgYz17fTtjW2EudG9Mb3dlckNhc2UoKV09Yi50b0xvd2VyQ2FzZSgpO2NbXCJXZWJraXRcIithXT1cIndlYmtpdFwiK2I7Y1tcIk1velwiK2FdPVwibW96XCIrYjtjW1wibXNcIithXT1cIk1TXCIrYjtjW1wiT1wiK2FdPVwib1wiK2IudG9Mb3dlckNhc2UoKTtyZXR1cm4gY31cbnZhciBOYj17YW5pbWF0aW9uZW5kOk1iKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25FbmRcIiksYW5pbWF0aW9uaXRlcmF0aW9uOk1iKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25JdGVyYXRpb25cIiksYW5pbWF0aW9uc3RhcnQ6TWIoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvblN0YXJ0XCIpLHRyYW5zaXRpb25lbmQ6TWIoXCJUcmFuc2l0aW9uXCIsXCJUcmFuc2l0aW9uRW5kXCIpfSxPYj17fSxQYj17fTtsLmNhblVzZURPTSYmKFBiPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikuc3R5bGUsXCJBbmltYXRpb25FdmVudFwiaW4gd2luZG93fHwoZGVsZXRlIE5iLmFuaW1hdGlvbmVuZC5hbmltYXRpb24sZGVsZXRlIE5iLmFuaW1hdGlvbml0ZXJhdGlvbi5hbmltYXRpb24sZGVsZXRlIE5iLmFuaW1hdGlvbnN0YXJ0LmFuaW1hdGlvbiksXCJUcmFuc2l0aW9uRXZlbnRcImluIHdpbmRvd3x8ZGVsZXRlIE5iLnRyYW5zaXRpb25lbmQudHJhbnNpdGlvbik7XG5mdW5jdGlvbiBRYihhKXtpZihPYlthXSlyZXR1cm4gT2JbYV07aWYoIU5iW2FdKXJldHVybiBhO3ZhciBiPU5iW2FdLGM7Zm9yKGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpJiZjIGluIFBiKXJldHVybiBPYlthXT1iW2NdO3JldHVyblwiXCJ9XG52YXIgUmI9e3RvcEFib3J0OlwiYWJvcnRcIix0b3BBbmltYXRpb25FbmQ6UWIoXCJhbmltYXRpb25lbmRcIil8fFwiYW5pbWF0aW9uZW5kXCIsdG9wQW5pbWF0aW9uSXRlcmF0aW9uOlFiKFwiYW5pbWF0aW9uaXRlcmF0aW9uXCIpfHxcImFuaW1hdGlvbml0ZXJhdGlvblwiLHRvcEFuaW1hdGlvblN0YXJ0OlFiKFwiYW5pbWF0aW9uc3RhcnRcIil8fFwiYW5pbWF0aW9uc3RhcnRcIix0b3BCbHVyOlwiYmx1clwiLHRvcENhbmNlbDpcImNhbmNlbFwiLHRvcENhblBsYXk6XCJjYW5wbGF5XCIsdG9wQ2FuUGxheVRocm91Z2g6XCJjYW5wbGF5dGhyb3VnaFwiLHRvcENoYW5nZTpcImNoYW5nZVwiLHRvcENsaWNrOlwiY2xpY2tcIix0b3BDbG9zZTpcImNsb3NlXCIsdG9wQ29tcG9zaXRpb25FbmQ6XCJjb21wb3NpdGlvbmVuZFwiLHRvcENvbXBvc2l0aW9uU3RhcnQ6XCJjb21wb3NpdGlvbnN0YXJ0XCIsdG9wQ29tcG9zaXRpb25VcGRhdGU6XCJjb21wb3NpdGlvbnVwZGF0ZVwiLHRvcENvbnRleHRNZW51OlwiY29udGV4dG1lbnVcIix0b3BDb3B5OlwiY29weVwiLFxudG9wQ3V0OlwiY3V0XCIsdG9wRG91YmxlQ2xpY2s6XCJkYmxjbGlja1wiLHRvcERyYWc6XCJkcmFnXCIsdG9wRHJhZ0VuZDpcImRyYWdlbmRcIix0b3BEcmFnRW50ZXI6XCJkcmFnZW50ZXJcIix0b3BEcmFnRXhpdDpcImRyYWdleGl0XCIsdG9wRHJhZ0xlYXZlOlwiZHJhZ2xlYXZlXCIsdG9wRHJhZ092ZXI6XCJkcmFnb3ZlclwiLHRvcERyYWdTdGFydDpcImRyYWdzdGFydFwiLHRvcERyb3A6XCJkcm9wXCIsdG9wRHVyYXRpb25DaGFuZ2U6XCJkdXJhdGlvbmNoYW5nZVwiLHRvcEVtcHRpZWQ6XCJlbXB0aWVkXCIsdG9wRW5jcnlwdGVkOlwiZW5jcnlwdGVkXCIsdG9wRW5kZWQ6XCJlbmRlZFwiLHRvcEVycm9yOlwiZXJyb3JcIix0b3BGb2N1czpcImZvY3VzXCIsdG9wSW5wdXQ6XCJpbnB1dFwiLHRvcEtleURvd246XCJrZXlkb3duXCIsdG9wS2V5UHJlc3M6XCJrZXlwcmVzc1wiLHRvcEtleVVwOlwia2V5dXBcIix0b3BMb2FkZWREYXRhOlwibG9hZGVkZGF0YVwiLHRvcExvYWQ6XCJsb2FkXCIsdG9wTG9hZGVkTWV0YWRhdGE6XCJsb2FkZWRtZXRhZGF0YVwiLHRvcExvYWRTdGFydDpcImxvYWRzdGFydFwiLFxudG9wTW91c2VEb3duOlwibW91c2Vkb3duXCIsdG9wTW91c2VNb3ZlOlwibW91c2Vtb3ZlXCIsdG9wTW91c2VPdXQ6XCJtb3VzZW91dFwiLHRvcE1vdXNlT3ZlcjpcIm1vdXNlb3ZlclwiLHRvcE1vdXNlVXA6XCJtb3VzZXVwXCIsdG9wUGFzdGU6XCJwYXN0ZVwiLHRvcFBhdXNlOlwicGF1c2VcIix0b3BQbGF5OlwicGxheVwiLHRvcFBsYXlpbmc6XCJwbGF5aW5nXCIsdG9wUHJvZ3Jlc3M6XCJwcm9ncmVzc1wiLHRvcFJhdGVDaGFuZ2U6XCJyYXRlY2hhbmdlXCIsdG9wU2Nyb2xsOlwic2Nyb2xsXCIsdG9wU2Vla2VkOlwic2Vla2VkXCIsdG9wU2Vla2luZzpcInNlZWtpbmdcIix0b3BTZWxlY3Rpb25DaGFuZ2U6XCJzZWxlY3Rpb25jaGFuZ2VcIix0b3BTdGFsbGVkOlwic3RhbGxlZFwiLHRvcFN1c3BlbmQ6XCJzdXNwZW5kXCIsdG9wVGV4dElucHV0OlwidGV4dElucHV0XCIsdG9wVGltZVVwZGF0ZTpcInRpbWV1cGRhdGVcIix0b3BUb2dnbGU6XCJ0b2dnbGVcIix0b3BUb3VjaENhbmNlbDpcInRvdWNoY2FuY2VsXCIsdG9wVG91Y2hFbmQ6XCJ0b3VjaGVuZFwiLHRvcFRvdWNoTW92ZTpcInRvdWNobW92ZVwiLFxudG9wVG91Y2hTdGFydDpcInRvdWNoc3RhcnRcIix0b3BUcmFuc2l0aW9uRW5kOlFiKFwidHJhbnNpdGlvbmVuZFwiKXx8XCJ0cmFuc2l0aW9uZW5kXCIsdG9wVm9sdW1lQ2hhbmdlOlwidm9sdW1lY2hhbmdlXCIsdG9wV2FpdGluZzpcIndhaXRpbmdcIix0b3BXaGVlbDpcIndoZWVsXCJ9LFNiPXt9LFRiPTAsVWI9XCJfcmVhY3RMaXN0ZW5lcnNJRFwiKyhcIlwiK01hdGgucmFuZG9tKCkpLnNsaWNlKDIpO2Z1bmN0aW9uIFZiKGEpe09iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChhLFViKXx8KGFbVWJdPVRiKyssU2JbYVtVYl1dPXt9KTtyZXR1cm4gU2JbYVtVYl1dfVxudmFyIE09bih7fSx7aGFuZGxlVG9wTGV2ZWw6ZnVuY3Rpb24oYSxiLGMsZCl7YT1KYi5leHRyYWN0RXZlbnRzKGEsYixjLGQpO0piLmVucXVldWVFdmVudHMoYSk7SmIucHJvY2Vzc0V2ZW50UXVldWUoITEpfX0se3NldEVuYWJsZWQ6ZnVuY3Rpb24oYSl7TCYmTC5zZXRFbmFibGVkKGEpfSxpc0VuYWJsZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hKCFMfHwhTC5pc0VuYWJsZWQoKSl9LGxpc3RlblRvOmZ1bmN0aW9uKGEsYil7dmFyIGM9VmIoYik7YT1zYS5yZWdpc3RyYXRpb25OYW1lRGVwZW5kZW5jaWVzW2FdO2Zvcih2YXIgZD0wO2Q8YS5sZW5ndGg7ZCsrKXt2YXIgZT1hW2RdO2MuaGFzT3duUHJvcGVydHkoZSkmJmNbZV18fChcInRvcFdoZWVsXCI9PT1lP0xiKFwid2hlZWxcIik/TC50cmFwQnViYmxlZEV2ZW50KFwidG9wV2hlZWxcIixcIndoZWVsXCIsYik6TGIoXCJtb3VzZXdoZWVsXCIpP0wudHJhcEJ1YmJsZWRFdmVudChcInRvcFdoZWVsXCIsXCJtb3VzZXdoZWVsXCIsYik6TC50cmFwQnViYmxlZEV2ZW50KFwidG9wV2hlZWxcIixcblwiRE9NTW91c2VTY3JvbGxcIixiKTpcInRvcFNjcm9sbFwiPT09ZT9MLnRyYXBDYXB0dXJlZEV2ZW50KFwidG9wU2Nyb2xsXCIsXCJzY3JvbGxcIixiKTpcInRvcEZvY3VzXCI9PT1lfHxcInRvcEJsdXJcIj09PWU/KEwudHJhcENhcHR1cmVkRXZlbnQoXCJ0b3BGb2N1c1wiLFwiZm9jdXNcIixiKSxMLnRyYXBDYXB0dXJlZEV2ZW50KFwidG9wQmx1clwiLFwiYmx1clwiLGIpLGMudG9wQmx1cj0hMCxjLnRvcEZvY3VzPSEwKTpcInRvcENhbmNlbFwiPT09ZT8oTGIoXCJjYW5jZWxcIiwhMCkmJkwudHJhcENhcHR1cmVkRXZlbnQoXCJ0b3BDYW5jZWxcIixcImNhbmNlbFwiLGIpLGMudG9wQ2FuY2VsPSEwKTpcInRvcENsb3NlXCI9PT1lPyhMYihcImNsb3NlXCIsITApJiZMLnRyYXBDYXB0dXJlZEV2ZW50KFwidG9wQ2xvc2VcIixcImNsb3NlXCIsYiksYy50b3BDbG9zZT0hMCk6UmIuaGFzT3duUHJvcGVydHkoZSkmJkwudHJhcEJ1YmJsZWRFdmVudChlLFJiW2VdLGIpLGNbZV09ITApfX0saXNMaXN0ZW5pbmdUb0FsbERlcGVuZGVuY2llczpmdW5jdGlvbihhLFxuYil7Yj1WYihiKTthPXNhLnJlZ2lzdHJhdGlvbk5hbWVEZXBlbmRlbmNpZXNbYV07Zm9yKHZhciBjPTA7YzxhLmxlbmd0aDtjKyspe3ZhciBkPWFbY107aWYoIWIuaGFzT3duUHJvcGVydHkoZCl8fCFiW2RdKXJldHVybiExfXJldHVybiEwfSx0cmFwQnViYmxlZEV2ZW50OmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gTC50cmFwQnViYmxlZEV2ZW50KGEsYixjKX0sdHJhcENhcHR1cmVkRXZlbnQ6ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBMLnRyYXBDYXB0dXJlZEV2ZW50KGEsYixjKX19KSxXYj17YW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6ITAsYm9yZGVySW1hZ2VPdXRzZXQ6ITAsYm9yZGVySW1hZ2VTbGljZTohMCxib3JkZXJJbWFnZVdpZHRoOiEwLGJveEZsZXg6ITAsYm94RmxleEdyb3VwOiEwLGJveE9yZGluYWxHcm91cDohMCxjb2x1bW5Db3VudDohMCxjb2x1bW5zOiEwLGZsZXg6ITAsZmxleEdyb3c6ITAsZmxleFBvc2l0aXZlOiEwLGZsZXhTaHJpbms6ITAsZmxleE5lZ2F0aXZlOiEwLFxuZmxleE9yZGVyOiEwLGdyaWRSb3c6ITAsZ3JpZFJvd0VuZDohMCxncmlkUm93U3BhbjohMCxncmlkUm93U3RhcnQ6ITAsZ3JpZENvbHVtbjohMCxncmlkQ29sdW1uRW5kOiEwLGdyaWRDb2x1bW5TcGFuOiEwLGdyaWRDb2x1bW5TdGFydDohMCxmb250V2VpZ2h0OiEwLGxpbmVDbGFtcDohMCxsaW5lSGVpZ2h0OiEwLG9wYWNpdHk6ITAsb3JkZXI6ITAsb3JwaGFuczohMCx0YWJTaXplOiEwLHdpZG93czohMCx6SW5kZXg6ITAsem9vbTohMCxmaWxsT3BhY2l0eTohMCxmbG9vZE9wYWNpdHk6ITAsc3RvcE9wYWNpdHk6ITAsc3Ryb2tlRGFzaGFycmF5OiEwLHN0cm9rZURhc2hvZmZzZXQ6ITAsc3Ryb2tlTWl0ZXJsaW1pdDohMCxzdHJva2VPcGFjaXR5OiEwLHN0cm9rZVdpZHRoOiEwfSxYYj1bXCJXZWJraXRcIixcIm1zXCIsXCJNb3pcIixcIk9cIl07XG5PYmplY3Qua2V5cyhXYikuZm9yRWFjaChmdW5jdGlvbihhKXtYYi5mb3JFYWNoKGZ1bmN0aW9uKGIpe2I9YithLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Euc3Vic3RyaW5nKDEpO1diW2JdPVdiW2FdfSl9KTtcbnZhciBZYj17aXNVbml0bGVzc051bWJlcjpXYixzaG9ydGhhbmRQcm9wZXJ0eUV4cGFuc2lvbnM6e2JhY2tncm91bmQ6e2JhY2tncm91bmRBdHRhY2htZW50OiEwLGJhY2tncm91bmRDb2xvcjohMCxiYWNrZ3JvdW5kSW1hZ2U6ITAsYmFja2dyb3VuZFBvc2l0aW9uWDohMCxiYWNrZ3JvdW5kUG9zaXRpb25ZOiEwLGJhY2tncm91bmRSZXBlYXQ6ITB9LGJhY2tncm91bmRQb3NpdGlvbjp7YmFja2dyb3VuZFBvc2l0aW9uWDohMCxiYWNrZ3JvdW5kUG9zaXRpb25ZOiEwfSxib3JkZXI6e2JvcmRlcldpZHRoOiEwLGJvcmRlclN0eWxlOiEwLGJvcmRlckNvbG9yOiEwfSxib3JkZXJCb3R0b206e2JvcmRlckJvdHRvbVdpZHRoOiEwLGJvcmRlckJvdHRvbVN0eWxlOiEwLGJvcmRlckJvdHRvbUNvbG9yOiEwfSxib3JkZXJMZWZ0Ontib3JkZXJMZWZ0V2lkdGg6ITAsYm9yZGVyTGVmdFN0eWxlOiEwLGJvcmRlckxlZnRDb2xvcjohMH0sYm9yZGVyUmlnaHQ6e2JvcmRlclJpZ2h0V2lkdGg6ITAsYm9yZGVyUmlnaHRTdHlsZTohMCxcbmJvcmRlclJpZ2h0Q29sb3I6ITB9LGJvcmRlclRvcDp7Ym9yZGVyVG9wV2lkdGg6ITAsYm9yZGVyVG9wU3R5bGU6ITAsYm9yZGVyVG9wQ29sb3I6ITB9LGZvbnQ6e2ZvbnRTdHlsZTohMCxmb250VmFyaWFudDohMCxmb250V2VpZ2h0OiEwLGZvbnRTaXplOiEwLGxpbmVIZWlnaHQ6ITAsZm9udEZhbWlseTohMH0sb3V0bGluZTp7b3V0bGluZVdpZHRoOiEwLG91dGxpbmVTdHlsZTohMCxvdXRsaW5lQ29sb3I6ITB9fX0sWmI9WWIuaXNVbml0bGVzc051bWJlciwkYj0hMTtpZihsLmNhblVzZURPTSl7dmFyIGFjPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikuc3R5bGU7dHJ5e2FjLmZvbnQ9XCJcIn1jYXRjaChhKXskYj0hMH19XG52YXIgYmM9e2NyZWF0ZURhbmdlcm91c1N0cmluZ0ZvclN0eWxlczpmdW5jdGlvbigpe30sc2V0VmFsdWVGb3JTdHlsZXM6ZnVuY3Rpb24oYSxiKXthPWEuc3R5bGU7Zm9yKHZhciBjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSl7dmFyIGQ9MD09PWMuaW5kZXhPZihcIi0tXCIpO3ZhciBlPWM7dmFyIGY9YltjXTtlPW51bGw9PWZ8fFwiYm9vbGVhblwiPT09dHlwZW9mIGZ8fFwiXCI9PT1mP1wiXCI6ZHx8XCJudW1iZXJcIiE9PXR5cGVvZiBmfHwwPT09Znx8WmIuaGFzT3duUHJvcGVydHkoZSkmJlpiW2VdPyhcIlwiK2YpLnRyaW0oKTpmK1wicHhcIjtcImZsb2F0XCI9PT1jJiYoYz1cImNzc0Zsb2F0XCIpO2lmKGQpYS5zZXRQcm9wZXJ0eShjLGUpO2Vsc2UgaWYoZSlhW2NdPWU7ZWxzZSBpZihkPSRiJiZZYi5zaG9ydGhhbmRQcm9wZXJ0eUV4cGFuc2lvbnNbY10pZm9yKHZhciBnIGluIGQpYVtnXT1cIlwiO2Vsc2UgYVtjXT1cIlwifX19LGNjPW5ldyBSZWdFeHAoXCJeW1wiK0EuQVRUUklCVVRFX05BTUVfU1RBUlRfQ0hBUitcblwiXVtcIitBLkFUVFJJQlVURV9OQU1FX0NIQVIrXCJdKiRcIiksZGM9e30sZWM9e307ZnVuY3Rpb24gZmMoYSl7aWYoZWMuaGFzT3duUHJvcGVydHkoYSkpcmV0dXJuITA7aWYoZGMuaGFzT3duUHJvcGVydHkoYSkpcmV0dXJuITE7aWYoY2MudGVzdChhKSlyZXR1cm4gZWNbYV09ITA7ZGNbYV09ITA7cmV0dXJuITF9XG52YXIgZ2M9e3NldEF0dHJpYnV0ZUZvcklEOmZ1bmN0aW9uKGEsYil7YS5zZXRBdHRyaWJ1dGUoQS5JRF9BVFRSSUJVVEVfTkFNRSxiKX0sc2V0QXR0cmlidXRlRm9yUm9vdDpmdW5jdGlvbihhKXthLnNldEF0dHJpYnV0ZShBLlJPT1RfQVRUUklCVVRFX05BTUUsXCJcIil9LGdldFZhbHVlRm9yUHJvcGVydHk6ZnVuY3Rpb24oKXt9LGdldFZhbHVlRm9yQXR0cmlidXRlOmZ1bmN0aW9uKCl7fSxzZXRWYWx1ZUZvclByb3BlcnR5OmZ1bmN0aW9uKGEsYixjKXt2YXIgZD1BLmdldFByb3BlcnR5SW5mbyhiKTtpZihkJiZBLnNob3VsZFNldEF0dHJpYnV0ZShiLGMpKXt2YXIgZT1kLm11dGF0aW9uTWV0aG9kO2U/ZShhLGMpOm51bGw9PWN8fGQuaGFzQm9vbGVhblZhbHVlJiYhY3x8ZC5oYXNOdW1lcmljVmFsdWUmJmlzTmFOKGMpfHxkLmhhc1Bvc2l0aXZlTnVtZXJpY1ZhbHVlJiYxPmN8fGQuaGFzT3ZlcmxvYWRlZEJvb2xlYW5WYWx1ZSYmITE9PT1jP2djLmRlbGV0ZVZhbHVlRm9yUHJvcGVydHkoYSxcbmIpOmQubXVzdFVzZVByb3BlcnR5P2FbZC5wcm9wZXJ0eU5hbWVdPWM6KGI9ZC5hdHRyaWJ1dGVOYW1lLChlPWQuYXR0cmlidXRlTmFtZXNwYWNlKT9hLnNldEF0dHJpYnV0ZU5TKGUsYixcIlwiK2MpOmQuaGFzQm9vbGVhblZhbHVlfHxkLmhhc092ZXJsb2FkZWRCb29sZWFuVmFsdWUmJiEwPT09Yz9hLnNldEF0dHJpYnV0ZShiLFwiXCIpOmEuc2V0QXR0cmlidXRlKGIsXCJcIitjKSl9ZWxzZSBnYy5zZXRWYWx1ZUZvckF0dHJpYnV0ZShhLGIsQS5zaG91bGRTZXRBdHRyaWJ1dGUoYixjKT9jOm51bGwpfSxzZXRWYWx1ZUZvckF0dHJpYnV0ZTpmdW5jdGlvbihhLGIsYyl7ZmMoYikmJihudWxsPT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOmEuc2V0QXR0cmlidXRlKGIsXCJcIitjKSl9LGRlbGV0ZVZhbHVlRm9yQXR0cmlidXRlOmZ1bmN0aW9uKGEsYil7YS5yZW1vdmVBdHRyaWJ1dGUoYil9LGRlbGV0ZVZhbHVlRm9yUHJvcGVydHk6ZnVuY3Rpb24oYSxiKXt2YXIgYz1BLmdldFByb3BlcnR5SW5mbyhiKTtcbmM/KGI9Yy5tdXRhdGlvbk1ldGhvZCk/YihhLHZvaWQgMCk6Yy5tdXN0VXNlUHJvcGVydHk/YVtjLnByb3BlcnR5TmFtZV09Yy5oYXNCb29sZWFuVmFsdWU/ITE6XCJcIjphLnJlbW92ZUF0dHJpYnV0ZShjLmF0dHJpYnV0ZU5hbWUpOmEucmVtb3ZlQXR0cmlidXRlKGIpfX0saGM9Z2MsaWM9UWEuUmVhY3REZWJ1Z0N1cnJlbnRGcmFtZTtmdW5jdGlvbiBqYygpe3JldHVybiBudWxsfVxudmFyIGtjPXtjdXJyZW50Om51bGwscGhhc2U6bnVsbCxyZXNldEN1cnJlbnRGaWJlcjpmdW5jdGlvbigpe2ljLmdldEN1cnJlbnRTdGFjaz1udWxsO2tjLmN1cnJlbnQ9bnVsbDtrYy5waGFzZT1udWxsfSxzZXRDdXJyZW50RmliZXI6ZnVuY3Rpb24oYSxiKXtpYy5nZXRDdXJyZW50U3RhY2s9amM7a2MuY3VycmVudD1hO2tjLnBoYXNlPWJ9LGdldEN1cnJlbnRGaWJlck93bmVyTmFtZTpmdW5jdGlvbigpe3JldHVybiBudWxsfSxnZXRDdXJyZW50RmliZXJTdGFja0FkZGVuZHVtOmpjfSxsYz1rYyxtYz17Z2V0SG9zdFByb3BzOmZ1bmN0aW9uKGEsYil7dmFyIGM9Yi52YWx1ZSxkPWIuY2hlY2tlZDtyZXR1cm4gbih7dHlwZTp2b2lkIDAsc3RlcDp2b2lkIDAsbWluOnZvaWQgMCxtYXg6dm9pZCAwfSxiLHtkZWZhdWx0Q2hlY2tlZDp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCx2YWx1ZTpudWxsIT1jP2M6YS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZSxjaGVja2VkOm51bGwhPWQ/XG5kOmEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZH0pfSxpbml0V3JhcHBlclN0YXRlOmZ1bmN0aW9uKGEsYil7dmFyIGM9Yi5kZWZhdWx0VmFsdWU7YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsQ2hlY2tlZDpudWxsIT1iLmNoZWNrZWQ/Yi5jaGVja2VkOmIuZGVmYXVsdENoZWNrZWQsaW5pdGlhbFZhbHVlOm51bGwhPWIudmFsdWU/Yi52YWx1ZTpjLGNvbnRyb2xsZWQ6XCJjaGVja2JveFwiPT09Yi50eXBlfHxcInJhZGlvXCI9PT1iLnR5cGU/bnVsbCE9Yi5jaGVja2VkOm51bGwhPWIudmFsdWV9fSx1cGRhdGVXcmFwcGVyOmZ1bmN0aW9uKGEsYil7dmFyIGM9Yi5jaGVja2VkO251bGwhPWMmJmhjLnNldFZhbHVlRm9yUHJvcGVydHkoYSxcImNoZWNrZWRcIixjfHwhMSk7Yz1iLnZhbHVlO2lmKG51bGwhPWMpaWYoMD09PWMmJlwiXCI9PT1hLnZhbHVlKWEudmFsdWU9XCIwXCI7ZWxzZSBpZihcIm51bWJlclwiPT09Yi50eXBlKXtpZihiPXBhcnNlRmxvYXQoYS52YWx1ZSl8fDAsYyE9Ynx8Yz09YiYmYS52YWx1ZSE9XG5jKWEudmFsdWU9XCJcIitjfWVsc2UgYS52YWx1ZSE9PVwiXCIrYyYmKGEudmFsdWU9XCJcIitjKTtlbHNlIG51bGw9PWIudmFsdWUmJm51bGwhPWIuZGVmYXVsdFZhbHVlJiZhLmRlZmF1bHRWYWx1ZSE9PVwiXCIrYi5kZWZhdWx0VmFsdWUmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2IuZGVmYXVsdFZhbHVlKSxudWxsPT1iLmNoZWNrZWQmJm51bGwhPWIuZGVmYXVsdENoZWNrZWQmJihhLmRlZmF1bHRDaGVja2VkPSEhYi5kZWZhdWx0Q2hlY2tlZCl9LHBvc3RNb3VudFdyYXBwZXI6ZnVuY3Rpb24oYSxiKXtzd2l0Y2goYi50eXBlKXtjYXNlIFwic3VibWl0XCI6Y2FzZSBcInJlc2V0XCI6YnJlYWs7Y2FzZSBcImNvbG9yXCI6Y2FzZSBcImRhdGVcIjpjYXNlIFwiZGF0ZXRpbWVcIjpjYXNlIFwiZGF0ZXRpbWUtbG9jYWxcIjpjYXNlIFwibW9udGhcIjpjYXNlIFwidGltZVwiOmNhc2UgXCJ3ZWVrXCI6YS52YWx1ZT1cIlwiO2EudmFsdWU9YS5kZWZhdWx0VmFsdWU7YnJlYWs7ZGVmYXVsdDphLnZhbHVlPWEudmFsdWV9Yj1hLm5hbWU7XCJcIiE9PVxuYiYmKGEubmFtZT1cIlwiKTthLmRlZmF1bHRDaGVja2VkPSFhLmRlZmF1bHRDaGVja2VkO2EuZGVmYXVsdENoZWNrZWQ9IWEuZGVmYXVsdENoZWNrZWQ7XCJcIiE9PWImJihhLm5hbWU9Yil9LHJlc3RvcmVDb250cm9sbGVkU3RhdGU6ZnVuY3Rpb24oYSxiKXttYy51cGRhdGVXcmFwcGVyKGEsYik7dmFyIGM9Yi5uYW1lO2lmKFwicmFkaW9cIj09PWIudHlwZSYmbnVsbCE9Yyl7Zm9yKGI9YTtiLnBhcmVudE5vZGU7KWI9Yi5wYXJlbnROb2RlO2M9Yi5xdWVyeVNlbGVjdG9yQWxsKFwiaW5wdXRbbmFtZVxceDNkXCIrSlNPTi5zdHJpbmdpZnkoXCJcIitjKSsnXVt0eXBlXFx4M2RcInJhZGlvXCJdJyk7Zm9yKGI9MDtiPGMubGVuZ3RoO2IrKyl7dmFyIGQ9Y1tiXTtpZihkIT09YSYmZC5mb3JtPT09YS5mb3JtKXt2YXIgZT1HLmdldEZpYmVyQ3VycmVudFByb3BzRnJvbU5vZGUoZCk7ZT92b2lkIDA6dyhcIjkwXCIpO21jLnVwZGF0ZVdyYXBwZXIoZCxlKX19fX19LHFjPW1jO1xuZnVuY3Rpb24gcmMoYSl7dmFyIGI9XCJcIjthYS5DaGlsZHJlbi5mb3JFYWNoKGEsZnVuY3Rpb24oYSl7bnVsbD09YXx8XCJzdHJpbmdcIiE9PXR5cGVvZiBhJiZcIm51bWJlclwiIT09dHlwZW9mIGF8fChiKz1hKX0pO3JldHVybiBifXZhciBzYz17dmFsaWRhdGVQcm9wczpmdW5jdGlvbigpe30scG9zdE1vdW50V3JhcHBlcjpmdW5jdGlvbihhLGIpe251bGwhPWIudmFsdWUmJmEuc2V0QXR0cmlidXRlKFwidmFsdWVcIixiLnZhbHVlKX0sZ2V0SG9zdFByb3BzOmZ1bmN0aW9uKGEsYil7YT1uKHtjaGlsZHJlbjp2b2lkIDB9LGIpO2lmKGI9cmMoYi5jaGlsZHJlbikpYS5jaGlsZHJlbj1iO3JldHVybiBhfX07XG5mdW5jdGlvbiB0YyhhLGIsYyl7YT1hLm9wdGlvbnM7aWYoYil7Yj17fTtmb3IodmFyIGQ9MDtkPGMubGVuZ3RoO2QrKyliW1wiJFwiK2NbZF1dPSEwO2ZvcihjPTA7YzxhLmxlbmd0aDtjKyspZD1iLmhhc093blByb3BlcnR5KFwiJFwiK2FbY10udmFsdWUpLGFbY10uc2VsZWN0ZWQhPT1kJiYoYVtjXS5zZWxlY3RlZD1kKX1lbHNle2M9XCJcIitjO2I9bnVsbDtmb3IoZD0wO2Q8YS5sZW5ndGg7ZCsrKXtpZihhW2RdLnZhbHVlPT09Yyl7YVtkXS5zZWxlY3RlZD0hMDtyZXR1cm59bnVsbCE9PWJ8fGFbZF0uZGlzYWJsZWR8fChiPWFbZF0pfW51bGwhPT1iJiYoYi5zZWxlY3RlZD0hMCl9fVxudmFyIHVjPXtnZXRIb3N0UHJvcHM6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gbih7fSxiLHt2YWx1ZTp2b2lkIDB9KX0saW5pdFdyYXBwZXJTdGF0ZTpmdW5jdGlvbihhLGIpe3ZhciBjPWIudmFsdWU7YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsVmFsdWU6bnVsbCE9Yz9jOmIuZGVmYXVsdFZhbHVlLHdhc011bHRpcGxlOiEhYi5tdWx0aXBsZX19LHBvc3RNb3VudFdyYXBwZXI6ZnVuY3Rpb24oYSxiKXthLm11bHRpcGxlPSEhYi5tdWx0aXBsZTt2YXIgYz1iLnZhbHVlO251bGwhPWM/dGMoYSwhIWIubXVsdGlwbGUsYyk6bnVsbCE9Yi5kZWZhdWx0VmFsdWUmJnRjKGEsISFiLm11bHRpcGxlLGIuZGVmYXVsdFZhbHVlKX0scG9zdFVwZGF0ZVdyYXBwZXI6ZnVuY3Rpb24oYSxiKXthLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlPXZvaWQgMDt2YXIgYz1hLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGU7YS5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlPSEhYi5tdWx0aXBsZTt2YXIgZD1iLnZhbHVlO1xubnVsbCE9ZD90YyhhLCEhYi5tdWx0aXBsZSxkKTpjIT09ISFiLm11bHRpcGxlJiYobnVsbCE9Yi5kZWZhdWx0VmFsdWU/dGMoYSwhIWIubXVsdGlwbGUsYi5kZWZhdWx0VmFsdWUpOnRjKGEsISFiLm11bHRpcGxlLGIubXVsdGlwbGU/W106XCJcIikpfSxyZXN0b3JlQ29udHJvbGxlZFN0YXRlOmZ1bmN0aW9uKGEsYil7dmFyIGM9Yi52YWx1ZTtudWxsIT1jJiZ0YyhhLCEhYi5tdWx0aXBsZSxjKX19LHZjPXtnZXRIb3N0UHJvcHM6ZnVuY3Rpb24oYSxiKXtudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MP3coXCI5MVwiKTp2b2lkIDA7cmV0dXJuIG4oe30sYix7dmFsdWU6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsY2hpbGRyZW46XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlfSl9LGluaXRXcmFwcGVyU3RhdGU6ZnVuY3Rpb24oYSxiKXt2YXIgYz1iLnZhbHVlLGQ9YztudWxsPT1jJiYoYz1iLmRlZmF1bHRWYWx1ZSxiPWIuY2hpbGRyZW4sbnVsbCE9YiYmKG51bGwhPWM/XG53KFwiOTJcIik6dm9pZCAwLEFycmF5LmlzQXJyYXkoYikmJigxPj1iLmxlbmd0aD92b2lkIDA6dyhcIjkzXCIpLGI9YlswXSksYz1cIlwiK2IpLG51bGw9PWMmJihjPVwiXCIpLGQ9Yyk7YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsVmFsdWU6XCJcIitkfX0sdXBkYXRlV3JhcHBlcjpmdW5jdGlvbihhLGIpe3ZhciBjPWIudmFsdWU7bnVsbCE9YyYmKGM9XCJcIitjLGMhPT1hLnZhbHVlJiYoYS52YWx1ZT1jKSxudWxsPT1iLmRlZmF1bHRWYWx1ZSYmKGEuZGVmYXVsdFZhbHVlPWMpKTtudWxsIT1iLmRlZmF1bHRWYWx1ZSYmKGEuZGVmYXVsdFZhbHVlPWIuZGVmYXVsdFZhbHVlKX0scG9zdE1vdW50V3JhcHBlcjpmdW5jdGlvbihhKXt2YXIgYj1hLnRleHRDb250ZW50O2I9PT1hLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlJiYoYS52YWx1ZT1iKX0scmVzdG9yZUNvbnRyb2xsZWRTdGF0ZTpmdW5jdGlvbihhLGIpe3ZjLnVwZGF0ZVdyYXBwZXIoYSxiKX19LHdjPXZjLHhjPW4oe21lbnVpdGVtOiEwfSx7YXJlYTohMCxcbmJhc2U6ITAsYnI6ITAsY29sOiEwLGVtYmVkOiEwLGhyOiEwLGltZzohMCxpbnB1dDohMCxrZXlnZW46ITAsbGluazohMCxtZXRhOiEwLHBhcmFtOiEwLHNvdXJjZTohMCx0cmFjazohMCx3YnI6ITB9KTtmdW5jdGlvbiB5YyhhLGIpe2ImJih4Y1thXSYmKG51bGwhPWIuY2hpbGRyZW58fG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw/dyhcIjEzN1wiLGEsXCJcIik6dm9pZCAwKSxudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiYobnVsbCE9Yi5jaGlsZHJlbj93KFwiNjBcIik6dm9pZCAwLFwib2JqZWN0XCI9PT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmXCJfX2h0bWxcImluIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw/dm9pZCAwOncoXCI2MVwiKSksbnVsbCE9Yi5zdHlsZSYmXCJvYmplY3RcIiE9PXR5cGVvZiBiLnN0eWxlP3coXCI2MlwiLFwiXCIpOnZvaWQgMCl9XG5mdW5jdGlvbiB6YyhhKXt2YXIgYj1hLnR5cGU7cmV0dXJuKGE9YS5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWEudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWJ8fFwicmFkaW9cIj09PWIpfVxuZnVuY3Rpb24gQWMoYSl7dmFyIGI9emMoYSk/XCJjaGVja2VkXCI6XCJ2YWx1ZVwiLGM9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihhLmNvbnN0cnVjdG9yLnByb3RvdHlwZSxiKSxkPVwiXCIrYVtiXTtpZighYS5oYXNPd25Qcm9wZXJ0eShiKSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuZ2V0JiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5zZXQpcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2VudW1lcmFibGU6Yy5lbnVtZXJhYmxlLGNvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gYy5nZXQuY2FsbCh0aGlzKX0sc2V0OmZ1bmN0aW9uKGEpe2Q9XCJcIithO2Muc2V0LmNhbGwodGhpcyxhKX19KSx7Z2V0VmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gZH0sc2V0VmFsdWU6ZnVuY3Rpb24oYSl7ZD1cIlwiK2F9LHN0b3BUcmFja2luZzpmdW5jdGlvbigpe2EuX3ZhbHVlVHJhY2tlcj1udWxsO2RlbGV0ZSBhW2JdfX19XG52YXIgQmM9e19nZXRUcmFja2VyRnJvbU5vZGU6ZnVuY3Rpb24oYSl7cmV0dXJuIGEuX3ZhbHVlVHJhY2tlcn0sdHJhY2s6ZnVuY3Rpb24oYSl7YS5fdmFsdWVUcmFja2VyfHwoYS5fdmFsdWVUcmFja2VyPUFjKGEpKX0sdXBkYXRlVmFsdWVJZkNoYW5nZWQ6ZnVuY3Rpb24oYSl7aWYoIWEpcmV0dXJuITE7dmFyIGI9YS5fdmFsdWVUcmFja2VyO2lmKCFiKXJldHVybiEwO3ZhciBjPWIuZ2V0VmFsdWUoKTt2YXIgZD1cIlwiO2EmJihkPXpjKGEpP2EuY2hlY2tlZD9cInRydWVcIjpcImZhbHNlXCI6YS52YWx1ZSk7YT1kO3JldHVybiBhIT09Yz8oYi5zZXRWYWx1ZShhKSwhMCk6ITF9LHN0b3BUcmFja2luZzpmdW5jdGlvbihhKXsoYT1hLl92YWx1ZVRyYWNrZXIpJiZhLnN0b3BUcmFja2luZygpfX07XG5mdW5jdGlvbiBDYyhhLGIpe2lmKC0xPT09YS5pbmRleE9mKFwiLVwiKSlyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGIuaXM7c3dpdGNoKGEpe2Nhc2UgXCJhbm5vdGF0aW9uLXhtbFwiOmNhc2UgXCJjb2xvci1wcm9maWxlXCI6Y2FzZSBcImZvbnQtZmFjZVwiOmNhc2UgXCJmb250LWZhY2Utc3JjXCI6Y2FzZSBcImZvbnQtZmFjZS11cmlcIjpjYXNlIFwiZm9udC1mYWNlLWZvcm1hdFwiOmNhc2UgXCJmb250LWZhY2UtbmFtZVwiOmNhc2UgXCJtaXNzaW5nLWdseXBoXCI6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMH19XG52YXIgRGM9a2EuTmFtZXNwYWNlcyxFYyxGYz1mdW5jdGlvbihhKXtyZXR1cm5cInVuZGVmaW5lZFwiIT09dHlwZW9mIE1TQXBwJiZNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbj9mdW5jdGlvbihiLGMsZCxlKXtNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbihmdW5jdGlvbigpe3JldHVybiBhKGIsYyxkLGUpfSl9OmF9KGZ1bmN0aW9uKGEsYil7aWYoYS5uYW1lc3BhY2VVUkkhPT1EYy5zdmd8fFwiaW5uZXJIVE1MXCJpbiBhKWEuaW5uZXJIVE1MPWI7ZWxzZSBmb3IoRWM9RWN8fGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksRWMuaW5uZXJIVE1MPVwiXFx4M2NzdmdcXHgzZVwiK2IrXCJcXHgzYy9zdmdcXHgzZVwiLGI9RWMuZmlyc3RDaGlsZDtiLmZpcnN0Q2hpbGQ7KWEuYXBwZW5kQ2hpbGQoYi5maXJzdENoaWxkKX0pLEdjPS9bXCInJjw+XS8sSGM9Ri5URVhUX05PREU7XG5mdW5jdGlvbiBJYyhhLGIpe2lmKGIpe3ZhciBjPWEuZmlyc3RDaGlsZDtpZihjJiZjPT09YS5sYXN0Q2hpbGQmJmMubm9kZVR5cGU9PT1IYyl7Yy5ub2RlVmFsdWU9YjtyZXR1cm59fWEudGV4dENvbnRlbnQ9Yn1cbmwuY2FuVXNlRE9NJiYoXCJ0ZXh0Q29udGVudFwiaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50fHwoSWM9ZnVuY3Rpb24oYSxiKXtpZihhLm5vZGVUeXBlPT09SGMpYS5ub2RlVmFsdWU9YjtlbHNle2lmKFwiYm9vbGVhblwiPT09dHlwZW9mIGJ8fFwibnVtYmVyXCI9PT10eXBlb2YgYiliPVwiXCIrYjtlbHNle2I9XCJcIitiO3ZhciBjPUdjLmV4ZWMoYik7aWYoYyl7dmFyIGQ9XCJcIixlLGY9MDtmb3IoZT1jLmluZGV4O2U8Yi5sZW5ndGg7ZSsrKXtzd2l0Y2goYi5jaGFyQ29kZUF0KGUpKXtjYXNlIDM0OmM9XCJcXHgyNnF1b3Q7XCI7YnJlYWs7Y2FzZSAzODpjPVwiXFx4MjZhbXA7XCI7YnJlYWs7Y2FzZSAzOTpjPVwiXFx4MjYjeDI3O1wiO2JyZWFrO2Nhc2UgNjA6Yz1cIlxceDI2bHQ7XCI7YnJlYWs7Y2FzZSA2MjpjPVwiXFx4MjZndDtcIjticmVhaztkZWZhdWx0OmNvbnRpbnVlfWYhPT1lJiYoZCs9Yi5zdWJzdHJpbmcoZixlKSk7Zj1lKzE7ZCs9Y31iPWYhPT1lP2QrYi5zdWJzdHJpbmcoZixlKTpkfX1GYyhhLGIpfX0pKTtcbnZhciBKYz1JYyxLYz1sYy5nZXRDdXJyZW50RmliZXJPd25lck5hbWUsTGM9Ri5ET0NVTUVOVF9OT0RFLE1jPUYuRE9DVU1FTlRfRlJBR01FTlRfTk9ERSxOYz1NLmxpc3RlblRvLE9jPXNhLnJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzLFBjPWthLk5hbWVzcGFjZXMuaHRtbCxRYz1rYS5nZXRJbnRyaW5zaWNOYW1lc3BhY2U7ZnVuY3Rpb24gUmMoYSxiKXtOYyhiLGEubm9kZVR5cGU9PT1MY3x8YS5ub2RlVHlwZT09PU1jP2E6YS5vd25lckRvY3VtZW50KX1cbnZhciBTYz17dG9wQWJvcnQ6XCJhYm9ydFwiLHRvcENhblBsYXk6XCJjYW5wbGF5XCIsdG9wQ2FuUGxheVRocm91Z2g6XCJjYW5wbGF5dGhyb3VnaFwiLHRvcER1cmF0aW9uQ2hhbmdlOlwiZHVyYXRpb25jaGFuZ2VcIix0b3BFbXB0aWVkOlwiZW1wdGllZFwiLHRvcEVuY3J5cHRlZDpcImVuY3J5cHRlZFwiLHRvcEVuZGVkOlwiZW5kZWRcIix0b3BFcnJvcjpcImVycm9yXCIsdG9wTG9hZGVkRGF0YTpcImxvYWRlZGRhdGFcIix0b3BMb2FkZWRNZXRhZGF0YTpcImxvYWRlZG1ldGFkYXRhXCIsdG9wTG9hZFN0YXJ0OlwibG9hZHN0YXJ0XCIsdG9wUGF1c2U6XCJwYXVzZVwiLHRvcFBsYXk6XCJwbGF5XCIsdG9wUGxheWluZzpcInBsYXlpbmdcIix0b3BQcm9ncmVzczpcInByb2dyZXNzXCIsdG9wUmF0ZUNoYW5nZTpcInJhdGVjaGFuZ2VcIix0b3BTZWVrZWQ6XCJzZWVrZWRcIix0b3BTZWVraW5nOlwic2Vla2luZ1wiLHRvcFN0YWxsZWQ6XCJzdGFsbGVkXCIsdG9wU3VzcGVuZDpcInN1c3BlbmRcIix0b3BUaW1lVXBkYXRlOlwidGltZXVwZGF0ZVwiLHRvcFZvbHVtZUNoYW5nZTpcInZvbHVtZWNoYW5nZVwiLFxudG9wV2FpdGluZzpcIndhaXRpbmdcIn0sTj17Y3JlYXRlRWxlbWVudDpmdW5jdGlvbihhLGIsYyxkKXtjPWMubm9kZVR5cGU9PT1MYz9jOmMub3duZXJEb2N1bWVudDtkPT09UGMmJihkPVFjKGEpKTtkPT09UGM/XCJzY3JpcHRcIj09PWE/KGE9Yy5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGEuaW5uZXJIVE1MPVwiXFx4M2NzY3JpcHRcXHgzZVxceDNjL3NjcmlwdFxceDNlXCIsYT1hLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCkpOmE9XCJzdHJpbmdcIj09PXR5cGVvZiBiLmlzP2MuY3JlYXRlRWxlbWVudChhLHtpczpiLmlzfSk6Yy5jcmVhdGVFbGVtZW50KGEpOmE9Yy5jcmVhdGVFbGVtZW50TlMoZCxhKTtyZXR1cm4gYX0sY3JlYXRlVGV4dE5vZGU6ZnVuY3Rpb24oYSxiKXtyZXR1cm4oYi5ub2RlVHlwZT09PUxjP2I6Yi5vd25lckRvY3VtZW50KS5jcmVhdGVUZXh0Tm9kZShhKX0sc2V0SW5pdGlhbFByb3BlcnRpZXM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9Q2MoYixjKTtzd2l0Y2goYil7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpNLnRyYXBCdWJibGVkRXZlbnQoXCJ0b3BMb2FkXCIsXG5cImxvYWRcIixhKTt2YXIgZj1jO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihmIGluIFNjKVNjLmhhc093blByb3BlcnR5KGYpJiZNLnRyYXBCdWJibGVkRXZlbnQoZixTY1tmXSxhKTtmPWM7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOk0udHJhcEJ1YmJsZWRFdmVudChcInRvcEVycm9yXCIsXCJlcnJvclwiLGEpO2Y9YzticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6TS50cmFwQnViYmxlZEV2ZW50KFwidG9wRXJyb3JcIixcImVycm9yXCIsYSk7TS50cmFwQnViYmxlZEV2ZW50KFwidG9wTG9hZFwiLFwibG9hZFwiLGEpO2Y9YzticmVhaztjYXNlIFwiZm9ybVwiOk0udHJhcEJ1YmJsZWRFdmVudChcInRvcFJlc2V0XCIsXCJyZXNldFwiLGEpO00udHJhcEJ1YmJsZWRFdmVudChcInRvcFN1Ym1pdFwiLFwic3VibWl0XCIsYSk7Zj1jO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6TS50cmFwQnViYmxlZEV2ZW50KFwidG9wVG9nZ2xlXCIsXCJ0b2dnbGVcIixhKTtmPWM7YnJlYWs7Y2FzZSBcImlucHV0XCI6cWMuaW5pdFdyYXBwZXJTdGF0ZShhLFxuYyk7Zj1xYy5nZXRIb3N0UHJvcHMoYSxjKTtNLnRyYXBCdWJibGVkRXZlbnQoXCJ0b3BJbnZhbGlkXCIsXCJpbnZhbGlkXCIsYSk7UmMoZCxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpzYy52YWxpZGF0ZVByb3BzKGEsYyk7Zj1zYy5nZXRIb3N0UHJvcHMoYSxjKTticmVhaztjYXNlIFwic2VsZWN0XCI6dWMuaW5pdFdyYXBwZXJTdGF0ZShhLGMpO2Y9dWMuZ2V0SG9zdFByb3BzKGEsYyk7TS50cmFwQnViYmxlZEV2ZW50KFwidG9wSW52YWxpZFwiLFwiaW52YWxpZFwiLGEpO1JjKGQsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjp3Yy5pbml0V3JhcHBlclN0YXRlKGEsYyk7Zj13Yy5nZXRIb3N0UHJvcHMoYSxjKTtNLnRyYXBCdWJibGVkRXZlbnQoXCJ0b3BJbnZhbGlkXCIsXCJpbnZhbGlkXCIsYSk7UmMoZCxcIm9uQ2hhbmdlXCIpO2JyZWFrO2RlZmF1bHQ6Zj1jfXljKGIsZixLYyk7dmFyIGc9ZixoO2ZvcihoIGluIGcpaWYoZy5oYXNPd25Qcm9wZXJ0eShoKSl7dmFyIGs9Z1toXTtcInN0eWxlXCI9PT1cbmg/YmMuc2V0VmFsdWVGb3JTdHlsZXMoYSxrKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1oPyhrPWs/ay5fX2h0bWw6dm9pZCAwLG51bGwhPWsmJkZjKGEsaykpOlwiY2hpbGRyZW5cIj09PWg/XCJzdHJpbmdcIj09PXR5cGVvZiBrP0pjKGEsayk6XCJudW1iZXJcIj09PXR5cGVvZiBrJiZKYyhhLFwiXCIrayk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWgmJihPYy5oYXNPd25Qcm9wZXJ0eShoKT9udWxsIT1rJiZSYyhkLGgpOmU/aGMuc2V0VmFsdWVGb3JBdHRyaWJ1dGUoYSxoLGspOm51bGwhPWsmJmhjLnNldFZhbHVlRm9yUHJvcGVydHkoYSxoLGspKX1zd2l0Y2goYil7Y2FzZSBcImlucHV0XCI6QmMudHJhY2soYSk7cWMucG9zdE1vdW50V3JhcHBlcihhLGMpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOkJjLnRyYWNrKGEpO3djLnBvc3RNb3VudFdyYXBwZXIoYSxjKTticmVhaztjYXNlIFwib3B0aW9uXCI6c2MucG9zdE1vdW50V3JhcHBlcihhLGMpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjp1Yy5wb3N0TW91bnRXcmFwcGVyKGEsXG5jKTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLm9uQ2xpY2smJihhLm9uY2xpY2s9Y2EpfX0sZGlmZlByb3BlcnRpZXM6ZnVuY3Rpb24oYSxiLGMsZCxlKXt2YXIgZj1udWxsO3N3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjpjPXFjLmdldEhvc3RQcm9wcyhhLGMpO2Q9cWMuZ2V0SG9zdFByb3BzKGEsZCk7Zj1bXTticmVhaztjYXNlIFwib3B0aW9uXCI6Yz1zYy5nZXRIb3N0UHJvcHMoYSxjKTtkPXNjLmdldEhvc3RQcm9wcyhhLGQpO2Y9W107YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmM9dWMuZ2V0SG9zdFByb3BzKGEsYyk7ZD11Yy5nZXRIb3N0UHJvcHMoYSxkKTtmPVtdO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmM9d2MuZ2V0SG9zdFByb3BzKGEsYyk7ZD13Yy5nZXRIb3N0UHJvcHMoYSxkKTtmPVtdO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiIT09dHlwZW9mIGMub25DbGljayYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGQub25DbGljayYmKGEub25jbGljaz1jYSl9eWMoYixkLEtjKTtcbnZhciBnLGg7YT1udWxsO2ZvcihnIGluIGMpaWYoIWQuaGFzT3duUHJvcGVydHkoZykmJmMuaGFzT3duUHJvcGVydHkoZykmJm51bGwhPWNbZ10paWYoXCJzdHlsZVwiPT09Zylmb3IoaCBpbiBiPWNbZ10sYiliLmhhc093blByb3BlcnR5KGgpJiYoYXx8KGE9e30pLGFbaF09XCJcIik7ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIiE9PWcmJlwiY2hpbGRyZW5cIiE9PWcmJlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1nJiYoT2MuaGFzT3duUHJvcGVydHkoZyk/Znx8KGY9W10pOihmPWZ8fFtdKS5wdXNoKGcsbnVsbCkpO2ZvcihnIGluIGQpe3ZhciBrPWRbZ107Yj1udWxsIT1jP2NbZ106dm9pZCAwO2lmKGQuaGFzT3duUHJvcGVydHkoZykmJmshPT1iJiYobnVsbCE9a3x8bnVsbCE9YikpaWYoXCJzdHlsZVwiPT09ZylpZihiKXtmb3IoaCBpbiBiKSFiLmhhc093blByb3BlcnR5KGgpfHxrJiZrLmhhc093blByb3BlcnR5KGgpfHwoYXx8KGE9e30pLGFbaF09XCJcIik7Zm9yKGggaW4gaylrLmhhc093blByb3BlcnR5KGgpJiZcbmJbaF0hPT1rW2hdJiYoYXx8KGE9e30pLGFbaF09a1toXSl9ZWxzZSBhfHwoZnx8KGY9W10pLGYucHVzaChnLGEpKSxhPWs7ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWc/KGs9az9rLl9faHRtbDp2b2lkIDAsYj1iP2IuX19odG1sOnZvaWQgMCxudWxsIT1rJiZiIT09ayYmKGY9Znx8W10pLnB1c2goZyxcIlwiK2spKTpcImNoaWxkcmVuXCI9PT1nP2I9PT1rfHxcInN0cmluZ1wiIT09dHlwZW9mIGsmJlwibnVtYmVyXCIhPT10eXBlb2Yga3x8KGY9Znx8W10pLnB1c2goZyxcIlwiK2spOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1nJiYoT2MuaGFzT3duUHJvcGVydHkoZyk/KG51bGwhPWsmJlJjKGUsZyksZnx8Yj09PWt8fChmPVtdKSk6KGY9Znx8W10pLnB1c2goZyxrKSl9YSYmKGY9Znx8W10pLnB1c2goXCJzdHlsZVwiLGEpO3JldHVybiBmfSx1cGRhdGVQcm9wZXJ0aWVzOmZ1bmN0aW9uKGEsYixjLGQsZSl7Q2MoYyxkKTtkPUNjKGMsZSk7Zm9yKHZhciBmPTA7ZjxiLmxlbmd0aDtmKz1cbjIpe3ZhciBnPWJbZl0saD1iW2YrMV07XCJzdHlsZVwiPT09Zz9iYy5zZXRWYWx1ZUZvclN0eWxlcyhhLGgpOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWc/RmMoYSxoKTpcImNoaWxkcmVuXCI9PT1nP0pjKGEsaCk6ZD9udWxsIT1oP2hjLnNldFZhbHVlRm9yQXR0cmlidXRlKGEsZyxoKTpoYy5kZWxldGVWYWx1ZUZvckF0dHJpYnV0ZShhLGcpOm51bGwhPWg/aGMuc2V0VmFsdWVGb3JQcm9wZXJ0eShhLGcsaCk6aGMuZGVsZXRlVmFsdWVGb3JQcm9wZXJ0eShhLGcpfXN3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjpxYy51cGRhdGVXcmFwcGVyKGEsZSk7QmMudXBkYXRlVmFsdWVJZkNoYW5nZWQoYSk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6d2MudXBkYXRlV3JhcHBlcihhLGUpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjp1Yy5wb3N0VXBkYXRlV3JhcHBlcihhLGUpfX0sZGlmZkh5ZHJhdGVkUHJvcGVydGllczpmdW5jdGlvbihhLGIsYyxkLGUpe3N3aXRjaChiKXtjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOk0udHJhcEJ1YmJsZWRFdmVudChcInRvcExvYWRcIixcblwibG9hZFwiLGEpO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcih2YXIgZiBpbiBTYylTYy5oYXNPd25Qcm9wZXJ0eShmKSYmTS50cmFwQnViYmxlZEV2ZW50KGYsU2NbZl0sYSk7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOk0udHJhcEJ1YmJsZWRFdmVudChcInRvcEVycm9yXCIsXCJlcnJvclwiLGEpO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpNLnRyYXBCdWJibGVkRXZlbnQoXCJ0b3BFcnJvclwiLFwiZXJyb3JcIixhKTtNLnRyYXBCdWJibGVkRXZlbnQoXCJ0b3BMb2FkXCIsXCJsb2FkXCIsYSk7YnJlYWs7Y2FzZSBcImZvcm1cIjpNLnRyYXBCdWJibGVkRXZlbnQoXCJ0b3BSZXNldFwiLFwicmVzZXRcIixhKTtNLnRyYXBCdWJibGVkRXZlbnQoXCJ0b3BTdWJtaXRcIixcInN1Ym1pdFwiLGEpO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6TS50cmFwQnViYmxlZEV2ZW50KFwidG9wVG9nZ2xlXCIsXCJ0b2dnbGVcIixhKTticmVhaztjYXNlIFwiaW5wdXRcIjpxYy5pbml0V3JhcHBlclN0YXRlKGEsYyk7TS50cmFwQnViYmxlZEV2ZW50KFwidG9wSW52YWxpZFwiLFxuXCJpbnZhbGlkXCIsYSk7UmMoZSxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpzYy52YWxpZGF0ZVByb3BzKGEsYyk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOnVjLmluaXRXcmFwcGVyU3RhdGUoYSxjKTtNLnRyYXBCdWJibGVkRXZlbnQoXCJ0b3BJbnZhbGlkXCIsXCJpbnZhbGlkXCIsYSk7UmMoZSxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOndjLmluaXRXcmFwcGVyU3RhdGUoYSxjKSxNLnRyYXBCdWJibGVkRXZlbnQoXCJ0b3BJbnZhbGlkXCIsXCJpbnZhbGlkXCIsYSksUmMoZSxcIm9uQ2hhbmdlXCIpfXljKGIsYyxLYyk7ZD1udWxsO2Zvcih2YXIgZyBpbiBjKWMuaGFzT3duUHJvcGVydHkoZykmJihmPWNbZ10sXCJjaGlsZHJlblwiPT09Zz9cInN0cmluZ1wiPT09dHlwZW9mIGY/YS50ZXh0Q29udGVudCE9PWYmJihkPVtcImNoaWxkcmVuXCIsZl0pOlwibnVtYmVyXCI9PT10eXBlb2YgZiYmYS50ZXh0Q29udGVudCE9PVwiXCIrZiYmKGQ9W1wiY2hpbGRyZW5cIixcIlwiK2ZdKTpPYy5oYXNPd25Qcm9wZXJ0eShnKSYmXG5udWxsIT1mJiZSYyhlLGcpKTtzd2l0Y2goYil7Y2FzZSBcImlucHV0XCI6QmMudHJhY2soYSk7cWMucG9zdE1vdW50V3JhcHBlcihhLGMpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOkJjLnRyYWNrKGEpO3djLnBvc3RNb3VudFdyYXBwZXIoYSxjKTticmVhaztjYXNlIFwic2VsZWN0XCI6Y2FzZSBcIm9wdGlvblwiOmJyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGMub25DbGljayYmKGEub25jbGljaz1jYSl9cmV0dXJuIGR9LGRpZmZIeWRyYXRlZFRleHQ6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gYS5ub2RlVmFsdWUhPT1ifSx3YXJuRm9yRGVsZXRlZEh5ZHJhdGFibGVFbGVtZW50OmZ1bmN0aW9uKCl7fSx3YXJuRm9yRGVsZXRlZEh5ZHJhdGFibGVUZXh0OmZ1bmN0aW9uKCl7fSx3YXJuRm9ySW5zZXJ0ZWRIeWRyYXRlZEVsZW1lbnQ6ZnVuY3Rpb24oKXt9LHdhcm5Gb3JJbnNlcnRlZEh5ZHJhdGVkVGV4dDpmdW5jdGlvbigpe30scmVzdG9yZUNvbnRyb2xsZWRTdGF0ZTpmdW5jdGlvbihhLFxuYixjKXtzd2l0Y2goYil7Y2FzZSBcImlucHV0XCI6cWMucmVzdG9yZUNvbnRyb2xsZWRTdGF0ZShhLGMpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOndjLnJlc3RvcmVDb250cm9sbGVkU3RhdGUoYSxjKTticmVhaztjYXNlIFwic2VsZWN0XCI6dWMucmVzdG9yZUNvbnRyb2xsZWRTdGF0ZShhLGMpfX19LFRjPXZvaWQgMDtcbmlmKGwuY2FuVXNlRE9NKWlmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiByZXF1ZXN0SWRsZUNhbGxiYWNrKXt2YXIgVWM9bnVsbCxWYz1udWxsLFdjPSExLFhjPSExLFljPTAsWmM9MzMsJGM9MzMsYWQ9e3RpbWVSZW1haW5pbmc6XCJvYmplY3RcIj09PXR5cGVvZiBwZXJmb3JtYW5jZSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIHBlcmZvcm1hbmNlLm5vdz9mdW5jdGlvbigpe3JldHVybiBZYy1wZXJmb3JtYW5jZS5ub3coKX06ZnVuY3Rpb24oKXtyZXR1cm4gWWMtRGF0ZS5ub3coKX19LGJkPVwiX19yZWFjdElkbGVDYWxsYmFjayRcIitNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKTt3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIixmdW5jdGlvbihhKXthLnNvdXJjZT09PXdpbmRvdyYmYS5kYXRhPT09YmQmJihXYz0hMSxhPVZjLFZjPW51bGwsbnVsbCE9PWEmJmEoYWQpKX0sITEpO3ZhciBjZD1mdW5jdGlvbihhKXtYYz0hMTt2YXIgYj1hLVljKyRjO2I8JGMmJlpjPCRjPyg4PlxuYiYmKGI9OCksJGM9YjxaYz9aYzpiKTpaYz1iO1ljPWErJGM7V2N8fChXYz0hMCx3aW5kb3cucG9zdE1lc3NhZ2UoYmQsXCIqXCIpKTtiPVVjO1VjPW51bGw7bnVsbCE9PWImJmIoYSl9O1RjPWZ1bmN0aW9uKGEpe1ZjPWE7WGN8fChYYz0hMCxyZXF1ZXN0QW5pbWF0aW9uRnJhbWUoY2QpKTtyZXR1cm4gMH19ZWxzZSBUYz1yZXF1ZXN0SWRsZUNhbGxiYWNrO2Vsc2UgVGM9ZnVuY3Rpb24oYSl7c2V0VGltZW91dChmdW5jdGlvbigpe2Eoe3RpbWVSZW1haW5pbmc6ZnVuY3Rpb24oKXtyZXR1cm4gSW5maW5pdHl9fSl9KTtyZXR1cm4gMH07XG52YXIgZGQ9e3JJQzpUY30sZWQ9e2VuYWJsZUFzeW5jU3VidHJlZUFQSTohMH0sUT17Tm9Xb3JrOjAsU3luY2hyb25vdXNQcmlvcml0eToxLFRhc2tQcmlvcml0eToyLEhpZ2hQcmlvcml0eTozLExvd1ByaW9yaXR5OjQsT2Zmc2NyZWVuUHJpb3JpdHk6NX0sZmQ9Si5DYWxsYmFjayxnZD1RLk5vV29yayxoZD1RLlN5bmNocm9ub3VzUHJpb3JpdHksaWQ9US5UYXNrUHJpb3JpdHksamQ9RS5DbGFzc0NvbXBvbmVudCxrZD1FLkhvc3RSb290LG1kPXZvaWQgMCxuZD12b2lkIDA7ZnVuY3Rpb24gb2QoYSxiKXtyZXR1cm4gYSE9PWlkJiZhIT09aGR8fGIhPT1pZCYmYiE9PWhkP2E9PT1nZCYmYiE9PWdkPy0yNTU6YSE9PWdkJiZiPT09Z2Q/MjU1OmEtYjowfWZ1bmN0aW9uIHBkKCl7cmV0dXJue2ZpcnN0Om51bGwsbGFzdDpudWxsLGhhc0ZvcmNlVXBkYXRlOiExLGNhbGxiYWNrTGlzdDpudWxsfX1cbmZ1bmN0aW9uIHFkKGEsYixjLGQpe251bGwhPT1jP2MubmV4dD1iOihiLm5leHQ9YS5maXJzdCxhLmZpcnN0PWIpO251bGwhPT1kP2IubmV4dD1kOmEubGFzdD1ifWZ1bmN0aW9uIHJkKGEsYil7Yj1iLnByaW9yaXR5TGV2ZWw7dmFyIGM9bnVsbDtpZihudWxsIT09YS5sYXN0JiYwPj1vZChhLmxhc3QucHJpb3JpdHlMZXZlbCxiKSljPWEubGFzdDtlbHNlIGZvcihhPWEuZmlyc3Q7bnVsbCE9PWEmJjA+PW9kKGEucHJpb3JpdHlMZXZlbCxiKTspYz1hLGE9YS5uZXh0O3JldHVybiBjfVxuZnVuY3Rpb24gc2QoYSxiKXt2YXIgYz1hLmFsdGVybmF0ZSxkPWEudXBkYXRlUXVldWU7bnVsbD09PWQmJihkPWEudXBkYXRlUXVldWU9cGQoKSk7bnVsbCE9PWM/KGE9Yy51cGRhdGVRdWV1ZSxudWxsPT09YSYmKGE9Yy51cGRhdGVRdWV1ZT1wZCgpKSk6YT1udWxsO21kPWQ7bmQ9YSE9PWQ/YTpudWxsO3ZhciBlPW1kO2M9bmQ7dmFyIGY9cmQoZSxiKSxnPW51bGwhPT1mP2YubmV4dDplLmZpcnN0O2lmKG51bGw9PT1jKXJldHVybiBxZChlLGIsZixnKSxudWxsO2Q9cmQoYyxiKTthPW51bGwhPT1kP2QubmV4dDpjLmZpcnN0O3FkKGUsYixmLGcpO2lmKGc9PT1hJiZudWxsIT09Z3x8Zj09PWQmJm51bGwhPT1mKXJldHVybiBudWxsPT09ZCYmKGMuZmlyc3Q9YiksbnVsbD09PWEmJihjLmxhc3Q9bnVsbCksbnVsbDtiPXtwcmlvcml0eUxldmVsOmIucHJpb3JpdHlMZXZlbCxwYXJ0aWFsU3RhdGU6Yi5wYXJ0aWFsU3RhdGUsY2FsbGJhY2s6Yi5jYWxsYmFjayxpc1JlcGxhY2U6Yi5pc1JlcGxhY2UsXG5pc0ZvcmNlZDpiLmlzRm9yY2VkLGlzVG9wTGV2ZWxVbm1vdW50OmIuaXNUb3BMZXZlbFVubW91bnQsbmV4dDpudWxsfTtxZChjLGIsZCxhKTtyZXR1cm4gYn1mdW5jdGlvbiB0ZChhLGIsYyxkKXthPWEucGFydGlhbFN0YXRlO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2EuY2FsbChiLGMsZCk6YX1cbnZhciB1ZD17YWRkVXBkYXRlOmZ1bmN0aW9uKGEsYixjLGQpe3NkKGEse3ByaW9yaXR5TGV2ZWw6ZCxwYXJ0aWFsU3RhdGU6YixjYWxsYmFjazpjLGlzUmVwbGFjZTohMSxpc0ZvcmNlZDohMSxpc1RvcExldmVsVW5tb3VudDohMSxuZXh0Om51bGx9KX0sYWRkUmVwbGFjZVVwZGF0ZTpmdW5jdGlvbihhLGIsYyxkKXtzZChhLHtwcmlvcml0eUxldmVsOmQscGFydGlhbFN0YXRlOmIsY2FsbGJhY2s6Yyxpc1JlcGxhY2U6ITAsaXNGb3JjZWQ6ITEsaXNUb3BMZXZlbFVubW91bnQ6ITEsbmV4dDpudWxsfSl9LGFkZEZvcmNlVXBkYXRlOmZ1bmN0aW9uKGEsYixjKXtzZChhLHtwcmlvcml0eUxldmVsOmMscGFydGlhbFN0YXRlOm51bGwsY2FsbGJhY2s6Yixpc1JlcGxhY2U6ITEsaXNGb3JjZWQ6ITAsaXNUb3BMZXZlbFVubW91bnQ6ITEsbmV4dDpudWxsfSl9LGdldFVwZGF0ZVByaW9yaXR5OmZ1bmN0aW9uKGEpe3ZhciBiPWEudXBkYXRlUXVldWU7cmV0dXJuIG51bGw9PT1ifHxhLnRhZyE9PVxuamQmJmEudGFnIT09a2Q/Z2Q6bnVsbCE9PWIuZmlyc3Q/Yi5maXJzdC5wcmlvcml0eUxldmVsOmdkfSxhZGRUb3BMZXZlbFVwZGF0ZTpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1udWxsPT09Yi5lbGVtZW50O2I9e3ByaW9yaXR5TGV2ZWw6ZCxwYXJ0aWFsU3RhdGU6YixjYWxsYmFjazpjLGlzUmVwbGFjZTohMSxpc0ZvcmNlZDohMSxpc1RvcExldmVsVW5tb3VudDplLG5leHQ6bnVsbH07YT1zZChhLGIpO2UmJihlPW1kLGM9bmQsbnVsbCE9PWUmJm51bGwhPT1iLm5leHQmJihiLm5leHQ9bnVsbCxlLmxhc3Q9YiksbnVsbCE9PWMmJm51bGwhPT1hJiZudWxsIT09YS5uZXh0JiYoYS5uZXh0PW51bGwsYy5sYXN0PWIpKX0sYmVnaW5VcGRhdGVRdWV1ZTpmdW5jdGlvbihhLGIsYyxkLGUsZixnKXtudWxsIT09YSYmYS51cGRhdGVRdWV1ZT09PWMmJihjPWIudXBkYXRlUXVldWU9e2ZpcnN0OmMuZmlyc3QsbGFzdDpjLmxhc3QsY2FsbGJhY2tMaXN0Om51bGwsaGFzRm9yY2VVcGRhdGU6ITF9KTtcbmE9Yy5jYWxsYmFja0xpc3Q7Zm9yKHZhciBoPWMuaGFzRm9yY2VVcGRhdGUsaz0hMCxwPWMuZmlyc3Q7bnVsbCE9PXAmJjA+PW9kKHAucHJpb3JpdHlMZXZlbCxnKTspe2MuZmlyc3Q9cC5uZXh0O251bGw9PT1jLmZpcnN0JiYoYy5sYXN0PW51bGwpO3ZhciB4O2lmKHAuaXNSZXBsYWNlKWU9dGQocCxkLGUsZiksaz0hMDtlbHNlIGlmKHg9dGQocCxkLGUsZikpZT1rP24oe30sZSx4KTpuKGUseCksaz0hMTtwLmlzRm9yY2VkJiYoaD0hMCk7bnVsbD09PXAuY2FsbGJhY2t8fHAuaXNUb3BMZXZlbFVubW91bnQmJm51bGwhPT1wLm5leHR8fChhPW51bGwhPT1hP2E6W10sYS5wdXNoKHAuY2FsbGJhY2spLGIuZWZmZWN0VGFnfD1mZCk7cD1wLm5leHR9Yy5jYWxsYmFja0xpc3Q9YTtjLmhhc0ZvcmNlVXBkYXRlPWg7bnVsbCE9PWMuZmlyc3R8fG51bGwhPT1hfHxofHwoYi51cGRhdGVRdWV1ZT1udWxsKTtyZXR1cm4gZX0sY29tbWl0Q2FsbGJhY2tzOmZ1bmN0aW9uKGEsYixjKXthPWIuY2FsbGJhY2tMaXN0O1xuaWYobnVsbCE9PWEpZm9yKGIuY2FsbGJhY2tMaXN0PW51bGwsYj0wO2I8YS5sZW5ndGg7YisrKXt2YXIgZD1hW2JdO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBkP3coXCIxOTFcIixkKTp2b2lkIDA7ZC5jYWxsKGMpfX19LHZkPVtdLHdkPS0xLHhkPXtjcmVhdGVDdXJzb3I6ZnVuY3Rpb24oYSl7cmV0dXJue2N1cnJlbnQ6YX19LGlzRW1wdHk6ZnVuY3Rpb24oKXtyZXR1cm4tMT09PXdkfSxwb3A6ZnVuY3Rpb24oYSl7MD53ZHx8KGEuY3VycmVudD12ZFt3ZF0sdmRbd2RdPW51bGwsd2QtLSl9LHB1c2g6ZnVuY3Rpb24oYSxiKXt3ZCsrO3ZkW3dkXT1hLmN1cnJlbnQ7YS5jdXJyZW50PWJ9LHJlc2V0OmZ1bmN0aW9uKCl7Zm9yKDstMTx3ZDspdmRbd2RdPW51bGwsd2QtLX19LHlkPWJiLmlzRmliZXJNb3VudGVkLHpkPUUuQ2xhc3NDb21wb25lbnQsQWQ9RS5Ib3N0Um9vdCxCZD14ZC5jcmVhdGVDdXJzb3IsQ2Q9eGQucG9wLERkPXhkLnB1c2gsRWQ9QmQoZGEpLEZkPUJkKCExKSxMZD1kYTtcbmZ1bmN0aW9uIE1kKGEsYixjKXthPWEuc3RhdGVOb2RlO2EuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1iO2EuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9Y31mdW5jdGlvbiBOZChhKXtyZXR1cm4gYS50YWc9PT16ZCYmbnVsbCE9YS50eXBlLmNoaWxkQ29udGV4dFR5cGVzfWZ1bmN0aW9uIE9kKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGUsZD1hLnR5cGUuY2hpbGRDb250ZXh0VHlwZXM7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGMuZ2V0Q2hpbGRDb250ZXh0KXJldHVybiBiO2M9Yy5nZXRDaGlsZENvbnRleHQoKTtmb3IodmFyIGUgaW4gYyllIGluIGQ/dm9pZCAwOncoXCIxMDhcIixSYShhKXx8XCJVbmtub3duXCIsZSk7cmV0dXJuIG4oe30sYixjKX1cbnZhciBSPXtnZXRVbm1hc2tlZENvbnRleHQ6ZnVuY3Rpb24oYSl7cmV0dXJuIE5kKGEpP0xkOkVkLmN1cnJlbnR9LGNhY2hlQ29udGV4dDpNZCxnZXRNYXNrZWRDb250ZXh0OmZ1bmN0aW9uKGEsYil7dmFyIGM9YS50eXBlLmNvbnRleHRUeXBlcztpZighYylyZXR1cm4gZGE7dmFyIGQ9YS5zdGF0ZU5vZGU7aWYoZCYmZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PT09YilyZXR1cm4gZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dDt2YXIgZT17fSxmO2ZvcihmIGluIGMpZVtmXT1iW2ZdO2QmJk1kKGEsYixlKTtyZXR1cm4gZX0saGFzQ29udGV4dENoYW5nZWQ6ZnVuY3Rpb24oKXtyZXR1cm4gRmQuY3VycmVudH0saXNDb250ZXh0Q29uc3VtZXI6ZnVuY3Rpb24oYSl7cmV0dXJuIGEudGFnPT09emQmJm51bGwhPWEudHlwZS5jb250ZXh0VHlwZXN9LGlzQ29udGV4dFByb3ZpZGVyOk5kLHBvcENvbnRleHRQcm92aWRlcjpmdW5jdGlvbihhKXtOZChhKSYmXG4oQ2QoRmQsYSksQ2QoRWQsYSkpfSxwb3BUb3BMZXZlbENvbnRleHRPYmplY3Q6ZnVuY3Rpb24oYSl7Q2QoRmQsYSk7Q2QoRWQsYSl9LHB1c2hUb3BMZXZlbENvbnRleHRPYmplY3Q6ZnVuY3Rpb24oYSxiLGMpe251bGwhPUVkLmN1cnNvcj93KFwiMTY4XCIpOnZvaWQgMDtEZChFZCxiLGEpO0RkKEZkLGMsYSl9LHByb2Nlc3NDaGlsZENvbnRleHQ6T2QscHVzaENvbnRleHRQcm92aWRlcjpmdW5jdGlvbihhKXtpZighTmQoYSkpcmV0dXJuITE7dmFyIGI9YS5zdGF0ZU5vZGU7Yj1iJiZiLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0fHxkYTtMZD1FZC5jdXJyZW50O0RkKEVkLGIsYSk7RGQoRmQsRmQuY3VycmVudCxhKTtyZXR1cm4hMH0saW52YWxpZGF0ZUNvbnRleHRQcm92aWRlcjpmdW5jdGlvbihhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO2M/dm9pZCAwOncoXCIxNjlcIik7aWYoYil7dmFyIGQ9T2QoYSxMZCwhMCk7Yy5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dD1cbmQ7Q2QoRmQsYSk7Q2QoRWQsYSk7RGQoRWQsZCxhKX1lbHNlIENkKEZkLGEpO0RkKEZkLGIsYSl9LHJlc2V0Q29udGV4dDpmdW5jdGlvbigpe0xkPWRhO0VkLmN1cnJlbnQ9ZGE7RmQuY3VycmVudD0hMX0sZmluZEN1cnJlbnRVbm1hc2tlZENvbnRleHQ6ZnVuY3Rpb24oYSl7Zm9yKHlkKGEpJiZhLnRhZz09PXpkP3ZvaWQgMDp3KFwiMTcwXCIpO2EudGFnIT09QWQ7KXtpZihOZChhKSlyZXR1cm4gYS5zdGF0ZU5vZGUuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ7KGE9YVtcInJldHVyblwiXSk/dm9pZCAwOncoXCIxNzFcIil9cmV0dXJuIGEuc3RhdGVOb2RlLmNvbnRleHR9fSxQZD17Tm9Db250ZXh0OjAsQXN5bmNVcGRhdGVzOjF9LFFkPUUuSW5kZXRlcm1pbmF0ZUNvbXBvbmVudCxSZD1FLkNsYXNzQ29tcG9uZW50LFNkPUUuSG9zdFJvb3QsVGQ9RS5Ib3N0Q29tcG9uZW50LFVkPUUuSG9zdFRleHQsVmQ9RS5Ib3N0UG9ydGFsLFdkPUUuQ29yb3V0aW5lQ29tcG9uZW50LFxuWGQ9RS5ZaWVsZENvbXBvbmVudCxZZD1FLkZyYWdtZW50LFpkPVEuTm9Xb3JrLCRkPVBkLk5vQ29udGV4dCxhZT1KLk5vRWZmZWN0O2Z1bmN0aW9uIGJlKGEsYixjKXt0aGlzLnRhZz1hO3RoaXMua2V5PWI7dGhpcy5zdGF0ZU5vZGU9dGhpcy50eXBlPW51bGw7dGhpcy5zaWJsaW5nPXRoaXMuY2hpbGQ9dGhpc1tcInJldHVyblwiXT1udWxsO3RoaXMuaW5kZXg9MDt0aGlzLm1lbW9pemVkU3RhdGU9dGhpcy51cGRhdGVRdWV1ZT10aGlzLm1lbW9pemVkUHJvcHM9dGhpcy5wZW5kaW5nUHJvcHM9dGhpcy5yZWY9bnVsbDt0aGlzLmludGVybmFsQ29udGV4dFRhZz1jO3RoaXMuZWZmZWN0VGFnPWFlO3RoaXMubGFzdEVmZmVjdD10aGlzLmZpcnN0RWZmZWN0PXRoaXMubmV4dEVmZmVjdD1udWxsO3RoaXMucGVuZGluZ1dvcmtQcmlvcml0eT1aZDt0aGlzLmFsdGVybmF0ZT1udWxsfVxuZnVuY3Rpb24gY2UoYSxiLGMpe3ZhciBkPXZvaWQgMDtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYT8oZD1hLnByb3RvdHlwZSYmYS5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudD9uZXcgYmUoUmQsYixjKTpuZXcgYmUoUWQsYixjKSxkLnR5cGU9YSk6XCJzdHJpbmdcIj09PXR5cGVvZiBhPyhkPW5ldyBiZShUZCxiLGMpLGQudHlwZT1hKTpcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZcIm51bWJlclwiPT09dHlwZW9mIGEudGFnP2Q9YTp3KFwiMTMwXCIsbnVsbD09YT9hOnR5cGVvZiBhLFwiXCIpO3JldHVybiBkfVxudmFyIGRlPXtjcmVhdGVXb3JrSW5Qcm9ncmVzczpmdW5jdGlvbihhLGIpe3ZhciBjPWEuYWx0ZXJuYXRlO251bGw9PT1jPyhjPW5ldyBiZShhLnRhZyxhLmtleSxhLmludGVybmFsQ29udGV4dFRhZyksYy50eXBlPWEudHlwZSxjLnN0YXRlTm9kZT1hLnN0YXRlTm9kZSxjLmFsdGVybmF0ZT1hLGEuYWx0ZXJuYXRlPWMpOihjLmVmZmVjdFRhZz1hZSxjLm5leHRFZmZlY3Q9bnVsbCxjLmZpcnN0RWZmZWN0PW51bGwsYy5sYXN0RWZmZWN0PW51bGwpO2MucGVuZGluZ1dvcmtQcmlvcml0eT1iO2MuY2hpbGQ9YS5jaGlsZDtjLm1lbW9pemVkUHJvcHM9YS5tZW1vaXplZFByb3BzO2MubWVtb2l6ZWRTdGF0ZT1hLm1lbW9pemVkU3RhdGU7Yy51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlO2Muc2libGluZz1hLnNpYmxpbmc7Yy5pbmRleD1hLmluZGV4O2MucmVmPWEucmVmO3JldHVybiBjfSxjcmVhdGVIb3N0Um9vdEZpYmVyOmZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBiZShTZCxudWxsLCRkKX0sXG5jcmVhdGVGaWJlckZyb21FbGVtZW50OmZ1bmN0aW9uKGEsYixjKXtiPWNlKGEudHlwZSxhLmtleSxiLG51bGwpO2IucGVuZGluZ1Byb3BzPWEucHJvcHM7Yi5wZW5kaW5nV29ya1ByaW9yaXR5PWM7cmV0dXJuIGJ9LGNyZWF0ZUZpYmVyRnJvbUZyYWdtZW50OmZ1bmN0aW9uKGEsYixjKXtiPW5ldyBiZShZZCxudWxsLGIpO2IucGVuZGluZ1Byb3BzPWE7Yi5wZW5kaW5nV29ya1ByaW9yaXR5PWM7cmV0dXJuIGJ9LGNyZWF0ZUZpYmVyRnJvbVRleHQ6ZnVuY3Rpb24oYSxiLGMpe2I9bmV3IGJlKFVkLG51bGwsYik7Yi5wZW5kaW5nUHJvcHM9YTtiLnBlbmRpbmdXb3JrUHJpb3JpdHk9YztyZXR1cm4gYn0sY3JlYXRlRmliZXJGcm9tRWxlbWVudFR5cGU6Y2UsY3JlYXRlRmliZXJGcm9tSG9zdEluc3RhbmNlRm9yRGVsZXRpb246ZnVuY3Rpb24oKXt2YXIgYT1uZXcgYmUoVGQsbnVsbCwkZCk7YS50eXBlPVwiREVMRVRFRFwiO3JldHVybiBhfSxjcmVhdGVGaWJlckZyb21Db3JvdXRpbmU6ZnVuY3Rpb24oYSxcbmIsYyl7Yj1uZXcgYmUoV2QsYS5rZXksYik7Yi50eXBlPWEuaGFuZGxlcjtiLnBlbmRpbmdQcm9wcz1hO2IucGVuZGluZ1dvcmtQcmlvcml0eT1jO3JldHVybiBifSxjcmVhdGVGaWJlckZyb21ZaWVsZDpmdW5jdGlvbihhLGIpe3JldHVybiBuZXcgYmUoWGQsbnVsbCxiKX0sY3JlYXRlRmliZXJGcm9tUG9ydGFsOmZ1bmN0aW9uKGEsYixjKXtiPW5ldyBiZShWZCxhLmtleSxiKTtiLnBlbmRpbmdQcm9wcz1hLmNoaWxkcmVufHxbXTtiLnBlbmRpbmdXb3JrUHJpb3JpdHk9YztiLnN0YXRlTm9kZT17Y29udGFpbmVySW5mbzphLmNvbnRhaW5lckluZm8saW1wbGVtZW50YXRpb246YS5pbXBsZW1lbnRhdGlvbn07cmV0dXJuIGJ9LGxhcmdlclByaW9yaXR5OmZ1bmN0aW9uKGEsYil7cmV0dXJuIGEhPT1aZCYmKGI9PT1aZHx8Yj5hKT9hOmJ9fSxlZT1kZS5jcmVhdGVIb3N0Um9vdEZpYmVyLGZlPUUuSW5kZXRlcm1pbmF0ZUNvbXBvbmVudCxnZT1FLkZ1bmN0aW9uYWxDb21wb25lbnQsaGU9RS5DbGFzc0NvbXBvbmVudCxcbmllPUUuSG9zdENvbXBvbmVudCxqZSxrZTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2xbXCJmb3JcIl0/KGplPVN5bWJvbFtcImZvclwiXShcInJlYWN0LmNvcm91dGluZVwiKSxrZT1TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC55aWVsZFwiKSk6KGplPTYwMTA0LGtlPTYwMTA1KTtcbnZhciBsZT17Y3JlYXRlQ29yb3V0aW5lOmZ1bmN0aW9uKGEsYixjKXt2YXIgZD0zPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1szXT9hcmd1bWVudHNbM106bnVsbDtyZXR1cm57JCR0eXBlb2Y6amUsa2V5Om51bGw9PWQ/bnVsbDpcIlwiK2QsY2hpbGRyZW46YSxoYW5kbGVyOmIscHJvcHM6Y319LGNyZWF0ZVlpZWxkOmZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjprZSx2YWx1ZTphfX0saXNDb3JvdXRpbmU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PWplfSxpc1lpZWxkOmZ1bmN0aW9uKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1rZX0sUkVBQ1RfWUlFTERfVFlQRTprZSxSRUFDVF9DT1JPVVRJTkVfVFlQRTpqZX0sbWU9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sW1wiZm9yXCJdJiZTeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5wb3J0YWxcIil8fFxuNjAxMDYsbmU9e2NyZWF0ZVBvcnRhbDpmdW5jdGlvbihhLGIsYyl7dmFyIGQ9Mzxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbM10/YXJndW1lbnRzWzNdOm51bGw7cmV0dXJueyQkdHlwZW9mOm1lLGtleTpudWxsPT1kP251bGw6XCJcIitkLGNoaWxkcmVuOmEsY29udGFpbmVySW5mbzpiLGltcGxlbWVudGF0aW9uOmN9fSxpc1BvcnRhbDpmdW5jdGlvbihhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09bWV9LFJFQUNUX1BPUlRBTF9UWVBFOm1lfSxvZT1sZS5SRUFDVF9DT1JPVVRJTkVfVFlQRSxwZT1sZS5SRUFDVF9ZSUVMRF9UWVBFLHFlPW5lLlJFQUNUX1BPUlRBTF9UWVBFLHJlPWRlLmNyZWF0ZVdvcmtJblByb2dyZXNzLHNlPWRlLmNyZWF0ZUZpYmVyRnJvbUVsZW1lbnQsdGU9ZGUuY3JlYXRlRmliZXJGcm9tRnJhZ21lbnQsdWU9ZGUuY3JlYXRlRmliZXJGcm9tVGV4dCx2ZT1kZS5jcmVhdGVGaWJlckZyb21Db3JvdXRpbmUsXG53ZT1kZS5jcmVhdGVGaWJlckZyb21ZaWVsZCx4ZT1kZS5jcmVhdGVGaWJlckZyb21Qb3J0YWwseWU9QXJyYXkuaXNBcnJheSx6ZT1FLkZ1bmN0aW9uYWxDb21wb25lbnQsQWU9RS5DbGFzc0NvbXBvbmVudCxCZT1FLkhvc3RUZXh0LENlPUUuSG9zdFBvcnRhbCxEZT1FLkNvcm91dGluZUNvbXBvbmVudCxFZT1FLllpZWxkQ29tcG9uZW50LEZlPUUuRnJhZ21lbnQsR2U9Si5Ob0VmZmVjdCxIZT1KLlBsYWNlbWVudCxJZT1KLkRlbGV0aW9uLEplPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcixLZT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2xbXCJmb3JcIl0mJlN5bWJvbFtcImZvclwiXShcInJlYWN0LmVsZW1lbnRcIil8fDYwMTAzO1xuZnVuY3Rpb24gTGUoYSl7aWYobnVsbD09PWF8fFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYSlyZXR1cm4gbnVsbDthPUplJiZhW0plXXx8YVtcIkBAaXRlcmF0b3JcIl07cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YTpudWxsfVxuZnVuY3Rpb24gTWUoYSxiKXt2YXIgYz1iLnJlZjtpZihudWxsIT09YyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGMpe2lmKGIuX293bmVyKXtiPWIuX293bmVyO3ZhciBkPXZvaWQgMDtiJiYoXCJudW1iZXJcIj09PXR5cGVvZiBiLnRhZz8oYi50YWchPT1BZT93KFwiMTEwXCIpOnZvaWQgMCxkPWIuc3RhdGVOb2RlKTpkPWIuZ2V0UHVibGljSW5zdGFuY2UoKSk7ZD92b2lkIDA6dyhcIjE0N1wiLGMpO3ZhciBlPVwiXCIrYztpZihudWxsIT09YSYmbnVsbCE9PWEucmVmJiZhLnJlZi5fc3RyaW5nUmVmPT09ZSlyZXR1cm4gYS5yZWY7YT1mdW5jdGlvbihhKXt2YXIgYj1kLnJlZnM9PT1kYT9kLnJlZnM9e306ZC5yZWZzO251bGw9PT1hP2RlbGV0ZSBiW2VdOmJbZV09YX07YS5fc3RyaW5nUmVmPWU7cmV0dXJuIGF9XCJzdHJpbmdcIiE9PXR5cGVvZiBjP3coXCIxNDhcIik6dm9pZCAwO2IuX293bmVyP3ZvaWQgMDp3KFwiMTQ5XCIsYyl9cmV0dXJuIGN9XG5mdW5jdGlvbiBOZShhLGIpe1widGV4dGFyZWFcIiE9PWEudHlwZSYmdyhcIjMxXCIsXCJbb2JqZWN0IE9iamVjdF1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChiKT9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGIpLmpvaW4oXCIsIFwiKStcIn1cIjpiLFwiXCIpfVxuZnVuY3Rpb24gT2UoYSxiKXtmdW5jdGlvbiBjKGMsZCl7aWYoYil7aWYoIWEpe2lmKG51bGw9PT1kLmFsdGVybmF0ZSlyZXR1cm47ZD1kLmFsdGVybmF0ZX12YXIgbT1jLmxhc3RFZmZlY3Q7bnVsbCE9PW0/KG0ubmV4dEVmZmVjdD1kLGMubGFzdEVmZmVjdD1kKTpjLmZpcnN0RWZmZWN0PWMubGFzdEVmZmVjdD1kO2QubmV4dEVmZmVjdD1udWxsO2QuZWZmZWN0VGFnPUllfX1mdW5jdGlvbiBkKGEsZCl7aWYoIWIpcmV0dXJuIG51bGw7Zm9yKDtudWxsIT09ZDspYyhhLGQpLGQ9ZC5zaWJsaW5nO3JldHVybiBudWxsfWZ1bmN0aW9uIGUoYSxiKXtmb3IoYT1uZXcgTWFwO251bGwhPT1iOyludWxsIT09Yi5rZXk/YS5zZXQoYi5rZXksYik6YS5zZXQoYi5pbmRleCxiKSxiPWIuc2libGluZztyZXR1cm4gYX1mdW5jdGlvbiBmKGIsYyl7aWYoYSlyZXR1cm4gYj1yZShiLGMpLGIuaW5kZXg9MCxiLnNpYmxpbmc9bnVsbCxiO2IucGVuZGluZ1dvcmtQcmlvcml0eT1jO2IuZWZmZWN0VGFnPUdlO1xuYi5pbmRleD0wO2Iuc2libGluZz1udWxsO3JldHVybiBifWZ1bmN0aW9uIGcoYSxjLGQpe2EuaW5kZXg9ZDtpZighYilyZXR1cm4gYztkPWEuYWx0ZXJuYXRlO2lmKG51bGwhPT1kKXJldHVybiBkPWQuaW5kZXgsZDxjPyhhLmVmZmVjdFRhZz1IZSxjKTpkO2EuZWZmZWN0VGFnPUhlO3JldHVybiBjfWZ1bmN0aW9uIGgoYSl7YiYmbnVsbD09PWEuYWx0ZXJuYXRlJiYoYS5lZmZlY3RUYWc9SGUpO3JldHVybiBhfWZ1bmN0aW9uIGsoYSxiLGMsZCl7aWYobnVsbD09PWJ8fGIudGFnIT09QmUpcmV0dXJuIGM9dWUoYyxhLmludGVybmFsQ29udGV4dFRhZyxkKSxjW1wicmV0dXJuXCJdPWEsYztiPWYoYixkKTtiLnBlbmRpbmdQcm9wcz1jO2JbXCJyZXR1cm5cIl09YTtyZXR1cm4gYn1mdW5jdGlvbiBwKGEsYixjLGQpe2lmKG51bGw9PT1ifHxiLnR5cGUhPT1jLnR5cGUpcmV0dXJuIGQ9c2UoYyxhLmludGVybmFsQ29udGV4dFRhZyxkKSxkLnJlZj1NZShiLGMpLGRbXCJyZXR1cm5cIl09YSxkO2Q9ZihiLFxuZCk7ZC5yZWY9TWUoYixjKTtkLnBlbmRpbmdQcm9wcz1jLnByb3BzO2RbXCJyZXR1cm5cIl09YTtyZXR1cm4gZH1mdW5jdGlvbiB4KGEsYixjLGQpe2lmKG51bGw9PT1ifHxiLnRhZyE9PURlKXJldHVybiBjPXZlKGMsYS5pbnRlcm5hbENvbnRleHRUYWcsZCksY1tcInJldHVyblwiXT1hLGM7Yj1mKGIsZCk7Yi5wZW5kaW5nUHJvcHM9YztiW1wicmV0dXJuXCJdPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gUyhhLGIsYyxkKXtpZihudWxsPT09Ynx8Yi50YWchPT1FZSlyZXR1cm4gYj13ZShjLGEuaW50ZXJuYWxDb250ZXh0VGFnLGQpLGIudHlwZT1jLnZhbHVlLGJbXCJyZXR1cm5cIl09YSxiO2I9ZihiLGQpO2IudHlwZT1jLnZhbHVlO2JbXCJyZXR1cm5cIl09YTtyZXR1cm4gYn1mdW5jdGlvbiBEKGEsYixjLGQpe2lmKG51bGw9PT1ifHxiLnRhZyE9PUNlfHxiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvIT09Yy5jb250YWluZXJJbmZvfHxiLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbiE9PWMuaW1wbGVtZW50YXRpb24pcmV0dXJuIGM9XG54ZShjLGEuaW50ZXJuYWxDb250ZXh0VGFnLGQpLGNbXCJyZXR1cm5cIl09YSxjO2I9ZihiLGQpO2IucGVuZGluZ1Byb3BzPWMuY2hpbGRyZW58fFtdO2JbXCJyZXR1cm5cIl09YTtyZXR1cm4gYn1mdW5jdGlvbiB5KGEsYixjLGQpe2lmKG51bGw9PT1ifHxiLnRhZyE9PUZlKXJldHVybiBjPXRlKGMsYS5pbnRlcm5hbENvbnRleHRUYWcsZCksY1tcInJldHVyblwiXT1hLGM7Yj1mKGIsZCk7Yi5wZW5kaW5nUHJvcHM9YztiW1wicmV0dXJuXCJdPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gQihhLGIsYyl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBifHxcIm51bWJlclwiPT09dHlwZW9mIGIpcmV0dXJuIGI9dWUoXCJcIitiLGEuaW50ZXJuYWxDb250ZXh0VGFnLGMpLGJbXCJyZXR1cm5cIl09YSxiO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYiYmbnVsbCE9PWIpe3N3aXRjaChiLiQkdHlwZW9mKXtjYXNlIEtlOnJldHVybiBjPXNlKGIsYS5pbnRlcm5hbENvbnRleHRUYWcsYyksYy5yZWY9TWUobnVsbCxiKSxjW1wicmV0dXJuXCJdPVxuYSxjO2Nhc2Ugb2U6cmV0dXJuIGI9dmUoYixhLmludGVybmFsQ29udGV4dFRhZyxjKSxiW1wicmV0dXJuXCJdPWEsYjtjYXNlIHBlOnJldHVybiBjPXdlKGIsYS5pbnRlcm5hbENvbnRleHRUYWcsYyksYy50eXBlPWIudmFsdWUsY1tcInJldHVyblwiXT1hLGM7Y2FzZSBxZTpyZXR1cm4gYj14ZShiLGEuaW50ZXJuYWxDb250ZXh0VGFnLGMpLGJbXCJyZXR1cm5cIl09YSxifWlmKHllKGIpfHxMZShiKSlyZXR1cm4gYj10ZShiLGEuaW50ZXJuYWxDb250ZXh0VGFnLGMpLGJbXCJyZXR1cm5cIl09YSxiO05lKGEsYil9cmV0dXJuIG51bGx9ZnVuY3Rpb24gSChhLGIsYyxkKXt2YXIgZT1udWxsIT09Yj9iLmtleTpudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgY3x8XCJudW1iZXJcIj09PXR5cGVvZiBjKXJldHVybiBudWxsIT09ZT9udWxsOmsoYSxiLFwiXCIrYyxkKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jKXtzd2l0Y2goYy4kJHR5cGVvZil7Y2FzZSBLZTpyZXR1cm4gYy5rZXk9PT1lP3AoYSxcbmIsYyxkKTpudWxsO2Nhc2Ugb2U6cmV0dXJuIGMua2V5PT09ZT94KGEsYixjLGQpOm51bGw7Y2FzZSBwZTpyZXR1cm4gbnVsbD09PWU/UyhhLGIsYyxkKTpudWxsO2Nhc2UgcWU6cmV0dXJuIGMua2V5PT09ZT9EKGEsYixjLGQpOm51bGx9aWYoeWUoYyl8fExlKGMpKXJldHVybiBudWxsIT09ZT9udWxsOnkoYSxiLGMsZCk7TmUoYSxjKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBDKGEsYixjLGQsZSl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBkfHxcIm51bWJlclwiPT09dHlwZW9mIGQpcmV0dXJuIGE9YS5nZXQoYyl8fG51bGwsayhiLGEsXCJcIitkLGUpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgZCYmbnVsbCE9PWQpe3N3aXRjaChkLiQkdHlwZW9mKXtjYXNlIEtlOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxwKGIsYSxkLGUpO2Nhc2Ugb2U6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLHgoYixhLGQsZSk7Y2FzZSBwZTpyZXR1cm4gYT1hLmdldChjKXx8XG5udWxsLFMoYixhLGQsZSk7Y2FzZSBxZTpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsRChiLGEsZCxlKX1pZih5ZShkKXx8TGUoZCkpcmV0dXJuIGE9YS5nZXQoYyl8fG51bGwseShiLGEsZCxlKTtOZShiLGQpfXJldHVybiBudWxsfWZ1bmN0aW9uIENhKGEsZixoLGspe2Zvcih2YXIgbT1udWxsLHQ9bnVsbCxxPWYscj1mPTAscD1udWxsO251bGwhPT1xJiZyPGgubGVuZ3RoO3IrKyl7cS5pbmRleD5yPyhwPXEscT1udWxsKTpwPXEuc2libGluZzt2YXIgdj1IKGEscSxoW3JdLGspO2lmKG51bGw9PT12KXtudWxsPT09cSYmKHE9cCk7YnJlYWt9YiYmcSYmbnVsbD09PXYuYWx0ZXJuYXRlJiZjKGEscSk7Zj1nKHYsZixyKTtudWxsPT09dD9tPXY6dC5zaWJsaW5nPXY7dD12O3E9cH1pZihyPT09aC5sZW5ndGgpcmV0dXJuIGQoYSxxKSxtO2lmKG51bGw9PT1xKXtmb3IoO3I8aC5sZW5ndGg7cisrKWlmKHE9QihhLGhbcl0saykpZj1nKHEsZixyKSxudWxsPT09XG50P209cTp0LnNpYmxpbmc9cSx0PXE7cmV0dXJuIG19Zm9yKHE9ZShhLHEpO3I8aC5sZW5ndGg7cisrKWlmKHA9QyhxLGEscixoW3JdLGspKXtpZihiJiZudWxsIT09cC5hbHRlcm5hdGUpcVtcImRlbGV0ZVwiXShudWxsPT09cC5rZXk/cjpwLmtleSk7Zj1nKHAsZixyKTtudWxsPT09dD9tPXA6dC5zaWJsaW5nPXA7dD1wfWImJnEuZm9yRWFjaChmdW5jdGlvbihiKXtyZXR1cm4gYyhhLGIpfSk7cmV0dXJuIG19ZnVuY3Rpb24gcihhLGYsaCxyKXt2YXIgbT1MZShoKTtcImZ1bmN0aW9uXCIhPT10eXBlb2YgbT93KFwiMTUwXCIpOnZvaWQgMDtoPW0uY2FsbChoKTtudWxsPT1oP3coXCIxNTFcIik6dm9pZCAwO2Zvcih2YXIgdD1tPW51bGwscT1mLGs9Zj0wLHA9bnVsbCx2PWgubmV4dCgpO251bGwhPT1xJiYhdi5kb25lO2srKyx2PWgubmV4dCgpKXtxLmluZGV4Pms/KHA9cSxxPW51bGwpOnA9cS5zaWJsaW5nO3ZhciBWPUgoYSxxLHYudmFsdWUscik7aWYobnVsbD09PVYpe3F8fChxPXApO2JyZWFrfWImJlxucSYmbnVsbD09PVYuYWx0ZXJuYXRlJiZjKGEscSk7Zj1nKFYsZixrKTtudWxsPT09dD9tPVY6dC5zaWJsaW5nPVY7dD1WO3E9cH1pZih2LmRvbmUpcmV0dXJuIGQoYSxxKSxtO2lmKG51bGw9PT1xKXtmb3IoOyF2LmRvbmU7aysrLHY9aC5uZXh0KCkpdj1CKGEsdi52YWx1ZSxyKSxudWxsIT09diYmKGY9Zyh2LGYsayksbnVsbD09PXQ/bT12OnQuc2libGluZz12LHQ9dik7cmV0dXJuIG19Zm9yKHE9ZShhLHEpOyF2LmRvbmU7aysrLHY9aC5uZXh0KCkpaWYodj1DKHEsYSxrLHYudmFsdWUsciksbnVsbCE9PXYpe2lmKGImJm51bGwhPT12LmFsdGVybmF0ZSlxW1wiZGVsZXRlXCJdKG51bGw9PT12LmtleT9rOnYua2V5KTtmPWcodixmLGspO251bGw9PT10P209djp0LnNpYmxpbmc9djt0PXZ9YiYmcS5mb3JFYWNoKGZ1bmN0aW9uKGIpe3JldHVybiBjKGEsYil9KTtyZXR1cm4gbX1yZXR1cm4gZnVuY3Rpb24oYSxiLGUsZyl7dmFyIG09XCJvYmplY3RcIj09PXR5cGVvZiBlJiZudWxsIT09ZTtpZihtKXN3aXRjaChlLiQkdHlwZW9mKXtjYXNlIEtlOmE6e3ZhciBDPVxuZS5rZXk7Zm9yKG09YjtudWxsIT09bTspe2lmKG0ua2V5PT09QylpZihtLnR5cGU9PT1lLnR5cGUpe2QoYSxtLnNpYmxpbmcpO2I9ZihtLGcpO2IucmVmPU1lKG0sZSk7Yi5wZW5kaW5nUHJvcHM9ZS5wcm9wcztiW1wicmV0dXJuXCJdPWE7YT1iO2JyZWFrIGF9ZWxzZXtkKGEsbSk7YnJlYWt9ZWxzZSBjKGEsbSk7bT1tLnNpYmxpbmd9Zz1zZShlLGEuaW50ZXJuYWxDb250ZXh0VGFnLGcpO2cucmVmPU1lKGIsZSk7Z1tcInJldHVyblwiXT1hO2E9Z31yZXR1cm4gaChhKTtjYXNlIG9lOmE6e2ZvcihtPWUua2V5O251bGwhPT1iOyl7aWYoYi5rZXk9PT1tKWlmKGIudGFnPT09RGUpe2QoYSxiLnNpYmxpbmcpO2I9ZihiLGcpO2IucGVuZGluZ1Byb3BzPWU7YltcInJldHVyblwiXT1hO2E9YjticmVhayBhfWVsc2V7ZChhLGIpO2JyZWFrfWVsc2UgYyhhLGIpO2I9Yi5zaWJsaW5nfWU9dmUoZSxhLmludGVybmFsQ29udGV4dFRhZyxnKTtlW1wicmV0dXJuXCJdPWE7YT1lfXJldHVybiBoKGEpO2Nhc2UgcGU6YTp7aWYobnVsbCE9PVxuYilpZihiLnRhZz09PUVlKXtkKGEsYi5zaWJsaW5nKTtiPWYoYixnKTtiLnR5cGU9ZS52YWx1ZTtiW1wicmV0dXJuXCJdPWE7YT1iO2JyZWFrIGF9ZWxzZSBkKGEsYik7Yj13ZShlLGEuaW50ZXJuYWxDb250ZXh0VGFnLGcpO2IudHlwZT1lLnZhbHVlO2JbXCJyZXR1cm5cIl09YTthPWJ9cmV0dXJuIGgoYSk7Y2FzZSBxZTphOntmb3IobT1lLmtleTtudWxsIT09Yjspe2lmKGIua2V5PT09bSlpZihiLnRhZz09PUNlJiZiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvPT09ZS5jb250YWluZXJJbmZvJiZiLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbj09PWUuaW1wbGVtZW50YXRpb24pe2QoYSxiLnNpYmxpbmcpO2I9ZihiLGcpO2IucGVuZGluZ1Byb3BzPWUuY2hpbGRyZW58fFtdO2JbXCJyZXR1cm5cIl09YTthPWI7YnJlYWsgYX1lbHNle2QoYSxiKTticmVha31lbHNlIGMoYSxiKTtiPWIuc2libGluZ31lPXhlKGUsYS5pbnRlcm5hbENvbnRleHRUYWcsZyk7ZVtcInJldHVyblwiXT1hO2E9ZX1yZXR1cm4gaChhKX1pZihcInN0cmluZ1wiPT09XG50eXBlb2YgZXx8XCJudW1iZXJcIj09PXR5cGVvZiBlKXJldHVybiBlPVwiXCIrZSxudWxsIT09YiYmYi50YWc9PT1CZT8oZChhLGIuc2libGluZyksYj1mKGIsZyksYi5wZW5kaW5nUHJvcHM9ZSxiW1wicmV0dXJuXCJdPWEsYT1iKTooZChhLGIpLGU9dWUoZSxhLmludGVybmFsQ29udGV4dFRhZyxnKSxlW1wicmV0dXJuXCJdPWEsYT1lKSxoKGEpO2lmKHllKGUpKXJldHVybiBDYShhLGIsZSxnKTtpZihMZShlKSlyZXR1cm4gcihhLGIsZSxnKTttJiZOZShhLGUpO2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgZSlzd2l0Y2goYS50YWcpe2Nhc2UgQWU6Y2FzZSB6ZTplPWEudHlwZSx3KFwiMTUyXCIsZS5kaXNwbGF5TmFtZXx8ZS5uYW1lfHxcIkNvbXBvbmVudFwiKX1yZXR1cm4gZChhLGIpfX1cbnZhciBQZT1PZSghMCwhMCksUWU9T2UoITEsITApLFJlPU9lKCExLCExKSxTZT17cmVjb25jaWxlQ2hpbGRGaWJlcnM6UGUscmVjb25jaWxlQ2hpbGRGaWJlcnNJblBsYWNlOlFlLG1vdW50Q2hpbGRGaWJlcnNJblBsYWNlOlJlLGNsb25lQ2hpbGRGaWJlcnM6ZnVuY3Rpb24oYSxiKXtudWxsIT09YSYmYi5jaGlsZCE9PWEuY2hpbGQ/dyhcIjE1M1wiKTp2b2lkIDA7aWYobnVsbCE9PWIuY2hpbGQpe2E9Yi5jaGlsZDt2YXIgYz1yZShhLGEucGVuZGluZ1dvcmtQcmlvcml0eSk7Yy5wZW5kaW5nUHJvcHM9YS5wZW5kaW5nUHJvcHM7Yi5jaGlsZD1jO2ZvcihjW1wicmV0dXJuXCJdPWI7bnVsbCE9PWEuc2libGluZzspYT1hLnNpYmxpbmcsYz1jLnNpYmxpbmc9cmUoYSxhLnBlbmRpbmdXb3JrUHJpb3JpdHkpLGMucGVuZGluZ1Byb3BzPWEucGVuZGluZ1Byb3BzLGNbXCJyZXR1cm5cIl09YjtjLnNpYmxpbmc9bnVsbH19fSxUZT1KLlVwZGF0ZSxVZT1QZC5Bc3luY1VwZGF0ZXMsVmU9Ui5jYWNoZUNvbnRleHQsXG5XZT1SLmdldE1hc2tlZENvbnRleHQsWGU9Ui5nZXRVbm1hc2tlZENvbnRleHQsWWU9Ui5pc0NvbnRleHRDb25zdW1lcixaZT11ZC5hZGRVcGRhdGUsJGU9dWQuYWRkUmVwbGFjZVVwZGF0ZSxhZj11ZC5hZGRGb3JjZVVwZGF0ZSxiZj11ZC5iZWdpblVwZGF0ZVF1ZXVlLGNmPVIuaGFzQ29udGV4dENoYW5nZWQsZGY9YmIuaXNNb3VudGVkO1xuZnVuY3Rpb24gZWYoYSxiLGMsZCl7ZnVuY3Rpb24gZShhLGIpe2IudXBkYXRlcj1mO2Euc3RhdGVOb2RlPWI7UGEuc2V0KGIsYSl9dmFyIGY9e2lzTW91bnRlZDpkZixlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oYyxkLGUpe2M9UGEuZ2V0KGMpO3ZhciBmPWIoYywhMSk7WmUoYyxkLHZvaWQgMD09PWU/bnVsbDplLGYpO2EoYyxmKX0sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbihjLGQsZSl7Yz1QYS5nZXQoYyk7dmFyIGY9YihjLCExKTskZShjLGQsdm9pZCAwPT09ZT9udWxsOmUsZik7YShjLGYpfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oYyxkKXtjPVBhLmdldChjKTt2YXIgZT1iKGMsITEpO2FmKGMsdm9pZCAwPT09ZD9udWxsOmQsZSk7YShjLGUpfX07cmV0dXJue2Fkb3B0Q2xhc3NJbnN0YW5jZTplLGNvbnN0cnVjdENsYXNzSW5zdGFuY2U6ZnVuY3Rpb24oYSxiKXt2YXIgYz1hLnR5cGUsZD1YZShhKSxmPVllKGEpLGc9Zj9XZShhLGQpOmRhO2I9bmV3IGMoYixnKTtcbmUoYSxiKTtmJiZWZShhLGQsZyk7cmV0dXJuIGJ9LG1vdW50Q2xhc3NJbnN0YW5jZTpmdW5jdGlvbihhLGIpe3ZhciBjPWEuYWx0ZXJuYXRlLGQ9YS5zdGF0ZU5vZGUsZT1kLnN0YXRlfHxudWxsLGc9YS5wZW5kaW5nUHJvcHM7Zz92b2lkIDA6dyhcIjE1OFwiKTt2YXIgaD1YZShhKTtkLnByb3BzPWc7ZC5zdGF0ZT1lO2QucmVmcz1kYTtkLmNvbnRleHQ9V2UoYSxoKTtlZC5lbmFibGVBc3luY1N1YnRyZWVBUEkmJm51bGwhPWEudHlwZSYmbnVsbCE9YS50eXBlLnByb3RvdHlwZSYmITA9PT1hLnR5cGUucHJvdG90eXBlLnVuc3RhYmxlX2lzQXN5bmNSZWFjdENvbXBvbmVudCYmKGEuaW50ZXJuYWxDb250ZXh0VGFnfD1VZSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50V2lsbE1vdW50JiYoaD1kLnN0YXRlLGQuY29tcG9uZW50V2lsbE1vdW50KCksaCE9PWQuc3RhdGUmJmYuZW5xdWV1ZVJlcGxhY2VTdGF0ZShkLGQuc3RhdGUsbnVsbCksaD1hLnVwZGF0ZVF1ZXVlLG51bGwhPT1cbmgmJihkLnN0YXRlPWJmKGMsYSxoLGQsZSxnLGIpKSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50RGlkTW91bnQmJihhLmVmZmVjdFRhZ3w9VGUpfSx1cGRhdGVDbGFzc0luc3RhbmNlOmZ1bmN0aW9uKGEsYixlKXt2YXIgZz1iLnN0YXRlTm9kZTtnLnByb3BzPWIubWVtb2l6ZWRQcm9wcztnLnN0YXRlPWIubWVtb2l6ZWRTdGF0ZTt2YXIgaD1iLm1lbW9pemVkUHJvcHMsaz1iLnBlbmRpbmdQcm9wcztrfHwoaz1oLG51bGw9PWs/dyhcIjE1OVwiKTp2b2lkIDApO3ZhciBEPWcuY29udGV4dCx5PVhlKGIpO3k9V2UoYix5KTtcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHxoPT09ayYmRD09PXl8fChEPWcuc3RhdGUsZy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGsseSksZy5zdGF0ZSE9PUQmJmYuZW5xdWV1ZVJlcGxhY2VTdGF0ZShnLGcuc3RhdGUsbnVsbCkpO0Q9Yi5tZW1vaXplZFN0YXRlO2U9bnVsbCE9PWIudXBkYXRlUXVldWU/YmYoYSxcbmIsYi51cGRhdGVRdWV1ZSxnLEQsayxlKTpEO2lmKCEoaCE9PWt8fEQhPT1lfHxjZigpfHxudWxsIT09Yi51cGRhdGVRdWV1ZSYmYi51cGRhdGVRdWV1ZS5oYXNGb3JjZVVwZGF0ZSkpcmV0dXJuXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZEPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PVRlKSwhMTt2YXIgQj1rO2lmKG51bGw9PT1ofHxudWxsIT09Yi51cGRhdGVRdWV1ZSYmYi51cGRhdGVRdWV1ZS5oYXNGb3JjZVVwZGF0ZSlCPSEwO2Vsc2V7dmFyIEg9Yi5zdGF0ZU5vZGUsQz1iLnR5cGU7Qj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgSC5zaG91bGRDb21wb25lbnRVcGRhdGU/SC5zaG91bGRDb21wb25lbnRVcGRhdGUoQixlLHkpOkMucHJvdG90eXBlJiZDLnByb3RvdHlwZS5pc1B1cmVSZWFjdENvbXBvbmVudD8hZWEoaCxCKXx8IWVhKEQsZSk6ITB9Qj8oXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZSYmXG5nLmNvbXBvbmVudFdpbGxVcGRhdGUoayxlLHkpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZSYmKGIuZWZmZWN0VGFnfD1UZSkpOihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJkQ9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9VGUpLGMoYixrKSxkKGIsZSkpO2cucHJvcHM9aztnLnN0YXRlPWU7Zy5jb250ZXh0PXk7cmV0dXJuIEJ9fX1cbnZhciBmZj1TZS5tb3VudENoaWxkRmliZXJzSW5QbGFjZSxnZj1TZS5yZWNvbmNpbGVDaGlsZEZpYmVycyxoZj1TZS5yZWNvbmNpbGVDaGlsZEZpYmVyc0luUGxhY2UsamY9U2UuY2xvbmVDaGlsZEZpYmVycyxrZj11ZC5iZWdpblVwZGF0ZVF1ZXVlLGxmPVIuZ2V0TWFza2VkQ29udGV4dCxtZj1SLmdldFVubWFza2VkQ29udGV4dCxuZj1SLmhhc0NvbnRleHRDaGFuZ2VkLG9mPVIucHVzaENvbnRleHRQcm92aWRlcixwZj1SLnB1c2hUb3BMZXZlbENvbnRleHRPYmplY3QscWY9Ui5pbnZhbGlkYXRlQ29udGV4dFByb3ZpZGVyLHJmPUUuSW5kZXRlcm1pbmF0ZUNvbXBvbmVudCxzZj1FLkZ1bmN0aW9uYWxDb21wb25lbnQsdGY9RS5DbGFzc0NvbXBvbmVudCx1Zj1FLkhvc3RSb290LHdmPUUuSG9zdENvbXBvbmVudCx4Zj1FLkhvc3RUZXh0LHlmPUUuSG9zdFBvcnRhbCx6Zj1FLkNvcm91dGluZUNvbXBvbmVudCxBZj1FLkNvcm91dGluZUhhbmRsZXJQaGFzZSxCZj1FLllpZWxkQ29tcG9uZW50LFxuQ2Y9RS5GcmFnbWVudCxEZj1RLk5vV29yayxFZj1RLk9mZnNjcmVlblByaW9yaXR5LEZmPUouUGVyZm9ybWVkV29yayxHZj1KLlBsYWNlbWVudCxIZj1KLkNvbnRlbnRSZXNldCxJZj1KLkVycixKZj1KLlJlZixLZj1RYS5SZWFjdEN1cnJlbnRPd25lcjtcbmZ1bmN0aW9uIExmKGEsYixjLGQsZSl7ZnVuY3Rpb24gZihhLGIsYyl7ZyhhLGIsYyxiLnBlbmRpbmdXb3JrUHJpb3JpdHkpfWZ1bmN0aW9uIGcoYSxiLGMsZCl7Yi5jaGlsZD1udWxsPT09YT9mZihiLGIuY2hpbGQsYyxkKTphLmNoaWxkPT09Yi5jaGlsZD9nZihiLGIuY2hpbGQsYyxkKTpoZihiLGIuY2hpbGQsYyxkKX1mdW5jdGlvbiBoKGEsYil7dmFyIGM9Yi5yZWY7bnVsbD09PWN8fGEmJmEucmVmPT09Y3x8KGIuZWZmZWN0VGFnfD1KZil9ZnVuY3Rpb24gayhhLGIsYyxkKXtoKGEsYik7aWYoIWMpcmV0dXJuIGQmJnFmKGIsITEpLHgoYSxiKTtjPWIuc3RhdGVOb2RlO0tmLmN1cnJlbnQ9Yjt2YXIgZT1jLnJlbmRlcigpO2IuZWZmZWN0VGFnfD1GZjtmKGEsYixlKTtiLm1lbW9pemVkU3RhdGU9Yy5zdGF0ZTtiLm1lbW9pemVkUHJvcHM9Yy5wcm9wcztkJiZxZihiLCEwKTtyZXR1cm4gYi5jaGlsZH1mdW5jdGlvbiBwKGEpe3ZhciBiPWEuc3RhdGVOb2RlO2IucGVuZGluZ0NvbnRleHQ/XG5wZihhLGIucGVuZGluZ0NvbnRleHQsYi5wZW5kaW5nQ29udGV4dCE9PWIuY29udGV4dCk6Yi5jb250ZXh0JiZwZihhLGIuY29udGV4dCwhMSk7QyhhLGIuY29udGFpbmVySW5mbyl9ZnVuY3Rpb24geChhLGIpe2pmKGEsYik7cmV0dXJuIGIuY2hpbGR9ZnVuY3Rpb24gUyhhLGIpe3N3aXRjaChiLnRhZyl7Y2FzZSB1ZjpwKGIpO2JyZWFrO2Nhc2UgdGY6b2YoYik7YnJlYWs7Y2FzZSB5ZjpDKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyl9cmV0dXJuIG51bGx9dmFyIEQ9YS5zaG91bGRTZXRUZXh0Q29udGVudCx5PWEudXNlU3luY1NjaGVkdWxpbmcsQj1hLnNob3VsZERlcHJpb3JpdGl6ZVN1YnRyZWUsSD1iLnB1c2hIb3N0Q29udGV4dCxDPWIucHVzaEhvc3RDb250YWluZXIsQ2E9Yy5lbnRlckh5ZHJhdGlvblN0YXRlLHI9Yy5yZXNldEh5ZHJhdGlvblN0YXRlLG09Yy50cnlUb0NsYWltTmV4dEh5ZHJhdGFibGVJbnN0YW5jZTthPWVmKGQsZSxmdW5jdGlvbihhLGIpe2EubWVtb2l6ZWRQcm9wcz1cbmJ9LGZ1bmN0aW9uKGEsYil7YS5tZW1vaXplZFN0YXRlPWJ9KTt2YXIgdD1hLmFkb3B0Q2xhc3NJbnN0YW5jZSx2PWEuY29uc3RydWN0Q2xhc3NJbnN0YW5jZSxWPWEubW91bnRDbGFzc0luc3RhbmNlLGxkPWEudXBkYXRlQ2xhc3NJbnN0YW5jZTtyZXR1cm57YmVnaW5Xb3JrOmZ1bmN0aW9uKGEsYixjKXtpZihiLnBlbmRpbmdXb3JrUHJpb3JpdHk9PT1EZnx8Yi5wZW5kaW5nV29ya1ByaW9yaXR5PmMpcmV0dXJuIFMoYSxiKTtzd2l0Y2goYi50YWcpe2Nhc2UgcmY6bnVsbCE9PWE/dyhcIjE1NVwiKTp2b2lkIDA7dmFyIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZz1tZihiKTtnPWxmKGIsZyk7ZD1kKGUsZyk7Yi5lZmZlY3RUYWd8PUZmO1wib2JqZWN0XCI9PT10eXBlb2YgZCYmbnVsbCE9PWQmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLnJlbmRlcj8oYi50YWc9dGYsZT1vZihiKSx0KGIsZCksVihiLGMpLGI9ayhhLGIsITAsZSkpOihiLnRhZz1zZixmKGEsYixkKSxiLm1lbW9pemVkUHJvcHM9XG5lLGI9Yi5jaGlsZCk7cmV0dXJuIGI7Y2FzZSBzZjphOntlPWIudHlwZTtjPWIucGVuZGluZ1Byb3BzO2Q9Yi5tZW1vaXplZFByb3BzO2lmKG5mKCkpbnVsbD09PWMmJihjPWQpO2Vsc2UgaWYobnVsbD09PWN8fGQ9PT1jKXtiPXgoYSxiKTticmVhayBhfWQ9bWYoYik7ZD1sZihiLGQpO2U9ZShjLGQpO2IuZWZmZWN0VGFnfD1GZjtmKGEsYixlKTtiLm1lbW9pemVkUHJvcHM9YztiPWIuY2hpbGR9cmV0dXJuIGI7Y2FzZSB0ZjpyZXR1cm4gZT1vZihiKSxkPXZvaWQgMCxudWxsPT09YT9iLnN0YXRlTm9kZT93KFwiMTUzXCIpOih2KGIsYi5wZW5kaW5nUHJvcHMpLFYoYixjKSxkPSEwKTpkPWxkKGEsYixjKSxrKGEsYixkLGUpO2Nhc2UgdWY6cmV0dXJuIHAoYiksZD1iLnVwZGF0ZVF1ZXVlLG51bGwhPT1kPyhlPWIubWVtb2l6ZWRTdGF0ZSxkPWtmKGEsYixkLG51bGwsZSxudWxsLGMpLGU9PT1kPyhyKCksYj14KGEsYikpOihlPWQuZWxlbWVudCxudWxsIT09YSYmbnVsbCE9PWEuY2hpbGR8fFxuIUNhKGIpPyhyKCksZihhLGIsZSkpOihiLmVmZmVjdFRhZ3w9R2YsYi5jaGlsZD1mZihiLGIuY2hpbGQsZSxjKSksYi5tZW1vaXplZFN0YXRlPWQsYj1iLmNoaWxkKSk6KHIoKSxiPXgoYSxiKSksYjtjYXNlIHdmOkgoYik7bnVsbD09PWEmJm0oYik7ZT1iLnR5cGU7dmFyIHE9Yi5tZW1vaXplZFByb3BzO2Q9Yi5wZW5kaW5nUHJvcHM7bnVsbD09PWQmJihkPXEsbnVsbD09PWQ/dyhcIjE1NFwiKTp2b2lkIDApO2c9bnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOm51bGw7bmYoKXx8bnVsbCE9PWQmJnEhPT1kPyhxPWQuY2hpbGRyZW4sRChlLGQpP3E9bnVsbDpnJiZEKGUsZykmJihiLmVmZmVjdFRhZ3w9SGYpLGgoYSxiKSxjIT09RWYmJiF5JiZCKGUsZCk/KGIucGVuZGluZ1dvcmtQcmlvcml0eT1FZixiPW51bGwpOihmKGEsYixxKSxiLm1lbW9pemVkUHJvcHM9ZCxiPWIuY2hpbGQpKTpiPXgoYSxiKTtyZXR1cm4gYjtjYXNlIHhmOnJldHVybiBudWxsPT09YSYmbShiKSxhPWIucGVuZGluZ1Byb3BzLFxubnVsbD09PWEmJihhPWIubWVtb2l6ZWRQcm9wcyksYi5tZW1vaXplZFByb3BzPWEsbnVsbDtjYXNlIEFmOmIudGFnPXpmO2Nhc2UgemY6Yz1iLnBlbmRpbmdQcm9wcztpZihuZigpKW51bGw9PT1jJiYoYz1hJiZhLm1lbW9pemVkUHJvcHMsbnVsbD09PWM/dyhcIjE1NFwiKTp2b2lkIDApO2Vsc2UgaWYobnVsbD09PWN8fGIubWVtb2l6ZWRQcm9wcz09PWMpYz1iLm1lbW9pemVkUHJvcHM7ZT1jLmNoaWxkcmVuO2Q9Yi5wZW5kaW5nV29ya1ByaW9yaXR5O2Iuc3RhdGVOb2RlPW51bGw9PT1hP2ZmKGIsYi5zdGF0ZU5vZGUsZSxkKTphLmNoaWxkPT09Yi5jaGlsZD9nZihiLGIuc3RhdGVOb2RlLGUsZCk6aGYoYixiLnN0YXRlTm9kZSxlLGQpO2IubWVtb2l6ZWRQcm9wcz1jO3JldHVybiBiLnN0YXRlTm9kZTtjYXNlIEJmOnJldHVybiBudWxsO2Nhc2UgeWY6YTp7QyhiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pO2M9Yi5wZW5kaW5nV29ya1ByaW9yaXR5O2U9Yi5wZW5kaW5nUHJvcHM7aWYobmYoKSludWxsPT09XG5lJiYoZT1hJiZhLm1lbW9pemVkUHJvcHMsbnVsbD09ZT93KFwiMTU0XCIpOnZvaWQgMCk7ZWxzZSBpZihudWxsPT09ZXx8Yi5tZW1vaXplZFByb3BzPT09ZSl7Yj14KGEsYik7YnJlYWsgYX1udWxsPT09YT9iLmNoaWxkPWhmKGIsYi5jaGlsZCxlLGMpOmYoYSxiLGUpO2IubWVtb2l6ZWRQcm9wcz1lO2I9Yi5jaGlsZH1yZXR1cm4gYjtjYXNlIENmOmE6e2M9Yi5wZW5kaW5nUHJvcHM7aWYobmYoKSludWxsPT09YyYmKGM9Yi5tZW1vaXplZFByb3BzKTtlbHNlIGlmKG51bGw9PT1jfHxiLm1lbW9pemVkUHJvcHM9PT1jKXtiPXgoYSxiKTticmVhayBhfWYoYSxiLGMpO2IubWVtb2l6ZWRQcm9wcz1jO2I9Yi5jaGlsZH1yZXR1cm4gYjtkZWZhdWx0OncoXCIxNTZcIil9fSxiZWdpbkZhaWxlZFdvcms6ZnVuY3Rpb24oYSxiLGMpe3N3aXRjaChiLnRhZyl7Y2FzZSB0ZjpvZihiKTticmVhaztjYXNlIHVmOnAoYik7YnJlYWs7ZGVmYXVsdDp3KFwiMTU3XCIpfWIuZWZmZWN0VGFnfD1JZjtudWxsPT09YT9cbmIuY2hpbGQ9bnVsbDpiLmNoaWxkIT09YS5jaGlsZCYmKGIuY2hpbGQ9YS5jaGlsZCk7aWYoYi5wZW5kaW5nV29ya1ByaW9yaXR5PT09RGZ8fGIucGVuZGluZ1dvcmtQcmlvcml0eT5jKXJldHVybiBTKGEsYik7Yi5maXJzdEVmZmVjdD1udWxsO2IubGFzdEVmZmVjdD1udWxsO2coYSxiLG51bGwsYyk7Yi50YWc9PT10ZiYmKGE9Yi5zdGF0ZU5vZGUsYi5tZW1vaXplZFByb3BzPWEucHJvcHMsYi5tZW1vaXplZFN0YXRlPWEuc3RhdGUpO3JldHVybiBiLmNoaWxkfX19XG52YXIgTWY9U2UucmVjb25jaWxlQ2hpbGRGaWJlcnMsTmY9Ui5wb3BDb250ZXh0UHJvdmlkZXIsT2Y9Ui5wb3BUb3BMZXZlbENvbnRleHRPYmplY3QsUGY9RS5JbmRldGVybWluYXRlQ29tcG9uZW50LFFmPUUuRnVuY3Rpb25hbENvbXBvbmVudCxSZj1FLkNsYXNzQ29tcG9uZW50LFNmPUUuSG9zdFJvb3QsVGY9RS5Ib3N0Q29tcG9uZW50LFVmPUUuSG9zdFRleHQsVmY9RS5Ib3N0UG9ydGFsLFdmPUUuQ29yb3V0aW5lQ29tcG9uZW50LFhmPUUuQ29yb3V0aW5lSGFuZGxlclBoYXNlLFlmPUUuWWllbGRDb21wb25lbnQsWmY9RS5GcmFnbWVudCxhZz1KLlBsYWNlbWVudCxiZz1KLlJlZixjZz1KLlVwZGF0ZSxkZz1RLk9mZnNjcmVlblByaW9yaXR5O1xuZnVuY3Rpb24gZWcoYSxiLGMpe3ZhciBkPWEuY3JlYXRlSW5zdGFuY2UsZT1hLmNyZWF0ZVRleHRJbnN0YW5jZSxmPWEuYXBwZW5kSW5pdGlhbENoaWxkLGc9YS5maW5hbGl6ZUluaXRpYWxDaGlsZHJlbixoPWEucHJlcGFyZVVwZGF0ZSxrPWIuZ2V0Um9vdEhvc3RDb250YWluZXIscD1iLnBvcEhvc3RDb250ZXh0LHg9Yi5nZXRIb3N0Q29udGV4dCxTPWIucG9wSG9zdENvbnRhaW5lcixEPWMucHJlcGFyZVRvSHlkcmF0ZUhvc3RJbnN0YW5jZSx5PWMucHJlcGFyZVRvSHlkcmF0ZUhvc3RUZXh0SW5zdGFuY2UsQj1jLnBvcEh5ZHJhdGlvblN0YXRlO3JldHVybntjb21wbGV0ZVdvcms6ZnVuY3Rpb24oYSxiLGMpe3ZhciByPWIucGVuZGluZ1Byb3BzO2lmKG51bGw9PT1yKXI9Yi5tZW1vaXplZFByb3BzO2Vsc2UgaWYoYi5wZW5kaW5nV29ya1ByaW9yaXR5IT09ZGd8fGM9PT1kZyliLnBlbmRpbmdQcm9wcz1udWxsO3N3aXRjaChiLnRhZyl7Y2FzZSBRZjpyZXR1cm4gbnVsbDtjYXNlIFJmOnJldHVybiBOZihiKSxcbm51bGw7Y2FzZSBTZjpTKGIpO09mKGIpO3I9Yi5zdGF0ZU5vZGU7ci5wZW5kaW5nQ29udGV4dCYmKHIuY29udGV4dD1yLnBlbmRpbmdDb250ZXh0LHIucGVuZGluZ0NvbnRleHQ9bnVsbCk7aWYobnVsbD09PWF8fG51bGw9PT1hLmNoaWxkKUIoYiksYi5lZmZlY3RUYWcmPX5hZztyZXR1cm4gbnVsbDtjYXNlIFRmOnAoYik7Yz1rKCk7dmFyIG09Yi50eXBlO2lmKG51bGwhPT1hJiZudWxsIT1iLnN0YXRlTm9kZSl7dmFyIHQ9YS5tZW1vaXplZFByb3BzLEM9Yi5zdGF0ZU5vZGUsVj14KCk7cj1oKEMsbSx0LHIsYyxWKTtpZihiLnVwZGF0ZVF1ZXVlPXIpYi5lZmZlY3RUYWd8PWNnO2EucmVmIT09Yi5yZWYmJihiLmVmZmVjdFRhZ3w9YmcpfWVsc2V7aWYoIXIpcmV0dXJuIG51bGw9PT1iLnN0YXRlTm9kZT93KFwiMTY2XCIpOnZvaWQgMCxudWxsO2E9eCgpO2lmKEIoYikpRChiLGMsYSkmJihiLmVmZmVjdFRhZ3w9Y2cpO2Vsc2V7YT1kKG0scixjLGEsYik7YTpmb3IodD1iLmNoaWxkO251bGwhPT1cbnQ7KXtpZih0LnRhZz09PVRmfHx0LnRhZz09PVVmKWYoYSx0LnN0YXRlTm9kZSk7ZWxzZSBpZih0LnRhZyE9PVZmJiZudWxsIT09dC5jaGlsZCl7dD10LmNoaWxkO2NvbnRpbnVlfWlmKHQ9PT1iKWJyZWFrIGE7Zm9yKDtudWxsPT09dC5zaWJsaW5nOyl7aWYobnVsbD09PXRbXCJyZXR1cm5cIl18fHRbXCJyZXR1cm5cIl09PT1iKWJyZWFrIGE7dD10W1wicmV0dXJuXCJdfXQ9dC5zaWJsaW5nfWcoYSxtLHIsYykmJihiLmVmZmVjdFRhZ3w9Y2cpO2Iuc3RhdGVOb2RlPWF9bnVsbCE9PWIucmVmJiYoYi5lZmZlY3RUYWd8PWJnKX1yZXR1cm4gbnVsbDtjYXNlIFVmOmlmKGEmJm51bGwhPWIuc3RhdGVOb2RlKWEubWVtb2l6ZWRQcm9wcyE9PXImJihiLmVmZmVjdFRhZ3w9Y2cpO2Vsc2V7aWYoXCJzdHJpbmdcIiE9PXR5cGVvZiByKXJldHVybiBudWxsPT09Yi5zdGF0ZU5vZGU/dyhcIjE2NlwiKTp2b2lkIDAsbnVsbDthPWsoKTtjPXgoKTtCKGIpP3koYikmJihiLmVmZmVjdFRhZ3w9Y2cpOmIuc3RhdGVOb2RlPVxuZShyLGEsYyxiKX1yZXR1cm4gbnVsbDtjYXNlIFdmOihyPWIubWVtb2l6ZWRQcm9wcyk/dm9pZCAwOncoXCIxNjVcIik7Yi50YWc9WGY7Yz1bXTthOmZvcigobT1iLnN0YXRlTm9kZSkmJihtW1wicmV0dXJuXCJdPWIpO251bGwhPT1tOyl7aWYobS50YWc9PT1UZnx8bS50YWc9PT1VZnx8bS50YWc9PT1WZil3KFwiMTY0XCIpO2Vsc2UgaWYobS50YWc9PT1ZZiljLnB1c2gobS50eXBlKTtlbHNlIGlmKG51bGwhPT1tLmNoaWxkKXttLmNoaWxkW1wicmV0dXJuXCJdPW07bT1tLmNoaWxkO2NvbnRpbnVlfWZvcig7bnVsbD09PW0uc2libGluZzspe2lmKG51bGw9PT1tW1wicmV0dXJuXCJdfHxtW1wicmV0dXJuXCJdPT09YilicmVhayBhO209bVtcInJldHVyblwiXX1tLnNpYmxpbmdbXCJyZXR1cm5cIl09bVtcInJldHVyblwiXTttPW0uc2libGluZ31tPXIuaGFuZGxlcjtyPW0oci5wcm9wcyxjKTtiLmNoaWxkPU1mKGIsbnVsbCE9PWE/YS5jaGlsZDpudWxsLHIsYi5wZW5kaW5nV29ya1ByaW9yaXR5KTtyZXR1cm4gYi5jaGlsZDtcbmNhc2UgWGY6cmV0dXJuIGIudGFnPVdmLG51bGw7Y2FzZSBZZjpyZXR1cm4gbnVsbDtjYXNlIFpmOnJldHVybiBudWxsO2Nhc2UgVmY6cmV0dXJuIGIuZWZmZWN0VGFnfD1jZyxTKGIpLG51bGw7Y2FzZSBQZjp3KFwiMTY3XCIpO2RlZmF1bHQ6dyhcIjE1NlwiKX19fX12YXIgZmc9bnVsbCxnZz1udWxsO2Z1bmN0aW9uIGhnKGEpe3JldHVybiBmdW5jdGlvbihiKXt0cnl7cmV0dXJuIGEoYil9Y2F0Y2goYyl7fX19XG52YXIgaWc9e2luamVjdEludGVybmFsczpmdW5jdGlvbihhKXtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXylyZXR1cm4hMTt2YXIgYj1fX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX187aWYoIWIuc3VwcG9ydHNGaWJlcilyZXR1cm4hMDt0cnl7dmFyIGM9Yi5pbmplY3QoYSk7Zmc9aGcoZnVuY3Rpb24oYSl7cmV0dXJuIGIub25Db21taXRGaWJlclJvb3QoYyxhKX0pO2dnPWhnKGZ1bmN0aW9uKGEpe3JldHVybiBiLm9uQ29tbWl0RmliZXJVbm1vdW50KGMsYSl9KX1jYXRjaChkKXt9cmV0dXJuITB9LG9uQ29tbWl0Um9vdDpmdW5jdGlvbihhKXtcImZ1bmN0aW9uXCI9PT10eXBlb2YgZmcmJmZnKGEpfSxvbkNvbW1pdFVubW91bnQ6ZnVuY3Rpb24oYSl7XCJmdW5jdGlvblwiPT09dHlwZW9mIGdnJiZnZyhhKX19LGpnPUUuQ2xhc3NDb21wb25lbnQsa2c9RS5Ib3N0Um9vdCxsZz1FLkhvc3RDb21wb25lbnQsbWc9RS5Ib3N0VGV4dCxuZz1cbkUuSG9zdFBvcnRhbCxvZz1FLkNvcm91dGluZUNvbXBvbmVudCxwZz11ZC5jb21taXRDYWxsYmFja3MscWc9aWcub25Db21taXRVbm1vdW50LHJnPUouUGxhY2VtZW50LHNnPUouVXBkYXRlLHRnPUouQ2FsbGJhY2ssdWc9Si5Db250ZW50UmVzZXQ7XG5mdW5jdGlvbiB2ZyhhLGIpe2Z1bmN0aW9uIGMoYSl7dmFyIGM9YS5yZWY7aWYobnVsbCE9PWMpdHJ5e2MobnVsbCl9Y2F0Y2godCl7YihhLHQpfX1mdW5jdGlvbiBkKGEpe3JldHVybiBhLnRhZz09PWxnfHxhLnRhZz09PWtnfHxhLnRhZz09PW5nfWZ1bmN0aW9uIGUoYSl7Zm9yKHZhciBiPWE7OylpZihnKGIpLG51bGwhPT1iLmNoaWxkJiZiLnRhZyE9PW5nKWIuY2hpbGRbXCJyZXR1cm5cIl09YixiPWIuY2hpbGQ7ZWxzZXtpZihiPT09YSlicmVhaztmb3IoO251bGw9PT1iLnNpYmxpbmc7KXtpZihudWxsPT09YltcInJldHVyblwiXXx8YltcInJldHVyblwiXT09PWEpcmV0dXJuO2I9YltcInJldHVyblwiXX1iLnNpYmxpbmdbXCJyZXR1cm5cIl09YltcInJldHVyblwiXTtiPWIuc2libGluZ319ZnVuY3Rpb24gZihhKXtmb3IodmFyIGI9YSxjPSExLGQ9dm9pZCAwLGY9dm9pZCAwOzspe2lmKCFjKXtjPWJbXCJyZXR1cm5cIl07YTpmb3IoOzspe251bGw9PT1jP3coXCIxNjBcIik6dm9pZCAwO3N3aXRjaChjLnRhZyl7Y2FzZSBsZzpkPVxuYy5zdGF0ZU5vZGU7Zj0hMTticmVhayBhO2Nhc2Uga2c6ZD1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2Y9ITA7YnJlYWsgYTtjYXNlIG5nOmQ9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztmPSEwO2JyZWFrIGF9Yz1jW1wicmV0dXJuXCJdfWM9ITB9aWYoYi50YWc9PT1sZ3x8Yi50YWc9PT1tZyllKGIpLGY/QyhkLGIuc3RhdGVOb2RlKTpIKGQsYi5zdGF0ZU5vZGUpO2Vsc2UgaWYoYi50YWc9PT1uZz9kPWIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm86ZyhiKSxudWxsIT09Yi5jaGlsZCl7Yi5jaGlsZFtcInJldHVyblwiXT1iO2I9Yi5jaGlsZDtjb250aW51ZX1pZihiPT09YSlicmVhaztmb3IoO251bGw9PT1iLnNpYmxpbmc7KXtpZihudWxsPT09YltcInJldHVyblwiXXx8YltcInJldHVyblwiXT09PWEpcmV0dXJuO2I9YltcInJldHVyblwiXTtiLnRhZz09PW5nJiYoYz0hMSl9Yi5zaWJsaW5nW1wicmV0dXJuXCJdPWJbXCJyZXR1cm5cIl07Yj1iLnNpYmxpbmd9fWZ1bmN0aW9uIGcoYSl7XCJmdW5jdGlvblwiPT09XG50eXBlb2YgcWcmJnFnKGEpO3N3aXRjaChhLnRhZyl7Y2FzZSBqZzpjKGEpO3ZhciBkPWEuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudFdpbGxVbm1vdW50KXRyeXtkLnByb3BzPWEubWVtb2l6ZWRQcm9wcyxkLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSxkLmNvbXBvbmVudFdpbGxVbm1vdW50KCl9Y2F0Y2godCl7YihhLHQpfWJyZWFrO2Nhc2UgbGc6YyhhKTticmVhaztjYXNlIG9nOmUoYS5zdGF0ZU5vZGUpO2JyZWFrO2Nhc2Ugbmc6ZihhKX19dmFyIGg9YS5jb21taXRNb3VudCxrPWEuY29tbWl0VXBkYXRlLHA9YS5yZXNldFRleHRDb250ZW50LHg9YS5jb21taXRUZXh0VXBkYXRlLFM9YS5hcHBlbmRDaGlsZCxEPWEuYXBwZW5kQ2hpbGRUb0NvbnRhaW5lcix5PWEuaW5zZXJ0QmVmb3JlLEI9YS5pbnNlcnRJbkNvbnRhaW5lckJlZm9yZSxIPWEucmVtb3ZlQ2hpbGQsQz1hLnJlbW92ZUNoaWxkRnJvbUNvbnRhaW5lcixDYT1hLmdldFB1YmxpY0luc3RhbmNlO1xucmV0dXJue2NvbW1pdFBsYWNlbWVudDpmdW5jdGlvbihhKXthOntmb3IodmFyIGI9YVtcInJldHVyblwiXTtudWxsIT09Yjspe2lmKGQoYikpe3ZhciBjPWI7YnJlYWsgYX1iPWJbXCJyZXR1cm5cIl19dyhcIjE2MFwiKTtjPXZvaWQgMH12YXIgZT1iPXZvaWQgMDtzd2l0Y2goYy50YWcpe2Nhc2UgbGc6Yj1jLnN0YXRlTm9kZTtlPSExO2JyZWFrO2Nhc2Uga2c6Yj1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2U9ITA7YnJlYWs7Y2FzZSBuZzpiPWMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87ZT0hMDticmVhaztkZWZhdWx0OncoXCIxNjFcIil9Yy5lZmZlY3RUYWcmdWcmJihwKGIpLGMuZWZmZWN0VGFnJj1+dWcpO2E6Yjpmb3IoYz1hOzspe2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jW1wicmV0dXJuXCJdfHxkKGNbXCJyZXR1cm5cIl0pKXtjPW51bGw7YnJlYWsgYX1jPWNbXCJyZXR1cm5cIl19Yy5zaWJsaW5nW1wicmV0dXJuXCJdPWNbXCJyZXR1cm5cIl07Zm9yKGM9Yy5zaWJsaW5nO2MudGFnIT09XG5sZyYmYy50YWchPT1tZzspe2lmKGMuZWZmZWN0VGFnJnJnKWNvbnRpbnVlIGI7aWYobnVsbD09PWMuY2hpbGR8fGMudGFnPT09bmcpY29udGludWUgYjtlbHNlIGMuY2hpbGRbXCJyZXR1cm5cIl09YyxjPWMuY2hpbGR9aWYoIShjLmVmZmVjdFRhZyZyZykpe2M9Yy5zdGF0ZU5vZGU7YnJlYWsgYX19Zm9yKHZhciBmPWE7Oyl7aWYoZi50YWc9PT1sZ3x8Zi50YWc9PT1tZyljP2U/QihiLGYuc3RhdGVOb2RlLGMpOnkoYixmLnN0YXRlTm9kZSxjKTplP0QoYixmLnN0YXRlTm9kZSk6UyhiLGYuc3RhdGVOb2RlKTtlbHNlIGlmKGYudGFnIT09bmcmJm51bGwhPT1mLmNoaWxkKXtmLmNoaWxkW1wicmV0dXJuXCJdPWY7Zj1mLmNoaWxkO2NvbnRpbnVlfWlmKGY9PT1hKWJyZWFrO2Zvcig7bnVsbD09PWYuc2libGluZzspe2lmKG51bGw9PT1mW1wicmV0dXJuXCJdfHxmW1wicmV0dXJuXCJdPT09YSlyZXR1cm47Zj1mW1wicmV0dXJuXCJdfWYuc2libGluZ1tcInJldHVyblwiXT1mW1wicmV0dXJuXCJdO2Y9Zi5zaWJsaW5nfX0sXG5jb21taXREZWxldGlvbjpmdW5jdGlvbihhKXtmKGEpO2FbXCJyZXR1cm5cIl09bnVsbDthLmNoaWxkPW51bGw7YS5hbHRlcm5hdGUmJihhLmFsdGVybmF0ZS5jaGlsZD1udWxsLGEuYWx0ZXJuYXRlW1wicmV0dXJuXCJdPW51bGwpfSxjb21taXRXb3JrOmZ1bmN0aW9uKGEsYil7c3dpdGNoKGIudGFnKXtjYXNlIGpnOmJyZWFrO2Nhc2UgbGc6dmFyIGM9Yi5zdGF0ZU5vZGU7aWYobnVsbCE9Yyl7dmFyIGQ9Yi5tZW1vaXplZFByb3BzO2E9bnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOmQ7dmFyIGU9Yi50eXBlLGY9Yi51cGRhdGVRdWV1ZTtiLnVwZGF0ZVF1ZXVlPW51bGw7bnVsbCE9PWYmJmsoYyxmLGUsYSxkLGIpfWJyZWFrO2Nhc2UgbWc6bnVsbD09PWIuc3RhdGVOb2RlP3coXCIxNjJcIik6dm9pZCAwO2M9Yi5tZW1vaXplZFByb3BzO3goYi5zdGF0ZU5vZGUsbnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOmMsYyk7YnJlYWs7Y2FzZSBrZzpicmVhaztjYXNlIG5nOmJyZWFrO2RlZmF1bHQ6dyhcIjE2M1wiKX19LFxuY29tbWl0TGlmZUN5Y2xlczpmdW5jdGlvbihhLGIpe3N3aXRjaChiLnRhZyl7Y2FzZSBqZzp2YXIgYz1iLnN0YXRlTm9kZTtpZihiLmVmZmVjdFRhZyZzZylpZihudWxsPT09YSljLnByb3BzPWIubWVtb2l6ZWRQcm9wcyxjLnN0YXRlPWIubWVtb2l6ZWRTdGF0ZSxjLmNvbXBvbmVudERpZE1vdW50KCk7ZWxzZXt2YXIgZD1hLm1lbW9pemVkUHJvcHM7YT1hLm1lbW9pemVkU3RhdGU7Yy5wcm9wcz1iLm1lbW9pemVkUHJvcHM7Yy5zdGF0ZT1iLm1lbW9pemVkU3RhdGU7Yy5jb21wb25lbnREaWRVcGRhdGUoZCxhKX1iLmVmZmVjdFRhZyZ0ZyYmbnVsbCE9PWIudXBkYXRlUXVldWUmJnBnKGIsYi51cGRhdGVRdWV1ZSxjKTticmVhaztjYXNlIGtnOmE9Yi51cGRhdGVRdWV1ZTtudWxsIT09YSYmcGcoYixhLGIuY2hpbGQmJmIuY2hpbGQuc3RhdGVOb2RlKTticmVhaztjYXNlIGxnOmM9Yi5zdGF0ZU5vZGU7bnVsbD09PWEmJmIuZWZmZWN0VGFnJnNnJiZoKGMsYi50eXBlLGIubWVtb2l6ZWRQcm9wcyxcbmIpO2JyZWFrO2Nhc2UgbWc6YnJlYWs7Y2FzZSBuZzpicmVhaztkZWZhdWx0OncoXCIxNjNcIil9fSxjb21taXRBdHRhY2hSZWY6ZnVuY3Rpb24oYSl7dmFyIGI9YS5yZWY7aWYobnVsbCE9PWIpe3ZhciBjPWEuc3RhdGVOb2RlO3N3aXRjaChhLnRhZyl7Y2FzZSBsZzpiKENhKGMpKTticmVhaztkZWZhdWx0OmIoYyl9fX0sY29tbWl0RGV0YWNoUmVmOmZ1bmN0aW9uKGEpe2E9YS5yZWY7bnVsbCE9PWEmJmEobnVsbCl9fX12YXIgd2c9eGQuY3JlYXRlQ3Vyc29yLHhnPXhkLnBvcCx5Zz14ZC5wdXNoLHpnPXt9O1xuZnVuY3Rpb24gQWcoYSl7ZnVuY3Rpb24gYihhKXthPT09emc/dyhcIjE3NFwiKTp2b2lkIDA7cmV0dXJuIGF9dmFyIGM9YS5nZXRDaGlsZEhvc3RDb250ZXh0LGQ9YS5nZXRSb290SG9zdENvbnRleHQsZT13Zyh6ZyksZj13Zyh6ZyksZz13Zyh6Zyk7cmV0dXJue2dldEhvc3RDb250ZXh0OmZ1bmN0aW9uKCl7cmV0dXJuIGIoZS5jdXJyZW50KX0sZ2V0Um9vdEhvc3RDb250YWluZXI6ZnVuY3Rpb24oKXtyZXR1cm4gYihnLmN1cnJlbnQpfSxwb3BIb3N0Q29udGFpbmVyOmZ1bmN0aW9uKGEpe3hnKGUsYSk7eGcoZixhKTt4ZyhnLGEpfSxwb3BIb3N0Q29udGV4dDpmdW5jdGlvbihhKXtmLmN1cnJlbnQ9PT1hJiYoeGcoZSxhKSx4ZyhmLGEpKX0scHVzaEhvc3RDb250YWluZXI6ZnVuY3Rpb24oYSxiKXt5ZyhnLGIsYSk7Yj1kKGIpO3lnKGYsYSxhKTt5ZyhlLGIsYSl9LHB1c2hIb3N0Q29udGV4dDpmdW5jdGlvbihhKXt2YXIgZD1iKGcuY3VycmVudCksaD1iKGUuY3VycmVudCk7ZD1jKGgsYS50eXBlLFxuZCk7aCE9PWQmJih5ZyhmLGEsYSkseWcoZSxkLGEpKX0scmVzZXRIb3N0Q29udGFpbmVyOmZ1bmN0aW9uKCl7ZS5jdXJyZW50PXpnO2cuY3VycmVudD16Z319fXZhciBCZz1FLkhvc3RDb21wb25lbnQsQ2c9RS5Ib3N0VGV4dCxEZz1FLkhvc3RSb290LEVnPUouRGVsZXRpb24sRmc9Si5QbGFjZW1lbnQsR2c9ZGUuY3JlYXRlRmliZXJGcm9tSG9zdEluc3RhbmNlRm9yRGVsZXRpb247XG5mdW5jdGlvbiBIZyhhKXtmdW5jdGlvbiBiKGEsYil7dmFyIGM9R2coKTtjLnN0YXRlTm9kZT1iO2NbXCJyZXR1cm5cIl09YTtjLmVmZmVjdFRhZz1FZztudWxsIT09YS5sYXN0RWZmZWN0PyhhLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1jLGEubGFzdEVmZmVjdD1jKTphLmZpcnN0RWZmZWN0PWEubGFzdEVmZmVjdD1jfWZ1bmN0aW9uIGMoYSxiKXtzd2l0Y2goYS50YWcpe2Nhc2UgQmc6cmV0dXJuIGYoYixhLnR5cGUsYS5wZW5kaW5nUHJvcHMpO2Nhc2UgQ2c6cmV0dXJuIGcoYixhLnBlbmRpbmdQcm9wcyk7ZGVmYXVsdDpyZXR1cm4hMX19ZnVuY3Rpb24gZChhKXtmb3IoYT1hW1wicmV0dXJuXCJdO251bGwhPT1hJiZhLnRhZyE9PUJnJiZhLnRhZyE9PURnOylhPWFbXCJyZXR1cm5cIl07eT1hfXZhciBlPWEuc2hvdWxkU2V0VGV4dENvbnRlbnQsZj1hLmNhbkh5ZHJhdGVJbnN0YW5jZSxnPWEuY2FuSHlkcmF0ZVRleHRJbnN0YW5jZSxoPWEuZ2V0TmV4dEh5ZHJhdGFibGVTaWJsaW5nLGs9YS5nZXRGaXJzdEh5ZHJhdGFibGVDaGlsZCxcbnA9YS5oeWRyYXRlSW5zdGFuY2UseD1hLmh5ZHJhdGVUZXh0SW5zdGFuY2UsUz1hLmRpZE5vdEh5ZHJhdGVJbnN0YW5jZSxEPWEuZGlkTm90RmluZEh5ZHJhdGFibGVJbnN0YW5jZTthPWEuZGlkTm90RmluZEh5ZHJhdGFibGVUZXh0SW5zdGFuY2U7aWYoIShmJiZnJiZoJiZrJiZwJiZ4JiZTJiZEJiZhKSlyZXR1cm57ZW50ZXJIeWRyYXRpb25TdGF0ZTpmdW5jdGlvbigpe3JldHVybiExfSxyZXNldEh5ZHJhdGlvblN0YXRlOmZ1bmN0aW9uKCl7fSx0cnlUb0NsYWltTmV4dEh5ZHJhdGFibGVJbnN0YW5jZTpmdW5jdGlvbigpe30scHJlcGFyZVRvSHlkcmF0ZUhvc3RJbnN0YW5jZTpmdW5jdGlvbigpe3coXCIxNzVcIil9LHByZXBhcmVUb0h5ZHJhdGVIb3N0VGV4dEluc3RhbmNlOmZ1bmN0aW9uKCl7dyhcIjE3NlwiKX0scG9wSHlkcmF0aW9uU3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm4hMX19O3ZhciB5PW51bGwsQj1udWxsLEg9ITE7cmV0dXJue2VudGVySHlkcmF0aW9uU3RhdGU6ZnVuY3Rpb24oYSl7Qj1cbmsoYS5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyk7eT1hO3JldHVybiBIPSEwfSxyZXNldEh5ZHJhdGlvblN0YXRlOmZ1bmN0aW9uKCl7Qj15PW51bGw7SD0hMX0sdHJ5VG9DbGFpbU5leHRIeWRyYXRhYmxlSW5zdGFuY2U6ZnVuY3Rpb24oYSl7aWYoSCl7dmFyIGQ9QjtpZihkKXtpZighYyhhLGQpKXtkPWgoZCk7aWYoIWR8fCFjKGEsZCkpe2EuZWZmZWN0VGFnfD1GZztIPSExO3k9YTtyZXR1cm59Yih5LEIpfWEuc3RhdGVOb2RlPWQ7eT1hO0I9ayhkKX1lbHNlIGEuZWZmZWN0VGFnfD1GZyxIPSExLHk9YX19LHByZXBhcmVUb0h5ZHJhdGVIb3N0SW5zdGFuY2U6ZnVuY3Rpb24oYSxiLGMpe2I9cChhLnN0YXRlTm9kZSxhLnR5cGUsYS5tZW1vaXplZFByb3BzLGIsYyxhKTthLnVwZGF0ZVF1ZXVlPWI7cmV0dXJuIG51bGwhPT1iPyEwOiExfSxwcmVwYXJlVG9IeWRyYXRlSG9zdFRleHRJbnN0YW5jZTpmdW5jdGlvbihhKXtyZXR1cm4geChhLnN0YXRlTm9kZSxhLm1lbW9pemVkUHJvcHMsYSl9LFxucG9wSHlkcmF0aW9uU3RhdGU6ZnVuY3Rpb24oYSl7aWYoYSE9PXkpcmV0dXJuITE7aWYoIUgpcmV0dXJuIGQoYSksSD0hMCwhMTt2YXIgYz1hLnR5cGU7aWYoYS50YWchPT1CZ3x8XCJoZWFkXCIhPT1jJiZcImJvZHlcIiE9PWMmJiFlKGMsYS5tZW1vaXplZFByb3BzKSlmb3IoYz1CO2M7KWIoYSxjKSxjPWgoYyk7ZChhKTtCPXk/aChhLnN0YXRlTm9kZSk6bnVsbDtyZXR1cm4hMH19fVxudmFyIElnPVIucG9wQ29udGV4dFByb3ZpZGVyLEpnPXhkLnJlc2V0LEtnPVFhLlJlYWN0Q3VycmVudE93bmVyLExnPWRlLmNyZWF0ZVdvcmtJblByb2dyZXNzLE1nPWRlLmxhcmdlclByaW9yaXR5LE5nPWlnLm9uQ29tbWl0Um9vdCxUPVEuTm9Xb3JrLE9nPVEuU3luY2hyb25vdXNQcmlvcml0eSxVPVEuVGFza1ByaW9yaXR5LFBnPVEuSGlnaFByaW9yaXR5LFFnPVEuTG93UHJpb3JpdHksUmc9US5PZmZzY3JlZW5Qcmlvcml0eSxTZz1QZC5Bc3luY1VwZGF0ZXMsVGc9Si5QZXJmb3JtZWRXb3JrLFVnPUouUGxhY2VtZW50LFZnPUouVXBkYXRlLFdnPUouUGxhY2VtZW50QW5kVXBkYXRlLFhnPUouRGVsZXRpb24sWWc9Si5Db250ZW50UmVzZXQsWmc9Si5DYWxsYmFjaywkZz1KLkVycixhaD1KLlJlZixiaD1FLkhvc3RSb290LGNoPUUuSG9zdENvbXBvbmVudCxkaD1FLkhvc3RQb3J0YWwsZWg9RS5DbGFzc0NvbXBvbmVudCxmaD11ZC5nZXRVcGRhdGVQcmlvcml0eSxnaD1SLnJlc2V0Q29udGV4dDtcbmZ1bmN0aW9uIGhoKGEpe2Z1bmN0aW9uIGIoKXtmb3IoO251bGwhPT1tYSYmbWEuY3VycmVudC5wZW5kaW5nV29ya1ByaW9yaXR5PT09VDspe21hLmlzU2NoZWR1bGVkPSExO3ZhciBhPW1hLm5leHRTY2hlZHVsZWRSb290O21hLm5leHRTY2hlZHVsZWRSb290PW51bGw7aWYobWE9PT16YilyZXR1cm4gemI9bWE9bnVsbCx6PVQsbnVsbDttYT1hfWE9bWE7Zm9yKHZhciBiPW51bGwsYz1UO251bGwhPT1hOylhLmN1cnJlbnQucGVuZGluZ1dvcmtQcmlvcml0eSE9PVQmJihjPT09VHx8Yz5hLmN1cnJlbnQucGVuZGluZ1dvcmtQcmlvcml0eSkmJihjPWEuY3VycmVudC5wZW5kaW5nV29ya1ByaW9yaXR5LGI9YSksYT1hLm5leHRTY2hlZHVsZWRSb290O251bGwhPT1iPyh6PWMsSmcoKSxnaCgpLHQoKSxJPUxnKGIuY3VycmVudCxjKSxiIT09bmMmJihvYz0wLG5jPWIpKTooej1ULG5jPUk9bnVsbCl9ZnVuY3Rpb24gYyhjKXtIZD0hMDtuYT1udWxsO3ZhciBkPWMuc3RhdGVOb2RlO2QuY3VycmVudD09PVxuYz93KFwiMTc3XCIpOnZvaWQgMDt6IT09T2cmJnohPT1VfHxvYysrO0tnLmN1cnJlbnQ9bnVsbDtpZihjLmVmZmVjdFRhZz5UZylpZihudWxsIT09Yy5sYXN0RWZmZWN0KXtjLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1jO3ZhciBlPWMuZmlyc3RFZmZlY3R9ZWxzZSBlPWM7ZWxzZSBlPWMuZmlyc3RFZmZlY3Q7VWkoKTtmb3IodT1lO251bGwhPT11Oyl7dmFyIGY9ITEsZz12b2lkIDA7dHJ5e2Zvcig7bnVsbCE9PXU7KXt2YXIgaD11LmVmZmVjdFRhZztoJllnJiZhLnJlc2V0VGV4dENvbnRlbnQodS5zdGF0ZU5vZGUpO2lmKGgmYWgpe3ZhciBrPXUuYWx0ZXJuYXRlO251bGwhPT1rJiZQaChrKX1zd2l0Y2goaCZ+KFpnfCRnfFlnfGFofFRnKSl7Y2FzZSBVZzpxKHUpO3UuZWZmZWN0VGFnJj1+VWc7YnJlYWs7Y2FzZSBXZzpxKHUpO3UuZWZmZWN0VGFnJj1+VWc7dmYodS5hbHRlcm5hdGUsdSk7YnJlYWs7Y2FzZSBWZzp2Zih1LmFsdGVybmF0ZSx1KTticmVhaztjYXNlIFhnOklkPSEwLE1oKHUpLFxuSWQ9ITF9dT11Lm5leHRFZmZlY3R9fWNhdGNoKEpkKXtmPSEwLGc9SmR9ZiYmKG51bGw9PT11P3coXCIxNzhcIik6dm9pZCAwLHgodSxnKSxudWxsIT09dSYmKHU9dS5uZXh0RWZmZWN0KSl9VmkoKTtkLmN1cnJlbnQ9Yztmb3IodT1lO251bGwhPT11Oyl7ZD0hMTtlPXZvaWQgMDt0cnl7Zm9yKDtudWxsIT09dTspe3ZhciBHZD11LmVmZmVjdFRhZztHZCYoVmd8WmcpJiZOaCh1LmFsdGVybmF0ZSx1KTtHZCZhaCYmT2godSk7aWYoR2QmJGcpc3dpdGNoKGY9dSxnPXZvaWQgMCxudWxsIT09UCYmKGc9UC5nZXQoZiksUFtcImRlbGV0ZVwiXShmKSxudWxsPT1nJiZudWxsIT09Zi5hbHRlcm5hdGUmJihmPWYuYWx0ZXJuYXRlLGc9UC5nZXQoZiksUFtcImRlbGV0ZVwiXShmKSkpLG51bGw9PWc/dyhcIjE4NFwiKTp2b2lkIDAsZi50YWcpe2Nhc2UgZWg6Zi5zdGF0ZU5vZGUuY29tcG9uZW50RGlkQ2F0Y2goZy5lcnJvcix7Y29tcG9uZW50U3RhY2s6Zy5jb21wb25lbnRTdGFja30pO2JyZWFrO2Nhc2UgYmg6bnVsbD09PVxuSmEmJihKYT1nLmVycm9yKTticmVhaztkZWZhdWx0OncoXCIxNTdcIil9dmFyIG09dS5uZXh0RWZmZWN0O3UubmV4dEVmZmVjdD1udWxsO3U9bX19Y2F0Y2goSmQpe2Q9ITAsZT1KZH1kJiYobnVsbD09PXU/dyhcIjE3OFwiKTp2b2lkIDAseCh1LGUpLG51bGwhPT11JiYodT11Lm5leHRFZmZlY3QpKX1IZD0hMTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgTmcmJk5nKGMuc3RhdGVOb2RlKTt2YSYmKHZhLmZvckVhY2goSCksdmE9bnVsbCk7YigpfWZ1bmN0aW9uIGQoYSl7Zm9yKDs7KXt2YXIgYj1MaChhLmFsdGVybmF0ZSxhLHopLGM9YVtcInJldHVyblwiXSxkPWEuc2libGluZzt2YXIgZT1hO2lmKCEoZS5wZW5kaW5nV29ya1ByaW9yaXR5IT09VCYmZS5wZW5kaW5nV29ya1ByaW9yaXR5PnopKXtmb3IodmFyIGY9ZmgoZSksZz1lLmNoaWxkO251bGwhPT1nOylmPU1nKGYsZy5wZW5kaW5nV29ya1ByaW9yaXR5KSxnPWcuc2libGluZztlLnBlbmRpbmdXb3JrUHJpb3JpdHk9Zn1pZihudWxsIT09YilyZXR1cm4gYjtcbm51bGwhPT1jJiYobnVsbD09PWMuZmlyc3RFZmZlY3QmJihjLmZpcnN0RWZmZWN0PWEuZmlyc3RFZmZlY3QpLG51bGwhPT1hLmxhc3RFZmZlY3QmJihudWxsIT09Yy5sYXN0RWZmZWN0JiYoYy5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YS5maXJzdEVmZmVjdCksYy5sYXN0RWZmZWN0PWEubGFzdEVmZmVjdCksYS5lZmZlY3RUYWc+VGcmJihudWxsIT09Yy5sYXN0RWZmZWN0P2MubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWE6Yy5maXJzdEVmZmVjdD1hLGMubGFzdEVmZmVjdD1hKSk7aWYobnVsbCE9PWQpcmV0dXJuIGQ7aWYobnVsbCE9PWMpYT1jO2Vsc2V7bmE9YTticmVha319cmV0dXJuIG51bGx9ZnVuY3Rpb24gZShhKXt2YXIgYj1WKGEuYWx0ZXJuYXRlLGEseik7bnVsbD09PWImJihiPWQoYSkpO0tnLmN1cnJlbnQ9bnVsbDtyZXR1cm4gYn1mdW5jdGlvbiBmKGEpe3ZhciBiPWxkKGEuYWx0ZXJuYXRlLGEseik7bnVsbD09PWImJihiPWQoYSkpO0tnLmN1cnJlbnQ9bnVsbDtyZXR1cm4gYn1cbmZ1bmN0aW9uIGcoYSl7cChSZyxhKX1mdW5jdGlvbiBoKCl7aWYobnVsbCE9PVAmJjA8UC5zaXplJiZ6PT09VSlmb3IoO251bGwhPT1JOyl7dmFyIGE9STtJPW51bGwhPT1QJiYoUC5oYXMoYSl8fG51bGwhPT1hLmFsdGVybmF0ZSYmUC5oYXMoYS5hbHRlcm5hdGUpKT9mKEkpOmUoSSk7aWYobnVsbD09PUkmJihudWxsPT09bmE/dyhcIjE3OVwiKTp2b2lkIDAsTz1VLGMobmEpLE89eixudWxsPT09UHx8MD09PVAuc2l6ZXx8eiE9PVUpKWJyZWFrfX1mdW5jdGlvbiBrKGEsZCl7bnVsbCE9PW5hPyhPPVUsYyhuYSksaCgpKTpudWxsPT09SSYmYigpO2lmKCEoej09PVR8fHo+YSkpe089ejthOmRve2lmKHo8PVUpZm9yKDtudWxsIT09SSYmIShJPWUoSSksbnVsbD09PUkmJihudWxsPT09bmE/dyhcIjE3OVwiKTp2b2lkIDAsTz1VLGMobmEpLE89eixoKCksej09PVR8fHo+YXx8ej5VKSk7KTtlbHNlIGlmKG51bGwhPT1kKWZvcig7bnVsbCE9PUkmJiFBYjspaWYoMTxkLnRpbWVSZW1haW5pbmcoKSl7aWYoST1cbmUoSSksbnVsbD09PUkpaWYobnVsbD09PW5hP3coXCIxNzlcIik6dm9pZCAwLDE8ZC50aW1lUmVtYWluaW5nKCkpe2lmKE89VSxjKG5hKSxPPXosaCgpLHo9PT1UfHx6PmF8fHo8UGcpYnJlYWt9ZWxzZSBBYj0hMH1lbHNlIEFiPSEwO3N3aXRjaCh6KXtjYXNlIE9nOmNhc2UgVTppZih6PD1hKWNvbnRpbnVlIGE7YnJlYWsgYTtjYXNlIFBnOmNhc2UgUWc6Y2FzZSBSZzppZihudWxsPT09ZClicmVhayBhO2lmKCFBYiYmejw9YSljb250aW51ZSBhO2JyZWFrIGE7Y2FzZSBUOmJyZWFrIGE7ZGVmYXVsdDp3KFwiMTgxXCIpfX13aGlsZSgxKX19ZnVuY3Rpb24gcChhLGIpe0RhP3coXCIxODJcIik6dm9pZCAwO0RhPSEwO3ZhciBjPU8sZD0hMSxlPW51bGw7dHJ5e2soYSxiKX1jYXRjaChLZCl7ZD0hMCxlPUtkfWZvcig7ZDspe2lmKFlhKXtKYT1lO2JyZWFrfXZhciBoPUk7aWYobnVsbD09PWgpWWE9ITA7ZWxzZXt2YXIgcD14KGgsZSk7bnVsbD09PXA/dyhcIjE4M1wiKTp2b2lkIDA7aWYoIVlhKXt0cnl7ZD1cbnA7ZT1hO3A9Yjtmb3IodmFyIHE9ZDtudWxsIT09aDspe3N3aXRjaChoLnRhZyl7Y2FzZSBlaDpJZyhoKTticmVhaztjYXNlIGNoOm0oaCk7YnJlYWs7Y2FzZSBiaDpyKGgpO2JyZWFrO2Nhc2UgZGg6cihoKX1pZihoPT09cXx8aC5hbHRlcm5hdGU9PT1xKWJyZWFrO2g9aFtcInJldHVyblwiXX1JPWYoZCk7ayhlLHApfWNhdGNoKEtkKXtkPSEwO2U9S2Q7Y29udGludWV9YnJlYWt9fX1PPWM7bnVsbCE9PWImJihCYj0hMSk7ej5VJiYhQmImJigkZihnKSxCYj0hMCk7YT1KYTtZYT1BYj1EYT0hMTtuYz1LYT1QPUphPW51bGw7b2M9MDtpZihudWxsIT09YSl0aHJvdyBhO31mdW5jdGlvbiB4KGEsYil7dmFyIGM9S2cuY3VycmVudD1udWxsLGQ9ITEsZT0hMSxmPW51bGw7aWYoYS50YWc9PT1iaCljPWEsUyhhKSYmKFlhPSEwKTtlbHNlIGZvcih2YXIgZz1hW1wicmV0dXJuXCJdO251bGwhPT1nJiZudWxsPT09Yzspe2cudGFnPT09ZWg/XCJmdW5jdGlvblwiPT09dHlwZW9mIGcuc3RhdGVOb2RlLmNvbXBvbmVudERpZENhdGNoJiZcbihkPSEwLGY9UmEoZyksYz1nLGU9ITApOmcudGFnPT09YmgmJihjPWcpO2lmKFMoZykpe2lmKElkfHxudWxsIT09dmEmJih2YS5oYXMoZyl8fG51bGwhPT1nLmFsdGVybmF0ZSYmdmEuaGFzKGcuYWx0ZXJuYXRlKSkpcmV0dXJuIG51bGw7Yz1udWxsO2U9ITF9Zz1nW1wicmV0dXJuXCJdfWlmKG51bGwhPT1jKXtudWxsPT09S2EmJihLYT1uZXcgU2V0KTtLYS5hZGQoYyk7dmFyIGg9XCJcIjtnPWE7ZG97YTpzd2l0Y2goZy50YWcpe2Nhc2UgZmU6Y2FzZSBnZTpjYXNlIGhlOmNhc2UgaWU6dmFyIGs9Zy5fZGVidWdPd25lcixtPWcuX2RlYnVnU291cmNlO3ZhciBwPVJhKGcpO3ZhciBxPW51bGw7ayYmKHE9UmEoaykpO2s9bTtwPVwiXFxuICAgIGluIFwiKyhwfHxcIlVua25vd25cIikrKGs/XCIgKGF0IFwiK2suZmlsZU5hbWUucmVwbGFjZSgvXi4qW1xcXFxcXC9dLyxcIlwiKStcIjpcIitrLmxpbmVOdW1iZXIrXCIpXCI6cT9cIiAoY3JlYXRlZCBieSBcIitxK1wiKVwiOlwiXCIpO2JyZWFrIGE7ZGVmYXVsdDpwPVwiXCJ9aCs9cDtnPWdbXCJyZXR1cm5cIl19d2hpbGUoZyk7XG5nPWg7YT1SYShhKTtudWxsPT09UCYmKFA9bmV3IE1hcCk7Yj17Y29tcG9uZW50TmFtZTphLGNvbXBvbmVudFN0YWNrOmcsZXJyb3I6YixlcnJvckJvdW5kYXJ5OmQ/Yy5zdGF0ZU5vZGU6bnVsbCxlcnJvckJvdW5kYXJ5Rm91bmQ6ZCxlcnJvckJvdW5kYXJ5TmFtZTpmLHdpbGxSZXRyeTplfTtQLnNldChjLGIpO3RyeXtjb25zb2xlLmVycm9yKGIuZXJyb3IpfWNhdGNoKFdpKXtjb25zb2xlLmVycm9yKFdpKX1IZD8obnVsbD09PXZhJiYodmE9bmV3IFNldCksdmEuYWRkKGMpKTpIKGMpO3JldHVybiBjfW51bGw9PT1KYSYmKEphPWIpO3JldHVybiBudWxsfWZ1bmN0aW9uIFMoYSl7cmV0dXJuIG51bGwhPT1LYSYmKEthLmhhcyhhKXx8bnVsbCE9PWEuYWx0ZXJuYXRlJiZLYS5oYXMoYS5hbHRlcm5hdGUpKX1mdW5jdGlvbiBEKGEsYil7cmV0dXJuIHkoYSxiLCExKX1mdW5jdGlvbiB5KGEsYil7b2M+WGkmJihZYT0hMCx3KFwiMTg1XCIpKTshRGEmJmI8PXomJihJPW51bGwpO2Zvcih2YXIgYz1cbiEwO251bGwhPT1hJiZjOyl7Yz0hMTtpZihhLnBlbmRpbmdXb3JrUHJpb3JpdHk9PT1UfHxhLnBlbmRpbmdXb3JrUHJpb3JpdHk+YiljPSEwLGEucGVuZGluZ1dvcmtQcmlvcml0eT1iO251bGwhPT1hLmFsdGVybmF0ZSYmKGEuYWx0ZXJuYXRlLnBlbmRpbmdXb3JrUHJpb3JpdHk9PT1UfHxhLmFsdGVybmF0ZS5wZW5kaW5nV29ya1ByaW9yaXR5PmIpJiYoYz0hMCxhLmFsdGVybmF0ZS5wZW5kaW5nV29ya1ByaW9yaXR5PWIpO2lmKG51bGw9PT1hW1wicmV0dXJuXCJdKWlmKGEudGFnPT09Ymgpe3ZhciBkPWEuc3RhdGVOb2RlO2I9PT1UfHxkLmlzU2NoZWR1bGVkfHwoZC5pc1NjaGVkdWxlZD0hMCx6Yj96Yi5uZXh0U2NoZWR1bGVkUm9vdD1kOm1hPWQsemI9ZCk7aWYoIURhKXN3aXRjaChiKXtjYXNlIE9nOnBjP3AoT2csbnVsbCk6cChVLG51bGwpO2JyZWFrO2Nhc2UgVTpXP3ZvaWQgMDp3KFwiMTg2XCIpO2JyZWFrO2RlZmF1bHQ6QmJ8fCgkZihnKSxCYj0hMCl9fWVsc2UgYnJlYWs7YT1hW1wicmV0dXJuXCJdfX1cbmZ1bmN0aW9uIEIoYSxiKXt2YXIgYz1PO2M9PT1UJiYoYz0hWWl8fGEuaW50ZXJuYWxDb250ZXh0VGFnJlNnfHxiP1FnOk9nKTtyZXR1cm4gYz09PU9nJiYoRGF8fFcpP1U6Y31mdW5jdGlvbiBIKGEpe3koYSxVLCEwKX12YXIgQz1BZyhhKSxDYT1IZyhhKSxyPUMucG9wSG9zdENvbnRhaW5lcixtPUMucG9wSG9zdENvbnRleHQsdD1DLnJlc2V0SG9zdENvbnRhaW5lcix2PUxmKGEsQyxDYSxELEIpLFY9di5iZWdpbldvcmssbGQ9di5iZWdpbkZhaWxlZFdvcmssTGg9ZWcoYSxDLENhKS5jb21wbGV0ZVdvcms7Qz12ZyhhLHgpO3ZhciBxPUMuY29tbWl0UGxhY2VtZW50LE1oPUMuY29tbWl0RGVsZXRpb24sdmY9Qy5jb21taXRXb3JrLE5oPUMuY29tbWl0TGlmZUN5Y2xlcyxPaD1DLmNvbW1pdEF0dGFjaFJlZixQaD1DLmNvbW1pdERldGFjaFJlZiwkZj1hLnNjaGVkdWxlRGVmZXJyZWRDYWxsYmFjayxZaT1hLnVzZVN5bmNTY2hlZHVsaW5nLFVpPWEucHJlcGFyZUZvckNvbW1pdCxWaT1hLnJlc2V0QWZ0ZXJDb21taXQsXG5PPVQsRGE9ITEsQWI9ITEsVz0hMSxwYz0hMSxJPW51bGwsej1ULHU9bnVsbCxuYT1udWxsLG1hPW51bGwsemI9bnVsbCxCYj0hMSxQPW51bGwsS2E9bnVsbCx2YT1udWxsLEphPW51bGwsWWE9ITEsSGQ9ITEsSWQ9ITEsWGk9MUUzLG9jPTAsbmM9bnVsbDtyZXR1cm57c2NoZWR1bGVVcGRhdGU6RCxnZXRQcmlvcml0eUNvbnRleHQ6QixiYXRjaGVkVXBkYXRlczpmdW5jdGlvbihhLGIpe3ZhciBjPVc7Vz0hMDt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtXPWMsRGF8fFd8fHAoVSxudWxsKX19LHVuYmF0Y2hlZFVwZGF0ZXM6ZnVuY3Rpb24oYSl7dmFyIGI9cGMsYz1XO3BjPVc7Vz0hMTt0cnl7cmV0dXJuIGEoKX1maW5hbGx5e1c9YyxwYz1ifX0sZmx1c2hTeW5jOmZ1bmN0aW9uKGEpe3ZhciBiPVcsYz1PO1c9ITA7Tz1PZzt0cnl7cmV0dXJuIGEoKX1maW5hbGx5e1c9YixPPWMsRGE/dyhcIjE4N1wiKTp2b2lkIDAscChVLG51bGwpfX0sZGVmZXJyZWRVcGRhdGVzOmZ1bmN0aW9uKGEpe3ZhciBiPVxuTztPPVFnO3RyeXtyZXR1cm4gYSgpfWZpbmFsbHl7Tz1ifX19fWZ1bmN0aW9uIGloKCl7dyhcIjE5NlwiKX1mdW5jdGlvbiBqaChhKXtpZighYSlyZXR1cm4gZGE7YT1QYS5nZXQoYSk7cmV0dXJuXCJudW1iZXJcIj09PXR5cGVvZiBhLnRhZz9paChhKTphLl9wcm9jZXNzQ2hpbGRDb250ZXh0KGEuX2NvbnRleHQpfWpoLl9pbmplY3RGaWJlcj1mdW5jdGlvbihhKXtpaD1hfTt2YXIga2g9dWQuYWRkVG9wTGV2ZWxVcGRhdGUsbGg9Ui5maW5kQ3VycmVudFVubWFza2VkQ29udGV4dCxtaD1SLmlzQ29udGV4dFByb3ZpZGVyLG5oPVIucHJvY2Vzc0NoaWxkQ29udGV4dCxvaD1FLkhvc3RDb21wb25lbnQscGg9YmIuZmluZEN1cnJlbnRIb3N0RmliZXIscWg9YmIuZmluZEN1cnJlbnRIb3N0RmliZXJXaXRoTm9Qb3J0YWxzO2poLl9pbmplY3RGaWJlcihmdW5jdGlvbihhKXt2YXIgYj1saChhKTtyZXR1cm4gbWgoYSk/bmgoYSxiLCExKTpifSk7dmFyIHJoPUYuVEVYVF9OT0RFO1xuZnVuY3Rpb24gc2goYSl7Zm9yKDthJiZhLmZpcnN0Q2hpbGQ7KWE9YS5maXJzdENoaWxkO3JldHVybiBhfWZ1bmN0aW9uIHRoKGEsYil7dmFyIGM9c2goYSk7YT0wO2Zvcih2YXIgZDtjOyl7aWYoYy5ub2RlVHlwZT09PXJoKXtkPWErYy50ZXh0Q29udGVudC5sZW5ndGg7aWYoYTw9YiYmZD49YilyZXR1cm57bm9kZTpjLG9mZnNldDpiLWF9O2E9ZH1hOntmb3IoO2M7KXtpZihjLm5leHRTaWJsaW5nKXtjPWMubmV4dFNpYmxpbmc7YnJlYWsgYX1jPWMucGFyZW50Tm9kZX1jPXZvaWQgMH1jPXNoKGMpfX12YXIgdWg9bnVsbDtmdW5jdGlvbiB2aCgpeyF1aCYmbC5jYW5Vc2VET00mJih1aD1cInRleHRDb250ZW50XCJpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ/XCJ0ZXh0Q29udGVudFwiOlwiaW5uZXJUZXh0XCIpO3JldHVybiB1aH1cbnZhciB3aD17Z2V0T2Zmc2V0czpmdW5jdGlvbihhKXt2YXIgYj13aW5kb3cuZ2V0U2VsZWN0aW9uJiZ3aW5kb3cuZ2V0U2VsZWN0aW9uKCk7aWYoIWJ8fDA9PT1iLnJhbmdlQ291bnQpcmV0dXJuIG51bGw7dmFyIGM9Yi5hbmNob3JOb2RlLGQ9Yi5hbmNob3JPZmZzZXQsZT1iLmZvY3VzTm9kZSxmPWIuZm9jdXNPZmZzZXQsZz1iLmdldFJhbmdlQXQoMCk7dHJ5e2cuc3RhcnRDb250YWluZXIubm9kZVR5cGUsZy5lbmRDb250YWluZXIubm9kZVR5cGV9Y2F0Y2goayl7cmV0dXJuIG51bGx9Yj1iLmFuY2hvck5vZGU9PT1iLmZvY3VzTm9kZSYmYi5hbmNob3JPZmZzZXQ9PT1iLmZvY3VzT2Zmc2V0PzA6Zy50b1N0cmluZygpLmxlbmd0aDt2YXIgaD1nLmNsb25lUmFuZ2UoKTtoLnNlbGVjdE5vZGVDb250ZW50cyhhKTtoLnNldEVuZChnLnN0YXJ0Q29udGFpbmVyLGcuc3RhcnRPZmZzZXQpO2E9aC5zdGFydENvbnRhaW5lcj09PWguZW5kQ29udGFpbmVyJiZoLnN0YXJ0T2Zmc2V0PT09aC5lbmRPZmZzZXQ/XG4wOmgudG9TdHJpbmcoKS5sZW5ndGg7Zz1hK2I7Yj1kb2N1bWVudC5jcmVhdGVSYW5nZSgpO2Iuc2V0U3RhcnQoYyxkKTtiLnNldEVuZChlLGYpO2M9Yi5jb2xsYXBzZWQ7cmV0dXJue3N0YXJ0OmM/ZzphLGVuZDpjP2E6Z319LHNldE9mZnNldHM6ZnVuY3Rpb24oYSxiKXtpZih3aW5kb3cuZ2V0U2VsZWN0aW9uKXt2YXIgYz13aW5kb3cuZ2V0U2VsZWN0aW9uKCksZD1hW3ZoKCldLmxlbmd0aCxlPU1hdGgubWluKGIuc3RhcnQsZCk7Yj12b2lkIDA9PT1iLmVuZD9lOk1hdGgubWluKGIuZW5kLGQpOyFjLmV4dGVuZCYmZT5iJiYoZD1iLGI9ZSxlPWQpO2Q9dGgoYSxlKTthPXRoKGEsYik7aWYoZCYmYSl7dmFyIGY9ZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTtmLnNldFN0YXJ0KGQubm9kZSxkLm9mZnNldCk7Yy5yZW1vdmVBbGxSYW5nZXMoKTtlPmI/KGMuYWRkUmFuZ2UoZiksYy5leHRlbmQoYS5ub2RlLGEub2Zmc2V0KSk6KGYuc2V0RW5kKGEubm9kZSxhLm9mZnNldCksYy5hZGRSYW5nZShmKSl9fX19LFxueGg9Ri5FTEVNRU5UX05PREUseWg9e2hhc1NlbGVjdGlvbkNhcGFiaWxpdGllczpmdW5jdGlvbihhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuIGImJihcImlucHV0XCI9PT1iJiZcInRleHRcIj09PWEudHlwZXx8XCJ0ZXh0YXJlYVwiPT09Ynx8XCJ0cnVlXCI9PT1hLmNvbnRlbnRFZGl0YWJsZSl9LGdldFNlbGVjdGlvbkluZm9ybWF0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9aWEoKTtyZXR1cm57Zm9jdXNlZEVsZW06YSxzZWxlY3Rpb25SYW5nZTp5aC5oYXNTZWxlY3Rpb25DYXBhYmlsaXRpZXMoYSk/eWguZ2V0U2VsZWN0aW9uKGEpOm51bGx9fSxyZXN0b3JlU2VsZWN0aW9uOmZ1bmN0aW9uKGEpe3ZhciBiPWlhKCksYz1hLmZvY3VzZWRFbGVtO2E9YS5zZWxlY3Rpb25SYW5nZTtpZihiIT09YyYmZmEoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LGMpKXt5aC5oYXNTZWxlY3Rpb25DYXBhYmlsaXRpZXMoYykmJnloLnNldFNlbGVjdGlvbihjLGEpO2I9XG5bXTtmb3IoYT1jO2E9YS5wYXJlbnROb2RlOylhLm5vZGVUeXBlPT09eGgmJmIucHVzaCh7ZWxlbWVudDphLGxlZnQ6YS5zY3JvbGxMZWZ0LHRvcDphLnNjcm9sbFRvcH0pO2hhKGMpO2ZvcihjPTA7YzxiLmxlbmd0aDtjKyspYT1iW2NdLGEuZWxlbWVudC5zY3JvbGxMZWZ0PWEubGVmdCxhLmVsZW1lbnQuc2Nyb2xsVG9wPWEudG9wfX0sZ2V0U2VsZWN0aW9uOmZ1bmN0aW9uKGEpe3JldHVybihcInNlbGVjdGlvblN0YXJ0XCJpbiBhP3tzdGFydDphLnNlbGVjdGlvblN0YXJ0LGVuZDphLnNlbGVjdGlvbkVuZH06d2guZ2V0T2Zmc2V0cyhhKSl8fHtzdGFydDowLGVuZDowfX0sc2V0U2VsZWN0aW9uOmZ1bmN0aW9uKGEsYil7dmFyIGM9Yi5zdGFydCxkPWIuZW5kO3ZvaWQgMD09PWQmJihkPWMpO1wic2VsZWN0aW9uU3RhcnRcImluIGE/KGEuc2VsZWN0aW9uU3RhcnQ9YyxhLnNlbGVjdGlvbkVuZD1NYXRoLm1pbihkLGEudmFsdWUubGVuZ3RoKSk6d2guc2V0T2Zmc2V0cyhhLGIpfX0semg9eWgsXG5BaD1GLkVMRU1FTlRfTk9ERTtmdW5jdGlvbiBCaCgpe3coXCIyMTFcIil9ZnVuY3Rpb24gQ2goKXt3KFwiMjEyXCIpfWZ1bmN0aW9uIERoKGEpe2lmKG51bGw9PWEpcmV0dXJuIG51bGw7aWYoYS5ub2RlVHlwZT09PUFoKXJldHVybiBhO3ZhciBiPVBhLmdldChhKTtpZihiKXJldHVyblwibnVtYmVyXCI9PT10eXBlb2YgYi50YWc/QmgoYik6Q2goYik7XCJmdW5jdGlvblwiPT09dHlwZW9mIGEucmVuZGVyP3coXCIxODhcIik6dyhcIjIxM1wiLE9iamVjdC5rZXlzKGEpKX1EaC5faW5qZWN0RmliZXI9ZnVuY3Rpb24oYSl7Qmg9YX07RGguX2luamVjdFN0YWNrPWZ1bmN0aW9uKGEpe0NoPWF9O3ZhciBFaD1FLkhvc3RDb21wb25lbnQ7ZnVuY3Rpb24gRmgoYSl7aWYodm9pZCAwIT09YS5faG9zdFBhcmVudClyZXR1cm4gYS5faG9zdFBhcmVudDtpZihcIm51bWJlclwiPT09dHlwZW9mIGEudGFnKXtkbyBhPWFbXCJyZXR1cm5cIl07d2hpbGUoYSYmYS50YWchPT1FaCk7aWYoYSlyZXR1cm4gYX1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIEdoKGEsYil7Zm9yKHZhciBjPTAsZD1hO2Q7ZD1GaChkKSljKys7ZD0wO2Zvcih2YXIgZT1iO2U7ZT1GaChlKSlkKys7Zm9yKDswPGMtZDspYT1GaChhKSxjLS07Zm9yKDswPGQtYzspYj1GaChiKSxkLS07Zm9yKDtjLS07KXtpZihhPT09Ynx8YT09PWIuYWx0ZXJuYXRlKXJldHVybiBhO2E9RmgoYSk7Yj1GaChiKX1yZXR1cm4gbnVsbH1cbnZhciBIaD17aXNBbmNlc3RvcjpmdW5jdGlvbihhLGIpe2Zvcig7Yjspe2lmKGE9PT1ifHxhPT09Yi5hbHRlcm5hdGUpcmV0dXJuITA7Yj1GaChiKX1yZXR1cm4hMX0sZ2V0TG93ZXN0Q29tbW9uQW5jZXN0b3I6R2gsZ2V0UGFyZW50SW5zdGFuY2U6ZnVuY3Rpb24oYSl7cmV0dXJuIEZoKGEpfSx0cmF2ZXJzZVR3b1BoYXNlOmZ1bmN0aW9uKGEsYixjKXtmb3IodmFyIGQ9W107YTspZC5wdXNoKGEpLGE9RmgoYSk7Zm9yKGE9ZC5sZW5ndGg7MDxhLS07KWIoZFthXSxcImNhcHR1cmVkXCIsYyk7Zm9yKGE9MDthPGQubGVuZ3RoO2ErKyliKGRbYV0sXCJidWJibGVkXCIsYyl9LHRyYXZlcnNlRW50ZXJMZWF2ZTpmdW5jdGlvbihhLGIsYyxkLGUpe2Zvcih2YXIgZj1hJiZiP0doKGEsYik6bnVsbCxnPVtdO2EmJmEhPT1mOylnLnB1c2goYSksYT1GaChhKTtmb3IoYT1bXTtiJiZiIT09ZjspYS5wdXNoKGIpLGI9RmgoYik7Zm9yKGI9MDtiPGcubGVuZ3RoO2IrKyljKGdbYl0sXCJidWJibGVkXCIsZCk7Zm9yKGI9XG5hLmxlbmd0aDswPGItLTspYyhhW2JdLFwiY2FwdHVyZWRcIixlKX19LEloPUpiLmdldExpc3RlbmVyO2Z1bmN0aW9uIEpoKGEsYixjKXtpZihiPUloKGEsYy5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lc1tiXSkpYy5fZGlzcGF0Y2hMaXN0ZW5lcnM9Q2IoYy5fZGlzcGF0Y2hMaXN0ZW5lcnMsYiksYy5fZGlzcGF0Y2hJbnN0YW5jZXM9Q2IoYy5fZGlzcGF0Y2hJbnN0YW5jZXMsYSl9ZnVuY3Rpb24gS2goYSl7YSYmYS5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lcyYmSGgudHJhdmVyc2VUd29QaGFzZShhLl90YXJnZXRJbnN0LEpoLGEpfWZ1bmN0aW9uIFFoKGEpe2lmKGEmJmEuZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMpe3ZhciBiPWEuX3RhcmdldEluc3Q7Yj1iP0hoLmdldFBhcmVudEluc3RhbmNlKGIpOm51bGw7SGgudHJhdmVyc2VUd29QaGFzZShiLEpoLGEpfX1cbmZ1bmN0aW9uIFJoKGEsYixjKXthJiZjJiZjLmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUmJihiPUloKGEsYy5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lKSkmJihjLl9kaXNwYXRjaExpc3RlbmVycz1DYihjLl9kaXNwYXRjaExpc3RlbmVycyxiKSxjLl9kaXNwYXRjaEluc3RhbmNlcz1DYihjLl9kaXNwYXRjaEluc3RhbmNlcyxhKSl9ZnVuY3Rpb24gU2goYSl7YSYmYS5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lJiZSaChhLl90YXJnZXRJbnN0LG51bGwsYSl9XG52YXIgVGg9e2FjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXM6ZnVuY3Rpb24oYSl7RGIoYSxLaCl9LGFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXNTa2lwVGFyZ2V0OmZ1bmN0aW9uKGEpe0RiKGEsUWgpfSxhY2N1bXVsYXRlRGlyZWN0RGlzcGF0Y2hlczpmdW5jdGlvbihhKXtEYihhLFNoKX0sYWNjdW11bGF0ZUVudGVyTGVhdmVEaXNwYXRjaGVzOmZ1bmN0aW9uKGEsYixjLGQpe0hoLnRyYXZlcnNlRW50ZXJMZWF2ZShjLGQsUmgsYSxiKX19LFg9e19yb290Om51bGwsX3N0YXJ0VGV4dDpudWxsLF9mYWxsYmFja1RleHQ6bnVsbH0sVWg9e2luaXRpYWxpemU6ZnVuY3Rpb24oYSl7WC5fcm9vdD1hO1guX3N0YXJ0VGV4dD1VaC5nZXRUZXh0KCk7cmV0dXJuITB9LHJlc2V0OmZ1bmN0aW9uKCl7WC5fcm9vdD1udWxsO1guX3N0YXJ0VGV4dD1udWxsO1guX2ZhbGxiYWNrVGV4dD1udWxsfSxnZXREYXRhOmZ1bmN0aW9uKCl7aWYoWC5fZmFsbGJhY2tUZXh0KXJldHVybiBYLl9mYWxsYmFja1RleHQ7XG52YXIgYSxiPVguX3N0YXJ0VGV4dCxjPWIubGVuZ3RoLGQsZT1VaC5nZXRUZXh0KCksZj1lLmxlbmd0aDtmb3IoYT0wO2E8YyYmYlthXT09PWVbYV07YSsrKTt2YXIgZz1jLWE7Zm9yKGQ9MTtkPD1nJiZiW2MtZF09PT1lW2YtZF07ZCsrKTtYLl9mYWxsYmFja1RleHQ9ZS5zbGljZShhLDE8ZD8xLWQ6dm9pZCAwKTtyZXR1cm4gWC5fZmFsbGJhY2tUZXh0fSxnZXRUZXh0OmZ1bmN0aW9uKCl7cmV0dXJuXCJ2YWx1ZVwiaW4gWC5fcm9vdD9YLl9yb290LnZhbHVlOlguX3Jvb3RbdmgoKV19fSxWaD1VaCxXaD1cImRpc3BhdGNoQ29uZmlnIF90YXJnZXRJbnN0IG5hdGl2ZUV2ZW50IGlzRGVmYXVsdFByZXZlbnRlZCBpc1Byb3BhZ2F0aW9uU3RvcHBlZCBfZGlzcGF0Y2hMaXN0ZW5lcnMgX2Rpc3BhdGNoSW5zdGFuY2VzXCIuc3BsaXQoXCIgXCIpLFhoPXt0eXBlOm51bGwsdGFyZ2V0Om51bGwsY3VycmVudFRhcmdldDpjYS50aGF0UmV0dXJuc051bGwsZXZlbnRQaGFzZTpudWxsLGJ1YmJsZXM6bnVsbCxcbmNhbmNlbGFibGU6bnVsbCx0aW1lU3RhbXA6ZnVuY3Rpb24oYSl7cmV0dXJuIGEudGltZVN0YW1wfHxEYXRlLm5vdygpfSxkZWZhdWx0UHJldmVudGVkOm51bGwsaXNUcnVzdGVkOm51bGx9O1xuZnVuY3Rpb24gWShhLGIsYyxkKXt0aGlzLmRpc3BhdGNoQ29uZmlnPWE7dGhpcy5fdGFyZ2V0SW5zdD1iO3RoaXMubmF0aXZlRXZlbnQ9YzthPXRoaXMuY29uc3RydWN0b3IuSW50ZXJmYWNlO2Zvcih2YXIgZSBpbiBhKWEuaGFzT3duUHJvcGVydHkoZSkmJigoYj1hW2VdKT90aGlzW2VdPWIoYyk6XCJ0YXJnZXRcIj09PWU/dGhpcy50YXJnZXQ9ZDp0aGlzW2VdPWNbZV0pO3RoaXMuaXNEZWZhdWx0UHJldmVudGVkPShudWxsIT1jLmRlZmF1bHRQcmV2ZW50ZWQ/Yy5kZWZhdWx0UHJldmVudGVkOiExPT09Yy5yZXR1cm5WYWx1ZSk/Y2EudGhhdFJldHVybnNUcnVlOmNhLnRoYXRSZXR1cm5zRmFsc2U7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1jYS50aGF0UmV0dXJuc0ZhbHNlO3JldHVybiB0aGlzfVxubihZLnByb3RvdHlwZSx7cHJldmVudERlZmF1bHQ6ZnVuY3Rpb24oKXt0aGlzLmRlZmF1bHRQcmV2ZW50ZWQ9ITA7dmFyIGE9dGhpcy5uYXRpdmVFdmVudDthJiYoYS5wcmV2ZW50RGVmYXVsdD9hLnByZXZlbnREZWZhdWx0KCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5yZXR1cm5WYWx1ZSYmKGEucmV0dXJuVmFsdWU9ITEpLHRoaXMuaXNEZWZhdWx0UHJldmVudGVkPWNhLnRoYXRSZXR1cm5zVHJ1ZSl9LHN0b3BQcm9wYWdhdGlvbjpmdW5jdGlvbigpe3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEuc3RvcFByb3BhZ2F0aW9uP2Euc3RvcFByb3BhZ2F0aW9uKCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5jYW5jZWxCdWJibGUmJihhLmNhbmNlbEJ1YmJsZT0hMCksdGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1jYS50aGF0UmV0dXJuc1RydWUpfSxwZXJzaXN0OmZ1bmN0aW9uKCl7dGhpcy5pc1BlcnNpc3RlbnQ9Y2EudGhhdFJldHVybnNUcnVlfSxpc1BlcnNpc3RlbnQ6Y2EudGhhdFJldHVybnNGYWxzZSxcbmRlc3RydWN0b3I6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmNvbnN0cnVjdG9yLkludGVyZmFjZSxiO2ZvcihiIGluIGEpdGhpc1tiXT1udWxsO2ZvcihhPTA7YTxXaC5sZW5ndGg7YSsrKXRoaXNbV2hbYV1dPW51bGx9fSk7WS5JbnRlcmZhY2U9WGg7WS5hdWdtZW50Q2xhc3M9ZnVuY3Rpb24oYSxiKXtmdW5jdGlvbiBjKCl7fWMucHJvdG90eXBlPXRoaXMucHJvdG90eXBlO3ZhciBkPW5ldyBjO24oZCxhLnByb3RvdHlwZSk7YS5wcm90b3R5cGU9ZDthLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1hO2EuSW50ZXJmYWNlPW4oe30sdGhpcy5JbnRlcmZhY2UsYik7YS5hdWdtZW50Q2xhc3M9dGhpcy5hdWdtZW50Q2xhc3M7WWgoYSl9O1loKFkpO2Z1bmN0aW9uIFpoKGEsYixjLGQpe2lmKHRoaXMuZXZlbnRQb29sLmxlbmd0aCl7dmFyIGU9dGhpcy5ldmVudFBvb2wucG9wKCk7dGhpcy5jYWxsKGUsYSxiLGMsZCk7cmV0dXJuIGV9cmV0dXJuIG5ldyB0aGlzKGEsYixjLGQpfVxuZnVuY3Rpb24gJGgoYSl7YSBpbnN0YW5jZW9mIHRoaXM/dm9pZCAwOncoXCIyMjNcIik7YS5kZXN0cnVjdG9yKCk7MTA+dGhpcy5ldmVudFBvb2wubGVuZ3RoJiZ0aGlzLmV2ZW50UG9vbC5wdXNoKGEpfWZ1bmN0aW9uIFloKGEpe2EuZXZlbnRQb29sPVtdO2EuZ2V0UG9vbGVkPVpoO2EucmVsZWFzZT0kaH1mdW5jdGlvbiBhaShhLGIsYyxkKXtyZXR1cm4gWS5jYWxsKHRoaXMsYSxiLGMsZCl9WS5hdWdtZW50Q2xhc3MoYWkse2RhdGE6bnVsbH0pO2Z1bmN0aW9uIGJpKGEsYixjLGQpe3JldHVybiBZLmNhbGwodGhpcyxhLGIsYyxkKX1ZLmF1Z21lbnRDbGFzcyhiaSx7ZGF0YTpudWxsfSk7dmFyIGNpPVs5LDEzLDI3LDMyXSxkaT1sLmNhblVzZURPTSYmXCJDb21wb3NpdGlvbkV2ZW50XCJpbiB3aW5kb3csZWk9bnVsbDtsLmNhblVzZURPTSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYoZWk9ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKTt2YXIgZmk7XG5pZihmaT1sLmNhblVzZURPTSYmXCJUZXh0RXZlbnRcImluIHdpbmRvdyYmIWVpKXt2YXIgZ2k9d2luZG93Lm9wZXJhO2ZpPSEoXCJvYmplY3RcIj09PXR5cGVvZiBnaSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGdpLnZlcnNpb24mJjEyPj1wYXJzZUludChnaS52ZXJzaW9uKCksMTApKX1cbnZhciBoaT1maSxpaT1sLmNhblVzZURPTSYmKCFkaXx8ZWkmJjg8ZWkmJjExPj1laSksamk9U3RyaW5nLmZyb21DaGFyQ29kZSgzMiksa2k9e2JlZm9yZUlucHV0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQmVmb3JlSW5wdXRcIixjYXB0dXJlZDpcIm9uQmVmb3JlSW5wdXRDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpbXCJ0b3BDb21wb3NpdGlvbkVuZFwiLFwidG9wS2V5UHJlc3NcIixcInRvcFRleHRJbnB1dFwiLFwidG9wUGFzdGVcIl19LGNvbXBvc2l0aW9uRW5kOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ29tcG9zaXRpb25FbmRcIixjYXB0dXJlZDpcIm9uQ29tcG9zaXRpb25FbmRDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcInRvcEJsdXIgdG9wQ29tcG9zaXRpb25FbmQgdG9wS2V5RG93biB0b3BLZXlQcmVzcyB0b3BLZXlVcCB0b3BNb3VzZURvd25cIi5zcGxpdChcIiBcIil9LGNvbXBvc2l0aW9uU3RhcnQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvblN0YXJ0XCIsXG5jYXB0dXJlZDpcIm9uQ29tcG9zaXRpb25TdGFydENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwidG9wQmx1ciB0b3BDb21wb3NpdGlvblN0YXJ0IHRvcEtleURvd24gdG9wS2V5UHJlc3MgdG9wS2V5VXAgdG9wTW91c2VEb3duXCIuc3BsaXQoXCIgXCIpfSxjb21wb3NpdGlvblVwZGF0ZTp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNvbXBvc2l0aW9uVXBkYXRlXCIsY2FwdHVyZWQ6XCJvbkNvbXBvc2l0aW9uVXBkYXRlQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJ0b3BCbHVyIHRvcENvbXBvc2l0aW9uVXBkYXRlIHRvcEtleURvd24gdG9wS2V5UHJlc3MgdG9wS2V5VXAgdG9wTW91c2VEb3duXCIuc3BsaXQoXCIgXCIpfX0sbGk9ITE7XG5mdW5jdGlvbiBtaShhLGIpe3N3aXRjaChhKXtjYXNlIFwidG9wS2V5VXBcIjpyZXR1cm4tMSE9PWNpLmluZGV4T2YoYi5rZXlDb2RlKTtjYXNlIFwidG9wS2V5RG93blwiOnJldHVybiAyMjkhPT1iLmtleUNvZGU7Y2FzZSBcInRvcEtleVByZXNzXCI6Y2FzZSBcInRvcE1vdXNlRG93blwiOmNhc2UgXCJ0b3BCbHVyXCI6cmV0dXJuITA7ZGVmYXVsdDpyZXR1cm4hMX19ZnVuY3Rpb24gbmkoYSl7YT1hLmRldGFpbDtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJlwiZGF0YVwiaW4gYT9hLmRhdGE6bnVsbH12YXIgb2k9ITE7ZnVuY3Rpb24gcGkoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcInRvcENvbXBvc2l0aW9uRW5kXCI6cmV0dXJuIG5pKGIpO2Nhc2UgXCJ0b3BLZXlQcmVzc1wiOmlmKDMyIT09Yi53aGljaClyZXR1cm4gbnVsbDtsaT0hMDtyZXR1cm4gamk7Y2FzZSBcInRvcFRleHRJbnB1dFwiOnJldHVybiBhPWIuZGF0YSxhPT09amkmJmxpP251bGw6YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbmZ1bmN0aW9uIHFpKGEsYil7aWYob2kpcmV0dXJuXCJ0b3BDb21wb3NpdGlvbkVuZFwiPT09YXx8IWRpJiZtaShhLGIpPyhhPVZoLmdldERhdGEoKSxWaC5yZXNldCgpLG9pPSExLGEpOm51bGw7c3dpdGNoKGEpe2Nhc2UgXCJ0b3BQYXN0ZVwiOnJldHVybiBudWxsO2Nhc2UgXCJ0b3BLZXlQcmVzc1wiOmlmKCEoYi5jdHJsS2V5fHxiLmFsdEtleXx8Yi5tZXRhS2V5KXx8Yi5jdHJsS2V5JiZiLmFsdEtleSl7aWYoYi5jaGFyJiYxPGIuY2hhci5sZW5ndGgpcmV0dXJuIGIuY2hhcjtpZihiLndoaWNoKXJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGIud2hpY2gpfXJldHVybiBudWxsO2Nhc2UgXCJ0b3BDb21wb3NpdGlvbkVuZFwiOnJldHVybiBpaT9udWxsOmIuZGF0YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbnZhciByaT17ZXZlbnRUeXBlczpraSxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlO2lmKGRpKWI6e3N3aXRjaChhKXtjYXNlIFwidG9wQ29tcG9zaXRpb25TdGFydFwiOnZhciBmPWtpLmNvbXBvc2l0aW9uU3RhcnQ7YnJlYWsgYjtjYXNlIFwidG9wQ29tcG9zaXRpb25FbmRcIjpmPWtpLmNvbXBvc2l0aW9uRW5kO2JyZWFrIGI7Y2FzZSBcInRvcENvbXBvc2l0aW9uVXBkYXRlXCI6Zj1raS5jb21wb3NpdGlvblVwZGF0ZTticmVhayBifWY9dm9pZCAwfWVsc2Ugb2k/bWkoYSxjKSYmKGY9a2kuY29tcG9zaXRpb25FbmQpOlwidG9wS2V5RG93blwiPT09YSYmMjI5PT09Yy5rZXlDb2RlJiYoZj1raS5jb21wb3NpdGlvblN0YXJ0KTtmPyhpaSYmKG9pfHxmIT09a2kuY29tcG9zaXRpb25TdGFydD9mPT09a2kuY29tcG9zaXRpb25FbmQmJm9pJiYoZT1WaC5nZXREYXRhKCkpOm9pPVZoLmluaXRpYWxpemUoZCkpLGY9YWkuZ2V0UG9vbGVkKGYsYixjLGQpLGU/Zi5kYXRhPWU6KGU9bmkoYyksXG5udWxsIT09ZSYmKGYuZGF0YT1lKSksVGguYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlcyhmKSxlPWYpOmU9bnVsbDsoYT1oaT9waShhLGMpOnFpKGEsYykpPyhiPWJpLmdldFBvb2xlZChraS5iZWZvcmVJbnB1dCxiLGMsZCksYi5kYXRhPWEsVGguYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlcyhiKSk6Yj1udWxsO3JldHVybltlLGJdfX0sc2k9e2NvbG9yOiEwLGRhdGU6ITAsZGF0ZXRpbWU6ITAsXCJkYXRldGltZS1sb2NhbFwiOiEwLGVtYWlsOiEwLG1vbnRoOiEwLG51bWJlcjohMCxwYXNzd29yZDohMCxyYW5nZTohMCxzZWFyY2g6ITAsdGVsOiEwLHRleHQ6ITAsdGltZTohMCx1cmw6ITAsd2VlazohMH07ZnVuY3Rpb24gdGkoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVyblwiaW5wdXRcIj09PWI/ISFzaVthLnR5cGVdOlwidGV4dGFyZWFcIj09PWI/ITA6ITF9XG52YXIgdWk9e2NoYW5nZTp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNoYW5nZVwiLGNhcHR1cmVkOlwib25DaGFuZ2VDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcInRvcEJsdXIgdG9wQ2hhbmdlIHRvcENsaWNrIHRvcEZvY3VzIHRvcElucHV0IHRvcEtleURvd24gdG9wS2V5VXAgdG9wU2VsZWN0aW9uQ2hhbmdlXCIuc3BsaXQoXCIgXCIpfX07ZnVuY3Rpb24gdmkoYSxiLGMpe2E9WS5nZXRQb29sZWQodWkuY2hhbmdlLGEsYixjKTthLnR5cGU9XCJjaGFuZ2VcIjtuYi5lbnF1ZXVlU3RhdGVSZXN0b3JlKGMpO1RoLmFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXMoYSk7cmV0dXJuIGF9dmFyIHdpPW51bGwseGk9bnVsbDtmdW5jdGlvbiB5aShhKXtKYi5lbnF1ZXVlRXZlbnRzKGEpO0piLnByb2Nlc3NFdmVudFF1ZXVlKCExKX1cbmZ1bmN0aW9uIHppKGEpe3ZhciBiPUcuZ2V0Tm9kZUZyb21JbnN0YW5jZShhKTtpZihCYy51cGRhdGVWYWx1ZUlmQ2hhbmdlZChiKSlyZXR1cm4gYX1mdW5jdGlvbiBBaShhLGIpe2lmKFwidG9wQ2hhbmdlXCI9PT1hKXJldHVybiBifXZhciBCaT0hMTtsLmNhblVzZURPTSYmKEJpPUxiKFwiaW5wdXRcIikmJighZG9jdW1lbnQuZG9jdW1lbnRNb2RlfHw5PGRvY3VtZW50LmRvY3VtZW50TW9kZSkpO2Z1bmN0aW9uIENpKCl7d2kmJih3aS5kZXRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixEaSkseGk9d2k9bnVsbCl9ZnVuY3Rpb24gRGkoYSl7XCJ2YWx1ZVwiPT09YS5wcm9wZXJ0eU5hbWUmJnppKHhpKSYmKGE9dmkoeGksYSx1YihhKSksc2IuYmF0Y2hlZFVwZGF0ZXMoeWksYSkpfWZ1bmN0aW9uIEVpKGEsYixjKXtcInRvcEZvY3VzXCI9PT1hPyhDaSgpLHdpPWIseGk9Yyx3aS5hdHRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixEaSkpOlwidG9wQmx1clwiPT09YSYmQ2koKX1cbmZ1bmN0aW9uIEZpKGEpe2lmKFwidG9wU2VsZWN0aW9uQ2hhbmdlXCI9PT1hfHxcInRvcEtleVVwXCI9PT1hfHxcInRvcEtleURvd25cIj09PWEpcmV0dXJuIHppKHhpKX1mdW5jdGlvbiBHaShhLGIpe2lmKFwidG9wQ2xpY2tcIj09PWEpcmV0dXJuIHppKGIpfWZ1bmN0aW9uIEhpKGEsYil7aWYoXCJ0b3BJbnB1dFwiPT09YXx8XCJ0b3BDaGFuZ2VcIj09PWEpcmV0dXJuIHppKGIpfVxudmFyIElpPXtldmVudFR5cGVzOnVpLF9pc0lucHV0RXZlbnRTdXBwb3J0ZWQ6QmksZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1iP0cuZ2V0Tm9kZUZyb21JbnN0YW5jZShiKTp3aW5kb3csZj1lLm5vZGVOYW1lJiZlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7aWYoXCJzZWxlY3RcIj09PWZ8fFwiaW5wdXRcIj09PWYmJlwiZmlsZVwiPT09ZS50eXBlKXZhciBnPUFpO2Vsc2UgaWYodGkoZSkpaWYoQmkpZz1IaTtlbHNle2c9Rmk7dmFyIGg9RWl9ZWxzZSBmPWUubm9kZU5hbWUsIWZ8fFwiaW5wdXRcIiE9PWYudG9Mb3dlckNhc2UoKXx8XCJjaGVja2JveFwiIT09ZS50eXBlJiZcInJhZGlvXCIhPT1lLnR5cGV8fChnPUdpKTtpZihnJiYoZz1nKGEsYikpKXJldHVybiB2aShnLGMsZCk7aCYmaChhLGUsYik7XCJ0b3BCbHVyXCI9PT1hJiZudWxsIT1iJiYoYT1iLl93cmFwcGVyU3RhdGV8fGUuX3dyYXBwZXJTdGF0ZSkmJmEuY29udHJvbGxlZCYmXCJudW1iZXJcIj09PWUudHlwZSYmKGE9XCJcIitlLnZhbHVlLFxuZS5nZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiKSE9PWEmJmUuc2V0QXR0cmlidXRlKFwidmFsdWVcIixhKSl9fTtmdW5jdGlvbiBKaShhLGIsYyxkKXtyZXR1cm4gWS5jYWxsKHRoaXMsYSxiLGMsZCl9WS5hdWdtZW50Q2xhc3MoSmkse3ZpZXc6ZnVuY3Rpb24oYSl7aWYoYS52aWV3KXJldHVybiBhLnZpZXc7YT11YihhKTtyZXR1cm4gYS53aW5kb3c9PT1hP2E6KGE9YS5vd25lckRvY3VtZW50KT9hLmRlZmF1bHRWaWV3fHxhLnBhcmVudFdpbmRvdzp3aW5kb3d9LGRldGFpbDpmdW5jdGlvbihhKXtyZXR1cm4gYS5kZXRhaWx8fDB9fSk7dmFyIEtpPXtBbHQ6XCJhbHRLZXlcIixDb250cm9sOlwiY3RybEtleVwiLE1ldGE6XCJtZXRhS2V5XCIsU2hpZnQ6XCJzaGlmdEtleVwifTtmdW5jdGlvbiBMaShhKXt2YXIgYj10aGlzLm5hdGl2ZUV2ZW50O3JldHVybiBiLmdldE1vZGlmaWVyU3RhdGU/Yi5nZXRNb2RpZmllclN0YXRlKGEpOihhPUtpW2FdKT8hIWJbYV06ITF9ZnVuY3Rpb24gTWkoKXtyZXR1cm4gTGl9XG5mdW5jdGlvbiBOaShhLGIsYyxkKXtyZXR1cm4gWS5jYWxsKHRoaXMsYSxiLGMsZCl9SmkuYXVnbWVudENsYXNzKE5pLHtzY3JlZW5YOm51bGwsc2NyZWVuWTpudWxsLGNsaWVudFg6bnVsbCxjbGllbnRZOm51bGwscGFnZVg6bnVsbCxwYWdlWTpudWxsLGN0cmxLZXk6bnVsbCxzaGlmdEtleTpudWxsLGFsdEtleTpudWxsLG1ldGFLZXk6bnVsbCxnZXRNb2RpZmllclN0YXRlOk1pLGJ1dHRvbjpudWxsLGJ1dHRvbnM6bnVsbCxyZWxhdGVkVGFyZ2V0OmZ1bmN0aW9uKGEpe3JldHVybiBhLnJlbGF0ZWRUYXJnZXR8fChhLmZyb21FbGVtZW50PT09YS5zcmNFbGVtZW50P2EudG9FbGVtZW50OmEuZnJvbUVsZW1lbnQpfX0pO1xudmFyIE9pPXttb3VzZUVudGVyOntyZWdpc3RyYXRpb25OYW1lOlwib25Nb3VzZUVudGVyXCIsZGVwZW5kZW5jaWVzOltcInRvcE1vdXNlT3V0XCIsXCJ0b3BNb3VzZU92ZXJcIl19LG1vdXNlTGVhdmU6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvbk1vdXNlTGVhdmVcIixkZXBlbmRlbmNpZXM6W1widG9wTW91c2VPdXRcIixcInRvcE1vdXNlT3ZlclwiXX19LFBpPXtldmVudFR5cGVzOk9pLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7aWYoXCJ0b3BNb3VzZU92ZXJcIj09PWEmJihjLnJlbGF0ZWRUYXJnZXR8fGMuZnJvbUVsZW1lbnQpfHxcInRvcE1vdXNlT3V0XCIhPT1hJiZcInRvcE1vdXNlT3ZlclwiIT09YSlyZXR1cm4gbnVsbDt2YXIgZT1kLndpbmRvdz09PWQ/ZDooZT1kLm93bmVyRG9jdW1lbnQpP2UuZGVmYXVsdFZpZXd8fGUucGFyZW50V2luZG93OndpbmRvdztcInRvcE1vdXNlT3V0XCI9PT1hPyhhPWIsYj0oYj1jLnJlbGF0ZWRUYXJnZXR8fGMudG9FbGVtZW50KT9HLmdldENsb3Nlc3RJbnN0YW5jZUZyb21Ob2RlKGIpOlxubnVsbCk6YT1udWxsO2lmKGE9PT1iKXJldHVybiBudWxsO3ZhciBmPW51bGw9PWE/ZTpHLmdldE5vZGVGcm9tSW5zdGFuY2UoYSk7ZT1udWxsPT1iP2U6Ry5nZXROb2RlRnJvbUluc3RhbmNlKGIpO3ZhciBnPU5pLmdldFBvb2xlZChPaS5tb3VzZUxlYXZlLGEsYyxkKTtnLnR5cGU9XCJtb3VzZWxlYXZlXCI7Zy50YXJnZXQ9ZjtnLnJlbGF0ZWRUYXJnZXQ9ZTtjPU5pLmdldFBvb2xlZChPaS5tb3VzZUVudGVyLGIsYyxkKTtjLnR5cGU9XCJtb3VzZWVudGVyXCI7Yy50YXJnZXQ9ZTtjLnJlbGF0ZWRUYXJnZXQ9ZjtUaC5hY2N1bXVsYXRlRW50ZXJMZWF2ZURpc3BhdGNoZXMoZyxjLGEsYik7cmV0dXJuW2csY119fSxRaT1GLkRPQ1VNRU5UX05PREUsUmk9bC5jYW5Vc2VET00mJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmMTE+PWRvY3VtZW50LmRvY3VtZW50TW9kZSxTaT17c2VsZWN0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uU2VsZWN0XCIsY2FwdHVyZWQ6XCJvblNlbGVjdENhcHR1cmVcIn0sXG5kZXBlbmRlbmNpZXM6XCJ0b3BCbHVyIHRvcENvbnRleHRNZW51IHRvcEZvY3VzIHRvcEtleURvd24gdG9wS2V5VXAgdG9wTW91c2VEb3duIHRvcE1vdXNlVXAgdG9wU2VsZWN0aW9uQ2hhbmdlXCIuc3BsaXQoXCIgXCIpfX0sVGk9bnVsbCxaaT1udWxsLCRpPW51bGwsYWo9ITEsYmo9TS5pc0xpc3RlbmluZ1RvQWxsRGVwZW5kZW5jaWVzO1xuZnVuY3Rpb24gY2ooYSxiKXtpZihhanx8bnVsbD09VGl8fFRpIT09aWEoKSlyZXR1cm4gbnVsbDt2YXIgYz1UaTtcInNlbGVjdGlvblN0YXJ0XCJpbiBjJiZ6aC5oYXNTZWxlY3Rpb25DYXBhYmlsaXRpZXMoYyk/Yz17c3RhcnQ6Yy5zZWxlY3Rpb25TdGFydCxlbmQ6Yy5zZWxlY3Rpb25FbmR9OndpbmRvdy5nZXRTZWxlY3Rpb24/KGM9d2luZG93LmdldFNlbGVjdGlvbigpLGM9e2FuY2hvck5vZGU6Yy5hbmNob3JOb2RlLGFuY2hvck9mZnNldDpjLmFuY2hvck9mZnNldCxmb2N1c05vZGU6Yy5mb2N1c05vZGUsZm9jdXNPZmZzZXQ6Yy5mb2N1c09mZnNldH0pOmM9dm9pZCAwO3JldHVybiAkaSYmZWEoJGksYyk/bnVsbDooJGk9YyxhPVkuZ2V0UG9vbGVkKFNpLnNlbGVjdCxaaSxhLGIpLGEudHlwZT1cInNlbGVjdFwiLGEudGFyZ2V0PVRpLFRoLmFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXMoYSksYSl9XG52YXIgZGo9e2V2ZW50VHlwZXM6U2ksZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1kLndpbmRvdz09PWQ/ZC5kb2N1bWVudDpkLm5vZGVUeXBlPT09UWk/ZDpkLm93bmVyRG9jdW1lbnQ7aWYoIWV8fCFiaihcIm9uU2VsZWN0XCIsZSkpcmV0dXJuIG51bGw7ZT1iP0cuZ2V0Tm9kZUZyb21JbnN0YW5jZShiKTp3aW5kb3c7c3dpdGNoKGEpe2Nhc2UgXCJ0b3BGb2N1c1wiOmlmKHRpKGUpfHxcInRydWVcIj09PWUuY29udGVudEVkaXRhYmxlKVRpPWUsWmk9YiwkaT1udWxsO2JyZWFrO2Nhc2UgXCJ0b3BCbHVyXCI6JGk9Wmk9VGk9bnVsbDticmVhaztjYXNlIFwidG9wTW91c2VEb3duXCI6YWo9ITA7YnJlYWs7Y2FzZSBcInRvcENvbnRleHRNZW51XCI6Y2FzZSBcInRvcE1vdXNlVXBcIjpyZXR1cm4gYWo9ITEsY2ooYyxkKTtjYXNlIFwidG9wU2VsZWN0aW9uQ2hhbmdlXCI6aWYoUmkpYnJlYWs7Y2FzZSBcInRvcEtleURvd25cIjpjYXNlIFwidG9wS2V5VXBcIjpyZXR1cm4gY2ooYyxkKX1yZXR1cm4gbnVsbH19O1xuZnVuY3Rpb24gZWooYSxiLGMsZCl7cmV0dXJuIFkuY2FsbCh0aGlzLGEsYixjLGQpfVkuYXVnbWVudENsYXNzKGVqLHthbmltYXRpb25OYW1lOm51bGwsZWxhcHNlZFRpbWU6bnVsbCxwc2V1ZG9FbGVtZW50Om51bGx9KTtmdW5jdGlvbiBmaihhLGIsYyxkKXtyZXR1cm4gWS5jYWxsKHRoaXMsYSxiLGMsZCl9WS5hdWdtZW50Q2xhc3MoZmose2NsaXBib2FyZERhdGE6ZnVuY3Rpb24oYSl7cmV0dXJuXCJjbGlwYm9hcmREYXRhXCJpbiBhP2EuY2xpcGJvYXJkRGF0YTp3aW5kb3cuY2xpcGJvYXJkRGF0YX19KTtmdW5jdGlvbiBnaihhLGIsYyxkKXtyZXR1cm4gWS5jYWxsKHRoaXMsYSxiLGMsZCl9SmkuYXVnbWVudENsYXNzKGdqLHtyZWxhdGVkVGFyZ2V0Om51bGx9KTtmdW5jdGlvbiBoaihhKXt2YXIgYj1hLmtleUNvZGU7XCJjaGFyQ29kZVwiaW4gYT8oYT1hLmNoYXJDb2RlLDA9PT1hJiYxMz09PWImJihhPTEzKSk6YT1iO3JldHVybiAzMjw9YXx8MTM9PT1hP2E6MH1cbnZhciBpaj17RXNjOlwiRXNjYXBlXCIsU3BhY2ViYXI6XCIgXCIsTGVmdDpcIkFycm93TGVmdFwiLFVwOlwiQXJyb3dVcFwiLFJpZ2h0OlwiQXJyb3dSaWdodFwiLERvd246XCJBcnJvd0Rvd25cIixEZWw6XCJEZWxldGVcIixXaW46XCJPU1wiLE1lbnU6XCJDb250ZXh0TWVudVwiLEFwcHM6XCJDb250ZXh0TWVudVwiLFNjcm9sbDpcIlNjcm9sbExvY2tcIixNb3pQcmludGFibGVLZXk6XCJVbmlkZW50aWZpZWRcIn0samo9ezg6XCJCYWNrc3BhY2VcIiw5OlwiVGFiXCIsMTI6XCJDbGVhclwiLDEzOlwiRW50ZXJcIiwxNjpcIlNoaWZ0XCIsMTc6XCJDb250cm9sXCIsMTg6XCJBbHRcIiwxOTpcIlBhdXNlXCIsMjA6XCJDYXBzTG9ja1wiLDI3OlwiRXNjYXBlXCIsMzI6XCIgXCIsMzM6XCJQYWdlVXBcIiwzNDpcIlBhZ2VEb3duXCIsMzU6XCJFbmRcIiwzNjpcIkhvbWVcIiwzNzpcIkFycm93TGVmdFwiLDM4OlwiQXJyb3dVcFwiLDM5OlwiQXJyb3dSaWdodFwiLDQwOlwiQXJyb3dEb3duXCIsNDU6XCJJbnNlcnRcIiw0NjpcIkRlbGV0ZVwiLDExMjpcIkYxXCIsMTEzOlwiRjJcIiwxMTQ6XCJGM1wiLDExNTpcIkY0XCIsXG4xMTY6XCJGNVwiLDExNzpcIkY2XCIsMTE4OlwiRjdcIiwxMTk6XCJGOFwiLDEyMDpcIkY5XCIsMTIxOlwiRjEwXCIsMTIyOlwiRjExXCIsMTIzOlwiRjEyXCIsMTQ0OlwiTnVtTG9ja1wiLDE0NTpcIlNjcm9sbExvY2tcIiwyMjQ6XCJNZXRhXCJ9O2Z1bmN0aW9uIGtqKGEsYixjLGQpe3JldHVybiBZLmNhbGwodGhpcyxhLGIsYyxkKX1cbkppLmF1Z21lbnRDbGFzcyhraix7a2V5OmZ1bmN0aW9uKGEpe2lmKGEua2V5KXt2YXIgYj1palthLmtleV18fGEua2V5O2lmKFwiVW5pZGVudGlmaWVkXCIhPT1iKXJldHVybiBifXJldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT8oYT1oaihhKSwxMz09PWE/XCJFbnRlclwiOlN0cmluZy5mcm9tQ2hhckNvZGUoYSkpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/ampbYS5rZXlDb2RlXXx8XCJVbmlkZW50aWZpZWRcIjpcIlwifSxsb2NhdGlvbjpudWxsLGN0cmxLZXk6bnVsbCxzaGlmdEtleTpudWxsLGFsdEtleTpudWxsLG1ldGFLZXk6bnVsbCxyZXBlYXQ6bnVsbCxsb2NhbGU6bnVsbCxnZXRNb2RpZmllclN0YXRlOk1pLGNoYXJDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT9oaihhKTowfSxrZXlDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9LHdoaWNoOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PVxuYS50eXBlP2hqKGEpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9fSk7ZnVuY3Rpb24gbGooYSxiLGMsZCl7cmV0dXJuIFkuY2FsbCh0aGlzLGEsYixjLGQpfU5pLmF1Z21lbnRDbGFzcyhsaix7ZGF0YVRyYW5zZmVyOm51bGx9KTtmdW5jdGlvbiBtaihhLGIsYyxkKXtyZXR1cm4gWS5jYWxsKHRoaXMsYSxiLGMsZCl9SmkuYXVnbWVudENsYXNzKG1qLHt0b3VjaGVzOm51bGwsdGFyZ2V0VG91Y2hlczpudWxsLGNoYW5nZWRUb3VjaGVzOm51bGwsYWx0S2V5Om51bGwsbWV0YUtleTpudWxsLGN0cmxLZXk6bnVsbCxzaGlmdEtleTpudWxsLGdldE1vZGlmaWVyU3RhdGU6TWl9KTtmdW5jdGlvbiBuaihhLGIsYyxkKXtyZXR1cm4gWS5jYWxsKHRoaXMsYSxiLGMsZCl9WS5hdWdtZW50Q2xhc3Mobmose3Byb3BlcnR5TmFtZTpudWxsLGVsYXBzZWRUaW1lOm51bGwscHNldWRvRWxlbWVudDpudWxsfSk7XG5mdW5jdGlvbiBvaihhLGIsYyxkKXtyZXR1cm4gWS5jYWxsKHRoaXMsYSxiLGMsZCl9TmkuYXVnbWVudENsYXNzKG9qLHtkZWx0YVg6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVhcImluIGE/YS5kZWx0YVg6XCJ3aGVlbERlbHRhWFwiaW4gYT8tYS53aGVlbERlbHRhWDowfSxkZWx0YVk6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVlcImluIGE/YS5kZWx0YVk6XCJ3aGVlbERlbHRhWVwiaW4gYT8tYS53aGVlbERlbHRhWTpcIndoZWVsRGVsdGFcImluIGE/LWEud2hlZWxEZWx0YTowfSxkZWx0YVo6bnVsbCxkZWx0YU1vZGU6bnVsbH0pO3ZhciBwaj17fSxxaj17fTtcblwiYWJvcnQgYW5pbWF0aW9uRW5kIGFuaW1hdGlvbkl0ZXJhdGlvbiBhbmltYXRpb25TdGFydCBibHVyIGNhbmNlbCBjYW5QbGF5IGNhblBsYXlUaHJvdWdoIGNsaWNrIGNsb3NlIGNvbnRleHRNZW51IGNvcHkgY3V0IGRvdWJsZUNsaWNrIGRyYWcgZHJhZ0VuZCBkcmFnRW50ZXIgZHJhZ0V4aXQgZHJhZ0xlYXZlIGRyYWdPdmVyIGRyYWdTdGFydCBkcm9wIGR1cmF0aW9uQ2hhbmdlIGVtcHRpZWQgZW5jcnlwdGVkIGVuZGVkIGVycm9yIGZvY3VzIGlucHV0IGludmFsaWQga2V5RG93biBrZXlQcmVzcyBrZXlVcCBsb2FkIGxvYWRlZERhdGEgbG9hZGVkTWV0YWRhdGEgbG9hZFN0YXJ0IG1vdXNlRG93biBtb3VzZU1vdmUgbW91c2VPdXQgbW91c2VPdmVyIG1vdXNlVXAgcGFzdGUgcGF1c2UgcGxheSBwbGF5aW5nIHByb2dyZXNzIHJhdGVDaGFuZ2UgcmVzZXQgc2Nyb2xsIHNlZWtlZCBzZWVraW5nIHN0YWxsZWQgc3VibWl0IHN1c3BlbmQgdGltZVVwZGF0ZSB0b2dnbGUgdG91Y2hDYW5jZWwgdG91Y2hFbmQgdG91Y2hNb3ZlIHRvdWNoU3RhcnQgdHJhbnNpdGlvbkVuZCB2b2x1bWVDaGFuZ2Ugd2FpdGluZyB3aGVlbFwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWFbMF0udG9VcHBlckNhc2UoKStcbmEuc2xpY2UoMSksYz1cIm9uXCIrYjtiPVwidG9wXCIrYjtjPXtwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpjLGNhcHR1cmVkOmMrXCJDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpbYl19O3BqW2FdPWM7cWpbYl09Y30pO1xudmFyIHJqPXtldmVudFR5cGVzOnBqLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9cWpbYV07aWYoIWUpcmV0dXJuIG51bGw7c3dpdGNoKGEpe2Nhc2UgXCJ0b3BBYm9ydFwiOmNhc2UgXCJ0b3BDYW5jZWxcIjpjYXNlIFwidG9wQ2FuUGxheVwiOmNhc2UgXCJ0b3BDYW5QbGF5VGhyb3VnaFwiOmNhc2UgXCJ0b3BDbG9zZVwiOmNhc2UgXCJ0b3BEdXJhdGlvbkNoYW5nZVwiOmNhc2UgXCJ0b3BFbXB0aWVkXCI6Y2FzZSBcInRvcEVuY3J5cHRlZFwiOmNhc2UgXCJ0b3BFbmRlZFwiOmNhc2UgXCJ0b3BFcnJvclwiOmNhc2UgXCJ0b3BJbnB1dFwiOmNhc2UgXCJ0b3BJbnZhbGlkXCI6Y2FzZSBcInRvcExvYWRcIjpjYXNlIFwidG9wTG9hZGVkRGF0YVwiOmNhc2UgXCJ0b3BMb2FkZWRNZXRhZGF0YVwiOmNhc2UgXCJ0b3BMb2FkU3RhcnRcIjpjYXNlIFwidG9wUGF1c2VcIjpjYXNlIFwidG9wUGxheVwiOmNhc2UgXCJ0b3BQbGF5aW5nXCI6Y2FzZSBcInRvcFByb2dyZXNzXCI6Y2FzZSBcInRvcFJhdGVDaGFuZ2VcIjpjYXNlIFwidG9wUmVzZXRcIjpjYXNlIFwidG9wU2Vla2VkXCI6Y2FzZSBcInRvcFNlZWtpbmdcIjpjYXNlIFwidG9wU3RhbGxlZFwiOmNhc2UgXCJ0b3BTdWJtaXRcIjpjYXNlIFwidG9wU3VzcGVuZFwiOmNhc2UgXCJ0b3BUaW1lVXBkYXRlXCI6Y2FzZSBcInRvcFRvZ2dsZVwiOmNhc2UgXCJ0b3BWb2x1bWVDaGFuZ2VcIjpjYXNlIFwidG9wV2FpdGluZ1wiOnZhciBmPVk7XG5icmVhaztjYXNlIFwidG9wS2V5UHJlc3NcIjppZigwPT09aGooYykpcmV0dXJuIG51bGw7Y2FzZSBcInRvcEtleURvd25cIjpjYXNlIFwidG9wS2V5VXBcIjpmPWtqO2JyZWFrO2Nhc2UgXCJ0b3BCbHVyXCI6Y2FzZSBcInRvcEZvY3VzXCI6Zj1najticmVhaztjYXNlIFwidG9wQ2xpY2tcIjppZigyPT09Yy5idXR0b24pcmV0dXJuIG51bGw7Y2FzZSBcInRvcERvdWJsZUNsaWNrXCI6Y2FzZSBcInRvcE1vdXNlRG93blwiOmNhc2UgXCJ0b3BNb3VzZU1vdmVcIjpjYXNlIFwidG9wTW91c2VVcFwiOmNhc2UgXCJ0b3BNb3VzZU91dFwiOmNhc2UgXCJ0b3BNb3VzZU92ZXJcIjpjYXNlIFwidG9wQ29udGV4dE1lbnVcIjpmPU5pO2JyZWFrO2Nhc2UgXCJ0b3BEcmFnXCI6Y2FzZSBcInRvcERyYWdFbmRcIjpjYXNlIFwidG9wRHJhZ0VudGVyXCI6Y2FzZSBcInRvcERyYWdFeGl0XCI6Y2FzZSBcInRvcERyYWdMZWF2ZVwiOmNhc2UgXCJ0b3BEcmFnT3ZlclwiOmNhc2UgXCJ0b3BEcmFnU3RhcnRcIjpjYXNlIFwidG9wRHJvcFwiOmY9bGo7YnJlYWs7Y2FzZSBcInRvcFRvdWNoQ2FuY2VsXCI6Y2FzZSBcInRvcFRvdWNoRW5kXCI6Y2FzZSBcInRvcFRvdWNoTW92ZVwiOmNhc2UgXCJ0b3BUb3VjaFN0YXJ0XCI6Zj1cbm1qO2JyZWFrO2Nhc2UgXCJ0b3BBbmltYXRpb25FbmRcIjpjYXNlIFwidG9wQW5pbWF0aW9uSXRlcmF0aW9uXCI6Y2FzZSBcInRvcEFuaW1hdGlvblN0YXJ0XCI6Zj1lajticmVhaztjYXNlIFwidG9wVHJhbnNpdGlvbkVuZFwiOmY9bmo7YnJlYWs7Y2FzZSBcInRvcFNjcm9sbFwiOmY9Smk7YnJlYWs7Y2FzZSBcInRvcFdoZWVsXCI6Zj1vajticmVhaztjYXNlIFwidG9wQ29weVwiOmNhc2UgXCJ0b3BDdXRcIjpjYXNlIFwidG9wUGFzdGVcIjpmPWZqfWY/dm9pZCAwOncoXCI4NlwiLGEpO2E9Zi5nZXRQb29sZWQoZSxiLGMsZCk7VGguYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlcyhhKTtyZXR1cm4gYX19O0wuc2V0SGFuZGxlVG9wTGV2ZWwoTS5oYW5kbGVUb3BMZXZlbCk7SmIuaW5qZWN0aW9uLmluamVjdEV2ZW50UGx1Z2luT3JkZXIoXCJSZXNwb25kZXJFdmVudFBsdWdpbiBTaW1wbGVFdmVudFBsdWdpbiBUYXBFdmVudFBsdWdpbiBFbnRlckxlYXZlRXZlbnRQbHVnaW4gQ2hhbmdlRXZlbnRQbHVnaW4gU2VsZWN0RXZlbnRQbHVnaW4gQmVmb3JlSW5wdXRFdmVudFBsdWdpblwiLnNwbGl0KFwiIFwiKSk7XG5pYi5pbmplY3Rpb24uaW5qZWN0Q29tcG9uZW50VHJlZShHKTtKYi5pbmplY3Rpb24uaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lKHtTaW1wbGVFdmVudFBsdWdpbjpyaixFbnRlckxlYXZlRXZlbnRQbHVnaW46UGksQ2hhbmdlRXZlbnRQbHVnaW46SWksU2VsZWN0RXZlbnRQbHVnaW46ZGosQmVmb3JlSW5wdXRFdmVudFBsdWdpbjpyaX0pO1xudmFyIHNqPUEuaW5qZWN0aW9uLk1VU1RfVVNFX1BST1BFUlRZLFo9QS5pbmplY3Rpb24uSEFTX0JPT0xFQU5fVkFMVUUsdGo9QS5pbmplY3Rpb24uSEFTX05VTUVSSUNfVkFMVUUsdWo9QS5pbmplY3Rpb24uSEFTX1BPU0lUSVZFX05VTUVSSUNfVkFMVUUsdmo9QS5pbmplY3Rpb24uSEFTX1NUUklOR19CT09MRUFOX1ZBTFVFLHdqPXtQcm9wZXJ0aWVzOnthbGxvd0Z1bGxTY3JlZW46WixhbGxvd1RyYW5zcGFyZW5jeTp2aixhc3luYzpaLGF1dG9QbGF5OlosY2FwdHVyZTpaLGNoZWNrZWQ6c2p8Wixjb2xzOnVqLGNvbnRlbnRFZGl0YWJsZTp2aixjb250cm9sczpaLFwiZGVmYXVsdFwiOlosZGVmZXI6WixkaXNhYmxlZDpaLGRvd25sb2FkOkEuaW5qZWN0aW9uLkhBU19PVkVSTE9BREVEX0JPT0xFQU5fVkFMVUUsZHJhZ2dhYmxlOnZqLGZvcm1Ob1ZhbGlkYXRlOlosaGlkZGVuOlosbG9vcDpaLG11bHRpcGxlOnNqfFosbXV0ZWQ6c2p8Wixub1ZhbGlkYXRlOlosb3BlbjpaLHBsYXlzSW5saW5lOlosXG5yZWFkT25seTpaLHJlcXVpcmVkOloscmV2ZXJzZWQ6Wixyb3dzOnVqLHJvd1NwYW46dGosc2NvcGVkOlosc2VhbWxlc3M6WixzZWxlY3RlZDpzanxaLHNpemU6dWosc3RhcnQ6dGosc3Bhbjp1aixzcGVsbENoZWNrOnZqLHN0eWxlOjAsaXRlbVNjb3BlOlosYWNjZXB0Q2hhcnNldDowLGNsYXNzTmFtZTowLGh0bWxGb3I6MCxodHRwRXF1aXY6MCx2YWx1ZTp2an0sRE9NQXR0cmlidXRlTmFtZXM6e2FjY2VwdENoYXJzZXQ6XCJhY2NlcHQtY2hhcnNldFwiLGNsYXNzTmFtZTpcImNsYXNzXCIsaHRtbEZvcjpcImZvclwiLGh0dHBFcXVpdjpcImh0dHAtZXF1aXZcIn0sRE9NTXV0YXRpb25NZXRob2RzOnt2YWx1ZTpmdW5jdGlvbihhLGIpe2lmKG51bGw9PWIpcmV0dXJuIGEucmVtb3ZlQXR0cmlidXRlKFwidmFsdWVcIik7XCJudW1iZXJcIiE9PWEudHlwZXx8ITE9PT1hLmhhc0F0dHJpYnV0ZShcInZhbHVlXCIpP2Euc2V0QXR0cmlidXRlKFwidmFsdWVcIixcIlwiK2IpOmEudmFsaWRpdHkmJiFhLnZhbGlkaXR5LmJhZElucHV0JiZcbmEub3duZXJEb2N1bWVudC5hY3RpdmVFbGVtZW50IT09YSYmYS5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLFwiXCIrYil9fX0seGo9QS5pbmplY3Rpb24uSEFTX1NUUklOR19CT09MRUFOX1ZBTFVFLHlqPXt4bGluazpcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIix4bWw6XCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2VcIn0semo9e1Byb3BlcnRpZXM6e2F1dG9SZXZlcnNlOnhqLGV4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWQ6eGoscHJlc2VydmVBbHBoYTp4an0sRE9NQXR0cmlidXRlTmFtZXM6e2F1dG9SZXZlcnNlOlwiYXV0b1JldmVyc2VcIixleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkOlwiZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZFwiLHByZXNlcnZlQWxwaGE6XCJwcmVzZXJ2ZUFscGhhXCJ9LERPTUF0dHJpYnV0ZU5hbWVzcGFjZXM6e3hsaW5rQWN0dWF0ZTp5ai54bGluayx4bGlua0FyY3JvbGU6eWoueGxpbmsseGxpbmtIcmVmOnlqLnhsaW5rLHhsaW5rUm9sZTp5ai54bGluayxcbnhsaW5rU2hvdzp5ai54bGluayx4bGlua1RpdGxlOnlqLnhsaW5rLHhsaW5rVHlwZTp5ai54bGluayx4bWxCYXNlOnlqLnhtbCx4bWxMYW5nOnlqLnhtbCx4bWxTcGFjZTp5ai54bWx9fSxBaj0vW1xcLVxcOl0oW2Etel0pL2c7ZnVuY3Rpb24gQmooYSl7cmV0dXJuIGFbMV0udG9VcHBlckNhc2UoKX1cblwiYWNjZW50LWhlaWdodCBhbGlnbm1lbnQtYmFzZWxpbmUgYXJhYmljLWZvcm0gYmFzZWxpbmUtc2hpZnQgY2FwLWhlaWdodCBjbGlwLXBhdGggY2xpcC1ydWxlIGNvbG9yLWludGVycG9sYXRpb24gY29sb3ItaW50ZXJwb2xhdGlvbi1maWx0ZXJzIGNvbG9yLXByb2ZpbGUgY29sb3ItcmVuZGVyaW5nIGRvbWluYW50LWJhc2VsaW5lIGVuYWJsZS1iYWNrZ3JvdW5kIGZpbGwtb3BhY2l0eSBmaWxsLXJ1bGUgZmxvb2QtY29sb3IgZmxvb2Qtb3BhY2l0eSBmb250LWZhbWlseSBmb250LXNpemUgZm9udC1zaXplLWFkanVzdCBmb250LXN0cmV0Y2ggZm9udC1zdHlsZSBmb250LXZhcmlhbnQgZm9udC13ZWlnaHQgZ2x5cGgtbmFtZSBnbHlwaC1vcmllbnRhdGlvbi1ob3Jpem9udGFsIGdseXBoLW9yaWVudGF0aW9uLXZlcnRpY2FsIGhvcml6LWFkdi14IGhvcml6LW9yaWdpbi14IGltYWdlLXJlbmRlcmluZyBsZXR0ZXItc3BhY2luZyBsaWdodGluZy1jb2xvciBtYXJrZXItZW5kIG1hcmtlci1taWQgbWFya2VyLXN0YXJ0IG92ZXJsaW5lLXBvc2l0aW9uIG92ZXJsaW5lLXRoaWNrbmVzcyBwYWludC1vcmRlciBwYW5vc2UtMSBwb2ludGVyLWV2ZW50cyByZW5kZXJpbmctaW50ZW50IHNoYXBlLXJlbmRlcmluZyBzdG9wLWNvbG9yIHN0b3Atb3BhY2l0eSBzdHJpa2V0aHJvdWdoLXBvc2l0aW9uIHN0cmlrZXRocm91Z2gtdGhpY2tuZXNzIHN0cm9rZS1kYXNoYXJyYXkgc3Ryb2tlLWRhc2hvZmZzZXQgc3Ryb2tlLWxpbmVjYXAgc3Ryb2tlLWxpbmVqb2luIHN0cm9rZS1taXRlcmxpbWl0IHN0cm9rZS1vcGFjaXR5IHN0cm9rZS13aWR0aCB0ZXh0LWFuY2hvciB0ZXh0LWRlY29yYXRpb24gdGV4dC1yZW5kZXJpbmcgdW5kZXJsaW5lLXBvc2l0aW9uIHVuZGVybGluZS10aGlja25lc3MgdW5pY29kZS1iaWRpIHVuaWNvZGUtcmFuZ2UgdW5pdHMtcGVyLWVtIHYtYWxwaGFiZXRpYyB2LWhhbmdpbmcgdi1pZGVvZ3JhcGhpYyB2LW1hdGhlbWF0aWNhbCB2ZWN0b3ItZWZmZWN0IHZlcnQtYWR2LXkgdmVydC1vcmlnaW4teCB2ZXJ0LW9yaWdpbi15IHdvcmQtc3BhY2luZyB3cml0aW5nLW1vZGUgeC1oZWlnaHQgeGxpbms6YWN0dWF0ZSB4bGluazphcmNyb2xlIHhsaW5rOmhyZWYgeGxpbms6cm9sZSB4bGluazpzaG93IHhsaW5rOnRpdGxlIHhsaW5rOnR5cGUgeG1sOmJhc2UgeG1sbnM6eGxpbmsgeG1sOmxhbmcgeG1sOnNwYWNlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKEFqLFxuQmopO3pqLlByb3BlcnRpZXNbYl09MDt6ai5ET01BdHRyaWJ1dGVOYW1lc1tiXT1hfSk7QS5pbmplY3Rpb24uaW5qZWN0RE9NUHJvcGVydHlDb25maWcod2opO0EuaW5qZWN0aW9uLmluamVjdERPTVByb3BlcnR5Q29uZmlnKHpqKTtcbnZhciBDaj1pZy5pbmplY3RJbnRlcm5hbHMsRGo9Ri5FTEVNRU5UX05PREUsRWo9Ri5URVhUX05PREUsRmo9Ri5DT01NRU5UX05PREUsR2o9Ri5ET0NVTUVOVF9OT0RFLEhqPUYuRE9DVU1FTlRfRlJBR01FTlRfTk9ERSxJaj1BLlJPT1RfQVRUUklCVVRFX05BTUUsSmo9a2EuZ2V0Q2hpbGROYW1lc3BhY2UsS2o9Ti5jcmVhdGVFbGVtZW50LExqPU4uY3JlYXRlVGV4dE5vZGUsTWo9Ti5zZXRJbml0aWFsUHJvcGVydGllcyxOaj1OLmRpZmZQcm9wZXJ0aWVzLE9qPU4udXBkYXRlUHJvcGVydGllcyxQaj1OLmRpZmZIeWRyYXRlZFByb3BlcnRpZXMsUWo9Ti5kaWZmSHlkcmF0ZWRUZXh0LFJqPU4ud2FybkZvckRlbGV0ZWRIeWRyYXRhYmxlRWxlbWVudCxTaj1OLndhcm5Gb3JEZWxldGVkSHlkcmF0YWJsZVRleHQsVGo9Ti53YXJuRm9ySW5zZXJ0ZWRIeWRyYXRlZEVsZW1lbnQsVWo9Ti53YXJuRm9ySW5zZXJ0ZWRIeWRyYXRlZFRleHQsVmo9Ry5wcmVjYWNoZUZpYmVyTm9kZSxXaj1HLnVwZGF0ZUZpYmVyUHJvcHM7XG5uYi5pbmplY3Rpb24uaW5qZWN0RmliZXJDb250cm9sbGVkSG9zdENvbXBvbmVudChOKTtEaC5faW5qZWN0RmliZXIoZnVuY3Rpb24oYSl7cmV0dXJuIFhqLmZpbmRIb3N0SW5zdGFuY2UoYSl9KTt2YXIgWWo9bnVsbCxaaj1udWxsO2Z1bmN0aW9uIGFrKGEpe3JldHVybiEoIWF8fGEubm9kZVR5cGUhPT1EaiYmYS5ub2RlVHlwZSE9PUdqJiZhLm5vZGVUeXBlIT09SGomJihhLm5vZGVUeXBlIT09Rmp8fFwiIHJlYWN0LW1vdW50LXBvaW50LXVuc3RhYmxlIFwiIT09YS5ub2RlVmFsdWUpKX1mdW5jdGlvbiBiayhhKXthPWE/YS5ub2RlVHlwZT09PUdqP2EuZG9jdW1lbnRFbGVtZW50OmEuZmlyc3RDaGlsZDpudWxsO3JldHVybiEoIWF8fGEubm9kZVR5cGUhPT1Eanx8IWEuaGFzQXR0cmlidXRlKElqKSl9XG52YXIgWGo9ZnVuY3Rpb24oYSl7dmFyIGI9YS5nZXRQdWJsaWNJbnN0YW5jZTthPWhoKGEpO3ZhciBjPWEuc2NoZWR1bGVVcGRhdGUsZD1hLmdldFByaW9yaXR5Q29udGV4dDtyZXR1cm57Y3JlYXRlQ29udGFpbmVyOmZ1bmN0aW9uKGEpe3ZhciBiPWVlKCk7YT17Y3VycmVudDpiLGNvbnRhaW5lckluZm86YSxpc1NjaGVkdWxlZDohMSxuZXh0U2NoZWR1bGVkUm9vdDpudWxsLGNvbnRleHQ6bnVsbCxwZW5kaW5nQ29udGV4dDpudWxsfTtyZXR1cm4gYi5zdGF0ZU5vZGU9YX0sdXBkYXRlQ29udGFpbmVyOmZ1bmN0aW9uKGEsYixnLGgpe3ZhciBlPWIuY3VycmVudDtnPWpoKGcpO251bGw9PT1iLmNvbnRleHQ/Yi5jb250ZXh0PWc6Yi5wZW5kaW5nQ29udGV4dD1nO2I9aDtoPWQoZSxlZC5lbmFibGVBc3luY1N1YnRyZWVBUEkmJm51bGwhPWEmJm51bGwhPWEudHlwZSYmbnVsbCE9YS50eXBlLnByb3RvdHlwZSYmITA9PT1hLnR5cGUucHJvdG90eXBlLnVuc3RhYmxlX2lzQXN5bmNSZWFjdENvbXBvbmVudCk7XG5hPXtlbGVtZW50OmF9O2toKGUsYSx2b2lkIDA9PT1iP251bGw6YixoKTtjKGUsaCl9LGJhdGNoZWRVcGRhdGVzOmEuYmF0Y2hlZFVwZGF0ZXMsdW5iYXRjaGVkVXBkYXRlczphLnVuYmF0Y2hlZFVwZGF0ZXMsZGVmZXJyZWRVcGRhdGVzOmEuZGVmZXJyZWRVcGRhdGVzLGZsdXNoU3luYzphLmZsdXNoU3luYyxnZXRQdWJsaWNSb290SW5zdGFuY2U6ZnVuY3Rpb24oYSl7YT1hLmN1cnJlbnQ7aWYoIWEuY2hpbGQpcmV0dXJuIG51bGw7c3dpdGNoKGEuY2hpbGQudGFnKXtjYXNlIG9oOnJldHVybiBiKGEuY2hpbGQuc3RhdGVOb2RlKTtkZWZhdWx0OnJldHVybiBhLmNoaWxkLnN0YXRlTm9kZX19LGZpbmRIb3N0SW5zdGFuY2U6ZnVuY3Rpb24oYSl7YT1waChhKTtyZXR1cm4gbnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZX0sZmluZEhvc3RJbnN0YW5jZVdpdGhOb1BvcnRhbHM6ZnVuY3Rpb24oYSl7YT1xaChhKTtyZXR1cm4gbnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZX19fSh7Z2V0Um9vdEhvc3RDb250ZXh0OmZ1bmN0aW9uKGEpe2lmKGEubm9kZVR5cGU9PT1cbkdqKWE9KGE9YS5kb2N1bWVudEVsZW1lbnQpP2EubmFtZXNwYWNlVVJJOkpqKG51bGwsXCJcIik7ZWxzZXt2YXIgYj1hLm5vZGVUeXBlPT09Rmo/YS5wYXJlbnROb2RlOmE7YT1iLm5hbWVzcGFjZVVSSXx8bnVsbDtiPWIudGFnTmFtZTthPUpqKGEsYil9cmV0dXJuIGF9LGdldENoaWxkSG9zdENvbnRleHQ6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gSmooYSxiKX0sZ2V0UHVibGljSW5zdGFuY2U6ZnVuY3Rpb24oYSl7cmV0dXJuIGF9LHByZXBhcmVGb3JDb21taXQ6ZnVuY3Rpb24oKXtZaj1NLmlzRW5hYmxlZCgpO1pqPXpoLmdldFNlbGVjdGlvbkluZm9ybWF0aW9uKCk7TS5zZXRFbmFibGVkKCExKX0scmVzZXRBZnRlckNvbW1pdDpmdW5jdGlvbigpe3poLnJlc3RvcmVTZWxlY3Rpb24oWmopO1pqPW51bGw7TS5zZXRFbmFibGVkKFlqKTtZaj1udWxsfSxjcmVhdGVJbnN0YW5jZTpmdW5jdGlvbihhLGIsYyxkLGUpe2E9S2ooYSxiLGMsZCk7VmooZSxhKTtXaihhLGIpO3JldHVybiBhfSxhcHBlbmRJbml0aWFsQ2hpbGQ6ZnVuY3Rpb24oYSxcbmIpe2EuYXBwZW5kQ2hpbGQoYil9LGZpbmFsaXplSW5pdGlhbENoaWxkcmVuOmZ1bmN0aW9uKGEsYixjLGQpe01qKGEsYixjLGQpO2E6e3N3aXRjaChiKXtjYXNlIFwiYnV0dG9uXCI6Y2FzZSBcImlucHV0XCI6Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJ0ZXh0YXJlYVwiOmE9ISFjLmF1dG9Gb2N1czticmVhayBhfWE9ITF9cmV0dXJuIGF9LHByZXBhcmVVcGRhdGU6ZnVuY3Rpb24oYSxiLGMsZCxlKXtyZXR1cm4gTmooYSxiLGMsZCxlKX0sY29tbWl0TW91bnQ6ZnVuY3Rpb24oYSl7YS5mb2N1cygpfSxjb21taXRVcGRhdGU6ZnVuY3Rpb24oYSxiLGMsZCxlKXtXaihhLGUpO09qKGEsYixjLGQsZSl9LHNob3VsZFNldFRleHRDb250ZW50OmZ1bmN0aW9uKGEsYil7cmV0dXJuXCJ0ZXh0YXJlYVwiPT09YXx8XCJzdHJpbmdcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm51bWJlclwiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwib2JqZWN0XCI9PT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmbnVsbCE9PWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJlxuXCJzdHJpbmdcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MLl9faHRtbH0scmVzZXRUZXh0Q29udGVudDpmdW5jdGlvbihhKXthLnRleHRDb250ZW50PVwiXCJ9LHNob3VsZERlcHJpb3JpdGl6ZVN1YnRyZWU6ZnVuY3Rpb24oYSxiKXtyZXR1cm4hIWIuaGlkZGVufSxjcmVhdGVUZXh0SW5zdGFuY2U6ZnVuY3Rpb24oYSxiLGMsZCl7YT1MaihhLGIpO1ZqKGQsYSk7cmV0dXJuIGF9LGNvbW1pdFRleHRVcGRhdGU6ZnVuY3Rpb24oYSxiLGMpe2Eubm9kZVZhbHVlPWN9LGFwcGVuZENoaWxkOmZ1bmN0aW9uKGEsYil7YS5hcHBlbmRDaGlsZChiKX0sYXBwZW5kQ2hpbGRUb0NvbnRhaW5lcjpmdW5jdGlvbihhLGIpe2Eubm9kZVR5cGU9PT1Gaj9hLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGIsYSk6YS5hcHBlbmRDaGlsZChiKX0saW5zZXJ0QmVmb3JlOmZ1bmN0aW9uKGEsYixjKXthLmluc2VydEJlZm9yZShiLGMpfSxpbnNlcnRJbkNvbnRhaW5lckJlZm9yZTpmdW5jdGlvbihhLFxuYixjKXthLm5vZGVUeXBlPT09Rmo/YS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShiLGMpOmEuaW5zZXJ0QmVmb3JlKGIsYyl9LHJlbW92ZUNoaWxkOmZ1bmN0aW9uKGEsYil7YS5yZW1vdmVDaGlsZChiKX0scmVtb3ZlQ2hpbGRGcm9tQ29udGFpbmVyOmZ1bmN0aW9uKGEsYil7YS5ub2RlVHlwZT09PUZqP2EucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChiKTphLnJlbW92ZUNoaWxkKGIpfSxjYW5IeWRyYXRlSW5zdGFuY2U6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gYS5ub2RlVHlwZT09PURqJiZiPT09YS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpfSxjYW5IeWRyYXRlVGV4dEluc3RhbmNlOmZ1bmN0aW9uKGEsYil7cmV0dXJuXCJcIj09PWI/ITE6YS5ub2RlVHlwZT09PUVqfSxnZXROZXh0SHlkcmF0YWJsZVNpYmxpbmc6ZnVuY3Rpb24oYSl7Zm9yKGE9YS5uZXh0U2libGluZzthJiZhLm5vZGVUeXBlIT09RGomJmEubm9kZVR5cGUhPT1FajspYT1hLm5leHRTaWJsaW5nO3JldHVybiBhfSxnZXRGaXJzdEh5ZHJhdGFibGVDaGlsZDpmdW5jdGlvbihhKXtmb3IoYT1cbmEuZmlyc3RDaGlsZDthJiZhLm5vZGVUeXBlIT09RGomJmEubm9kZVR5cGUhPT1FajspYT1hLm5leHRTaWJsaW5nO3JldHVybiBhfSxoeWRyYXRlSW5zdGFuY2U6ZnVuY3Rpb24oYSxiLGMsZCxlLGYpe1ZqKGYsYSk7V2ooYSxjKTtyZXR1cm4gUGooYSxiLGMsZSxkKX0saHlkcmF0ZVRleHRJbnN0YW5jZTpmdW5jdGlvbihhLGIsYyl7VmooYyxhKTtyZXR1cm4gUWooYSxiKX0sZGlkTm90SHlkcmF0ZUluc3RhbmNlOmZ1bmN0aW9uKGEsYil7MT09PWIubm9kZVR5cGU/UmooYSxiKTpTaihhLGIpfSxkaWROb3RGaW5kSHlkcmF0YWJsZUluc3RhbmNlOmZ1bmN0aW9uKGEsYixjKXtUaihhLGIsYyl9LGRpZE5vdEZpbmRIeWRyYXRhYmxlVGV4dEluc3RhbmNlOmZ1bmN0aW9uKGEsYil7VWooYSxiKX0sc2NoZWR1bGVEZWZlcnJlZENhbGxiYWNrOmRkLnJJQyx1c2VTeW5jU2NoZWR1bGluZzohMH0pO3NiLmluamVjdGlvbi5pbmplY3RGaWJlckJhdGNoZWRVcGRhdGVzKFhqLmJhdGNoZWRVcGRhdGVzKTtcbmZ1bmN0aW9uIGNrKGEsYixjLGQsZSl7YWsoYyk/dm9pZCAwOncoXCIyMDBcIik7dmFyIGY9Yy5fcmVhY3RSb290Q29udGFpbmVyO2lmKGYpWGoudXBkYXRlQ29udGFpbmVyKGIsZixhLGUpO2Vsc2V7aWYoIWQmJiFiayhjKSlmb3IoZD12b2lkIDA7ZD1jLmxhc3RDaGlsZDspYy5yZW1vdmVDaGlsZChkKTt2YXIgZz1Yai5jcmVhdGVDb250YWluZXIoYyk7Zj1jLl9yZWFjdFJvb3RDb250YWluZXI9ZztYai51bmJhdGNoZWRVcGRhdGVzKGZ1bmN0aW9uKCl7WGoudXBkYXRlQ29udGFpbmVyKGIsZyxhLGUpfSl9cmV0dXJuIFhqLmdldFB1YmxpY1Jvb3RJbnN0YW5jZShmKX1mdW5jdGlvbiBkayhhLGIpe3ZhciBjPTI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpudWxsO2FrKGIpP3ZvaWQgMDp3KFwiMjAwXCIpO3JldHVybiBuZS5jcmVhdGVQb3J0YWwoYSxiLG51bGwsYyl9XG52YXIgZWs9e2NyZWF0ZVBvcnRhbDpkayxoeWRyYXRlOmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gY2sobnVsbCxhLGIsITAsYyl9LHJlbmRlcjpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIGNrKG51bGwsYSxiLCExLGMpfSx1bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcjpmdW5jdGlvbihhLGIsYyxkKXtudWxsIT1hJiZQYS5oYXMoYSk/dm9pZCAwOncoXCIzOFwiKTtyZXR1cm4gY2soYSxiLGMsITEsZCl9LHVubW91bnRDb21wb25lbnRBdE5vZGU6ZnVuY3Rpb24oYSl7YWsoYSk/dm9pZCAwOncoXCI0MFwiKTtyZXR1cm4gYS5fcmVhY3RSb290Q29udGFpbmVyPyhYai51bmJhdGNoZWRVcGRhdGVzKGZ1bmN0aW9uKCl7Y2sobnVsbCxudWxsLGEsITEsZnVuY3Rpb24oKXthLl9yZWFjdFJvb3RDb250YWluZXI9bnVsbH0pfSksITApOiExfSxmaW5kRE9NTm9kZTpEaCx1bnN0YWJsZV9jcmVhdGVQb3J0YWw6ZGssdW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXM6c2IuYmF0Y2hlZFVwZGF0ZXMsXG51bnN0YWJsZV9kZWZlcnJlZFVwZGF0ZXM6WGouZGVmZXJyZWRVcGRhdGVzLGZsdXNoU3luYzpYai5mbHVzaFN5bmMsX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ6e0V2ZW50UGx1Z2luSHViOkpiLEV2ZW50UGx1Z2luUmVnaXN0cnk6c2EsRXZlbnRQcm9wYWdhdG9yczpUaCxSZWFjdENvbnRyb2xsZWRDb21wb25lbnQ6bmIsUmVhY3RET01Db21wb25lbnRUcmVlOkcsUmVhY3RET01FdmVudExpc3RlbmVyOkx9fTtDaih7ZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6Ry5nZXRDbG9zZXN0SW5zdGFuY2VGcm9tTm9kZSxmaW5kSG9zdEluc3RhbmNlQnlGaWJlcjpYai5maW5kSG9zdEluc3RhbmNlLGJ1bmRsZVR5cGU6MCx2ZXJzaW9uOlwiMTYuMC4xXCIscmVuZGVyZXJQYWNrYWdlTmFtZTpcInJlYWN0LWRvbVwifSk7bW9kdWxlLmV4cG9ydHM9ZWs7XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogVXNlIGludmFyaWFudCgpIHRvIGFzc2VydCBzdGF0ZSB3aGljaCB5b3VyIHByb2dyYW0gYXNzdW1lcyB0byBiZSB0cnVlLlxuICpcbiAqIFByb3ZpZGUgc3ByaW50Zi1zdHlsZSBmb3JtYXQgKG9ubHkgJXMgaXMgc3VwcG9ydGVkKSBhbmQgYXJndW1lbnRzXG4gKiB0byBwcm92aWRlIGluZm9ybWF0aW9uIGFib3V0IHdoYXQgYnJva2UgYW5kIHdoYXQgeW91IHdlcmVcbiAqIGV4cGVjdGluZy5cbiAqXG4gKiBUaGUgaW52YXJpYW50IG1lc3NhZ2Ugd2lsbCBiZSBzdHJpcHBlZCBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGludmFyaWFudFxuICogd2lsbCByZW1haW4gdG8gZW5zdXJlIGxvZ2ljIGRvZXMgbm90IGRpZmZlciBpbiBwcm9kdWN0aW9uLlxuICovXG5cbnZhciB2YWxpZGF0ZUZvcm1hdCA9IGZ1bmN0aW9uIHZhbGlkYXRlRm9ybWF0KGZvcm1hdCkge307XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhbGlkYXRlRm9ybWF0ID0gZnVuY3Rpb24gdmFsaWRhdGVGb3JtYXQoZm9ybWF0KSB7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFyaWFudCByZXF1aXJlcyBhbiBlcnJvciBtZXNzYWdlIGFyZ3VtZW50Jyk7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBpbnZhcmlhbnQoY29uZGl0aW9uLCBmb3JtYXQsIGEsIGIsIGMsIGQsIGUsIGYpIHtcbiAgdmFsaWRhdGVGb3JtYXQoZm9ybWF0KTtcblxuICBpZiAoIWNvbmRpdGlvbikge1xuICAgIHZhciBlcnJvcjtcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGVycm9yID0gbmV3IEVycm9yKCdNaW5pZmllZCBleGNlcHRpb24gb2NjdXJyZWQ7IHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCAnICsgJ2ZvciB0aGUgZnVsbCBlcnJvciBtZXNzYWdlIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhcmdzID0gW2EsIGIsIGMsIGQsIGUsIGZdO1xuICAgICAgdmFyIGFyZ0luZGV4ID0gMDtcbiAgICAgIGVycm9yID0gbmV3IEVycm9yKGZvcm1hdC5yZXBsYWNlKC8lcy9nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBhcmdzW2FyZ0luZGV4KytdO1xuICAgICAgfSkpO1xuICAgICAgZXJyb3IubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICB9XG5cbiAgICBlcnJvci5mcmFtZXNUb1BvcCA9IDE7IC8vIHdlIGRvbid0IGNhcmUgYWJvdXQgaW52YXJpYW50J3Mgb3duIGZyYW1lXG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnZhcmlhbnQ7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgY2FuVXNlRE9NID0gISEodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmRvY3VtZW50ICYmIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcblxuLyoqXG4gKiBTaW1wbGUsIGxpZ2h0d2VpZ2h0IG1vZHVsZSBhc3Npc3Rpbmcgd2l0aCB0aGUgZGV0ZWN0aW9uIGFuZCBjb250ZXh0IG9mXG4gKiBXb3JrZXIuIEhlbHBzIGF2b2lkIGNpcmN1bGFyIGRlcGVuZGVuY2llcyBhbmQgYWxsb3dzIGNvZGUgdG8gcmVhc29uIGFib3V0XG4gKiB3aGV0aGVyIG9yIG5vdCB0aGV5IGFyZSBpbiBhIFdvcmtlciwgZXZlbiBpZiB0aGV5IG5ldmVyIGluY2x1ZGUgdGhlIG1haW5cbiAqIGBSZWFjdFdvcmtlcmAgZGVwZW5kZW5jeS5cbiAqL1xudmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0ge1xuXG4gIGNhblVzZURPTTogY2FuVXNlRE9NLFxuXG4gIGNhblVzZVdvcmtlcnM6IHR5cGVvZiBXb3JrZXIgIT09ICd1bmRlZmluZWQnLFxuXG4gIGNhblVzZUV2ZW50TGlzdGVuZXJzOiBjYW5Vc2VET00gJiYgISEod2luZG93LmFkZEV2ZW50TGlzdGVuZXIgfHwgd2luZG93LmF0dGFjaEV2ZW50KSxcblxuICBjYW5Vc2VWaWV3cG9ydDogY2FuVXNlRE9NICYmICEhd2luZG93LnNjcmVlbixcblxuICBpc0luV29ya2VyOiAhY2FuVXNlRE9NIC8vIEZvciBub3csIHRoaXMgaXMgdHJ1ZSAtIG1pZ2h0IGNoYW5nZSBpbiB0aGUgZnV0dXJlLlxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEV4ZWN1dGlvbkVudmlyb25tZW50OyIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbnZhciBlbXB0eUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9lbXB0eUZ1bmN0aW9uJyk7XG5cbi8qKlxuICogVXBzdHJlYW0gdmVyc2lvbiBvZiBldmVudCBsaXN0ZW5lci4gRG9lcyBub3QgdGFrZSBpbnRvIGFjY291bnQgc3BlY2lmaWNcbiAqIG5hdHVyZSBvZiBwbGF0Zm9ybS5cbiAqL1xudmFyIEV2ZW50TGlzdGVuZXIgPSB7XG4gIC8qKlxuICAgKiBMaXN0ZW4gdG8gRE9NIGV2ZW50cyBkdXJpbmcgdGhlIGJ1YmJsZSBwaGFzZS5cbiAgICpcbiAgICogQHBhcmFtIHtET01FdmVudFRhcmdldH0gdGFyZ2V0IERPTSBlbGVtZW50IHRvIHJlZ2lzdGVyIGxpc3RlbmVyIG9uLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnRUeXBlIEV2ZW50IHR5cGUsIGUuZy4gJ2NsaWNrJyBvciAnbW91c2VvdmVyJy5cbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2sgQ2FsbGJhY2sgZnVuY3Rpb24uXG4gICAqIEByZXR1cm4ge29iamVjdH0gT2JqZWN0IHdpdGggYSBgcmVtb3ZlYCBtZXRob2QuXG4gICAqL1xuICBsaXN0ZW46IGZ1bmN0aW9uIGxpc3Rlbih0YXJnZXQsIGV2ZW50VHlwZSwgY2FsbGJhY2spIHtcbiAgICBpZiAodGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIpIHtcbiAgICAgIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgY2FsbGJhY2ssIGZhbHNlKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgICAgIHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgY2FsbGJhY2ssIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKHRhcmdldC5hdHRhY2hFdmVudCkge1xuICAgICAgdGFyZ2V0LmF0dGFjaEV2ZW50KCdvbicgKyBldmVudFR5cGUsIGNhbGxiYWNrKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgICAgIHRhcmdldC5kZXRhY2hFdmVudCgnb24nICsgZXZlbnRUeXBlLCBjYWxsYmFjayk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBMaXN0ZW4gdG8gRE9NIGV2ZW50cyBkdXJpbmcgdGhlIGNhcHR1cmUgcGhhc2UuXG4gICAqXG4gICAqIEBwYXJhbSB7RE9NRXZlbnRUYXJnZXR9IHRhcmdldCBET00gZWxlbWVudCB0byByZWdpc3RlciBsaXN0ZW5lciBvbi5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50VHlwZSBFdmVudCB0eXBlLCBlLmcuICdjbGljaycgb3IgJ21vdXNlb3ZlcicuXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrIENhbGxiYWNrIGZ1bmN0aW9uLlxuICAgKiBAcmV0dXJuIHtvYmplY3R9IE9iamVjdCB3aXRoIGEgYHJlbW92ZWAgbWV0aG9kLlxuICAgKi9cbiAgY2FwdHVyZTogZnVuY3Rpb24gY2FwdHVyZSh0YXJnZXQsIGV2ZW50VHlwZSwgY2FsbGJhY2spIHtcbiAgICBpZiAodGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIpIHtcbiAgICAgIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgY2FsbGJhY2ssIHRydWUpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICAgICAgdGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBjYWxsYmFjaywgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0F0dGVtcHRlZCB0byBsaXN0ZW4gdG8gZXZlbnRzIGR1cmluZyB0aGUgY2FwdHVyZSBwaGFzZSBvbiBhICcgKyAnYnJvd3NlciB0aGF0IGRvZXMgbm90IHN1cHBvcnQgdGhlIGNhcHR1cmUgcGhhc2UuIFlvdXIgYXBwbGljYXRpb24gJyArICd3aWxsIG5vdCByZWNlaXZlIHNvbWUgZXZlbnRzLicpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcmVtb3ZlOiBlbXB0eUZ1bmN0aW9uXG4gICAgICB9O1xuICAgIH1cbiAgfSxcblxuICByZWdpc3RlckRlZmF1bHQ6IGZ1bmN0aW9uIHJlZ2lzdGVyRGVmYXVsdCgpIHt9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEV2ZW50TGlzdGVuZXI7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgZW1wdHlPYmplY3QgPSB7fTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgT2JqZWN0LmZyZWV6ZShlbXB0eU9iamVjdCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZW1wdHlPYmplY3Q7IiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICovXG5cbnZhciBpc1RleHROb2RlID0gcmVxdWlyZSgnLi9pc1RleHROb2RlJyk7XG5cbi8qZXNsaW50LWRpc2FibGUgbm8tYml0d2lzZSAqL1xuXG4vKipcbiAqIENoZWNrcyBpZiBhIGdpdmVuIERPTSBub2RlIGNvbnRhaW5zIG9yIGlzIGFub3RoZXIgRE9NIG5vZGUuXG4gKi9cbmZ1bmN0aW9uIGNvbnRhaW5zTm9kZShvdXRlck5vZGUsIGlubmVyTm9kZSkge1xuICBpZiAoIW91dGVyTm9kZSB8fCAhaW5uZXJOb2RlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9IGVsc2UgaWYgKG91dGVyTm9kZSA9PT0gaW5uZXJOb2RlKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gZWxzZSBpZiAoaXNUZXh0Tm9kZShvdXRlck5vZGUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9IGVsc2UgaWYgKGlzVGV4dE5vZGUoaW5uZXJOb2RlKSkge1xuICAgIHJldHVybiBjb250YWluc05vZGUob3V0ZXJOb2RlLCBpbm5lck5vZGUucGFyZW50Tm9kZSk7XG4gIH0gZWxzZSBpZiAoJ2NvbnRhaW5zJyBpbiBvdXRlck5vZGUpIHtcbiAgICByZXR1cm4gb3V0ZXJOb2RlLmNvbnRhaW5zKGlubmVyTm9kZSk7XG4gIH0gZWxzZSBpZiAob3V0ZXJOb2RlLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKSB7XG4gICAgcmV0dXJuICEhKG91dGVyTm9kZS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihpbm5lck5vZGUpICYgMTYpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnRhaW5zTm9kZTsiLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqL1xuXG52YXIgaXNOb2RlID0gcmVxdWlyZSgnLi9pc05vZGUnKTtcblxuLyoqXG4gKiBAcGFyYW0geyp9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNoZWNrLlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciBvciBub3QgdGhlIG9iamVjdCBpcyBhIERPTSB0ZXh0IG5vZGUuXG4gKi9cbmZ1bmN0aW9uIGlzVGV4dE5vZGUob2JqZWN0KSB7XG4gIHJldHVybiBpc05vZGUob2JqZWN0KSAmJiBvYmplY3Qubm9kZVR5cGUgPT0gMztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc1RleHROb2RlOyIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbi8qKlxuICogQHBhcmFtIHsqfSBvYmplY3QgVGhlIG9iamVjdCB0byBjaGVjay5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgb3Igbm90IHRoZSBvYmplY3QgaXMgYSBET00gbm9kZS5cbiAqL1xuZnVuY3Rpb24gaXNOb2RlKG9iamVjdCkge1xuICB2YXIgZG9jID0gb2JqZWN0ID8gb2JqZWN0Lm93bmVyRG9jdW1lbnQgfHwgb2JqZWN0IDogZG9jdW1lbnQ7XG4gIHZhciBkZWZhdWx0VmlldyA9IGRvYy5kZWZhdWx0VmlldyB8fCB3aW5kb3c7XG4gIHJldHVybiAhIShvYmplY3QgJiYgKHR5cGVvZiBkZWZhdWx0Vmlldy5Ob2RlID09PSAnZnVuY3Rpb24nID8gb2JqZWN0IGluc3RhbmNlb2YgZGVmYXVsdFZpZXcuTm9kZSA6IHR5cGVvZiBvYmplY3QgPT09ICdvYmplY3QnICYmIHR5cGVvZiBvYmplY3Qubm9kZVR5cGUgPT09ICdudW1iZXInICYmIHR5cGVvZiBvYmplY3Qubm9kZU5hbWUgPT09ICdzdHJpbmcnKSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNOb2RlOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR9IG5vZGUgaW5wdXQvdGV4dGFyZWEgdG8gZm9jdXNcbiAqL1xuXG5mdW5jdGlvbiBmb2N1c05vZGUobm9kZSkge1xuICAvLyBJRTggY2FuIHRocm93IFwiQ2FuJ3QgbW92ZSBmb2N1cyB0byB0aGUgY29udHJvbCBiZWNhdXNlIGl0IGlzIGludmlzaWJsZSxcbiAgLy8gbm90IGVuYWJsZWQsIG9yIG9mIGEgdHlwZSB0aGF0IGRvZXMgbm90IGFjY2VwdCB0aGUgZm9jdXMuXCIgZm9yIGFsbCBraW5kcyBvZlxuICAvLyByZWFzb25zIHRoYXQgYXJlIHRvbyBleHBlbnNpdmUgYW5kIGZyYWdpbGUgdG8gdGVzdC5cbiAgdHJ5IHtcbiAgICBub2RlLmZvY3VzKCk7XG4gIH0gY2F0Y2ggKGUpIHt9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZm9jdXNOb2RlOyIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbi8qIGVzbGludC1kaXNhYmxlIGZiLXd3dy90eXBlb2YtdW5kZWZpbmVkICovXG5cbi8qKlxuICogU2FtZSBhcyBkb2N1bWVudC5hY3RpdmVFbGVtZW50IGJ1dCB3cmFwcyBpbiBhIHRyeS1jYXRjaCBibG9jay4gSW4gSUUgaXQgaXNcbiAqIG5vdCBzYWZlIHRvIGNhbGwgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCBpZiB0aGVyZSBpcyBub3RoaW5nIGZvY3VzZWQuXG4gKlxuICogVGhlIGFjdGl2ZUVsZW1lbnQgd2lsbCBiZSBudWxsIG9ubHkgaWYgdGhlIGRvY3VtZW50IG9yIGRvY3VtZW50IGJvZHkgaXMgbm90XG4gKiB5ZXQgZGVmaW5lZC5cbiAqXG4gKiBAcGFyYW0gez9ET01Eb2N1bWVudH0gZG9jIERlZmF1bHRzIHRvIGN1cnJlbnQgZG9jdW1lbnQuXG4gKiBAcmV0dXJuIHs/RE9NRWxlbWVudH1cbiAqL1xuZnVuY3Rpb24gZ2V0QWN0aXZlRWxlbWVudChkb2MpIC8qP0RPTUVsZW1lbnQqL3tcbiAgZG9jID0gZG9jIHx8ICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnID8gZG9jdW1lbnQgOiB1bmRlZmluZWQpO1xuICBpZiAodHlwZW9mIGRvYyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICB0cnkge1xuICAgIHJldHVybiBkb2MuYWN0aXZlRWxlbWVudCB8fCBkb2MuYm9keTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBkb2MuYm9keTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEFjdGl2ZUVsZW1lbnQ7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9IHJlcXVpcmUoJy4vbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0Jyk7XG5cbmZ1bmN0aW9uIGVtcHR5RnVuY3Rpb24oKSB7fVxuZnVuY3Rpb24gZW1wdHlGdW5jdGlvbldpdGhSZXNldCgpIHt9XG5lbXB0eUZ1bmN0aW9uV2l0aFJlc2V0LnJlc2V0V2FybmluZ0NhY2hlID0gZW1wdHlGdW5jdGlvbjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgZnVuY3Rpb24gc2hpbShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUsIHNlY3JldCkge1xuICAgIGlmIChzZWNyZXQgPT09IFJlYWN0UHJvcFR5cGVzU2VjcmV0KSB7XG4gICAgICAvLyBJdCBpcyBzdGlsbCBzYWZlIHdoZW4gY2FsbGVkIGZyb20gUmVhY3QuXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoXG4gICAgICAnQ2FsbGluZyBQcm9wVHlwZXMgdmFsaWRhdG9ycyBkaXJlY3RseSBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBgcHJvcC10eXBlc2AgcGFja2FnZS4gJyArXG4gICAgICAnVXNlIFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcygpIHRvIGNhbGwgdGhlbS4gJyArXG4gICAgICAnUmVhZCBtb3JlIGF0IGh0dHA6Ly9mYi5tZS91c2UtY2hlY2stcHJvcC10eXBlcydcbiAgICApO1xuICAgIGVyci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgIHRocm93IGVycjtcbiAgfTtcbiAgc2hpbS5pc1JlcXVpcmVkID0gc2hpbTtcbiAgZnVuY3Rpb24gZ2V0U2hpbSgpIHtcbiAgICByZXR1cm4gc2hpbTtcbiAgfTtcbiAgLy8gSW1wb3J0YW50IVxuICAvLyBLZWVwIHRoaXMgbGlzdCBpbiBzeW5jIHdpdGggcHJvZHVjdGlvbiB2ZXJzaW9uIGluIGAuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzLmpzYC5cbiAgdmFyIFJlYWN0UHJvcFR5cGVzID0ge1xuICAgIGFycmF5OiBzaGltLFxuICAgIGJvb2w6IHNoaW0sXG4gICAgZnVuYzogc2hpbSxcbiAgICBudW1iZXI6IHNoaW0sXG4gICAgb2JqZWN0OiBzaGltLFxuICAgIHN0cmluZzogc2hpbSxcbiAgICBzeW1ib2w6IHNoaW0sXG5cbiAgICBhbnk6IHNoaW0sXG4gICAgYXJyYXlPZjogZ2V0U2hpbSxcbiAgICBlbGVtZW50OiBzaGltLFxuICAgIGVsZW1lbnRUeXBlOiBzaGltLFxuICAgIGluc3RhbmNlT2Y6IGdldFNoaW0sXG4gICAgbm9kZTogc2hpbSxcbiAgICBvYmplY3RPZjogZ2V0U2hpbSxcbiAgICBvbmVPZjogZ2V0U2hpbSxcbiAgICBvbmVPZlR5cGU6IGdldFNoaW0sXG4gICAgc2hhcGU6IGdldFNoaW0sXG4gICAgZXhhY3Q6IGdldFNoaW0sXG5cbiAgICBjaGVja1Byb3BUeXBlczogZW1wdHlGdW5jdGlvbldpdGhSZXNldCxcbiAgICByZXNldFdhcm5pbmdDYWNoZTogZW1wdHlGdW5jdGlvblxuICB9O1xuXG4gIFJlYWN0UHJvcFR5cGVzLlByb3BUeXBlcyA9IFJlYWN0UHJvcFR5cGVzO1xuXG4gIHJldHVybiBSZWFjdFByb3BUeXBlcztcbn07XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gJ1NFQ1JFVF9ET19OT1RfUEFTU19USElTX09SX1lPVV9XSUxMX0JFX0ZJUkVEJztcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFByb3BUeXBlc1NlY3JldDtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob3JpZ2luYWxNb2R1bGUpIHtcblx0aWYgKCFvcmlnaW5hbE1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcblx0XHR2YXIgbW9kdWxlID0gT2JqZWN0LmNyZWF0ZShvcmlnaW5hbE1vZHVsZSk7XG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XG5cdFx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwibG9hZGVkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmw7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJpZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiZXhwb3J0c1wiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlXG5cdFx0fSk7XG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XG5cdH1cblx0cmV0dXJuIG1vZHVsZTtcbn07XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBCcm93c2VyUm91dGVyLCBSb3V0ZSwgU3dpdGNoIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XHJcbmltcG9ydCBIZWFkZXIgZnJvbSAnLi4vY29tcG9uZW50cy9IZWFkZXInO1xyXG5pbXBvcnQgRXhwZW5zZURhc2hib2FyZFBhZ2UgZnJvbSAnLi4vY29tcG9uZW50cy9FeHBlbnNlRGFzaGJvYXJkUGFnZSc7XHJcbmltcG9ydCBBZGRFeHBlbnNlUGFnZSBmcm9tICcuLi9jb21wb25lbnRzL0FkZEV4cGVuc2VQYWdlJztcclxuaW1wb3J0IEVkaXRFeHBlbnNlUGFnZSBmcm9tICcuLi9jb21wb25lbnRzL0VkaXRFeHBlbnNlUGFnZSc7XHJcbmltcG9ydCBIZWxwUGFnZSBmcm9tICcuLi9jb21wb25lbnRzL0hlbHBQYWdlJztcclxuaW1wb3J0IE5vdEZvdW5kUGFnZSBmcm9tICcuLi9jb21wb25lbnRzL05vdEZvdW5kUGFnZSc7XHJcblxyXG5jb25zdCBBcHBSb3V0ZXIgPSAoKT0+KFxyXG4gIDxCcm93c2VyUm91dGVyPlxyXG4gICAgPGRpdj5cclxuICAgICAgPEhlYWRlciAvPlxyXG4gICAgICA8U3dpdGNoPlxyXG4gICAgICAgIDxSb3V0ZSBwYXRoPVwiL1wiIGNvbXBvbmVudD17RXhwZW5zZURhc2hib2FyZFBhZ2V9IGV4YWN0PXt0cnVlfSAvPlxyXG4gICAgICAgIDxSb3V0ZSBwYXRoPVwiL2NyZWF0ZVwiIGNvbXBvbmVudD17QWRkRXhwZW5zZVBhZ2V9IC8+XHJcbiAgICAgICAgPFJvdXRlIHBhdGg9XCIvZWRpdC86aWRcIiBjb21wb25lbnQ9e0VkaXRFeHBlbnNlUGFnZX0gLz5cclxuICAgICAgICA8Um91dGUgcGF0aD1cIi9oZWxwXCIgY29tcG9uZW50PXtIZWxwUGFnZX0gLz5cclxuICAgICAgICA8Um91dGUgY29tcG9uZW50PXtOb3RGb3VuZFBhZ2V9IC8+XHJcbiAgICAgIDwvU3dpdGNoPlxyXG4gICAgPC9kaXY+XHJcbiAgPC9Ccm93c2VyUm91dGVyPlxyXG4pO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgQXBwUm91dGVyOyIsIm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoYXJyKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJyKSA9PSAnW29iamVjdCBBcnJheV0nO1xufTtcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IE5hdkxpbmsgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcclxuXHJcbmNvbnN0IEhlYWRlciA9ICgpPT4oXHJcbiAgPGhlYWRlcj5cclxuICAgIDxoMT5FeHBlbnNpZnk8L2gxPlxyXG4gICAgPE5hdkxpbmsgdG89XCIvXCIgYWN0aXZlQ2xhc3NOYW1lPVwiaXMtYWN0aXZlXCIgZXhhY3Q9e3RydWV9PkRhc2hib2FyZDwvTmF2TGluaz5cclxuICAgIDxOYXZMaW5rIHRvPVwiL2NyZWF0ZVwiIGFjdGl2ZUNsYXNzTmFtZT1cImlzLWFjdGl2ZVwiPkNyZWF0ZSBFeHBlbnNlPC9OYXZMaW5rPlxyXG4gICAgPE5hdkxpbmsgdG89XCIvaGVscFwiIGFjdGl2ZUNsYXNzTmFtZT1cImlzLWFjdGl2ZVwiPkhlbHA8L05hdkxpbms+XHJcbiAgPC9oZWFkZXI+XHJcbik7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBIZWFkZXI7XHJcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBFeHBlbnNlTGlzdCBmcm9tICcuL0V4cGVuc2VMaXN0JztcclxuaW1wb3J0IEV4cGVuc2VMaXN0RmlsdGVycyBmcm9tICcuL0V4cGVuc2VMaXN0RmlsdGVycyc7XHJcblxyXG5jb25zdCBFeHBlbnNlRGFzaGJvYXJkUGFnZSA9ICgpID0+IChcclxuICA8ZGl2PlxyXG4gICAgPGRpdj5cclxuICAgICAgPEV4cGVuc2VMaXN0RmlsdGVycyAvPlxyXG4gICAgICA8RXhwZW5zZUxpc3QgLz5cclxuICAgIDwvZGl2PlxyXG4gIDwvZGl2PlxyXG4pO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgRXhwZW5zZURhc2hib2FyZFBhZ2U7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcclxuaW1wb3J0IEV4cGVuc2VMaXN0SXRlbSBmcm9tICcuL0V4cGVuc2VMaXN0SXRlbSc7XHJcbmltcG9ydCBzZWxlY3RlZEV4cGVuc2VzIGZyb20gJy4uL3NlbGVjdG9ycy9leHBlbnNlcyc7XHJcblxyXG5leHBvcnQgY29uc3QgRXhwZW5zZUxpc3QgPSAocHJvcHMpPT4oXHJcbiAgPGRpdj5cclxuICAgIHtcclxuICAgICAgcHJvcHMuZXhwZW5zZXMubGVuZ3RoID09PSAwID8gKFxyXG4gICAgICAgIDxwPk5vIEV4cGVuc2VzPC9wPlxyXG4gICAgICApIDogKFxyXG4gICAgICAgICAgcHJvcHMuZXhwZW5zZXMubWFwKChleHBlbnNlKT0+e1xyXG4gICAgICAgICAgICByZXR1cm4gPEV4cGVuc2VMaXN0SXRlbSBrZXk9e2V4cGVuc2UuaWR9IHsuLi5leHBlbnNlfSAvPlxyXG4gICAgICAgICAgfSlcclxuICAgICAgKVxyXG4gICAgfVxyXG4gIDwvZGl2PlxyXG4pO1xyXG5cclxuY29uc3QgbWFwU3RhdGVUb1Byb3BzID0gKHN0YXRlKT0+e1xyXG4gIHJldHVybiB7XHJcbiAgICBleHBlbnNlczogc2VsZWN0ZWRFeHBlbnNlcyhzdGF0ZS5leHBlbnNlcywgc3RhdGUuZmlsdGVycylcclxuICB9O1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMpKEV4cGVuc2VMaXN0KTtcclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgTGluayB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xyXG5cclxuY29uc3QgRXhwZW5zZUxpc3RJdGVtID0gKHsgaWQsIGRlc2NyaXB0aW9uLCBhbW91bnQsIGNyZWF0ZWRBdCB9KT0+KFxyXG4gIDxkaXY+XHJcbiAgICA8TGluayB0bz17YC9lZGl0LyR7aWR9YH0+XHJcbiAgICAgIDxoMz57ZGVzY3JpcHRpb259PC9oMz5cclxuICAgIDwvTGluaz5cclxuICAgIDxwPnthbW91bnR9IC0ge2NyZWF0ZWRBdH08L3A+XHJcbiAgPC9kaXY+XHJcbik7XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgRXhwZW5zZUxpc3RJdGVtOyIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obW9kdWxlKSB7XG5cdGlmICghbW9kdWxlLndlYnBhY2tQb2x5ZmlsbCkge1xuXHRcdG1vZHVsZS5kZXByZWNhdGUgPSBmdW5jdGlvbigpIHt9O1xuXHRcdG1vZHVsZS5wYXRocyA9IFtdO1xuXHRcdC8vIG1vZHVsZS5wYXJlbnQgPSB1bmRlZmluZWQgYnkgZGVmYXVsdFxuXHRcdGlmICghbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImxvYWRlZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5sO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiaWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUuaTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRtb2R1bGUud2VicGFja1BvbHlmaWxsID0gMTtcblx0fVxuXHRyZXR1cm4gbW9kdWxlO1xufTtcbiIsInZhciBtYXAgPSB7XG5cdFwiLi9hZlwiOiA0NCxcblx0XCIuL2FmLmpzXCI6IDQ0LFxuXHRcIi4vYXJcIjogNDUsXG5cdFwiLi9hci1kelwiOiA0Nixcblx0XCIuL2FyLWR6LmpzXCI6IDQ2LFxuXHRcIi4vYXIta3dcIjogNDcsXG5cdFwiLi9hci1rdy5qc1wiOiA0Nyxcblx0XCIuL2FyLWx5XCI6IDQ4LFxuXHRcIi4vYXItbHkuanNcIjogNDgsXG5cdFwiLi9hci1tYVwiOiA0OSxcblx0XCIuL2FyLW1hLmpzXCI6IDQ5LFxuXHRcIi4vYXItc2FcIjogNTAsXG5cdFwiLi9hci1zYS5qc1wiOiA1MCxcblx0XCIuL2FyLXRuXCI6IDUxLFxuXHRcIi4vYXItdG4uanNcIjogNTEsXG5cdFwiLi9hci5qc1wiOiA0NSxcblx0XCIuL2F6XCI6IDUyLFxuXHRcIi4vYXouanNcIjogNTIsXG5cdFwiLi9iZVwiOiA1Myxcblx0XCIuL2JlLmpzXCI6IDUzLFxuXHRcIi4vYmdcIjogNTQsXG5cdFwiLi9iZy5qc1wiOiA1NCxcblx0XCIuL2JuXCI6IDU1LFxuXHRcIi4vYm4uanNcIjogNTUsXG5cdFwiLi9ib1wiOiA1Nixcblx0XCIuL2JvLmpzXCI6IDU2LFxuXHRcIi4vYnJcIjogNTcsXG5cdFwiLi9ici5qc1wiOiA1Nyxcblx0XCIuL2JzXCI6IDU4LFxuXHRcIi4vYnMuanNcIjogNTgsXG5cdFwiLi9jYVwiOiA1OSxcblx0XCIuL2NhLmpzXCI6IDU5LFxuXHRcIi4vY3NcIjogNjAsXG5cdFwiLi9jcy5qc1wiOiA2MCxcblx0XCIuL2N2XCI6IDYxLFxuXHRcIi4vY3YuanNcIjogNjEsXG5cdFwiLi9jeVwiOiA2Mixcblx0XCIuL2N5LmpzXCI6IDYyLFxuXHRcIi4vZGFcIjogNjMsXG5cdFwiLi9kYS5qc1wiOiA2Myxcblx0XCIuL2RlXCI6IDY0LFxuXHRcIi4vZGUtYXRcIjogNjUsXG5cdFwiLi9kZS1hdC5qc1wiOiA2NSxcblx0XCIuL2RlLWNoXCI6IDY2LFxuXHRcIi4vZGUtY2guanNcIjogNjYsXG5cdFwiLi9kZS5qc1wiOiA2NCxcblx0XCIuL2R2XCI6IDY3LFxuXHRcIi4vZHYuanNcIjogNjcsXG5cdFwiLi9lbFwiOiA2OCxcblx0XCIuL2VsLmpzXCI6IDY4LFxuXHRcIi4vZW4tYXVcIjogNjksXG5cdFwiLi9lbi1hdS5qc1wiOiA2OSxcblx0XCIuL2VuLWNhXCI6IDcwLFxuXHRcIi4vZW4tY2EuanNcIjogNzAsXG5cdFwiLi9lbi1nYlwiOiA3MSxcblx0XCIuL2VuLWdiLmpzXCI6IDcxLFxuXHRcIi4vZW4taWVcIjogNzIsXG5cdFwiLi9lbi1pZS5qc1wiOiA3Mixcblx0XCIuL2VuLW56XCI6IDczLFxuXHRcIi4vZW4tbnouanNcIjogNzMsXG5cdFwiLi9lb1wiOiA3NCxcblx0XCIuL2VvLmpzXCI6IDc0LFxuXHRcIi4vZXNcIjogNzUsXG5cdFwiLi9lcy1kb1wiOiA3Nixcblx0XCIuL2VzLWRvLmpzXCI6IDc2LFxuXHRcIi4vZXMuanNcIjogNzUsXG5cdFwiLi9ldFwiOiA3Nyxcblx0XCIuL2V0LmpzXCI6IDc3LFxuXHRcIi4vZXVcIjogNzgsXG5cdFwiLi9ldS5qc1wiOiA3OCxcblx0XCIuL2ZhXCI6IDc5LFxuXHRcIi4vZmEuanNcIjogNzksXG5cdFwiLi9maVwiOiA4MCxcblx0XCIuL2ZpLmpzXCI6IDgwLFxuXHRcIi4vZm9cIjogODEsXG5cdFwiLi9mby5qc1wiOiA4MSxcblx0XCIuL2ZyXCI6IDgyLFxuXHRcIi4vZnItY2FcIjogODMsXG5cdFwiLi9mci1jYS5qc1wiOiA4Myxcblx0XCIuL2ZyLWNoXCI6IDg0LFxuXHRcIi4vZnItY2guanNcIjogODQsXG5cdFwiLi9mci5qc1wiOiA4Mixcblx0XCIuL2Z5XCI6IDg1LFxuXHRcIi4vZnkuanNcIjogODUsXG5cdFwiLi9nZFwiOiA4Nixcblx0XCIuL2dkLmpzXCI6IDg2LFxuXHRcIi4vZ2xcIjogODcsXG5cdFwiLi9nbC5qc1wiOiA4Nyxcblx0XCIuL2dvbS1sYXRuXCI6IDg4LFxuXHRcIi4vZ29tLWxhdG4uanNcIjogODgsXG5cdFwiLi9oZVwiOiA4OSxcblx0XCIuL2hlLmpzXCI6IDg5LFxuXHRcIi4vaGlcIjogOTAsXG5cdFwiLi9oaS5qc1wiOiA5MCxcblx0XCIuL2hyXCI6IDkxLFxuXHRcIi4vaHIuanNcIjogOTEsXG5cdFwiLi9odVwiOiA5Mixcblx0XCIuL2h1LmpzXCI6IDkyLFxuXHRcIi4vaHktYW1cIjogOTMsXG5cdFwiLi9oeS1hbS5qc1wiOiA5Myxcblx0XCIuL2lkXCI6IDk0LFxuXHRcIi4vaWQuanNcIjogOTQsXG5cdFwiLi9pc1wiOiA5NSxcblx0XCIuL2lzLmpzXCI6IDk1LFxuXHRcIi4vaXRcIjogOTYsXG5cdFwiLi9pdC5qc1wiOiA5Nixcblx0XCIuL2phXCI6IDk3LFxuXHRcIi4vamEuanNcIjogOTcsXG5cdFwiLi9qdlwiOiA5OCxcblx0XCIuL2p2LmpzXCI6IDk4LFxuXHRcIi4va2FcIjogOTksXG5cdFwiLi9rYS5qc1wiOiA5OSxcblx0XCIuL2trXCI6IDEwMCxcblx0XCIuL2trLmpzXCI6IDEwMCxcblx0XCIuL2ttXCI6IDEwMSxcblx0XCIuL2ttLmpzXCI6IDEwMSxcblx0XCIuL2tuXCI6IDEwMixcblx0XCIuL2tuLmpzXCI6IDEwMixcblx0XCIuL2tvXCI6IDEwMyxcblx0XCIuL2tvLmpzXCI6IDEwMyxcblx0XCIuL2t5XCI6IDEwNCxcblx0XCIuL2t5LmpzXCI6IDEwNCxcblx0XCIuL2xiXCI6IDEwNSxcblx0XCIuL2xiLmpzXCI6IDEwNSxcblx0XCIuL2xvXCI6IDEwNixcblx0XCIuL2xvLmpzXCI6IDEwNixcblx0XCIuL2x0XCI6IDEwNyxcblx0XCIuL2x0LmpzXCI6IDEwNyxcblx0XCIuL2x2XCI6IDEwOCxcblx0XCIuL2x2LmpzXCI6IDEwOCxcblx0XCIuL21lXCI6IDEwOSxcblx0XCIuL21lLmpzXCI6IDEwOSxcblx0XCIuL21pXCI6IDExMCxcblx0XCIuL21pLmpzXCI6IDExMCxcblx0XCIuL21rXCI6IDExMSxcblx0XCIuL21rLmpzXCI6IDExMSxcblx0XCIuL21sXCI6IDExMixcblx0XCIuL21sLmpzXCI6IDExMixcblx0XCIuL21yXCI6IDExMyxcblx0XCIuL21yLmpzXCI6IDExMyxcblx0XCIuL21zXCI6IDExNCxcblx0XCIuL21zLW15XCI6IDExNSxcblx0XCIuL21zLW15LmpzXCI6IDExNSxcblx0XCIuL21zLmpzXCI6IDExNCxcblx0XCIuL215XCI6IDExNixcblx0XCIuL215LmpzXCI6IDExNixcblx0XCIuL25iXCI6IDExNyxcblx0XCIuL25iLmpzXCI6IDExNyxcblx0XCIuL25lXCI6IDExOCxcblx0XCIuL25lLmpzXCI6IDExOCxcblx0XCIuL25sXCI6IDExOSxcblx0XCIuL25sLWJlXCI6IDEyMCxcblx0XCIuL25sLWJlLmpzXCI6IDEyMCxcblx0XCIuL25sLmpzXCI6IDExOSxcblx0XCIuL25uXCI6IDEyMSxcblx0XCIuL25uLmpzXCI6IDEyMSxcblx0XCIuL3BhLWluXCI6IDEyMixcblx0XCIuL3BhLWluLmpzXCI6IDEyMixcblx0XCIuL3BsXCI6IDEyMyxcblx0XCIuL3BsLmpzXCI6IDEyMyxcblx0XCIuL3B0XCI6IDEyNCxcblx0XCIuL3B0LWJyXCI6IDEyNSxcblx0XCIuL3B0LWJyLmpzXCI6IDEyNSxcblx0XCIuL3B0LmpzXCI6IDEyNCxcblx0XCIuL3JvXCI6IDEyNixcblx0XCIuL3JvLmpzXCI6IDEyNixcblx0XCIuL3J1XCI6IDEyNyxcblx0XCIuL3J1LmpzXCI6IDEyNyxcblx0XCIuL3NkXCI6IDEyOCxcblx0XCIuL3NkLmpzXCI6IDEyOCxcblx0XCIuL3NlXCI6IDEyOSxcblx0XCIuL3NlLmpzXCI6IDEyOSxcblx0XCIuL3NpXCI6IDEzMCxcblx0XCIuL3NpLmpzXCI6IDEzMCxcblx0XCIuL3NrXCI6IDEzMSxcblx0XCIuL3NrLmpzXCI6IDEzMSxcblx0XCIuL3NsXCI6IDEzMixcblx0XCIuL3NsLmpzXCI6IDEzMixcblx0XCIuL3NxXCI6IDEzMyxcblx0XCIuL3NxLmpzXCI6IDEzMyxcblx0XCIuL3NyXCI6IDEzNCxcblx0XCIuL3NyLWN5cmxcIjogMTM1LFxuXHRcIi4vc3ItY3lybC5qc1wiOiAxMzUsXG5cdFwiLi9zci5qc1wiOiAxMzQsXG5cdFwiLi9zc1wiOiAxMzYsXG5cdFwiLi9zcy5qc1wiOiAxMzYsXG5cdFwiLi9zdlwiOiAxMzcsXG5cdFwiLi9zdi5qc1wiOiAxMzcsXG5cdFwiLi9zd1wiOiAxMzgsXG5cdFwiLi9zdy5qc1wiOiAxMzgsXG5cdFwiLi90YVwiOiAxMzksXG5cdFwiLi90YS5qc1wiOiAxMzksXG5cdFwiLi90ZVwiOiAxNDAsXG5cdFwiLi90ZS5qc1wiOiAxNDAsXG5cdFwiLi90ZXRcIjogMTQxLFxuXHRcIi4vdGV0LmpzXCI6IDE0MSxcblx0XCIuL3RoXCI6IDE0Mixcblx0XCIuL3RoLmpzXCI6IDE0Mixcblx0XCIuL3RsLXBoXCI6IDE0Myxcblx0XCIuL3RsLXBoLmpzXCI6IDE0Myxcblx0XCIuL3RsaFwiOiAxNDQsXG5cdFwiLi90bGguanNcIjogMTQ0LFxuXHRcIi4vdHJcIjogMTQ1LFxuXHRcIi4vdHIuanNcIjogMTQ1LFxuXHRcIi4vdHpsXCI6IDE0Nixcblx0XCIuL3R6bC5qc1wiOiAxNDYsXG5cdFwiLi90em1cIjogMTQ3LFxuXHRcIi4vdHptLWxhdG5cIjogMTQ4LFxuXHRcIi4vdHptLWxhdG4uanNcIjogMTQ4LFxuXHRcIi4vdHptLmpzXCI6IDE0Nyxcblx0XCIuL3VrXCI6IDE0OSxcblx0XCIuL3VrLmpzXCI6IDE0OSxcblx0XCIuL3VyXCI6IDE1MCxcblx0XCIuL3VyLmpzXCI6IDE1MCxcblx0XCIuL3V6XCI6IDE1MSxcblx0XCIuL3V6LWxhdG5cIjogMTUyLFxuXHRcIi4vdXotbGF0bi5qc1wiOiAxNTIsXG5cdFwiLi91ei5qc1wiOiAxNTEsXG5cdFwiLi92aVwiOiAxNTMsXG5cdFwiLi92aS5qc1wiOiAxNTMsXG5cdFwiLi94LXBzZXVkb1wiOiAxNTQsXG5cdFwiLi94LXBzZXVkby5qc1wiOiAxNTQsXG5cdFwiLi95b1wiOiAxNTUsXG5cdFwiLi95by5qc1wiOiAxNTUsXG5cdFwiLi96aC1jblwiOiAxNTYsXG5cdFwiLi96aC1jbi5qc1wiOiAxNTYsXG5cdFwiLi96aC1oa1wiOiAxNTcsXG5cdFwiLi96aC1oay5qc1wiOiAxNTcsXG5cdFwiLi96aC10d1wiOiAxNTgsXG5cdFwiLi96aC10dy5qc1wiOiAxNThcbn07XG5cblxuZnVuY3Rpb24gd2VicGFja0NvbnRleHQocmVxKSB7XG5cdHZhciBpZCA9IHdlYnBhY2tDb250ZXh0UmVzb2x2ZShyZXEpO1xuXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhpZCk7XG59XG5mdW5jdGlvbiB3ZWJwYWNrQ29udGV4dFJlc29sdmUocmVxKSB7XG5cdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8obWFwLCByZXEpKSB7XG5cdFx0dmFyIGUgPSBuZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiICsgcmVxICsgXCInXCIpO1xuXHRcdGUuY29kZSA9ICdNT0RVTEVfTk9UX0ZPVU5EJztcblx0XHR0aHJvdyBlO1xuXHR9XG5cdHJldHVybiBtYXBbcmVxXTtcbn1cbndlYnBhY2tDb250ZXh0LmtleXMgPSBmdW5jdGlvbiB3ZWJwYWNrQ29udGV4dEtleXMoKSB7XG5cdHJldHVybiBPYmplY3Qua2V5cyhtYXApO1xufTtcbndlYnBhY2tDb250ZXh0LnJlc29sdmUgPSB3ZWJwYWNrQ29udGV4dFJlc29sdmU7XG5tb2R1bGUuZXhwb3J0cyA9IHdlYnBhY2tDb250ZXh0O1xud2VicGFja0NvbnRleHQuaWQgPSAyMjA7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcclxuaW1wb3J0IHsgc2V0VGV4dEZpbHRlciwgc29ydEJ5RGF0ZSwgc29ydEJ5QW1vdW50LCBzZXRTdGFydERhdGUsIHNldEVuZERhdGUgfSBmcm9tICcuLi9hY3Rpb25zL2ZpbHRlcnMnO1xyXG5pbXBvcnQgeyBEYXRlUmFuZ2VQaWNrZXIgfSBmcm9tICdyZWFjdC1kYXRlcyc7XHJcblxyXG5leHBvcnQgY2xhc3MgRXhwZW5zZUxpc3RGaWx0ZXJzIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50e1xyXG5cclxuICBzdGF0ZSA9IHtcclxuICAgIGNhbGFuZGVyRm9jdXNlZDogbnVsbFxyXG4gIH1cclxuICBcclxuICBvbkRhdGVzQ2hhbmdlID0gKHsgc3RhcnREYXRlLCBlbmREYXRlIH0pPT57XHJcbiAgICB0aGlzLnByb3BzLnNldFN0YXJ0RGF0ZShzdGFydERhdGUpO1xyXG4gICAgdGhpcy5wcm9wcy5zZXRFbmREYXRlKGVuZERhdGUpO1xyXG4gIH07XHJcbiAgb25Gb2N1c0NoYW5nZSA9IChjYWxhbmRlckZvY3VzZWQpPT57XHJcbiAgICB0aGlzLnNldFN0YXRlKCgpPT4oeyBjYWxhbmRlckZvY3VzZWQgfSkpO1xyXG4gIH07XHJcbiAgb25PdXRzaWRlQ2xpY2soZSkge1xyXG4gICAgY29uc3QgeyBvbk91dHNpZGVDbGljayB9ID0gdGhpcy5wcm9wcztcclxuICAgIGNvbnN0IHsgY2hpbGROb2RlIH0gPSB0aGlzO1xyXG4gICAgY29uc3QgaXNEZXNjZW5kYW50T2ZSb290ID0gY2hpbGROb2RlICYmIGNoaWxkTm9kZS5jb250YWlucyhlLnRhcmdldCk7XHJcbiAgICBpZiAoIWlzRGVzY2VuZGFudE9mUm9vdCkge1xyXG4gICAgICBvbk91dHNpZGVDbGljayhlKTtcclxuICAgIH1cclxuICB9XHJcbiAgb25UZXh0Q2hhbmdlID0gKGUpPT57XHJcbiAgICB0aGlzLnByb3BzLnNldFRleHRGaWx0ZXIoZS50YXJnZXQudmFsdWUpO1xyXG4gIH1cclxuICBvblNvcnRDaGFuZ2UgPSAoZSk9PntcclxuICAgIGlmKGUudGFyZ2V0LnZhbHVlID09PSAnZGF0ZScpe1xyXG4gICAgICB0aGlzLnByb3BzLnNvcnRCeURhdGUoKTtcclxuICAgIH1lbHNlIGlmKGUudGFyZ2V0LnZhbHVlID09PSAnYW1vdW50Jyl7XHJcbiAgICAgIHRoaXMucHJvcHMuc29ydEJ5QW1vdW50KCk7IFxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmVuZGVyKCl7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8ZGl2PlxyXG4gICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIHZhbHVlPXt0aGlzLnByb3BzLmZpbHRlcnMudGV4dH0gb25DaGFuZ2U9e3RoaXMub25UZXh0Q2hhbmdlfS8+XHJcbiAgICAgICAgPHNlbGVjdCBcclxuICAgICAgICAgIHZhbHVlPXt0aGlzLnByb3BzLmZpbHRlcnMuc29ydEJ5fVxyXG4gICAgICAgICAgb25DaGFuZ2U9e3RoaXMub25Tb3J0Q2hhbmdlfVxyXG4gICAgICAgID5cclxuICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJkYXRlXCI+RGF0ZTwvb3B0aW9uPlxyXG4gICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cImFtb3VudFwiPkFtb3VudDwvb3B0aW9uPlxyXG4gICAgICAgIDwvc2VsZWN0PlxyXG4gICAgICAgIDxEYXRlUmFuZ2VQaWNrZXIgXHJcbiAgICAgICAgICBzdGFydERhdGU9e3RoaXMucHJvcHMuZmlsdGVycy5zdGFydERhdGV9XHJcbiAgICAgICAgICBlbmREYXRlPXt0aGlzLnByb3BzLmZpbHRlcnMuZW5kRGF0ZX1cclxuICAgICAgICAgIG9uRGF0ZXNDaGFuZ2U9e3RoaXMub25EYXRlc0NoYW5nZX1cclxuICAgICAgICAgIGZvY3VzZWRJbnB1dD17dGhpcy5zdGF0ZS5jYWxhbmRlckZvY3VzZWR9XHJcbiAgICAgICAgICBvbkZvY3VzQ2hhbmdlPXt0aGlzLm9uRm9jdXNDaGFuZ2V9XHJcbiAgICAgICAgICBudW1iZXJPZk1vbnRocz17MX1cclxuICAgICAgICAgIHNob3dDbGVhckRhdGVzPXt0cnVlfVxyXG4gICAgICAgICAgaXNPdXRzaWRlUmFuZ2U9eygpPT4gZmFsc2V9XHJcbiAgICAgICAgLz5cclxuICAgICAgPC9kaXY+XHJcbiAgICApO1xyXG4gIH07XHJcbn1cclxuXHJcbmNvbnN0IG1hcFN0YXRlVG9Qcm9wcyA9IChzdGF0ZSk9Pih7XHJcbiAgZmlsdGVyczogc3RhdGUuZmlsdGVyc1xyXG59KTtcclxuY29uc3QgbWFwRGlzcGF0Y2hUb1Byb3BzID0gKGRpc3BhdGNoKT0+e1xyXG4gIHJldHVybiB7XHJcbiAgICBzZXRUZXh0RmlsdGVyOiAgKHRleHQpPT4gZGlzcGF0Y2goc2V0VGV4dEZpbHRlcih0ZXh0KSksXHJcbiAgICBzb3J0QnlEYXRlOiAoKT0+IGRpc3BhdGNoKHNvcnRCeURhdGUoKSksXHJcbiAgICBzb3J0QnlBbW91bnQ6ICgpPT4gZGlzcGF0Y2goc29ydEJ5QW1vdW50KCkpLFxyXG4gICAgc2V0U3RhcnREYXRlOiAoc3RhcnREYXRlKT0+IGRpc3BhdGNoKHNldFN0YXJ0RGF0ZShzdGFydERhdGUpKSxcclxuICAgIHNldEVuZERhdGU6IChlbmREYXRlKT0+IGRpc3BhdGNoKHNldEVuZERhdGUoZW5kRGF0ZSkpXHJcbiAgfVxyXG59XHJcbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMpKEV4cGVuc2VMaXN0RmlsdGVycyk7IiwiXHJcbi8vIFNFVF9URVhUX0ZJTFRFUlxyXG5leHBvcnQgY29uc3Qgc2V0VGV4dEZpbHRlciA9ICh0ZXh0ID0gJycpPT57XHJcbiAgcmV0dXJuICh7XHJcbiAgICB0eXBlOiAnU0VUX1RFWFRfRklMVEVSJyxcclxuICAgIHRleHRcclxuICB9KTtcclxufTtcclxuXHJcbi8vIFNPUlRfQllfREFURVxyXG5leHBvcnQgY29uc3Qgc29ydEJ5RGF0ZSA9ICgpPT4oe1xyXG4gIHR5cGU6ICdTT1JUX0JZX0RBVEUnXHJcbn0pO1xyXG5cclxuLy8gU09SVF9CWV9BTU9VTlRcclxuZXhwb3J0IGNvbnN0IHNvcnRCeUFtb3VudCA9ICgpPT4oe1xyXG4gIHR5cGU6ICdTT1JUX0JZX0FNT1VOVCdcclxufSk7XHJcblxyXG4vLyBTRVRfU1RBUlRfREFURVxyXG5leHBvcnQgY29uc3Qgc2V0U3RhcnREYXRlID0gKHN0YXJ0RGF0ZSk9Pih7XHJcbiAgdHlwZTogJ1NFVF9TVEFSVF9EQVRFJyxcclxuICBzdGFydERhdGVcclxufSk7XHJcblxyXG4vLyBTRVRfRU5EX0RBVEVcclxuZXhwb3J0IGNvbnN0IHNldEVuZERhdGUgPSAoZW5kRGF0ZSk9Pih7XHJcbiAgdHlwZTogJ1NFVF9FTkRfREFURScsXHJcbiAgZW5kRGF0ZVxyXG59KTsiLCJtb2R1bGUuZXhwb3J0cyA9XG4vKioqKioqLyAoZnVuY3Rpb24obW9kdWxlcykgeyAvLyB3ZWJwYWNrQm9vdHN0cmFwXG4vKioqKioqLyBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4vKioqKioqLyBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4vKioqKioqLyBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbi8qKioqKiovIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuLyoqKioqKi8gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbi8qKioqKiovIFx0XHRcdGk6IG1vZHVsZUlkLFxuLyoqKioqKi8gXHRcdFx0bDogZmFsc2UsXG4vKioqKioqLyBcdFx0XHRleHBvcnRzOiB7fVxuLyoqKioqKi8gXHRcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuLyoqKioqKi8gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4vKioqKioqLyBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuLyoqKioqKi8gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbi8qKioqKiovIFx0fVxuLyoqKioqKi9cbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gaWRlbnRpdHkgZnVuY3Rpb24gZm9yIGNhbGxpbmcgaGFybW9ueSBpbXBvcnRzIHdpdGggdGhlIGNvcnJlY3QgY29udGV4dFxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmkgPSBmdW5jdGlvbih2YWx1ZSkgeyByZXR1cm4gdmFsdWU7IH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4vKioqKioqLyBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuLyoqKioqKi8gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHtcbi8qKioqKiovIFx0XHRcdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcbi8qKioqKiovIFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcbi8qKioqKiovIFx0XHRcdFx0Z2V0OiBnZXR0ZXJcbi8qKioqKiovIFx0XHRcdH0pO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuLyoqKioqKi8gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuLyoqKioqKi8gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbi8qKioqKiovIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4vKioqKioqLyBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuLyoqKioqKi8gXHRcdHJldHVybiBnZXR0ZXI7XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLyoqKioqKi8gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSA2Myk7XG4vKioqKioqLyB9KVxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovIChbXG4vKiAwICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInJlYWN0XCIpO1xuXG4vKioqLyB9KSxcbi8qIDEgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiYWlyYm5iLXByb3AtdHlwZXNcIik7XG5cbi8qKiovIH0pLFxuLyogMiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi9kZWZhdWx0UGhyYXNlc1wiKTtcblxuLyoqKi8gfSksXG4vKiAzICovLFxuLyogNCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi9jb25zdGFudHNcIik7XG5cbi8qKiovIH0pLFxuLyogNSAqLyxcbi8qIDYgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiY2xhc3NuYW1lc1wiKTtcblxuLyoqKi8gfSksXG4vKiA3ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIm1vbWVudFwiKTtcblxuLyoqKi8gfSksXG4vKiA4ICovLFxuLyogOSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJpcy10b3VjaC1kZXZpY2VcIik7XG5cbi8qKiovIH0pLFxuLyogMTAgKi8sXG4vKiAxMSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX3JlYWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IFwiZGVmYXVsdFwiOiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBTVkcgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoU1ZHLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBTVkcoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFNWRyk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKFNWRy5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFNWRykpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFNWRywgW3tcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIF9yZWFjdDJbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgXCJzdmdcIixcbiAgICAgICAgICBfZXh0ZW5kcyh7IHZpZXdCb3g6IFwiMCAwIDEyIDEyXCIgfSwgdGhpcy5wcm9wcyksXG4gICAgICAgICAgX3JlYWN0MltcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChcInBhdGhcIiwgeyBmaWxsUnVsZTogXCJldmVub2RkXCIsIGQ6IFwiTTExLjUzLjQ3YS43NS43NSAwIDAgMC0xLjA2MSAwbC00LjQ3IDQuNDdMMS41MjkuNDdBLjc1Ljc1IDAgMSAwIC40NjggMS41MzFsNC40NyA0LjQ3LTQuNDcgNC40N2EuNzUuNzUgMCAxIDAgMS4wNjEgMS4wNjFsNC40Ny00LjQ3IDQuNDcgNC40N2EuNzUuNzUgMCAxIDAgMS4wNjEtMS4wNjFsLTQuNDctNC40NyA0LjQ3LTQuNDdhLjc1Ljc1IDAgMCAwIDAtMS4wNjF6XCIgfSlcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlbmRlcjtcbiAgICB9KClcbiAgfV0pO1xuXG4gIHJldHVybiBTVkc7XG59KF9yZWFjdDJbXCJkZWZhdWx0XCJdLkNvbXBvbmVudCk7XG5cbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gU1ZHO1xuXG4vKioqLyB9KSxcbi8qIDEyICovLFxuLyogMTMgKi8sXG4vKiAxNCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJyZWFjdC1hZGRvbnMtc2hhbGxvdy1jb21wYXJlXCIpO1xuXG4vKioqLyB9KSxcbi8qIDE1ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uL3V0aWxzL2lzSW5jbHVzaXZlbHlBZnRlckRheVwiKTtcblxuLyoqKi8gfSksXG4vKiAxNiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJjb25zb2xpZGF0ZWQtZXZlbnRzXCIpO1xuXG4vKioqLyB9KSxcbi8qIDE3ICovLFxuLyogMTggKi8sXG4vKiAxOSAqLyxcbi8qIDIwICovLFxuLyogMjEgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi9PdXRzaWRlQ2xpY2tIYW5kbGVyXCIpO1xuXG4vKioqLyB9KSxcbi8qIDIyICovLFxuLyogMjMgKi8sXG4vKiAyNCAqLyxcbi8qIDI1ICovLFxuLyogMjYgKi8sXG4vKiAyNyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi91dGlscy9nZXRSZXNwb25zaXZlQ29udGFpbmVyU3R5bGVzXCIpO1xuXG4vKioqLyB9KSxcbi8qIDI4ICovLFxuLyogMjkgKi8sXG4vKiAzMCAqLyxcbi8qIDMxICovLFxuLyogMzIgKi8sXG4vKiAzMyAqLyxcbi8qIDM0ICovLFxuLyogMzUgKi8sXG4vKiAzNiAqLyxcbi8qIDM3ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInJlYWN0LWRvbVwiKTtcblxuLyoqKi8gfSksXG4vKiAzOCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJyZWFjdC1wb3J0YWxcIik7XG5cbi8qKiovIH0pLFxuLyogMzkgKi8sXG4vKiA0MCAqLyxcbi8qIDQxICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uL3NoYXBlcy9EYXRlUmFuZ2VQaWNrZXJTaGFwZVwiKTtcblxuLyoqKi8gfSksXG4vKiA0MiAqLyxcbi8qIDQzICovLFxuLyogNDQgKi8sXG4vKiA0NSAqLyxcbi8qIDQ2ICovLFxuLyogNDcgKi8sXG4vKiA0OCAqLyxcbi8qIDQ5ICovLFxuLyogNTAgKi8sXG4vKiA1MSAqLyxcbi8qIDUyICovLFxuLyogNTMgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi9EYXRlUmFuZ2VQaWNrZXJJbnB1dENvbnRyb2xsZXJcIik7XG5cbi8qKiovIH0pLFxuLyogNTQgKi8sXG4vKiA1NSAqLyxcbi8qIDU2ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4vRGF5UGlja2VyUmFuZ2VDb250cm9sbGVyXCIpO1xuXG4vKioqLyB9KSxcbi8qIDU3ICovLFxuLyogNTggKi8sXG4vKiA1OSAqLyxcbi8qIDYwICovLFxuLyogNjEgKi8sXG4vKiA2MiAqLyxcbi8qIDYzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7ZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO2lmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7T2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICAgIH1cbiAgfXJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gICAgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtyZXR1cm4gQ29uc3RydWN0b3I7XG4gIH07XG59KCk7XG5cbnZhciBfcmVhY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9yZWFjdERvbSA9IF9fd2VicGFja19yZXF1aXJlX18oMzcpO1xuXG52YXIgX3JlYWN0RG9tMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0RG9tKTtcblxudmFyIF9yZWFjdEFkZG9uc1NoYWxsb3dDb21wYXJlID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNCk7XG5cbnZhciBfcmVhY3RBZGRvbnNTaGFsbG93Q29tcGFyZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdEFkZG9uc1NoYWxsb3dDb21wYXJlKTtcblxudmFyIF9tb21lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcpO1xuXG52YXIgX21vbWVudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9tb21lbnQpO1xuXG52YXIgX2NsYXNzbmFtZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYpO1xuXG52YXIgX2NsYXNzbmFtZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NuYW1lcyk7XG5cbnZhciBfcmVhY3RQb3J0YWwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM4KTtcblxudmFyIF9yZWFjdFBvcnRhbDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdFBvcnRhbCk7XG5cbnZhciBfYWlyYm5iUHJvcFR5cGVzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcblxudmFyIF9jb25zb2xpZGF0ZWRFdmVudHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE2KTtcblxudmFyIF9pc1RvdWNoRGV2aWNlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5KTtcblxudmFyIF9pc1RvdWNoRGV2aWNlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2lzVG91Y2hEZXZpY2UpO1xuXG52YXIgX2RlZmF1bHRQaHJhc2VzID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcblxudmFyIF9PdXRzaWRlQ2xpY2tIYW5kbGVyID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMSk7XG5cbnZhciBfT3V0c2lkZUNsaWNrSGFuZGxlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9PdXRzaWRlQ2xpY2tIYW5kbGVyKTtcblxudmFyIF9nZXRSZXNwb25zaXZlQ29udGFpbmVyU3R5bGVzID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNyk7XG5cbnZhciBfZ2V0UmVzcG9uc2l2ZUNvbnRhaW5lclN0eWxlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRSZXNwb25zaXZlQ29udGFpbmVyU3R5bGVzKTtcblxudmFyIF9pc0luY2x1c2l2ZWx5QWZ0ZXJEYXkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE1KTtcblxudmFyIF9pc0luY2x1c2l2ZWx5QWZ0ZXJEYXkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaXNJbmNsdXNpdmVseUFmdGVyRGF5KTtcblxudmFyIF9EYXRlUmFuZ2VQaWNrZXJJbnB1dENvbnRyb2xsZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUzKTtcblxudmFyIF9EYXRlUmFuZ2VQaWNrZXJJbnB1dENvbnRyb2xsZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfRGF0ZVJhbmdlUGlja2VySW5wdXRDb250cm9sbGVyKTtcblxudmFyIF9EYXlQaWNrZXJSYW5nZUNvbnRyb2xsZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDU2KTtcblxudmFyIF9EYXlQaWNrZXJSYW5nZUNvbnRyb2xsZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfRGF5UGlja2VyUmFuZ2VDb250cm9sbGVyKTtcblxudmFyIF9jbG9zZSA9IF9fd2VicGFja19yZXF1aXJlX18oMTEpO1xuXG52YXIgX2Nsb3NlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Nsb3NlKTtcblxudmFyIF9EYXRlUmFuZ2VQaWNrZXJTaGFwZSA9IF9fd2VicGFja19yZXF1aXJlX18oNDEpO1xuXG52YXIgX0RhdGVSYW5nZVBpY2tlclNoYXBlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0RhdGVSYW5nZVBpY2tlclNoYXBlKTtcblxudmFyIF9jb25zdGFudHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikge1xuICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9O1xufVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7XG4gIGlmICghc2VsZikge1xuICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgfXJldHVybiBjYWxsICYmICgodHlwZW9mIGNhbGwgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihjYWxsKSkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjtcbn1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArICh0eXBlb2Ygc3VwZXJDbGFzcyA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKHN1cGVyQ2xhc3MpKSk7XG4gIH1zdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pO2lmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcbn1cblxudmFyIHByb3BUeXBlcyA9ICgwLCBfYWlyYm5iUHJvcFR5cGVzLmZvcmJpZEV4dHJhUHJvcHMpKF9EYXRlUmFuZ2VQaWNrZXJTaGFwZTJbJ2RlZmF1bHQnXSk7XG5cbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIC8vIHJlcXVpcmVkIHByb3BzIGZvciBhIGZ1bmN0aW9uYWwgaW50ZXJhY3RpdmUgRGF0ZVJhbmdlUGlja2VyXG4gIHN0YXJ0RGF0ZTogbnVsbCxcbiAgZW5kRGF0ZTogbnVsbCxcbiAgZm9jdXNlZElucHV0OiBudWxsLFxuXG4gIC8vIGlucHV0IHJlbGF0ZWQgcHJvcHNcbiAgc3RhcnREYXRlSWQ6IF9jb25zdGFudHMuU1RBUlRfREFURSxcbiAgc3RhcnREYXRlUGxhY2Vob2xkZXJUZXh0OiAnU3RhcnQgRGF0ZScsXG4gIGVuZERhdGVJZDogX2NvbnN0YW50cy5FTkRfREFURSxcbiAgZW5kRGF0ZVBsYWNlaG9sZGVyVGV4dDogJ0VuZCBEYXRlJyxcbiAgZGlzYWJsZWQ6IGZhbHNlLFxuICByZXF1aXJlZDogZmFsc2UsXG4gIHJlYWRPbmx5OiBmYWxzZSxcbiAgc2NyZWVuUmVhZGVySW5wdXRNZXNzYWdlOiAnJyxcbiAgc2hvd0NsZWFyRGF0ZXM6IGZhbHNlLFxuICBzaG93RGVmYXVsdElucHV0SWNvbjogZmFsc2UsXG4gIGN1c3RvbUlucHV0SWNvbjogbnVsbCxcbiAgY3VzdG9tQXJyb3dJY29uOiBudWxsLFxuICBjdXN0b21DbG9zZUljb246IG51bGwsXG5cbiAgLy8gY2FsZW5kYXIgcHJlc2VudGF0aW9uIGFuZCBpbnRlcmFjdGlvbiByZWxhdGVkIHByb3BzXG4gIHJlbmRlck1vbnRoOiBudWxsLFxuICBvcmllbnRhdGlvbjogX2NvbnN0YW50cy5IT1JJWk9OVEFMX09SSUVOVEFUSU9OLFxuICBhbmNob3JEaXJlY3Rpb246IF9jb25zdGFudHMuQU5DSE9SX0xFRlQsXG4gIGhvcml6b250YWxNYXJnaW46IDAsXG4gIHdpdGhQb3J0YWw6IGZhbHNlLFxuICB3aXRoRnVsbFNjcmVlblBvcnRhbDogZmFsc2UsXG4gIGluaXRpYWxWaXNpYmxlTW9udGg6IG51bGwsXG4gIG51bWJlck9mTW9udGhzOiAyLFxuICBrZWVwT3Blbk9uRGF0ZVNlbGVjdDogZmFsc2UsXG4gIHJlb3BlblBpY2tlck9uQ2xlYXJEYXRlczogZmFsc2UsXG4gIHJlbmRlckNhbGVuZGFySW5mbzogbnVsbCxcbiAgaGlkZUtleWJvYXJkU2hvcnRjdXRzUGFuZWw6IGZhbHNlLFxuICBkYXlTaXplOiBfY29uc3RhbnRzLkRBWV9TSVpFLFxuICBpc1JUTDogZmFsc2UsXG4gIGZpcnN0RGF5T2ZXZWVrOiBudWxsLFxuXG4gIC8vIG5hdmlnYXRpb24gcmVsYXRlZCBwcm9wc1xuICBuYXZQcmV2OiBudWxsLFxuICBuYXZOZXh0OiBudWxsLFxuXG4gIG9uUHJldk1vbnRoQ2xpY2s6IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBvblByZXZNb250aENsaWNrKCkge31cblxuICAgIHJldHVybiBvblByZXZNb250aENsaWNrO1xuICB9KCksXG4gIG9uTmV4dE1vbnRoQ2xpY2s6IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBvbk5leHRNb250aENsaWNrKCkge31cblxuICAgIHJldHVybiBvbk5leHRNb250aENsaWNrO1xuICB9KCksXG4gIG9uQ2xvc2U6IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBvbkNsb3NlKCkge31cblxuICAgIHJldHVybiBvbkNsb3NlO1xuICB9KCksXG5cbiAgLy8gZGF5IHByZXNlbnRhdGlvbiBhbmQgaW50ZXJhY3Rpb24gcmVsYXRlZCBwcm9wc1xuICByZW5kZXJEYXk6IG51bGwsXG4gIG1pbmltdW1OaWdodHM6IDEsXG4gIGVuYWJsZU91dHNpZGVEYXlzOiBmYWxzZSxcbiAgaXNEYXlCbG9ja2VkOiBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gaXNEYXlCbG9ja2VkKCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiBpc0RheUJsb2NrZWQ7XG4gIH0oKSxcbiAgaXNPdXRzaWRlUmFuZ2U6IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBpc091dHNpZGVSYW5nZShkYXkpIHtcbiAgICAgIHJldHVybiAhKDAsIF9pc0luY2x1c2l2ZWx5QWZ0ZXJEYXkyWydkZWZhdWx0J10pKGRheSwgKDAsIF9tb21lbnQyWydkZWZhdWx0J10pKCkpO1xuICAgIH1cblxuICAgIHJldHVybiBpc091dHNpZGVSYW5nZTtcbiAgfSgpLFxuICBpc0RheUhpZ2hsaWdodGVkOiBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gaXNEYXlIaWdobGlnaHRlZCgpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gaXNEYXlIaWdobGlnaHRlZDtcbiAgfSgpLFxuXG4gIC8vIGludGVybmF0aW9uYWxpemF0aW9uXG4gIGRpc3BsYXlGb3JtYXQ6IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBkaXNwbGF5Rm9ybWF0KCkge1xuICAgICAgcmV0dXJuIF9tb21lbnQyWydkZWZhdWx0J10ubG9jYWxlRGF0YSgpLmxvbmdEYXRlRm9ybWF0KCdMJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRpc3BsYXlGb3JtYXQ7XG4gIH0oKSxcbiAgbW9udGhGb3JtYXQ6ICdNTU1NIFlZWVknLFxuICBwaHJhc2VzOiBfZGVmYXVsdFBocmFzZXMuRGF0ZVJhbmdlUGlja2VyUGhyYXNlc1xufTtcblxudmFyIERhdGVSYW5nZVBpY2tlciA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhEYXRlUmFuZ2VQaWNrZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIERhdGVSYW5nZVBpY2tlcihwcm9wcykge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBEYXRlUmFuZ2VQaWNrZXIpO1xuXG4gICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKERhdGVSYW5nZVBpY2tlci5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKERhdGVSYW5nZVBpY2tlcikpLmNhbGwodGhpcywgcHJvcHMpKTtcblxuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgZGF5UGlja2VyQ29udGFpbmVyU3R5bGVzOiB7fSxcbiAgICAgIGlzRGF0ZVJhbmdlUGlja2VySW5wdXRGb2N1c2VkOiBmYWxzZSxcbiAgICAgIGlzRGF5UGlja2VyRm9jdXNlZDogZmFsc2UsXG4gICAgICBzaG93S2V5Ym9hcmRTaG9ydGN1dHM6IGZhbHNlXG4gICAgfTtcblxuICAgIF90aGlzLmlzVG91Y2hEZXZpY2UgPSBmYWxzZTtcblxuICAgIF90aGlzLm9uT3V0c2lkZUNsaWNrID0gX3RoaXMub25PdXRzaWRlQ2xpY2suYmluZChfdGhpcyk7XG4gICAgX3RoaXMub25EYXRlUmFuZ2VQaWNrZXJJbnB1dEZvY3VzID0gX3RoaXMub25EYXRlUmFuZ2VQaWNrZXJJbnB1dEZvY3VzLmJpbmQoX3RoaXMpO1xuICAgIF90aGlzLm9uRGF5UGlja2VyRm9jdXMgPSBfdGhpcy5vbkRheVBpY2tlckZvY3VzLmJpbmQoX3RoaXMpO1xuICAgIF90aGlzLm9uRGF5UGlja2VyQmx1ciA9IF90aGlzLm9uRGF5UGlja2VyQmx1ci5iaW5kKF90aGlzKTtcbiAgICBfdGhpcy5zaG93S2V5Ym9hcmRTaG9ydGN1dHNQYW5lbCA9IF90aGlzLnNob3dLZXlib2FyZFNob3J0Y3V0c1BhbmVsLmJpbmQoX3RoaXMpO1xuXG4gICAgX3RoaXMucmVzcG9uc2l2aXplUGlja2VyUG9zaXRpb24gPSBfdGhpcy5yZXNwb25zaXZpemVQaWNrZXJQb3NpdGlvbi5iaW5kKF90aGlzKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoRGF0ZVJhbmdlUGlja2VyLCBbe1xuICAgIGtleTogJ2NvbXBvbmVudERpZE1vdW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICAgIHRoaXMucmVzaXplSGFuZGxlID0gKDAsIF9jb25zb2xpZGF0ZWRFdmVudHMuYWRkRXZlbnRMaXN0ZW5lcikod2luZG93LCAncmVzaXplJywgdGhpcy5yZXNwb25zaXZpemVQaWNrZXJQb3NpdGlvbiwgeyBwYXNzaXZlOiB0cnVlIH0pO1xuICAgICAgICB0aGlzLnJlc3BvbnNpdml6ZVBpY2tlclBvc2l0aW9uKCk7XG5cbiAgICAgICAgaWYgKHRoaXMucHJvcHMuZm9jdXNlZElucHV0KSB7XG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBpc0RhdGVSYW5nZVBpY2tlcklucHV0Rm9jdXNlZDogdHJ1ZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5pc1RvdWNoRGV2aWNlID0gKDAsIF9pc1RvdWNoRGV2aWNlMlsnZGVmYXVsdCddKSgpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29tcG9uZW50RGlkTW91bnQ7XG4gICAgfSgpXG4gIH0sIHtcbiAgICBrZXk6ICdzaG91bGRDb21wb25lbnRVcGRhdGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBzaG91bGRDb21wb25lbnRVcGRhdGUobmV4dFByb3BzLCBuZXh0U3RhdGUpIHtcbiAgICAgICAgcmV0dXJuICgwLCBfcmVhY3RBZGRvbnNTaGFsbG93Q29tcGFyZTJbJ2RlZmF1bHQnXSkodGhpcywgbmV4dFByb3BzLCBuZXh0U3RhdGUpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc2hvdWxkQ29tcG9uZW50VXBkYXRlO1xuICAgIH0oKVxuICB9LCB7XG4gICAga2V5OiAnY29tcG9uZW50RGlkVXBkYXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgICAgICBpZiAoIXByZXZQcm9wcy5mb2N1c2VkSW5wdXQgJiYgdGhpcy5wcm9wcy5mb2N1c2VkSW5wdXQgJiYgdGhpcy5pc09wZW5lZCgpKSB7XG4gICAgICAgICAgLy8gVGhlIGRhdGUgcGlja2VyIGp1c3QgY2hhbmdlZCBmcm9tIGJlaW5nIGNsb3NlZCB0byBiZWluZyBvcGVuLlxuICAgICAgICAgIHRoaXMucmVzcG9uc2l2aXplUGlja2VyUG9zaXRpb24oKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29tcG9uZW50RGlkVXBkYXRlO1xuICAgIH0oKVxuICB9LCB7XG4gICAga2V5OiAnY29tcG9uZW50V2lsbFVubW91bnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgICAgaWYgKHRoaXMucmVzaXplSGFuZGxlKSAoMCwgX2NvbnNvbGlkYXRlZEV2ZW50cy5yZW1vdmVFdmVudExpc3RlbmVyKSh0aGlzLnJlc2l6ZUhhbmRsZSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb21wb25lbnRXaWxsVW5tb3VudDtcbiAgICB9KClcbiAgfSwge1xuICAgIGtleTogJ29uT3V0c2lkZUNsaWNrJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gb25PdXRzaWRlQ2xpY2soKSB7XG4gICAgICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgICAgb25Gb2N1c0NoYW5nZSA9IF9wcm9wcy5vbkZvY3VzQ2hhbmdlLFxuICAgICAgICAgICAgb25DbG9zZSA9IF9wcm9wcy5vbkNsb3NlLFxuICAgICAgICAgICAgc3RhcnREYXRlID0gX3Byb3BzLnN0YXJ0RGF0ZSxcbiAgICAgICAgICAgIGVuZERhdGUgPSBfcHJvcHMuZW5kRGF0ZTtcblxuICAgICAgICBpZiAoIXRoaXMuaXNPcGVuZWQoKSkgcmV0dXJuO1xuXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIGlzRGF0ZVJhbmdlUGlja2VySW5wdXRGb2N1c2VkOiBmYWxzZSxcbiAgICAgICAgICBpc0RheVBpY2tlckZvY3VzZWQ6IGZhbHNlLFxuICAgICAgICAgIHNob3dLZXlib2FyZFNob3J0Y3V0czogZmFsc2VcbiAgICAgICAgfSk7XG5cbiAgICAgICAgb25Gb2N1c0NoYW5nZShudWxsKTtcbiAgICAgICAgb25DbG9zZSh7IHN0YXJ0RGF0ZTogc3RhcnREYXRlLCBlbmREYXRlOiBlbmREYXRlIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gb25PdXRzaWRlQ2xpY2s7XG4gICAgfSgpXG4gIH0sIHtcbiAgICBrZXk6ICdvbkRhdGVSYW5nZVBpY2tlcklucHV0Rm9jdXMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBvbkRhdGVSYW5nZVBpY2tlcklucHV0Rm9jdXMoZm9jdXNlZElucHV0KSB7XG4gICAgICAgIHZhciBfcHJvcHMyID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICAgIG9uRm9jdXNDaGFuZ2UgPSBfcHJvcHMyLm9uRm9jdXNDaGFuZ2UsXG4gICAgICAgICAgICB3aXRoUG9ydGFsID0gX3Byb3BzMi53aXRoUG9ydGFsLFxuICAgICAgICAgICAgd2l0aEZ1bGxTY3JlZW5Qb3J0YWwgPSBfcHJvcHMyLndpdGhGdWxsU2NyZWVuUG9ydGFsO1xuXG4gICAgICAgIGlmIChmb2N1c2VkSW5wdXQpIHtcbiAgICAgICAgICB2YXIgbW92ZUZvY3VzVG9EYXlQaWNrZXIgPSB3aXRoUG9ydGFsIHx8IHdpdGhGdWxsU2NyZWVuUG9ydGFsIHx8IHRoaXMuaXNUb3VjaERldmljZTtcbiAgICAgICAgICBpZiAobW92ZUZvY3VzVG9EYXlQaWNrZXIpIHtcbiAgICAgICAgICAgIHRoaXMub25EYXlQaWNrZXJGb2N1cygpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLm9uRGF5UGlja2VyQmx1cigpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIG9uRm9jdXNDaGFuZ2UoZm9jdXNlZElucHV0KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG9uRGF0ZVJhbmdlUGlja2VySW5wdXRGb2N1cztcbiAgICB9KClcbiAgfSwge1xuICAgIGtleTogJ29uRGF5UGlja2VyRm9jdXMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBvbkRheVBpY2tlckZvY3VzKCkge1xuICAgICAgICB2YXIgX3Byb3BzMyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgICBmb2N1c2VkSW5wdXQgPSBfcHJvcHMzLmZvY3VzZWRJbnB1dCxcbiAgICAgICAgICAgIG9uRm9jdXNDaGFuZ2UgPSBfcHJvcHMzLm9uRm9jdXNDaGFuZ2U7XG5cbiAgICAgICAgaWYgKCFmb2N1c2VkSW5wdXQpIG9uRm9jdXNDaGFuZ2UoX2NvbnN0YW50cy5TVEFSVF9EQVRFKTtcblxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBpc0RhdGVSYW5nZVBpY2tlcklucHV0Rm9jdXNlZDogZmFsc2UsXG4gICAgICAgICAgaXNEYXlQaWNrZXJGb2N1c2VkOiB0cnVlLFxuICAgICAgICAgIHNob3dLZXlib2FyZFNob3J0Y3V0czogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBvbkRheVBpY2tlckZvY3VzO1xuICAgIH0oKVxuICB9LCB7XG4gICAga2V5OiAnb25EYXlQaWNrZXJCbHVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gb25EYXlQaWNrZXJCbHVyKCkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBpc0RhdGVSYW5nZVBpY2tlcklucHV0Rm9jdXNlZDogdHJ1ZSxcbiAgICAgICAgICBpc0RheVBpY2tlckZvY3VzZWQ6IGZhbHNlLFxuICAgICAgICAgIHNob3dLZXlib2FyZFNob3J0Y3V0czogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBvbkRheVBpY2tlckJsdXI7XG4gICAgfSgpXG4gIH0sIHtcbiAgICBrZXk6ICdnZXREYXlQaWNrZXJDb250YWluZXJDbGFzc2VzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gZ2V0RGF5UGlja2VyQ29udGFpbmVyQ2xhc3NlcygpIHtcbiAgICAgICAgdmFyIF9wcm9wczQgPSB0aGlzLnByb3BzLFxuICAgICAgICAgICAgb3JpZW50YXRpb24gPSBfcHJvcHM0Lm9yaWVudGF0aW9uLFxuICAgICAgICAgICAgd2l0aFBvcnRhbCA9IF9wcm9wczQud2l0aFBvcnRhbCxcbiAgICAgICAgICAgIHdpdGhGdWxsU2NyZWVuUG9ydGFsID0gX3Byb3BzNC53aXRoRnVsbFNjcmVlblBvcnRhbCxcbiAgICAgICAgICAgIGFuY2hvckRpcmVjdGlvbiA9IF9wcm9wczQuYW5jaG9yRGlyZWN0aW9uLFxuICAgICAgICAgICAgaXNSVEwgPSBfcHJvcHM0LmlzUlRMO1xuXG4gICAgICAgIHZhciBkYXlQaWNrZXJDbGFzc05hbWUgPSAoMCwgX2NsYXNzbmFtZXMyWydkZWZhdWx0J10pKCdEYXRlUmFuZ2VQaWNrZXJfX3BpY2tlcicsIHtcbiAgICAgICAgICAnRGF0ZVJhbmdlUGlja2VyX19waWNrZXItLWRpcmVjdGlvbi1sZWZ0JzogYW5jaG9yRGlyZWN0aW9uID09PSBfY29uc3RhbnRzLkFOQ0hPUl9MRUZULFxuICAgICAgICAgICdEYXRlUmFuZ2VQaWNrZXJfX3BpY2tlci0tZGlyZWN0aW9uLXJpZ2h0JzogYW5jaG9yRGlyZWN0aW9uID09PSBfY29uc3RhbnRzLkFOQ0hPUl9SSUdIVCxcbiAgICAgICAgICAnRGF0ZVJhbmdlUGlja2VyX19waWNrZXItLWhvcml6b250YWwnOiBvcmllbnRhdGlvbiA9PT0gX2NvbnN0YW50cy5IT1JJWk9OVEFMX09SSUVOVEFUSU9OLFxuICAgICAgICAgICdEYXRlUmFuZ2VQaWNrZXJfX3BpY2tlci0tdmVydGljYWwnOiBvcmllbnRhdGlvbiA9PT0gX2NvbnN0YW50cy5WRVJUSUNBTF9PUklFTlRBVElPTixcbiAgICAgICAgICAnRGF0ZVJhbmdlUGlja2VyX19waWNrZXItLXBvcnRhbCc6IHdpdGhQb3J0YWwgfHwgd2l0aEZ1bGxTY3JlZW5Qb3J0YWwsXG4gICAgICAgICAgJ0RhdGVSYW5nZVBpY2tlcl9fcGlja2VyLS1mdWxsLXNjcmVlbi1wb3J0YWwnOiB3aXRoRnVsbFNjcmVlblBvcnRhbCxcbiAgICAgICAgICAnRGF0ZVJhbmdlUGlja2VyX19waWNrZXItLXJ0bCc6IGlzUlRMXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBkYXlQaWNrZXJDbGFzc05hbWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBnZXREYXlQaWNrZXJDb250YWluZXJDbGFzc2VzO1xuICAgIH0oKVxuICB9LCB7XG4gICAga2V5OiAnZ2V0RGF5UGlja2VyRE9NTm9kZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIGdldERheVBpY2tlckRPTU5vZGUoKSB7XG4gICAgICAgIHJldHVybiBfcmVhY3REb20yWydkZWZhdWx0J10uZmluZERPTU5vZGUodGhpcy5kYXlQaWNrZXIpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHJlYWN0L25vLWZpbmQtZG9tLW5vZGVcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGdldERheVBpY2tlckRPTU5vZGU7XG4gICAgfSgpXG4gIH0sIHtcbiAgICBrZXk6ICdpc09wZW5lZCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIGlzT3BlbmVkKCkge1xuICAgICAgICB2YXIgZm9jdXNlZElucHV0ID0gdGhpcy5wcm9wcy5mb2N1c2VkSW5wdXQ7XG5cbiAgICAgICAgcmV0dXJuIGZvY3VzZWRJbnB1dCA9PT0gX2NvbnN0YW50cy5TVEFSVF9EQVRFIHx8IGZvY3VzZWRJbnB1dCA9PT0gX2NvbnN0YW50cy5FTkRfREFURTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGlzT3BlbmVkO1xuICAgIH0oKVxuICB9LCB7XG4gICAga2V5OiAncmVzcG9uc2l2aXplUGlja2VyUG9zaXRpb24nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiByZXNwb25zaXZpemVQaWNrZXJQb3NpdGlvbigpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzT3BlbmVkKCkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgX3Byb3BzNSA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgICBhbmNob3JEaXJlY3Rpb24gPSBfcHJvcHM1LmFuY2hvckRpcmVjdGlvbixcbiAgICAgICAgICAgIGhvcml6b250YWxNYXJnaW4gPSBfcHJvcHM1Lmhvcml6b250YWxNYXJnaW4sXG4gICAgICAgICAgICB3aXRoUG9ydGFsID0gX3Byb3BzNS53aXRoUG9ydGFsLFxuICAgICAgICAgICAgd2l0aEZ1bGxTY3JlZW5Qb3J0YWwgPSBfcHJvcHM1LndpdGhGdWxsU2NyZWVuUG9ydGFsO1xuICAgICAgICB2YXIgZGF5UGlja2VyQ29udGFpbmVyU3R5bGVzID0gdGhpcy5zdGF0ZS5kYXlQaWNrZXJDb250YWluZXJTdHlsZXM7XG5cbiAgICAgICAgdmFyIGlzQW5jaG9yZWRMZWZ0ID0gYW5jaG9yRGlyZWN0aW9uID09PSBfY29uc3RhbnRzLkFOQ0hPUl9MRUZUO1xuICAgICAgICBpZiAoIXdpdGhQb3J0YWwgJiYgIXdpdGhGdWxsU2NyZWVuUG9ydGFsKSB7XG4gICAgICAgICAgdmFyIGNvbnRhaW5lclJlY3QgPSB0aGlzLmRheVBpY2tlckNvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICB2YXIgY3VycmVudE9mZnNldCA9IGRheVBpY2tlckNvbnRhaW5lclN0eWxlc1thbmNob3JEaXJlY3Rpb25dIHx8IDA7XG4gICAgICAgICAgdmFyIGNvbnRhaW5lckVkZ2UgPSBpc0FuY2hvcmVkTGVmdCA/IGNvbnRhaW5lclJlY3RbX2NvbnN0YW50cy5BTkNIT1JfUklHSFRdIDogY29udGFpbmVyUmVjdFtfY29uc3RhbnRzLkFOQ0hPUl9MRUZUXTtcblxuICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgZGF5UGlja2VyQ29udGFpbmVyU3R5bGVzOiAoMCwgX2dldFJlc3BvbnNpdmVDb250YWluZXJTdHlsZXMyWydkZWZhdWx0J10pKGFuY2hvckRpcmVjdGlvbiwgY3VycmVudE9mZnNldCwgY29udGFpbmVyRWRnZSwgaG9yaXpvbnRhbE1hcmdpbilcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVzcG9uc2l2aXplUGlja2VyUG9zaXRpb247XG4gICAgfSgpXG4gIH0sIHtcbiAgICBrZXk6ICdzaG93S2V5Ym9hcmRTaG9ydGN1dHNQYW5lbCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIHNob3dLZXlib2FyZFNob3J0Y3V0c1BhbmVsKCkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBpc0RhdGVSYW5nZVBpY2tlcklucHV0Rm9jdXNlZDogZmFsc2UsXG4gICAgICAgICAgaXNEYXlQaWNrZXJGb2N1c2VkOiB0cnVlLFxuICAgICAgICAgIHNob3dLZXlib2FyZFNob3J0Y3V0czogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNob3dLZXlib2FyZFNob3J0Y3V0c1BhbmVsO1xuICAgIH0oKVxuICB9LCB7XG4gICAga2V5OiAnbWF5YmVSZW5kZXJEYXlQaWNrZXJXaXRoUG9ydGFsJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gbWF5YmVSZW5kZXJEYXlQaWNrZXJXaXRoUG9ydGFsKCkge1xuICAgICAgICB2YXIgX3Byb3BzNiA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgICB3aXRoUG9ydGFsID0gX3Byb3BzNi53aXRoUG9ydGFsLFxuICAgICAgICAgICAgd2l0aEZ1bGxTY3JlZW5Qb3J0YWwgPSBfcHJvcHM2LndpdGhGdWxsU2NyZWVuUG9ydGFsO1xuXG4gICAgICAgIGlmICghdGhpcy5pc09wZW5lZCgpKSB7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAod2l0aFBvcnRhbCB8fCB3aXRoRnVsbFNjcmVlblBvcnRhbCkge1xuICAgICAgICAgIHJldHVybiBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChfcmVhY3RQb3J0YWwyWydkZWZhdWx0J10sIHsgaXNPcGVuZWQ6IHRydWUgfSwgdGhpcy5yZW5kZXJEYXlQaWNrZXIoKSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5yZW5kZXJEYXlQaWNrZXIoKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG1heWJlUmVuZGVyRGF5UGlja2VyV2l0aFBvcnRhbDtcbiAgICB9KClcbiAgfSwge1xuICAgIGtleTogJ3JlbmRlckRheVBpY2tlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIHJlbmRlckRheVBpY2tlcigpIHtcbiAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgICAgdmFyIF9wcm9wczcgPSB0aGlzLnByb3BzLFxuICAgICAgICAgICAgaXNEYXlCbG9ja2VkID0gX3Byb3BzNy5pc0RheUJsb2NrZWQsXG4gICAgICAgICAgICBpc0RheUhpZ2hsaWdodGVkID0gX3Byb3BzNy5pc0RheUhpZ2hsaWdodGVkLFxuICAgICAgICAgICAgaXNPdXRzaWRlUmFuZ2UgPSBfcHJvcHM3LmlzT3V0c2lkZVJhbmdlLFxuICAgICAgICAgICAgbnVtYmVyT2ZNb250aHMgPSBfcHJvcHM3Lm51bWJlck9mTW9udGhzLFxuICAgICAgICAgICAgb3JpZW50YXRpb24gPSBfcHJvcHM3Lm9yaWVudGF0aW9uLFxuICAgICAgICAgICAgbW9udGhGb3JtYXQgPSBfcHJvcHM3Lm1vbnRoRm9ybWF0LFxuICAgICAgICAgICAgcmVuZGVyTW9udGggPSBfcHJvcHM3LnJlbmRlck1vbnRoLFxuICAgICAgICAgICAgbmF2UHJldiA9IF9wcm9wczcubmF2UHJldixcbiAgICAgICAgICAgIG5hdk5leHQgPSBfcHJvcHM3Lm5hdk5leHQsXG4gICAgICAgICAgICBvblByZXZNb250aENsaWNrID0gX3Byb3BzNy5vblByZXZNb250aENsaWNrLFxuICAgICAgICAgICAgb25OZXh0TW9udGhDbGljayA9IF9wcm9wczcub25OZXh0TW9udGhDbGljayxcbiAgICAgICAgICAgIG9uRGF0ZXNDaGFuZ2UgPSBfcHJvcHM3Lm9uRGF0ZXNDaGFuZ2UsXG4gICAgICAgICAgICBvbkZvY3VzQ2hhbmdlID0gX3Byb3BzNy5vbkZvY3VzQ2hhbmdlLFxuICAgICAgICAgICAgd2l0aFBvcnRhbCA9IF9wcm9wczcud2l0aFBvcnRhbCxcbiAgICAgICAgICAgIHdpdGhGdWxsU2NyZWVuUG9ydGFsID0gX3Byb3BzNy53aXRoRnVsbFNjcmVlblBvcnRhbCxcbiAgICAgICAgICAgIGRheVNpemUgPSBfcHJvcHM3LmRheVNpemUsXG4gICAgICAgICAgICBlbmFibGVPdXRzaWRlRGF5cyA9IF9wcm9wczcuZW5hYmxlT3V0c2lkZURheXMsXG4gICAgICAgICAgICBmb2N1c2VkSW5wdXQgPSBfcHJvcHM3LmZvY3VzZWRJbnB1dCxcbiAgICAgICAgICAgIHN0YXJ0RGF0ZSA9IF9wcm9wczcuc3RhcnREYXRlLFxuICAgICAgICAgICAgZW5kRGF0ZSA9IF9wcm9wczcuZW5kRGF0ZSxcbiAgICAgICAgICAgIG1pbmltdW1OaWdodHMgPSBfcHJvcHM3Lm1pbmltdW1OaWdodHMsXG4gICAgICAgICAgICBrZWVwT3Blbk9uRGF0ZVNlbGVjdCA9IF9wcm9wczcua2VlcE9wZW5PbkRhdGVTZWxlY3QsXG4gICAgICAgICAgICByZW5kZXJEYXkgPSBfcHJvcHM3LnJlbmRlckRheSxcbiAgICAgICAgICAgIHJlbmRlckNhbGVuZGFySW5mbyA9IF9wcm9wczcucmVuZGVyQ2FsZW5kYXJJbmZvLFxuICAgICAgICAgICAgZmlyc3REYXlPZldlZWsgPSBfcHJvcHM3LmZpcnN0RGF5T2ZXZWVrLFxuICAgICAgICAgICAgaW5pdGlhbFZpc2libGVNb250aCA9IF9wcm9wczcuaW5pdGlhbFZpc2libGVNb250aCxcbiAgICAgICAgICAgIGhpZGVLZXlib2FyZFNob3J0Y3V0c1BhbmVsID0gX3Byb3BzNy5oaWRlS2V5Ym9hcmRTaG9ydGN1dHNQYW5lbCxcbiAgICAgICAgICAgIGN1c3RvbUNsb3NlSWNvbiA9IF9wcm9wczcuY3VzdG9tQ2xvc2VJY29uLFxuICAgICAgICAgICAgb25DbG9zZSA9IF9wcm9wczcub25DbG9zZSxcbiAgICAgICAgICAgIHBocmFzZXMgPSBfcHJvcHM3LnBocmFzZXMsXG4gICAgICAgICAgICBpc1JUTCA9IF9wcm9wczcuaXNSVEw7XG4gICAgICAgIHZhciBfc3RhdGUgPSB0aGlzLnN0YXRlLFxuICAgICAgICAgICAgZGF5UGlja2VyQ29udGFpbmVyU3R5bGVzID0gX3N0YXRlLmRheVBpY2tlckNvbnRhaW5lclN0eWxlcyxcbiAgICAgICAgICAgIGlzRGF5UGlja2VyRm9jdXNlZCA9IF9zdGF0ZS5pc0RheVBpY2tlckZvY3VzZWQsXG4gICAgICAgICAgICBzaG93S2V5Ym9hcmRTaG9ydGN1dHMgPSBfc3RhdGUuc2hvd0tleWJvYXJkU2hvcnRjdXRzO1xuXG4gICAgICAgIHZhciBvbk91dHNpZGVDbGljayA9ICF3aXRoRnVsbFNjcmVlblBvcnRhbCAmJiB3aXRoUG9ydGFsID8gdGhpcy5vbk91dHNpZGVDbGljayA6IHVuZGVmaW5lZDtcbiAgICAgICAgdmFyIGluaXRpYWxWaXNpYmxlTW9udGhUaHVuayA9IGluaXRpYWxWaXNpYmxlTW9udGggfHwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBzdGFydERhdGUgfHwgZW5kRGF0ZSB8fCAoMCwgX21vbWVudDJbJ2RlZmF1bHQnXSkoKTtcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgY2xvc2VJY29uID0gY3VzdG9tQ2xvc2VJY29uIHx8IF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KF9jbG9zZTJbJ2RlZmF1bHQnXSwgbnVsbCk7XG5cbiAgICAgICAgcmV0dXJuIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUganN4LWExMXkvbm8tc3RhdGljLWVsZW1lbnQtaW50ZXJhY3Rpb25zXG4gICAgICAgICAgcmVmOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBmdW5jdGlvbiByZWYoX3JlZjIpIHtcbiAgICAgICAgICAgICAgX3RoaXMyLmRheVBpY2tlckNvbnRhaW5lciA9IF9yZWYyO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gcmVmO1xuICAgICAgICAgIH0oKSxcbiAgICAgICAgICBjbGFzc05hbWU6IHRoaXMuZ2V0RGF5UGlja2VyQ29udGFpbmVyQ2xhc3NlcygpLFxuICAgICAgICAgIHN0eWxlOiBkYXlQaWNrZXJDb250YWluZXJTdHlsZXMsXG4gICAgICAgICAgb25DbGljazogb25PdXRzaWRlQ2xpY2tcbiAgICAgICAgfSwgX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoX0RheVBpY2tlclJhbmdlQ29udHJvbGxlcjJbJ2RlZmF1bHQnXSwge1xuICAgICAgICAgIHJlZjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZnVuY3Rpb24gcmVmKF9yZWYpIHtcbiAgICAgICAgICAgICAgX3RoaXMyLmRheVBpY2tlciA9IF9yZWY7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiByZWY7XG4gICAgICAgICAgfSgpLFxuICAgICAgICAgIG9yaWVudGF0aW9uOiBvcmllbnRhdGlvbixcbiAgICAgICAgICBlbmFibGVPdXRzaWRlRGF5czogZW5hYmxlT3V0c2lkZURheXMsXG4gICAgICAgICAgbnVtYmVyT2ZNb250aHM6IG51bWJlck9mTW9udGhzLFxuICAgICAgICAgIG9uUHJldk1vbnRoQ2xpY2s6IG9uUHJldk1vbnRoQ2xpY2ssXG4gICAgICAgICAgb25OZXh0TW9udGhDbGljazogb25OZXh0TW9udGhDbGljayxcbiAgICAgICAgICBvbkRhdGVzQ2hhbmdlOiBvbkRhdGVzQ2hhbmdlLFxuICAgICAgICAgIG9uRm9jdXNDaGFuZ2U6IG9uRm9jdXNDaGFuZ2UsXG4gICAgICAgICAgb25DbG9zZTogb25DbG9zZSxcbiAgICAgICAgICBmb2N1c2VkSW5wdXQ6IGZvY3VzZWRJbnB1dCxcbiAgICAgICAgICBzdGFydERhdGU6IHN0YXJ0RGF0ZSxcbiAgICAgICAgICBlbmREYXRlOiBlbmREYXRlLFxuICAgICAgICAgIG1vbnRoRm9ybWF0OiBtb250aEZvcm1hdCxcbiAgICAgICAgICByZW5kZXJNb250aDogcmVuZGVyTW9udGgsXG4gICAgICAgICAgd2l0aFBvcnRhbDogd2l0aFBvcnRhbCB8fCB3aXRoRnVsbFNjcmVlblBvcnRhbCxcbiAgICAgICAgICBkYXlTaXplOiBkYXlTaXplLFxuICAgICAgICAgIGluaXRpYWxWaXNpYmxlTW9udGg6IGluaXRpYWxWaXNpYmxlTW9udGhUaHVuayxcbiAgICAgICAgICBoaWRlS2V5Ym9hcmRTaG9ydGN1dHNQYW5lbDogaGlkZUtleWJvYXJkU2hvcnRjdXRzUGFuZWwsXG4gICAgICAgICAgbmF2UHJldjogbmF2UHJldixcbiAgICAgICAgICBuYXZOZXh0OiBuYXZOZXh0LFxuICAgICAgICAgIG1pbmltdW1OaWdodHM6IG1pbmltdW1OaWdodHMsXG4gICAgICAgICAgaXNPdXRzaWRlUmFuZ2U6IGlzT3V0c2lkZVJhbmdlLFxuICAgICAgICAgIGlzRGF5SGlnaGxpZ2h0ZWQ6IGlzRGF5SGlnaGxpZ2h0ZWQsXG4gICAgICAgICAgaXNEYXlCbG9ja2VkOiBpc0RheUJsb2NrZWQsXG4gICAgICAgICAga2VlcE9wZW5PbkRhdGVTZWxlY3Q6IGtlZXBPcGVuT25EYXRlU2VsZWN0LFxuICAgICAgICAgIHJlbmRlckRheTogcmVuZGVyRGF5LFxuICAgICAgICAgIHJlbmRlckNhbGVuZGFySW5mbzogcmVuZGVyQ2FsZW5kYXJJbmZvLFxuICAgICAgICAgIGlzRm9jdXNlZDogaXNEYXlQaWNrZXJGb2N1c2VkLFxuICAgICAgICAgIHNob3dLZXlib2FyZFNob3J0Y3V0czogc2hvd0tleWJvYXJkU2hvcnRjdXRzLFxuICAgICAgICAgIG9uQmx1cjogdGhpcy5vbkRheVBpY2tlckJsdXIsXG4gICAgICAgICAgcGhyYXNlczogcGhyYXNlcyxcbiAgICAgICAgICBpc1JUTDogaXNSVEwsXG4gICAgICAgICAgZmlyc3REYXlPZldlZWs6IGZpcnN0RGF5T2ZXZWVrXG4gICAgICAgIH0pLCB3aXRoRnVsbFNjcmVlblBvcnRhbCAmJiBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudCgnYnV0dG9uJywge1xuICAgICAgICAgIGNsYXNzTmFtZTogJ0RhdGVSYW5nZVBpY2tlcl9fY2xvc2UnLFxuICAgICAgICAgIHR5cGU6ICdidXR0b24nLFxuICAgICAgICAgIG9uQ2xpY2s6IHRoaXMub25PdXRzaWRlQ2xpY2ssXG4gICAgICAgICAgJ2FyaWEtbGFiZWwnOiBwaHJhc2VzLmNsb3NlRGF0ZVBpY2tlclxuICAgICAgICB9LCBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6ICdEYXRlUmFuZ2VQaWNrZXJfX2Nsb3NlJyB9LCBjbG9zZUljb24pKSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZW5kZXJEYXlQaWNrZXI7XG4gICAgfSgpXG4gIH0sIHtcbiAgICBrZXk6ICdyZW5kZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgIHZhciBfcHJvcHM4ID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICAgIHN0YXJ0RGF0ZSA9IF9wcm9wczguc3RhcnREYXRlLFxuICAgICAgICAgICAgc3RhcnREYXRlSWQgPSBfcHJvcHM4LnN0YXJ0RGF0ZUlkLFxuICAgICAgICAgICAgc3RhcnREYXRlUGxhY2Vob2xkZXJUZXh0ID0gX3Byb3BzOC5zdGFydERhdGVQbGFjZWhvbGRlclRleHQsXG4gICAgICAgICAgICBlbmREYXRlID0gX3Byb3BzOC5lbmREYXRlLFxuICAgICAgICAgICAgZW5kRGF0ZUlkID0gX3Byb3BzOC5lbmREYXRlSWQsXG4gICAgICAgICAgICBlbmREYXRlUGxhY2Vob2xkZXJUZXh0ID0gX3Byb3BzOC5lbmREYXRlUGxhY2Vob2xkZXJUZXh0LFxuICAgICAgICAgICAgZm9jdXNlZElucHV0ID0gX3Byb3BzOC5mb2N1c2VkSW5wdXQsXG4gICAgICAgICAgICBzY3JlZW5SZWFkZXJJbnB1dE1lc3NhZ2UgPSBfcHJvcHM4LnNjcmVlblJlYWRlcklucHV0TWVzc2FnZSxcbiAgICAgICAgICAgIHNob3dDbGVhckRhdGVzID0gX3Byb3BzOC5zaG93Q2xlYXJEYXRlcyxcbiAgICAgICAgICAgIHNob3dEZWZhdWx0SW5wdXRJY29uID0gX3Byb3BzOC5zaG93RGVmYXVsdElucHV0SWNvbixcbiAgICAgICAgICAgIGN1c3RvbUlucHV0SWNvbiA9IF9wcm9wczguY3VzdG9tSW5wdXRJY29uLFxuICAgICAgICAgICAgY3VzdG9tQXJyb3dJY29uID0gX3Byb3BzOC5jdXN0b21BcnJvd0ljb24sXG4gICAgICAgICAgICBjdXN0b21DbG9zZUljb24gPSBfcHJvcHM4LmN1c3RvbUNsb3NlSWNvbixcbiAgICAgICAgICAgIGRpc2FibGVkID0gX3Byb3BzOC5kaXNhYmxlZCxcbiAgICAgICAgICAgIHJlcXVpcmVkID0gX3Byb3BzOC5yZXF1aXJlZCxcbiAgICAgICAgICAgIHJlYWRPbmx5ID0gX3Byb3BzOC5yZWFkT25seSxcbiAgICAgICAgICAgIHBocmFzZXMgPSBfcHJvcHM4LnBocmFzZXMsXG4gICAgICAgICAgICBpc091dHNpZGVSYW5nZSA9IF9wcm9wczguaXNPdXRzaWRlUmFuZ2UsXG4gICAgICAgICAgICBtaW5pbXVtTmlnaHRzID0gX3Byb3BzOC5taW5pbXVtTmlnaHRzLFxuICAgICAgICAgICAgd2l0aFBvcnRhbCA9IF9wcm9wczgud2l0aFBvcnRhbCxcbiAgICAgICAgICAgIHdpdGhGdWxsU2NyZWVuUG9ydGFsID0gX3Byb3BzOC53aXRoRnVsbFNjcmVlblBvcnRhbCxcbiAgICAgICAgICAgIGRpc3BsYXlGb3JtYXQgPSBfcHJvcHM4LmRpc3BsYXlGb3JtYXQsXG4gICAgICAgICAgICByZW9wZW5QaWNrZXJPbkNsZWFyRGF0ZXMgPSBfcHJvcHM4LnJlb3BlblBpY2tlck9uQ2xlYXJEYXRlcyxcbiAgICAgICAgICAgIGtlZXBPcGVuT25EYXRlU2VsZWN0ID0gX3Byb3BzOC5rZWVwT3Blbk9uRGF0ZVNlbGVjdCxcbiAgICAgICAgICAgIG9uRGF0ZXNDaGFuZ2UgPSBfcHJvcHM4Lm9uRGF0ZXNDaGFuZ2UsXG4gICAgICAgICAgICBvbkNsb3NlID0gX3Byb3BzOC5vbkNsb3NlLFxuICAgICAgICAgICAgaXNSVEwgPSBfcHJvcHM4LmlzUlRMO1xuICAgICAgICB2YXIgaXNEYXRlUmFuZ2VQaWNrZXJJbnB1dEZvY3VzZWQgPSB0aGlzLnN0YXRlLmlzRGF0ZVJhbmdlUGlja2VySW5wdXRGb2N1c2VkO1xuXG4gICAgICAgIHZhciBvbk91dHNpZGVDbGljayA9ICF3aXRoUG9ydGFsICYmICF3aXRoRnVsbFNjcmVlblBvcnRhbCA/IHRoaXMub25PdXRzaWRlQ2xpY2sgOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgcmV0dXJuIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogJ0RhdGVSYW5nZVBpY2tlcicgfSwgX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoX091dHNpZGVDbGlja0hhbmRsZXIyWydkZWZhdWx0J10sIHsgb25PdXRzaWRlQ2xpY2s6IG9uT3V0c2lkZUNsaWNrIH0sIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KF9EYXRlUmFuZ2VQaWNrZXJJbnB1dENvbnRyb2xsZXIyWydkZWZhdWx0J10sIHtcbiAgICAgICAgICBzdGFydERhdGU6IHN0YXJ0RGF0ZSxcbiAgICAgICAgICBzdGFydERhdGVJZDogc3RhcnREYXRlSWQsXG4gICAgICAgICAgc3RhcnREYXRlUGxhY2Vob2xkZXJUZXh0OiBzdGFydERhdGVQbGFjZWhvbGRlclRleHQsXG4gICAgICAgICAgaXNTdGFydERhdGVGb2N1c2VkOiBmb2N1c2VkSW5wdXQgPT09IF9jb25zdGFudHMuU1RBUlRfREFURSxcbiAgICAgICAgICBlbmREYXRlOiBlbmREYXRlLFxuICAgICAgICAgIGVuZERhdGVJZDogZW5kRGF0ZUlkLFxuICAgICAgICAgIGVuZERhdGVQbGFjZWhvbGRlclRleHQ6IGVuZERhdGVQbGFjZWhvbGRlclRleHQsXG4gICAgICAgICAgaXNFbmREYXRlRm9jdXNlZDogZm9jdXNlZElucHV0ID09PSBfY29uc3RhbnRzLkVORF9EQVRFLFxuICAgICAgICAgIGRpc3BsYXlGb3JtYXQ6IGRpc3BsYXlGb3JtYXQsXG4gICAgICAgICAgc2hvd0NsZWFyRGF0ZXM6IHNob3dDbGVhckRhdGVzLFxuICAgICAgICAgIHNob3dDYXJldDogIXdpdGhQb3J0YWwgJiYgIXdpdGhGdWxsU2NyZWVuUG9ydGFsLFxuICAgICAgICAgIHNob3dEZWZhdWx0SW5wdXRJY29uOiBzaG93RGVmYXVsdElucHV0SWNvbixcbiAgICAgICAgICBjdXN0b21JbnB1dEljb246IGN1c3RvbUlucHV0SWNvbixcbiAgICAgICAgICBjdXN0b21BcnJvd0ljb246IGN1c3RvbUFycm93SWNvbixcbiAgICAgICAgICBjdXN0b21DbG9zZUljb246IGN1c3RvbUNsb3NlSWNvbixcbiAgICAgICAgICBkaXNhYmxlZDogZGlzYWJsZWQsXG4gICAgICAgICAgcmVxdWlyZWQ6IHJlcXVpcmVkLFxuICAgICAgICAgIHJlYWRPbmx5OiByZWFkT25seSxcbiAgICAgICAgICByZW9wZW5QaWNrZXJPbkNsZWFyRGF0ZXM6IHJlb3BlblBpY2tlck9uQ2xlYXJEYXRlcyxcbiAgICAgICAgICBrZWVwT3Blbk9uRGF0ZVNlbGVjdDoga2VlcE9wZW5PbkRhdGVTZWxlY3QsXG4gICAgICAgICAgaXNPdXRzaWRlUmFuZ2U6IGlzT3V0c2lkZVJhbmdlLFxuICAgICAgICAgIG1pbmltdW1OaWdodHM6IG1pbmltdW1OaWdodHMsXG4gICAgICAgICAgd2l0aEZ1bGxTY3JlZW5Qb3J0YWw6IHdpdGhGdWxsU2NyZWVuUG9ydGFsLFxuICAgICAgICAgIG9uRGF0ZXNDaGFuZ2U6IG9uRGF0ZXNDaGFuZ2UsXG4gICAgICAgICAgb25Gb2N1c0NoYW5nZTogdGhpcy5vbkRhdGVSYW5nZVBpY2tlcklucHV0Rm9jdXMsXG4gICAgICAgICAgb25BcnJvd0Rvd246IHRoaXMub25EYXlQaWNrZXJGb2N1cyxcbiAgICAgICAgICBvblF1ZXN0aW9uTWFyazogdGhpcy5zaG93S2V5Ym9hcmRTaG9ydGN1dHNQYW5lbCxcbiAgICAgICAgICBvbkNsb3NlOiBvbkNsb3NlLFxuICAgICAgICAgIHBocmFzZXM6IHBocmFzZXMsXG4gICAgICAgICAgc2NyZWVuUmVhZGVyTWVzc2FnZTogc2NyZWVuUmVhZGVySW5wdXRNZXNzYWdlLFxuICAgICAgICAgIGlzRm9jdXNlZDogaXNEYXRlUmFuZ2VQaWNrZXJJbnB1dEZvY3VzZWQsXG4gICAgICAgICAgaXNSVEw6IGlzUlRMXG4gICAgICAgIH0pLCB0aGlzLm1heWJlUmVuZGVyRGF5UGlja2VyV2l0aFBvcnRhbCgpKSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZW5kZXI7XG4gICAgfSgpXG4gIH1dKTtcblxuICByZXR1cm4gRGF0ZVJhbmdlUGlja2VyO1xufShfcmVhY3QyWydkZWZhdWx0J10uQ29tcG9uZW50KTtcblxuZXhwb3J0c1snZGVmYXVsdCddID0gRGF0ZVJhbmdlUGlja2VyO1xuXG5EYXRlUmFuZ2VQaWNrZXIucHJvcFR5cGVzID0gcHJvcFR5cGVzO1xuRGF0ZVJhbmdlUGlja2VyLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcblxuLyoqKi8gfSlcbi8qKioqKiovIF0pOyIsIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBub29wKCkge1xuICByZXR1cm4gbnVsbDtcbn1cblxubm9vcC5pc1JlcXVpcmVkID0gbm9vcDtcblxuZnVuY3Rpb24gbm9vcFRodW5rKCkge1xuICByZXR1cm4gbm9vcDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGFuZDogbm9vcFRodW5rLFxuICBiZXR3ZWVuOiBub29wVGh1bmssXG4gIGJvb2xlYW5Tb21lOiBub29wVGh1bmssXG4gIGNoaWxkcmVuSGF2ZVByb3BYb3JDaGlsZHJlbjogbm9vcFRodW5rLFxuICBjaGlsZHJlbk9mOiBub29wVGh1bmssXG4gIGNoaWxkcmVuT2ZUeXBlOiBub29wVGh1bmssXG4gIGNoaWxkcmVuU2VxdWVuY2VPZjogbm9vcFRodW5rLFxuICBjb21wb25lbnRXaXRoTmFtZTogbm9vcFRodW5rLFxuICBkaXNhbGxvd2VkSWY6IG5vb3BUaHVuayxcbiAgZWxlbWVudFR5cGU6IG5vb3BUaHVuayxcbiAgZW1wdHk6IG5vb3BUaHVuayxcbiAgZXhwbGljaXROdWxsOiBub29wVGh1bmssXG4gIGZvcmJpZEV4dHJhUHJvcHM6IE9iamVjdCxcbiAgaW50ZWdlcjogbm9vcFRodW5rLFxuICBrZXlzT2Y6IG5vb3BUaHVuayxcbiAgbXV0dWFsbHlFeGNsdXNpdmVQcm9wczogbm9vcFRodW5rLFxuICBtdXR1YWxseUV4Y2x1c2l2ZVRydWVQcm9wczogbm9vcFRodW5rLFxuICBuQ2hpbGRyZW46IG5vb3BUaHVuayxcbiAgbm9uTmVnYXRpdmVJbnRlZ2VyOiBub29wLFxuICBub25OZWdhdGl2ZU51bWJlcjogbm9vcFRodW5rLFxuICBudW1lcmljU3RyaW5nOiBub29wVGh1bmssXG4gIG9iamVjdDogbm9vcFRodW5rLFxuICBvcjogbm9vcFRodW5rLFxuICByYW5nZTogbm9vcFRodW5rLFxuICByZWY6IG5vb3BUaHVuayxcbiAgcmVxdWlyZWRCeTogbm9vcFRodW5rLFxuICByZXN0cmljdGVkUHJvcDogbm9vcFRodW5rLFxuICBzZXF1ZW5jZU9mOiBub29wVGh1bmssXG4gIHNoYXBlOiBub29wVGh1bmssXG4gIHN0cmluZ0VuZHNXaXRoOiBub29wVGh1bmssXG4gIHN0cmluZ1N0YXJ0c1dpdGg6IG5vb3BUaHVuayxcbiAgdW5pcXVlQXJyYXk6IG5vb3BUaHVuayxcbiAgdW5pcXVlQXJyYXlPZjogbm9vcFRodW5rLFxuICB2YWx1ZXNPZjogbm9vcFRodW5rLFxuICB3aXRoU2hhcGU6IG5vb3BUaHVua1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCIsIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzWydkZWZhdWx0J10gPSBub3JtYWxpemVFdmVudE9wdGlvbnM7XG5cbnZhciBfY2FuVXNlUGFzc2l2ZUV2ZW50TGlzdGVuZXJzID0gcmVxdWlyZSgnLi9jYW5Vc2VQYXNzaXZlRXZlbnRMaXN0ZW5lcnMnKTtcblxudmFyIF9jYW5Vc2VQYXNzaXZlRXZlbnRMaXN0ZW5lcnMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2FuVXNlUGFzc2l2ZUV2ZW50TGlzdGVuZXJzKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG5mdW5jdGlvbiBub3JtYWxpemVFdmVudE9wdGlvbnMoZXZlbnRPcHRpb25zKSB7XG4gIGlmICghZXZlbnRPcHRpb25zKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIGlmICghKDAsIF9jYW5Vc2VQYXNzaXZlRXZlbnRMaXN0ZW5lcnMyWydkZWZhdWx0J10pKCkpIHtcbiAgICAvLyBJZiB0aGUgYnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IHRoZSBwYXNzaXZlIG9wdGlvbiwgdGhlbiBpdCBpcyBleHBlY3RpbmdcbiAgICAvLyBhIGJvb2xlYW4gZm9yIHRoZSBvcHRpb25zIGFyZ3VtZW50IHRvIHNwZWNpZnkgd2hldGhlciBpdCBzaG91bGQgdXNlXG4gICAgLy8gY2FwdHVyZSBvciBub3QuIEluIG1vcmUgbW9kZXJuIGJyb3dzZXJzLCB0aGlzIGlzIHBhc3NlZCB2aWEgdGhlIGBjYXB0dXJlYFxuICAgIC8vIG9wdGlvbiwgc28gbGV0J3MganVzdCBob2lzdCB0aGF0IHZhbHVlIHVwLlxuICAgIHJldHVybiAhIWV2ZW50T3B0aW9ucy5jYXB0dXJlO1xuICB9XG5cbiAgcmV0dXJuIGV2ZW50T3B0aW9ucztcbn0iLCJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1snZGVmYXVsdCddID0gY2FuVXNlUGFzc2l2ZUV2ZW50TGlzdGVuZXJzO1xuXG52YXIgX2NhblVzZURPTSA9IHJlcXVpcmUoJy4vY2FuVXNlRE9NJyk7XG5cbnZhciBfY2FuVXNlRE9NMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NhblVzZURPTSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxuLy8gQWRhcHRlZCBmcm9tIE1vZGVybml6clxuLy8gaHR0cHM6Ly9naXRodWIuY29tL01vZGVybml6ci9Nb2Rlcm5penIvYmxvYi81ZWVhN2UyYS9mZWF0dXJlLWRldGVjdHMvZG9tL3Bhc3NpdmVldmVudGxpc3RlbmVycy5qcyNMMjYtTDM1XG5mdW5jdGlvbiB0ZXN0UGFzc2l2ZUV2ZW50TGlzdGVuZXJzKCkge1xuICBpZiAoIV9jYW5Vc2VET00yWydkZWZhdWx0J10pIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAoIXdpbmRvdy5hZGRFdmVudExpc3RlbmVyIHx8ICF3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lciB8fCAhT2JqZWN0LmRlZmluZVByb3BlcnR5KSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIHN1cHBvcnRzUGFzc2l2ZU9wdGlvbiA9IGZhbHNlO1xuICB0cnkge1xuICAgIHZhciBvcHRzID0gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAncGFzc2l2ZScsIHtcbiAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgc3VwcG9ydHNQYXNzaXZlT3B0aW9uID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBnZXQ7XG4gICAgICB9KClcbiAgICB9KTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndGVzdCcsIG51bGwsIG9wdHMpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gZG8gbm90aGluZ1xuICB9XG5cbiAgcmV0dXJuIHN1cHBvcnRzUGFzc2l2ZU9wdGlvbjtcbn1cblxudmFyIG1lbW9pemVkID0gdm9pZCAwO1xuXG5mdW5jdGlvbiBjYW5Vc2VQYXNzaXZlRXZlbnRMaXN0ZW5lcnMoKSB7XG4gIGlmIChtZW1vaXplZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgbWVtb2l6ZWQgPSB0ZXN0UGFzc2l2ZUV2ZW50TGlzdGVuZXJzKCk7XG4gIH1cbiAgcmV0dXJuIG1lbW9pemVkO1xufSIsIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG52YXIgQ0FOX1VTRV9ET00gPSAhISh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuZG9jdW1lbnQgJiYgd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xuXG5leHBvcnRzWydkZWZhdWx0J10gPSBDQU5fVVNFX0RPTTsiLCJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX2V2ZW50T3B0aW9uc0tleSA9IHJlcXVpcmUoJy4vZXZlbnRPcHRpb25zS2V5Jyk7XG5cbnZhciBfZXZlbnRPcHRpb25zS2V5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2V2ZW50T3B0aW9uc0tleSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gZW5zdXJlQ2FuTXV0YXRlTmV4dEV2ZW50SGFuZGxlcnMoZXZlbnRIYW5kbGVycykge1xuICBpZiAoZXZlbnRIYW5kbGVycy5oYW5kbGVycyA9PT0gZXZlbnRIYW5kbGVycy5uZXh0SGFuZGxlcnMpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICBldmVudEhhbmRsZXJzLm5leHRIYW5kbGVycyA9IGV2ZW50SGFuZGxlcnMuaGFuZGxlcnMuc2xpY2UoKTtcbiAgfVxufVxuXG52YXIgVGFyZ2V0RXZlbnRIYW5kbGVycyA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gVGFyZ2V0RXZlbnRIYW5kbGVycyh0YXJnZXQpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVGFyZ2V0RXZlbnRIYW5kbGVycyk7XG5cbiAgICB0aGlzLnRhcmdldCA9IHRhcmdldDtcbiAgICB0aGlzLmV2ZW50cyA9IHt9O1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFRhcmdldEV2ZW50SGFuZGxlcnMsIFt7XG4gICAga2V5OiAnZ2V0RXZlbnRIYW5kbGVycycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIGdldEV2ZW50SGFuZGxlcnMoZXZlbnROYW1lLCBvcHRpb25zKSB7XG4gICAgICAgIHZhciBrZXkgPSBTdHJpbmcoZXZlbnROYW1lKSArICcgJyArIFN0cmluZygoMCwgX2V2ZW50T3B0aW9uc0tleTJbJ2RlZmF1bHQnXSkob3B0aW9ucykpO1xuXG4gICAgICAgIGlmICghdGhpcy5ldmVudHNba2V5XSkge1xuICAgICAgICAgIHRoaXMuZXZlbnRzW2tleV0gPSB7XG4gICAgICAgICAgICBoYW5kbGVyczogW10sXG4gICAgICAgICAgICBoYW5kbGVFdmVudDogdW5kZWZpbmVkXG4gICAgICAgICAgfTtcbiAgICAgICAgICB0aGlzLmV2ZW50c1trZXldLm5leHRIYW5kbGVycyA9IHRoaXMuZXZlbnRzW2tleV0uaGFuZGxlcnM7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5ldmVudHNba2V5XTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGdldEV2ZW50SGFuZGxlcnM7XG4gICAgfSgpXG4gIH0sIHtcbiAgICBrZXk6ICdoYW5kbGVFdmVudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIGhhbmRsZUV2ZW50KGV2ZW50TmFtZSwgb3B0aW9ucywgZXZlbnQpIHtcbiAgICAgICAgdmFyIGV2ZW50SGFuZGxlcnMgPSB0aGlzLmdldEV2ZW50SGFuZGxlcnMoZXZlbnROYW1lLCBvcHRpb25zKTtcbiAgICAgICAgZXZlbnRIYW5kbGVycy5oYW5kbGVycyA9IGV2ZW50SGFuZGxlcnMubmV4dEhhbmRsZXJzO1xuICAgICAgICBldmVudEhhbmRsZXJzLmhhbmRsZXJzLmZvckVhY2goZnVuY3Rpb24gKGhhbmRsZXIpIHtcbiAgICAgICAgICBpZiAoaGFuZGxlcikge1xuICAgICAgICAgICAgLy8gV2UgbmVlZCB0byBjaGVjayBmb3IgcHJlc2VuY2UgaGVyZSBiZWNhdXNlIGEgaGFuZGxlciBmdW5jdGlvbiBtYXlcbiAgICAgICAgICAgIC8vIGNhdXNlIGxhdGVyIGhhbmRsZXJzIHRvIGdldCByZW1vdmVkLiBUaGlzIGNhbiBoYXBwZW4gaWYgeW91IGZvclxuICAgICAgICAgICAgLy8gaW5zdGFuY2UgaGF2ZSBhIHdheXBvaW50IHRoYXQgdW5tb3VudHMgYW5vdGhlciB3YXlwb2ludCBhcyBwYXJ0IG9mIGFuXG4gICAgICAgICAgICAvLyBvbkVudGVyL29uTGVhdmUgaGFuZGxlci5cbiAgICAgICAgICAgIGhhbmRsZXIoZXZlbnQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBoYW5kbGVFdmVudDtcbiAgICB9KClcbiAgfSwge1xuICAgIGtleTogJ2FkZCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIGFkZChldmVudE5hbWUsIGxpc3RlbmVyLCBvcHRpb25zKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgICAgLy8gb3B0aW9ucyBoYXMgYWxyZWFkeSBiZWVuIG5vcm1hbGl6ZWQgYXQgdGhpcyBwb2ludC5cbiAgICAgICAgdmFyIGV2ZW50SGFuZGxlcnMgPSB0aGlzLmdldEV2ZW50SGFuZGxlcnMoZXZlbnROYW1lLCBvcHRpb25zKTtcblxuICAgICAgICBlbnN1cmVDYW5NdXRhdGVOZXh0RXZlbnRIYW5kbGVycyhldmVudEhhbmRsZXJzKTtcblxuICAgICAgICBpZiAoZXZlbnRIYW5kbGVycy5uZXh0SGFuZGxlcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgZXZlbnRIYW5kbGVycy5oYW5kbGVFdmVudCA9IHRoaXMuaGFuZGxlRXZlbnQuYmluZCh0aGlzLCBldmVudE5hbWUsIG9wdGlvbnMpO1xuXG4gICAgICAgICAgdGhpcy50YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGV2ZW50SGFuZGxlcnMuaGFuZGxlRXZlbnQsIG9wdGlvbnMpO1xuICAgICAgICB9XG5cbiAgICAgICAgZXZlbnRIYW5kbGVycy5uZXh0SGFuZGxlcnMucHVzaChsaXN0ZW5lcik7XG5cbiAgICAgICAgdmFyIGlzU3Vic2NyaWJlZCA9IHRydWU7XG4gICAgICAgIHZhciB1bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBmdW5jdGlvbiB1bnN1YnNjcmliZSgpIHtcbiAgICAgICAgICAgIGlmICghaXNTdWJzY3JpYmVkKSB7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaXNTdWJzY3JpYmVkID0gZmFsc2U7XG5cbiAgICAgICAgICAgIGVuc3VyZUNhbk11dGF0ZU5leHRFdmVudEhhbmRsZXJzKGV2ZW50SGFuZGxlcnMpO1xuICAgICAgICAgICAgdmFyIGluZGV4ID0gZXZlbnRIYW5kbGVycy5uZXh0SGFuZGxlcnMuaW5kZXhPZihsaXN0ZW5lcik7XG4gICAgICAgICAgICBldmVudEhhbmRsZXJzLm5leHRIYW5kbGVycy5zcGxpY2UoaW5kZXgsIDEpO1xuXG4gICAgICAgICAgICBpZiAoZXZlbnRIYW5kbGVycy5uZXh0SGFuZGxlcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgIC8vIEFsbCBldmVudCBoYW5kbGVycyBoYXZlIGJlZW4gcmVtb3ZlZCwgc28gd2Ugd2FudCB0byByZW1vdmUgdGhlIGV2ZW50XG4gICAgICAgICAgICAgIC8vIGxpc3RlbmVyIGZyb20gdGhlIHRhcmdldCBub2RlLlxuXG4gICAgICAgICAgICAgIGlmIChfdGhpcy50YXJnZXQpIHtcbiAgICAgICAgICAgICAgICAvLyBUaGVyZSBjYW4gYmUgYSByYWNlIGNvbmRpdGlvbiB3aGVyZSB0aGUgdGFyZ2V0IG1heSBubyBsb25nZXIgZXhpc3RcbiAgICAgICAgICAgICAgICAvLyB3aGVuIHRoaXMgZnVuY3Rpb24gaXMgY2FsbGVkLCBlLmcuIHdoZW4gYSBSZWFjdCBjb21wb25lbnQgaXNcbiAgICAgICAgICAgICAgICAvLyB1bm1vdW50aW5nLiBHdWFyZGluZyBhZ2FpbnN0IHRoaXMgcHJldmVudHMgdGhlIGZvbGxvd2luZyBlcnJvcjpcbiAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgIC8vICAgQ2Fubm90IHJlYWQgcHJvcGVydHkgJ3JlbW92ZUV2ZW50TGlzdGVuZXInIG9mIHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgIF90aGlzLnRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgZXZlbnRIYW5kbGVycy5oYW5kbGVFdmVudCwgb3B0aW9ucyk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBldmVudEhhbmRsZXJzLmhhbmRsZUV2ZW50ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB1bnN1YnNjcmliZTtcbiAgICAgICAgfSgpO1xuICAgICAgICByZXR1cm4gdW5zdWJzY3JpYmU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBhZGQ7XG4gICAgfSgpXG4gIH1dKTtcblxuICByZXR1cm4gVGFyZ2V0RXZlbnRIYW5kbGVycztcbn0oKTtcblxuZXhwb3J0c1snZGVmYXVsdCddID0gVGFyZ2V0RXZlbnRIYW5kbGVyczsiLCJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBldmVudE9wdGlvbnNLZXk7XG4vKiBlc2xpbnQtZGlzYWJsZSBuby1iaXR3aXNlICovXG5cbi8qKlxuICogR2VuZXJhdGUgYSB1bmlxdWUga2V5IGZvciBhbnkgc2V0IG9mIGV2ZW50IG9wdGlvbnNcbiAqL1xuZnVuY3Rpb24gZXZlbnRPcHRpb25zS2V5KG5vcm1hbGl6ZWRFdmVudE9wdGlvbnMpIHtcbiAgaWYgKCFub3JtYWxpemVkRXZlbnRPcHRpb25zKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICAvLyBJZiB0aGUgYnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IHBhc3NpdmUgZXZlbnQgbGlzdGVuZXJzLCB0aGUgbm9ybWFsaXplZFxuICAvLyBldmVudCBvcHRpb25zIHdpbGwgYmUgYSBib29sZWFuLlxuICBpZiAobm9ybWFsaXplZEV2ZW50T3B0aW9ucyA9PT0gdHJ1ZSkge1xuICAgIHJldHVybiAxMDA7XG4gIH1cblxuICAvLyBBdCB0aGlzIHBvaW50LCB0aGUgYnJvd3NlciBzdXBwb3J0cyBwYXNzaXZlIGV2ZW50IGxpc3RlbmVycywgc28gd2UgZXhwZWN0XG4gIC8vIHRoZSBldmVudCBvcHRpb25zIHRvIGJlIGFuIG9iamVjdCB3aXRoIHBvc3NpYmxlIHByb3BlcnRpZXMgb2YgY2FwdHVyZSxcbiAgLy8gcGFzc2l2ZSwgYW5kIG9uY2UuXG4gIC8vXG4gIC8vIFdlIHdhbnQgdG8gY29uc2lzdGVudGx5IHJldHVybiB0aGUgc2FtZSB2YWx1ZSwgcmVnYXJkbGVzcyBvZiB0aGUgb3JkZXIgb2ZcbiAgLy8gdGhlc2UgcHJvcGVydGllcywgc28gbGV0J3MgdXNlIGJpbmFyeSBtYXRocyB0byBhc3NpZ24gZWFjaCBwcm9wZXJ0eSB0byBhXG4gIC8vIGJpdCwgYW5kIHRoZW4gYWRkIHRob3NlIHRvZ2V0aGVyICh3aXRoIGFuIG9mZnNldCB0byBhY2NvdW50IGZvciB0aGVcbiAgLy8gYm9vbGVhbnMgYXQgdGhlIGJlZ2lubmluZyBvZiB0aGlzIGZ1bmN0aW9uKS5cbiAgdmFyIGNhcHR1cmUgPSBub3JtYWxpemVkRXZlbnRPcHRpb25zLmNhcHR1cmUgPDwgMDtcbiAgdmFyIHBhc3NpdmUgPSBub3JtYWxpemVkRXZlbnRPcHRpb25zLnBhc3NpdmUgPDwgMTtcbiAgdmFyIG9uY2UgPSBub3JtYWxpemVkRXZlbnRPcHRpb25zLm9uY2UgPDwgMjtcbiAgcmV0dXJuIGNhcHR1cmUgKyBwYXNzaXZlICsgb25jZTtcbn0iLCJ2YXIgbW9tZW50ID0gcmVxdWlyZSgnbW9tZW50Jyk7XG5cbmZ1bmN0aW9uIGlzVmFsaWRNb21lbnQodGVzdE1vbWVudCkge1xuICBpZiAodHlwZW9mIG1vbWVudC5pc01vbWVudCA9PT0gJ2Z1bmN0aW9uJyAmJiAhbW9tZW50LmlzTW9tZW50KHRlc3RNb21lbnQpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgICovXG4gIGlmICh0eXBlb2YgdGVzdE1vbWVudC5pc1ZhbGlkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgLy8gbW9tZW50IDEuNy4wK1xuICAgIHJldHVybiB0ZXN0TW9tZW50LmlzVmFsaWQoKTtcbiAgfVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIHJldHVybiAhaXNOYU4odGVzdE1vbWVudCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBpc1ZhbGlkTW9tZW50IDogaXNWYWxpZE1vbWVudCxcbn07XG4iLCJ2YXIgbWVzc2FnZXMgPSB7XG4gIGludmFsaWRQcmVkaWNhdGU6ICdgcHJlZGljYXRlYCBtdXN0IGJlIGEgZnVuY3Rpb24nLFxuICBpbnZhbGlkUHJvcFZhbGlkYXRvcjogJ2Bwcm9wVmFsaWRhdG9yYCBtdXN0IGJlIGEgZnVuY3Rpb24nLFxuICByZXF1aXJlZENvcmU6ICdpcyBtYXJrZWQgYXMgcmVxdWlyZWQnLFxuICBpbnZhbGlkVHlwZUNvcmU6ICdJbnZhbGlkIGlucHV0IHR5cGUnLFxuICBwcmVkaWNhdGVGYWlsdXJlQ29yZTogJ0ZhaWxlZCB0byBzdWNjZWVkIHdpdGggcHJlZGljYXRlJyxcbiAgYW5vbnltb3VzTWVzc2FnZTogJzw8YW5vbnltb3VzPj4nLFxuICBiYXNlSW52YWxpZE1lc3NhZ2U6ICdJbnZhbGlkICcsXG59O1xuXG5mdW5jdGlvbiBjb25zdHJ1Y3RQcm9wVmFsaWRhdG9yVmFyaWF0aW9ucyhwcm9wVmFsaWRhdG9yKSB7XG4gIGlmICh0eXBlb2YgcHJvcFZhbGlkYXRvciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlcy5pbnZhbGlkUHJvcFZhbGlkYXRvcik7XG4gIH1cblxuICB2YXIgcmVxdWlyZWRQcm9wVmFsaWRhdG9yID0gcHJvcFZhbGlkYXRvci5iaW5kKG51bGwsIGZhbHNlLCBudWxsKTtcbiAgcmVxdWlyZWRQcm9wVmFsaWRhdG9yLmlzUmVxdWlyZWQgPSBwcm9wVmFsaWRhdG9yLmJpbmQobnVsbCwgdHJ1ZSwgbnVsbCk7XG5cbiAgcmVxdWlyZWRQcm9wVmFsaWRhdG9yLndpdGhQcmVkaWNhdGUgPSBmdW5jdGlvbiBwcmVkaWNhdGVBcHBsaWNhdGlvbihwcmVkaWNhdGUpIHtcbiAgICBpZiAodHlwZW9mIHByZWRpY2F0ZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2VzLmludmFsaWRQcmVkaWNhdGUpO1xuICAgIH1cbiAgICB2YXIgYmFzZVByb3BWYWxpZGF0b3IgPSBwcm9wVmFsaWRhdG9yLmJpbmQobnVsbCwgZmFsc2UsIHByZWRpY2F0ZSk7XG4gICAgYmFzZVByb3BWYWxpZGF0b3IuaXNSZXF1aXJlZCA9IHByb3BWYWxpZGF0b3IuYmluZChudWxsLCB0cnVlLCBwcmVkaWNhdGUpO1xuICAgIHJldHVybiBiYXNlUHJvcFZhbGlkYXRvcjtcbiAgfTtcblxuICByZXR1cm4gcmVxdWlyZWRQcm9wVmFsaWRhdG9yO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVJbnZhbGlkUmVxdWlyZWRFcnJvck1lc3NhZ2UocHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiBuZXcgRXJyb3IoXG4gICAgJ1RoZSBwcm9wIGAnICsgcHJvcE5hbWUgKyAnYCAnICsgbWVzc2FnZXMucmVxdWlyZWRDb3JlICtcbiAgICAnIGluIGAnICsgY29tcG9uZW50TmFtZSArICdgLCBidXQgaXRzIHZhbHVlIGlzIGAnICsgdmFsdWUgKyAnYC4nXG4gICk7XG59XG5cbnZhciBpbmRlcGVuZGVudEd1YXJkaWFuVmFsdWUgPSAtMTtcblxuZnVuY3Rpb24gcHJlVmFsaWRhdGlvblJlcXVpcmVDaGVjayhpc1JlcXVpcmVkLCBjb21wb25lbnROYW1lLCBwcm9wRnVsbE5hbWUsIHByb3BWYWx1ZSkge1xuICB2YXIgaXNQcm9wVmFsdWVVbmRlZmluZWQgPSB0eXBlb2YgcHJvcFZhbHVlID09PSAndW5kZWZpbmVkJztcbiAgdmFyIGlzUHJvcFZhbHVlTnVsbCA9IHByb3BWYWx1ZSA9PT0gbnVsbDtcblxuICBpZiAoaXNSZXF1aXJlZCkge1xuICAgIGlmIChpc1Byb3BWYWx1ZVVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGNyZWF0ZUludmFsaWRSZXF1aXJlZEVycm9yTWVzc2FnZShwcm9wRnVsbE5hbWUsIGNvbXBvbmVudE5hbWUsICd1bmRlZmluZWQnKTtcbiAgICB9IGVsc2UgaWYgKGlzUHJvcFZhbHVlTnVsbCkge1xuICAgICAgcmV0dXJuIGNyZWF0ZUludmFsaWRSZXF1aXJlZEVycm9yTWVzc2FnZShwcm9wRnVsbE5hbWUsIGNvbXBvbmVudE5hbWUsICdudWxsJyk7XG4gICAgfVxuICB9XG5cbiAgaWYgKGlzUHJvcFZhbHVlVW5kZWZpbmVkIHx8IGlzUHJvcFZhbHVlTnVsbCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIGluZGVwZW5kZW50R3VhcmRpYW5WYWx1ZTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlTW9tZW50Q2hlY2tlcih0eXBlLCB0eXBlVmFsaWRhdG9yLCB2YWxpZGF0b3IsIG1vbWVudFR5cGUpIHtcblxuICBmdW5jdGlvbiBwcm9wVmFsaWRhdG9yKFxuICAgIGlzUmVxdWlyZWQsIC8vIEJvdW5kIHBhcmFtZXRlciB0byBpbmRpY2F0ZSB3aXRoIHRoZSBwcm9wVHlwZSBpcyByZXF1aXJlZFxuICAgIHByZWRpY2F0ZSwgLy8gQm91bmQgcGFyYW1ldGVyIHRvIGFsbG93IHVzZXIgdG8gYWRkIGR5bmFtaWMgdmFsaWRhdGlvblxuICAgIHByb3BzLFxuICAgIHByb3BOYW1lLFxuICAgIGNvbXBvbmVudE5hbWUsXG4gICAgbG9jYXRpb24sXG4gICAgcHJvcEZ1bGxOYW1lXG4gICkge1xuICAgIHZhciBwcm9wVmFsdWUgPSBwcm9wc1sgcHJvcE5hbWUgXTtcbiAgICB2YXIgcHJvcFR5cGUgPSB0eXBlb2YgcHJvcFZhbHVlO1xuXG4gICAgY29tcG9uZW50TmFtZSA9IGNvbXBvbmVudE5hbWUgfHwgbWVzc2FnZXMuYW5vbnltb3VzTWVzc2FnZTtcbiAgICBwcm9wRnVsbE5hbWUgPSBwcm9wRnVsbE5hbWUgfHwgcHJvcE5hbWU7XG5cbiAgICB2YXIgcHJlVmFsaWRhdGlvblJlcXVpcmVDaGVja1ZhbHVlID0gcHJlVmFsaWRhdGlvblJlcXVpcmVDaGVjayhcbiAgICAgIGlzUmVxdWlyZWQsIGNvbXBvbmVudE5hbWUsIHByb3BGdWxsTmFtZSwgcHJvcFZhbHVlXG4gICAgKTtcblxuICAgIGlmIChwcmVWYWxpZGF0aW9uUmVxdWlyZUNoZWNrVmFsdWUgIT09IGluZGVwZW5kZW50R3VhcmRpYW5WYWx1ZSkge1xuICAgICAgcmV0dXJuIHByZVZhbGlkYXRpb25SZXF1aXJlQ2hlY2tWYWx1ZTtcbiAgICB9XG5cbiAgICBpZiAodHlwZVZhbGlkYXRvciAmJiAhdHlwZVZhbGlkYXRvcihwcm9wVmFsdWUpKSB7XG4gICAgICByZXR1cm4gbmV3IEVycm9yKFxuICAgICAgICBtZXNzYWdlcy5pbnZhbGlkVHlwZUNvcmUgKyAnOiBgJyArIHByb3BOYW1lICsgJ2Agb2YgdHlwZSBgJyArIHByb3BUeXBlICsgJ2AgJyArXG4gICAgICAgICdzdXBwbGllZCB0byBgJyArIGNvbXBvbmVudE5hbWUgKyAnYCwgZXhwZWN0ZWQgYCcgKyB0eXBlICsgJ2AuJ1xuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAoIXZhbGlkYXRvcihwcm9wVmFsdWUpKSB7XG4gICAgICByZXR1cm4gbmV3IEVycm9yKFxuICAgICAgICBtZXNzYWdlcy5iYXNlSW52YWxpZE1lc3NhZ2UgKyBsb2NhdGlvbiArICcgYCcgKyBwcm9wTmFtZSArICdgIG9mIHR5cGUgYCcgKyBwcm9wVHlwZSArICdgICcgK1xuICAgICAgICAnc3VwcGxpZWQgdG8gYCcgKyBjb21wb25lbnROYW1lICsgJ2AsIGV4cGVjdGVkIGAnICsgbW9tZW50VHlwZSArICdgLidcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKHByZWRpY2F0ZSAmJiAhcHJlZGljYXRlKHByb3BWYWx1ZSkpIHtcbiAgICAgIHZhciBwcmVkaWNhdGVOYW1lID0gcHJlZGljYXRlLm5hbWUgfHwgbWVzc2FnZXMuYW5vbnltb3VzTWVzc2FnZTtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoXG4gICAgICAgIG1lc3NhZ2VzLmJhc2VJbnZhbGlkTWVzc2FnZSArIGxvY2F0aW9uICsgJyBgJyArIHByb3BOYW1lICsgJ2Agb2YgdHlwZSBgJyArIHByb3BUeXBlICsgJ2AgJyArXG4gICAgICAgICdzdXBwbGllZCB0byBgJyArIGNvbXBvbmVudE5hbWUgKyAnYC4gJyArIG1lc3NhZ2VzLnByZWRpY2F0ZUZhaWx1cmVDb3JlICsgJyBgJyArXG4gICAgICAgIHByZWRpY2F0ZU5hbWUgKyAnYC4nXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuXG4gIH1cblxuICByZXR1cm4gY29uc3RydWN0UHJvcFZhbGlkYXRvclZhcmlhdGlvbnMocHJvcFZhbGlkYXRvcik7XG5cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGNvbnN0cnVjdFByb3BWYWxpZGF0b3JWYXJpYXRpb25zOiBjb25zdHJ1Y3RQcm9wVmFsaWRhdG9yVmFyaWF0aW9ucyxcbiAgY3JlYXRlTW9tZW50Q2hlY2tlcjogY3JlYXRlTW9tZW50Q2hlY2tlcixcbiAgbWVzc2FnZXM6IG1lc3NhZ2VzLFxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGtleXNTaGltO1xuaWYgKCFPYmplY3Qua2V5cykge1xuXHQvLyBtb2RpZmllZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9lcy1zaGltcy9lczUtc2hpbVxuXHR2YXIgaGFzID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblx0dmFyIHRvU3RyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblx0dmFyIGlzQXJncyA9IHJlcXVpcmUoJy4vaXNBcmd1bWVudHMnKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBnbG9iYWwtcmVxdWlyZVxuXHR2YXIgaXNFbnVtZXJhYmxlID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblx0dmFyIGhhc0RvbnRFbnVtQnVnID0gIWlzRW51bWVyYWJsZS5jYWxsKHsgdG9TdHJpbmc6IG51bGwgfSwgJ3RvU3RyaW5nJyk7XG5cdHZhciBoYXNQcm90b0VudW1CdWcgPSBpc0VudW1lcmFibGUuY2FsbChmdW5jdGlvbiAoKSB7fSwgJ3Byb3RvdHlwZScpO1xuXHR2YXIgZG9udEVudW1zID0gW1xuXHRcdCd0b1N0cmluZycsXG5cdFx0J3RvTG9jYWxlU3RyaW5nJyxcblx0XHQndmFsdWVPZicsXG5cdFx0J2hhc093blByb3BlcnR5Jyxcblx0XHQnaXNQcm90b3R5cGVPZicsXG5cdFx0J3Byb3BlcnR5SXNFbnVtZXJhYmxlJyxcblx0XHQnY29uc3RydWN0b3InXG5cdF07XG5cdHZhciBlcXVhbHNDb25zdHJ1Y3RvclByb3RvdHlwZSA9IGZ1bmN0aW9uIChvKSB7XG5cdFx0dmFyIGN0b3IgPSBvLmNvbnN0cnVjdG9yO1xuXHRcdHJldHVybiBjdG9yICYmIGN0b3IucHJvdG90eXBlID09PSBvO1xuXHR9O1xuXHR2YXIgZXhjbHVkZWRLZXlzID0ge1xuXHRcdCRhcHBsaWNhdGlvbkNhY2hlOiB0cnVlLFxuXHRcdCRjb25zb2xlOiB0cnVlLFxuXHRcdCRleHRlcm5hbDogdHJ1ZSxcblx0XHQkZnJhbWU6IHRydWUsXG5cdFx0JGZyYW1lRWxlbWVudDogdHJ1ZSxcblx0XHQkZnJhbWVzOiB0cnVlLFxuXHRcdCRpbm5lckhlaWdodDogdHJ1ZSxcblx0XHQkaW5uZXJXaWR0aDogdHJ1ZSxcblx0XHQkb25tb3pmdWxsc2NyZWVuY2hhbmdlOiB0cnVlLFxuXHRcdCRvbm1vemZ1bGxzY3JlZW5lcnJvcjogdHJ1ZSxcblx0XHQkb3V0ZXJIZWlnaHQ6IHRydWUsXG5cdFx0JG91dGVyV2lkdGg6IHRydWUsXG5cdFx0JHBhZ2VYT2Zmc2V0OiB0cnVlLFxuXHRcdCRwYWdlWU9mZnNldDogdHJ1ZSxcblx0XHQkcGFyZW50OiB0cnVlLFxuXHRcdCRzY3JvbGxMZWZ0OiB0cnVlLFxuXHRcdCRzY3JvbGxUb3A6IHRydWUsXG5cdFx0JHNjcm9sbFg6IHRydWUsXG5cdFx0JHNjcm9sbFk6IHRydWUsXG5cdFx0JHNlbGY6IHRydWUsXG5cdFx0JHdlYmtpdEluZGV4ZWREQjogdHJ1ZSxcblx0XHQkd2Via2l0U3RvcmFnZUluZm86IHRydWUsXG5cdFx0JHdpbmRvdzogdHJ1ZVxuXHR9O1xuXHR2YXIgaGFzQXV0b21hdGlvbkVxdWFsaXR5QnVnID0gKGZ1bmN0aW9uICgpIHtcblx0XHQvKiBnbG9iYWwgd2luZG93ICovXG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKSB7IHJldHVybiBmYWxzZTsgfVxuXHRcdGZvciAodmFyIGsgaW4gd2luZG93KSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHRpZiAoIWV4Y2x1ZGVkS2V5c1snJCcgKyBrXSAmJiBoYXMuY2FsbCh3aW5kb3csIGspICYmIHdpbmRvd1trXSAhPT0gbnVsbCAmJiB0eXBlb2Ygd2luZG93W2tdID09PSAnb2JqZWN0Jykge1xuXHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRlcXVhbHNDb25zdHJ1Y3RvclByb3RvdHlwZSh3aW5kb3dba10pO1xuXHRcdFx0XHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9KCkpO1xuXHR2YXIgZXF1YWxzQ29uc3RydWN0b3JQcm90b3R5cGVJZk5vdEJ1Z2d5ID0gZnVuY3Rpb24gKG8pIHtcblx0XHQvKiBnbG9iYWwgd2luZG93ICovXG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnIHx8ICFoYXNBdXRvbWF0aW9uRXF1YWxpdHlCdWcpIHtcblx0XHRcdHJldHVybiBlcXVhbHNDb25zdHJ1Y3RvclByb3RvdHlwZShvKTtcblx0XHR9XG5cdFx0dHJ5IHtcblx0XHRcdHJldHVybiBlcXVhbHNDb25zdHJ1Y3RvclByb3RvdHlwZShvKTtcblx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHR9O1xuXG5cdGtleXNTaGltID0gZnVuY3Rpb24ga2V5cyhvYmplY3QpIHtcblx0XHR2YXIgaXNPYmplY3QgPSBvYmplY3QgIT09IG51bGwgJiYgdHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCc7XG5cdFx0dmFyIGlzRnVuY3Rpb24gPSB0b1N0ci5jYWxsKG9iamVjdCkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG5cdFx0dmFyIGlzQXJndW1lbnRzID0gaXNBcmdzKG9iamVjdCk7XG5cdFx0dmFyIGlzU3RyaW5nID0gaXNPYmplY3QgJiYgdG9TdHIuY2FsbChvYmplY3QpID09PSAnW29iamVjdCBTdHJpbmddJztcblx0XHR2YXIgdGhlS2V5cyA9IFtdO1xuXG5cdFx0aWYgKCFpc09iamVjdCAmJiAhaXNGdW5jdGlvbiAmJiAhaXNBcmd1bWVudHMpIHtcblx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ09iamVjdC5rZXlzIGNhbGxlZCBvbiBhIG5vbi1vYmplY3QnKTtcblx0XHR9XG5cblx0XHR2YXIgc2tpcFByb3RvID0gaGFzUHJvdG9FbnVtQnVnICYmIGlzRnVuY3Rpb247XG5cdFx0aWYgKGlzU3RyaW5nICYmIG9iamVjdC5sZW5ndGggPiAwICYmICFoYXMuY2FsbChvYmplY3QsIDApKSB7XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IG9iamVjdC5sZW5ndGg7ICsraSkge1xuXHRcdFx0XHR0aGVLZXlzLnB1c2goU3RyaW5nKGkpKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoaXNBcmd1bWVudHMgJiYgb2JqZWN0Lmxlbmd0aCA+IDApIHtcblx0XHRcdGZvciAodmFyIGogPSAwOyBqIDwgb2JqZWN0Lmxlbmd0aDsgKytqKSB7XG5cdFx0XHRcdHRoZUtleXMucHVzaChTdHJpbmcoaikpO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRmb3IgKHZhciBuYW1lIGluIG9iamVjdCkge1xuXHRcdFx0XHRpZiAoIShza2lwUHJvdG8gJiYgbmFtZSA9PT0gJ3Byb3RvdHlwZScpICYmIGhhcy5jYWxsKG9iamVjdCwgbmFtZSkpIHtcblx0XHRcdFx0XHR0aGVLZXlzLnB1c2goU3RyaW5nKG5hbWUpKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChoYXNEb250RW51bUJ1Zykge1xuXHRcdFx0dmFyIHNraXBDb25zdHJ1Y3RvciA9IGVxdWFsc0NvbnN0cnVjdG9yUHJvdG90eXBlSWZOb3RCdWdneShvYmplY3QpO1xuXG5cdFx0XHRmb3IgKHZhciBrID0gMDsgayA8IGRvbnRFbnVtcy5sZW5ndGg7ICsraykge1xuXHRcdFx0XHRpZiAoIShza2lwQ29uc3RydWN0b3IgJiYgZG9udEVudW1zW2tdID09PSAnY29uc3RydWN0b3InKSAmJiBoYXMuY2FsbChvYmplY3QsIGRvbnRFbnVtc1trXSkpIHtcblx0XHRcdFx0XHR0aGVLZXlzLnB1c2goZG9udEVudW1zW2tdKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gdGhlS2V5cztcblx0fTtcbn1cbm1vZHVsZS5leHBvcnRzID0ga2V5c1NoaW07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qIGVzbGludCBuby1pbnZhbGlkLXRoaXM6IDEgKi9cblxudmFyIEVSUk9SX01FU1NBR0UgPSAnRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQgY2FsbGVkIG9uIGluY29tcGF0aWJsZSAnO1xudmFyIHNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xudmFyIHRvU3RyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcbnZhciBmdW5jVHlwZSA9ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYmluZCh0aGF0KSB7XG4gICAgdmFyIHRhcmdldCA9IHRoaXM7XG4gICAgaWYgKHR5cGVvZiB0YXJnZXQgIT09ICdmdW5jdGlvbicgfHwgdG9TdHIuY2FsbCh0YXJnZXQpICE9PSBmdW5jVHlwZSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEVSUk9SX01FU1NBR0UgKyB0YXJnZXQpO1xuICAgIH1cbiAgICB2YXIgYXJncyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcblxuICAgIHZhciBib3VuZDtcbiAgICB2YXIgYmluZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcyBpbnN0YW5jZW9mIGJvdW5kKSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gdGFyZ2V0LmFwcGx5KFxuICAgICAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICAgICAgYXJncy5jb25jYXQoc2xpY2UuY2FsbChhcmd1bWVudHMpKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGlmIChPYmplY3QocmVzdWx0KSA9PT0gcmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRhcmdldC5hcHBseShcbiAgICAgICAgICAgICAgICB0aGF0LFxuICAgICAgICAgICAgICAgIGFyZ3MuY29uY2F0KHNsaWNlLmNhbGwoYXJndW1lbnRzKSlcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIGJvdW5kTGVuZ3RoID0gTWF0aC5tYXgoMCwgdGFyZ2V0Lmxlbmd0aCAtIGFyZ3MubGVuZ3RoKTtcbiAgICB2YXIgYm91bmRBcmdzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBib3VuZExlbmd0aDsgaSsrKSB7XG4gICAgICAgIGJvdW5kQXJncy5wdXNoKCckJyArIGkpO1xuICAgIH1cblxuICAgIGJvdW5kID0gRnVuY3Rpb24oJ2JpbmRlcicsICdyZXR1cm4gZnVuY3Rpb24gKCcgKyBib3VuZEFyZ3Muam9pbignLCcpICsgJyl7IHJldHVybiBiaW5kZXIuYXBwbHkodGhpcyxhcmd1bWVudHMpOyB9JykoYmluZGVyKTtcblxuICAgIGlmICh0YXJnZXQucHJvdG90eXBlKSB7XG4gICAgICAgIHZhciBFbXB0eSA9IGZ1bmN0aW9uIEVtcHR5KCkge307XG4gICAgICAgIEVtcHR5LnByb3RvdHlwZSA9IHRhcmdldC5wcm90b3R5cGU7XG4gICAgICAgIGJvdW5kLnByb3RvdHlwZSA9IG5ldyBFbXB0eSgpO1xuICAgICAgICBFbXB0eS5wcm90b3R5cGUgPSBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBib3VuZDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBkZWZpbmUgPSByZXF1aXJlKCdkZWZpbmUtcHJvcGVydGllcycpO1xudmFyIGdldFBvbHlmaWxsID0gcmVxdWlyZSgnLi9wb2x5ZmlsbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNoaW1Bc3NpZ24oKSB7XG5cdHZhciBwb2x5ZmlsbCA9IGdldFBvbHlmaWxsKCk7XG5cdGRlZmluZShcblx0XHRPYmplY3QsXG5cdFx0eyBhc3NpZ246IHBvbHlmaWxsIH0sXG5cdFx0eyBhc3NpZ246IGZ1bmN0aW9uICgpIHsgcmV0dXJuIE9iamVjdC5hc3NpZ24gIT09IHBvbHlmaWxsOyB9IH1cblx0KTtcblx0cmV0dXJuIHBvbHlmaWxsO1xufTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vaXNPYmplY3QnKSxcbiAgICBub3cgPSByZXF1aXJlKCcuL25vdycpLFxuICAgIHRvTnVtYmVyID0gcmVxdWlyZSgnLi90b051bWJlcicpO1xuXG4vKiogRXJyb3IgbWVzc2FnZSBjb25zdGFudHMuICovXG52YXIgRlVOQ19FUlJPUl9URVhUID0gJ0V4cGVjdGVkIGEgZnVuY3Rpb24nO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlTWF4ID0gTWF0aC5tYXgsXG4gICAgbmF0aXZlTWluID0gTWF0aC5taW47XG5cbi8qKlxuICogQ3JlYXRlcyBhIGRlYm91bmNlZCBmdW5jdGlvbiB0aGF0IGRlbGF5cyBpbnZva2luZyBgZnVuY2AgdW50aWwgYWZ0ZXIgYHdhaXRgXG4gKiBtaWxsaXNlY29uZHMgaGF2ZSBlbGFwc2VkIHNpbmNlIHRoZSBsYXN0IHRpbWUgdGhlIGRlYm91bmNlZCBmdW5jdGlvbiB3YXNcbiAqIGludm9rZWQuIFRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gY29tZXMgd2l0aCBhIGBjYW5jZWxgIG1ldGhvZCB0byBjYW5jZWxcbiAqIGRlbGF5ZWQgYGZ1bmNgIGludm9jYXRpb25zIGFuZCBhIGBmbHVzaGAgbWV0aG9kIHRvIGltbWVkaWF0ZWx5IGludm9rZSB0aGVtLlxuICogUHJvdmlkZSBgb3B0aW9uc2AgdG8gaW5kaWNhdGUgd2hldGhlciBgZnVuY2Agc2hvdWxkIGJlIGludm9rZWQgb24gdGhlXG4gKiBsZWFkaW5nIGFuZC9vciB0cmFpbGluZyBlZGdlIG9mIHRoZSBgd2FpdGAgdGltZW91dC4gVGhlIGBmdW5jYCBpcyBpbnZva2VkXG4gKiB3aXRoIHRoZSBsYXN0IGFyZ3VtZW50cyBwcm92aWRlZCB0byB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uLiBTdWJzZXF1ZW50XG4gKiBjYWxscyB0byB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uIHJldHVybiB0aGUgcmVzdWx0IG9mIHRoZSBsYXN0IGBmdW5jYFxuICogaW52b2NhdGlvbi5cbiAqXG4gKiAqKk5vdGU6KiogSWYgYGxlYWRpbmdgIGFuZCBgdHJhaWxpbmdgIG9wdGlvbnMgYXJlIGB0cnVlYCwgYGZ1bmNgIGlzXG4gKiBpbnZva2VkIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0IG9ubHkgaWYgdGhlIGRlYm91bmNlZCBmdW5jdGlvblxuICogaXMgaW52b2tlZCBtb3JlIHRoYW4gb25jZSBkdXJpbmcgdGhlIGB3YWl0YCB0aW1lb3V0LlxuICpcbiAqIElmIGB3YWl0YCBpcyBgMGAgYW5kIGBsZWFkaW5nYCBpcyBgZmFsc2VgLCBgZnVuY2AgaW52b2NhdGlvbiBpcyBkZWZlcnJlZFxuICogdW50aWwgdG8gdGhlIG5leHQgdGljaywgc2ltaWxhciB0byBgc2V0VGltZW91dGAgd2l0aCBhIHRpbWVvdXQgb2YgYDBgLlxuICpcbiAqIFNlZSBbRGF2aWQgQ29yYmFjaG8ncyBhcnRpY2xlXShodHRwczovL2Nzcy10cmlja3MuY29tL2RlYm91bmNpbmctdGhyb3R0bGluZy1leHBsYWluZWQtZXhhbXBsZXMvKVxuICogZm9yIGRldGFpbHMgb3ZlciB0aGUgZGlmZmVyZW5jZXMgYmV0d2VlbiBgXy5kZWJvdW5jZWAgYW5kIGBfLnRocm90dGxlYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRlYm91bmNlLlxuICogQHBhcmFtIHtudW1iZXJ9IFt3YWl0PTBdIFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIGRlbGF5LlxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmxlYWRpbmc9ZmFsc2VdXG4gKiAgU3BlY2lmeSBpbnZva2luZyBvbiB0aGUgbGVhZGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0LlxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLm1heFdhaXRdXG4gKiAgVGhlIG1heGltdW0gdGltZSBgZnVuY2AgaXMgYWxsb3dlZCB0byBiZSBkZWxheWVkIGJlZm9yZSBpdCdzIGludm9rZWQuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnRyYWlsaW5nPXRydWVdXG4gKiAgU3BlY2lmeSBpbnZva2luZyBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGRlYm91bmNlZCBmdW5jdGlvbi5cbiAqIEBleGFtcGxlXG4gKlxuICogLy8gQXZvaWQgY29zdGx5IGNhbGN1bGF0aW9ucyB3aGlsZSB0aGUgd2luZG93IHNpemUgaXMgaW4gZmx1eC5cbiAqIGpRdWVyeSh3aW5kb3cpLm9uKCdyZXNpemUnLCBfLmRlYm91bmNlKGNhbGN1bGF0ZUxheW91dCwgMTUwKSk7XG4gKlxuICogLy8gSW52b2tlIGBzZW5kTWFpbGAgd2hlbiBjbGlja2VkLCBkZWJvdW5jaW5nIHN1YnNlcXVlbnQgY2FsbHMuXG4gKiBqUXVlcnkoZWxlbWVudCkub24oJ2NsaWNrJywgXy5kZWJvdW5jZShzZW5kTWFpbCwgMzAwLCB7XG4gKiAgICdsZWFkaW5nJzogdHJ1ZSxcbiAqICAgJ3RyYWlsaW5nJzogZmFsc2VcbiAqIH0pKTtcbiAqXG4gKiAvLyBFbnN1cmUgYGJhdGNoTG9nYCBpcyBpbnZva2VkIG9uY2UgYWZ0ZXIgMSBzZWNvbmQgb2YgZGVib3VuY2VkIGNhbGxzLlxuICogdmFyIGRlYm91bmNlZCA9IF8uZGVib3VuY2UoYmF0Y2hMb2csIDI1MCwgeyAnbWF4V2FpdCc6IDEwMDAgfSk7XG4gKiB2YXIgc291cmNlID0gbmV3IEV2ZW50U291cmNlKCcvc3RyZWFtJyk7XG4gKiBqUXVlcnkoc291cmNlKS5vbignbWVzc2FnZScsIGRlYm91bmNlZCk7XG4gKlxuICogLy8gQ2FuY2VsIHRoZSB0cmFpbGluZyBkZWJvdW5jZWQgaW52b2NhdGlvbi5cbiAqIGpRdWVyeSh3aW5kb3cpLm9uKCdwb3BzdGF0ZScsIGRlYm91bmNlZC5jYW5jZWwpO1xuICovXG5mdW5jdGlvbiBkZWJvdW5jZShmdW5jLCB3YWl0LCBvcHRpb25zKSB7XG4gIHZhciBsYXN0QXJncyxcbiAgICAgIGxhc3RUaGlzLFxuICAgICAgbWF4V2FpdCxcbiAgICAgIHJlc3VsdCxcbiAgICAgIHRpbWVySWQsXG4gICAgICBsYXN0Q2FsbFRpbWUsXG4gICAgICBsYXN0SW52b2tlVGltZSA9IDAsXG4gICAgICBsZWFkaW5nID0gZmFsc2UsXG4gICAgICBtYXhpbmcgPSBmYWxzZSxcbiAgICAgIHRyYWlsaW5nID0gdHJ1ZTtcblxuICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgfVxuICB3YWl0ID0gdG9OdW1iZXIod2FpdCkgfHwgMDtcbiAgaWYgKGlzT2JqZWN0KG9wdGlvbnMpKSB7XG4gICAgbGVhZGluZyA9ICEhb3B0aW9ucy5sZWFkaW5nO1xuICAgIG1heGluZyA9ICdtYXhXYWl0JyBpbiBvcHRpb25zO1xuICAgIG1heFdhaXQgPSBtYXhpbmcgPyBuYXRpdmVNYXgodG9OdW1iZXIob3B0aW9ucy5tYXhXYWl0KSB8fCAwLCB3YWl0KSA6IG1heFdhaXQ7XG4gICAgdHJhaWxpbmcgPSAndHJhaWxpbmcnIGluIG9wdGlvbnMgPyAhIW9wdGlvbnMudHJhaWxpbmcgOiB0cmFpbGluZztcbiAgfVxuXG4gIGZ1bmN0aW9uIGludm9rZUZ1bmModGltZSkge1xuICAgIHZhciBhcmdzID0gbGFzdEFyZ3MsXG4gICAgICAgIHRoaXNBcmcgPSBsYXN0VGhpcztcblxuICAgIGxhc3RBcmdzID0gbGFzdFRoaXMgPSB1bmRlZmluZWQ7XG4gICAgbGFzdEludm9rZVRpbWUgPSB0aW1lO1xuICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkodGhpc0FyZywgYXJncyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxlYWRpbmdFZGdlKHRpbWUpIHtcbiAgICAvLyBSZXNldCBhbnkgYG1heFdhaXRgIHRpbWVyLlxuICAgIGxhc3RJbnZva2VUaW1lID0gdGltZTtcbiAgICAvLyBTdGFydCB0aGUgdGltZXIgZm9yIHRoZSB0cmFpbGluZyBlZGdlLlxuICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgd2FpdCk7XG4gICAgLy8gSW52b2tlIHRoZSBsZWFkaW5nIGVkZ2UuXG4gICAgcmV0dXJuIGxlYWRpbmcgPyBpbnZva2VGdW5jKHRpbWUpIDogcmVzdWx0O1xuICB9XG5cbiAgZnVuY3Rpb24gcmVtYWluaW5nV2FpdCh0aW1lKSB7XG4gICAgdmFyIHRpbWVTaW5jZUxhc3RDYWxsID0gdGltZSAtIGxhc3RDYWxsVGltZSxcbiAgICAgICAgdGltZVNpbmNlTGFzdEludm9rZSA9IHRpbWUgLSBsYXN0SW52b2tlVGltZSxcbiAgICAgICAgdGltZVdhaXRpbmcgPSB3YWl0IC0gdGltZVNpbmNlTGFzdENhbGw7XG5cbiAgICByZXR1cm4gbWF4aW5nXG4gICAgICA/IG5hdGl2ZU1pbih0aW1lV2FpdGluZywgbWF4V2FpdCAtIHRpbWVTaW5jZUxhc3RJbnZva2UpXG4gICAgICA6IHRpbWVXYWl0aW5nO1xuICB9XG5cbiAgZnVuY3Rpb24gc2hvdWxkSW52b2tlKHRpbWUpIHtcbiAgICB2YXIgdGltZVNpbmNlTGFzdENhbGwgPSB0aW1lIC0gbGFzdENhbGxUaW1lLFxuICAgICAgICB0aW1lU2luY2VMYXN0SW52b2tlID0gdGltZSAtIGxhc3RJbnZva2VUaW1lO1xuXG4gICAgLy8gRWl0aGVyIHRoaXMgaXMgdGhlIGZpcnN0IGNhbGwsIGFjdGl2aXR5IGhhcyBzdG9wcGVkIGFuZCB3ZSdyZSBhdCB0aGVcbiAgICAvLyB0cmFpbGluZyBlZGdlLCB0aGUgc3lzdGVtIHRpbWUgaGFzIGdvbmUgYmFja3dhcmRzIGFuZCB3ZSdyZSB0cmVhdGluZ1xuICAgIC8vIGl0IGFzIHRoZSB0cmFpbGluZyBlZGdlLCBvciB3ZSd2ZSBoaXQgdGhlIGBtYXhXYWl0YCBsaW1pdC5cbiAgICByZXR1cm4gKGxhc3RDYWxsVGltZSA9PT0gdW5kZWZpbmVkIHx8ICh0aW1lU2luY2VMYXN0Q2FsbCA+PSB3YWl0KSB8fFxuICAgICAgKHRpbWVTaW5jZUxhc3RDYWxsIDwgMCkgfHwgKG1heGluZyAmJiB0aW1lU2luY2VMYXN0SW52b2tlID49IG1heFdhaXQpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRpbWVyRXhwaXJlZCgpIHtcbiAgICB2YXIgdGltZSA9IG5vdygpO1xuICAgIGlmIChzaG91bGRJbnZva2UodGltZSkpIHtcbiAgICAgIHJldHVybiB0cmFpbGluZ0VkZ2UodGltZSk7XG4gICAgfVxuICAgIC8vIFJlc3RhcnQgdGhlIHRpbWVyLlxuICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgcmVtYWluaW5nV2FpdCh0aW1lKSk7XG4gIH1cblxuICBmdW5jdGlvbiB0cmFpbGluZ0VkZ2UodGltZSkge1xuICAgIHRpbWVySWQgPSB1bmRlZmluZWQ7XG5cbiAgICAvLyBPbmx5IGludm9rZSBpZiB3ZSBoYXZlIGBsYXN0QXJnc2Agd2hpY2ggbWVhbnMgYGZ1bmNgIGhhcyBiZWVuXG4gICAgLy8gZGVib3VuY2VkIGF0IGxlYXN0IG9uY2UuXG4gICAgaWYgKHRyYWlsaW5nICYmIGxhc3RBcmdzKSB7XG4gICAgICByZXR1cm4gaW52b2tlRnVuYyh0aW1lKTtcbiAgICB9XG4gICAgbGFzdEFyZ3MgPSBsYXN0VGhpcyA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgZnVuY3Rpb24gY2FuY2VsKCkge1xuICAgIGlmICh0aW1lcklkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aW1lcklkKTtcbiAgICB9XG4gICAgbGFzdEludm9rZVRpbWUgPSAwO1xuICAgIGxhc3RBcmdzID0gbGFzdENhbGxUaW1lID0gbGFzdFRoaXMgPSB0aW1lcklkID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgZnVuY3Rpb24gZmx1c2goKSB7XG4gICAgcmV0dXJuIHRpbWVySWQgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IHRyYWlsaW5nRWRnZShub3coKSk7XG4gIH1cblxuICBmdW5jdGlvbiBkZWJvdW5jZWQoKSB7XG4gICAgdmFyIHRpbWUgPSBub3coKSxcbiAgICAgICAgaXNJbnZva2luZyA9IHNob3VsZEludm9rZSh0aW1lKTtcblxuICAgIGxhc3RBcmdzID0gYXJndW1lbnRzO1xuICAgIGxhc3RUaGlzID0gdGhpcztcbiAgICBsYXN0Q2FsbFRpbWUgPSB0aW1lO1xuXG4gICAgaWYgKGlzSW52b2tpbmcpIHtcbiAgICAgIGlmICh0aW1lcklkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIGxlYWRpbmdFZGdlKGxhc3RDYWxsVGltZSk7XG4gICAgICB9XG4gICAgICBpZiAobWF4aW5nKSB7XG4gICAgICAgIC8vIEhhbmRsZSBpbnZvY2F0aW9ucyBpbiBhIHRpZ2h0IGxvb3AuXG4gICAgICAgIGNsZWFyVGltZW91dCh0aW1lcklkKTtcbiAgICAgICAgdGltZXJJZCA9IHNldFRpbWVvdXQodGltZXJFeHBpcmVkLCB3YWl0KTtcbiAgICAgICAgcmV0dXJuIGludm9rZUZ1bmMobGFzdENhbGxUaW1lKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHRpbWVySWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGltZXJJZCA9IHNldFRpbWVvdXQodGltZXJFeHBpcmVkLCB3YWl0KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBkZWJvdW5jZWQuY2FuY2VsID0gY2FuY2VsO1xuICBkZWJvdW5jZWQuZmx1c2ggPSBmbHVzaDtcbiAgcmV0dXJuIGRlYm91bmNlZDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBkZWJvdW5jZTtcbiIsInZhciByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKipcbiAqIEdldHMgdGhlIHRpbWVzdGFtcCBvZiB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0aGF0IGhhdmUgZWxhcHNlZCBzaW5jZVxuICogdGhlIFVuaXggZXBvY2ggKDEgSmFudWFyeSAxOTcwIDAwOjAwOjAwIFVUQykuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAyLjQuMFxuICogQGNhdGVnb3J5IERhdGVcbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHRpbWVzdGFtcC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5kZWZlcihmdW5jdGlvbihzdGFtcCkge1xuICogICBjb25zb2xlLmxvZyhfLm5vdygpIC0gc3RhbXApO1xuICogfSwgXy5ub3coKSk7XG4gKiAvLyA9PiBMb2dzIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGl0IHRvb2sgZm9yIHRoZSBkZWZlcnJlZCBpbnZvY2F0aW9uLlxuICovXG52YXIgbm93ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiByb290LkRhdGUubm93KCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5vdztcbiIsIi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZ2xvYmFsYCBmcm9tIE5vZGUuanMuICovXG52YXIgZnJlZUdsb2JhbCA9IHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsICYmIGdsb2JhbC5PYmplY3QgPT09IE9iamVjdCAmJiBnbG9iYWw7XG5cbm1vZHVsZS5leHBvcnRzID0gZnJlZUdsb2JhbDtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vaXNPYmplY3QnKSxcbiAgICBpc1N5bWJvbCA9IHJlcXVpcmUoJy4vaXNTeW1ib2wnKTtcblxuLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgTkFOID0gMCAvIDA7XG5cbi8qKiBVc2VkIHRvIG1hdGNoIGxlYWRpbmcgYW5kIHRyYWlsaW5nIHdoaXRlc3BhY2UuICovXG52YXIgcmVUcmltID0gL15cXHMrfFxccyskL2c7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBiYWQgc2lnbmVkIGhleGFkZWNpbWFsIHN0cmluZyB2YWx1ZXMuICovXG52YXIgcmVJc0JhZEhleCA9IC9eWy0rXTB4WzAtOWEtZl0rJC9pO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgYmluYXJ5IHN0cmluZyB2YWx1ZXMuICovXG52YXIgcmVJc0JpbmFyeSA9IC9eMGJbMDFdKyQvaTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG9jdGFsIHN0cmluZyB2YWx1ZXMuICovXG52YXIgcmVJc09jdGFsID0gL14wb1swLTddKyQvaTtcblxuLyoqIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHdpdGhvdXQgYSBkZXBlbmRlbmN5IG9uIGByb290YC4gKi9cbnZhciBmcmVlUGFyc2VJbnQgPSBwYXJzZUludDtcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgbnVtYmVyLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm9jZXNzLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgbnVtYmVyLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRvTnVtYmVyKDMuMik7XG4gKiAvLyA9PiAzLjJcbiAqXG4gKiBfLnRvTnVtYmVyKE51bWJlci5NSU5fVkFMVUUpO1xuICogLy8gPT4gNWUtMzI0XG4gKlxuICogXy50b051bWJlcihJbmZpbml0eSk7XG4gKiAvLyA9PiBJbmZpbml0eVxuICpcbiAqIF8udG9OdW1iZXIoJzMuMicpO1xuICogLy8gPT4gMy4yXG4gKi9cbmZ1bmN0aW9uIHRvTnVtYmVyKHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgaWYgKGlzU3ltYm9sKHZhbHVlKSkge1xuICAgIHJldHVybiBOQU47XG4gIH1cbiAgaWYgKGlzT2JqZWN0KHZhbHVlKSkge1xuICAgIHZhciBvdGhlciA9IHR5cGVvZiB2YWx1ZS52YWx1ZU9mID09ICdmdW5jdGlvbicgPyB2YWx1ZS52YWx1ZU9mKCkgOiB2YWx1ZTtcbiAgICB2YWx1ZSA9IGlzT2JqZWN0KG90aGVyKSA/IChvdGhlciArICcnKSA6IG90aGVyO1xuICB9XG4gIGlmICh0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IDAgPyB2YWx1ZSA6ICt2YWx1ZTtcbiAgfVxuICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UocmVUcmltLCAnJyk7XG4gIHZhciBpc0JpbmFyeSA9IHJlSXNCaW5hcnkudGVzdCh2YWx1ZSk7XG4gIHJldHVybiAoaXNCaW5hcnkgfHwgcmVJc09jdGFsLnRlc3QodmFsdWUpKVxuICAgID8gZnJlZVBhcnNlSW50KHZhbHVlLnNsaWNlKDIpLCBpc0JpbmFyeSA/IDIgOiA4KVxuICAgIDogKHJlSXNCYWRIZXgudGVzdCh2YWx1ZSkgPyBOQU4gOiArdmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHRvTnVtYmVyO1xuIiwidmFyIGJhc2VHZXRUYWcgPSByZXF1aXJlKCcuL19iYXNlR2V0VGFnJyksXG4gICAgaXNPYmplY3RMaWtlID0gcmVxdWlyZSgnLi9pc09iamVjdExpa2UnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIHN5bWJvbFRhZyA9ICdbb2JqZWN0IFN5bWJvbF0nO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgU3ltYm9sYCBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc3ltYm9sLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNTeW1ib2woU3ltYm9sLml0ZXJhdG9yKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzU3ltYm9sKCdhYmMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3ltYm9sKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ3N5bWJvbCcgfHxcbiAgICAoaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBzeW1ib2xUYWcpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzU3ltYm9sO1xuIiwidmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX1N5bWJvbCcpLFxuICAgIGdldFJhd1RhZyA9IHJlcXVpcmUoJy4vX2dldFJhd1RhZycpLFxuICAgIG9iamVjdFRvU3RyaW5nID0gcmVxdWlyZSgnLi9fb2JqZWN0VG9TdHJpbmcnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIG51bGxUYWcgPSAnW29iamVjdCBOdWxsXScsXG4gICAgdW5kZWZpbmVkVGFnID0gJ1tvYmplY3QgVW5kZWZpbmVkXSc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHN5bVRvU3RyaW5nVGFnID0gU3ltYm9sID8gU3ltYm9sLnRvU3RyaW5nVGFnIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBnZXRUYWdgIHdpdGhvdXQgZmFsbGJhY2tzIGZvciBidWdneSBlbnZpcm9ubWVudHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgYHRvU3RyaW5nVGFnYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUdldFRhZyh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkVGFnIDogbnVsbFRhZztcbiAgfVxuICByZXR1cm4gKHN5bVRvU3RyaW5nVGFnICYmIHN5bVRvU3RyaW5nVGFnIGluIE9iamVjdCh2YWx1ZSkpXG4gICAgPyBnZXRSYXdUYWcodmFsdWUpXG4gICAgOiBvYmplY3RUb1N0cmluZyh2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUdldFRhZztcbiIsInZhciBTeW1ib2wgPSByZXF1aXJlKCcuL19TeW1ib2wnKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG5hdGl2ZU9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHN5bVRvU3RyaW5nVGFnID0gU3ltYm9sID8gU3ltYm9sLnRvU3RyaW5nVGFnIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUdldFRhZ2Agd2hpY2ggaWdub3JlcyBgU3ltYm9sLnRvU3RyaW5nVGFnYCB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcmF3IGB0b1N0cmluZ1RhZ2AuXG4gKi9cbmZ1bmN0aW9uIGdldFJhd1RhZyh2YWx1ZSkge1xuICB2YXIgaXNPd24gPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBzeW1Ub1N0cmluZ1RhZyksXG4gICAgICB0YWcgPSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG5cbiAgdHJ5IHtcbiAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB1bmRlZmluZWQ7XG4gICAgdmFyIHVubWFza2VkID0gdHJ1ZTtcbiAgfSBjYXRjaCAoZSkge31cblxuICB2YXIgcmVzdWx0ID0gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gIGlmICh1bm1hc2tlZCkge1xuICAgIGlmIChpc093bikge1xuICAgICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdGFnO1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWxldGUgdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFJhd1RhZztcbiIsIi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKlxuICogVXNlZCB0byByZXNvbHZlIHRoZVxuICogW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gKiBvZiB2YWx1ZXMuXG4gKi9cbnZhciBuYXRpdmVPYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcgdXNpbmcgYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gb2JqZWN0VG9TdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG9iamVjdFRvU3RyaW5nO1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZS4gQSB2YWx1ZSBpcyBvYmplY3QtbGlrZSBpZiBpdCdzIG5vdCBgbnVsbGBcbiAqIGFuZCBoYXMgYSBgdHlwZW9mYCByZXN1bHQgb2YgXCJvYmplY3RcIi5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZSh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0TGlrZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNPYmplY3RMaWtlO1xuIiwiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IGdldEFjdGl2ZUVsZW1lbnQ7XG5mdW5jdGlvbiBnZXRBY3RpdmVFbGVtZW50KCkge1xuICByZXR1cm4gdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyAmJiBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xufSIsIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzWydkZWZhdWx0J10gPSBpc1RyYW5zaXRpb25FbmRTdXBwb3J0ZWQ7XG5mdW5jdGlvbiBpc1RyYW5zaXRpb25FbmRTdXBwb3J0ZWQoKSB7XG4gIHJldHVybiAhISh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiAnVHJhbnNpdGlvbkV2ZW50JyBpbiB3aW5kb3cpO1xufSIsIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzWydkZWZhdWx0J10gPSBnZXRDYWxlbmRhck1vbnRoV2Vla3M7XG5cbnZhciBfbW9tZW50ID0gcmVxdWlyZSgnbW9tZW50Jyk7XG5cbnZhciBfbW9tZW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX21vbWVudCk7XG5cbnZhciBfY29uc3RhbnRzID0gcmVxdWlyZSgnLi4vLi4vY29uc3RhbnRzJyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxuZnVuY3Rpb24gZ2V0Q2FsZW5kYXJNb250aFdlZWtzKG1vbnRoLCBlbmFibGVPdXRzaWRlRGF5cykge1xuICB2YXIgZmlyc3REYXlPZldlZWsgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IF9tb21lbnQyWydkZWZhdWx0J10ubG9jYWxlRGF0YSgpLmZpcnN0RGF5T2ZXZWVrKCk7XG5cbiAgaWYgKCFfbW9tZW50MlsnZGVmYXVsdCddLmlzTW9tZW50KG1vbnRoKSB8fCAhbW9udGguaXNWYWxpZCgpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYG1vbnRoYCBtdXN0IGJlIGEgdmFsaWQgbW9tZW50IG9iamVjdCcpO1xuICB9XG4gIGlmIChfY29uc3RhbnRzLldFRUtEQVlTLmluZGV4T2YoZmlyc3REYXlPZldlZWspID09PSAtMSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2BmaXJzdERheU9mV2Vla2AgbXVzdCBiZSBhbiBpbnRlZ2VyIGJldHdlZW4gMCBhbmQgNicpO1xuICB9XG5cbiAgLy8gc2V0IHV0YyBvZmZzZXQgdG8gZ2V0IGNvcnJlY3QgZGF0ZXMgaW4gZnV0dXJlICh3aGVuIHRpbWV6b25lIGNoYW5nZXMpXG4gIHZhciBmaXJzdE9mTW9udGggPSBtb250aC5jbG9uZSgpLnN0YXJ0T2YoJ21vbnRoJykuaG91cigxMik7XG4gIHZhciBsYXN0T2ZNb250aCA9IG1vbnRoLmNsb25lKCkuZW5kT2YoJ21vbnRoJykuaG91cigxMik7XG5cbiAgLy8gY2FsY3VsYXRlIHRoZSBleGFjdCBmaXJzdCBhbmQgbGFzdCBkYXlzIHRvIGZpbGwgdGhlIGVudGlyZSBtYXRyaXhcbiAgLy8gKGNvbnNpZGVyaW5nIGRheXMgb3V0c2lkZSBtb250aClcbiAgdmFyIHByZXZEYXlzID0gKGZpcnN0T2ZNb250aC5kYXkoKSArIDcgLSBmaXJzdERheU9mV2VlaykgJSA3O1xuICB2YXIgbmV4dERheXMgPSAoZmlyc3REYXlPZldlZWsgKyA2IC0gbGFzdE9mTW9udGguZGF5KCkpICUgNztcbiAgdmFyIGZpcnN0RGF5ID0gZmlyc3RPZk1vbnRoLmNsb25lKCkuc3VidHJhY3QocHJldkRheXMsICdkYXknKTtcbiAgdmFyIGxhc3REYXkgPSBsYXN0T2ZNb250aC5jbG9uZSgpLmFkZChuZXh0RGF5cywgJ2RheScpO1xuXG4gIHZhciB0b3RhbERheXMgPSBsYXN0RGF5LmRpZmYoZmlyc3REYXksICdkYXlzJykgKyAxO1xuXG4gIHZhciBjdXJyZW50RGF5ID0gZmlyc3REYXkuY2xvbmUoKTtcbiAgdmFyIHdlZWtzSW5Nb250aCA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdG90YWxEYXlzOyBpICs9IDEpIHtcbiAgICBpZiAoaSAlIDcgPT09IDApIHtcbiAgICAgIHdlZWtzSW5Nb250aC5wdXNoKFtdKTtcbiAgICB9XG5cbiAgICB2YXIgZGF5ID0gbnVsbDtcbiAgICBpZiAoaSA+PSBwcmV2RGF5cyAmJiBpIDwgdG90YWxEYXlzIC0gbmV4dERheXMgfHwgZW5hYmxlT3V0c2lkZURheXMpIHtcbiAgICAgIGRheSA9IGN1cnJlbnREYXkuY2xvbmUoKTtcbiAgICB9XG5cbiAgICB3ZWVrc0luTW9udGhbd2Vla3NJbk1vbnRoLmxlbmd0aCAtIDFdLnB1c2goZGF5KTtcblxuICAgIGN1cnJlbnREYXkuYWRkKDEsICdkYXknKTtcbiAgfVxuXG4gIHJldHVybiB3ZWVrc0luTW9udGg7XG59IiwiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IGdldFBocmFzZTtcbmZ1bmN0aW9uIGdldFBocmFzZShwaHJhc2UsIGFyZ3MpIHtcbiAgaWYgKHR5cGVvZiBwaHJhc2UgPT09ICdzdHJpbmcnKSByZXR1cm4gcGhyYXNlO1xuXG4gIGlmICh0eXBlb2YgcGhyYXNlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIHBocmFzZShhcmdzKTtcbiAgfVxuXG4gIHJldHVybiAnJztcbn0iLCJtb2R1bGUuZXhwb3J0cyA9XG4vKioqKioqLyAoZnVuY3Rpb24obW9kdWxlcykgeyAvLyB3ZWJwYWNrQm9vdHN0cmFwXG4vKioqKioqLyBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4vKioqKioqLyBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4vKioqKioqLyBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbi8qKioqKiovIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuLyoqKioqKi8gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbi8qKioqKiovIFx0XHRcdGk6IG1vZHVsZUlkLFxuLyoqKioqKi8gXHRcdFx0bDogZmFsc2UsXG4vKioqKioqLyBcdFx0XHRleHBvcnRzOiB7fVxuLyoqKioqKi8gXHRcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuLyoqKioqKi8gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4vKioqKioqLyBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuLyoqKioqKi8gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbi8qKioqKiovIFx0fVxuLyoqKioqKi9cbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gaWRlbnRpdHkgZnVuY3Rpb24gZm9yIGNhbGxpbmcgaGFybW9ueSBpbXBvcnRzIHdpdGggdGhlIGNvcnJlY3QgY29udGV4dFxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmkgPSBmdW5jdGlvbih2YWx1ZSkgeyByZXR1cm4gdmFsdWU7IH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4vKioqKioqLyBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuLyoqKioqKi8gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHtcbi8qKioqKiovIFx0XHRcdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcbi8qKioqKiovIFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcbi8qKioqKiovIFx0XHRcdFx0Z2V0OiBnZXR0ZXJcbi8qKioqKiovIFx0XHRcdH0pO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuLyoqKioqKi8gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuLyoqKioqKi8gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbi8qKioqKiovIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4vKioqKioqLyBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuLyoqKioqKi8gXHRcdHJldHVybiBnZXR0ZXI7XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLyoqKioqKi8gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSA2Nyk7XG4vKioqKioqLyB9KVxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovICh7XG5cbi8qKiovIDA6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInJlYWN0XCIpO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gMTpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiYWlyYm5iLXByb3AtdHlwZXNcIik7XG5cbi8qKiovIH0pLFxuXG4vKioqLyAxMTpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9yZWFjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBcImRlZmF1bHRcIjogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgU1ZHID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFNWRywgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gU1ZHKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTVkcpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChTVkcuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihTVkcpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhTVkcsIFt7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiBfcmVhY3QyW1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgIFwic3ZnXCIsXG4gICAgICAgICAgX2V4dGVuZHMoeyB2aWV3Qm94OiBcIjAgMCAxMiAxMlwiIH0sIHRoaXMucHJvcHMpLFxuICAgICAgICAgIF9yZWFjdDJbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHsgZmlsbFJ1bGU6IFwiZXZlbm9kZFwiLCBkOiBcIk0xMS41My40N2EuNzUuNzUgMCAwIDAtMS4wNjEgMGwtNC40NyA0LjQ3TDEuNTI5LjQ3QS43NS43NSAwIDEgMCAuNDY4IDEuNTMxbDQuNDcgNC40Ny00LjQ3IDQuNDdhLjc1Ljc1IDAgMSAwIDEuMDYxIDEuMDYxbDQuNDctNC40NyA0LjQ3IDQuNDdhLjc1Ljc1IDAgMSAwIDEuMDYxLTEuMDYxbC00LjQ3LTQuNDcgNC40Ny00LjQ3YS43NS43NSAwIDAgMCAwLTEuMDYxelwiIH0pXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZW5kZXI7XG4gICAgfSgpXG4gIH1dKTtcblxuICByZXR1cm4gU1ZHO1xufShfcmVhY3QyW1wiZGVmYXVsdFwiXS5Db21wb25lbnQpO1xuXG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IFNWRztcblxuLyoqKi8gfSksXG5cbi8qKiovIDI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uL2RlZmF1bHRQaHJhc2VzXCIpO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gMzpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwicHJvcC10eXBlc1wiKTtcblxuLyoqKi8gfSksXG5cbi8qKiovIDU6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uL3V0aWxzL2dldFBocmFzZVByb3BUeXBlc1wiKTtcblxuLyoqKi8gfSksXG5cbi8qKiovIDY6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImNsYXNzbmFtZXNcIik7XG5cbi8qKiovIH0pLFxuXG4vKioqLyA2Nzpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuQk9UVE9NX1JJR0hUID0gZXhwb3J0cy5UT1BfUklHSFQgPSBleHBvcnRzLlRPUF9MRUZUID0gdW5kZWZpbmVkO1xuZXhwb3J0cy5LZXlib2FyZFNob3J0Y3V0Um93ID0gS2V5Ym9hcmRTaG9ydGN1dFJvdztcbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IERheVBpY2tlcktleWJvYXJkU2hvcnRjdXRzO1xuXG52YXIgX3JlYWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcHJvcFR5cGVzID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxudmFyIF9haXJibmJQcm9wVHlwZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuXG52YXIgX2NsYXNzbmFtZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYpO1xuXG52YXIgX2NsYXNzbmFtZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NuYW1lcyk7XG5cbnZhciBfZGVmYXVsdFBocmFzZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXG52YXIgX2dldFBocmFzZVByb3BUeXBlcyA9IF9fd2VicGFja19yZXF1aXJlX18oNSk7XG5cbnZhciBfZ2V0UGhyYXNlUHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldFBocmFzZVByb3BUeXBlcyk7XG5cbnZhciBfY2xvc2UgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDExKTtcblxudmFyIF9jbG9zZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbG9zZSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7XG4gIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07XG59XG5cbnZhciBUT1BfTEVGVCA9IGV4cG9ydHMuVE9QX0xFRlQgPSAndG9wLWxlZnQnO1xudmFyIFRPUF9SSUdIVCA9IGV4cG9ydHMuVE9QX1JJR0hUID0gJ3RvcC1yaWdodCc7XG52YXIgQk9UVE9NX1JJR0hUID0gZXhwb3J0cy5CT1RUT01fUklHSFQgPSAnYm90dG9tLXJpZ2h0JztcblxudmFyIHByb3BUeXBlcyA9ICgwLCBfYWlyYm5iUHJvcFR5cGVzLmZvcmJpZEV4dHJhUHJvcHMpKHtcbiAgYmxvY2s6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uYm9vbCxcbiAgYnV0dG9uTG9jYXRpb246IF9wcm9wVHlwZXMyWydkZWZhdWx0J10ub25lT2YoW1RPUF9MRUZULCBUT1BfUklHSFQsIEJPVFRPTV9SSUdIVF0pLFxuICBzaG93S2V5Ym9hcmRTaG9ydGN1dHNQYW5lbDogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5ib29sLFxuICBvcGVuS2V5Ym9hcmRTaG9ydGN1dHNQYW5lbDogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5mdW5jLFxuICBjbG9zZUtleWJvYXJkU2hvcnRjdXRzUGFuZWw6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uZnVuYyxcbiAgcGhyYXNlczogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5zaGFwZSgoMCwgX2dldFBocmFzZVByb3BUeXBlczJbJ2RlZmF1bHQnXSkoX2RlZmF1bHRQaHJhc2VzLkRheVBpY2tlcktleWJvYXJkU2hvcnRjdXRzUGhyYXNlcykpXG59KTtcblxudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgYmxvY2s6IGZhbHNlLFxuICBidXR0b25Mb2NhdGlvbjogQk9UVE9NX1JJR0hULFxuICBzaG93S2V5Ym9hcmRTaG9ydGN1dHNQYW5lbDogZmFsc2UsXG4gIG9wZW5LZXlib2FyZFNob3J0Y3V0c1BhbmVsOiBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gb3BlbktleWJvYXJkU2hvcnRjdXRzUGFuZWwoKSB7fVxuXG4gICAgcmV0dXJuIG9wZW5LZXlib2FyZFNob3J0Y3V0c1BhbmVsO1xuICB9KCksXG4gIGNsb3NlS2V5Ym9hcmRTaG9ydGN1dHNQYW5lbDogZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIGNsb3NlS2V5Ym9hcmRTaG9ydGN1dHNQYW5lbCgpIHt9XG5cbiAgICByZXR1cm4gY2xvc2VLZXlib2FyZFNob3J0Y3V0c1BhbmVsO1xuICB9KCksXG5cbiAgcGhyYXNlczogX2RlZmF1bHRQaHJhc2VzLkRheVBpY2tlcktleWJvYXJkU2hvcnRjdXRzUGhyYXNlc1xufTtcblxuZnVuY3Rpb24gS2V5Ym9hcmRTaG9ydGN1dFJvdyhfcmVmKSB7XG4gIHZhciB1bmljb2RlID0gX3JlZi51bmljb2RlLFxuICAgICAgbGFiZWwgPSBfcmVmLmxhYmVsLFxuICAgICAgYWN0aW9uID0gX3JlZi5hY3Rpb247XG5cbiAgcmV0dXJuIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KCdsaScsIHsgY2xhc3NOYW1lOiAnS2V5Ym9hcmRTaG9ydGN1dFJvdycgfSwgX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHtcbiAgICBjbGFzc05hbWU6ICdLZXlib2FyZFNob3J0Y3V0Um93X19rZXktY29udGFpbmVyJ1xuICB9LCBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudCgnc3BhbicsIHtcbiAgICBjbGFzc05hbWU6ICdLZXlib2FyZFNob3J0Y3V0Um93X19rZXknLFxuICAgIHJvbGU6ICdpbWcnLFxuICAgICdhcmlhLWxhYmVsJzogbGFiZWxcbiAgfSwgdW5pY29kZSkpLCBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6ICdLZXlib2FyZFNob3J0Y3V0Um93X19hY3Rpb24nIH0sIGFjdGlvbikpO1xufVxuXG5LZXlib2FyZFNob3J0Y3V0Um93LnByb3BUeXBlcyA9IHtcbiAgdW5pY29kZTogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgbGFiZWw6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uc3RyaW5nLmlzUmVxdWlyZWQsXG4gIGFjdGlvbjogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5zdHJpbmcuaXNSZXF1aXJlZFxufTtcblxuZnVuY3Rpb24gRGF5UGlja2VyS2V5Ym9hcmRTaG9ydGN1dHMoX3JlZjIpIHtcbiAgdmFyIF90aGlzID0gdGhpcztcblxuICB2YXIgYmxvY2sgPSBfcmVmMi5ibG9jayxcbiAgICAgIGJ1dHRvbkxvY2F0aW9uID0gX3JlZjIuYnV0dG9uTG9jYXRpb24sXG4gICAgICBzaG93S2V5Ym9hcmRTaG9ydGN1dHNQYW5lbCA9IF9yZWYyLnNob3dLZXlib2FyZFNob3J0Y3V0c1BhbmVsLFxuICAgICAgb3BlbktleWJvYXJkU2hvcnRjdXRzUGFuZWwgPSBfcmVmMi5vcGVuS2V5Ym9hcmRTaG9ydGN1dHNQYW5lbCxcbiAgICAgIGNsb3NlS2V5Ym9hcmRTaG9ydGN1dHNQYW5lbCA9IF9yZWYyLmNsb3NlS2V5Ym9hcmRTaG9ydGN1dHNQYW5lbCxcbiAgICAgIHBocmFzZXMgPSBfcmVmMi5waHJhc2VzO1xuXG4gIHZhciBrZXlib2FyZFNob3J0Y3V0cyA9IFt7XG4gICAgdW5pY29kZTogJ+KGtScsXG4gICAgbGFiZWw6IHBocmFzZXMuZW50ZXJLZXksXG4gICAgYWN0aW9uOiBwaHJhc2VzLnNlbGVjdEZvY3VzZWREYXRlXG4gIH0sIHtcbiAgICB1bmljb2RlOiAn4oaQL+KGkicsXG4gICAgbGFiZWw6IHBocmFzZXMubGVmdEFycm93UmlnaHRBcnJvdyxcbiAgICBhY3Rpb246IHBocmFzZXMubW92ZUZvY3VzQnlPbmVEYXlcbiAgfSwge1xuICAgIHVuaWNvZGU6ICfihpEv4oaTJyxcbiAgICBsYWJlbDogcGhyYXNlcy51cEFycm93RG93bkFycm93LFxuICAgIGFjdGlvbjogcGhyYXNlcy5tb3ZlRm9jdXNCeU9uZVdlZWtcbiAgfSwge1xuICAgIHVuaWNvZGU6ICdQZ1VwL1BnRG4nLFxuICAgIGxhYmVsOiBwaHJhc2VzLnBhZ2VVcFBhZ2VEb3duLFxuICAgIGFjdGlvbjogcGhyYXNlcy5tb3ZlRm9jdXNCeU9uZU1vbnRoXG4gIH0sIHtcbiAgICB1bmljb2RlOiAnSG9tZS9FbmQnLFxuICAgIGxhYmVsOiBwaHJhc2VzLmhvbWVFbmQsXG4gICAgYWN0aW9uOiBwaHJhc2VzLm1vdmVGb2N1c3RvU3RhcnRBbmRFbmRPZldlZWtcbiAgfSwge1xuICAgIHVuaWNvZGU6ICdFc2MnLFxuICAgIGxhYmVsOiBwaHJhc2VzLmVzY2FwZSxcbiAgICBhY3Rpb246IHBocmFzZXMucmV0dXJuRm9jdXNUb0lucHV0XG4gIH0sIHtcbiAgICB1bmljb2RlOiAnPycsXG4gICAgbGFiZWw6IHBocmFzZXMucXVlc3Rpb25NYXJrLFxuICAgIGFjdGlvbjogcGhyYXNlcy5vcGVuVGhpc1BhbmVsXG4gIH1dO1xuXG4gIHZhciB0b2dnbGVCdXR0b25UZXh0ID0gc2hvd0tleWJvYXJkU2hvcnRjdXRzUGFuZWwgPyBwaHJhc2VzLmhpZGVLZXlib2FyZFNob3J0Y3V0c1BhbmVsIDogcGhyYXNlcy5zaG93S2V5Ym9hcmRTaG9ydGN1dHNQYW5lbDtcblxuICByZXR1cm4gX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoJ2RpdicsIG51bGwsIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KCdidXR0b24nLCB7XG4gICAgcmVmOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiByZWYoX3JlZjMpIHtcbiAgICAgICAgX3RoaXMuc2hvd0tleWJvYXJkU2hvcnRjdXRzQnV0dG9uID0gX3JlZjM7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZWY7XG4gICAgfSgpLFxuICAgIGNsYXNzTmFtZTogKDAsIF9jbGFzc25hbWVzMlsnZGVmYXVsdCddKSgnRGF5UGlja2VyS2V5Ym9hcmRTaG9ydGN1dHNfX3Nob3cnLCB7XG4gICAgICAnRGF5UGlja2VyS2V5Ym9hcmRTaG9ydGN1dHNfX3Nob3ctLWJvdHRvbS1yaWdodCc6IGJ1dHRvbkxvY2F0aW9uID09PSBCT1RUT01fUklHSFQsXG4gICAgICAnRGF5UGlja2VyS2V5Ym9hcmRTaG9ydGN1dHNfX3Nob3ctLXRvcC1yaWdodCc6IGJ1dHRvbkxvY2F0aW9uID09PSBUT1BfUklHSFQsXG4gICAgICAnRGF5UGlja2VyS2V5Ym9hcmRTaG9ydGN1dHNfX3Nob3ctLXRvcC1sZWZ0JzogYnV0dG9uTG9jYXRpb24gPT09IFRPUF9MRUZUXG4gICAgfSksXG4gICAgdHlwZTogJ2J1dHRvbicsXG4gICAgJ2FyaWEtbGFiZWwnOiB0b2dnbGVCdXR0b25UZXh0LFxuICAgIG9uQ2xpY2s6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIG9uQ2xpY2soKSB7XG4gICAgICAgIC8vIHdlIHdhbnQgdG8gcmV0dXJuIGZvY3VzIHRvIHRoaXMgYnV0dG9uIGFmdGVyIGNsb3NpbmcgdGhlIGtleWJvYXJkIHNob3J0Y3V0cyBwYW5lbFxuICAgICAgICBvcGVuS2V5Ym9hcmRTaG9ydGN1dHNQYW5lbChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXMuc2hvd0tleWJvYXJkU2hvcnRjdXRzQnV0dG9uLmZvY3VzKCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gb25DbGljaztcbiAgICB9KCksXG4gICAgb25Nb3VzZVVwOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBvbk1vdXNlVXAoZSkge1xuICAgICAgICBlLmN1cnJlbnRUYXJnZXQuYmx1cigpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gb25Nb3VzZVVwO1xuICAgIH0oKVxuICB9LCBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudCgnc3BhbicsIHsgY2xhc3NOYW1lOiAnRGF5UGlja2VyS2V5Ym9hcmRTaG9ydGN1dHNfX3Nob3dfc3BhbicgfSwgJz8nKSksIHNob3dLZXlib2FyZFNob3J0Y3V0c1BhbmVsICYmIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KCdkaXYnLCB7XG4gICAgY2xhc3NOYW1lOiAoMCwgX2NsYXNzbmFtZXMyWydkZWZhdWx0J10pKCdEYXlQaWNrZXJLZXlib2FyZFNob3J0Y3V0c19fcGFuZWwnLCB7XG4gICAgICAnRGF5UGlja2VyS2V5Ym9hcmRTaG9ydGN1dHNfX3BhbmVsLS1ibG9jayc6IGJsb2NrXG4gICAgfSksXG4gICAgcm9sZTogJ2RpYWxvZycsXG4gICAgJ2FyaWEtbGFiZWxsZWRieSc6ICdEYXlQaWNrZXJLZXlib2FyZFNob3J0Y3V0c19fdGl0bGUnXG4gIH0sIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KCdkaXYnLCB7XG4gICAgaWQ6ICdEYXlQaWNrZXJLZXlib2FyZFNob3J0Y3V0c19fdGl0bGUnLFxuICAgIGNsYXNzTmFtZTogJ0RheVBpY2tlcktleWJvYXJkU2hvcnRjdXRzX190aXRsZSdcbiAgfSwgcGhyYXNlcy5rZXlib2FyZFNob3J0Y3V0cyksIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KCdidXR0b24nLCB7XG4gICAgY2xhc3NOYW1lOiAnRGF5UGlja2VyS2V5Ym9hcmRTaG9ydGN1dHNfX2Nsb3NlJyxcbiAgICB0eXBlOiAnYnV0dG9uJyxcbiAgICAnYXJpYS1sYWJlbCc6IHBocmFzZXMuaGlkZUtleWJvYXJkU2hvcnRjdXRzUGFuZWwsXG4gICAgb25DbGljazogY2xvc2VLZXlib2FyZFNob3J0Y3V0c1BhbmVsLFxuICAgIG9uS2V5RG93bjogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gb25LZXlEb3duKGUpIHtcbiAgICAgICAgLy8gQmVjYXVzZSB0aGUgY2xvc2UgYnV0dG9uIGlzIHRoZSBvbmx5IGZvY3VzYWJsZSBlbGVtZW50IGluc2lkZSBvZiB0aGUgcGFuZWwsIHRoaXNcbiAgICAgICAgLy8gYW1vdW50IHRvIGEgdmVyeSBiYXNpYyBmb2N1cyB0cmFwLiBUaGUgdXNlciBjYW4gZXhpdCB0aGUgcGFuZWwgYnkgXCJwcmVzc2luZ1wiIHRoZVxuICAgICAgICAvLyBjbG9zZSBidXR0b24gb3IgaGl0dGluZyBlc2NhcGVcbiAgICAgICAgaWYgKGUua2V5ID09PSAnVGFiJykge1xuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gb25LZXlEb3duO1xuICAgIH0oKVxuICB9LCBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChfY2xvc2UyWydkZWZhdWx0J10sIG51bGwpKSwgX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoJ3VsJywgeyBjbGFzc05hbWU6ICdEYXlQaWNrZXJLZXlib2FyZFNob3J0Y3V0c19fbGlzdCcgfSwga2V5Ym9hcmRTaG9ydGN1dHMubWFwKGZ1bmN0aW9uIChfcmVmNCkge1xuICAgIHZhciB1bmljb2RlID0gX3JlZjQudW5pY29kZSxcbiAgICAgICAgbGFiZWwgPSBfcmVmNC5sYWJlbCxcbiAgICAgICAgYWN0aW9uID0gX3JlZjQuYWN0aW9uO1xuICAgIHJldHVybiBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChLZXlib2FyZFNob3J0Y3V0Um93LCB7IGtleTogbGFiZWwsIHVuaWNvZGU6IHVuaWNvZGUsIGxhYmVsOiBsYWJlbCwgYWN0aW9uOiBhY3Rpb24gfSk7XG4gIH0pKSkpO1xufVxuXG5EYXlQaWNrZXJLZXlib2FyZFNob3J0Y3V0cy5wcm9wVHlwZXMgPSBwcm9wVHlwZXM7XG5EYXlQaWNrZXJLZXlib2FyZFNob3J0Y3V0cy5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5cbi8qKiovIH0pXG5cbi8qKioqKiovIH0pOyIsIm1vZHVsZS5leHBvcnRzID1cbi8qKioqKiovIChmdW5jdGlvbihtb2R1bGVzKSB7IC8vIHdlYnBhY2tCb290c3RyYXBcbi8qKioqKiovIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbi8qKioqKiovIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbi8qKioqKiovIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuLyoqKioqKi8gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4vKioqKioqLyBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuLyoqKioqKi8gXHRcdFx0aTogbW9kdWxlSWQsXG4vKioqKioqLyBcdFx0XHRsOiBmYWxzZSxcbi8qKioqKiovIFx0XHRcdGV4cG9ydHM6IHt9XG4vKioqKioqLyBcdFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4vKioqKioqLyBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbi8qKioqKiovIFx0XHRtb2R1bGUubCA9IHRydWU7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4vKioqKioqLyBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuLyoqKioqKi8gXHR9XG4vKioqKioqL1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBpZGVudGl0eSBmdW5jdGlvbiBmb3IgY2FsbGluZyBoYXJtb255IGltcG9ydHMgd2l0aCB0aGUgY29ycmVjdCBjb250ZXh0XG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uaSA9IGZ1bmN0aW9uKHZhbHVlKSB7IHJldHVybiB2YWx1ZTsgfTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbi8qKioqKiovIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4vKioqKioqLyBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwge1xuLyoqKioqKi8gXHRcdFx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxuLyoqKioqKi8gXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuLyoqKioqKi8gXHRcdFx0XHRnZXQ6IGdldHRlclxuLyoqKioqKi8gXHRcdFx0fSk7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4vKioqKioqLyBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4vKioqKioqLyBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuLyoqKioqKi8gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4vKioqKioqLyBcdFx0cmV0dXJuIGdldHRlcjtcbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vKioqKioqLyBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDY4KTtcbi8qKioqKiovIH0pXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKioqKi8gKHtcblxuLyoqKi8gMDpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwicmVhY3RcIik7XG5cbi8qKiovIH0pLFxuXG4vKioqLyAxOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJhaXJibmItcHJvcC10eXBlc1wiKTtcblxuLyoqKi8gfSksXG5cbi8qKiovIDI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uL2RlZmF1bHRQaHJhc2VzXCIpO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gMjM6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfcmVhY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgXCJkZWZhdWx0XCI6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIFNWRyA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhTVkcsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFNWRygpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU1ZHKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoU1ZHLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoU1ZHKSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoU1ZHLCBbe1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gX3JlYWN0MltcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChcbiAgICAgICAgICBcInN2Z1wiLFxuICAgICAgICAgIF9leHRlbmRzKHsgdmlld0JveDogXCIwIDAgMTAwMCAxMDAwXCIgfSwgdGhpcy5wcm9wcyksXG4gICAgICAgICAgX3JlYWN0MltcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChcInBhdGhcIiwgeyBkOiBcIk0zMzYuMiAyNzQuNWwtMjEwLjEgMjEwaDgwNS40YzEzIDAgMjMgMTAgMjMgMjNzLTEwIDIzLTIzIDIzSDEyNi4xbDIxMC4xIDIxMC4xYzExIDExIDExIDIxIDAgMzItNSA1LTEwIDctMTYgN3MtMTEtMi0xNi03bC0yNDkuMS0yNDljLTExLTExLTExLTIxIDAtMzJsMjQ5LjEtMjQ5LjFjMjEtMjEuMSA1MyAxMC45IDMyIDMyelwiIH0pXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZW5kZXI7XG4gICAgfSgpXG4gIH1dKTtcblxuICByZXR1cm4gU1ZHO1xufShfcmVhY3QyW1wiZGVmYXVsdFwiXS5Db21wb25lbnQpO1xuXG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IFNWRztcblxuLyoqKi8gfSksXG5cbi8qKiovIDI0OlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX3JlYWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IFwiZGVmYXVsdFwiOiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBTVkcgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoU1ZHLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBTVkcoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFNWRyk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKFNWRy5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFNWRykpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFNWRywgW3tcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIF9yZWFjdDJbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgXCJzdmdcIixcbiAgICAgICAgICBfZXh0ZW5kcyh7IHZpZXdCb3g6IFwiMCAwIDEwMDAgMTAwMFwiIH0sIHRoaXMucHJvcHMpLFxuICAgICAgICAgIF9yZWFjdDJbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHsgZDogXCJNNjk0LjQgMjQyLjRsMjQ5LjEgMjQ5LjFjMTEgMTEgMTEgMjEgMCAzMkw2OTQuNCA3NzIuN2MtNSA1LTEwIDctMTYgN3MtMTEtMi0xNi03Yy0xMS0xMS0xMS0yMSAwLTMybDIxMC4xLTIxMC4xSDY3LjFjLTEzIDAtMjMtMTAtMjMtMjNzMTAtMjMgMjMtMjNoODA1LjRMNjYyLjQgMjc0LjVjLTIxLTIxLjEgMTEtNTMuMSAzMi0zMi4xelwiIH0pXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZW5kZXI7XG4gICAgfSgpXG4gIH1dKTtcblxuICByZXR1cm4gU1ZHO1xufShfcmVhY3QyW1wiZGVmYXVsdFwiXS5Db21wb25lbnQpO1xuXG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IFNWRztcblxuLyoqKi8gfSksXG5cbi8qKiovIDM6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInByb3AtdHlwZXNcIik7XG5cbi8qKiovIH0pLFxuXG4vKioqLyAzOTpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9yZWFjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBcImRlZmF1bHRcIjogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgU1ZHID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFNWRywgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gU1ZHKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTVkcpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChTVkcuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihTVkcpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhTVkcsIFt7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiBfcmVhY3QyW1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgIFwic3ZnXCIsXG4gICAgICAgICAgX2V4dGVuZHMoeyB2aWV3Qm94OiBcIjAgMCAxMDAwIDEwMDBcIiB9LCB0aGlzLnByb3BzKSxcbiAgICAgICAgICBfcmVhY3QyW1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7IGQ6IFwiTTk2Ny41IDI4OC41TDUxNC4zIDc0MC43Yy0xMSAxMS0yMSAxMS0zMiAwTDI5LjEgMjg4LjVjLTQtNS02LTExLTYtMTYgMC0xMyAxMC0yMyAyMy0yMyA2IDAgMTEgMiAxNSA3bDQzNy4yIDQzNi4yIDQzNy4yLTQzNi4yYzQtNSA5LTcgMTYtNyA2IDAgMTEgMiAxNiA3IDkgMTAuOSA5IDIxIDAgMzJ6XCIgfSlcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlbmRlcjtcbiAgICB9KClcbiAgfV0pO1xuXG4gIHJldHVybiBTVkc7XG59KF9yZWFjdDJbXCJkZWZhdWx0XCJdLkNvbXBvbmVudCk7XG5cbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gU1ZHO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gNDpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vY29uc3RhbnRzXCIpO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gNDA6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfcmVhY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgXCJkZWZhdWx0XCI6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIFNWRyA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhTVkcsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFNWRygpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU1ZHKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoU1ZHLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoU1ZHKSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoU1ZHLCBbe1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gX3JlYWN0MltcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChcbiAgICAgICAgICBcInN2Z1wiLFxuICAgICAgICAgIF9leHRlbmRzKHsgdmlld0JveDogXCIwIDAgMTAwMCAxMDAwXCIgfSwgdGhpcy5wcm9wcyksXG4gICAgICAgICAgX3JlYWN0MltcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChcInBhdGhcIiwgeyBkOiBcIk0zMi4xIDcxMi42bDQ1My4yLTQ1Mi4yYzExLTExIDIxLTExIDMyIDBsNDUzLjIgNDUyLjJjNCA1IDYgMTAgNiAxNiAwIDEzLTEwIDIzLTIyIDIzLTcgMC0xMi0yLTE2LTdMNTAxLjMgMzA4LjUgNjQuMSA3NDQuN2MtNCA1LTkgNy0xNSA3LTcgMC0xMi0yLTE3LTctOS0xMS05LTIxIDAtMzIuMXpcIiB9KVxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVuZGVyO1xuICAgIH0oKVxuICB9XSk7XG5cbiAgcmV0dXJuIFNWRztcbn0oX3JlYWN0MltcImRlZmF1bHRcIl0uQ29tcG9uZW50KTtcblxuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBTVkc7XG5cbi8qKiovIH0pLFxuXG4vKioqLyA1OlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi91dGlscy9nZXRQaHJhc2VQcm9wVHlwZXNcIik7XG5cbi8qKiovIH0pLFxuXG4vKioqLyA2OlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gNjg6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzWydkZWZhdWx0J10gPSBEYXlQaWNrZXJOYXZpZ2F0aW9uO1xuXG52YXIgX3JlYWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcHJvcFR5cGVzID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxudmFyIF9haXJibmJQcm9wVHlwZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuXG52YXIgX2NsYXNzbmFtZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYpO1xuXG52YXIgX2NsYXNzbmFtZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NuYW1lcyk7XG5cbnZhciBfZGVmYXVsdFBocmFzZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXG52YXIgX2dldFBocmFzZVByb3BUeXBlcyA9IF9fd2VicGFja19yZXF1aXJlX18oNSk7XG5cbnZhciBfZ2V0UGhyYXNlUHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldFBocmFzZVByb3BUeXBlcyk7XG5cbnZhciBfYXJyb3dMZWZ0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMyk7XG5cbnZhciBfYXJyb3dMZWZ0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Fycm93TGVmdCk7XG5cbnZhciBfYXJyb3dSaWdodCA9IF9fd2VicGFja19yZXF1aXJlX18oMjQpO1xuXG52YXIgX2Fycm93UmlnaHQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYXJyb3dSaWdodCk7XG5cbnZhciBfY2hldnJvblVwID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0MCk7XG5cbnZhciBfY2hldnJvblVwMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NoZXZyb25VcCk7XG5cbnZhciBfY2hldnJvbkRvd24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM5KTtcblxudmFyIF9jaGV2cm9uRG93bjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jaGV2cm9uRG93bik7XG5cbnZhciBfU2Nyb2xsYWJsZU9yaWVudGF0aW9uU2hhcGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xuXG52YXIgX1Njcm9sbGFibGVPcmllbnRhdGlvblNoYXBlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1Njcm9sbGFibGVPcmllbnRhdGlvblNoYXBlKTtcblxudmFyIF9jb25zdGFudHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikge1xuICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9O1xufVxuXG52YXIgcHJvcFR5cGVzID0gKDAsIF9haXJibmJQcm9wVHlwZXMuZm9yYmlkRXh0cmFQcm9wcykoe1xuICBuYXZQcmV2OiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLm5vZGUsXG4gIG5hdk5leHQ6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10ubm9kZSxcbiAgb3JpZW50YXRpb246IF9TY3JvbGxhYmxlT3JpZW50YXRpb25TaGFwZTJbJ2RlZmF1bHQnXSxcblxuICBvblByZXZNb250aENsaWNrOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmZ1bmMsXG4gIG9uTmV4dE1vbnRoQ2xpY2s6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uZnVuYyxcblxuICAvLyBpbnRlcm5hdGlvbmFsaXphdGlvblxuICBwaHJhc2VzOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLnNoYXBlKCgwLCBfZ2V0UGhyYXNlUHJvcFR5cGVzMlsnZGVmYXVsdCddKShfZGVmYXVsdFBocmFzZXMuRGF5UGlja2VyTmF2aWdhdGlvblBocmFzZXMpKSxcblxuICBpc1JUTDogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5ib29sXG59KTtcblxudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgbmF2UHJldjogbnVsbCxcbiAgbmF2TmV4dDogbnVsbCxcbiAgb3JpZW50YXRpb246IF9jb25zdGFudHMuSE9SSVpPTlRBTF9PUklFTlRBVElPTixcblxuICBvblByZXZNb250aENsaWNrOiBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gb25QcmV2TW9udGhDbGljaygpIHt9XG5cbiAgICByZXR1cm4gb25QcmV2TW9udGhDbGljaztcbiAgfSgpLFxuICBvbk5leHRNb250aENsaWNrOiBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gb25OZXh0TW9udGhDbGljaygpIHt9XG5cbiAgICByZXR1cm4gb25OZXh0TW9udGhDbGljaztcbiAgfSgpLFxuXG4gIC8vIGludGVybmF0aW9uYWxpemF0aW9uXG4gIHBocmFzZXM6IF9kZWZhdWx0UGhyYXNlcy5EYXlQaWNrZXJOYXZpZ2F0aW9uUGhyYXNlcyxcbiAgaXNSVEw6IGZhbHNlXG59O1xuXG5mdW5jdGlvbiBEYXlQaWNrZXJOYXZpZ2F0aW9uKHByb3BzKSB7XG4gIHZhciBuYXZQcmV2ID0gcHJvcHMubmF2UHJldixcbiAgICAgIG5hdk5leHQgPSBwcm9wcy5uYXZOZXh0LFxuICAgICAgb25QcmV2TW9udGhDbGljayA9IHByb3BzLm9uUHJldk1vbnRoQ2xpY2ssXG4gICAgICBvbk5leHRNb250aENsaWNrID0gcHJvcHMub25OZXh0TW9udGhDbGljayxcbiAgICAgIG9yaWVudGF0aW9uID0gcHJvcHMub3JpZW50YXRpb24sXG4gICAgICBwaHJhc2VzID0gcHJvcHMucGhyYXNlcyxcbiAgICAgIGlzUlRMID0gcHJvcHMuaXNSVEw7XG5cbiAgdmFyIGlzVmVydGljYWwgPSBvcmllbnRhdGlvbiAhPT0gX2NvbnN0YW50cy5IT1JJWk9OVEFMX09SSUVOVEFUSU9OO1xuICB2YXIgaXNWZXJ0aWNhbFNjcm9sbGFibGUgPSBvcmllbnRhdGlvbiA9PT0gX2NvbnN0YW50cy5WRVJUSUNBTF9TQ1JPTExBQkxFO1xuXG4gIHZhciBuYXZQcmV2SWNvbiA9IG5hdlByZXY7XG4gIHZhciBuYXZOZXh0SWNvbiA9IG5hdk5leHQ7XG4gIHZhciBpc0RlZmF1bHROYXZQcmV2ID0gZmFsc2U7XG4gIHZhciBpc0RlZmF1bHROYXZOZXh0ID0gZmFsc2U7XG4gIGlmICghbmF2UHJldkljb24pIHtcbiAgICBpc0RlZmF1bHROYXZQcmV2ID0gdHJ1ZTtcbiAgICBuYXZQcmV2SWNvbiA9IGlzVmVydGljYWwgPyBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChfY2hldnJvblVwMlsnZGVmYXVsdCddLCBudWxsKSA6IF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KF9hcnJvd0xlZnQyWydkZWZhdWx0J10sIG51bGwpO1xuICAgIGlmIChpc1JUTCAmJiAhaXNWZXJ0aWNhbCkge1xuICAgICAgbmF2UHJldkljb24gPSBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChfYXJyb3dSaWdodDJbJ2RlZmF1bHQnXSwgbnVsbCk7XG4gICAgfVxuICB9XG4gIGlmICghbmF2TmV4dEljb24pIHtcbiAgICBpc0RlZmF1bHROYXZOZXh0ID0gdHJ1ZTtcbiAgICBuYXZOZXh0SWNvbiA9IGlzVmVydGljYWwgPyBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChfY2hldnJvbkRvd24yWydkZWZhdWx0J10sIG51bGwpIDogX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoX2Fycm93UmlnaHQyWydkZWZhdWx0J10sIG51bGwpO1xuICAgIGlmIChpc1JUTCAmJiAhaXNWZXJ0aWNhbCkge1xuICAgICAgbmF2TmV4dEljb24gPSBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChfYXJyb3dMZWZ0MlsnZGVmYXVsdCddLCBudWxsKTtcbiAgICB9XG4gIH1cblxuICB2YXIgbmF2Q2xhc3NOYW1lcyA9ICgwLCBfY2xhc3NuYW1lczJbJ2RlZmF1bHQnXSkoJ0RheVBpY2tlck5hdmlnYXRpb24nLCB7XG4gICAgJ0RheVBpY2tlck5hdmlnYXRpb24tLWhvcml6b250YWwnOiAhaXNWZXJ0aWNhbCxcbiAgICAnRGF5UGlja2VyTmF2aWdhdGlvbi0tdmVydGljYWwnOiBpc1ZlcnRpY2FsLFxuICAgICdEYXlQaWNrZXJOYXZpZ2F0aW9uLS12ZXJ0aWNhbC1zY3JvbGxhYmxlJzogaXNWZXJ0aWNhbFNjcm9sbGFibGVcbiAgfSk7XG4gIHZhciBwcmV2Q2xhc3NOYW1lcyA9ICgwLCBfY2xhc3NuYW1lczJbJ2RlZmF1bHQnXSkoJ0RheVBpY2tlck5hdmlnYXRpb25fX3ByZXYnLCB7XG4gICAgJ0RheVBpY2tlck5hdmlnYXRpb25fX3ByZXYtLWRlZmF1bHQnOiBpc0RlZmF1bHROYXZQcmV2LFxuICAgICdEYXlQaWNrZXJOYXZpZ2F0aW9uX19wcmV2LS1ydGwnOiBpc1JUTFxuICB9KTtcbiAgdmFyIG5leHRDbGFzc05hbWVzID0gKDAsIF9jbGFzc25hbWVzMlsnZGVmYXVsdCddKSgnRGF5UGlja2VyTmF2aWdhdGlvbl9fbmV4dCcsIHtcbiAgICAnRGF5UGlja2VyTmF2aWdhdGlvbl9fbmV4dC0tZGVmYXVsdCc6IGlzRGVmYXVsdE5hdk5leHQsXG4gICAgJ0RheVBpY2tlck5hdmlnYXRpb25fX25leHQtLXJ0bCc6IGlzUlRMXG4gIH0pO1xuXG4gIHJldHVybiBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6IG5hdkNsYXNzTmFtZXMgfSwgIWlzVmVydGljYWxTY3JvbGxhYmxlICYmIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KCdidXR0b24nLCB7XG4gICAgdHlwZTogJ2J1dHRvbicsXG4gICAgJ2FyaWEtbGFiZWwnOiBwaHJhc2VzLmp1bXBUb1ByZXZNb250aCxcbiAgICBjbGFzc05hbWU6IHByZXZDbGFzc05hbWVzLFxuICAgIG9uQ2xpY2s6IG9uUHJldk1vbnRoQ2xpY2ssXG4gICAgb25Nb3VzZVVwOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBvbk1vdXNlVXAoZSkge1xuICAgICAgICBlLmN1cnJlbnRUYXJnZXQuYmx1cigpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gb25Nb3VzZVVwO1xuICAgIH0oKVxuICB9LCBuYXZQcmV2SWNvbiksIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KCdidXR0b24nLCB7XG4gICAgdHlwZTogJ2J1dHRvbicsXG4gICAgJ2FyaWEtbGFiZWwnOiBwaHJhc2VzLmp1bXBUb05leHRNb250aCxcbiAgICBjbGFzc05hbWU6IG5leHRDbGFzc05hbWVzLFxuICAgIG9uQ2xpY2s6IG9uTmV4dE1vbnRoQ2xpY2ssXG4gICAgb25Nb3VzZVVwOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBvbk1vdXNlVXAoZSkge1xuICAgICAgICBlLmN1cnJlbnRUYXJnZXQuYmx1cigpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gb25Nb3VzZVVwO1xuICAgIH0oKVxuICB9LCBuYXZOZXh0SWNvbikpO1xufVxuXG5EYXlQaWNrZXJOYXZpZ2F0aW9uLnByb3BUeXBlcyA9IHByb3BUeXBlcztcbkRheVBpY2tlck5hdmlnYXRpb24uZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gODpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vc2hhcGVzL1Njcm9sbGFibGVPcmllbnRhdGlvblNoYXBlXCIpO1xuXG4vKioqLyB9KVxuXG4vKioqKioqLyB9KTsiLCIndXNlIHN0cmljdCc7XG5cbnZhciBiaW5kID0gcmVxdWlyZSgnZnVuY3Rpb24tYmluZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGJpbmQuY2FsbChGdW5jdGlvbi5jYWxsLCBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5KTtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi81L0NoZWNrT2JqZWN0Q29lcmNpYmxlJyk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCcuLi9HZXRJbnRyaW5zaWMnKTtcblxudmFyICRUeXBlRXJyb3IgPSBHZXRJbnRyaW5zaWMoJyVUeXBlRXJyb3IlJyk7XG5cbi8vIGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi81LjEvI3NlYy05LjEwXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gQ2hlY2tPYmplY3RDb2VyY2libGUodmFsdWUsIG9wdE1lc3NhZ2UpIHtcblx0aWYgKHZhbHVlID09IG51bGwpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcihvcHRNZXNzYWdlIHx8ICgnQ2Fubm90IGNhbGwgbWV0aG9kIG9uICcgKyB2YWx1ZSkpO1xuXHR9XG5cdHJldHVybiB2YWx1ZTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBvcmlnU3ltYm9sID0gZ2xvYmFsLlN5bWJvbDtcbnZhciBoYXNTeW1ib2xTaGFtID0gcmVxdWlyZSgnLi9zaGFtcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGhhc05hdGl2ZVN5bWJvbHMoKSB7XG5cdGlmICh0eXBlb2Ygb3JpZ1N5bWJvbCAhPT0gJ2Z1bmN0aW9uJykgeyByZXR1cm4gZmFsc2U7IH1cblx0aWYgKHR5cGVvZiBTeW1ib2wgIT09ICdmdW5jdGlvbicpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdGlmICh0eXBlb2Ygb3JpZ1N5bWJvbCgnZm9vJykgIT09ICdzeW1ib2wnKSB7IHJldHVybiBmYWxzZTsgfVxuXHRpZiAodHlwZW9mIFN5bWJvbCgnYmFyJykgIT09ICdzeW1ib2wnKSB7IHJldHVybiBmYWxzZTsgfVxuXG5cdHJldHVybiBoYXNTeW1ib2xTaGFtKCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnLi4vR2V0SW50cmluc2ljJyk7XG5cbnZhciBjYWxsQmluZCA9IHJlcXVpcmUoJy4vY2FsbEJpbmQnKTtcblxudmFyICRpbmRleE9mID0gY2FsbEJpbmQoR2V0SW50cmluc2ljKCdTdHJpbmcucHJvdG90eXBlLmluZGV4T2YnKSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY2FsbEJvdW5kSW50cmluc2ljKG5hbWUsIGFsbG93TWlzc2luZykge1xuXHR2YXIgaW50cmluc2ljID0gR2V0SW50cmluc2ljKG5hbWUsICEhYWxsb3dNaXNzaW5nKTtcblx0aWYgKHR5cGVvZiBpbnRyaW5zaWMgPT09ICdmdW5jdGlvbicgJiYgJGluZGV4T2YobmFtZSwgJy5wcm90b3R5cGUuJykpIHtcblx0XHRyZXR1cm4gY2FsbEJpbmQoaW50cmluc2ljKTtcblx0fVxuXHRyZXR1cm4gaW50cmluc2ljO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGJpbmQgPSByZXF1aXJlKCdmdW5jdGlvbi1iaW5kJyk7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCcuLi9HZXRJbnRyaW5zaWMnKTtcblxudmFyICRGdW5jdGlvbiA9IEdldEludHJpbnNpYygnJUZ1bmN0aW9uJScpO1xudmFyICRhcHBseSA9ICRGdW5jdGlvbi5hcHBseTtcbnZhciAkY2FsbCA9ICRGdW5jdGlvbi5jYWxsO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNhbGxCaW5kKCkge1xuXHRyZXR1cm4gYmluZC5hcHBseSgkY2FsbCwgYXJndW1lbnRzKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzLmFwcGx5ID0gZnVuY3Rpb24gYXBwbHlCaW5kKCkge1xuXHRyZXR1cm4gYmluZC5hcHBseSgkYXBwbHksIGFyZ3VtZW50cyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZ2V0UG9seWZpbGwgPSByZXF1aXJlKCcuL3BvbHlmaWxsJyk7XG52YXIgZGVmaW5lID0gcmVxdWlyZSgnZGVmaW5lLXByb3BlcnRpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzaGltVmFsdWVzKCkge1xuXHR2YXIgcG9seWZpbGwgPSBnZXRQb2x5ZmlsbCgpO1xuXHRkZWZpbmUoT2JqZWN0LCB7IHZhbHVlczogcG9seWZpbGwgfSwge1xuXHRcdHZhbHVlczogZnVuY3Rpb24gdGVzdFZhbHVlcygpIHtcblx0XHRcdHJldHVybiBPYmplY3QudmFsdWVzICE9PSBwb2x5ZmlsbDtcblx0XHR9XG5cdH0pO1xuXHRyZXR1cm4gcG9seWZpbGw7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPVxuLyoqKioqKi8gKGZ1bmN0aW9uKG1vZHVsZXMpIHsgLy8gd2VicGFja0Jvb3RzdHJhcFxuLyoqKioqKi8gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuLyoqKioqKi8gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuLyoqKioqKi8gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4vKioqKioqLyBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbi8qKioqKiovIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4vKioqKioqLyBcdFx0XHRpOiBtb2R1bGVJZCxcbi8qKioqKiovIFx0XHRcdGw6IGZhbHNlLFxuLyoqKioqKi8gXHRcdFx0ZXhwb3J0czoge31cbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbi8qKioqKiovIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuLyoqKioqKi8gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbi8qKioqKiovIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyBcdH1cbi8qKioqKiovXG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGlkZW50aXR5IGZ1bmN0aW9uIGZvciBjYWxsaW5nIGhhcm1vbnkgaW1wb3J0cyB3aXRoIHRoZSBjb3JyZWN0IGNvbnRleHRcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5pID0gZnVuY3Rpb24odmFsdWUpIHsgcmV0dXJuIHZhbHVlOyB9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuLyoqKioqKi8gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbi8qKioqKiovIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7XG4vKioqKioqLyBcdFx0XHRcdGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4vKioqKioqLyBcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG4vKioqKioqLyBcdFx0XHRcdGdldDogZ2V0dGVyXG4vKioqKioqLyBcdFx0XHR9KTtcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbi8qKioqKiovIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbi8qKioqKiovIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4vKioqKioqLyBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuLyoqKioqKi8gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbi8qKioqKiovIFx0XHRyZXR1cm4gZ2V0dGVyO1xuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8qKioqKiovIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gNzIpO1xuLyoqKioqKi8gfSlcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqKioqLyAoe1xuXG4vKioqLyAwOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJyZWFjdFwiKTtcblxuLyoqKi8gfSksXG5cbi8qKiovIDE6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImFpcmJuYi1wcm9wLXR5cGVzXCIpO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gMTE6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfcmVhY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgXCJkZWZhdWx0XCI6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIFNWRyA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhTVkcsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFNWRygpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU1ZHKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoU1ZHLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoU1ZHKSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoU1ZHLCBbe1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gX3JlYWN0MltcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChcbiAgICAgICAgICBcInN2Z1wiLFxuICAgICAgICAgIF9leHRlbmRzKHsgdmlld0JveDogXCIwIDAgMTIgMTJcIiB9LCB0aGlzLnByb3BzKSxcbiAgICAgICAgICBfcmVhY3QyW1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7IGZpbGxSdWxlOiBcImV2ZW5vZGRcIiwgZDogXCJNMTEuNTMuNDdhLjc1Ljc1IDAgMCAwLTEuMDYxIDBsLTQuNDcgNC40N0wxLjUyOS40N0EuNzUuNzUgMCAxIDAgLjQ2OCAxLjUzMWw0LjQ3IDQuNDctNC40NyA0LjQ3YS43NS43NSAwIDEgMCAxLjA2MSAxLjA2MWw0LjQ3LTQuNDcgNC40NyA0LjQ3YS43NS43NSAwIDEgMCAxLjA2MS0xLjA2MWwtNC40Ny00LjQ3IDQuNDctNC40N2EuNzUuNzUgMCAwIDAgMC0xLjA2MXpcIiB9KVxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVuZGVyO1xuICAgIH0oKVxuICB9XSk7XG5cbiAgcmV0dXJuIFNWRztcbn0oX3JlYWN0MltcImRlZmF1bHRcIl0uQ29tcG9uZW50KTtcblxuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBTVkc7XG5cbi8qKiovIH0pLFxuXG4vKioqLyAxMzpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vdXRpbHMvdG9JU09EYXRlU3RyaW5nXCIpO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gMTU6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uL3V0aWxzL2lzSW5jbHVzaXZlbHlBZnRlckRheVwiKTtcblxuLyoqKi8gfSksXG5cbi8qKiovIDE2OlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJjb25zb2xpZGF0ZWQtZXZlbnRzXCIpO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gMjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vZGVmYXVsdFBocmFzZXNcIik7XG5cbi8qKiovIH0pLFxuXG4vKioqLyAyMTpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi9PdXRzaWRlQ2xpY2tIYW5kbGVyXCIpO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gMjc6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uL3V0aWxzL2dldFJlc3BvbnNpdmVDb250YWluZXJTdHlsZXNcIik7XG5cbi8qKiovIH0pLFxuXG4vKioqLyAzMTpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vdXRpbHMvdG9Mb2NhbGl6ZWREYXRlU3RyaW5nXCIpO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gMzI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uL3V0aWxzL3RvTW9tZW50T2JqZWN0XCIpO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gMzg6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInJlYWN0LXBvcnRhbFwiKTtcblxuLyoqKi8gfSksXG5cbi8qKiovIDQ6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uL2NvbnN0YW50c1wiKTtcblxuLyoqKi8gfSksXG5cbi8qKiovIDQzOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi9zaGFwZXMvU2luZ2xlRGF0ZVBpY2tlclNoYXBlXCIpO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gNTc6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4vRGF5UGlja2VyU2luZ2xlRGF0ZUNvbnRyb2xsZXJcIik7XG5cbi8qKiovIH0pLFxuXG4vKioqLyA1ODpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi9TaW5nbGVEYXRlUGlja2VySW5wdXRcIik7XG5cbi8qKiovIH0pLFxuXG4vKioqLyA2OlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gNzpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwibW9tZW50XCIpO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gNzI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7ZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO2lmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7T2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICAgIH1cbiAgfXJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gICAgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtyZXR1cm4gQ29uc3RydWN0b3I7XG4gIH07XG59KCk7XG5cbnZhciBfcmVhY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9tb21lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcpO1xuXG52YXIgX21vbWVudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9tb21lbnQpO1xuXG52YXIgX2NsYXNzbmFtZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYpO1xuXG52YXIgX2NsYXNzbmFtZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NuYW1lcyk7XG5cbnZhciBfcmVhY3RQb3J0YWwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM4KTtcblxudmFyIF9yZWFjdFBvcnRhbDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdFBvcnRhbCk7XG5cbnZhciBfYWlyYm5iUHJvcFR5cGVzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcblxudmFyIF9jb25zb2xpZGF0ZWRFdmVudHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE2KTtcblxudmFyIF9pc1RvdWNoRGV2aWNlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5KTtcblxudmFyIF9pc1RvdWNoRGV2aWNlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2lzVG91Y2hEZXZpY2UpO1xuXG52YXIgX1NpbmdsZURhdGVQaWNrZXJTaGFwZSA9IF9fd2VicGFja19yZXF1aXJlX18oNDMpO1xuXG52YXIgX1NpbmdsZURhdGVQaWNrZXJTaGFwZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9TaW5nbGVEYXRlUGlja2VyU2hhcGUpO1xuXG52YXIgX2RlZmF1bHRQaHJhc2VzID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcblxudmFyIF9PdXRzaWRlQ2xpY2tIYW5kbGVyID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMSk7XG5cbnZhciBfT3V0c2lkZUNsaWNrSGFuZGxlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9PdXRzaWRlQ2xpY2tIYW5kbGVyKTtcblxudmFyIF90b01vbWVudE9iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMzIpO1xuXG52YXIgX3RvTW9tZW50T2JqZWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3RvTW9tZW50T2JqZWN0KTtcblxudmFyIF90b0xvY2FsaXplZERhdGVTdHJpbmcgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMxKTtcblxudmFyIF90b0xvY2FsaXplZERhdGVTdHJpbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdG9Mb2NhbGl6ZWREYXRlU3RyaW5nKTtcblxudmFyIF9nZXRSZXNwb25zaXZlQ29udGFpbmVyU3R5bGVzID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNyk7XG5cbnZhciBfZ2V0UmVzcG9uc2l2ZUNvbnRhaW5lclN0eWxlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRSZXNwb25zaXZlQ29udGFpbmVyU3R5bGVzKTtcblxudmFyIF90b0lTT0RhdGVTdHJpbmcgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEzKTtcblxudmFyIF90b0lTT0RhdGVTdHJpbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdG9JU09EYXRlU3RyaW5nKTtcblxudmFyIF9TaW5nbGVEYXRlUGlja2VySW5wdXQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDU4KTtcblxudmFyIF9TaW5nbGVEYXRlUGlja2VySW5wdXQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfU2luZ2xlRGF0ZVBpY2tlcklucHV0KTtcblxudmFyIF9EYXlQaWNrZXJTaW5nbGVEYXRlQ29udHJvbGxlciA9IF9fd2VicGFja19yZXF1aXJlX18oNTcpO1xuXG52YXIgX0RheVBpY2tlclNpbmdsZURhdGVDb250cm9sbGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0RheVBpY2tlclNpbmdsZURhdGVDb250cm9sbGVyKTtcblxudmFyIF9jbG9zZSA9IF9fd2VicGFja19yZXF1aXJlX18oMTEpO1xuXG52YXIgX2Nsb3NlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Nsb3NlKTtcblxudmFyIF9pc0luY2x1c2l2ZWx5QWZ0ZXJEYXkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE1KTtcblxudmFyIF9pc0luY2x1c2l2ZWx5QWZ0ZXJEYXkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaXNJbmNsdXNpdmVseUFmdGVyRGF5KTtcblxudmFyIF9jb25zdGFudHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikge1xuICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9O1xufVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7XG4gIGlmICghc2VsZikge1xuICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgfXJldHVybiBjYWxsICYmICgodHlwZW9mIGNhbGwgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihjYWxsKSkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjtcbn1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArICh0eXBlb2Ygc3VwZXJDbGFzcyA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKHN1cGVyQ2xhc3MpKSk7XG4gIH1zdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pO2lmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcbn1cblxudmFyIHByb3BUeXBlcyA9ICgwLCBfYWlyYm5iUHJvcFR5cGVzLmZvcmJpZEV4dHJhUHJvcHMpKF9TaW5nbGVEYXRlUGlja2VyU2hhcGUyWydkZWZhdWx0J10pO1xuXG52YXIgZGVmYXVsdFByb3BzID0ge1xuICAvLyByZXF1aXJlZCBwcm9wcyBmb3IgYSBmdW5jdGlvbmFsIGludGVyYWN0aXZlIFNpbmdsZURhdGVQaWNrZXJcbiAgZGF0ZTogbnVsbCxcbiAgZm9jdXNlZDogZmFsc2UsXG5cbiAgLy8gaW5wdXQgcmVsYXRlZCBwcm9wc1xuICBpZDogJ2RhdGUnLFxuICBwbGFjZWhvbGRlcjogJ0RhdGUnLFxuICBkaXNhYmxlZDogZmFsc2UsXG4gIHJlcXVpcmVkOiBmYWxzZSxcbiAgcmVhZE9ubHk6IGZhbHNlLFxuICBzY3JlZW5SZWFkZXJJbnB1dE1lc3NhZ2U6ICcnLFxuICBzaG93Q2xlYXJEYXRlOiBmYWxzZSxcbiAgc2hvd0RlZmF1bHRJbnB1dEljb246IGZhbHNlLFxuICBjdXN0b21JbnB1dEljb246IG51bGwsXG4gIGN1c3RvbUNsb3NlSWNvbjogbnVsbCxcblxuICAvLyBjYWxlbmRhciBwcmVzZW50YXRpb24gYW5kIGludGVyYWN0aW9uIHJlbGF0ZWQgcHJvcHNcbiAgb3JpZW50YXRpb246IF9jb25zdGFudHMuSE9SSVpPTlRBTF9PUklFTlRBVElPTixcbiAgYW5jaG9yRGlyZWN0aW9uOiBfY29uc3RhbnRzLkFOQ0hPUl9MRUZULFxuICBob3Jpem9udGFsTWFyZ2luOiAwLFxuICB3aXRoUG9ydGFsOiBmYWxzZSxcbiAgd2l0aEZ1bGxTY3JlZW5Qb3J0YWw6IGZhbHNlLFxuICBpbml0aWFsVmlzaWJsZU1vbnRoOiBudWxsLFxuICBmaXJzdERheU9mV2VlazogbnVsbCxcbiAgbnVtYmVyT2ZNb250aHM6IDIsXG4gIGtlZXBPcGVuT25EYXRlU2VsZWN0OiBmYWxzZSxcbiAgcmVvcGVuUGlja2VyT25DbGVhckRhdGU6IGZhbHNlLFxuICByZW5kZXJDYWxlbmRhckluZm86IG51bGwsXG4gIGhpZGVLZXlib2FyZFNob3J0Y3V0c1BhbmVsOiBmYWxzZSxcbiAgZGF5U2l6ZTogX2NvbnN0YW50cy5EQVlfU0laRSxcbiAgaXNSVEw6IGZhbHNlLFxuXG4gIC8vIG5hdmlnYXRpb24gcmVsYXRlZCBwcm9wc1xuICBuYXZQcmV2OiBudWxsLFxuICBuYXZOZXh0OiBudWxsLFxuXG4gIG9uUHJldk1vbnRoQ2xpY2s6IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBvblByZXZNb250aENsaWNrKCkge31cblxuICAgIHJldHVybiBvblByZXZNb250aENsaWNrO1xuICB9KCksXG4gIG9uTmV4dE1vbnRoQ2xpY2s6IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBvbk5leHRNb250aENsaWNrKCkge31cblxuICAgIHJldHVybiBvbk5leHRNb250aENsaWNrO1xuICB9KCksXG4gIG9uQ2xvc2U6IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBvbkNsb3NlKCkge31cblxuICAgIHJldHVybiBvbkNsb3NlO1xuICB9KCksXG5cbiAgLy8gbW9udGggcHJlc2VudGF0aW9uIGFuZCBpbnRlcmFjdGlvbiByZWxhdGVkIHByb3BzXG4gIHJlbmRlck1vbnRoOiBudWxsLFxuXG4gIC8vIGRheSBwcmVzZW50YXRpb24gYW5kIGludGVyYWN0aW9uIHJlbGF0ZWQgcHJvcHNcbiAgcmVuZGVyRGF5OiBudWxsLFxuICBlbmFibGVPdXRzaWRlRGF5czogZmFsc2UsXG4gIGlzRGF5QmxvY2tlZDogZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIGlzRGF5QmxvY2tlZCgpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gaXNEYXlCbG9ja2VkO1xuICB9KCksXG4gIGlzT3V0c2lkZVJhbmdlOiBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gaXNPdXRzaWRlUmFuZ2UoZGF5KSB7XG4gICAgICByZXR1cm4gISgwLCBfaXNJbmNsdXNpdmVseUFmdGVyRGF5MlsnZGVmYXVsdCddKShkYXksICgwLCBfbW9tZW50MlsnZGVmYXVsdCddKSgpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gaXNPdXRzaWRlUmFuZ2U7XG4gIH0oKSxcbiAgaXNEYXlIaWdobGlnaHRlZDogZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIGlzRGF5SGlnaGxpZ2h0ZWQoKSB7fVxuXG4gICAgcmV0dXJuIGlzRGF5SGlnaGxpZ2h0ZWQ7XG4gIH0oKSxcblxuICAvLyBpbnRlcm5hdGlvbmFsaXphdGlvbiBwcm9wc1xuICBkaXNwbGF5Rm9ybWF0OiBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gZGlzcGxheUZvcm1hdCgpIHtcbiAgICAgIHJldHVybiBfbW9tZW50MlsnZGVmYXVsdCddLmxvY2FsZURhdGEoKS5sb25nRGF0ZUZvcm1hdCgnTCcpO1xuICAgIH1cblxuICAgIHJldHVybiBkaXNwbGF5Rm9ybWF0O1xuICB9KCksXG4gIG1vbnRoRm9ybWF0OiAnTU1NTSBZWVlZJyxcbiAgcGhyYXNlczogX2RlZmF1bHRQaHJhc2VzLlNpbmdsZURhdGVQaWNrZXJQaHJhc2VzXG59O1xuXG52YXIgU2luZ2xlRGF0ZVBpY2tlciA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhTaW5nbGVEYXRlUGlja2VyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBTaW5nbGVEYXRlUGlja2VyKHByb3BzKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFNpbmdsZURhdGVQaWNrZXIpO1xuXG4gICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKFNpbmdsZURhdGVQaWNrZXIuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihTaW5nbGVEYXRlUGlja2VyKSkuY2FsbCh0aGlzLCBwcm9wcykpO1xuXG4gICAgX3RoaXMuaXNUb3VjaERldmljZSA9IGZhbHNlO1xuXG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBkYXlQaWNrZXJDb250YWluZXJTdHlsZXM6IHt9LFxuICAgICAgaXNEYXlQaWNrZXJGb2N1c2VkOiBmYWxzZSxcbiAgICAgIGlzSW5wdXRGb2N1c2VkOiBmYWxzZVxuICAgIH07XG5cbiAgICBfdGhpcy5vbkRheVBpY2tlckZvY3VzID0gX3RoaXMub25EYXlQaWNrZXJGb2N1cy5iaW5kKF90aGlzKTtcbiAgICBfdGhpcy5vbkRheVBpY2tlckJsdXIgPSBfdGhpcy5vbkRheVBpY2tlckJsdXIuYmluZChfdGhpcyk7XG5cbiAgICBfdGhpcy5vbkNoYW5nZSA9IF90aGlzLm9uQ2hhbmdlLmJpbmQoX3RoaXMpO1xuICAgIF90aGlzLm9uRm9jdXMgPSBfdGhpcy5vbkZvY3VzLmJpbmQoX3RoaXMpO1xuICAgIF90aGlzLm9uQ2xlYXJGb2N1cyA9IF90aGlzLm9uQ2xlYXJGb2N1cy5iaW5kKF90aGlzKTtcbiAgICBfdGhpcy5jbGVhckRhdGUgPSBfdGhpcy5jbGVhckRhdGUuYmluZChfdGhpcyk7XG5cbiAgICBfdGhpcy5yZXNwb25zaXZpemVQaWNrZXJQb3NpdGlvbiA9IF90aGlzLnJlc3BvbnNpdml6ZVBpY2tlclBvc2l0aW9uLmJpbmQoX3RoaXMpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5cbiAgX2NyZWF0ZUNsYXNzKFNpbmdsZURhdGVQaWNrZXIsIFt7XG4gICAga2V5OiAnY29tcG9uZW50RGlkTW91bnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgICAgdGhpcy5yZXNpemVIYW5kbGUgPSAoMCwgX2NvbnNvbGlkYXRlZEV2ZW50cy5hZGRFdmVudExpc3RlbmVyKSh3aW5kb3csICdyZXNpemUnLCB0aGlzLnJlc3BvbnNpdml6ZVBpY2tlclBvc2l0aW9uLCB7IHBhc3NpdmU6IHRydWUgfSk7XG4gICAgICAgIHRoaXMucmVzcG9uc2l2aXplUGlja2VyUG9zaXRpb24oKTtcblxuICAgICAgICBpZiAodGhpcy5wcm9wcy5mb2N1c2VkKSB7XG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBpc0lucHV0Rm9jdXNlZDogdHJ1ZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5pc1RvdWNoRGV2aWNlID0gKDAsIF9pc1RvdWNoRGV2aWNlMlsnZGVmYXVsdCddKSgpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29tcG9uZW50RGlkTW91bnQ7XG4gICAgfSgpXG4gIH0sIHtcbiAgICBrZXk6ICdjb21wb25lbnREaWRVcGRhdGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgICAgIGlmICghcHJldlByb3BzLmZvY3VzZWQgJiYgdGhpcy5wcm9wcy5mb2N1c2VkKSB7XG4gICAgICAgICAgdGhpcy5yZXNwb25zaXZpemVQaWNrZXJQb3NpdGlvbigpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb21wb25lbnREaWRVcGRhdGU7XG4gICAgfSgpXG5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdjb21wb25lbnRXaWxsVW5tb3VudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgICAoMCwgX2NvbnNvbGlkYXRlZEV2ZW50cy5yZW1vdmVFdmVudExpc3RlbmVyKSh0aGlzLnJlc2l6ZUhhbmRsZSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb21wb25lbnRXaWxsVW5tb3VudDtcbiAgICB9KClcbiAgfSwge1xuICAgIGtleTogJ29uQ2hhbmdlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gb25DaGFuZ2UoZGF0ZVN0cmluZykge1xuICAgICAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICAgIGlzT3V0c2lkZVJhbmdlID0gX3Byb3BzLmlzT3V0c2lkZVJhbmdlLFxuICAgICAgICAgICAga2VlcE9wZW5PbkRhdGVTZWxlY3QgPSBfcHJvcHMua2VlcE9wZW5PbkRhdGVTZWxlY3QsXG4gICAgICAgICAgICBvbkRhdGVDaGFuZ2UgPSBfcHJvcHMub25EYXRlQ2hhbmdlLFxuICAgICAgICAgICAgb25Gb2N1c0NoYW5nZSA9IF9wcm9wcy5vbkZvY3VzQ2hhbmdlLFxuICAgICAgICAgICAgb25DbG9zZSA9IF9wcm9wcy5vbkNsb3NlO1xuXG4gICAgICAgIHZhciBuZXdEYXRlID0gKDAsIF90b01vbWVudE9iamVjdDJbJ2RlZmF1bHQnXSkoZGF0ZVN0cmluZywgdGhpcy5nZXREaXNwbGF5Rm9ybWF0KCkpO1xuXG4gICAgICAgIHZhciBpc1ZhbGlkID0gbmV3RGF0ZSAmJiAhaXNPdXRzaWRlUmFuZ2UobmV3RGF0ZSk7XG4gICAgICAgIGlmIChpc1ZhbGlkKSB7XG4gICAgICAgICAgb25EYXRlQ2hhbmdlKG5ld0RhdGUpO1xuICAgICAgICAgIGlmICgha2VlcE9wZW5PbkRhdGVTZWxlY3QpIHtcbiAgICAgICAgICAgIG9uRm9jdXNDaGFuZ2UoeyBmb2N1c2VkOiBmYWxzZSB9KTtcbiAgICAgICAgICAgIG9uQ2xvc2UoeyBkYXRlOiBuZXdEYXRlIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvbkRhdGVDaGFuZ2UobnVsbCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG9uQ2hhbmdlO1xuICAgIH0oKVxuICB9LCB7XG4gICAga2V5OiAnb25Gb2N1cycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIG9uRm9jdXMoKSB7XG4gICAgICAgIHZhciBfcHJvcHMyID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICAgIGRpc2FibGVkID0gX3Byb3BzMi5kaXNhYmxlZCxcbiAgICAgICAgICAgIG9uRm9jdXNDaGFuZ2UgPSBfcHJvcHMyLm9uRm9jdXNDaGFuZ2UsXG4gICAgICAgICAgICB3aXRoUG9ydGFsID0gX3Byb3BzMi53aXRoUG9ydGFsLFxuICAgICAgICAgICAgd2l0aEZ1bGxTY3JlZW5Qb3J0YWwgPSBfcHJvcHMyLndpdGhGdWxsU2NyZWVuUG9ydGFsO1xuXG4gICAgICAgIHZhciBtb3ZlRm9jdXNUb0RheVBpY2tlciA9IHdpdGhQb3J0YWwgfHwgd2l0aEZ1bGxTY3JlZW5Qb3J0YWwgfHwgdGhpcy5pc1RvdWNoRGV2aWNlO1xuICAgICAgICBpZiAobW92ZUZvY3VzVG9EYXlQaWNrZXIpIHtcbiAgICAgICAgICB0aGlzLm9uRGF5UGlja2VyRm9jdXMoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLm9uRGF5UGlja2VyQmx1cigpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFkaXNhYmxlZCkge1xuICAgICAgICAgIG9uRm9jdXNDaGFuZ2UoeyBmb2N1c2VkOiB0cnVlIH0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBvbkZvY3VzO1xuICAgIH0oKVxuICB9LCB7XG4gICAga2V5OiAnb25DbGVhckZvY3VzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gb25DbGVhckZvY3VzKCkge1xuICAgICAgICB2YXIgX3Byb3BzMyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgICBzdGFydERhdGUgPSBfcHJvcHMzLnN0YXJ0RGF0ZSxcbiAgICAgICAgICAgIGVuZERhdGUgPSBfcHJvcHMzLmVuZERhdGUsXG4gICAgICAgICAgICBmb2N1c2VkID0gX3Byb3BzMy5mb2N1c2VkLFxuICAgICAgICAgICAgb25Gb2N1c0NoYW5nZSA9IF9wcm9wczMub25Gb2N1c0NoYW5nZSxcbiAgICAgICAgICAgIG9uQ2xvc2UgPSBfcHJvcHMzLm9uQ2xvc2U7XG5cbiAgICAgICAgaWYgKCFmb2N1c2VkKSByZXR1cm47XG5cbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgaXNJbnB1dEZvY3VzZWQ6IGZhbHNlLFxuICAgICAgICAgIGlzRGF5UGlja2VyRm9jdXNlZDogZmFsc2VcbiAgICAgICAgfSk7XG5cbiAgICAgICAgb25Gb2N1c0NoYW5nZSh7IGZvY3VzZWQ6IGZhbHNlIH0pO1xuICAgICAgICBvbkNsb3NlKHsgc3RhcnREYXRlOiBzdGFydERhdGUsIGVuZERhdGU6IGVuZERhdGUgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBvbkNsZWFyRm9jdXM7XG4gICAgfSgpXG4gIH0sIHtcbiAgICBrZXk6ICdvbkRheVBpY2tlckZvY3VzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gb25EYXlQaWNrZXJGb2N1cygpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgaXNJbnB1dEZvY3VzZWQ6IGZhbHNlLFxuICAgICAgICAgIGlzRGF5UGlja2VyRm9jdXNlZDogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG9uRGF5UGlja2VyRm9jdXM7XG4gICAgfSgpXG4gIH0sIHtcbiAgICBrZXk6ICdvbkRheVBpY2tlckJsdXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBvbkRheVBpY2tlckJsdXIoKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIGlzSW5wdXRGb2N1c2VkOiB0cnVlLFxuICAgICAgICAgIGlzRGF5UGlja2VyRm9jdXNlZDogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBvbkRheVBpY2tlckJsdXI7XG4gICAgfSgpXG4gIH0sIHtcbiAgICBrZXk6ICdnZXREYXRlU3RyaW5nJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gZ2V0RGF0ZVN0cmluZyhkYXRlKSB7XG4gICAgICAgIHZhciBkaXNwbGF5Rm9ybWF0ID0gdGhpcy5nZXREaXNwbGF5Rm9ybWF0KCk7XG4gICAgICAgIGlmIChkYXRlICYmIGRpc3BsYXlGb3JtYXQpIHtcbiAgICAgICAgICByZXR1cm4gZGF0ZSAmJiBkYXRlLmZvcm1hdChkaXNwbGF5Rm9ybWF0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKDAsIF90b0xvY2FsaXplZERhdGVTdHJpbmcyWydkZWZhdWx0J10pKGRhdGUpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZ2V0RGF0ZVN0cmluZztcbiAgICB9KClcbiAgfSwge1xuICAgIGtleTogJ2dldERheVBpY2tlckNvbnRhaW5lckNsYXNzZXMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBnZXREYXlQaWNrZXJDb250YWluZXJDbGFzc2VzKCkge1xuICAgICAgICB2YXIgX3Byb3BzNCA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgICBvcmllbnRhdGlvbiA9IF9wcm9wczQub3JpZW50YXRpb24sXG4gICAgICAgICAgICB3aXRoUG9ydGFsID0gX3Byb3BzNC53aXRoUG9ydGFsLFxuICAgICAgICAgICAgd2l0aEZ1bGxTY3JlZW5Qb3J0YWwgPSBfcHJvcHM0LndpdGhGdWxsU2NyZWVuUG9ydGFsLFxuICAgICAgICAgICAgYW5jaG9yRGlyZWN0aW9uID0gX3Byb3BzNC5hbmNob3JEaXJlY3Rpb24sXG4gICAgICAgICAgICBpc1JUTCA9IF9wcm9wczQuaXNSVEw7XG5cbiAgICAgICAgdmFyIGRheVBpY2tlckNsYXNzTmFtZSA9ICgwLCBfY2xhc3NuYW1lczJbJ2RlZmF1bHQnXSkoJ1NpbmdsZURhdGVQaWNrZXJfX3BpY2tlcicsIHtcbiAgICAgICAgICAnU2luZ2xlRGF0ZVBpY2tlcl9fcGlja2VyLS1kaXJlY3Rpb24tbGVmdCc6IGFuY2hvckRpcmVjdGlvbiA9PT0gX2NvbnN0YW50cy5BTkNIT1JfTEVGVCxcbiAgICAgICAgICAnU2luZ2xlRGF0ZVBpY2tlcl9fcGlja2VyLS1kaXJlY3Rpb24tcmlnaHQnOiBhbmNob3JEaXJlY3Rpb24gPT09IF9jb25zdGFudHMuQU5DSE9SX1JJR0hULFxuICAgICAgICAgICdTaW5nbGVEYXRlUGlja2VyX19waWNrZXItLWhvcml6b250YWwnOiBvcmllbnRhdGlvbiA9PT0gX2NvbnN0YW50cy5IT1JJWk9OVEFMX09SSUVOVEFUSU9OLFxuICAgICAgICAgICdTaW5nbGVEYXRlUGlja2VyX19waWNrZXItLXZlcnRpY2FsJzogb3JpZW50YXRpb24gPT09IF9jb25zdGFudHMuVkVSVElDQUxfT1JJRU5UQVRJT04sXG4gICAgICAgICAgJ1NpbmdsZURhdGVQaWNrZXJfX3BpY2tlci0tcG9ydGFsJzogd2l0aFBvcnRhbCB8fCB3aXRoRnVsbFNjcmVlblBvcnRhbCxcbiAgICAgICAgICAnU2luZ2xlRGF0ZVBpY2tlcl9fcGlja2VyLS1mdWxsLXNjcmVlbi1wb3J0YWwnOiB3aXRoRnVsbFNjcmVlblBvcnRhbCxcbiAgICAgICAgICAnU2luZ2xlRGF0ZVBpY2tlcl9fcGlja2VyLS1ydGwnOiBpc1JUTFxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gZGF5UGlja2VyQ2xhc3NOYW1lO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZ2V0RGF5UGlja2VyQ29udGFpbmVyQ2xhc3NlcztcbiAgICB9KClcbiAgfSwge1xuICAgIGtleTogJ2dldERpc3BsYXlGb3JtYXQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBnZXREaXNwbGF5Rm9ybWF0KCkge1xuICAgICAgICB2YXIgZGlzcGxheUZvcm1hdCA9IHRoaXMucHJvcHMuZGlzcGxheUZvcm1hdDtcblxuICAgICAgICByZXR1cm4gdHlwZW9mIGRpc3BsYXlGb3JtYXQgPT09ICdzdHJpbmcnID8gZGlzcGxheUZvcm1hdCA6IGRpc3BsYXlGb3JtYXQoKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGdldERpc3BsYXlGb3JtYXQ7XG4gICAgfSgpXG4gIH0sIHtcbiAgICBrZXk6ICdjbGVhckRhdGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBjbGVhckRhdGUoKSB7XG4gICAgICAgIHZhciBfcHJvcHM1ID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICAgIG9uRGF0ZUNoYW5nZSA9IF9wcm9wczUub25EYXRlQ2hhbmdlLFxuICAgICAgICAgICAgcmVvcGVuUGlja2VyT25DbGVhckRhdGUgPSBfcHJvcHM1LnJlb3BlblBpY2tlck9uQ2xlYXJEYXRlLFxuICAgICAgICAgICAgb25Gb2N1c0NoYW5nZSA9IF9wcm9wczUub25Gb2N1c0NoYW5nZTtcblxuICAgICAgICBvbkRhdGVDaGFuZ2UobnVsbCk7XG4gICAgICAgIGlmIChyZW9wZW5QaWNrZXJPbkNsZWFyRGF0ZSkge1xuICAgICAgICAgIG9uRm9jdXNDaGFuZ2UoeyBmb2N1c2VkOiB0cnVlIH0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjbGVhckRhdGU7XG4gICAgfSgpXG5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdyZXNwb25zaXZpemVQaWNrZXJQb3NpdGlvbicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIHJlc3BvbnNpdml6ZVBpY2tlclBvc2l0aW9uKCkge1xuICAgICAgICB2YXIgX3Byb3BzNiA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgICBhbmNob3JEaXJlY3Rpb24gPSBfcHJvcHM2LmFuY2hvckRpcmVjdGlvbixcbiAgICAgICAgICAgIGhvcml6b250YWxNYXJnaW4gPSBfcHJvcHM2Lmhvcml6b250YWxNYXJnaW4sXG4gICAgICAgICAgICB3aXRoUG9ydGFsID0gX3Byb3BzNi53aXRoUG9ydGFsLFxuICAgICAgICAgICAgd2l0aEZ1bGxTY3JlZW5Qb3J0YWwgPSBfcHJvcHM2LndpdGhGdWxsU2NyZWVuUG9ydGFsLFxuICAgICAgICAgICAgZm9jdXNlZCA9IF9wcm9wczYuZm9jdXNlZDtcbiAgICAgICAgdmFyIGRheVBpY2tlckNvbnRhaW5lclN0eWxlcyA9IHRoaXMuc3RhdGUuZGF5UGlja2VyQ29udGFpbmVyU3R5bGVzO1xuXG4gICAgICAgIGlmICghZm9jdXNlZCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBpc0FuY2hvcmVkTGVmdCA9IGFuY2hvckRpcmVjdGlvbiA9PT0gX2NvbnN0YW50cy5BTkNIT1JfTEVGVDtcblxuICAgICAgICBpZiAoIXdpdGhQb3J0YWwgJiYgIXdpdGhGdWxsU2NyZWVuUG9ydGFsKSB7XG4gICAgICAgICAgdmFyIGNvbnRhaW5lclJlY3QgPSB0aGlzLmRheVBpY2tlckNvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICB2YXIgY3VycmVudE9mZnNldCA9IGRheVBpY2tlckNvbnRhaW5lclN0eWxlc1thbmNob3JEaXJlY3Rpb25dIHx8IDA7XG4gICAgICAgICAgdmFyIGNvbnRhaW5lckVkZ2UgPSBpc0FuY2hvcmVkTGVmdCA/IGNvbnRhaW5lclJlY3RbX2NvbnN0YW50cy5BTkNIT1JfUklHSFRdIDogY29udGFpbmVyUmVjdFtfY29uc3RhbnRzLkFOQ0hPUl9MRUZUXTtcblxuICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgZGF5UGlja2VyQ29udGFpbmVyU3R5bGVzOiAoMCwgX2dldFJlc3BvbnNpdmVDb250YWluZXJTdHlsZXMyWydkZWZhdWx0J10pKGFuY2hvckRpcmVjdGlvbiwgY3VycmVudE9mZnNldCwgY29udGFpbmVyRWRnZSwgaG9yaXpvbnRhbE1hcmdpbilcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVzcG9uc2l2aXplUGlja2VyUG9zaXRpb247XG4gICAgfSgpXG4gIH0sIHtcbiAgICBrZXk6ICdtYXliZVJlbmRlckRheVBpY2tlcldpdGhQb3J0YWwnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBtYXliZVJlbmRlckRheVBpY2tlcldpdGhQb3J0YWwoKSB7XG4gICAgICAgIHZhciBfcHJvcHM3ID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICAgIGZvY3VzZWQgPSBfcHJvcHM3LmZvY3VzZWQsXG4gICAgICAgICAgICB3aXRoUG9ydGFsID0gX3Byb3BzNy53aXRoUG9ydGFsLFxuICAgICAgICAgICAgd2l0aEZ1bGxTY3JlZW5Qb3J0YWwgPSBfcHJvcHM3LndpdGhGdWxsU2NyZWVuUG9ydGFsO1xuXG4gICAgICAgIGlmICghZm9jdXNlZCkge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHdpdGhQb3J0YWwgfHwgd2l0aEZ1bGxTY3JlZW5Qb3J0YWwpIHtcbiAgICAgICAgICByZXR1cm4gX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoX3JlYWN0UG9ydGFsMlsnZGVmYXVsdCddLCB7IGlzT3BlbmVkOiB0cnVlIH0sIHRoaXMucmVuZGVyRGF5UGlja2VyKCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMucmVuZGVyRGF5UGlja2VyKCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBtYXliZVJlbmRlckRheVBpY2tlcldpdGhQb3J0YWw7XG4gICAgfSgpXG4gIH0sIHtcbiAgICBrZXk6ICdyZW5kZXJEYXlQaWNrZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiByZW5kZXJEYXlQaWNrZXIoKSB7XG4gICAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICAgIHZhciBfcHJvcHM4ID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICAgIG9uRGF0ZUNoYW5nZSA9IF9wcm9wczgub25EYXRlQ2hhbmdlLFxuICAgICAgICAgICAgZGF0ZSA9IF9wcm9wczguZGF0ZSxcbiAgICAgICAgICAgIG9uRm9jdXNDaGFuZ2UgPSBfcHJvcHM4Lm9uRm9jdXNDaGFuZ2UsXG4gICAgICAgICAgICBmb2N1c2VkID0gX3Byb3BzOC5mb2N1c2VkLFxuICAgICAgICAgICAgZW5hYmxlT3V0c2lkZURheXMgPSBfcHJvcHM4LmVuYWJsZU91dHNpZGVEYXlzLFxuICAgICAgICAgICAgbnVtYmVyT2ZNb250aHMgPSBfcHJvcHM4Lm51bWJlck9mTW9udGhzLFxuICAgICAgICAgICAgb3JpZW50YXRpb24gPSBfcHJvcHM4Lm9yaWVudGF0aW9uLFxuICAgICAgICAgICAgbW9udGhGb3JtYXQgPSBfcHJvcHM4Lm1vbnRoRm9ybWF0LFxuICAgICAgICAgICAgbmF2UHJldiA9IF9wcm9wczgubmF2UHJldixcbiAgICAgICAgICAgIG5hdk5leHQgPSBfcHJvcHM4Lm5hdk5leHQsXG4gICAgICAgICAgICB3aXRoUG9ydGFsID0gX3Byb3BzOC53aXRoUG9ydGFsLFxuICAgICAgICAgICAgd2l0aEZ1bGxTY3JlZW5Qb3J0YWwgPSBfcHJvcHM4LndpdGhGdWxsU2NyZWVuUG9ydGFsLFxuICAgICAgICAgICAga2VlcE9wZW5PbkRhdGVTZWxlY3QgPSBfcHJvcHM4LmtlZXBPcGVuT25EYXRlU2VsZWN0LFxuICAgICAgICAgICAgaW5pdGlhbFZpc2libGVNb250aCA9IF9wcm9wczguaW5pdGlhbFZpc2libGVNb250aCxcbiAgICAgICAgICAgIHJlbmRlck1vbnRoID0gX3Byb3BzOC5yZW5kZXJNb250aCxcbiAgICAgICAgICAgIHJlbmRlckRheSA9IF9wcm9wczgucmVuZGVyRGF5LFxuICAgICAgICAgICAgcmVuZGVyQ2FsZW5kYXJJbmZvID0gX3Byb3BzOC5yZW5kZXJDYWxlbmRhckluZm8sXG4gICAgICAgICAgICBoaWRlS2V5Ym9hcmRTaG9ydGN1dHNQYW5lbCA9IF9wcm9wczguaGlkZUtleWJvYXJkU2hvcnRjdXRzUGFuZWwsXG4gICAgICAgICAgICBmaXJzdERheU9mV2VlayA9IF9wcm9wczguZmlyc3REYXlPZldlZWssXG4gICAgICAgICAgICBjdXN0b21DbG9zZUljb24gPSBfcHJvcHM4LmN1c3RvbUNsb3NlSWNvbixcbiAgICAgICAgICAgIHBocmFzZXMgPSBfcHJvcHM4LnBocmFzZXMsXG4gICAgICAgICAgICBkYXlTaXplID0gX3Byb3BzOC5kYXlTaXplLFxuICAgICAgICAgICAgaXNSVEwgPSBfcHJvcHM4LmlzUlRMLFxuICAgICAgICAgICAgaXNPdXRzaWRlUmFuZ2UgPSBfcHJvcHM4LmlzT3V0c2lkZVJhbmdlLFxuICAgICAgICAgICAgaXNEYXlCbG9ja2VkID0gX3Byb3BzOC5pc0RheUJsb2NrZWQsXG4gICAgICAgICAgICBpc0RheUhpZ2hsaWdodGVkID0gX3Byb3BzOC5pc0RheUhpZ2hsaWdodGVkO1xuICAgICAgICB2YXIgX3N0YXRlID0gdGhpcy5zdGF0ZSxcbiAgICAgICAgICAgIGRheVBpY2tlckNvbnRhaW5lclN0eWxlcyA9IF9zdGF0ZS5kYXlQaWNrZXJDb250YWluZXJTdHlsZXMsXG4gICAgICAgICAgICBpc0RheVBpY2tlckZvY3VzZWQgPSBfc3RhdGUuaXNEYXlQaWNrZXJGb2N1c2VkO1xuXG4gICAgICAgIHZhciBvbk91dHNpZGVDbGljayA9ICF3aXRoRnVsbFNjcmVlblBvcnRhbCAmJiB3aXRoUG9ydGFsID8gdGhpcy5vbkNsZWFyRm9jdXMgOiB1bmRlZmluZWQ7XG4gICAgICAgIHZhciBjbG9zZUljb24gPSBjdXN0b21DbG9zZUljb24gfHwgX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoX2Nsb3NlMlsnZGVmYXVsdCddLCBudWxsKTtcblxuICAgICAgICByZXR1cm4gX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBqc3gtYTExeS9uby1zdGF0aWMtZWxlbWVudC1pbnRlcmFjdGlvbnNcbiAgICAgICAgICByZWY6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGZ1bmN0aW9uIHJlZihfcmVmKSB7XG4gICAgICAgICAgICAgIF90aGlzMi5kYXlQaWNrZXJDb250YWluZXIgPSBfcmVmO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gcmVmO1xuICAgICAgICAgIH0oKSxcbiAgICAgICAgICBjbGFzc05hbWU6IHRoaXMuZ2V0RGF5UGlja2VyQ29udGFpbmVyQ2xhc3NlcygpLFxuICAgICAgICAgIHN0eWxlOiBkYXlQaWNrZXJDb250YWluZXJTdHlsZXMsXG4gICAgICAgICAgb25DbGljazogb25PdXRzaWRlQ2xpY2tcbiAgICAgICAgfSwgX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoX0RheVBpY2tlclNpbmdsZURhdGVDb250cm9sbGVyMlsnZGVmYXVsdCddLCB7XG4gICAgICAgICAgZGF0ZTogZGF0ZSxcbiAgICAgICAgICBvbkRhdGVDaGFuZ2U6IG9uRGF0ZUNoYW5nZSxcbiAgICAgICAgICBvbkZvY3VzQ2hhbmdlOiBvbkZvY3VzQ2hhbmdlLFxuICAgICAgICAgIG9yaWVudGF0aW9uOiBvcmllbnRhdGlvbixcbiAgICAgICAgICBlbmFibGVPdXRzaWRlRGF5czogZW5hYmxlT3V0c2lkZURheXMsXG4gICAgICAgICAgbnVtYmVyT2ZNb250aHM6IG51bWJlck9mTW9udGhzLFxuICAgICAgICAgIG1vbnRoRm9ybWF0OiBtb250aEZvcm1hdCxcbiAgICAgICAgICB3aXRoUG9ydGFsOiB3aXRoUG9ydGFsIHx8IHdpdGhGdWxsU2NyZWVuUG9ydGFsLFxuICAgICAgICAgIGZvY3VzZWQ6IGZvY3VzZWQsXG4gICAgICAgICAga2VlcE9wZW5PbkRhdGVTZWxlY3Q6IGtlZXBPcGVuT25EYXRlU2VsZWN0LFxuICAgICAgICAgIGhpZGVLZXlib2FyZFNob3J0Y3V0c1BhbmVsOiBoaWRlS2V5Ym9hcmRTaG9ydGN1dHNQYW5lbCxcbiAgICAgICAgICBpbml0aWFsVmlzaWJsZU1vbnRoOiBpbml0aWFsVmlzaWJsZU1vbnRoLFxuICAgICAgICAgIG5hdlByZXY6IG5hdlByZXYsXG4gICAgICAgICAgbmF2TmV4dDogbmF2TmV4dCxcbiAgICAgICAgICByZW5kZXJNb250aDogcmVuZGVyTW9udGgsXG4gICAgICAgICAgcmVuZGVyRGF5OiByZW5kZXJEYXksXG4gICAgICAgICAgcmVuZGVyQ2FsZW5kYXJJbmZvOiByZW5kZXJDYWxlbmRhckluZm8sXG4gICAgICAgICAgaXNGb2N1c2VkOiBpc0RheVBpY2tlckZvY3VzZWQsXG4gICAgICAgICAgcGhyYXNlczogcGhyYXNlcyxcbiAgICAgICAgICBkYXlTaXplOiBkYXlTaXplLFxuICAgICAgICAgIGlzUlRMOiBpc1JUTCxcbiAgICAgICAgICBpc091dHNpZGVSYW5nZTogaXNPdXRzaWRlUmFuZ2UsXG4gICAgICAgICAgaXNEYXlCbG9ja2VkOiBpc0RheUJsb2NrZWQsXG4gICAgICAgICAgaXNEYXlIaWdobGlnaHRlZDogaXNEYXlIaWdobGlnaHRlZCxcbiAgICAgICAgICBmaXJzdERheU9mV2VlazogZmlyc3REYXlPZldlZWtcbiAgICAgICAgfSksIHdpdGhGdWxsU2NyZWVuUG9ydGFsICYmIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KCdidXR0b24nLCB7XG4gICAgICAgICAgJ2FyaWEtbGFiZWwnOiBwaHJhc2VzLmNsb3NlRGF0ZVBpY2tlcixcbiAgICAgICAgICBjbGFzc05hbWU6ICdTaW5nbGVEYXRlUGlja2VyX19jbG9zZScsXG4gICAgICAgICAgdHlwZTogJ2J1dHRvbicsXG4gICAgICAgICAgb25DbGljazogdGhpcy5vbkNsZWFyRm9jdXNcbiAgICAgICAgfSwgX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiAnU2luZ2xlRGF0ZVBpY2tlcl9fY2xvc2UtaWNvbicgfSwgY2xvc2VJY29uKSkpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVuZGVyRGF5UGlja2VyO1xuICAgIH0oKVxuICB9LCB7XG4gICAga2V5OiAncmVuZGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICB2YXIgX3Byb3BzOSA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgICBpZCA9IF9wcm9wczkuaWQsXG4gICAgICAgICAgICBwbGFjZWhvbGRlciA9IF9wcm9wczkucGxhY2Vob2xkZXIsXG4gICAgICAgICAgICBkaXNhYmxlZCA9IF9wcm9wczkuZGlzYWJsZWQsXG4gICAgICAgICAgICBmb2N1c2VkID0gX3Byb3BzOS5mb2N1c2VkLFxuICAgICAgICAgICAgcmVxdWlyZWQgPSBfcHJvcHM5LnJlcXVpcmVkLFxuICAgICAgICAgICAgcmVhZE9ubHkgPSBfcHJvcHM5LnJlYWRPbmx5LFxuICAgICAgICAgICAgc2hvd0NsZWFyRGF0ZSA9IF9wcm9wczkuc2hvd0NsZWFyRGF0ZSxcbiAgICAgICAgICAgIHNob3dEZWZhdWx0SW5wdXRJY29uID0gX3Byb3BzOS5zaG93RGVmYXVsdElucHV0SWNvbixcbiAgICAgICAgICAgIGN1c3RvbUlucHV0SWNvbiA9IF9wcm9wczkuY3VzdG9tSW5wdXRJY29uLFxuICAgICAgICAgICAgZGF0ZSA9IF9wcm9wczkuZGF0ZSxcbiAgICAgICAgICAgIHBocmFzZXMgPSBfcHJvcHM5LnBocmFzZXMsXG4gICAgICAgICAgICB3aXRoUG9ydGFsID0gX3Byb3BzOS53aXRoUG9ydGFsLFxuICAgICAgICAgICAgd2l0aEZ1bGxTY3JlZW5Qb3J0YWwgPSBfcHJvcHM5LndpdGhGdWxsU2NyZWVuUG9ydGFsLFxuICAgICAgICAgICAgc2NyZWVuUmVhZGVySW5wdXRNZXNzYWdlID0gX3Byb3BzOS5zY3JlZW5SZWFkZXJJbnB1dE1lc3NhZ2UsXG4gICAgICAgICAgICBpc1JUTCA9IF9wcm9wczkuaXNSVEw7XG4gICAgICAgIHZhciBpc0lucHV0Rm9jdXNlZCA9IHRoaXMuc3RhdGUuaXNJbnB1dEZvY3VzZWQ7XG5cbiAgICAgICAgdmFyIGRpc3BsYXlWYWx1ZSA9IHRoaXMuZ2V0RGF0ZVN0cmluZyhkYXRlKTtcbiAgICAgICAgdmFyIGlucHV0VmFsdWUgPSAoMCwgX3RvSVNPRGF0ZVN0cmluZzJbJ2RlZmF1bHQnXSkoZGF0ZSk7XG5cbiAgICAgICAgdmFyIG9uT3V0c2lkZUNsaWNrID0gIXdpdGhQb3J0YWwgJiYgIXdpdGhGdWxsU2NyZWVuUG9ydGFsID8gdGhpcy5vbkNsZWFyRm9jdXMgOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgcmV0dXJuIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogJ1NpbmdsZURhdGVQaWNrZXInIH0sIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KF9PdXRzaWRlQ2xpY2tIYW5kbGVyMlsnZGVmYXVsdCddLCB7IG9uT3V0c2lkZUNsaWNrOiBvbk91dHNpZGVDbGljayB9LCBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChfU2luZ2xlRGF0ZVBpY2tlcklucHV0MlsnZGVmYXVsdCddLCB7XG4gICAgICAgICAgaWQ6IGlkLFxuICAgICAgICAgIHBsYWNlaG9sZGVyOiBwbGFjZWhvbGRlcixcbiAgICAgICAgICBmb2N1c2VkOiBmb2N1c2VkLFxuICAgICAgICAgIGlzRm9jdXNlZDogaXNJbnB1dEZvY3VzZWQsXG4gICAgICAgICAgZGlzYWJsZWQ6IGRpc2FibGVkLFxuICAgICAgICAgIHJlcXVpcmVkOiByZXF1aXJlZCxcbiAgICAgICAgICByZWFkT25seTogcmVhZE9ubHksXG4gICAgICAgICAgc2hvd0NhcmV0OiAhd2l0aFBvcnRhbCAmJiAhd2l0aEZ1bGxTY3JlZW5Qb3J0YWwsXG4gICAgICAgICAgb25DbGVhckRhdGU6IHRoaXMuY2xlYXJEYXRlLFxuICAgICAgICAgIHNob3dDbGVhckRhdGU6IHNob3dDbGVhckRhdGUsXG4gICAgICAgICAgc2hvd0RlZmF1bHRJbnB1dEljb246IHNob3dEZWZhdWx0SW5wdXRJY29uLFxuICAgICAgICAgIGN1c3RvbUlucHV0SWNvbjogY3VzdG9tSW5wdXRJY29uLFxuICAgICAgICAgIGRpc3BsYXlWYWx1ZTogZGlzcGxheVZhbHVlLFxuICAgICAgICAgIGlucHV0VmFsdWU6IGlucHV0VmFsdWUsXG4gICAgICAgICAgb25DaGFuZ2U6IHRoaXMub25DaGFuZ2UsXG4gICAgICAgICAgb25Gb2N1czogdGhpcy5vbkZvY3VzLFxuICAgICAgICAgIG9uS2V5RG93blNoaWZ0VGFiOiB0aGlzLm9uQ2xlYXJGb2N1cyxcbiAgICAgICAgICBvbktleURvd25UYWI6IHRoaXMub25DbGVhckZvY3VzLFxuICAgICAgICAgIG9uS2V5RG93bkFycm93RG93bjogdGhpcy5vbkRheVBpY2tlckZvY3VzLFxuICAgICAgICAgIHNjcmVlblJlYWRlck1lc3NhZ2U6IHNjcmVlblJlYWRlcklucHV0TWVzc2FnZSxcbiAgICAgICAgICBwaHJhc2VzOiBwaHJhc2VzLFxuICAgICAgICAgIGlzUlRMOiBpc1JUTFxuICAgICAgICB9KSwgdGhpcy5tYXliZVJlbmRlckRheVBpY2tlcldpdGhQb3J0YWwoKSkpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVuZGVyO1xuICAgIH0oKVxuICB9XSk7XG5cbiAgcmV0dXJuIFNpbmdsZURhdGVQaWNrZXI7XG59KF9yZWFjdDJbJ2RlZmF1bHQnXS5Db21wb25lbnQpO1xuXG5leHBvcnRzWydkZWZhdWx0J10gPSBTaW5nbGVEYXRlUGlja2VyO1xuXG5TaW5nbGVEYXRlUGlja2VyLnByb3BUeXBlcyA9IHByb3BUeXBlcztcblNpbmdsZURhdGVQaWNrZXIuZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gOTpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiaXMtdG91Y2gtZGV2aWNlXCIpO1xuXG4vKioqLyB9KVxuXG4vKioqKioqLyB9KTsiLCJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1snZGVmYXVsdCddID0gaXNJbmNsdXNpdmVseUJlZm9yZURheTtcblxudmFyIF9tb21lbnQgPSByZXF1aXJlKCdtb21lbnQnKTtcblxudmFyIF9tb21lbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfbW9tZW50KTtcblxudmFyIF9pc0FmdGVyRGF5ID0gcmVxdWlyZSgnLi9pc0FmdGVyRGF5Jyk7XG5cbnZhciBfaXNBZnRlckRheTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pc0FmdGVyRGF5KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG5mdW5jdGlvbiBpc0luY2x1c2l2ZWx5QmVmb3JlRGF5KGEsIGIpIHtcbiAgaWYgKCFfbW9tZW50MlsnZGVmYXVsdCddLmlzTW9tZW50KGEpIHx8ICFfbW9tZW50MlsnZGVmYXVsdCddLmlzTW9tZW50KGIpKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiAhKDAsIF9pc0FmdGVyRGF5MlsnZGVmYXVsdCddKShhLCBiKTtcbn0iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgRXhwZW5zZUZvcm0gZnJvbSAnLi9FeHBlbnNlRm9ybSc7XHJcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XHJcbmltcG9ydCB7IGFkZEV4cGVuc2UgfSBmcm9tICcuLi9hY3Rpb25zL2V4cGVuc2VzJztcclxuXHJcbmV4cG9ydCBjbGFzcyBBZGRFeHBlbnNlUGFnZSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudHtcclxuXHJcbiAgb25TdWJtaXQ9KGV4cGVuc2UpPT57XHJcbiAgICB0aGlzLnByb3BzLmFkZEV4cGVuc2UoZXhwZW5zZSk7XHJcbiAgICB0aGlzLnByb3BzLmhpc3RvcnkucHVzaCgnLycpO1xyXG4gIH07XHJcbiAgcmVuZGVyKCl7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8ZGl2PlxyXG4gICAgICAgIDxoMT5BZGRFeHBlbnNlUGFnZTwvaDE+XHJcbiAgICAgICAgPEV4cGVuc2VGb3JtIG9uU3VibWl0PXt0aGlzLm9uU3VibWl0fSAvPlxyXG4gICAgICA8L2Rpdj5cclxuICAgICk7XHJcbiAgfVxyXG59XHJcblxyXG5jb25zdCBtYXBEaXNwYXRjaFRvUHJvcHMgPSAoZGlzcGF0Y2gpPT4oe1xyXG4gIGFkZEV4cGVuc2U6IChleHBlbnNlKT0+IGRpc3BhdGNoKGFkZEV4cGVuc2UoZXhwZW5zZSkpXHJcbn0pO1xyXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KHVuZGVmaW5lZCwgbWFwRGlzcGF0Y2hUb1Byb3BzKShBZGRFeHBlbnNlUGFnZSk7IiwidmFyIHYxID0gcmVxdWlyZSgnLi92MScpO1xudmFyIHY0ID0gcmVxdWlyZSgnLi92NCcpO1xuXG52YXIgdXVpZCA9IHY0O1xudXVpZC52MSA9IHYxO1xudXVpZC52NCA9IHY0O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHV1aWQ7XG4iLCJ2YXIgcm5nID0gcmVxdWlyZSgnLi9saWIvcm5nJyk7XG52YXIgYnl0ZXNUb1V1aWQgPSByZXF1aXJlKCcuL2xpYi9ieXRlc1RvVXVpZCcpO1xuXG4vLyAqKmB2MSgpYCAtIEdlbmVyYXRlIHRpbWUtYmFzZWQgVVVJRCoqXG4vL1xuLy8gSW5zcGlyZWQgYnkgaHR0cHM6Ly9naXRodWIuY29tL0xpb3NLL1VVSUQuanNcbi8vIGFuZCBodHRwOi8vZG9jcy5weXRob24ub3JnL2xpYnJhcnkvdXVpZC5odG1sXG5cbnZhciBfbm9kZUlkO1xudmFyIF9jbG9ja3NlcTtcblxuLy8gUHJldmlvdXMgdXVpZCBjcmVhdGlvbiB0aW1lXG52YXIgX2xhc3RNU2VjcyA9IDA7XG52YXIgX2xhc3ROU2VjcyA9IDA7XG5cbi8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vdXVpZGpzL3V1aWQgZm9yIEFQSSBkZXRhaWxzXG5mdW5jdGlvbiB2MShvcHRpb25zLCBidWYsIG9mZnNldCkge1xuICB2YXIgaSA9IGJ1ZiAmJiBvZmZzZXQgfHwgMDtcbiAgdmFyIGIgPSBidWYgfHwgW107XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIHZhciBub2RlID0gb3B0aW9ucy5ub2RlIHx8IF9ub2RlSWQ7XG4gIHZhciBjbG9ja3NlcSA9IG9wdGlvbnMuY2xvY2tzZXEgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuY2xvY2tzZXEgOiBfY2xvY2tzZXE7XG5cbiAgLy8gbm9kZSBhbmQgY2xvY2tzZXEgbmVlZCB0byBiZSBpbml0aWFsaXplZCB0byByYW5kb20gdmFsdWVzIGlmIHRoZXkncmUgbm90XG4gIC8vIHNwZWNpZmllZC4gIFdlIGRvIHRoaXMgbGF6aWx5IHRvIG1pbmltaXplIGlzc3VlcyByZWxhdGVkIHRvIGluc3VmZmljaWVudFxuICAvLyBzeXN0ZW0gZW50cm9weS4gIFNlZSAjMTg5XG4gIGlmIChub2RlID09IG51bGwgfHwgY2xvY2tzZXEgPT0gbnVsbCkge1xuICAgIHZhciBzZWVkQnl0ZXMgPSBybmcoKTtcbiAgICBpZiAobm9kZSA9PSBudWxsKSB7XG4gICAgICAvLyBQZXIgNC41LCBjcmVhdGUgYW5kIDQ4LWJpdCBub2RlIGlkLCAoNDcgcmFuZG9tIGJpdHMgKyBtdWx0aWNhc3QgYml0ID0gMSlcbiAgICAgIG5vZGUgPSBfbm9kZUlkID0gW1xuICAgICAgICBzZWVkQnl0ZXNbMF0gfCAweDAxLFxuICAgICAgICBzZWVkQnl0ZXNbMV0sIHNlZWRCeXRlc1syXSwgc2VlZEJ5dGVzWzNdLCBzZWVkQnl0ZXNbNF0sIHNlZWRCeXRlc1s1XVxuICAgICAgXTtcbiAgICB9XG4gICAgaWYgKGNsb2Nrc2VxID09IG51bGwpIHtcbiAgICAgIC8vIFBlciA0LjIuMiwgcmFuZG9taXplICgxNCBiaXQpIGNsb2Nrc2VxXG4gICAgICBjbG9ja3NlcSA9IF9jbG9ja3NlcSA9IChzZWVkQnl0ZXNbNl0gPDwgOCB8IHNlZWRCeXRlc1s3XSkgJiAweDNmZmY7XG4gICAgfVxuICB9XG5cbiAgLy8gVVVJRCB0aW1lc3RhbXBzIGFyZSAxMDAgbmFuby1zZWNvbmQgdW5pdHMgc2luY2UgdGhlIEdyZWdvcmlhbiBlcG9jaCxcbiAgLy8gKDE1ODItMTAtMTUgMDA6MDApLiAgSlNOdW1iZXJzIGFyZW4ndCBwcmVjaXNlIGVub3VnaCBmb3IgdGhpcywgc29cbiAgLy8gdGltZSBpcyBoYW5kbGVkIGludGVybmFsbHkgYXMgJ21zZWNzJyAoaW50ZWdlciBtaWxsaXNlY29uZHMpIGFuZCAnbnNlY3MnXG4gIC8vICgxMDAtbmFub3NlY29uZHMgb2Zmc2V0IGZyb20gbXNlY3MpIHNpbmNlIHVuaXggZXBvY2gsIDE5NzAtMDEtMDEgMDA6MDAuXG4gIHZhciBtc2VjcyA9IG9wdGlvbnMubXNlY3MgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMubXNlY3MgOiBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcblxuICAvLyBQZXIgNC4yLjEuMiwgdXNlIGNvdW50IG9mIHV1aWQncyBnZW5lcmF0ZWQgZHVyaW5nIHRoZSBjdXJyZW50IGNsb2NrXG4gIC8vIGN5Y2xlIHRvIHNpbXVsYXRlIGhpZ2hlciByZXNvbHV0aW9uIGNsb2NrXG4gIHZhciBuc2VjcyA9IG9wdGlvbnMubnNlY3MgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMubnNlY3MgOiBfbGFzdE5TZWNzICsgMTtcblxuICAvLyBUaW1lIHNpbmNlIGxhc3QgdXVpZCBjcmVhdGlvbiAoaW4gbXNlY3MpXG4gIHZhciBkdCA9IChtc2VjcyAtIF9sYXN0TVNlY3MpICsgKG5zZWNzIC0gX2xhc3ROU2VjcykvMTAwMDA7XG5cbiAgLy8gUGVyIDQuMi4xLjIsIEJ1bXAgY2xvY2tzZXEgb24gY2xvY2sgcmVncmVzc2lvblxuICBpZiAoZHQgPCAwICYmIG9wdGlvbnMuY2xvY2tzZXEgPT09IHVuZGVmaW5lZCkge1xuICAgIGNsb2Nrc2VxID0gY2xvY2tzZXEgKyAxICYgMHgzZmZmO1xuICB9XG5cbiAgLy8gUmVzZXQgbnNlY3MgaWYgY2xvY2sgcmVncmVzc2VzIChuZXcgY2xvY2tzZXEpIG9yIHdlJ3ZlIG1vdmVkIG9udG8gYSBuZXdcbiAgLy8gdGltZSBpbnRlcnZhbFxuICBpZiAoKGR0IDwgMCB8fCBtc2VjcyA+IF9sYXN0TVNlY3MpICYmIG9wdGlvbnMubnNlY3MgPT09IHVuZGVmaW5lZCkge1xuICAgIG5zZWNzID0gMDtcbiAgfVxuXG4gIC8vIFBlciA0LjIuMS4yIFRocm93IGVycm9yIGlmIHRvbyBtYW55IHV1aWRzIGFyZSByZXF1ZXN0ZWRcbiAgaWYgKG5zZWNzID49IDEwMDAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCd1dWlkLnYxKCk6IENhblxcJ3QgY3JlYXRlIG1vcmUgdGhhbiAxME0gdXVpZHMvc2VjJyk7XG4gIH1cblxuICBfbGFzdE1TZWNzID0gbXNlY3M7XG4gIF9sYXN0TlNlY3MgPSBuc2VjcztcbiAgX2Nsb2Nrc2VxID0gY2xvY2tzZXE7XG5cbiAgLy8gUGVyIDQuMS40IC0gQ29udmVydCBmcm9tIHVuaXggZXBvY2ggdG8gR3JlZ29yaWFuIGVwb2NoXG4gIG1zZWNzICs9IDEyMjE5MjkyODAwMDAwO1xuXG4gIC8vIGB0aW1lX2xvd2BcbiAgdmFyIHRsID0gKChtc2VjcyAmIDB4ZmZmZmZmZikgKiAxMDAwMCArIG5zZWNzKSAlIDB4MTAwMDAwMDAwO1xuICBiW2krK10gPSB0bCA+Pj4gMjQgJiAweGZmO1xuICBiW2krK10gPSB0bCA+Pj4gMTYgJiAweGZmO1xuICBiW2krK10gPSB0bCA+Pj4gOCAmIDB4ZmY7XG4gIGJbaSsrXSA9IHRsICYgMHhmZjtcblxuICAvLyBgdGltZV9taWRgXG4gIHZhciB0bWggPSAobXNlY3MgLyAweDEwMDAwMDAwMCAqIDEwMDAwKSAmIDB4ZmZmZmZmZjtcbiAgYltpKytdID0gdG1oID4+PiA4ICYgMHhmZjtcbiAgYltpKytdID0gdG1oICYgMHhmZjtcblxuICAvLyBgdGltZV9oaWdoX2FuZF92ZXJzaW9uYFxuICBiW2krK10gPSB0bWggPj4+IDI0ICYgMHhmIHwgMHgxMDsgLy8gaW5jbHVkZSB2ZXJzaW9uXG4gIGJbaSsrXSA9IHRtaCA+Pj4gMTYgJiAweGZmO1xuXG4gIC8vIGBjbG9ja19zZXFfaGlfYW5kX3Jlc2VydmVkYCAoUGVyIDQuMi4yIC0gaW5jbHVkZSB2YXJpYW50KVxuICBiW2krK10gPSBjbG9ja3NlcSA+Pj4gOCB8IDB4ODA7XG5cbiAgLy8gYGNsb2NrX3NlcV9sb3dgXG4gIGJbaSsrXSA9IGNsb2Nrc2VxICYgMHhmZjtcblxuICAvLyBgbm9kZWBcbiAgZm9yICh2YXIgbiA9IDA7IG4gPCA2OyArK24pIHtcbiAgICBiW2kgKyBuXSA9IG5vZGVbbl07XG4gIH1cblxuICByZXR1cm4gYnVmID8gYnVmIDogYnl0ZXNUb1V1aWQoYik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdjE7XG4iLCJ2YXIgcm5nID0gcmVxdWlyZSgnLi9saWIvcm5nJyk7XG52YXIgYnl0ZXNUb1V1aWQgPSByZXF1aXJlKCcuL2xpYi9ieXRlc1RvVXVpZCcpO1xuXG5mdW5jdGlvbiB2NChvcHRpb25zLCBidWYsIG9mZnNldCkge1xuICB2YXIgaSA9IGJ1ZiAmJiBvZmZzZXQgfHwgMDtcblxuICBpZiAodHlwZW9mKG9wdGlvbnMpID09ICdzdHJpbmcnKSB7XG4gICAgYnVmID0gb3B0aW9ucyA9PT0gJ2JpbmFyeScgPyBuZXcgQXJyYXkoMTYpIDogbnVsbDtcbiAgICBvcHRpb25zID0gbnVsbDtcbiAgfVxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICB2YXIgcm5kcyA9IG9wdGlvbnMucmFuZG9tIHx8IChvcHRpb25zLnJuZyB8fCBybmcpKCk7XG5cbiAgLy8gUGVyIDQuNCwgc2V0IGJpdHMgZm9yIHZlcnNpb24gYW5kIGBjbG9ja19zZXFfaGlfYW5kX3Jlc2VydmVkYFxuICBybmRzWzZdID0gKHJuZHNbNl0gJiAweDBmKSB8IDB4NDA7XG4gIHJuZHNbOF0gPSAocm5kc1s4XSAmIDB4M2YpIHwgMHg4MDtcblxuICAvLyBDb3B5IGJ5dGVzIHRvIGJ1ZmZlciwgaWYgcHJvdmlkZWRcbiAgaWYgKGJ1Zikge1xuICAgIGZvciAodmFyIGlpID0gMDsgaWkgPCAxNjsgKytpaSkge1xuICAgICAgYnVmW2kgKyBpaV0gPSBybmRzW2lpXTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYnVmIHx8IGJ5dGVzVG9VdWlkKHJuZHMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHY0O1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IEV4cGVuc2VGb3JtIGZyb20gJy4vRXhwZW5zZUZvcm0nO1xyXG5pbXBvcnQgeyBjb25uZWN0IH0gZnJvbSAncmVhY3QtcmVkdXgnO1xyXG5pbXBvcnQgeyBlZGl0RXhwZW5zZSwgcmVtb3ZlRXhwZW5zZSB9IGZyb20gJy4uL2FjdGlvbnMvZXhwZW5zZXMnO1xyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBFZGl0RXhwZW5zZVBhZ2UgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnR7XHJcbiAgb25TdWJtaXQgPSAoZXhwZW5zZSk9PntcclxuICAgIHRoaXMucHJvcHMuZWRpdEV4cGVuc2UodGhpcy5wcm9wcy5leHBlbnNlLmlkLCBleHBlbnNlKTtcclxuICAgIHRoaXMucHJvcHMuaGlzdG9yeS5wdXNoKCcvJyk7XHJcbiAgfTtcclxuICBvblJlbW92ZSA9ICgpPT57XHJcbiAgICB0aGlzLnByb3BzLnJlbW92ZUV4cGVuc2UoeyBpZDogdGhpcy5wcm9wcy5leHBlbnNlLmlkfSk7XHJcbiAgICB0aGlzLnByb3BzLmhpc3RvcnkucHVzaCgnLycpO1xyXG4gIH07XHJcbiAgcmVuZGVyKCl7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8ZGl2PlxyXG4gICAgICAgIDxFeHBlbnNlRm9ybSBcclxuICAgICAgICAgIGV4cGVuc2U9e3RoaXMucHJvcHMuZXhwZW5zZX1cclxuICAgICAgICAgIG9uU3VibWl0PXt0aGlzLm9uU3VibWl0fVxyXG4gICAgICAgIC8+XHJcbiAgICAgICAgPGJ1dHRvbiBvbkNsaWNrPXt0aGlzLm9uUmVtb3ZlfSA+UmVtb3ZlPC9idXR0b24+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgKTtcclxuICB9XHJcbn1cclxuXHJcbmNvbnN0IG1hcFN0YXRlVG9Qcm9wcyA9IChzdGF0ZSwgcHJvcHMpPT57XHJcbiAgcmV0dXJuIHtcclxuICAgIGV4cGVuc2U6IHN0YXRlLmV4cGVuc2VzLmZpbmQoKGV4cGVuc2UpPT4oZXhwZW5zZS5pZCA9PT0gcHJvcHMubWF0Y2gucGFyYW1zLmlkKSlcclxuICB9XHJcbn07XHJcbmNvbnN0IG1hcERpc3BhdGhUb1Byb3BzID0gKGRpc3BhdGNoLCBwcm9wcyk9PntcclxuICByZXR1cm4ge1xyXG4gICAgZWRpdEV4cGVuc2UgOiAoaWQsIGV4cGVuc2UpPT4gZGlzcGF0Y2goZWRpdEV4cGVuc2UoaWQsIGV4cGVuc2UpKSxcclxuICAgIHJlbW92ZUV4cGVuc2U6IChkYXRhKT0+IGRpc3BhdGNoKHJlbW92ZUV4cGVuc2UoZGF0YSkpXHJcbiAgfVxyXG59O1xyXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0aFRvUHJvcHMpKEVkaXRFeHBlbnNlUGFnZSk7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuXHJcbmNvbnN0IEhlbHBQYWdlID0gKCkgPT4gKFxyXG4gIDxkaXY+SGVscCBQYWdlPC9kaXY+XHJcbik7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBIZWxwUGFnZTsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XHJcblxyXG5jb25zdCBOb3RGb3VuZFBhZ2UgPSAoKT0+IChcclxuICA8ZGl2PlxyXG4gICAgPGgyPuCkhuCkqiDgpJfgpLLgpKQg4KSo4KS/4KSV4KSyIOCksuCkv+CkjyDgpLngpYghLi4uNDA0PC9oMj5cclxuICAgIDxMaW5rIHRvPVwiL1wiPkdvIHRvIEhvbWUuLjwvTGluaz5cclxuICA8L2Rpdj5cclxuKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IE5vdEZvdW5kUGFnZTsiLCJpbXBvcnQgeyBjcmVhdGVTdG9yZSwgY29tYmluZVJlZHVjZXJzIH0gZnJvbSAncmVkdXgnO1xyXG5pbXBvcnQgZXhwZW5zZVJlZHVjZXIgZnJvbSAnLi4vcmVkdWNlcnMvZXhwZW5zZXMnO1xyXG5pbXBvcnQgZmlsdGVyUmVkdWNlciBmcm9tICcuLi9yZWR1Y2Vycy9maWx0ZXJzJztcclxuXHJcblxyXG4vLyBzdG9yZSBjcmVhdGlvblxyXG5leHBvcnQgZGVmYXVsdCAoKT0+e1xyXG4gIGNvbnN0IHN0b3JlID0gY3JlYXRlU3RvcmUoXHJcbiAgICBjb21iaW5lUmVkdWNlcnMoe1xyXG4gICAgICBleHBlbnNlczogZXhwZW5zZVJlZHVjZXIsXHJcbiAgICAgIGZpbHRlcnM6IGZpbHRlclJlZHVjZXJcclxuICAgIH0pLFxyXG4gICAgd2luZG93Ll9fUkVEVVhfREVWVE9PTFNfRVhURU5TSU9OX18gJiYgd2luZG93Ll9fUkVEVVhfREVWVE9PTFNfRVhURU5TSU9OX18oKVxyXG4gICk7XHJcblxyXG4gIHJldHVybiBzdG9yZTtcclxufTtcclxuXHJcbiIsIi8vIGV4cGVuc2UgcmVkdWNlclxyXG5jb25zdCBleHBlbnNlUmVkdWNlckRlZmF1bHRTdGF0ZSA9IFtdO1xyXG5jb25zdCBleHBlbnNlUmVkdWNlciA9IChzdGF0ZSA9IGV4cGVuc2VSZWR1Y2VyRGVmYXVsdFN0YXRlLCBhY3Rpb24pPT57XHJcbiAgc3dpdGNoIChhY3Rpb24udHlwZSl7XHJcbiAgICBjYXNlICdBRERfRVhQRU5TRSc6XHJcbiAgICAgIHJldHVybiBbLi4uc3RhdGUsIGFjdGlvbi5leHBlbnNlXTtcclxuICAgIGNhc2UgJ1JFTU9WRV9FWFBFTlNFJzpcclxuICAgICAgcmV0dXJuIHN0YXRlLmZpbHRlcigoeyBpZCB9KT0+KGlkICE9PSBhY3Rpb24uaWQpKTtcclxuICAgIGNhc2UgJ0VESVRfRVhQRU5TRSc6XHJcbiAgICAgIHJldHVybiBzdGF0ZS5tYXAoKGV4cGVuc2UpPT57XHJcbiAgICAgICAgaWYoZXhwZW5zZS5pZCA9PT0gYWN0aW9uLmlkKXtcclxuICAgICAgICAgIHJldHVybiB7IC4uLmV4cGVuc2UsIC4uLmFjdGlvbi51cGRhdGVzIH07XHJcbiAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICByZXR1cm4gZXhwZW5zZTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgZGVmYXVsdDogXHJcbiAgICAgIHJldHVybiBzdGF0ZTtcclxuICB9XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBleHBlbnNlUmVkdWNlcjsiLCJpbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudCc7XHJcblxyXG4vLyBmaWx0ZXIgcmVkdWNlclxyXG5jb25zdCBmaWx0ZXJSZWR1Y2VyRGVmYXVsdFN0YXRlID0ge1xyXG4gIHRleHQ6ICcnLFxyXG4gIHNvcnRCeTogJ2RhdGUnLFxyXG4gIHN0YXJ0RGF0ZTogbW9tZW50KCkuc3RhcnRPZignbW9udGgnKSxcclxuICBlbmREYXRlOiBtb21lbnQoKS5lbmRPZignbW9udGgnKVxyXG59O1xyXG5jb25zdCBmaWx0ZXJSZWR1Y2VyID0gKHN0YXRlID0gZmlsdGVyUmVkdWNlckRlZmF1bHRTdGF0ZSwgYWN0aW9uKT0+e1xyXG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpe1xyXG4gICAgY2FzZSAnU0VUX1RFWFRfRklMVEVSJzpcclxuICAgICAgcmV0dXJuIHsuLi5zdGF0ZSwgdGV4dDogYWN0aW9uLnRleHR9O1xyXG4gICAgY2FzZSAnU09SVF9CWV9BTU9VTlQnOlxyXG4gICAgICByZXR1cm4gey4uLnN0YXRlLCBzb3J0Qnk6ICdhbW91bnQnfTtcclxuICAgIGNhc2UgJ1NPUlRfQllfREFURSc6XHJcbiAgICAgIHJldHVybiB7Li4uc3RhdGUsIHNvcnRCeTogJ2RhdGUnfTtcclxuICAgIGNhc2UgJ1NFVF9TVEFSVF9EQVRFJzpcclxuICAgICAgcmV0dXJuIHsuLi5zdGF0ZSwgc3RhcnREYXRlOiBhY3Rpb24uc3RhcnREYXRlfTtcclxuICAgIGNhc2UgJ1NFVF9FTkRfREFURSc6XHJcbiAgICAgIHJldHVybiB7Li4uc3RhdGUsIGVuZERhdGU6IGFjdGlvbi5lbmREYXRlfTtcclxuICAgIGRlZmF1bHQ6XHJcbiAgICAgIHJldHVybiBzdGF0ZTtcclxuICB9XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmaWx0ZXJSZWR1Y2VyOyJdLCJzb3VyY2VSb290IjoiIn0=